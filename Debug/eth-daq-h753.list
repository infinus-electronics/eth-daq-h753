
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023748  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000384c  080239e8  080239e8  000249e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027234  08027234  00028234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802723c  0802723c  0002823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08027240  08027240  00028240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08027244  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002638  20000088  080272cc  00029088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200026c0  080272cc  000296c0  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002cc0  080272cc  00029cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    0002400c  30000000  30000000  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000c8000  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006314a  00000000  00000000  000c802e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c019  00000000  00000000  0012b178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003178  00000000  00000000  00137198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027a3  00000000  00000000  0013a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f64c  00000000  00000000  0013cab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005c788  00000000  00000000  0018c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191e49  00000000  00000000  001e8887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0037a6d0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d73c  00000000  00000000  0037a714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00387e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080239d0 	.word	0x080239d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	080239d0 	.word	0x080239d0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 f9bf 	bl	8001a28 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f018 fff9 	bl	801976c <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 800077a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800077e:	2141      	movs	r1, #65	@ 0x41
 8000780:	48a7      	ldr	r0, [pc, #668]	@ (8000a20 <main+0x380>)
 8000782:	f021 fbb2 	bl	8021eea <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 8000786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800078a:	2142      	movs	r1, #66	@ 0x42
 800078c:	48a5      	ldr	r0, [pc, #660]	@ (8000a24 <main+0x384>)
 800078e:	f021 fbac 	bl	8021eea <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000792:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000796:	2143      	movs	r1, #67	@ 0x43
 8000798:	48a3      	ldr	r0, [pc, #652]	@ (8000a28 <main+0x388>)
 800079a:	f021 fba6 	bl	8021eea <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 800079e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007a2:	2144      	movs	r1, #68	@ 0x44
 80007a4:	48a1      	ldr	r0, [pc, #644]	@ (8000a2c <main+0x38c>)
 80007a6:	f021 fba0 	bl	8021eea <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007aa:	f3bf 8f4f 	dsb	sy
}
 80007ae:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 fa80 	bl	8000cb4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b4:	f000 fb2c 	bl	8000e10 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007b8:	f000 ff30 	bl	800161c <vHeapInit>
  vStartHighResolutionTimer();
 80007bc:	f021 f9b4 	bl	8021b28 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 fe54 	bl	800146c <MX_GPIO_Init>
  MX_DMA_Init();
 80007c4:	f000 fe0a 	bl	80013dc <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007c8:	f000 fdbc 	bl	8001344 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007cc:	f000 fb90 	bl	8000ef0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d0:	f000 fbe6 	bl	8000fa0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007d4:	f000 fc3a 	bl	800104c <MX_SPI3_Init>
  MX_TIM1_Init();
 80007d8:	f000 fc8e 	bl	80010f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007dc:	f000 fcde 	bl	800119c <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e0:	f000 fb46 	bl	8000e70 <MX_I2C4_Init>
  MX_TIM4_Init();
 80007e4:	f000 fd28 	bl	8001238 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007e8:	4b91      	ldr	r3, [pc, #580]	@ (8000a30 <main+0x390>)
 80007ea:	4a92      	ldr	r2, [pc, #584]	@ (8000a34 <main+0x394>)
 80007ec:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007ee:	4b90      	ldr	r3, [pc, #576]	@ (8000a30 <main+0x390>)
 80007f0:	4a91      	ldr	r2, [pc, #580]	@ (8000a38 <main+0x398>)
 80007f2:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007f4:	4b8e      	ldr	r3, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80007fa:	f3bf 8f4f 	dsb	sy
}
 80007fe:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 8000800:	4b8b      	ldr	r3, [pc, #556]	@ (8000a30 <main+0x390>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a8a      	ldr	r2, [pc, #552]	@ (8000a30 <main+0x390>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 800080c:	4b8b      	ldr	r3, [pc, #556]	@ (8000a3c <main+0x39c>)
 800080e:	4a8c      	ldr	r2, [pc, #560]	@ (8000a40 <main+0x3a0>)
 8000810:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 8000812:	4b8a      	ldr	r3, [pc, #552]	@ (8000a3c <main+0x39c>)
 8000814:	4a88      	ldr	r2, [pc, #544]	@ (8000a38 <main+0x398>)
 8000816:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000818:	4b88      	ldr	r3, [pc, #544]	@ (8000a3c <main+0x39c>)
 800081a:	2201      	movs	r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800081e:	f3bf 8f4f 	dsb	sy
}
 8000822:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 8000824:	4b85      	ldr	r3, [pc, #532]	@ (8000a3c <main+0x39c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a84      	ldr	r2, [pc, #528]	@ (8000a3c <main+0x39c>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6013      	str	r3, [r2, #0]
//  GPIOD->BSRR = 0x00FF00FF;

  TIM4->CR1 |= TIM_CR1_URS;
 8000830:	4b84      	ldr	r3, [pc, #528]	@ (8000a44 <main+0x3a4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a83      	ldr	r2, [pc, #524]	@ (8000a44 <main+0x3a4>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 800083c:	4b81      	ldr	r3, [pc, #516]	@ (8000a44 <main+0x3a4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a80      	ldr	r2, [pc, #512]	@ (8000a44 <main+0x3a4>)
 8000842:	f023 0302 	bic.w	r3, r3, #2
 8000846:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 8000848:	4b7e      	ldr	r3, [pc, #504]	@ (8000a44 <main+0x3a4>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	4a7d      	ldr	r2, [pc, #500]	@ (8000a44 <main+0x3a4>)
 800084e:	f023 0308 	bic.w	r3, r3, #8
 8000852:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 8000854:	4b7b      	ldr	r3, [pc, #492]	@ (8000a44 <main+0x3a4>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a7a      	ldr	r2, [pc, #488]	@ (8000a44 <main+0x3a4>)
 800085a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800085e:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000860:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <main+0x3a4>)
 8000862:	6a1b      	ldr	r3, [r3, #32]
 8000864:	4a77      	ldr	r2, [pc, #476]	@ (8000a44 <main+0x3a4>)
 8000866:	f043 0311 	orr.w	r3, r3, #17
 800086a:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 800086c:	4b75      	ldr	r3, [pc, #468]	@ (8000a44 <main+0x3a4>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	4a74      	ldr	r2, [pc, #464]	@ (8000a44 <main+0x3a4>)
 8000872:	f043 0303 	orr.w	r3, r3, #3
 8000876:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 8000878:	4b72      	ldr	r3, [pc, #456]	@ (8000a44 <main+0x3a4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a71      	ldr	r2, [pc, #452]	@ (8000a44 <main+0x3a4>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6013      	str	r3, [r2, #0]


  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800088a:	486f      	ldr	r0, [pc, #444]	@ (8000a48 <main+0x3a8>)
 800088c:	f01b fa84 	bl	801bd98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000896:	486c      	ldr	r0, [pc, #432]	@ (8000a48 <main+0x3a8>)
 8000898:	f01b fa7e 	bl	801bd98 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800089c:	2032      	movs	r0, #50	@ 0x32
 800089e:	f018 fff7 	bl	8019890 <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a8:	4867      	ldr	r0, [pc, #412]	@ (8000a48 <main+0x3a8>)
 80008aa:	f01b fa75 	bl	801bd98 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008ae:	2032      	movs	r0, #50	@ 0x32
 80008b0:	f018 ffee 	bl	8019890 <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008b4:	4b65      	ldr	r3, [pc, #404]	@ (8000a4c <main+0x3ac>)
 80008b6:	4a66      	ldr	r2, [pc, #408]	@ (8000a50 <main+0x3b0>)
 80008b8:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008ba:	bf00      	nop
 80008bc:	4b63      	ldr	r3, [pc, #396]	@ (8000a4c <main+0x3ac>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0312 	and.w	r3, r3, #18
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <main+0x21c>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008c8:	4b60      	ldr	r3, [pc, #384]	@ (8000a4c <main+0x3ac>)
 80008ca:	2239      	movs	r2, #57	@ 0x39
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008ce:	bf00      	nop
 80008d0:	4b5e      	ldr	r3, [pc, #376]	@ (8000a4c <main+0x3ac>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0302 	and.w	r3, r3, #2
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f9      	beq.n	80008d0 <main+0x230>
  I2C4->TXDR = 0; //MSB
 80008dc:	4b5b      	ldr	r3, [pc, #364]	@ (8000a4c <main+0x3ac>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e2:	bf00      	nop
 80008e4:	4b59      	ldr	r3, [pc, #356]	@ (8000a4c <main+0x3ac>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <main+0x244>
  I2C4->TXDR = 4; //LSB
 80008f0:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <main+0x3ac>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 80008f6:	bf00      	nop
 80008f8:	4b54      	ldr	r3, [pc, #336]	@ (8000a4c <main+0x3ac>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f9      	beq.n	80008f8 <main+0x258>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 8000904:	4b51      	ldr	r3, [pc, #324]	@ (8000a4c <main+0x3ac>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0310 	and.w	r3, r3, #16
 800090c:	2b00      	cmp	r3, #0
 800090e:	d005      	beq.n	800091c <main+0x27c>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000910:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <main+0x3ac>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a4d      	ldr	r2, [pc, #308]	@ (8000a4c <main+0x3ac>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a54 <main+0x3b4>)
 800091e:	4a40      	ldr	r2, [pc, #256]	@ (8000a20 <main+0x380>)
 8000920:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 8000922:	4b4c      	ldr	r3, [pc, #304]	@ (8000a54 <main+0x3b4>)
 8000924:	4a3f      	ldr	r2, [pc, #252]	@ (8000a24 <main+0x384>)
 8000926:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 8000928:	4b4a      	ldr	r3, [pc, #296]	@ (8000a54 <main+0x3b4>)
 800092a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a58 <main+0x3b8>)
 800092c:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 800092e:	4b49      	ldr	r3, [pc, #292]	@ (8000a54 <main+0x3b4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a48      	ldr	r2, [pc, #288]	@ (8000a54 <main+0x3b4>)
 8000934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000938:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 800093a:	4b46      	ldr	r3, [pc, #280]	@ (8000a54 <main+0x3b4>)
 800093c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000940:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 8000942:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <main+0x3b4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a43      	ldr	r2, [pc, #268]	@ (8000a54 <main+0x3b4>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800094e:	f3bf 8f4f 	dsb	sy
}
 8000952:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000954:	4b3f      	ldr	r3, [pc, #252]	@ (8000a54 <main+0x3b4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a3e      	ldr	r2, [pc, #248]	@ (8000a54 <main+0x3b4>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000960:	4b3e      	ldr	r3, [pc, #248]	@ (8000a5c <main+0x3bc>)
 8000962:	4a31      	ldr	r2, [pc, #196]	@ (8000a28 <main+0x388>)
 8000964:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 8000966:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <main+0x3bc>)
 8000968:	4a30      	ldr	r2, [pc, #192]	@ (8000a2c <main+0x38c>)
 800096a:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 800096c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a5c <main+0x3bc>)
 800096e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a60 <main+0x3c0>)
 8000970:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 8000972:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <main+0x3bc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a39      	ldr	r2, [pc, #228]	@ (8000a5c <main+0x3bc>)
 8000978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800097c:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 800097e:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <main+0x3bc>)
 8000980:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000984:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 8000986:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <main+0x3bc>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a34      	ldr	r2, [pc, #208]	@ (8000a5c <main+0x3bc>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
}
 8000996:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000998:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <main+0x3bc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a5c <main+0x3bc>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a64 <main+0x3c4>)
 80009a6:	4a30      	ldr	r2, [pc, #192]	@ (8000a68 <main+0x3c8>)
 80009a8:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000a64 <main+0x3c4>)
 80009ac:	4a2f      	ldr	r2, [pc, #188]	@ (8000a6c <main+0x3cc>)
 80009ae:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <main+0x3c4>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009b6:	f3bf 8f4f 	dsb	sy
}
 80009ba:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <main+0x3c4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a28      	ldr	r2, [pc, #160]	@ (8000a64 <main+0x3c4>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009c8:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <main+0x3d0>)
 80009ca:	4a27      	ldr	r2, [pc, #156]	@ (8000a68 <main+0x3c8>)
 80009cc:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009ce:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <main+0x3d0>)
 80009d0:	4a28      	ldr	r2, [pc, #160]	@ (8000a74 <main+0x3d4>)
 80009d2:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <main+0x3d0>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009da:	f3bf 8f4f 	dsb	sy
}
 80009de:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009e0:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <main+0x3d0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <main+0x3d0>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR1 |= SPI_CR1_SPE;
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <main+0x3d8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <main+0x3d8>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <main+0x3d8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000a78 <main+0x3d8>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a02:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a0a:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <main+0x3dc>)
 8000a0c:	f01b f9c4 	bl	801bd98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a10:	2064      	movs	r0, #100	@ 0x64
 8000a12:	f018 ff3d 	bl	8019890 <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1c:	e030      	b.n	8000a80 <main+0x3e0>
 8000a1e:	bf00      	nop
 8000a20:	30000004 	.word	0x30000004
 8000a24:	30010004 	.word	0x30010004
 8000a28:	30020004 	.word	0x30020004
 8000a2c:	30022004 	.word	0x30022004
 8000a30:	40020070 	.word	0x40020070
 8000a34:	30024004 	.word	0x30024004
 8000a38:	58020c18 	.word	0x58020c18
 8000a3c:	40020088 	.word	0x40020088
 8000a40:	30024008 	.word	0x30024008
 8000a44:	40000800 	.word	0x40000800
 8000a48:	58020c00 	.word	0x58020c00
 8000a4c:	58001c00 	.word	0x58001c00
 8000a50:	02032018 	.word	0x02032018
 8000a54:	40020010 	.word	0x40020010
 8000a58:	40013030 	.word	0x40013030
 8000a5c:	40020028 	.word	0x40020028
 8000a60:	40003830 	.word	0x40003830
 8000a64:	40020040 	.word	0x40020040
 8000a68:	30000000 	.word	0x30000000
 8000a6c:	40013020 	.word	0x40013020
 8000a70:	40020058 	.word	0x40020058
 8000a74:	40003820 	.word	0x40003820
 8000a78:	40013000 	.word	0x40013000
 8000a7c:	58020000 	.word	0x58020000
 8000a80:	487a      	ldr	r0, [pc, #488]	@ (8000c6c <main+0x5cc>)
 8000a82:	f01b f989 	bl	801bd98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a86:	2064      	movs	r0, #100	@ 0x64
 8000a88:	f018 ff02 	bl	8019890 <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000a8c:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000a90:	803b      	strh	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000a92:	787b      	ldrb	r3, [r7, #1]
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	783a      	ldrb	r2, [r7, #0]
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4b75      	ldr	r3, [pc, #468]	@ (8000c70 <main+0x5d0>)
 8000a9c:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000a9e:	bf00      	nop
 8000aa0:	4b73      	ldr	r3, [pc, #460]	@ (8000c70 <main+0x5d0>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f9      	beq.n	8000aa0 <main+0x400>
  spi_data[1]++;
 8000aac:	787b      	ldrb	r3, [r7, #1]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	707b      	strb	r3, [r7, #1]
  spi_data[0] = 0b00010000; //sync control mode
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ab8:	787b      	ldrb	r3, [r7, #1]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	783a      	ldrb	r2, [r7, #0]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8000c70 <main+0x5d0>)
 8000ac2:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ac4:	bf00      	nop
 8000ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c70 <main+0x5d0>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <main+0x426>
  spi_data[1]++;
 8000ad2:	787b      	ldrb	r3, [r7, #1]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	707b      	strb	r3, [r7, #1]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000ada:	2309      	movs	r3, #9
 8000adc:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ade:	787b      	ldrb	r3, [r7, #1]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	783a      	ldrb	r2, [r7, #0]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	4b62      	ldr	r3, [pc, #392]	@ (8000c70 <main+0x5d0>)
 8000ae8:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000aea:	bf00      	nop
 8000aec:	4b60      	ldr	r3, [pc, #384]	@ (8000c70 <main+0x5d0>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0f9      	beq.n	8000aec <main+0x44c>
  spi_data[1]++;
 8000af8:	787b      	ldrb	r3, [r7, #1]
 8000afa:	3301      	adds	r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	707b      	strb	r3, [r7, #1]
  spi_data[0]=0b10000000; //external clock
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b04:	787b      	ldrb	r3, [r7, #1]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	783a      	ldrb	r2, [r7, #0]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	4b58      	ldr	r3, [pc, #352]	@ (8000c70 <main+0x5d0>)
 8000b0e:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b10:	bf00      	nop
 8000b12:	4b57      	ldr	r3, [pc, #348]	@ (8000c70 <main+0x5d0>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f9      	beq.n	8000b12 <main+0x472>
  spi_data[1]=0x80+0x03; //start conversion
 8000b1e:	2383      	movs	r3, #131	@ 0x83
 8000b20:	707b      	strb	r3, [r7, #1]
  spi_data[0]=0b00000010;
 8000b22:	2302      	movs	r3, #2
 8000b24:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b26:	787b      	ldrb	r3, [r7, #1]
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	783a      	ldrb	r2, [r7, #0]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	4b50      	ldr	r3, [pc, #320]	@ (8000c70 <main+0x5d0>)
 8000b30:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b32:	bf00      	nop
 8000b34:	4b4e      	ldr	r3, [pc, #312]	@ (8000c70 <main+0x5d0>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f9      	beq.n	8000b34 <main+0x494>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b40:	4b4b      	ldr	r3, [pc, #300]	@ (8000c70 <main+0x5d0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a4a      	ldr	r2, [pc, #296]	@ (8000c70 <main+0x5d0>)
 8000b46:	f023 0301 	bic.w	r3, r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]



  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000b4c:	4b48      	ldr	r3, [pc, #288]	@ (8000c70 <main+0x5d0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000b52:	4b47      	ldr	r3, [pc, #284]	@ (8000c70 <main+0x5d0>)
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	4a46      	ldr	r2, [pc, #280]	@ (8000c70 <main+0x5d0>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5c:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000b5e:	4b44      	ldr	r3, [pc, #272]	@ (8000c70 <main+0x5d0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a43      	ldr	r2, [pc, #268]	@ (8000c70 <main+0x5d0>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000b6a:	4b41      	ldr	r3, [pc, #260]	@ (8000c70 <main+0x5d0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a40      	ldr	r2, [pc, #256]	@ (8000c70 <main+0x5d0>)
 8000b70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b74:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000b76:	4b3f      	ldr	r3, [pc, #252]	@ (8000c74 <main+0x5d4>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c74 <main+0x5d4>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b82:	4b3c      	ldr	r3, [pc, #240]	@ (8000c74 <main+0x5d4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a3b      	ldr	r2, [pc, #236]	@ (8000c74 <main+0x5d4>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000b8e:	4b39      	ldr	r3, [pc, #228]	@ (8000c74 <main+0x5d4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a38      	ldr	r2, [pc, #224]	@ (8000c74 <main+0x5d4>)
 8000b94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b98:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000b9a:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <main+0x5d8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a36      	ldr	r2, [pc, #216]	@ (8000c78 <main+0x5d8>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000ba6:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <main+0x5d8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a33      	ldr	r2, [pc, #204]	@ (8000c78 <main+0x5d8>)
 8000bac:	f023 0302 	bic.w	r3, r3, #2
 8000bb0:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <main+0x5d8>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	4a30      	ldr	r2, [pc, #192]	@ (8000c78 <main+0x5d8>)
 8000bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bbc:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <main+0x5d8>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <main+0x5d8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000bca:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <main+0x5d8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a2a      	ldr	r2, [pc, #168]	@ (8000c78 <main+0x5d8>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000bd6:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <main+0x5dc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <main+0x5dc>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <main+0x5dc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a25      	ldr	r2, [pc, #148]	@ (8000c7c <main+0x5dc>)
 8000be8:	f023 0302 	bic.w	r3, r3, #2
 8000bec:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000bee:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <main+0x5dc>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4a22      	ldr	r2, [pc, #136]	@ (8000c7c <main+0x5dc>)
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf8:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <main+0x5dc>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c7c <main+0x5dc>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <main+0x5dc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <main+0x5dc>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000c12:	491b      	ldr	r1, [pc, #108]	@ (8000c80 <main+0x5e0>)
 8000c14:	2000      	movs	r0, #0
 8000c16:	f016 fedd 	bl	80179d4 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <main+0x5e4>)
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <main+0x5e8>)
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <main+0x5ec>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <main+0x5f0>)
 8000c28:	4a1a      	ldr	r2, [pc, #104]	@ (8000c94 <main+0x5f4>)
 8000c2a:	491b      	ldr	r1, [pc, #108]	@ (8000c98 <main+0x5f8>)
 8000c2c:	4814      	ldr	r0, [pc, #80]	@ (8000c80 <main+0x5e0>)
 8000c2e:	f00b ffaf 	bl	800cb90 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000c32:	f008 f8fd 	bl	8008e30 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <main+0x5fc>)
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000c44:	4916      	ldr	r1, [pc, #88]	@ (8000ca0 <main+0x600>)
 8000c46:	4817      	ldr	r0, [pc, #92]	@ (8000ca4 <main+0x604>)
 8000c48:	f002 fecc 	bl	80039e4 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000c4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <main+0x608>)
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	2301      	movs	r3, #1
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2300      	movs	r3, #0
 8000c56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000c5a:	4914      	ldr	r1, [pc, #80]	@ (8000cac <main+0x60c>)
 8000c5c:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <main+0x610>)
 8000c5e:	f002 fec1 	bl	80039e4 <xTaskCreate>
//      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
      vTaskStartScheduler();
 8000c62:	f003 f87b 	bl	8003d5c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c66:	bf00      	nop
 8000c68:	e7fd      	b.n	8000c66 <main+0x5c6>
 8000c6a:	bf00      	nop
 8000c6c:	58020000 	.word	0x58020000
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40003800 	.word	0x40003800
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	40000400 	.word	0x40000400
 8000c80:	20000724 	.word	0x20000724
 8000c84:	08026edc 	.word	0x08026edc
 8000c88:	08026ed8 	.word	0x08026ed8
 8000c8c:	08026ed4 	.word	0x08026ed4
 8000c90:	08026ed0 	.word	0x08026ed0
 8000c94:	08026ecc 	.word	0x08026ecc
 8000c98:	2000074c 	.word	0x2000074c
 8000c9c:	20000bf4 	.word	0x20000bf4
 8000ca0:	080239e8 	.word	0x080239e8
 8000ca4:	08001849 	.word	0x08001849
 8000ca8:	20000bf8 	.word	0x20000bf8
 8000cac:	080239f0 	.word	0x080239f0
 8000cb0:	08001871 	.word	0x08001871

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b09e      	sub	sp, #120	@ 0x78
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	224c      	movs	r2, #76	@ 0x4c
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f021 f911 	bl	8021eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2220      	movs	r2, #32
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f021 f90a 	bl	8021eea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f01b f9ac 	bl	801c034 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b48      	ldr	r3, [pc, #288]	@ (8000e04 <SystemClock_Config+0x150>)
 8000ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce4:	4a47      	ldr	r2, [pc, #284]	@ (8000e04 <SystemClock_Config+0x150>)
 8000ce6:	f023 0301 	bic.w	r3, r3, #1
 8000cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cec:	4b45      	ldr	r3, [pc, #276]	@ (8000e04 <SystemClock_Config+0x150>)
 8000cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b44      	ldr	r3, [pc, #272]	@ (8000e08 <SystemClock_Config+0x154>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a43      	ldr	r2, [pc, #268]	@ (8000e08 <SystemClock_Config+0x154>)
 8000cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b41      	ldr	r3, [pc, #260]	@ (8000e08 <SystemClock_Config+0x154>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d0e:	bf00      	nop
 8000d10:	4b3d      	ldr	r3, [pc, #244]	@ (8000e08 <SystemClock_Config+0x154>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d1c:	d1f8      	bne.n	8000d10 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e0c <SystemClock_Config+0x158>)
 8000d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d24:	4a39      	ldr	r2, [pc, #228]	@ (8000e0c <SystemClock_Config+0x158>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d2e:	4b37      	ldr	r3, [pc, #220]	@ (8000e0c <SystemClock_Config+0x158>)
 8000d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	4b31      	ldr	r3, [pc, #196]	@ (8000e08 <SystemClock_Config+0x154>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a30      	ldr	r2, [pc, #192]	@ (8000e08 <SystemClock_Config+0x154>)
 8000d46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <SystemClock_Config+0x154>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b2b      	ldr	r3, [pc, #172]	@ (8000e04 <SystemClock_Config+0x150>)
 8000d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e04 <SystemClock_Config+0x150>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d62:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <SystemClock_Config+0x150>)
 8000d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d6e:	bf00      	nop
 8000d70:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <SystemClock_Config+0x154>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d7c:	d1f8      	bne.n	8000d70 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d82:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d94:	2340      	movs	r3, #64	@ 0x40
 8000d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000da4:	230c      	movs	r3, #12
 8000da6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db4:	4618      	mov	r0, r3
 8000db6:	f01b f977 	bl	801c0a8 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000dc0:	f000 fe5f 	bl	8001a82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	233f      	movs	r3, #63	@ 0x3f
 8000dc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dd4:	2340      	movs	r3, #64	@ 0x40
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dd8:	2340      	movs	r3, #64	@ 0x40
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000de2:	2340      	movs	r3, #64	@ 0x40
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2102      	movs	r1, #2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f01b fdb5 	bl	801c95c <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000df8:	f000 fe43 	bl	8001a82 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3778      	adds	r7, #120	@ 0x78
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58000400 	.word	0x58000400
 8000e08:	58024800 	.word	0x58024800
 8000e0c:	58024400 	.word	0x58024400

08000e10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0b0      	sub	sp, #192	@ 0xc0
 8000e14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e16:	463b      	mov	r3, r7
 8000e18:	22c0      	movs	r2, #192	@ 0xc0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f021 f864 	bl	8021eea <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000e22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000e32:	2340      	movs	r3, #64	@ 0x40
 8000e34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000e42:	2340      	movs	r3, #64	@ 0x40
 8000e44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e52:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4618      	mov	r0, r3
 8000e58:	f01c f90c 	bl	801d074 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000e62:	f000 fe0e 	bl	8001a82 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	37c0      	adds	r7, #192	@ 0xc0
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <MX_I2C4_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eec <MX_I2C4_Init+0x7c>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000eaa:	480e      	ldr	r0, [pc, #56]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000eac:	f01a ff8e 	bl	801bdcc <HAL_I2C_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f000 fde4 	bl	8001a82 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4809      	ldr	r0, [pc, #36]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000ebe:	f01b f821 	bl	801bf04 <HAL_I2CEx_ConfigAnalogFilter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ec8:	f000 fddb 	bl	8001a82 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <MX_I2C4_Init+0x74>)
 8000ed0:	f01b f863 	bl	801bf9a <HAL_I2CEx_ConfigDigitalFilter>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 fdd2 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000a4 	.word	0x200000a4
 8000ee8:	58001c00 	.word	0x58001c00
 8000eec:	10c0ecff 	.word	0x10c0ecff

08000ef0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000ef6:	4a29      	ldr	r2, [pc, #164]	@ (8000f9c <MX_SPI1_Init+0xac>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000efc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f14:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f1e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f38:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f66:	2203      	movs	r2, #3
 8000f68:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f6c:	2230      	movs	r2, #48	@ 0x30
 8000f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_SPI1_Init+0xa8>)
 8000f84:	f01d fea2 	bl	801eccc <HAL_SPI_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000f8e:	f000 fd78 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000f8 	.word	0x200000f8
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fa4:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fa6:	4a28      	ldr	r2, [pc, #160]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000faa:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fba:	220f      	movs	r2, #15
 8000fbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fcc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fd4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000fd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fec:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000ff4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <MX_SPI2_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8001014:	2203      	movs	r2, #3
 8001016:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <MX_SPI2_Init+0xa4>)
 800101a:	2230      	movs	r2, #48	@ 0x30
 800101c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_SPI2_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_SPI2_Init+0xa4>)
 8001032:	f01d fe4b 	bl	801eccc <HAL_SPI_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800103c:	f000 fd21 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000180 	.word	0x20000180
 8001048:	40003800 	.word	0x40003800

0800104c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001050:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001052:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <MX_SPI3_Init+0xa8>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001058:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800105c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001066:	2203      	movs	r2, #3
 8001068:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106a:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001078:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800107c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_SPI3_Init+0xa4>)
 80010dc:	f01d fdf6 	bl	801eccc <HAL_SPI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80010e6:	f000 fccc 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000208 	.word	0x20000208
 80010f4:	40003c00 	.word	0x40003c00

080010f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <MX_TIM1_Init+0x9c>)
 8001118:	4a1f      	ldr	r2, [pc, #124]	@ (8001198 <MX_TIM1_Init+0xa0>)
 800111a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_TIM1_Init+0x9c>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_TIM1_Init+0x9c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM1_Init+0x9c>)
 800112a:	22ff      	movs	r2, #255	@ 0xff
 800112c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_TIM1_Init+0x9c>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MX_TIM1_Init+0x9c>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_TIM1_Init+0x9c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001140:	4814      	ldr	r0, [pc, #80]	@ (8001194 <MX_TIM1_Init+0x9c>)
 8001142:	f01e f9bc 	bl	801f4be <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 fc99 	bl	8001a82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480d      	ldr	r0, [pc, #52]	@ (8001194 <MX_TIM1_Init+0x9c>)
 800115e:	f01e fbf3 	bl	801f948 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001168:	f000 fc8b 	bl	8001a82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800116c:	2320      	movs	r3, #32
 800116e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_TIM1_Init+0x9c>)
 800117e:	f01f f8f5 	bl	802036c <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001188:	f000 fc7b 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000380 	.word	0x20000380
 8001198:	40010000 	.word	0x40010000

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <MX_TIM3_Init+0x98>)
 80011be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011c2:	22c7      	movs	r2, #199	@ 0xc7
 80011c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011ce:	2209      	movs	r2, #9
 80011d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011de:	4814      	ldr	r0, [pc, #80]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011e0:	f01e f96d 	bl	801f4be <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ea:	f000 fc4a 	bl	8001a82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_TIM3_Init+0x94>)
 80011fc:	f01e fba4 	bl	801f948 <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 fc3c 	bl	8001a82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_TIM3_Init+0x94>)
 8001218:	f01f f8a8 	bl	802036c <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001222:	f000 fc2e 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000418 	.word	0x20000418
 8001234:	40000400 	.word	0x40000400

08001238 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	@ 0x38
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800126a:	4b34      	ldr	r3, [pc, #208]	@ (800133c <MX_TIM4_Init+0x104>)
 800126c:	4a34      	ldr	r2, [pc, #208]	@ (8001340 <MX_TIM4_Init+0x108>)
 800126e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001270:	4b32      	ldr	r3, [pc, #200]	@ (800133c <MX_TIM4_Init+0x104>)
 8001272:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001276:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b30      	ldr	r3, [pc, #192]	@ (800133c <MX_TIM4_Init+0x104>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800127e:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <MX_TIM4_Init+0x104>)
 8001280:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001284:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_TIM4_Init+0x104>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <MX_TIM4_Init+0x104>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001292:	482a      	ldr	r0, [pc, #168]	@ (800133c <MX_TIM4_Init+0x104>)
 8001294:	f01e f913 	bl	801f4be <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800129e:	f000 fbf0 	bl	8001a82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4823      	ldr	r0, [pc, #140]	@ (800133c <MX_TIM4_Init+0x104>)
 80012b0:	f01e fb4a 	bl	801f948 <HAL_TIM_ConfigClockSource>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80012ba:	f000 fbe2 	bl	8001a82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012be:	481f      	ldr	r0, [pc, #124]	@ (800133c <MX_TIM4_Init+0x104>)
 80012c0:	f01e f9cc 	bl	801f65c <HAL_TIM_PWM_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80012ca:	f000 fbda 	bl	8001a82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4817      	ldr	r0, [pc, #92]	@ (800133c <MX_TIM4_Init+0x104>)
 80012de:	f01f f845 	bl	802036c <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80012e8:	f000 fbcb 	bl	8001a82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ec:	2360      	movs	r3, #96	@ 0x60
 80012ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 80012f0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80012f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	480d      	ldr	r0, [pc, #52]	@ (800133c <MX_TIM4_Init+0x104>)
 8001306:	f01e fa0b 	bl	801f720 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001310:	f000 fbb7 	bl	8001a82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001314:	2370      	movs	r3, #112	@ 0x70
 8001316:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	2204      	movs	r2, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	@ (800133c <MX_TIM4_Init+0x104>)
 8001320:	f01e f9fe 	bl	801f720 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800132a:	f000 fbaa 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800132e:	4803      	ldr	r0, [pc, #12]	@ (800133c <MX_TIM4_Init+0x104>)
 8001330:	f000 ffd0 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	@ 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000464 	.word	0x20000464
 8001340:	40000800 	.word	0x40000800

08001344 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001348:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 800134a:	4a23      	ldr	r2, [pc, #140]	@ (80013d8 <MX_USART3_UART_Init+0x94>)
 800134c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138c:	4811      	ldr	r0, [pc, #68]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 800138e:	f01f f87b 	bl	8020488 <HAL_UART_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001398:	f000 fb73 	bl	8001a82 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139c:	2100      	movs	r1, #0
 800139e:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 80013a0:	f020 f883 	bl	80214aa <HAL_UARTEx_SetTxFifoThreshold>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013aa:	f000 fb6a 	bl	8001a82 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 80013b2:	f020 f8b8 	bl	8021526 <HAL_UARTEx_SetRxFifoThreshold>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013bc:	f000 fb61 	bl	8001a82 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_USART3_UART_Init+0x90>)
 80013c2:	f020 f839 	bl	8021438 <HAL_UARTEx_DisableFifoMode>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013cc:	f000 fb59 	bl	8001a82 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000690 	.word	0x20000690
 80013d8:	40004800 	.word	0x40004800

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_DMA_Init+0x8c>)
 80013e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <MX_DMA_Init+0x8c>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <MX_DMA_Init+0x8c>)
 80013f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2106      	movs	r1, #6
 8001404:	200b      	movs	r0, #11
 8001406:	f018 fb62 	bl	8019ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800140a:	200b      	movs	r0, #11
 800140c:	f018 fb79 	bl	8019b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2106      	movs	r1, #6
 8001414:	200c      	movs	r0, #12
 8001416:	f018 fb5a 	bl	8019ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800141a:	200c      	movs	r0, #12
 800141c:	f018 fb71 	bl	8019b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2107      	movs	r1, #7
 8001424:	200d      	movs	r0, #13
 8001426:	f018 fb52 	bl	8019ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800142a:	200d      	movs	r0, #13
 800142c:	f018 fb69 	bl	8019b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2107      	movs	r1, #7
 8001434:	200e      	movs	r0, #14
 8001436:	f018 fb4a 	bl	8019ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800143a:	200e      	movs	r0, #14
 800143c:	f018 fb61 	bl	8019b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2107      	movs	r1, #7
 8001444:	200f      	movs	r0, #15
 8001446:	f018 fb42 	bl	8019ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800144a:	200f      	movs	r0, #15
 800144c:	f018 fb59 	bl	8019b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2107      	movs	r1, #7
 8001454:	2010      	movs	r0, #16
 8001456:	f018 fb3a 	bl	8019ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800145a:	2010      	movs	r0, #16
 800145c:	f018 fb51 	bl	8019b02 <HAL_NVIC_EnableIRQ>

}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	58024400 	.word	0x58024400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001482:	4b61      	ldr	r3, [pc, #388]	@ (8001608 <MX_GPIO_Init+0x19c>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001488:	4a5f      	ldr	r2, [pc, #380]	@ (8001608 <MX_GPIO_Init+0x19c>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001492:	4b5d      	ldr	r3, [pc, #372]	@ (8001608 <MX_GPIO_Init+0x19c>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a0:	4b59      	ldr	r3, [pc, #356]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a6:	4a58      	ldr	r2, [pc, #352]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b0:	4b55      	ldr	r3, [pc, #340]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	4b52      	ldr	r3, [pc, #328]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c4:	4a50      	ldr	r2, [pc, #320]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e2:	4a49      	ldr	r2, [pc, #292]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ec:	4b46      	ldr	r3, [pc, #280]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b43      	ldr	r3, [pc, #268]	@ (8001608 <MX_GPIO_Init+0x19c>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001500:	4a41      	ldr	r2, [pc, #260]	@ (8001608 <MX_GPIO_Init+0x19c>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150a:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <MX_GPIO_Init+0x19c>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001518:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <MX_GPIO_Init+0x19c>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151e:	4a3a      	ldr	r2, [pc, #232]	@ (8001608 <MX_GPIO_Init+0x19c>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001528:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <MX_GPIO_Init+0x19c>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	213c      	movs	r1, #60	@ 0x3c
 800153a:	4834      	ldr	r0, [pc, #208]	@ (800160c <MX_GPIO_Init+0x1a0>)
 800153c:	f01a fc2c 	bl	801bd98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001540:	2200      	movs	r2, #0
 8001542:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 8001546:	4832      	ldr	r0, [pc, #200]	@ (8001610 <MX_GPIO_Init+0x1a4>)
 8001548:	f01a fc26 	bl	801bd98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001552:	4830      	ldr	r0, [pc, #192]	@ (8001614 <MX_GPIO_Init+0x1a8>)
 8001554:	f01a fc20 	bl	801bd98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 8001558:	233c      	movs	r3, #60	@ 0x3c
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4827      	ldr	r0, [pc, #156]	@ (800160c <MX_GPIO_Init+0x1a0>)
 8001570:	f01a fa62 	bl	801ba38 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001574:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 8001578:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4820      	ldr	r0, [pc, #128]	@ (8001610 <MX_GPIO_Init+0x1a4>)
 800158e:	f01a fa53 	bl	801ba38 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 8001592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	481a      	ldr	r0, [pc, #104]	@ (8001610 <MX_GPIO_Init+0x1a4>)
 80015a8:	f01a fa46 	bl	801ba38 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80015ac:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	@ (8001614 <MX_GPIO_Init+0x1a8>)
 80015c6:	f01a fa37 	bl	801ba38 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80015ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_GPIO_Init+0x1a8>)
 80015e0:	f01a fa2a 	bl	801ba38 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 80015e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4807      	ldr	r0, [pc, #28]	@ (8001618 <MX_GPIO_Init+0x1ac>)
 80015fa:	f01a fa1d 	bl	801ba38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fe:	bf00      	nop
 8001600:	3730      	adds	r7, #48	@ 0x30
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58024400 	.word	0x58024400
 800160c:	58021000 	.word	0x58021000
 8001610:	58020c00 	.word	0x58020c00
 8001614:	58020000 	.word	0x58020000
 8001618:	58020400 	.word	0x58020400

0800161c <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <vHeapInit+0x28>)
 8001624:	463c      	mov	r4, r7
 8001626:	461d      	mov	r5, r3
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001634:	463b      	mov	r3, r7
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fce4 	bl	8006004 <vPortDefineHeapRegions>
}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bdb0      	pop	{r4, r5, r7, pc}
 8001644:	080239f8 	.word	0x080239f8

08001648 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return 0U;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8001666:	f004 fa33 	bl	8005ad0 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800166a:	e000      	b.n	800166e <vAssertCalled+0x16>
		{
			__NOP();
 800166c:	bf00      	nop
		while( ul == 0 )
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0fb      	beq.n	800166c <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001674:	f004 fa58 	bl	8005b28 <vPortExitCritical>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001684:	f240 4196 	movw	r1, #1174	@ 0x496
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <vApplicationMallocFailedHook+0x14>)
 800168a:	f7ff ffe5 	bl	8001658 <vAssertCalled>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08023a18 	.word	0x08023a18

08001698 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	817b      	strh	r3, [r7, #10]
 80016a8:	4613      	mov	r3, r2
 80016aa:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f89b 	bl	80017ec <xApplicationGetRandomNumber>

	return ulReturn;
 80016b6:	697b      	ldr	r3, [r7, #20]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d147      	bne.n	8001760 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <vApplicationIPNetworkEventHook+0xa8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <vApplicationIPNetworkEventHook+0xa8>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <vApplicationIPNetworkEventHook+0xac>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	f107 021c 	add.w	r2, r7, #28
 80016ec:	f107 0120 	add.w	r1, r7, #32
 80016f0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80016f4:	f007 fc34 	bl	8008f60 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	f107 0208 	add.w	r2, r7, #8
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f00d fa31 	bl	800eb68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4619      	mov	r1, r3
 800170c:	4818      	ldr	r0, [pc, #96]	@ (8001770 <vApplicationIPNetworkEventHook+0xb0>)
 800170e:	f020 f8c3 	bl	8021898 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	f107 0208 	add.w	r2, r7, #8
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f00d fa24 	bl	800eb68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	4619      	mov	r1, r3
 8001726:	4813      	ldr	r0, [pc, #76]	@ (8001774 <vApplicationIPNetworkEventHook+0xb4>)
 8001728:	f020 f8b6 	bl	8021898 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f107 0208 	add.w	r2, r7, #8
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f00d fa17 	bl	800eb68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	@ (8001778 <vApplicationIPNetworkEventHook+0xb8>)
 8001742:	f020 f8a9 	bl	8021898 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f107 0208 	add.w	r2, r7, #8
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f00d fa0a 	bl	800eb68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001754:	f107 0308 	add.w	r3, r7, #8
 8001758:	4619      	mov	r1, r3
 800175a:	4808      	ldr	r0, [pc, #32]	@ (800177c <vApplicationIPNetworkEventHook+0xbc>)
 800175c:	f020 f89c 	bl	8021898 <lUDPLoggingPrintf>
	}
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	@ 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000bec 	.word	0x20000bec
 800176c:	20000bf0 	.word	0x20000bf0
 8001770:	08023a2c 	.word	0x08023a2c
 8001774:	08023a3c 	.word	0x08023a3c
 8001778:	08023a50 	.word	0x08023a50
 800177c:	08023a68 	.word	0x08023a68

08001780 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800178c:	f000 f810 	bl	80017b0 <pcApplicationHostnameHook>
 8001790:	4603      	mov	r3, r0
 8001792:	4619      	mov	r1, r3
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f021 fa5b 	bl	8022c50 <strcasecmp>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 80017b4:	4b02      	ldr	r3, [pc, #8]	@ (80017c0 <pcApplicationHostnameHook+0x10>)
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	08023a80 	.word	0x08023a80

080017c4 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <vApplicationPingReplyHook+0x24>)
 80017da:	f020 f85d 	bl	8021898 <lUDPLoggingPrintf>
	}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	08023a88 	.word	0x08023a88

080017ec <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 80017f4:	f021 f8be 	bl	8022974 <rand>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001818:	4a01      	ldr	r2, [pc, #4]	@ (8001820 <prvGetRegistersFromStack+0x14>)
 800181a:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <prvGetRegistersFromStack+0x10>
 8001820:	20000bfc 	.word	0x20000bfc

08001824 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	__asm volatile
 8001828:	f01e 0f04 	tst.w	lr, #4
 800182c:	bf0c      	ite	eq
 800182e:	f3ef 8008 	mrseq	r0, MSP
 8001832:	f3ef 8009 	mrsne	r0, PSP
 8001836:	6981      	ldr	r1, [r0, #24]
 8001838:	f7ff ffe8 	bl	800180c <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001850:	200a      	movs	r0, #10
 8001852:	f002 fa07 	bl	8003c64 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001856:	4b05      	ldr	r3, [pc, #20]	@ (800186c <prvServerWorkTask+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f8      	beq.n	8001850 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 800185e:	4b03      	ldr	r3, [pc, #12]	@ (800186c <prvServerWorkTask+0x24>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001864:	f020 f834 	bl	80218d0 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001868:	e7f2      	b.n	8001850 <prvServerWorkTask+0x8>
 800186a:	bf00      	nop
 800186c:	20000bf0 	.word	0x20000bf0

08001870 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b098      	sub	sp, #96	@ 0x60
 8001874:	af02      	add	r7, sp, #8
 8001876:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800187c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 800187e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001882:	2218      	movs	r2, #24
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f020 fb2f 	bl	8021eea <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 800188c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b21a      	sxth	r2, r3
 8001894:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	b29b      	uxth	r3, r3
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 80018a6:	2303      	movs	r3, #3
 80018a8:	061a      	lsls	r2, r3, #24
 80018aa:	2301      	movs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	23a8      	movs	r3, #168	@ 0xa8
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	4313      	orrs	r3, r2
 80018b6:	22c0      	movs	r2, #192	@ 0xc0
 80018b8:	4313      	orrs	r3, r2
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 80018bc:	2302      	movs	r3, #2
 80018be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80018c2:	2206      	movs	r2, #6
 80018c4:	2101      	movs	r1, #1
 80018c6:	2002      	movs	r0, #2
 80018c8:	f00c f842 	bl	800d950 <FreeRTOS_socket>
 80018cc:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2210      	movs	r2, #16
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f020 fb07 	bl	8021eea <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 80018dc:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80018e0:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 80018e2:	230c      	movs	r3, #12
 80018e4:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 80018e6:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80018ea:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 80018ec:	230c      	movs	r3, #12
 80018ee:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 80018f0:	2304      	movs	r3, #4
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4b48      	ldr	r3, [pc, #288]	@ (8001a18 <vADCTCPTask+0x1a8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80018fc:	f00c ffe2 	bl	800e8c4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001900:	2304      	movs	r3, #4
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <vADCTCPTask+0x1a8>)
 8001906:	2201      	movs	r2, #1
 8001908:	2100      	movs	r1, #0
 800190a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800190c:	f00c ffda 	bl	800e8c4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2210      	movs	r2, #16
 8001916:	9200      	str	r2, [sp, #0]
 8001918:	220d      	movs	r2, #13
 800191a:	2100      	movs	r1, #0
 800191c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800191e:	f00c ffd1 	bl	800e8c4 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d104      	bne.n	8001934 <vADCTCPTask+0xc4>
 800192a:	f240 51be 	movw	r1, #1470	@ 0x5be
 800192e:	483b      	ldr	r0, [pc, #236]	@ (8001a1c <vADCTCPTask+0x1ac>)
 8001930:	f7ff fe92 	bl	8001658 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	9200      	str	r2, [sp, #0]
 800193e:	f04f 32ff 	mov.w	r2, #4294967295
 8001942:	2100      	movs	r1, #0
 8001944:	2000      	movs	r0, #0
 8001946:	f003 fb17 	bl	8004f78 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001954:	4b32      	ldr	r3, [pc, #200]	@ (8001a20 <vADCTCPTask+0x1b0>)
 8001956:	653b      	str	r3, [r7, #80]	@ 0x50
 8001958:	e001      	b.n	800195e <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 800195a:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <vADCTCPTask+0x1b4>)
 800195c:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196a:	2218      	movs	r2, #24
 800196c:	4619      	mov	r1, r3
 800196e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001970:	f00d fb46 	bl	800f000 <FreeRTOS_connect>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d139      	bne.n	80019ee <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 800197a:	e030      	b.n	80019de <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800198c:	f00d fd21 	bl	800f3d2 <FreeRTOS_get_tx_head>
 8001990:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d027      	beq.n	80019e8 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d902      	bls.n	80019aa <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019a8:	e003      	b.n	80019b2 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 80019aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 80019b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80019b6:	4413      	add	r3, r2
 80019b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019ba:	4619      	mov	r1, r3
 80019bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019be:	f020 f987 	bl	8021cd0 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 80019c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019c4:	2300      	movs	r3, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019ca:	f00d fe0d 	bl	800f5e8 <FreeRTOS_send>
 80019ce:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 80019d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0a      	blt.n	80019ec <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 80019d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80019d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019da:	4413      	add	r3, r2
 80019dc:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 80019de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d8ca      	bhi.n	800197c <vADCTCPTask+0x10c>
 80019e6:	e002      	b.n	80019ee <vADCTCPTask+0x17e>
                        break;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 80019ec:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 80019ee:	2102      	movs	r1, #2
 80019f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019f2:	f00d fea8 	bl	800f746 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80019f6:	e002      	b.n	80019fe <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 80019f8:	2001      	movs	r0, #1
 80019fa:	f002 f933 	bl	8003c64 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80019fe:	2300      	movs	r3, #0
 8001a00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a06:	f00d fc4f 	bl	800f2a8 <FreeRTOS_recv>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	daf3      	bge.n	80019f8 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001a10:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a12:	f00c fb61 	bl	800e0d8 <FreeRTOS_closesocket>
    for(;;) {
 8001a16:	e754      	b.n	80018c2 <vADCTCPTask+0x52>
 8001a18:	08026ee4 	.word	0x08026ee4
 8001a1c:	08023a18 	.word	0x08023a18
 8001a20:	30010004 	.word	0x30010004
 8001a24:	30000004 	.word	0x30000004

08001a28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a3a:	f018 f87d 	bl	8019b38 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001a46:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001a4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001a4c:	2312      	movs	r3, #18
 8001a4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f018 f89a 	bl	8019ba8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a74:	2004      	movs	r0, #4
 8001a76:	f018 f877 	bl	8019b68 <HAL_MPU_Enable>

}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a86:	b672      	cpsid	i
}
 8001a88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8a:	bf00      	nop
 8001a8c:	e7fd      	b.n	8001a8a <Error_Handler+0x8>
	...

08001a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_MspInit+0x30>)
 8001a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a9c:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_MspInit+0x30>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_MspInit+0x30>)
 8001aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	58024400 	.word	0x58024400

08001ac4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08e      	sub	sp, #56	@ 0x38
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a61      	ldr	r2, [pc, #388]	@ (8001c68 <HAL_ETH_MspInit+0x1a4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	f040 80bb 	bne.w	8001c5e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ae8:	4b60      	ldr	r3, [pc, #384]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001aea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aee:	4a5f      	ldr	r2, [pc, #380]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001af4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001af8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001b06:	4b59      	ldr	r3, [pc, #356]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b0c:	4a57      	ldr	r2, [pc, #348]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b16:	4b55      	ldr	r3, [pc, #340]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b24:	4b51      	ldr	r3, [pc, #324]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b2a:	4a50      	ldr	r2, [pc, #320]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b34:	4b4d      	ldr	r3, [pc, #308]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b4a      	ldr	r3, [pc, #296]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b48:	4a48      	ldr	r2, [pc, #288]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b52:	4b46      	ldr	r3, [pc, #280]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b42      	ldr	r3, [pc, #264]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b66:	4a41      	ldr	r2, [pc, #260]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b70:	4b3e      	ldr	r3, [pc, #248]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b84:	4a39      	ldr	r2, [pc, #228]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b8e:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <HAL_ETH_MspInit+0x1a8>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bac:	230b      	movs	r3, #11
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	482e      	ldr	r0, [pc, #184]	@ (8001c70 <HAL_ETH_MspInit+0x1ac>)
 8001bb8:	f019 ff3e 	bl	801ba38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001bbc:	2306      	movs	r3, #6
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bcc:	230b      	movs	r3, #11
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4827      	ldr	r0, [pc, #156]	@ (8001c74 <HAL_ETH_MspInit+0x1b0>)
 8001bd8:	f019 ff2e 	bl	801ba38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bec:	230b      	movs	r3, #11
 8001bee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	481f      	ldr	r0, [pc, #124]	@ (8001c74 <HAL_ETH_MspInit+0x1b0>)
 8001bf8:	f019 ff1e 	bl	801ba38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bfc:	2330      	movs	r3, #48	@ 0x30
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0c:	230b      	movs	r3, #11
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4816      	ldr	r0, [pc, #88]	@ (8001c70 <HAL_ETH_MspInit+0x1ac>)
 8001c18:	f019 ff0e 	bl	801ba38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001c1c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2e:	230b      	movs	r3, #11
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	480f      	ldr	r0, [pc, #60]	@ (8001c78 <HAL_ETH_MspInit+0x1b4>)
 8001c3a:	f019 fefd 	bl	801ba38 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2105      	movs	r1, #5
 8001c42:	203d      	movs	r0, #61	@ 0x3d
 8001c44:	f017 ff43 	bl	8019ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001c48:	203d      	movs	r0, #61	@ 0x3d
 8001c4a:	f017 ff5a 	bl	8019b02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2105      	movs	r1, #5
 8001c52:	203e      	movs	r0, #62	@ 0x3e
 8001c54:	f017 ff3b 	bl	8019ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001c58:	203e      	movs	r0, #62	@ 0x3e
 8001c5a:	f017 ff52 	bl	8019b02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001c5e:	bf00      	nop
 8001c60:	3738      	adds	r7, #56	@ 0x38
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40028000 	.word	0x40028000
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	58020800 	.word	0x58020800
 8001c74:	58020000 	.word	0x58020000
 8001c78:	58020400 	.word	0x58020400

08001c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b0ba      	sub	sp, #232	@ 0xe8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	22c0      	movs	r2, #192	@ 0xc0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f020 f924 	bl	8021eea <memset>
  if(hi2c->Instance==I2C4)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a27      	ldr	r2, [pc, #156]	@ (8001d44 <HAL_I2C_MspInit+0xc8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d146      	bne.n	8001d3a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001cac:	f04f 0210 	mov.w	r2, #16
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f01b f9d6 	bl	801d074 <HAL_RCCEx_PeriphCLKConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001cce:	f7ff fed8 	bl	8001a82 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_I2C_MspInit+0xcc>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d48 <HAL_I2C_MspInit+0xcc>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_I2C_MspInit+0xcc>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cf0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d14:	4619      	mov	r1, r3
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <HAL_I2C_MspInit+0xd0>)
 8001d18:	f019 fe8e 	bl	801ba38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_I2C_MspInit+0xcc>)
 8001d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d22:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <HAL_I2C_MspInit+0xcc>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_I2C_MspInit+0xcc>)
 8001d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001d3a:	bf00      	nop
 8001d3c:	37e8      	adds	r7, #232	@ 0xe8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	58001c00 	.word	0x58001c00
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	58020c00 	.word	0x58020c00

08001d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b090      	sub	sp, #64	@ 0x40
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a88      	ldr	r2, [pc, #544]	@ (8001f90 <HAL_SPI_MspInit+0x240>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	f040 8083 	bne.w	8001e7a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d74:	4b87      	ldr	r3, [pc, #540]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d7a:	4a86      	ldr	r2, [pc, #536]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001d7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d84:	4b83      	ldr	r3, [pc, #524]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b80      	ldr	r3, [pc, #512]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d98:	4a7e      	ldr	r2, [pc, #504]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da2:	4b7c      	ldr	r3, [pc, #496]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b78      	ldr	r3, [pc, #480]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db6:	4a77      	ldr	r2, [pc, #476]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc0:	4b74      	ldr	r3, [pc, #464]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001dce:	2370      	movs	r3, #112	@ 0x70
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dde:	2305      	movs	r3, #5
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	486b      	ldr	r0, [pc, #428]	@ (8001f98 <HAL_SPI_MspInit+0x248>)
 8001dea:	f019 fe25 	bl	801ba38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dee:	2320      	movs	r3, #32
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dfe:	2305      	movs	r3, #5
 8001e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	4864      	ldr	r0, [pc, #400]	@ (8001f9c <HAL_SPI_MspInit+0x24c>)
 8001e0a:	f019 fe15 	bl	801ba38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001e0e:	4b64      	ldr	r3, [pc, #400]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e10:	4a64      	ldr	r2, [pc, #400]	@ (8001fa4 <HAL_SPI_MspInit+0x254>)
 8001e12:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001e14:	4b62      	ldr	r3, [pc, #392]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e16:	2225      	movs	r2, #37	@ 0x25
 8001e18:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1a:	4b61      	ldr	r3, [pc, #388]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e26:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e34:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e36:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e3c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001e3e:	4b58      	ldr	r3, [pc, #352]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e44:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e46:	4b56      	ldr	r3, [pc, #344]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e4c:	4b54      	ldr	r3, [pc, #336]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e52:	4853      	ldr	r0, [pc, #332]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e54:	f017 fee8 	bl	8019c28 <HAL_DMA_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001e5e:	f7ff fe10 	bl	8001a82 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e66:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e68:	4a4d      	ldr	r2, [pc, #308]	@ (8001fa0 <HAL_SPI_MspInit+0x250>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2023      	movs	r0, #35	@ 0x23
 8001e74:	f017 fe2b 	bl	8019ace <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e78:	e0f0      	b.n	800205c <HAL_SPI_MspInit+0x30c>
  else if(hspi->Instance==SPI2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa8 <HAL_SPI_MspInit+0x258>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	f040 8097 	bne.w	8001fb4 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e8c:	4a41      	ldr	r2, [pc, #260]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e96:	4b3f      	ldr	r3, [pc, #252]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	4a3a      	ldr	r2, [pc, #232]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb4:	4b37      	ldr	r3, [pc, #220]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	4a32      	ldr	r2, [pc, #200]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed2:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <HAL_SPI_MspInit+0x244>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001ee0:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001efa:	4619      	mov	r1, r3
 8001efc:	4827      	ldr	r0, [pc, #156]	@ (8001f9c <HAL_SPI_MspInit+0x24c>)
 8001efe:	f019 fd9b 	bl	801ba38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f14:	2305      	movs	r3, #5
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481e      	ldr	r0, [pc, #120]	@ (8001f98 <HAL_SPI_MspInit+0x248>)
 8001f20:	f019 fd8a 	bl	801ba38 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001f24:	4b21      	ldr	r3, [pc, #132]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f26:	4a22      	ldr	r2, [pc, #136]	@ (8001fb0 <HAL_SPI_MspInit+0x260>)
 8001f28:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001f2a:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f2c:	2227      	movs	r2, #39	@ 0x27
 8001f2e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f42:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f52:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f68:	4810      	ldr	r0, [pc, #64]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f6a:	f017 fe5d 	bl	8019c28 <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8001f74:	f7ff fd85 	bl	8001a82 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f7c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fac <HAL_SPI_MspInit+0x25c>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2024      	movs	r0, #36	@ 0x24
 8001f8a:	f017 fda0 	bl	8019ace <HAL_NVIC_SetPriority>
}
 8001f8e:	e065      	b.n	800205c <HAL_SPI_MspInit+0x30c>
 8001f90:	40013000 	.word	0x40013000
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58020000 	.word	0x58020000
 8001f9c:	58020400 	.word	0x58020400
 8001fa0:	20000290 	.word	0x20000290
 8001fa4:	40020010 	.word	0x40020010
 8001fa8:	40003800 	.word	0x40003800
 8001fac:	20000308 	.word	0x20000308
 8001fb0:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8002064 <HAL_SPI_MspInit+0x314>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d14e      	bne.n	800205c <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8001fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fc4:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8001fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8001fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8001fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe2:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8001fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	4a19      	ldr	r2, [pc, #100]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200a:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <HAL_SPI_MspInit+0x318>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800202a:	2306      	movs	r3, #6
 800202c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002032:	4619      	mov	r1, r3
 8002034:	480d      	ldr	r0, [pc, #52]	@ (800206c <HAL_SPI_MspInit+0x31c>)
 8002036:	f019 fcff 	bl	801ba38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800203a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800204c:	2306      	movs	r3, #6
 800204e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002050:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	@ (8002070 <HAL_SPI_MspInit+0x320>)
 8002058:	f019 fcee 	bl	801ba38 <HAL_GPIO_Init>
}
 800205c:	bf00      	nop
 800205e:	3740      	adds	r7, #64	@ 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40003c00 	.word	0x40003c00
 8002068:	58024400 	.word	0x58024400
 800206c:	58020000 	.word	0x58020000
 8002070:	58020800 	.word	0x58020800

08002074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a88      	ldr	r2, [pc, #544]	@ (80022a4 <HAL_TIM_Base_MspInit+0x230>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d13e      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002086:	4b88      	ldr	r3, [pc, #544]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 8002088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800208c:	4a86      	ldr	r2, [pc, #536]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002096:	4b84      	ldr	r3, [pc, #528]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 8002098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 80020a4:	4b81      	ldr	r3, [pc, #516]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020a6:	4a82      	ldr	r2, [pc, #520]	@ (80022b0 <HAL_TIM_Base_MspInit+0x23c>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 80020aa:	4b80      	ldr	r3, [pc, #512]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020ac:	220f      	movs	r2, #15
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b0:	4b7e      	ldr	r3, [pc, #504]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b6:	4b7d      	ldr	r3, [pc, #500]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 80020bc:	4b7b      	ldr	r3, [pc, #492]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c2:	4b7a      	ldr	r3, [pc, #488]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020c8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ca:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020d0:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80020d2:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020d8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80020da:	4b74      	ldr	r3, [pc, #464]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020e0:	4b72      	ldr	r3, [pc, #456]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80020e6:	4871      	ldr	r0, [pc, #452]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020e8:	f017 fd9e 	bl	8019c28 <HAL_DMA_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80020f2:	f7ff fcc6 	bl	8001a82 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a6c      	ldr	r2, [pc, #432]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020fa:	621a      	str	r2, [r3, #32]
 80020fc:	4a6b      	ldr	r2, [pc, #428]	@ (80022ac <HAL_TIM_Base_MspInit+0x238>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002102:	e0cb      	b.n	800229c <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210c:	d10f      	bne.n	800212e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210e:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 8002110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002114:	4a64      	ldr	r2, [pc, #400]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800211e:	4b62      	ldr	r3, [pc, #392]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 8002120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
}
 800212c:	e0b6      	b.n	800229c <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM3)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a60      	ldr	r2, [pc, #384]	@ (80022b4 <HAL_TIM_Base_MspInit+0x240>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d13e      	bne.n	80021b6 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002138:	4b5b      	ldr	r3, [pc, #364]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 800213a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800213e:	4a5a      	ldr	r2, [pc, #360]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002148:	4b57      	ldr	r3, [pc, #348]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 800214a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002156:	4b58      	ldr	r3, [pc, #352]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 8002158:	4a58      	ldr	r2, [pc, #352]	@ (80022bc <HAL_TIM_Base_MspInit+0x248>)
 800215a:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 800215c:	4b56      	ldr	r3, [pc, #344]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 800215e:	221b      	movs	r2, #27
 8002160:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002162:	4b55      	ldr	r3, [pc, #340]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 8002164:	2240      	movs	r2, #64	@ 0x40
 8002166:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002168:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 800216e:	4b52      	ldr	r3, [pc, #328]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002174:	4b50      	ldr	r3, [pc, #320]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 8002176:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800217a:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800217c:	4b4e      	ldr	r3, [pc, #312]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 800217e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002182:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002184:	4b4c      	ldr	r3, [pc, #304]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 8002186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800218a:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 800218c:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002192:	4b49      	ldr	r3, [pc, #292]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002198:	4847      	ldr	r0, [pc, #284]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 800219a:	f017 fd45 	bl	8019c28 <HAL_DMA_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80021a4:	f7ff fc6d 	bl	8001a82 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a43      	ldr	r2, [pc, #268]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 80021ac:	621a      	str	r2, [r3, #32]
 80021ae:	4a42      	ldr	r2, [pc, #264]	@ (80022b8 <HAL_TIM_Base_MspInit+0x244>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021b4:	e072      	b.n	800229c <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM4)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a41      	ldr	r2, [pc, #260]	@ (80022c0 <HAL_TIM_Base_MspInit+0x24c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d16d      	bne.n	800229c <HAL_TIM_Base_MspInit+0x228>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021c0:	4b39      	ldr	r3, [pc, #228]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 80021c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021c6:	4a38      	ldr	r2, [pc, #224]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021d0:	4b35      	ldr	r3, [pc, #212]	@ (80022a8 <HAL_TIM_Base_MspInit+0x234>)
 80021d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 80021de:	4b39      	ldr	r3, [pc, #228]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 80021e0:	4a39      	ldr	r2, [pc, #228]	@ (80022c8 <HAL_TIM_Base_MspInit+0x254>)
 80021e2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80021e4:	4b37      	ldr	r3, [pc, #220]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 80021e6:	221d      	movs	r2, #29
 80021e8:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ea:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 80021ec:	2240      	movs	r2, #64	@ 0x40
 80021ee:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f0:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 80021f6:	4b33      	ldr	r3, [pc, #204]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021fc:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 80021fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002202:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002204:	4b2f      	ldr	r3, [pc, #188]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 8002206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800220a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800220c:	4b2d      	ldr	r3, [pc, #180]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 800220e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002212:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002214:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 8002216:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800221a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800221c:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002222:	4828      	ldr	r0, [pc, #160]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 8002224:	f017 fd00 	bl	8019c28 <HAL_DMA_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_TIM_Base_MspInit+0x1be>
      Error_Handler();
 800222e:	f7ff fc28 	bl	8001a82 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a23      	ldr	r2, [pc, #140]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 8002236:	625a      	str	r2, [r3, #36]	@ 0x24
 8002238:	4a22      	ldr	r2, [pc, #136]	@ (80022c4 <HAL_TIM_Base_MspInit+0x250>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 800223e:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002240:	4a23      	ldr	r2, [pc, #140]	@ (80022d0 <HAL_TIM_Base_MspInit+0x25c>)
 8002242:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002244:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002246:	2220      	movs	r2, #32
 8002248:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 800224c:	2240      	movs	r2, #64	@ 0x40
 800224e:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002250:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800225c:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 800225e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002262:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002264:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800226a:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 800226c:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 800226e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002272:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002274:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002276:	2200      	movs	r2, #0
 8002278:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800227a:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002280:	4812      	ldr	r0, [pc, #72]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002282:	f017 fcd1 	bl	8019c28 <HAL_DMA_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_TIM_Base_MspInit+0x21c>
      Error_Handler();
 800228c:	f7ff fbf9 	bl	8001a82 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a0e      	ldr	r2, [pc, #56]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002294:	621a      	str	r2, [r3, #32]
 8002296:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <HAL_TIM_Base_MspInit+0x258>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000
 80022a8:	58024400 	.word	0x58024400
 80022ac:	200004b0 	.word	0x200004b0
 80022b0:	40020040 	.word	0x40020040
 80022b4:	40000400 	.word	0x40000400
 80022b8:	20000528 	.word	0x20000528
 80022bc:	40020058 	.word	0x40020058
 80022c0:	40000800 	.word	0x40000800
 80022c4:	200005a0 	.word	0x200005a0
 80022c8:	40020070 	.word	0x40020070
 80022cc:	20000618 	.word	0x20000618
 80022d0:	40020088 	.word	0x40020088

080022d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a12      	ldr	r2, [pc, #72]	@ (800233c <HAL_TIM_MspPostInit+0x68>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11e      	bne.n	8002334 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_TIM_MspPostInit+0x6c>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fc:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <HAL_TIM_MspPostInit+0x6c>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_TIM_MspPostInit+0x6c>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002314:	23c0      	movs	r3, #192	@ 0xc0
 8002316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002324:	2302      	movs	r3, #2
 8002326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <HAL_TIM_MspPostInit+0x70>)
 8002330:	f019 fb82 	bl	801ba38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40000800 	.word	0x40000800
 8002340:	58024400 	.word	0x58024400
 8002344:	58020400 	.word	0x58020400

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0ba      	sub	sp, #232	@ 0xe8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	22c0      	movs	r2, #192	@ 0xc0
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f01f fdbe 	bl	8021eea <memset>
  if(huart->Instance==USART3)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a27      	ldr	r2, [pc, #156]	@ (8002410 <HAL_UART_MspInit+0xc8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d146      	bne.n	8002406 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002378:	f04f 0202 	mov.w	r2, #2
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	4618      	mov	r0, r3
 8002390:	f01a fe70 	bl	801d074 <HAL_RCCEx_PeriphCLKConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800239a:	f7ff fb72 	bl	8001a82 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023ae:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023bc:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c2:	4a14      	ldr	r2, [pc, #80]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f4:	2307      	movs	r3, #7
 80023f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	@ (8002418 <HAL_UART_MspInit+0xd0>)
 8002402:	f019 fb19 	bl	801ba38 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002406:	bf00      	nop
 8002408:	37e8      	adds	r7, #232	@ 0xe8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40004800 	.word	0x40004800
 8002414:	58024400 	.word	0x58024400
 8002418:	58020c00 	.word	0x58020c00

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <NMI_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <UsageFault_Handler+0x4>

0800243c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244e:	f017 f9ff 	bl	8019850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002452:	f002 fadd 	bl	8004a10 <xTaskGetSchedulerState>
 8002456:	4603      	mov	r3, r0
 8002458:	2b02      	cmp	r3, #2
 800245a:	d101      	bne.n	8002460 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 800245c:	f003 fbbc 	bl	8005bd8 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 800246e:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <DMA1_Stream0_IRQHandler+0x70>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <DMA1_Stream0_IRQHandler+0x74>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e001      	b.n	8002494 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002494:	4811      	ldr	r0, [pc, #68]	@ (80024dc <DMA1_Stream0_IRQHandler+0x78>)
 8002496:	f018 f969 	bl	801a76c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <DMA1_Stream0_IRQHandler+0x7c>)
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	2100      	movs	r1, #0
 80024b0:	f002 ff06 	bl	80052c0 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <DMA1_Stream0_IRQHandler+0x66>
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <DMA1_Stream0_IRQHandler+0x80>)
 80024bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020010 	.word	0x40020010
 80024dc:	20000290 	.word	0x20000290
 80024e0:	20000bf8 	.word	0x20000bf8
 80024e4:	e000ed04 	.word	0xe000ed04

080024e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <DMA1_Stream1_IRQHandler+0x10>)
 80024ee:	f018 f93d 	bl	801a76c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000308 	.word	0x20000308

080024fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <DMA1_Stream2_IRQHandler+0x10>)
 8002502:	f018 f933 	bl	801a76c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200004b0 	.word	0x200004b0

08002510 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <DMA1_Stream3_IRQHandler+0x10>)
 8002516:	f018 f929 	bl	801a76c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000528 	.word	0x20000528

08002524 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <DMA1_Stream4_IRQHandler+0x10>)
 800252a:	f018 f91f 	bl	801a76c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200005a0 	.word	0x200005a0

08002538 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <DMA1_Stream5_IRQHandler+0x10>)
 800253e:	f018 f915 	bl	801a76c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000618 	.word	0x20000618

0800254c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002550:	4802      	ldr	r0, [pc, #8]	@ (800255c <SPI1_IRQHandler+0x10>)
 8002552:	f01c fcdf 	bl	801ef14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200000f8 	.word	0x200000f8

08002560 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <SPI2_IRQHandler+0x10>)
 8002566:	f01c fcd5 	bl	801ef14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000180 	.word	0x20000180

08002574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return 1;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_kill>:

int _kill(int pid, int sig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800258e:	f020 fbd3 	bl	8022d38 <__errno>
 8002592:	4603      	mov	r3, r0
 8002594:	2216      	movs	r2, #22
 8002596:	601a      	str	r2, [r3, #0]
  return -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_exit>:

void _exit (int status)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ffe7 	bl	8002584 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025b6:	bf00      	nop
 80025b8:	e7fd      	b.n	80025b6 <_exit+0x12>

080025ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e00a      	b.n	80025e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025cc:	f3af 8000 	nop.w
 80025d0:	4601      	mov	r1, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	60ba      	str	r2, [r7, #8]
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	dbf0      	blt.n	80025cc <_read+0x12>
  }

  return len;
 80025ea:	687b      	ldr	r3, [r7, #4]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e009      	b.n	800261a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	60ba      	str	r2, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	dbf1      	blt.n	8002606 <_write+0x12>
  }
  return len;
 8002622:	687b      	ldr	r3, [r7, #4]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_close>:

int _close(int file)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002654:	605a      	str	r2, [r3, #4]
  return 0;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_isatty>:

int _isatty(int file)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f020 fb38 	bl	8022d38 <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	@ (80026f8 <_sbrk+0x64>)
 80026e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	24080000 	.word	0x24080000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	20000c00 	.word	0x20000c00
 80026fc:	200026c0 	.word	0x200026c0

08002700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002706:	4b3f      	ldr	r3, [pc, #252]	@ (8002804 <SystemInit+0x104>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270c:	4a3d      	ldr	r2, [pc, #244]	@ (8002804 <SystemInit+0x104>)
 800270e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002712:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002716:	4b3c      	ldr	r3, [pc, #240]	@ (8002808 <SystemInit+0x108>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	2b06      	cmp	r3, #6
 8002720:	d807      	bhi.n	8002732 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002722:	4b39      	ldr	r3, [pc, #228]	@ (8002808 <SystemInit+0x108>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 030f 	bic.w	r3, r3, #15
 800272a:	4a37      	ldr	r2, [pc, #220]	@ (8002808 <SystemInit+0x108>)
 800272c:	f043 0307 	orr.w	r3, r3, #7
 8002730:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002732:	4b36      	ldr	r3, [pc, #216]	@ (800280c <SystemInit+0x10c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a35      	ldr	r2, [pc, #212]	@ (800280c <SystemInit+0x10c>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800273e:	4b33      	ldr	r3, [pc, #204]	@ (800280c <SystemInit+0x10c>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002744:	4b31      	ldr	r3, [pc, #196]	@ (800280c <SystemInit+0x10c>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4930      	ldr	r1, [pc, #192]	@ (800280c <SystemInit+0x10c>)
 800274a:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <SystemInit+0x110>)
 800274c:	4013      	ands	r3, r2
 800274e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002750:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <SystemInit+0x108>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800275c:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <SystemInit+0x108>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 030f 	bic.w	r3, r3, #15
 8002764:	4a28      	ldr	r2, [pc, #160]	@ (8002808 <SystemInit+0x108>)
 8002766:	f043 0307 	orr.w	r3, r3, #7
 800276a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800276c:	4b27      	ldr	r3, [pc, #156]	@ (800280c <SystemInit+0x10c>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002772:	4b26      	ldr	r3, [pc, #152]	@ (800280c <SystemInit+0x10c>)
 8002774:	2200      	movs	r2, #0
 8002776:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <SystemInit+0x10c>)
 800277a:	2200      	movs	r2, #0
 800277c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800277e:	4b23      	ldr	r3, [pc, #140]	@ (800280c <SystemInit+0x10c>)
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <SystemInit+0x114>)
 8002782:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <SystemInit+0x10c>)
 8002786:	4a24      	ldr	r2, [pc, #144]	@ (8002818 <SystemInit+0x118>)
 8002788:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <SystemInit+0x10c>)
 800278c:	4a23      	ldr	r2, [pc, #140]	@ (800281c <SystemInit+0x11c>)
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002790:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <SystemInit+0x10c>)
 8002792:	2200      	movs	r2, #0
 8002794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002796:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <SystemInit+0x10c>)
 8002798:	4a20      	ldr	r2, [pc, #128]	@ (800281c <SystemInit+0x11c>)
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <SystemInit+0x10c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <SystemInit+0x10c>)
 80027a4:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <SystemInit+0x11c>)
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027a8:	4b18      	ldr	r3, [pc, #96]	@ (800280c <SystemInit+0x10c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027ae:	4b17      	ldr	r3, [pc, #92]	@ (800280c <SystemInit+0x10c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a16      	ldr	r2, [pc, #88]	@ (800280c <SystemInit+0x10c>)
 80027b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027ba:	4b14      	ldr	r3, [pc, #80]	@ (800280c <SystemInit+0x10c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <SystemInit+0x120>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <SystemInit+0x124>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027cc:	d202      	bcs.n	80027d4 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <SystemInit+0x128>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80027d4:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <SystemInit+0x10c>)
 80027d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80027da:	4a0c      	ldr	r2, [pc, #48]	@ (800280c <SystemInit+0x10c>)
 80027dc:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 80027e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80027e4:	4b09      	ldr	r3, [pc, #36]	@ (800280c <SystemInit+0x10c>)
 80027e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80027ea:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80027ec:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027ee:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <SystemInit+0x12c>)
 80027f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00
 8002808:	52002000 	.word	0x52002000
 800280c:	58024400 	.word	0x58024400
 8002810:	eaf6ed7f 	.word	0xeaf6ed7f
 8002814:	02020200 	.word	0x02020200
 8002818:	01ff0000 	.word	0x01ff0000
 800281c:	01010280 	.word	0x01010280
 8002820:	5c001000 	.word	0x5c001000
 8002824:	ffff0000 	.word	0xffff0000
 8002828:	51008108 	.word	0x51008108
 800282c:	52004000 	.word	0x52004000

08002830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002868 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002834:	f7ff ff64 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002838:	480c      	ldr	r0, [pc, #48]	@ (800286c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800283a:	490d      	ldr	r1, [pc, #52]	@ (8002870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002850:	4c0a      	ldr	r4, [pc, #40]	@ (800287c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800285e:	f020 fa71 	bl	8022d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002862:	f7fd ff1d 	bl	80006a0 <main>
  bx  lr
 8002866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002868:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800286c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002870:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002874:	08027244 	.word	0x08027244
  ldr r2, =_sbss
 8002878:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800287c:	200026c0 	.word	0x200026c0

08002880 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002880:	e7fe      	b.n	8002880 <ADC3_IRQHandler>

08002882 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002888:	201c      	movs	r0, #28
 800288a:	f003 fa23 	bl	8005cd4 <pvPortMalloc>
 800288e:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f9c3 	bl	8002c2c <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80028a6:	687b      	ldr	r3, [r7, #4]
        }
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	@ 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <xEventGroupWaitBits+0x2a>
 80028d0:	f240 1147 	movw	r1, #327	@ 0x147
 80028d4:	4850      	ldr	r0, [pc, #320]	@ (8002a18 <xEventGroupWaitBits+0x168>)
 80028d6:	f7fe febf 	bl	8001658 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e0:	d304      	bcc.n	80028ec <xEventGroupWaitBits+0x3c>
 80028e2:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80028e6:	484c      	ldr	r0, [pc, #304]	@ (8002a18 <xEventGroupWaitBits+0x168>)
 80028e8:	f7fe feb6 	bl	8001658 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <xEventGroupWaitBits+0x4c>
 80028f2:	f240 1149 	movw	r1, #329	@ 0x149
 80028f6:	4848      	ldr	r0, [pc, #288]	@ (8002a18 <xEventGroupWaitBits+0x168>)
 80028f8:	f7fe feae 	bl	8001658 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028fc:	f002 f888 	bl	8004a10 <xTaskGetSchedulerState>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <xEventGroupWaitBits+0x5c>
 8002906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <xEventGroupWaitBits+0x60>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <xEventGroupWaitBits+0x62>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <xEventGroupWaitBits+0x70>
 8002916:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800291a:	483f      	ldr	r0, [pc, #252]	@ (8002a18 <xEventGroupWaitBits+0x168>)
 800291c:	f7fe fe9c 	bl	8001658 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8002920:	f001 fa58 	bl	8003dd4 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	69f8      	ldr	r0, [r7, #28]
 8002930:	f000 f95a 	bl	8002be8 <prvTestWaitCondition>
 8002934:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00e      	beq.n	800295a <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8002940:	2300      	movs	r3, #0
 8002942:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e020      	b.n	800299c <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 800295a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8002964:	2301      	movs	r3, #1
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	e018      	b.n	800299c <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002976:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	1d18      	adds	r0, r3, #4
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	4313      	orrs	r3, r2
 8002990:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002992:	4619      	mov	r1, r3
 8002994:	f001 fd06 	bl	80043a4 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800299c:	f001 fa28 	bl	8003df0 <xTaskResumeAll>
 80029a0:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 80029a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d031      	beq.n	8002a0c <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <xEventGroupWaitBits+0x16c>)
 80029b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 80029be:	f002 fa31 	bl	8004e24 <uxTaskResetEventItemValue>
 80029c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11a      	bne.n	8002a04 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 80029ce:	f003 f87f 	bl	8005ad0 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029de:	f000 f903 	bl	8002be8 <prvTestWaitCondition>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d009      	beq.n	80029fc <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8002a00:	f003 f892 	bl	8005b28 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8002a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3730      	adds	r7, #48	@ 0x30
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	08023aa0 	.word	0x08023aa0
 8002a1c:	e000ed04 	.word	0xe000ed04

08002a20 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <xEventGroupClearBits+0x1e>
 8002a34:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8002a38:	480f      	ldr	r0, [pc, #60]	@ (8002a78 <xEventGroupClearBits+0x58>)
 8002a3a:	f7fe fe0d 	bl	8001658 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a44:	d304      	bcc.n	8002a50 <xEventGroupClearBits+0x30>
 8002a46:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002a4a:	480b      	ldr	r0, [pc, #44]	@ (8002a78 <xEventGroupClearBits+0x58>)
 8002a4c:	f7fe fe04 	bl	8001658 <vAssertCalled>

        taskENTER_CRITICAL();
 8002a50:	f003 f83e 	bl	8005ad0 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002a68:	f003 f85e 	bl	8005b28 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
    }
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08023aa0 	.word	0x08023aa0

08002a7c <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	@ 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <xEventGroupSetBits+0x26>
 8002a98:	f240 2132 	movw	r1, #562	@ 0x232
 8002a9c:	4836      	ldr	r0, [pc, #216]	@ (8002b78 <xEventGroupSetBits+0xfc>)
 8002a9e:	f7fe fddb 	bl	8001658 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa8:	d304      	bcc.n	8002ab4 <xEventGroupSetBits+0x38>
 8002aaa:	f240 2133 	movw	r1, #563	@ 0x233
 8002aae:	4832      	ldr	r0, [pc, #200]	@ (8002b78 <xEventGroupSetBits+0xfc>)
 8002ab0:	f7fe fdd2 	bl	8001658 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3308      	adds	r3, #8
 8002abe:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8002ac0:	f001 f988 	bl	8003dd4 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8002ad6:	e03c      	b.n	8002b52 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8002ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002aee:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002af6:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d108      	bne.n	8002b14 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b12:	e008      	b.n	8002b26 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d101      	bne.n	8002b26 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8002b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	4619      	mov	r1, r3
 8002b48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b4a:	f001 fd49 	bl	80045e0 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8002b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d1be      	bne.n	8002ad8 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8002b68:	f001 f942 	bl	8003df0 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	681b      	ldr	r3, [r3, #0]
    }
 8002b70:	4618      	mov	r0, r3
 8002b72:	3730      	adds	r7, #48	@ 0x30
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	08023aa0 	.word	0x08023aa0

08002b7c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <vEventGroupDelete+0x1c>
 8002b8e:	f240 218e 	movw	r1, #654	@ 0x28e
 8002b92:	4814      	ldr	r0, [pc, #80]	@ (8002be4 <vEventGroupDelete+0x68>)
 8002b94:	f7fe fd60 	bl	8001658 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 8002b9e:	f001 f919 	bl	8003dd4 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002ba2:	e011      	b.n	8002bc8 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3308      	adds	r3, #8
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d104      	bne.n	8002bba <vEventGroupDelete+0x3e>
 8002bb0:	f240 219a 	movw	r1, #666	@ 0x29a
 8002bb4:	480b      	ldr	r0, [pc, #44]	@ (8002be4 <vEventGroupDelete+0x68>)
 8002bb6:	f7fe fd4f 	bl	8001658 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fd0c 	bl	80045e0 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e9      	bne.n	8002ba4 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8002bd0:	f001 f90e 	bl	8003df0 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f003 f951 	bl	8005e7c <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08023aa0 	.word	0x08023aa0

08002be8 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e007      	b.n	8002c1e <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d101      	bne.n	8002c1e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8002c1e:	697b      	ldr	r3, [r7, #20]
    }
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0208 	add.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f04f 32ff 	mov.w	r2, #4294967295
 8002c44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f103 0208 	add.w	r2, r3, #8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 0208 	add.w	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d103      	bne.n	8002cee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e00c      	b.n	8002d08 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e002      	b.n	8002cfc <vListInsert+0x2e>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d2f6      	bcs.n	8002cf6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6892      	ldr	r2, [r2, #8]
 8002d56:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6852      	ldr	r2, [r2, #4]
 8002d60:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d103      	bne.n	8002d74 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1e5a      	subs	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <xQueueGenericReset+0x22>
 8002dac:	f240 1137 	movw	r1, #311	@ 0x137
 8002db0:	4839      	ldr	r0, [pc, #228]	@ (8002e98 <xQueueGenericReset+0x104>)
 8002db2:	f7fe fc51 	bl	8001658 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05d      	beq.n	8002e78 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d059      	beq.n	8002e78 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dcc:	2100      	movs	r1, #0
 8002dce:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d000      	beq.n	8002dd8 <xQueueGenericReset+0x44>
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d14c      	bne.n	8002e78 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8002dde:	f002 fe77 	bl	8005ad0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	441a      	add	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	441a      	add	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	22ff      	movs	r2, #255	@ 0xff
 8002e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	22ff      	movs	r2, #255	@ 0xff
 8002e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d114      	bne.n	8002e5e <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01a      	beq.n	8002e72 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	3310      	adds	r3, #16
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fafb 	bl	800443c <xTaskRemoveFromEventList>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <xQueueGenericReset+0x108>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	e009      	b.n	8002e72 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3310      	adds	r3, #16
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fee2 	bl	8002c2c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3324      	adds	r3, #36	@ 0x24
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fedd 	bl	8002c2c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002e72:	f002 fe59 	bl	8005b28 <vPortExitCritical>
 8002e76:	e001      	b.n	8002e7c <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <xQueueGenericReset+0xf8>
 8002e82:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8002e86:	4804      	ldr	r0, [pc, #16]	@ (8002e98 <xQueueGenericReset+0x104>)
 8002e88:	f7fe fbe6 	bl	8001658 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	08023acc 	.word	0x08023acc
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	@ 0x28
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02e      	beq.n	8002f16 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002eb8:	2100      	movs	r1, #0
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d000      	beq.n	8002ec8 <xQueueGenericCreate+0x28>
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d123      	bne.n	8002f16 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ed6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002eda:	d81c      	bhi.n	8002f16 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3350      	adds	r3, #80	@ 0x50
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 fef2 	bl	8005cd4 <pvPortMalloc>
 8002ef0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d016      	beq.n	8002f26 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3350      	adds	r3, #80	@ 0x50
 8002f00:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f02:	79fa      	ldrb	r2, [r7, #7]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f810 	bl	8002f34 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002f14:	e007      	b.n	8002f26 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d104      	bne.n	8002f26 <xQueueGenericCreate+0x86>
 8002f1c:	f240 212a 	movw	r1, #554	@ 0x22a
 8002f20:	4803      	ldr	r0, [pc, #12]	@ (8002f30 <xQueueGenericCreate+0x90>)
 8002f22:	f7fe fb99 	bl	8001658 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8002f26:	69fb      	ldr	r3, [r7, #28]
    }
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	08023acc 	.word	0x08023acc

08002f34 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e002      	b.n	8002f56 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f62:	2101      	movs	r1, #1
 8002f64:	69b8      	ldr	r0, [r7, #24]
 8002f66:	f7ff ff15 	bl	8002d94 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f847 	bl	8003034 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6939      	ldr	r1, [r7, #16]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff6a 	bl	8002ea0 <xQueueGenericCreate>
 8002fcc:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff ffd3 	bl	8002f7a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    }
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <xQueueCreateCountingSemaphore+0x36>
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d80c      	bhi.n	8003016 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	2100      	movs	r1, #0
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff4d 	bl	8002ea0 <xQueueGenericCreate>
 8003006:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003014:	e007      	b.n	8003026 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <xQueueCreateCountingSemaphore+0x46>
 800301c:	f240 319f 	movw	r1, #927	@ 0x39f
 8003020:	4803      	ldr	r0, [pc, #12]	@ (8003030 <xQueueCreateCountingSemaphore+0x50>)
 8003022:	f7fe fb19 	bl	8001658 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003026:	68fb      	ldr	r3, [r7, #12]
    }
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	08023acc 	.word	0x08023acc

08003034 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <xQueueGenericSend+0x26>
 8003050:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003054:	4869      	ldr	r0, [pc, #420]	@ (80031fc <xQueueGenericSend+0x1c8>)
 8003056:	f7fe faff 	bl	8001658 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <xQueueGenericSend+0x34>
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <xQueueGenericSend+0x38>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <xQueueGenericSend+0x3a>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <xQueueGenericSend+0x48>
 8003072:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003076:	4861      	ldr	r0, [pc, #388]	@ (80031fc <xQueueGenericSend+0x1c8>)
 8003078:	f7fe faee 	bl	8001658 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d103      	bne.n	800308a <xQueueGenericSend+0x56>
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <xQueueGenericSend+0x5a>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueGenericSend+0x5c>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <xQueueGenericSend+0x6a>
 8003094:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003098:	4858      	ldr	r0, [pc, #352]	@ (80031fc <xQueueGenericSend+0x1c8>)
 800309a:	f7fe fadd 	bl	8001658 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800309e:	f001 fcb7 	bl	8004a10 <xTaskGetSchedulerState>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <xQueueGenericSend+0x7a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <xQueueGenericSend+0x7e>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueGenericSend+0x80>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <xQueueGenericSend+0x8e>
 80030b8:	f240 31bb 	movw	r1, #955	@ 0x3bb
 80030bc:	484f      	ldr	r0, [pc, #316]	@ (80031fc <xQueueGenericSend+0x1c8>)
 80030be:	f7fe facb 	bl	8001658 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80030c2:	f002 fd05 	bl	8005ad0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <xQueueGenericSend+0xa4>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d129      	bne.n	800312c <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	6a38      	ldr	r0, [r7, #32]
 80030de:	f000 fabb 	bl	8003658 <prvCopyDataToQueue>
 80030e2:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	3324      	adds	r3, #36	@ 0x24
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 f9a3 	bl	800443c <xTaskRemoveFromEventList>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80030fc:	4b40      	ldr	r3, [pc, #256]	@ (8003200 <xQueueGenericSend+0x1cc>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	e00a      	b.n	8003124 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003114:	4b3a      	ldr	r3, [pc, #232]	@ (8003200 <xQueueGenericSend+0x1cc>)
 8003116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003124:	f002 fd00 	bl	8005b28 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003128:	2301      	movs	r3, #1
 800312a:	e063      	b.n	80031f4 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003132:	f002 fcf9 	bl	8005b28 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003136:	2300      	movs	r3, #0
 8003138:	e05c      	b.n	80031f4 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4618      	mov	r0, r3
 8003146:	f001 fb23 	bl	8004790 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800314e:	f002 fceb 	bl	8005b28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003152:	f000 fe3f 	bl	8003dd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003156:	f002 fcbb 	bl	8005ad0 <vPortEnterCritical>
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003160:	b25b      	sxtb	r3, r3
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d103      	bne.n	8003170 <xQueueGenericSend+0x13c>
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003176:	b25b      	sxtb	r3, r3
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d103      	bne.n	8003186 <xQueueGenericSend+0x152>
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003186:	f002 fccf 	bl	8005b28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800318a:	1d3a      	adds	r2, r7, #4
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f001 fb12 	bl	80047bc <xTaskCheckForTimeOut>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d124      	bne.n	80031e8 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800319e:	6a38      	ldr	r0, [r7, #32]
 80031a0:	f000 fb52 	bl	8003848 <prvIsQueueFull>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d018      	beq.n	80031dc <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	3310      	adds	r3, #16
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 f8d6 	bl	8004364 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80031b8:	6a38      	ldr	r0, [r7, #32]
 80031ba:	f000 fadd 	bl	8003778 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80031be:	f000 fe17 	bl	8003df0 <xTaskResumeAll>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f af7c 	bne.w	80030c2 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 80031ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <xQueueGenericSend+0x1cc>)
 80031cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	e772      	b.n	80030c2 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80031dc:	6a38      	ldr	r0, [r7, #32]
 80031de:	f000 facb 	bl	8003778 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80031e2:	f000 fe05 	bl	8003df0 <xTaskResumeAll>
 80031e6:	e76c      	b.n	80030c2 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80031e8:	6a38      	ldr	r0, [r7, #32]
 80031ea:	f000 fac5 	bl	8003778 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80031ee:	f000 fdff 	bl	8003df0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80031f2:	2300      	movs	r3, #0
        }
    }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	@ 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	08023acc 	.word	0x08023acc
 8003200:	e000ed04 	.word	0xe000ed04

08003204 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	@ 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <xQueueReceive+0x24>
 800321e:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003222:	485e      	ldr	r0, [pc, #376]	@ (800339c <xQueueReceive+0x198>)
 8003224:	f7fe fa18 	bl	8001658 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <xQueueReceive+0x32>
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <xQueueReceive+0x36>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueReceive+0x38>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <xQueueReceive+0x46>
 8003240:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003244:	4855      	ldr	r0, [pc, #340]	@ (800339c <xQueueReceive+0x198>)
 8003246:	f7fe fa07 	bl	8001658 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800324a:	f001 fbe1 	bl	8004a10 <xTaskGetSchedulerState>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <xQueueReceive+0x56>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <xQueueReceive+0x5a>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <xQueueReceive+0x5c>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <xQueueReceive+0x6a>
 8003264:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003268:	484c      	ldr	r0, [pc, #304]	@ (800339c <xQueueReceive+0x198>)
 800326a:	f7fe f9f5 	bl	8001658 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800326e:	f002 fc2f 	bl	8005ad0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01f      	beq.n	80032be <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	6a38      	ldr	r0, [r7, #32]
 8003282:	f000 fa53 	bl	800372c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00f      	beq.n	80032b6 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	3310      	adds	r3, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f8ce 	bl	800443c <xTaskRemoveFromEventList>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032a6:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <xQueueReceive+0x19c>)
 80032a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032b6:	f002 fc37 	bl	8005b28 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e069      	b.n	8003392 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032c4:	f002 fc30 	bl	8005b28 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e062      	b.n	8003392 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fa5a 	bl	8004790 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80032e0:	f002 fc22 	bl	8005b28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032e4:	f000 fd76 	bl	8003dd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032e8:	f002 fbf2 	bl	8005ad0 <vPortEnterCritical>
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d103      	bne.n	8003302 <xQueueReceive+0xfe>
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003308:	b25b      	sxtb	r3, r3
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d103      	bne.n	8003318 <xQueueReceive+0x114>
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003318:	f002 fc06 	bl	8005b28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331c:	1d3a      	adds	r2, r7, #4
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fa49 	bl	80047bc <xTaskCheckForTimeOut>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d123      	bne.n	8003378 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003330:	6a38      	ldr	r0, [r7, #32]
 8003332:	f000 fa73 	bl	800381c <prvIsQueueEmpty>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d017      	beq.n	800336c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	3324      	adds	r3, #36	@ 0x24
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f80d 	bl	8004364 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800334a:	6a38      	ldr	r0, [r7, #32]
 800334c:	f000 fa14 	bl	8003778 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003350:	f000 fd4e 	bl	8003df0 <xTaskResumeAll>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d189      	bne.n	800326e <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <xQueueReceive+0x19c>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	e780      	b.n	800326e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800336c:	6a38      	ldr	r0, [r7, #32]
 800336e:	f000 fa03 	bl	8003778 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003372:	f000 fd3d 	bl	8003df0 <xTaskResumeAll>
 8003376:	e77a      	b.n	800326e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003378:	6a38      	ldr	r0, [r7, #32]
 800337a:	f000 f9fd 	bl	8003778 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800337e:	f000 fd37 	bl	8003df0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003382:	6a38      	ldr	r0, [r7, #32]
 8003384:	f000 fa4a 	bl	800381c <prvIsQueueEmpty>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f43f af6f 	beq.w	800326e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003390:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3728      	adds	r7, #40	@ 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	08023acc 	.word	0x08023acc
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <xQueueSemaphoreTake+0x26>
 80033c0:	f240 6182 	movw	r1, #1666	@ 0x682
 80033c4:	486c      	ldr	r0, [pc, #432]	@ (8003578 <xQueueSemaphoreTake+0x1d4>)
 80033c6:	f7fe f947 	bl	8001658 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <xQueueSemaphoreTake+0x38>
 80033d2:	f240 6186 	movw	r1, #1670	@ 0x686
 80033d6:	4868      	ldr	r0, [pc, #416]	@ (8003578 <xQueueSemaphoreTake+0x1d4>)
 80033d8:	f7fe f93e 	bl	8001658 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033dc:	f001 fb18 	bl	8004a10 <xTaskGetSchedulerState>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <xQueueSemaphoreTake+0x48>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <xQueueSemaphoreTake+0x4c>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <xQueueSemaphoreTake+0x4e>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <xQueueSemaphoreTake+0x5c>
 80033f6:	f240 618b 	movw	r1, #1675	@ 0x68b
 80033fa:	485f      	ldr	r0, [pc, #380]	@ (8003578 <xQueueSemaphoreTake+0x1d4>)
 80033fc:	f7fe f92c 	bl	8001658 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003400:	f002 fb66 	bl	8005ad0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003408:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d024      	beq.n	800345a <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003420:	f001 fd18 	bl	8004e54 <pvTaskIncrementMutexHeldCount>
 8003424:	4602      	mov	r2, r0
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00f      	beq.n	8003452 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3310      	adds	r3, #16
 8003436:	4618      	mov	r0, r3
 8003438:	f001 f800 	bl	800443c <xTaskRemoveFromEventList>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003442:	4b4e      	ldr	r3, [pc, #312]	@ (800357c <xQueueSemaphoreTake+0x1d8>)
 8003444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003452:	f002 fb69 	bl	8005b28 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8003456:	2301      	movs	r3, #1
 8003458:	e089      	b.n	800356e <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003460:	f002 fb62 	bl	8005b28 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003464:	2300      	movs	r3, #0
 8003466:	e082      	b.n	800356e <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	4618      	mov	r0, r3
 8003474:	f001 f98c 	bl	8004790 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003478:	2301      	movs	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800347c:	f002 fb54 	bl	8005b28 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003480:	f000 fca8 	bl	8003dd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003484:	f002 fb24 	bl	8005ad0 <vPortEnterCritical>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800348e:	b25b      	sxtb	r3, r3
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d103      	bne.n	800349e <xQueueSemaphoreTake+0xfa>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d103      	bne.n	80034b4 <xQueueSemaphoreTake+0x110>
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034b4:	f002 fb38 	bl	8005b28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b8:	463a      	mov	r2, r7
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 f97b 	bl	80047bc <xTaskCheckForTimeOut>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d132      	bne.n	8003532 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034cc:	69f8      	ldr	r0, [r7, #28]
 80034ce:	f000 f9a5 	bl	800381c <prvIsQueueEmpty>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d026      	beq.n	8003526 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 80034e0:	f002 faf6 	bl	8005ad0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 faaf 	bl	8004a4c <xTaskPriorityInherit>
 80034ee:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 80034f0:	f002 fb1a 	bl	8005b28 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3324      	adds	r3, #36	@ 0x24
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 ff31 	bl	8004364 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003502:	69f8      	ldr	r0, [r7, #28]
 8003504:	f000 f938 	bl	8003778 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003508:	f000 fc72 	bl	8003df0 <xTaskResumeAll>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f47f af76 	bne.w	8003400 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003514:	4b19      	ldr	r3, [pc, #100]	@ (800357c <xQueueSemaphoreTake+0x1d8>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	e76c      	b.n	8003400 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003526:	69f8      	ldr	r0, [r7, #28]
 8003528:	f000 f926 	bl	8003778 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800352c:	f000 fc60 	bl	8003df0 <xTaskResumeAll>
 8003530:	e766      	b.n	8003400 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003532:	69f8      	ldr	r0, [r7, #28]
 8003534:	f000 f920 	bl	8003778 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003538:	f000 fc5a 	bl	8003df0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800353c:	69f8      	ldr	r0, [r7, #28]
 800353e:	f000 f96d 	bl	800381c <prvIsQueueEmpty>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f43f af5b 	beq.w	8003400 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8003550:	f002 fabe 	bl	8005ad0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003554:	69f8      	ldr	r0, [r7, #28]
 8003556:	f000 f867 	bl	8003628 <prvGetDisinheritPriorityAfterTimeout>
 800355a:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	6979      	ldr	r1, [r7, #20]
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fbae 	bl	8004cc4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003568:	f002 fade 	bl	8005b28 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800356c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3728      	adds	r7, #40	@ 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	08023acc 	.word	0x08023acc
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <uxQueueMessagesWaiting+0x18>
 800358e:	f640 019b 	movw	r1, #2203	@ 0x89b
 8003592:	4807      	ldr	r0, [pc, #28]	@ (80035b0 <uxQueueMessagesWaiting+0x30>)
 8003594:	f7fe f860 	bl	8001658 <vAssertCalled>

    taskENTER_CRITICAL();
 8003598:	f002 fa9a 	bl	8005ad0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80035a2:	f002 fac1 	bl	8005b28 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08023acc 	.word	0x08023acc

080035b4 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <uxQueueSpacesAvailable+0x1c>
 80035c6:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 80035ca:	4809      	ldr	r0, [pc, #36]	@ (80035f0 <uxQueueSpacesAvailable+0x3c>)
 80035cc:	f7fe f844 	bl	8001658 <vAssertCalled>

    taskENTER_CRITICAL();
 80035d0:	f002 fa7e 	bl	8005ad0 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 80035e0:	f002 faa2 	bl	8005b28 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 80035e4:	68bb      	ldr	r3, [r7, #8]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	08023acc 	.word	0x08023acc

080035f4 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <vQueueDelete+0x1c>
 8003606:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800360a:	4806      	ldr	r0, [pc, #24]	@ (8003624 <vQueueDelete+0x30>)
 800360c:	f7fe f824 	bl	8001658 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f979 	bl	8003908 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f002 fc30 	bl	8005e7c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	08023acc 	.word	0x08023acc

08003628 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e001      	b.n	800364a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800364a:	68fb      	ldr	r3, [r7, #12]
    }
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d14d      	bne.n	800371a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fa82 	bl	8004b8c <xTaskPriorityDisinherit>
 8003688:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	e043      	b.n	800371a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d119      	bne.n	80036cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6858      	ldr	r0, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	461a      	mov	r2, r3
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	f01e fb14 	bl	8021cd0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	441a      	add	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d32b      	bcc.n	800371a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	e026      	b.n	800371a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68d8      	ldr	r0, [r3, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	461a      	mov	r2, r3
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	f01e fafa 	bl	8021cd0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	425b      	negs	r3, r3
 80036e6:	441a      	add	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d207      	bcs.n	8003708 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	425b      	negs	r3, r3
 8003702:	441a      	add	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d105      	bne.n	800371a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	3b01      	subs	r3, #1
 8003718:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003722:	697b      	ldr	r3, [r7, #20]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	441a      	add	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d303      	bcc.n	8003760 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68d9      	ldr	r1, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	461a      	mov	r2, r3
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	f01e fab0 	bl	8021cd0 <memcpy>
    }
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003780:	f002 f9a6 	bl	8005ad0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800378a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800378c:	e011      	b.n	80037b2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d012      	beq.n	80037bc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3324      	adds	r3, #36	@ 0x24
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fe4e 	bl	800443c <xTaskRemoveFromEventList>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80037a6:	f001 f865 	bl	8004874 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80037b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dce9      	bgt.n	800378e <prvUnlockQueue+0x16>
 80037ba:	e000      	b.n	80037be <prvUnlockQueue+0x46>
                    break;
 80037bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	22ff      	movs	r2, #255	@ 0xff
 80037c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80037c6:	f002 f9af 	bl	8005b28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80037ca:	f002 f981 	bl	8005ad0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d6:	e011      	b.n	80037fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d012      	beq.n	8003806 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3310      	adds	r3, #16
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fe29 	bl	800443c <xTaskRemoveFromEventList>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80037f0:	f001 f840 	bl	8004874 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80037fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003800:	2b00      	cmp	r3, #0
 8003802:	dce9      	bgt.n	80037d8 <prvUnlockQueue+0x60>
 8003804:	e000      	b.n	8003808 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003806:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	22ff      	movs	r2, #255	@ 0xff
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003810:	f002 f98a 	bl	8005b28 <vPortExitCritical>
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003824:	f002 f954 	bl	8005ad0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e001      	b.n	800383a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800383a:	f002 f975 	bl	8005b28 <vPortExitCritical>

    return xReturn;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003850:	f002 f93e 	bl	8005ad0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	429a      	cmp	r2, r3
 800385e:	d102      	bne.n	8003866 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e001      	b.n	800386a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800386a:	f002 f95d 	bl	8005b28 <vPortExitCritical>

    return xReturn;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <vQueueAddToRegistry+0x1e>
 800388c:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8003890:	481b      	ldr	r0, [pc, #108]	@ (8003900 <vQueueAddToRegistry+0x88>)
 8003892:	f7fd fee1 	bl	8001658 <vAssertCalled>

        if( pcQueueName != NULL )
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d024      	beq.n	80038e6 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e01e      	b.n	80038e0 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <vQueueAddToRegistry+0x8c>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d105      	bne.n	80038be <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4a13      	ldr	r2, [pc, #76]	@ (8003904 <vQueueAddToRegistry+0x8c>)
 80038b8:	4413      	add	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
                    break;
 80038bc:	e013      	b.n	80038e6 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <vQueueAddToRegistry+0x62>
 80038c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003904 <vQueueAddToRegistry+0x8c>)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <vQueueAddToRegistry+0x8c>)
 80038d6:	4413      	add	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b07      	cmp	r3, #7
 80038e4:	d9dd      	bls.n	80038a2 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	08023acc 	.word	0x08023acc
 8003904:	20000c04 	.word	0x20000c04

08003908 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <vQueueUnregisterQueue+0x18>
 8003916:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800391a:	4812      	ldr	r0, [pc, #72]	@ (8003964 <vQueueUnregisterQueue+0x5c>)
 800391c:	f7fd fe9c 	bl	8001658 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e016      	b.n	8003954 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003926:	4a10      	ldr	r2, [pc, #64]	@ (8003968 <vQueueUnregisterQueue+0x60>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	d10b      	bne.n	800394e <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8003936:	4a0c      	ldr	r2, [pc, #48]	@ (8003968 <vQueueUnregisterQueue+0x60>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2100      	movs	r1, #0
 800393c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003940:	4a09      	ldr	r2, [pc, #36]	@ (8003968 <vQueueUnregisterQueue+0x60>)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	2200      	movs	r2, #0
 800394a:	605a      	str	r2, [r3, #4]
                break;
 800394c:	e006      	b.n	800395c <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3301      	adds	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b07      	cmp	r3, #7
 8003958:	d9e5      	bls.n	8003926 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	08023acc 	.word	0x08023acc
 8003968:	20000c04 	.word	0x20000c04

0800396c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	@ 0x28
 8003970:	af04      	add	r7, sp, #16
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f002 f9a8 	bl	8005cd4 <pvPortMalloc>
 8003984:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800398c:	206c      	movs	r0, #108	@ 0x6c
 800398e:	f002 f9a1 	bl	8005cd4 <pvPortMalloc>
 8003992:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800399a:	226c      	movs	r2, #108	@ 0x6c
 800399c:	2100      	movs	r1, #0
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f01e faa3 	bl	8021eea <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80039aa:	e005      	b.n	80039b8 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80039ac:	6938      	ldr	r0, [r7, #16]
 80039ae:	f002 fa65 	bl	8005e7c <vPortFree>
 80039b2:	e001      	b.n	80039b8 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039be:	2300      	movs	r3, #0
 80039c0:	9303      	str	r3, [sp, #12]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	9302      	str	r3, [sp, #8]
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f829 	bl	8003a2c <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80039da:	697b      	ldr	r3, [r7, #20]
    }
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff ffb3 	bl	800396c <prvCreateTask>
 8003a06:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003a0e:	6938      	ldr	r0, [r7, #16]
 8003a10:	f000 f890 	bl	8003b34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003a14:	2301      	movs	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e002      	b.n	8003a20 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8003a20:	697b      	ldr	r3, [r7, #20]
    }
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	461a      	mov	r2, r3
 8003a44:	21a5      	movs	r1, #165	@ 0xa5
 8003a46:	f01e fa50 	bl	8021eea <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003a54:	440b      	add	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f023 0307 	bic.w	r3, r3, #7
 8003a62:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <prvInitialiseNewTask+0x4c>
 8003a6e:	f240 712e 	movw	r1, #1838	@ 0x72e
 8003a72:	482f      	ldr	r0, [pc, #188]	@ (8003b30 <prvInitialiseNewTask+0x104>)
 8003a74:	f7fd fdf0 	bl	8001658 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01e      	beq.n	8003abc <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e012      	b.n	8003aaa <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4413      	add	r3, r2
 8003a8a:	7819      	ldrb	r1, [r3, #0]
 8003a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4413      	add	r3, r2
 8003a92:	3334      	adds	r3, #52	@ 0x34
 8003a94:	460a      	mov	r2, r1
 8003a96:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d9e9      	bls.n	8003a84 <prvInitialiseNewTask+0x58>
 8003ab0:	e000      	b.n	8003ab4 <prvInitialiseNewTask+0x88>
            {
                break;
 8003ab2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d904      	bls.n	8003acc <prvInitialiseNewTask+0xa0>
 8003ac2:	f240 7164 	movw	r1, #1892	@ 0x764
 8003ac6:	481a      	ldr	r0, [pc, #104]	@ (8003b30 <prvInitialiseNewTask+0x104>)
 8003ac8:	f7fd fdc6 	bl	8001658 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d901      	bls.n	8003ad6 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad2:	2306      	movs	r3, #6
 8003ad4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	6a3a      	ldr	r2, [r7, #32]
 8003ae0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f8c0 	bl	8002c6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	3318      	adds	r3, #24
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff f8bb 	bl	8002c6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003afa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f1c3 0207 	rsb	r2, r3, #7
 8003b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b04:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	68f9      	ldr	r1, [r7, #12]
 8003b10:	6938      	ldr	r0, [r7, #16]
 8003b12:	f001 fea5 	bl	8005860 <pxPortInitialiseStack>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b26:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08023af0 	.word	0x08023af0

08003b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003b3c:	f001 ffc8 	bl	8005ad0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003b40:	4b41      	ldr	r3, [pc, #260]	@ (8003c48 <prvAddNewTaskToReadyList+0x114>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	4a40      	ldr	r2, [pc, #256]	@ (8003c48 <prvAddNewTaskToReadyList+0x114>)
 8003b48:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003b4a:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <prvAddNewTaskToReadyList+0x118>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003b52:	4a3e      	ldr	r2, [pc, #248]	@ (8003c4c <prvAddNewTaskToReadyList+0x118>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b58:	4b3b      	ldr	r3, [pc, #236]	@ (8003c48 <prvAddNewTaskToReadyList+0x114>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d110      	bne.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003b60:	f000 feac 	bl	80048bc <prvInitialiseTaskLists>
 8003b64:	e00d      	b.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003b66:	4b3a      	ldr	r3, [pc, #232]	@ (8003c50 <prvAddNewTaskToReadyList+0x11c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b6e:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <prvAddNewTaskToReadyList+0x118>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d802      	bhi.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003b7c:	4a33      	ldr	r2, [pc, #204]	@ (8003c4c <prvAddNewTaskToReadyList+0x118>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003b82:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <prvAddNewTaskToReadyList+0x120>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a32      	ldr	r2, [pc, #200]	@ (8003c54 <prvAddNewTaskToReadyList+0x120>)
 8003b8a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b8c:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <prvAddNewTaskToReadyList+0x120>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c58 <prvAddNewTaskToReadyList+0x124>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <prvAddNewTaskToReadyList+0x124>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003baa:	492c      	ldr	r1, [pc, #176]	@ (8003c5c <prvAddNewTaskToReadyList+0x128>)
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	609a      	str	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	3204      	adds	r2, #4
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1d1a      	adds	r2, r3, #4
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c5c <prvAddNewTaskToReadyList+0x128>)
 8003bea:	441a      	add	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	615a      	str	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf4:	4919      	ldr	r1, [pc, #100]	@ (8003c5c <prvAddNewTaskToReadyList+0x128>)
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	4814      	ldr	r0, [pc, #80]	@ (8003c5c <prvAddNewTaskToReadyList+0x128>)
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4403      	add	r3, r0
 8003c14:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003c16:	f001 ff87 	bl	8005b28 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <prvAddNewTaskToReadyList+0x11c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00e      	beq.n	8003c40 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <prvAddNewTaskToReadyList+0x118>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d207      	bcs.n	8003c40 <prvAddNewTaskToReadyList+0x10c>
 8003c30:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <prvAddNewTaskToReadyList+0x12c>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000d44 	.word	0x20000d44
 8003c4c:	20000c44 	.word	0x20000c44
 8003c50:	20000d50 	.word	0x20000d50
 8003c54:	20000d60 	.word	0x20000d60
 8003c58:	20000d4c 	.word	0x20000d4c
 8003c5c:	20000c48 	.word	0x20000c48
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d011      	beq.n	8003c9a <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 8003c76:	f000 f8ad 	bl	8003dd4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <vTaskDelay+0x54>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d004      	beq.n	8003c8c <vTaskDelay+0x28>
 8003c82:	f640 118e 	movw	r1, #2446	@ 0x98e
 8003c86:	480d      	ldr	r0, [pc, #52]	@ (8003cbc <vTaskDelay+0x58>)
 8003c88:	f7fd fce6 	bl	8001658 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f001 fd64 	bl	800575c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003c94:	f000 f8ac 	bl	8003df0 <xTaskResumeAll>
 8003c98:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d107      	bne.n	8003cb0 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8003ca0:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <vTaskDelay+0x5c>)
 8003ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000d6c 	.word	0x20000d6c
 8003cbc:	08023af0 	.word	0x08023af0
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e011      	b.n	8003cfc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d50 <prvCreateIdleTasks+0x8c>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4413      	add	r3, r2
 8003cde:	7819      	ldrb	r1, [r3, #0]
 8003ce0:	463a      	mov	r2, r7
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003cea:	463a      	mov	r2, r7
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	ddea      	ble.n	8003cd8 <prvCreateIdleTasks+0x14>
 8003d02:	e000      	b.n	8003d06 <prvCreateIdleTasks+0x42>
        {
            break;
 8003d04:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	e016      	b.n	8003d3a <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <prvCreateIdleTasks+0x90>)
 8003d0e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4a10      	ldr	r2, [pc, #64]	@ (8003d58 <prvCreateIdleTasks+0x94>)
 8003d16:	4413      	add	r3, r2
 8003d18:	4639      	mov	r1, r7
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2300      	movs	r3, #0
 8003d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d26:	6938      	ldr	r0, [r7, #16]
 8003d28:	f7ff fe5c 	bl	80039e4 <xTaskCreate>
 8003d2c:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d006      	beq.n	8003d42 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dde5      	ble.n	8003d0c <prvCreateIdleTasks+0x48>
 8003d40:	e000      	b.n	8003d44 <prvCreateIdleTasks+0x80>
        {
            break;
 8003d42:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003d44:	69fb      	ldr	r3, [r7, #28]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	08023b14 	.word	0x08023b14
 8003d54:	0800488d 	.word	0x0800488d
 8003d58:	20000d68 	.word	0x20000d68

08003d5c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003d62:	f7ff ffaf 	bl	8003cc4 <prvCreateIdleTasks>
 8003d66:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d118      	bne.n	8003da0 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003d6e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003d72:	b672      	cpsid	i
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	b662      	cpsie	i
 8003d82:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003d84:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003d86:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc0 <vTaskStartScheduler+0x64>)
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <vTaskStartScheduler+0x68>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <vTaskStartScheduler+0x6c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003d9a:	f001 fdeb 	bl	8005974 <xPortStartScheduler>
 8003d9e:	e008      	b.n	8003db2 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d104      	bne.n	8003db2 <vTaskStartScheduler+0x56>
 8003da8:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8003dac:	4807      	ldr	r0, [pc, #28]	@ (8003dcc <vTaskStartScheduler+0x70>)
 8003dae:	f7fd fc53 	bl	8001658 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <vTaskStartScheduler+0x74>)
 8003db4:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000d64 	.word	0x20000d64
 8003dc4:	20000d50 	.word	0x20000d50
 8003dc8:	20000d48 	.word	0x20000d48
 8003dcc:	08023af0 	.word	0x08023af0
 8003dd0:	20000008 	.word	0x20000008

08003dd4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003dd8:	4b04      	ldr	r3, [pc, #16]	@ (8003dec <vTaskSuspendAll+0x18>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	4a03      	ldr	r2, [pc, #12]	@ (8003dec <vTaskSuspendAll+0x18>)
 8003de0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	20000d6c 	.word	0x20000d6c

08003df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003dfe:	f001 fe67 	bl	8005ad0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003e06:	4b72      	ldr	r3, [pc, #456]	@ (8003fd0 <xTaskResumeAll+0x1e0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <xTaskResumeAll+0x28>
 8003e0e:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8003e12:	4870      	ldr	r0, [pc, #448]	@ (8003fd4 <xTaskResumeAll+0x1e4>)
 8003e14:	f7fd fc20 	bl	8001658 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003e18:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd0 <xTaskResumeAll+0x1e0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	4a6c      	ldr	r2, [pc, #432]	@ (8003fd0 <xTaskResumeAll+0x1e0>)
 8003e20:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003e22:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd0 <xTaskResumeAll+0x1e0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 80ca 	bne.w	8003fc0 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd8 <xTaskResumeAll+0x1e8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80c5 	beq.w	8003fc0 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e36:	e08e      	b.n	8003f56 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e38:	4b68      	ldr	r3, [pc, #416]	@ (8003fdc <xTaskResumeAll+0x1ec>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	6a12      	ldr	r2, [r2, #32]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	69d2      	ldr	r2, [r2, #28]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3318      	adds	r3, #24
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d103      	bne.n	8003e6e <xTaskResumeAll+0x7e>
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	6a1a      	ldr	r2, [r3, #32]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2200      	movs	r2, #0
 8003e72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	1e5a      	subs	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d103      	bne.n	8003eac <xTaskResumeAll+0xbc>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	615a      	str	r2, [r3, #20]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1e5a      	subs	r2, r3, #1
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	4b46      	ldr	r3, [pc, #280]	@ (8003fe0 <xTaskResumeAll+0x1f0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	4a45      	ldr	r2, [pc, #276]	@ (8003fe0 <xTaskResumeAll+0x1f0>)
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	4944      	ldr	r1, [pc, #272]	@ (8003fe4 <xTaskResumeAll+0x1f4>)
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3304      	adds	r3, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	3204      	adds	r2, #4
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	1d1a      	adds	r2, r3, #4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4a34      	ldr	r2, [pc, #208]	@ (8003fe4 <xTaskResumeAll+0x1f4>)
 8003f12:	441a      	add	r2, r3
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	615a      	str	r2, [r3, #20]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1c:	4931      	ldr	r1, [pc, #196]	@ (8003fe4 <xTaskResumeAll+0x1f4>)
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f2e:	1c59      	adds	r1, r3, #1
 8003f30:	482c      	ldr	r0, [pc, #176]	@ (8003fe4 <xTaskResumeAll+0x1f4>)
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4403      	add	r3, r0
 8003f3c:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f42:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <xTaskResumeAll+0x1f8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d904      	bls.n	8003f56 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003f4c:	4a27      	ldr	r2, [pc, #156]	@ (8003fec <xTaskResumeAll+0x1fc>)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2101      	movs	r1, #1
 8003f52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f56:	4b21      	ldr	r3, [pc, #132]	@ (8003fdc <xTaskResumeAll+0x1ec>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f47f af6c 	bne.w	8003e38 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003f66:	f000 fd27 	bl	80049b8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <xTaskResumeAll+0x200>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003f76:	f000 f86d 	bl	8004054 <xTaskIncrementTick>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003f80:	4a1a      	ldr	r2, [pc, #104]	@ (8003fec <xTaskResumeAll+0x1fc>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2101      	movs	r1, #1
 8003f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1ef      	bne.n	8003f76 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8003f96:	4b16      	ldr	r3, [pc, #88]	@ (8003ff0 <xTaskResumeAll+0x200>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003f9c:	4a13      	ldr	r2, [pc, #76]	@ (8003fec <xTaskResumeAll+0x1fc>)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003fac:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <xTaskResumeAll+0x1f8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <xTaskResumeAll+0x204>)
 8003fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fc0:	f001 fdb2 	bl	8005b28 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000d6c 	.word	0x20000d6c
 8003fd4:	08023af0 	.word	0x08023af0
 8003fd8:	20000d44 	.word	0x20000d44
 8003fdc:	20000d04 	.word	0x20000d04
 8003fe0:	20000d4c 	.word	0x20000d4c
 8003fe4:	20000c48 	.word	0x20000c48
 8003fe8:	20000c44 	.word	0x20000c44
 8003fec:	20000d58 	.word	0x20000d58
 8003ff0:	20000d54 	.word	0x20000d54
 8003ff4:	e000ed04 	.word	0xe000ed04

08003ff8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003ffe:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <xTaskGetTickCount+0x1c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004004:	687b      	ldr	r3, [r7, #4]
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000d48 	.word	0x20000d48

08004018 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <pcTaskGetName+0x14>
 8004026:	4b09      	ldr	r3, [pc, #36]	@ (800404c <pcTaskGetName+0x34>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	e000      	b.n	800402e <pcTaskGetName+0x16>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <pcTaskGetName+0x28>
 8004036:	f241 0155 	movw	r1, #4181	@ 0x1055
 800403a:	4805      	ldr	r0, [pc, #20]	@ (8004050 <pcTaskGetName+0x38>)
 800403c:	f7fd fb0c 	bl	8001658 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3334      	adds	r3, #52	@ 0x34
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000c44 	.word	0x20000c44
 8004050:	08023af0 	.word	0x08023af0

08004054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800405e:	4b7b      	ldr	r3, [pc, #492]	@ (800424c <xTaskIncrementTick+0x1f8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 80e8 	bne.w	8004238 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004068:	4b79      	ldr	r3, [pc, #484]	@ (8004250 <xTaskIncrementTick+0x1fc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004070:	4a77      	ldr	r2, [pc, #476]	@ (8004250 <xTaskIncrementTick+0x1fc>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11a      	bne.n	80040b2 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 800407c:	4b75      	ldr	r3, [pc, #468]	@ (8004254 <xTaskIncrementTick+0x200>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <xTaskIncrementTick+0x3c>
 8004086:	f241 215f 	movw	r1, #4703	@ 0x125f
 800408a:	4873      	ldr	r0, [pc, #460]	@ (8004258 <xTaskIncrementTick+0x204>)
 800408c:	f7fd fae4 	bl	8001658 <vAssertCalled>
 8004090:	4b70      	ldr	r3, [pc, #448]	@ (8004254 <xTaskIncrementTick+0x200>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	4b71      	ldr	r3, [pc, #452]	@ (800425c <xTaskIncrementTick+0x208>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6e      	ldr	r2, [pc, #440]	@ (8004254 <xTaskIncrementTick+0x200>)
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4a6f      	ldr	r2, [pc, #444]	@ (800425c <xTaskIncrementTick+0x208>)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b6e      	ldr	r3, [pc, #440]	@ (8004260 <xTaskIncrementTick+0x20c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004260 <xTaskIncrementTick+0x20c>)
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	f000 fc83 	bl	80049b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80040b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004264 <xTaskIncrementTick+0x210>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	f0c0 80a8 	bcc.w	800420e <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040be:	4b65      	ldr	r3, [pc, #404]	@ (8004254 <xTaskIncrementTick+0x200>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80040c8:	4b66      	ldr	r3, [pc, #408]	@ (8004264 <xTaskIncrementTick+0x210>)
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	601a      	str	r2, [r3, #0]
                    break;
 80040d0:	e09d      	b.n	800420e <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040d2:	4b60      	ldr	r3, [pc, #384]	@ (8004254 <xTaskIncrementTick+0x200>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d203      	bcs.n	80040f2 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80040ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004264 <xTaskIncrementTick+0x210>)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6013      	str	r3, [r2, #0]
                        break;
 80040f0:	e08d      	b.n	800420e <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	68d2      	ldr	r2, [r2, #12]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	6892      	ldr	r2, [r2, #8]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3304      	adds	r3, #4
 8004114:	429a      	cmp	r2, r3
 8004116:	d103      	bne.n	8004120 <xTaskIncrementTick+0xcc>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2200      	movs	r2, #0
 8004124:	615a      	str	r2, [r3, #20]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1e5a      	subs	r2, r3, #1
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01e      	beq.n	8004176 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	6a12      	ldr	r2, [r2, #32]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	69d2      	ldr	r2, [r2, #28]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3318      	adds	r3, #24
 800415a:	429a      	cmp	r2, r3
 800415c:	d103      	bne.n	8004166 <xTaskIncrementTick+0x112>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6a1a      	ldr	r2, [r3, #32]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2200      	movs	r2, #0
 800416a:	629a      	str	r2, [r3, #40]	@ 0x28
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	1e5a      	subs	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	2201      	movs	r2, #1
 800417c:	409a      	lsls	r2, r3
 800417e:	4b3a      	ldr	r3, [pc, #232]	@ (8004268 <xTaskIncrementTick+0x214>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4313      	orrs	r3, r2
 8004184:	4a38      	ldr	r2, [pc, #224]	@ (8004268 <xTaskIncrementTick+0x214>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418c:	4937      	ldr	r1, [pc, #220]	@ (800426c <xTaskIncrementTick+0x218>)
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3304      	adds	r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	60da      	str	r2, [r3, #12]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	3204      	adds	r2, #4
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1d1a      	adds	r2, r3, #4
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4a28      	ldr	r2, [pc, #160]	@ (800426c <xTaskIncrementTick+0x218>)
 80041cc:	441a      	add	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	615a      	str	r2, [r3, #20]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d6:	4925      	ldr	r1, [pc, #148]	@ (800426c <xTaskIncrementTick+0x218>)
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	4820      	ldr	r0, [pc, #128]	@ (800426c <xTaskIncrementTick+0x218>)
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4403      	add	r3, r0
 80041f6:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <xTaskIncrementTick+0x21c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	429a      	cmp	r2, r3
 8004204:	f67f af5b 	bls.w	80040be <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800420c:	e757      	b.n	80040be <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800420e:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <xTaskIncrementTick+0x21c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004214:	4915      	ldr	r1, [pc, #84]	@ (800426c <xTaskIncrementTick+0x218>)
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d901      	bls.n	800422a <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800422a:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <xTaskIncrementTick+0x220>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004232:	2301      	movs	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e004      	b.n	8004242 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004238:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <xTaskIncrementTick+0x224>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	4a0e      	ldr	r2, [pc, #56]	@ (8004278 <xTaskIncrementTick+0x224>)
 8004240:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004242:	69fb      	ldr	r3, [r7, #28]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000d6c 	.word	0x20000d6c
 8004250:	20000d48 	.word	0x20000d48
 8004254:	20000cfc 	.word	0x20000cfc
 8004258:	08023af0 	.word	0x08023af0
 800425c:	20000d00 	.word	0x20000d00
 8004260:	20000d5c 	.word	0x20000d5c
 8004264:	20000d64 	.word	0x20000d64
 8004268:	20000d4c 	.word	0x20000d4c
 800426c:	20000c48 	.word	0x20000c48
 8004270:	20000c44 	.word	0x20000c44
 8004274:	20000d58 	.word	0x20000d58
 8004278:	20000d54 	.word	0x20000d54

0800427c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004282:	4b30      	ldr	r3, [pc, #192]	@ (8004344 <vTaskSwitchContext+0xc8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800428a:	4b2f      	ldr	r3, [pc, #188]	@ (8004348 <vTaskSwitchContext+0xcc>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004290:	e053      	b.n	800433a <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8004292:	4b2d      	ldr	r3, [pc, #180]	@ (8004348 <vTaskSwitchContext+0xcc>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8004298:	f7fd f9d6 	bl	8001648 <ulGetRunTimeCounterValue>
 800429c:	4603      	mov	r3, r0
 800429e:	4a2b      	ldr	r2, [pc, #172]	@ (800434c <vTaskSwitchContext+0xd0>)
 80042a0:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 80042a2:	4b2a      	ldr	r3, [pc, #168]	@ (800434c <vTaskSwitchContext+0xd0>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <vTaskSwitchContext+0xd4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d909      	bls.n	80042c2 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 80042ae:	4b27      	ldr	r3, [pc, #156]	@ (800434c <vTaskSwitchContext+0xd0>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <vTaskSwitchContext+0xd4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1ad1      	subs	r1, r2, r3
 80042b8:	4b26      	ldr	r3, [pc, #152]	@ (8004354 <vTaskSwitchContext+0xd8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042be:	440a      	add	r2, r1
 80042c0:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 80042c2:	4b22      	ldr	r3, [pc, #136]	@ (800434c <vTaskSwitchContext+0xd0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a22      	ldr	r2, [pc, #136]	@ (8004350 <vTaskSwitchContext+0xd4>)
 80042c8:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80042ca:	4b23      	ldr	r3, [pc, #140]	@ (8004358 <vTaskSwitchContext+0xdc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	f1c3 031f 	rsb	r3, r3, #31
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	491e      	ldr	r1, [pc, #120]	@ (800435c <vTaskSwitchContext+0xe0>)
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <vTaskSwitchContext+0x82>
 80042f4:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 80042f8:	4819      	ldr	r0, [pc, #100]	@ (8004360 <vTaskSwitchContext+0xe4>)
 80042fa:	f7fd f9ad 	bl	8001658 <vAssertCalled>
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a14      	ldr	r2, [pc, #80]	@ (800435c <vTaskSwitchContext+0xe0>)
 800430a:	4413      	add	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3308      	adds	r3, #8
 8004320:	429a      	cmp	r2, r3
 8004322:	d103      	bne.n	800432c <vTaskSwitchContext+0xb0>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4a08      	ldr	r2, [pc, #32]	@ (8004354 <vTaskSwitchContext+0xd8>)
 8004334:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004336:	4b07      	ldr	r3, [pc, #28]	@ (8004354 <vTaskSwitchContext+0xd8>)
 8004338:	681b      	ldr	r3, [r3, #0]
    }
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000d6c 	.word	0x20000d6c
 8004348:	20000d58 	.word	0x20000d58
 800434c:	20000d74 	.word	0x20000d74
 8004350:	20000d70 	.word	0x20000d70
 8004354:	20000c44 	.word	0x20000c44
 8004358:	20000d4c 	.word	0x20000d4c
 800435c:	20000c48 	.word	0x20000c48
 8004360:	08023af0 	.word	0x08023af0

08004364 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <vTaskPlaceOnEventList+0x1a>
 8004374:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8004378:	4808      	ldr	r0, [pc, #32]	@ (800439c <vTaskPlaceOnEventList+0x38>)
 800437a:	f7fd f96d 	bl	8001658 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800437e:	4b08      	ldr	r3, [pc, #32]	@ (80043a0 <vTaskPlaceOnEventList+0x3c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3318      	adds	r3, #24
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fe fca1 	bl	8002cce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800438c:	2101      	movs	r1, #1
 800438e:	6838      	ldr	r0, [r7, #0]
 8004390:	f001 f9e4 	bl	800575c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	08023af0 	.word	0x08023af0
 80043a0:	20000c44 	.word	0x20000c44

080043a4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <vTaskPlaceOnUnorderedEventList+0x1c>
 80043b6:	f241 419e 	movw	r1, #5278	@ 0x149e
 80043ba:	481d      	ldr	r0, [pc, #116]	@ (8004430 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80043bc:	f7fd f94c 	bl	8001658 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80043c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004434 <vTaskPlaceOnUnorderedEventList+0x90>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <vTaskPlaceOnUnorderedEventList+0x2e>
 80043c8:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 80043cc:	4818      	ldr	r0, [pc, #96]	@ (8004430 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80043ce:	f7fd f943 	bl	8001658 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80043d2:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <vTaskPlaceOnUnorderedEventList+0x94>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043dc:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <vTaskPlaceOnUnorderedEventList+0x94>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	61da      	str	r2, [r3, #28]
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <vTaskPlaceOnUnorderedEventList+0x94>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	6892      	ldr	r2, [r2, #8]
 80043f4:	621a      	str	r2, [r3, #32]
 80043f6:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <vTaskPlaceOnUnorderedEventList+0x94>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	3218      	adds	r2, #24
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f103 0218 	add.w	r2, r3, #24
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	629a      	str	r2, [r3, #40]	@ 0x28
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004420:	2101      	movs	r1, #1
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f001 f99a 	bl	800575c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8004428:	bf00      	nop
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	08023af0 	.word	0x08023af0
 8004434:	20000d6c 	.word	0x20000d6c
 8004438:	20000c44 	.word	0x20000c44

0800443c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <xTaskRemoveFromEventList+0x20>
 8004452:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8004456:	485b      	ldr	r0, [pc, #364]	@ (80045c4 <xTaskRemoveFromEventList+0x188>)
 8004458:	f7fd f8fe 	bl	8001658 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	6a12      	ldr	r2, [r2, #32]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	69d2      	ldr	r2, [r2, #28]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3318      	adds	r3, #24
 800447e:	429a      	cmp	r2, r3
 8004480:	d103      	bne.n	800448a <xTaskRemoveFromEventList+0x4e>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2200      	movs	r2, #0
 800448e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800449a:	4b4b      	ldr	r3, [pc, #300]	@ (80045c8 <xTaskRemoveFromEventList+0x18c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d160      	bne.n	8004564 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	68d2      	ldr	r2, [r2, #12]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	3304      	adds	r3, #4
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d103      	bne.n	80044d0 <xTaskRemoveFromEventList+0x94>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2200      	movs	r2, #0
 80044d4:	615a      	str	r2, [r3, #20]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	2201      	movs	r2, #1
 80044e6:	409a      	lsls	r2, r3
 80044e8:	4b38      	ldr	r3, [pc, #224]	@ (80045cc <xTaskRemoveFromEventList+0x190>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	4a37      	ldr	r2, [pc, #220]	@ (80045cc <xTaskRemoveFromEventList+0x190>)
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f6:	4936      	ldr	r1, [pc, #216]	@ (80045d0 <xTaskRemoveFromEventList+0x194>)
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	3304      	adds	r3, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	3204      	adds	r2, #4
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1d1a      	adds	r2, r3, #4
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4a26      	ldr	r2, [pc, #152]	@ (80045d0 <xTaskRemoveFromEventList+0x194>)
 8004536:	441a      	add	r2, r3
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	615a      	str	r2, [r3, #20]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004540:	4923      	ldr	r1, [pc, #140]	@ (80045d0 <xTaskRemoveFromEventList+0x194>)
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	481e      	ldr	r0, [pc, #120]	@ (80045d0 <xTaskRemoveFromEventList+0x194>)
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4403      	add	r3, r0
 8004560:	6019      	str	r1, [r3, #0]
 8004562:	e01b      	b.n	800459c <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004564:	4b1b      	ldr	r3, [pc, #108]	@ (80045d4 <xTaskRemoveFromEventList+0x198>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	61da      	str	r2, [r3, #28]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	621a      	str	r2, [r3, #32]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	3218      	adds	r2, #24
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f103 0218 	add.w	r2, r3, #24
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	4a11      	ldr	r2, [pc, #68]	@ (80045d4 <xTaskRemoveFromEventList+0x198>)
 8004590:	629a      	str	r2, [r3, #40]	@ 0x28
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <xTaskRemoveFromEventList+0x198>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	4a0e      	ldr	r2, [pc, #56]	@ (80045d4 <xTaskRemoveFromEventList+0x198>)
 800459a:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a0:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <xTaskRemoveFromEventList+0x19c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d905      	bls.n	80045b6 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <xTaskRemoveFromEventList+0x1a0>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e001      	b.n	80045ba <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80045ba:	69fb      	ldr	r3, [r7, #28]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	08023af0 	.word	0x08023af0
 80045c8:	20000d6c 	.word	0x20000d6c
 80045cc:	20000d4c 	.word	0x20000d4c
 80045d0:	20000c48 	.word	0x20000c48
 80045d4:	20000d04 	.word	0x20000d04
 80045d8:	20000c44 	.word	0x20000c44
 80045dc:	20000d58 	.word	0x20000d58

080045e0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80045ea:	4b52      	ldr	r3, [pc, #328]	@ (8004734 <vTaskRemoveFromUnorderedEventList+0x154>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <vTaskRemoveFromUnorderedEventList+0x1c>
 80045f2:	f241 5143 	movw	r1, #5443	@ 0x1543
 80045f6:	4850      	ldr	r0, [pc, #320]	@ (8004738 <vTaskRemoveFromUnorderedEventList+0x158>)
 80045f8:	f7fd f82e 	bl	8001658 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <vTaskRemoveFromUnorderedEventList+0x3c>
 8004612:	f241 514e 	movw	r1, #5454	@ 0x154e
 8004616:	4848      	ldr	r0, [pc, #288]	@ (8004738 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004618:	f7fd f81e 	bl	8001658 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6892      	ldr	r2, [r2, #8]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6852      	ldr	r2, [r2, #4]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d103      	bne.n	8004648 <vTaskRemoveFromUnorderedEventList+0x68>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	1e5a      	subs	r2, r3, #1
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	68d2      	ldr	r2, [r2, #12]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	6892      	ldr	r2, [r2, #8]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	3304      	adds	r3, #4
 800467a:	429a      	cmp	r2, r3
 800467c:	d103      	bne.n	8004686 <vTaskRemoveFromUnorderedEventList+0xa6>
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	615a      	str	r2, [r3, #20]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1e5a      	subs	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	2201      	movs	r2, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	4b27      	ldr	r3, [pc, #156]	@ (800473c <vTaskRemoveFromUnorderedEventList+0x15c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	4a25      	ldr	r2, [pc, #148]	@ (800473c <vTaskRemoveFromUnorderedEventList+0x15c>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ac:	4924      	ldr	r1, [pc, #144]	@ (8004740 <vTaskRemoveFromUnorderedEventList+0x160>)
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	3304      	adds	r3, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	3204      	adds	r2, #4
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4a15      	ldr	r2, [pc, #84]	@ (8004740 <vTaskRemoveFromUnorderedEventList+0x160>)
 80046ec:	441a      	add	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	615a      	str	r2, [r3, #20]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	4912      	ldr	r1, [pc, #72]	@ (8004740 <vTaskRemoveFromUnorderedEventList+0x160>)
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004708:	1c59      	adds	r1, r3, #1
 800470a:	480d      	ldr	r0, [pc, #52]	@ (8004740 <vTaskRemoveFromUnorderedEventList+0x160>)
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4403      	add	r3, r0
 8004716:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471c:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <vTaskRemoveFromUnorderedEventList+0x164>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004722:	429a      	cmp	r2, r3
 8004724:	d902      	bls.n	800472c <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8004726:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <vTaskRemoveFromUnorderedEventList+0x168>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 800472c:	bf00      	nop
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000d6c 	.word	0x20000d6c
 8004738:	08023af0 	.word	0x08023af0
 800473c:	20000d4c 	.word	0x20000d4c
 8004740:	20000c48 	.word	0x20000c48
 8004744:	20000c44 	.word	0x20000c44
 8004748:	20000d58 	.word	0x20000d58

0800474c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <vTaskSetTimeOutState+0x18>
 800475a:	f241 5186 	movw	r1, #5510	@ 0x1586
 800475e:	4809      	ldr	r0, [pc, #36]	@ (8004784 <vTaskSetTimeOutState+0x38>)
 8004760:	f7fc ff7a 	bl	8001658 <vAssertCalled>
    taskENTER_CRITICAL();
 8004764:	f001 f9b4 	bl	8005ad0 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004768:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <vTaskSetTimeOutState+0x3c>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <vTaskSetTimeOutState+0x40>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8004778:	f001 f9d6 	bl	8005b28 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	08023af0 	.word	0x08023af0
 8004788:	20000d5c 	.word	0x20000d5c
 800478c:	20000d48 	.word	0x20000d48

08004790 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004798:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <vTaskInternalSetTimeOutState+0x24>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <vTaskInternalSetTimeOutState+0x28>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	20000d5c 	.word	0x20000d5c
 80047b8:	20000d48 	.word	0x20000d48

080047bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <xTaskCheckForTimeOut+0x1a>
 80047cc:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80047d0:	4825      	ldr	r0, [pc, #148]	@ (8004868 <xTaskCheckForTimeOut+0xac>)
 80047d2:	f7fc ff41 	bl	8001658 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <xTaskCheckForTimeOut+0x2a>
 80047dc:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 80047e0:	4821      	ldr	r0, [pc, #132]	@ (8004868 <xTaskCheckForTimeOut+0xac>)
 80047e2:	f7fc ff39 	bl	8001658 <vAssertCalled>

    taskENTER_CRITICAL();
 80047e6:	f001 f973 	bl	8005ad0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80047ea:	4b20      	ldr	r3, [pc, #128]	@ (800486c <xTaskCheckForTimeOut+0xb0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d102      	bne.n	800480a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e026      	b.n	8004858 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b18      	ldr	r3, [pc, #96]	@ (8004870 <xTaskCheckForTimeOut+0xb4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d00a      	beq.n	800482c <xTaskCheckForTimeOut+0x70>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	d305      	bcc.n	800482c <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e015      	b.n	8004858 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20b      	bcs.n	800484e <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad2      	subs	r2, r2, r3
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ffa4 	bl	8004790 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e004      	b.n	8004858 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004858:	f001 f966 	bl	8005b28 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800485c:	697b      	ldr	r3, [r7, #20]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	08023af0 	.word	0x08023af0
 800486c:	20000d48 	.word	0x20000d48
 8004870:	20000d5c 	.word	0x20000d5c

08004874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004878:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <vTaskMissedYield+0x14>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	20000d58 	.word	0x20000d58

0800488c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004894:	f000 f852 	bl	800493c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <prvIdleTask+0x28>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d9f9      	bls.n	8004894 <prvIdleTask+0x8>
            {
                taskYIELD();
 80048a0:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <prvIdleTask+0x2c>)
 80048a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80048b0:	e7f0      	b.n	8004894 <prvIdleTask+0x8>
 80048b2:	bf00      	nop
 80048b4:	20000c48 	.word	0x20000c48
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	e00c      	b.n	80048e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4a12      	ldr	r2, [pc, #72]	@ (800491c <prvInitialiseTaskLists+0x60>)
 80048d4:	4413      	add	r3, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe f9a8 	bl	8002c2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3301      	adds	r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b06      	cmp	r3, #6
 80048e6:	d9ef      	bls.n	80048c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80048e8:	480d      	ldr	r0, [pc, #52]	@ (8004920 <prvInitialiseTaskLists+0x64>)
 80048ea:	f7fe f99f 	bl	8002c2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80048ee:	480d      	ldr	r0, [pc, #52]	@ (8004924 <prvInitialiseTaskLists+0x68>)
 80048f0:	f7fe f99c 	bl	8002c2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80048f4:	480c      	ldr	r0, [pc, #48]	@ (8004928 <prvInitialiseTaskLists+0x6c>)
 80048f6:	f7fe f999 	bl	8002c2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80048fa:	480c      	ldr	r0, [pc, #48]	@ (800492c <prvInitialiseTaskLists+0x70>)
 80048fc:	f7fe f996 	bl	8002c2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004900:	480b      	ldr	r0, [pc, #44]	@ (8004930 <prvInitialiseTaskLists+0x74>)
 8004902:	f7fe f993 	bl	8002c2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004906:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <prvInitialiseTaskLists+0x78>)
 8004908:	4a05      	ldr	r2, [pc, #20]	@ (8004920 <prvInitialiseTaskLists+0x64>)
 800490a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800490c:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <prvInitialiseTaskLists+0x7c>)
 800490e:	4a05      	ldr	r2, [pc, #20]	@ (8004924 <prvInitialiseTaskLists+0x68>)
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000c48 	.word	0x20000c48
 8004920:	20000cd4 	.word	0x20000cd4
 8004924:	20000ce8 	.word	0x20000ce8
 8004928:	20000d04 	.word	0x20000d04
 800492c:	20000d18 	.word	0x20000d18
 8004930:	20000d30 	.word	0x20000d30
 8004934:	20000cfc 	.word	0x20000cfc
 8004938:	20000d00 	.word	0x20000d00

0800493c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004942:	e019      	b.n	8004978 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004944:	f001 f8c4 	bl	8005ad0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004948:	4b10      	ldr	r3, [pc, #64]	@ (800498c <prvCheckTasksWaitingTermination+0x50>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe f9f3 	bl	8002d40 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800495a:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <prvCheckTasksWaitingTermination+0x54>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	4a0b      	ldr	r2, [pc, #44]	@ (8004990 <prvCheckTasksWaitingTermination+0x54>)
 8004962:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <prvCheckTasksWaitingTermination+0x58>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <prvCheckTasksWaitingTermination+0x58>)
 800496c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800496e:	f001 f8db 	bl	8005b28 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f810 	bl	8004998 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004978:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <prvCheckTasksWaitingTermination+0x58>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e1      	bne.n	8004944 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000d18 	.word	0x20000d18
 8004990:	20000d44 	.word	0x20000d44
 8004994:	20000d2c 	.word	0x20000d2c

08004998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fa69 	bl	8005e7c <vPortFree>
            vPortFree( pxTCB );
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f001 fa66 	bl	8005e7c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049bc:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <prvResetNextTaskUnblockTime+0x30>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80049c6:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <prvResetNextTaskUnblockTime+0x34>)
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80049ce:	e005      	b.n	80049dc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <prvResetNextTaskUnblockTime+0x30>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <prvResetNextTaskUnblockTime+0x34>)
 80049da:	6013      	str	r3, [r2, #0]
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000cfc 	.word	0x20000cfc
 80049ec:	20000d64 	.word	0x20000d64

080049f0 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 80049f6:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <xTaskGetCurrentTaskHandle+0x1c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 80049fc:	687b      	ldr	r3, [r7, #4]
        }
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000c44 	.word	0x20000c44

08004a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004a16:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <xTaskGetSchedulerState+0x34>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	e008      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004a24:	4b08      	ldr	r3, [pc, #32]	@ (8004a48 <xTaskGetSchedulerState+0x38>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8004a36:	687b      	ldr	r3, [r7, #4]
    }
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20000d50 	.word	0x20000d50
 8004a48:	20000d6c 	.word	0x20000d6c

08004a4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8089 	beq.w	8004b76 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a68:	4b45      	ldr	r3, [pc, #276]	@ (8004b80 <xTaskPriorityInherit+0x134>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d278      	bcs.n	8004b64 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db06      	blt.n	8004a88 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8004a7a:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <xTaskPriorityInherit+0x134>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	f1c3 0207 	rsb	r2, r3, #7
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	6959      	ldr	r1, [r3, #20]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4a3a      	ldr	r2, [pc, #232]	@ (8004b84 <xTaskPriorityInherit+0x138>)
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d159      	bne.n	8004b54 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe f94b 	bl	8002d40 <uxListRemove>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43da      	mvns	r2, r3
 8004abc:	4b32      	ldr	r3, [pc, #200]	@ (8004b88 <xTaskPriorityInherit+0x13c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	4a31      	ldr	r2, [pc, #196]	@ (8004b88 <xTaskPriorityInherit+0x13c>)
 8004ac4:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8004b80 <xTaskPriorityInherit+0x134>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b88 <xTaskPriorityInherit+0x13c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	4a2a      	ldr	r2, [pc, #168]	@ (8004b88 <xTaskPriorityInherit+0x13c>)
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae6:	4927      	ldr	r1, [pc, #156]	@ (8004b84 <xTaskPriorityInherit+0x138>)
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3304      	adds	r3, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	3204      	adds	r2, #4
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4a17      	ldr	r2, [pc, #92]	@ (8004b84 <xTaskPriorityInherit+0x138>)
 8004b26:	441a      	add	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	615a      	str	r2, [r3, #20]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b30:	4914      	ldr	r1, [pc, #80]	@ (8004b84 <xTaskPriorityInherit+0x138>)
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b42:	1c59      	adds	r1, r3, #1
 8004b44:	480f      	ldr	r0, [pc, #60]	@ (8004b84 <xTaskPriorityInherit+0x138>)
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4403      	add	r3, r0
 8004b50:	6019      	str	r1, [r3, #0]
 8004b52:	e004      	b.n	8004b5e <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b54:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <xTaskPriorityInherit+0x134>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e008      	b.n	8004b76 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <xTaskPriorityInherit+0x134>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d201      	bcs.n	8004b76 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004b72:	2301      	movs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8004b76:	697b      	ldr	r3, [r7, #20]
    }
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000c44 	.word	0x20000c44
 8004b84:	20000c48 	.word	0x20000c48
 8004b88:	20000d4c 	.word	0x20000d4c

08004b8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8082 	beq.w	8004ca8 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004ba4:	4b43      	ldr	r3, [pc, #268]	@ (8004cb4 <xTaskPriorityDisinherit+0x128>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d004      	beq.n	8004bb8 <xTaskPriorityDisinherit+0x2c>
 8004bae:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8004bb2:	4841      	ldr	r0, [pc, #260]	@ (8004cb8 <xTaskPriorityDisinherit+0x12c>)
 8004bb4:	f7fc fd50 	bl	8001658 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <xTaskPriorityDisinherit+0x3e>
 8004bc0:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8004bc4:	483c      	ldr	r0, [pc, #240]	@ (8004cb8 <xTaskPriorityDisinherit+0x12c>)
 8004bc6:	f7fc fd47 	bl	8001658 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d063      	beq.n	8004ca8 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d15f      	bne.n	8004ca8 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe f8a7 	bl	8002d40 <uxListRemove>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	4b2d      	ldr	r3, [pc, #180]	@ (8004cbc <xTaskPriorityDisinherit+0x130>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cbc <xTaskPriorityDisinherit+0x130>)
 8004c0c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	f1c3 0207 	rsb	r2, r3, #7
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	2201      	movs	r2, #1
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <xTaskPriorityDisinherit+0x130>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	4a22      	ldr	r2, [pc, #136]	@ (8004cbc <xTaskPriorityDisinherit+0x130>)
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c38:	4921      	ldr	r1, [pc, #132]	@ (8004cc0 <xTaskPriorityDisinherit+0x134>)
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	3304      	adds	r3, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	60da      	str	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	3204      	adds	r2, #4
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1d1a      	adds	r2, r3, #4
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4a12      	ldr	r2, [pc, #72]	@ (8004cc0 <xTaskPriorityDisinherit+0x134>)
 8004c78:	441a      	add	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	615a      	str	r2, [r3, #20]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c82:	490f      	ldr	r1, [pc, #60]	@ (8004cc0 <xTaskPriorityDisinherit+0x134>)
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c94:	1c59      	adds	r1, r3, #1
 8004c96:	480a      	ldr	r0, [pc, #40]	@ (8004cc0 <xTaskPriorityDisinherit+0x134>)
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4403      	add	r3, r0
 8004ca2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8004ca8:	697b      	ldr	r3, [r7, #20]
    }
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000c44 	.word	0x20000c44
 8004cb8:	08023af0 	.word	0x08023af0
 8004cbc:	20000d4c 	.word	0x20000d4c
 8004cc0:	20000c48 	.word	0x20000c48

08004cc4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8096 	beq.w	8004e0a <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8004ce6:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8004cea:	484a      	ldr	r0, [pc, #296]	@ (8004e14 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004cec:	f7fc fcb4 	bl	8001658 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d902      	bls.n	8004d00 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e002      	b.n	8004d06 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d04:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d07c      	beq.n	8004e0a <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d177      	bne.n	8004e0a <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e18 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d104      	bne.n	8004d2e <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8004d24:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8004d28:	483a      	ldr	r0, [pc, #232]	@ (8004e14 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004d2a:	f7fc fc95 	bl	8001658 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db04      	blt.n	8004d4c <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f1c3 0207 	rsb	r2, r3, #7
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	6959      	ldr	r1, [r3, #20]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4a30      	ldr	r2, [pc, #192]	@ (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	4299      	cmp	r1, r3
 8004d60:	d153      	bne.n	8004e0a <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fd ffea 	bl	8002d40 <uxListRemove>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	2201      	movs	r2, #1
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	4b28      	ldr	r3, [pc, #160]	@ (8004e20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4013      	ands	r3, r2
 8004d84:	4a26      	ldr	r2, [pc, #152]	@ (8004e20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004d86:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	4b23      	ldr	r3, [pc, #140]	@ (8004e20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	4a22      	ldr	r2, [pc, #136]	@ (8004e20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9e:	491f      	ldr	r1, [pc, #124]	@ (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3304      	adds	r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	609a      	str	r2, [r3, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	3204      	adds	r2, #4
 8004dc6:	605a      	str	r2, [r3, #4]
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004dde:	441a      	add	r2, r3
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	615a      	str	r2, [r3, #20]
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de8:	490c      	ldr	r1, [pc, #48]	@ (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	4807      	ldr	r0, [pc, #28]	@ (8004e1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4403      	add	r3, r0
 8004e08:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8004e0a:	bf00      	nop
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	08023af0 	.word	0x08023af0
 8004e18:	20000c44 	.word	0x20000c44
 8004e1c:	20000c48 	.word	0x20000c48
 8004e20:	20000d4c 	.word	0x20000d4c

08004e24 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004e2a:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <uxTaskResetEventItemValue+0x2c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8004e32:	4b07      	ldr	r3, [pc, #28]	@ (8004e50 <uxTaskResetEventItemValue+0x2c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <uxTaskResetEventItemValue+0x2c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1c2 0207 	rsb	r2, r2, #7
 8004e40:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8004e42:	687b      	ldr	r3, [r7, #4]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	20000c44 	.word	0x20000c44

08004e54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8004e5a:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <pvTaskIncrementMutexHeldCount+0x2c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8004e70:	687b      	ldr	r3, [r7, #4]
    }
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000c44 	.word	0x20000c44

08004e84 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d004      	beq.n	8004ea4 <ulTaskGenericNotifyTake+0x20>
 8004e9a:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8004e9e:	4833      	ldr	r0, [pc, #204]	@ (8004f6c <ulTaskGenericNotifyTake+0xe8>)
 8004ea0:	f7fc fbda 	bl	8001658 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004ea4:	f7fe ff96 	bl	8003dd4 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8004ea8:	f000 fe12 	bl	8005ad0 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8004eac:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <ulTaskGenericNotifyTake+0xec>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3318      	adds	r3, #24
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8004f70 <ulTaskGenericNotifyTake+0xec>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3368      	adds	r3, #104	@ 0x68
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004ed6:	f000 fe27 	bl	8005b28 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d103      	bne.n	8004ee8 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fc3a 	bl	800575c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004ee8:	f7fe ff82 	bl	8003df0 <xTaskResumeAll>
 8004eec:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10a      	bne.n	8004f0a <ulTaskGenericNotifyTake+0x86>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d107      	bne.n	8004f0a <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8004efa:	4b1e      	ldr	r3, [pc, #120]	@ (8004f74 <ulTaskGenericNotifyTake+0xf0>)
 8004efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004f0a:	f000 fde1 	bl	8005ad0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004f0e:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <ulTaskGenericNotifyTake+0xec>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3318      	adds	r3, #24
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d014      	beq.n	8004f4e <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8004f2a:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <ulTaskGenericNotifyTake+0xec>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3318      	adds	r3, #24
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e008      	b.n	8004f4e <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <ulTaskGenericNotifyTake+0xec>)
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1e5a      	subs	r2, r3, #1
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3318      	adds	r3, #24
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <ulTaskGenericNotifyTake+0xec>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	3368      	adds	r3, #104	@ 0x68
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004f5c:	f000 fde4 	bl	8005b28 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8004f60:	697b      	ldr	r3, [r7, #20]
    }
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	08023af0 	.word	0x08023af0
 8004f70:	20000c44 	.word	0x20000c44
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <xTaskGenericNotifyWait+0x22>
 8004f90:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8004f94:	483e      	ldr	r0, [pc, #248]	@ (8005090 <xTaskGenericNotifyWait+0x118>)
 8004f96:	f7fc fb5f 	bl	8001658 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004f9a:	f7fe ff1b 	bl	8003dd4 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8004f9e:	f000 fd97 	bl	8005ad0 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <xTaskGenericNotifyWait+0x11c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3368      	adds	r3, #104	@ 0x68
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d01a      	beq.n	8004fea <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8004fb4:	4b37      	ldr	r3, [pc, #220]	@ (8005094 <xTaskGenericNotifyWait+0x11c>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3318      	adds	r3, #24
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	4019      	ands	r1, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3318      	adds	r3, #24
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004fd2:	4b30      	ldr	r3, [pc, #192]	@ (8005094 <xTaskGenericNotifyWait+0x11c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	3368      	adds	r3, #104	@ 0x68
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004fea:	f000 fd9d 	bl	8005b28 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d103      	bne.n	8004ffc <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ff8:	f000 fbb0 	bl	800575c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004ffc:	f7fe fef8 	bl	8003df0 <xTaskResumeAll>
 8005000:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10a      	bne.n	800501e <xTaskGenericNotifyWait+0xa6>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d107      	bne.n	800501e <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 800500e:	4b22      	ldr	r3, [pc, #136]	@ (8005098 <xTaskGenericNotifyWait+0x120>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800501e:	f000 fd57 	bl	8005ad0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005028:	4b1a      	ldr	r3, [pc, #104]	@ (8005094 <xTaskGenericNotifyWait+0x11c>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3318      	adds	r3, #24
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800503a:	4b16      	ldr	r3, [pc, #88]	@ (8005094 <xTaskGenericNotifyWait+0x11c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	3368      	adds	r3, #104	@ 0x68
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d002      	beq.n	8005052 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	e010      	b.n	8005074 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005052:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <xTaskGenericNotifyWait+0x11c>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3318      	adds	r3, #24
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	43db      	mvns	r3, r3
 8005064:	4019      	ands	r1, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3318      	adds	r3, #24
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005070:	2301      	movs	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005074:	4b07      	ldr	r3, [pc, #28]	@ (8005094 <xTaskGenericNotifyWait+0x11c>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	3368      	adds	r3, #104	@ 0x68
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005082:	f000 fd51 	bl	8005b28 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005086:	69fb      	ldr	r3, [r7, #28]
    }
 8005088:	4618      	mov	r0, r3
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	08023af0 	.word	0x08023af0
 8005094:	20000c44 	.word	0x20000c44
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80050aa:	2301      	movs	r3, #1
 80050ac:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d004      	beq.n	80050be <xTaskGenericNotify+0x22>
 80050b4:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 80050b8:	487b      	ldr	r0, [pc, #492]	@ (80052a8 <xTaskGenericNotify+0x20c>)
 80050ba:	f7fc facd 	bl	8001658 <vAssertCalled>
        configASSERT( xTaskToNotify );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <xTaskGenericNotify+0x32>
 80050c4:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 80050c8:	4877      	ldr	r0, [pc, #476]	@ (80052a8 <xTaskGenericNotify+0x20c>)
 80050ca:	f7fc fac5 	bl	8001658 <vAssertCalled>
        pxTCB = xTaskToNotify;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 80050d2:	f000 fcfd 	bl	8005ad0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3318      	adds	r3, #24
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80050ec:	6a3a      	ldr	r2, [r7, #32]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4413      	add	r3, r2
 80050f2:	3368      	adds	r3, #104	@ 0x68
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80050f8:	6a3a      	ldr	r2, [r7, #32]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	3368      	adds	r3, #104	@ 0x68
 8005100:	2202      	movs	r2, #2
 8005102:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d83f      	bhi.n	800518a <xTaskGenericNotify+0xee>
 800510a:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <xTaskGenericNotify+0x74>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	0800519f 	.word	0x0800519f
 8005114:	08005125 	.word	0x08005125
 8005118:	08005143 	.word	0x08005143
 800511c:	0800515f 	.word	0x0800515f
 8005120:	0800516f 	.word	0x0800516f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3318      	adds	r3, #24
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	431a      	orrs	r2, r3
 8005134:	6a39      	ldr	r1, [r7, #32]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	3318      	adds	r3, #24
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	605a      	str	r2, [r3, #4]
                    break;
 8005140:	e030      	b.n	80051a4 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	3318      	adds	r3, #24
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3318      	adds	r3, #24
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	605a      	str	r2, [r3, #4]
                    break;
 800515c:	e022      	b.n	80051a4 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800515e:	6a3a      	ldr	r2, [r7, #32]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	3318      	adds	r3, #24
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	605a      	str	r2, [r3, #4]
                    break;
 800516c:	e01a      	b.n	80051a4 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d007      	beq.n	8005184 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005174:	6a3a      	ldr	r2, [r7, #32]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3318      	adds	r3, #24
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005182:	e00f      	b.n	80051a4 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8005188:	e00c      	b.n	80051a4 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800518a:	4b48      	ldr	r3, [pc, #288]	@ (80052ac <xTaskGenericNotify+0x210>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <xTaskGenericNotify+0x106>
 8005192:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8005196:	4844      	ldr	r0, [pc, #272]	@ (80052a8 <xTaskGenericNotify+0x20c>)
 8005198:	f7fc fa5e 	bl	8001658 <vAssertCalled>

                    break;
 800519c:	e001      	b.n	80051a2 <xTaskGenericNotify+0x106>
                    break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <xTaskGenericNotify+0x108>
                    break;
 80051a2:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051a4:	7ffb      	ldrb	r3, [r7, #31]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d177      	bne.n	800529a <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	68d2      	ldr	r2, [r2, #12]
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	6a3a      	ldr	r2, [r7, #32]
 80051c0:	6892      	ldr	r2, [r2, #8]
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	3304      	adds	r3, #4
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d103      	bne.n	80051d8 <xTaskGenericNotify+0x13c>
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	2200      	movs	r2, #0
 80051dc:	615a      	str	r2, [r3, #20]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	2201      	movs	r2, #1
 80051ee:	409a      	lsls	r2, r3
 80051f0:	4b2f      	ldr	r3, [pc, #188]	@ (80052b0 <xTaskGenericNotify+0x214>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	4a2e      	ldr	r2, [pc, #184]	@ (80052b0 <xTaskGenericNotify+0x214>)
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fe:	492d      	ldr	r1, [pc, #180]	@ (80052b4 <xTaskGenericNotify+0x218>)
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	3304      	adds	r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	3204      	adds	r2, #4
 8005226:	605a      	str	r2, [r3, #4]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <xTaskGenericNotify+0x218>)
 800523e:	441a      	add	r2, r3
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	615a      	str	r2, [r3, #20]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005248:	491a      	ldr	r1, [pc, #104]	@ (80052b4 <xTaskGenericNotify+0x218>)
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	4815      	ldr	r0, [pc, #84]	@ (80052b4 <xTaskGenericNotify+0x218>)
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4403      	add	r3, r0
 8005268:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <xTaskGenericNotify+0x1e0>
 8005272:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8005276:	480c      	ldr	r0, [pc, #48]	@ (80052a8 <xTaskGenericNotify+0x20c>)
 8005278:	f7fc f9ee 	bl	8001658 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800527c:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <xTaskGenericNotify+0x21c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	429a      	cmp	r2, r3
 8005288:	d207      	bcs.n	800529a <xTaskGenericNotify+0x1fe>
 800528a:	4b0c      	ldr	r3, [pc, #48]	@ (80052bc <xTaskGenericNotify+0x220>)
 800528c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800529a:	f000 fc45 	bl	8005b28 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80052a0:	4618      	mov	r0, r3
 80052a2:	3728      	adds	r7, #40	@ 0x28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	08023af0 	.word	0x08023af0
 80052ac:	20000d48 	.word	0x20000d48
 80052b0:	20000d4c 	.word	0x20000d4c
 80052b4:	20000c48 	.word	0x20000c48
 80052b8:	20000c44 	.word	0x20000c44
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	@ 0x38
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80052ce:	2301      	movs	r3, #1
 80052d0:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <xTaskGenericNotifyFromISR+0x22>
 80052d8:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 80052dc:	4899      	ldr	r0, [pc, #612]	@ (8005544 <xTaskGenericNotifyFromISR+0x284>)
 80052de:	f7fc f9bb 	bl	8001658 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <xTaskGenericNotifyFromISR+0x32>
 80052e8:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 80052ec:	4895      	ldr	r0, [pc, #596]	@ (8005544 <xTaskGenericNotifyFromISR+0x284>)
 80052ee:	f7fc f9b3 	bl	8001658 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f2:	f000 fcbb 	bl	8005c6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80052fa:	f3ef 8211 	mrs	r2, BASEPRI
 80052fe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005302:	b672      	cpsid	i
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	b662      	cpsie	i
 8005312:	61ba      	str	r2, [r7, #24]
 8005314:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005316:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005318:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 800531a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	3318      	adds	r3, #24
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800532e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	3368      	adds	r3, #104	@ 0x68
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800533e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4413      	add	r3, r2
 8005344:	3368      	adds	r3, #104	@ 0x68
 8005346:	2202      	movs	r2, #2
 8005348:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	2b04      	cmp	r3, #4
 800534e:	d841      	bhi.n	80053d4 <xTaskGenericNotifyFromISR+0x114>
 8005350:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <xTaskGenericNotifyFromISR+0x98>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	080053e9 	.word	0x080053e9
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800538b 	.word	0x0800538b
 8005364:	080053a7 	.word	0x080053a7
 8005368:	080053b7 	.word	0x080053b7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800536c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3318      	adds	r3, #24
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	431a      	orrs	r2, r3
 800537c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	3318      	adds	r3, #24
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	605a      	str	r2, [r3, #4]
                    break;
 8005388:	e031      	b.n	80053ee <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800538a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	3318      	adds	r3, #24
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	3318      	adds	r3, #24
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	605a      	str	r2, [r3, #4]
                    break;
 80053a4:	e023      	b.n	80053ee <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80053a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	3318      	adds	r3, #24
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]
                    break;
 80053b4:	e01b      	b.n	80053ee <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80053b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d007      	beq.n	80053ce <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80053be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	3318      	adds	r3, #24
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80053cc:	e00f      	b.n	80053ee <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80053d2:	e00c      	b.n	80053ee <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80053d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005548 <xTaskGenericNotifyFromISR+0x288>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <xTaskGenericNotifyFromISR+0x12c>
 80053dc:	f641 7169 	movw	r1, #8041	@ 0x1f69
 80053e0:	4858      	ldr	r0, [pc, #352]	@ (8005544 <xTaskGenericNotifyFromISR+0x284>)
 80053e2:	f7fc f939 	bl	8001658 <vAssertCalled>
                    break;
 80053e6:	e001      	b.n	80053ec <xTaskGenericNotifyFromISR+0x12c>
                    break;
 80053e8:	bf00      	nop
 80053ea:	e000      	b.n	80053ee <xTaskGenericNotifyFromISR+0x12e>
                    break;
 80053ec:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80053ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	f040 809a 	bne.w	800552c <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <xTaskGenericNotifyFromISR+0x14a>
 8005400:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005404:	484f      	ldr	r0, [pc, #316]	@ (8005544 <xTaskGenericNotifyFromISR+0x284>)
 8005406:	f7fc f927 	bl	8001658 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800540a:	4b50      	ldr	r3, [pc, #320]	@ (800554c <xTaskGenericNotifyFromISR+0x28c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d160      	bne.n	80054d4 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	623b      	str	r3, [r7, #32]
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541e:	68d2      	ldr	r2, [r2, #12]
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	3304      	adds	r3, #4
 8005434:	429a      	cmp	r2, r3
 8005436:	d103      	bne.n	8005440 <xTaskGenericNotifyFromISR+0x180>
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	2200      	movs	r2, #0
 8005444:	615a      	str	r2, [r3, #20]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	2201      	movs	r2, #1
 8005456:	409a      	lsls	r2, r3
 8005458:	4b3d      	ldr	r3, [pc, #244]	@ (8005550 <xTaskGenericNotifyFromISR+0x290>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4313      	orrs	r3, r2
 800545e:	4a3c      	ldr	r2, [pc, #240]	@ (8005550 <xTaskGenericNotifyFromISR+0x290>)
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005466:	493b      	ldr	r1, [pc, #236]	@ (8005554 <xTaskGenericNotifyFromISR+0x294>)
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	3304      	adds	r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	609a      	str	r2, [r3, #8]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548c:	3204      	adds	r2, #4
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	1d1a      	adds	r2, r3, #4
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005554 <xTaskGenericNotifyFromISR+0x294>)
 80054a6:	441a      	add	r2, r3
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	615a      	str	r2, [r3, #20]
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b0:	4928      	ldr	r1, [pc, #160]	@ (8005554 <xTaskGenericNotifyFromISR+0x294>)
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	4823      	ldr	r0, [pc, #140]	@ (8005554 <xTaskGenericNotifyFromISR+0x294>)
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4403      	add	r3, r0
 80054d0:	6019      	str	r1, [r3, #0]
 80054d2:	e01b      	b.n	800550c <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80054d4:	4b20      	ldr	r3, [pc, #128]	@ (8005558 <xTaskGenericNotifyFromISR+0x298>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054de:	61da      	str	r2, [r3, #28]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	621a      	str	r2, [r3, #32]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ee:	3218      	adds	r2, #24
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	f103 0218 	add.w	r2, r3, #24
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	4a16      	ldr	r2, [pc, #88]	@ (8005558 <xTaskGenericNotifyFromISR+0x298>)
 8005500:	629a      	str	r2, [r3, #40]	@ 0x28
 8005502:	4b15      	ldr	r3, [pc, #84]	@ (8005558 <xTaskGenericNotifyFromISR+0x298>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	4a13      	ldr	r2, [pc, #76]	@ (8005558 <xTaskGenericNotifyFromISR+0x298>)
 800550a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005510:	4b12      	ldr	r3, [pc, #72]	@ (800555c <xTaskGenericNotifyFromISR+0x29c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	429a      	cmp	r2, r3
 8005518:	d908      	bls.n	800552c <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800551a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005526:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <xTaskGenericNotifyFromISR+0x2a0>)
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005536:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8005538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800553a:	4618      	mov	r0, r3
 800553c:	3738      	adds	r7, #56	@ 0x38
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	08023af0 	.word	0x08023af0
 8005548:	20000d48 	.word	0x20000d48
 800554c:	20000d6c 	.word	0x20000d6c
 8005550:	20000d4c 	.word	0x20000d4c
 8005554:	20000c48 	.word	0x20000c48
 8005558:	20000d04 	.word	0x20000d04
 800555c:	20000c44 	.word	0x20000c44
 8005560:	20000d58 	.word	0x20000d58

08005564 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	@ 0x38
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d104      	bne.n	8005580 <vTaskGenericNotifyGiveFromISR+0x1c>
 8005576:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 800557a:	4871      	ldr	r0, [pc, #452]	@ (8005740 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 800557c:	f7fc f86c 	bl	8001658 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <vTaskGenericNotifyGiveFromISR+0x2c>
 8005586:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 800558a:	486d      	ldr	r0, [pc, #436]	@ (8005740 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 800558c:	f7fc f864 	bl	8001658 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005590:	f000 fb6c 	bl	8005c6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8005598:	f3ef 8211 	mrs	r2, BASEPRI
 800559c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80055a0:	b672      	cpsid	i
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	b662      	cpsie	i
 80055b0:	61fa      	str	r2, [r7, #28]
 80055b2:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80055b4:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80055b6:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80055b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	3368      	adds	r3, #104	@ 0x68
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80055c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4413      	add	r3, r2
 80055cc:	3368      	adds	r3, #104	@ 0x68
 80055ce:	2202      	movs	r2, #2
 80055d0:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80055d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3318      	adds	r3, #24
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	3318      	adds	r3, #24
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80055ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 809a 	bne.w	800572a <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <vTaskGenericNotifyGiveFromISR+0xa4>
 80055fe:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8005602:	484f      	ldr	r0, [pc, #316]	@ (8005740 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005604:	f7fc f828 	bl	8001658 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005608:	4b4e      	ldr	r3, [pc, #312]	@ (8005744 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d160      	bne.n	80056d2 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800561c:	68d2      	ldr	r2, [r2, #12]
 800561e:	609a      	str	r2, [r3, #8]
 8005620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	605a      	str	r2, [r3, #4]
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005630:	3304      	adds	r3, #4
 8005632:	429a      	cmp	r2, r3
 8005634:	d103      	bne.n	800563e <vTaskGenericNotifyGiveFromISR+0xda>
 8005636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	2200      	movs	r2, #0
 8005642:	615a      	str	r2, [r3, #20]
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800564e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005652:	2201      	movs	r2, #1
 8005654:	409a      	lsls	r2, r3
 8005656:	4b3c      	ldr	r3, [pc, #240]	@ (8005748 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4313      	orrs	r3, r2
 800565c:	4a3a      	ldr	r2, [pc, #232]	@ (8005748 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005664:	4939      	ldr	r1, [pc, #228]	@ (800574c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3304      	adds	r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800568a:	3204      	adds	r2, #4
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005690:	1d1a      	adds	r2, r3, #4
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80056a4:	441a      	add	r2, r3
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	615a      	str	r2, [r3, #20]
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ae:	4927      	ldr	r1, [pc, #156]	@ (800574c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056c0:	1c59      	adds	r1, r3, #1
 80056c2:	4822      	ldr	r0, [pc, #136]	@ (800574c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4403      	add	r3, r0
 80056ce:	6019      	str	r1, [r3, #0]
 80056d0:	e01b      	b.n	800570a <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80056d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005750 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056dc:	61da      	str	r2, [r3, #28]
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e4:	621a      	str	r2, [r3, #32]
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ec:	3218      	adds	r2, #24
 80056ee:	605a      	str	r2, [r3, #4]
 80056f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f2:	f103 0218 	add.w	r2, r3, #24
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fc:	4a14      	ldr	r2, [pc, #80]	@ (8005750 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80056fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005700:	4b13      	ldr	r3, [pc, #76]	@ (8005750 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005708:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800570a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570e:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	429a      	cmp	r2, r3
 8005716:	d908      	bls.n	800572a <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005724:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	617b      	str	r3, [r7, #20]
    __asm volatile
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f383 8811 	msr	BASEPRI, r3
}
 8005734:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8005736:	bf00      	nop
 8005738:	3738      	adds	r7, #56	@ 0x38
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	08023af0 	.word	0x08023af0
 8005744:	20000d6c 	.word	0x20000d6c
 8005748:	20000d4c 	.word	0x20000d4c
 800574c:	20000c48 	.word	0x20000c48
 8005750:	20000d04 	.word	0x20000d04
 8005754:	20000c44 	.word	0x20000c44
 8005758:	20000d58 	.word	0x20000d58

0800575c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005766:	4b37      	ldr	r3, [pc, #220]	@ (8005844 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800576c:	4b36      	ldr	r3, [pc, #216]	@ (8005848 <prvAddCurrentTaskToDelayedList+0xec>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8005772:	4b36      	ldr	r3, [pc, #216]	@ (800584c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005778:	4b35      	ldr	r3, [pc, #212]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3304      	adds	r3, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd fade 	bl	8002d40 <uxListRemove>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800578a:	4b31      	ldr	r3, [pc, #196]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	2201      	movs	r2, #1
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43da      	mvns	r2, r3
 8005798:	4b2e      	ldr	r3, [pc, #184]	@ (8005854 <prvAddCurrentTaskToDelayedList+0xf8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4013      	ands	r3, r2
 800579e:	4a2d      	ldr	r2, [pc, #180]	@ (8005854 <prvAddCurrentTaskToDelayedList+0xf8>)
 80057a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d124      	bne.n	80057f4 <prvAddCurrentTaskToDelayedList+0x98>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d021      	beq.n	80057f4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b0:	4b29      	ldr	r3, [pc, #164]	@ (8005858 <prvAddCurrentTaskToDelayedList+0xfc>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	4b26      	ldr	r3, [pc, #152]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	4b24      	ldr	r3, [pc, #144]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	6892      	ldr	r2, [r2, #8]
 80057c6:	60da      	str	r2, [r3, #12]
 80057c8:	4b21      	ldr	r3, [pc, #132]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	3204      	adds	r2, #4
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	1d1a      	adds	r2, r3, #4
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	4b1c      	ldr	r3, [pc, #112]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005858 <prvAddCurrentTaskToDelayedList+0xfc>)
 80057e4:	615a      	str	r2, [r3, #20]
 80057e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005858 <prvAddCurrentTaskToDelayedList+0xfc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005858 <prvAddCurrentTaskToDelayedList+0xfc>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80057f2:	e022      	b.n	800583a <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057fc:	4b14      	ldr	r3, [pc, #80]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	429a      	cmp	r2, r3
 800580a:	d207      	bcs.n	800581c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800580c:	4b10      	ldr	r3, [pc, #64]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	6978      	ldr	r0, [r7, #20]
 8005816:	f7fd fa5a 	bl	8002cce <vListInsert>
}
 800581a:	e00e      	b.n	800583a <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800581c:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <prvAddCurrentTaskToDelayedList+0xf4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	69b8      	ldr	r0, [r7, #24]
 8005826:	f7fd fa52 	bl	8002cce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <prvAddCurrentTaskToDelayedList+0x100>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	d202      	bcs.n	800583a <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005834:	4a09      	ldr	r2, [pc, #36]	@ (800585c <prvAddCurrentTaskToDelayedList+0x100>)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6013      	str	r3, [r2, #0]
}
 800583a:	bf00      	nop
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000d48 	.word	0x20000d48
 8005848:	20000cfc 	.word	0x20000cfc
 800584c:	20000d00 	.word	0x20000d00
 8005850:	20000c44 	.word	0x20000c44
 8005854:	20000d4c 	.word	0x20000d4c
 8005858:	20000d30 	.word	0x20000d30
 800585c:	20000d64 	.word	0x20000d64

08005860 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b04      	subs	r3, #4
 8005870:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005878:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b04      	subs	r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b04      	subs	r3, #4
 800588e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005890:	4a0c      	ldr	r2, [pc, #48]	@ (80058c4 <pxPortInitialiseStack+0x64>)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b14      	subs	r3, #20
 800589a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f06f 0202 	mvn.w	r2, #2
 80058ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3b20      	subs	r3, #32
 80058b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80058b6:	68fb      	ldr	r3, [r7, #12]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	080058c9 	.word	0x080058c9

080058c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80058d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <prvTaskExitError+0x48>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d003      	beq.n	80058e4 <prvTaskExitError+0x1c>
 80058dc:	21ee      	movs	r1, #238	@ 0xee
 80058de:	480d      	ldr	r0, [pc, #52]	@ (8005914 <prvTaskExitError+0x4c>)
 80058e0:	f7fb feba 	bl	8001658 <vAssertCalled>
    __asm volatile
 80058e4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80058e8:	b672      	cpsid	i
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	b662      	cpsie	i
 80058f8:	607b      	str	r3, [r7, #4]
}
 80058fa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80058fc:	bf00      	nop
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0fc      	beq.n	80058fe <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c
 8005914:	08023b1c 	.word	0x08023b1c
	...

08005920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <pxCurrentTCBConst2>)
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	f380 8809 	msr	PSP, r0
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8811 	msr	BASEPRI, r0
 800593a:	4770      	bx	lr
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst2>:
 8005940:	20000c44 	.word	0x20000c44
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005948:	4808      	ldr	r0, [pc, #32]	@ (800596c <prvPortStartFirstTask+0x24>)
 800594a:	6800      	ldr	r0, [r0, #0]
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f380 8808 	msr	MSP, r0
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8814 	msr	CONTROL, r0
 800595a:	b662      	cpsie	i
 800595c:	b661      	cpsie	f
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	df00      	svc	0
 8005968:	bf00      	nop
 800596a:	0000      	.short	0x0000
 800596c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop

08005974 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800597a:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa4 <xPortStartScheduler+0x130>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	332c      	adds	r3, #44	@ 0x2c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a48      	ldr	r2, [pc, #288]	@ (8005aa8 <xPortStartScheduler+0x134>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <xPortStartScheduler+0x22>
 800598c:	f240 114b 	movw	r1, #331	@ 0x14b
 8005990:	4846      	ldr	r0, [pc, #280]	@ (8005aac <xPortStartScheduler+0x138>)
 8005992:	f7fb fe61 	bl	8001658 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	3338      	adds	r3, #56	@ 0x38
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a44      	ldr	r2, [pc, #272]	@ (8005ab0 <xPortStartScheduler+0x13c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <xPortStartScheduler+0x38>
 80059a2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80059a6:	4841      	ldr	r0, [pc, #260]	@ (8005aac <xPortStartScheduler+0x138>)
 80059a8:	f7fb fe56 	bl	8001658 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059b0:	4b40      	ldr	r3, [pc, #256]	@ (8005ab4 <xPortStartScheduler+0x140>)
 80059b2:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	22ff      	movs	r2, #255	@ 0xff
 80059c0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	4b38      	ldr	r3, [pc, #224]	@ (8005ab8 <xPortStartScheduler+0x144>)
 80059d6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80059d8:	4b37      	ldr	r3, [pc, #220]	@ (8005ab8 <xPortStartScheduler+0x144>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <xPortStartScheduler+0x76>
 80059e0:	f240 116f 	movw	r1, #367	@ 0x16f
 80059e4:	4831      	ldr	r0, [pc, #196]	@ (8005aac <xPortStartScheduler+0x138>)
 80059e6:	f7fb fe37 	bl	8001658 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00d      	beq.n	8005a14 <xPortStartScheduler+0xa0>
 80059f8:	f240 1173 	movw	r1, #371	@ 0x173
 80059fc:	482b      	ldr	r0, [pc, #172]	@ (8005aac <xPortStartScheduler+0x138>)
 80059fe:	f7fb fe2b 	bl	8001658 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a02:	e007      	b.n	8005a14 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1c:	2b80      	cmp	r3, #128	@ 0x80
 8005a1e:	d0f1      	beq.n	8005a04 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d103      	bne.n	8005a2e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005a26:	4b25      	ldr	r3, [pc, #148]	@ (8005abc <xPortStartScheduler+0x148>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e004      	b.n	8005a38 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f1c3 0307 	rsb	r3, r3, #7
 8005a34:	4a21      	ldr	r2, [pc, #132]	@ (8005abc <xPortStartScheduler+0x148>)
 8005a36:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a38:	4b20      	ldr	r3, [pc, #128]	@ (8005abc <xPortStartScheduler+0x148>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005abc <xPortStartScheduler+0x148>)
 8005a40:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a42:	4b1e      	ldr	r3, [pc, #120]	@ (8005abc <xPortStartScheduler+0x148>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005abc <xPortStartScheduler+0x148>)
 8005a4c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005a56:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac0 <xPortStartScheduler+0x14c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	@ (8005ac0 <xPortStartScheduler+0x14c>)
 8005a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a60:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005a62:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <xPortStartScheduler+0x14c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a16      	ldr	r2, [pc, #88]	@ (8005ac0 <xPortStartScheduler+0x14c>)
 8005a68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005a6e:	4b15      	ldr	r3, [pc, #84]	@ (8005ac4 <xPortStartScheduler+0x150>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005a74:	f000 f8d4 	bl	8005c20 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005a78:	4b13      	ldr	r3, [pc, #76]	@ (8005ac8 <xPortStartScheduler+0x154>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005a7e:	f000 f8e9 	bl	8005c54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a82:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <xPortStartScheduler+0x158>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a11      	ldr	r2, [pc, #68]	@ (8005acc <xPortStartScheduler+0x158>)
 8005a88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a8c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005a8e:	f7ff ff5b 	bl	8005948 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005a92:	f7fe fbf3 	bl	800427c <vTaskSwitchContext>
    prvTaskExitError();
 8005a96:	f7ff ff17 	bl	80058c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	e000ed08 	.word	0xe000ed08
 8005aa8:	08005921 	.word	0x08005921
 8005aac:	08023b1c 	.word	0x08023b1c
 8005ab0:	08005b71 	.word	0x08005b71
 8005ab4:	e000e400 	.word	0xe000e400
 8005ab8:	20000d78 	.word	0x20000d78
 8005abc:	20000d7c 	.word	0x20000d7c
 8005ac0:	e000ed20 	.word	0xe000ed20
 8005ac4:	e000ed1c 	.word	0xe000ed1c
 8005ac8:	2000000c 	.word	0x2000000c
 8005acc:	e000ef34 	.word	0xe000ef34

08005ad0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
    __asm volatile
 8005ad6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005ada:	b672      	cpsid	i
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	b662      	cpsie	i
 8005aea:	607b      	str	r3, [r7, #4]
}
 8005aec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005aee:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <vPortEnterCritical+0x4c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a09      	ldr	r2, [pc, #36]	@ (8005b1c <vPortEnterCritical+0x4c>)
 8005af6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005af8:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <vPortEnterCritical+0x4c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d109      	bne.n	8005b14 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b00:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <vPortEnterCritical+0x50>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <vPortEnterCritical+0x44>
 8005b0a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8005b0e:	4805      	ldr	r0, [pc, #20]	@ (8005b24 <vPortEnterCritical+0x54>)
 8005b10:	f7fb fda2 	bl	8001658 <vAssertCalled>
    }
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	e000ed04 	.word	0xe000ed04
 8005b24:	08023b1c 	.word	0x08023b1c

08005b28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <vPortExitCritical+0x40>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <vPortExitCritical+0x18>
 8005b36:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8005b3a:	480c      	ldr	r0, [pc, #48]	@ (8005b6c <vPortExitCritical+0x44>)
 8005b3c:	f7fb fd8c 	bl	8001658 <vAssertCalled>
    uxCriticalNesting--;
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <vPortExitCritical+0x40>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	4a08      	ldr	r2, [pc, #32]	@ (8005b68 <vPortExitCritical+0x40>)
 8005b48:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005b4a:	4b07      	ldr	r3, [pc, #28]	@ (8005b68 <vPortExitCritical+0x40>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d105      	bne.n	8005b5e <vPortExitCritical+0x36>
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
    __asm volatile
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f383 8811 	msr	BASEPRI, r3
}
 8005b5c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c
 8005b6c:	08023b1c 	.word	0x08023b1c

08005b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005b70:	f3ef 8009 	mrs	r0, PSP
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	4b15      	ldr	r3, [pc, #84]	@ (8005bd0 <pxCurrentTCBConst>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	f01e 0f10 	tst.w	lr, #16
 8005b80:	bf08      	it	eq
 8005b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8a:	6010      	str	r0, [r2, #0]
 8005b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b90:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8005b94:	b672      	cpsid	i
 8005b96:	f380 8811 	msr	BASEPRI, r0
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	f7fe fb6a 	bl	800427c <vTaskSwitchContext>
 8005ba8:	f04f 0000 	mov.w	r0, #0
 8005bac:	f380 8811 	msr	BASEPRI, r0
 8005bb0:	bc09      	pop	{r0, r3}
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	6808      	ldr	r0, [r1, #0]
 8005bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	f01e 0f10 	tst.w	lr, #16
 8005bbe:	bf08      	it	eq
 8005bc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bc4:	f380 8809 	msr	PSP, r0
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop

08005bd0 <pxCurrentTCBConst>:
 8005bd0:	20000c44 	.word	0x20000c44
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop

08005bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
    __asm volatile
 8005bde:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005be2:	b672      	cpsid	i
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	b662      	cpsie	i
 8005bf2:	607b      	str	r3, [r7, #4]
}
 8005bf4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005bf6:	f7fe fa2d 	bl	8004054 <xTaskIncrementTick>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <xPortSysTickHandler+0x44>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f383 8811 	msr	BASEPRI, r3
}
 8005c12:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c24:	4b08      	ldr	r3, [pc, #32]	@ (8005c48 <vPortSetupTimerInterrupt+0x28>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c2a:	4b08      	ldr	r3, [pc, #32]	@ (8005c4c <vPortSetupTimerInterrupt+0x2c>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c30:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <vPortSetupTimerInterrupt+0x30>)
 8005c32:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005c36:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c38:	4b03      	ldr	r3, [pc, #12]	@ (8005c48 <vPortSetupTimerInterrupt+0x28>)
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	601a      	str	r2, [r3, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	e000e010 	.word	0xe000e010
 8005c4c:	e000e018 	.word	0xe000e018
 8005c50:	e000e014 	.word	0xe000e014

08005c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c64 <vPortEnableVFP+0x10>
 8005c58:	6801      	ldr	r1, [r0, #0]
 8005c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c5e:	6001      	str	r1, [r0, #0]
 8005c60:	4770      	bx	lr
 8005c62:	0000      	.short	0x0000
 8005c64:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop

08005c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005c72:	f3ef 8305 	mrs	r3, IPSR
 8005c76:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d90e      	bls.n	8005c9c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c7e:	4a10      	ldr	r2, [pc, #64]	@ (8005cc0 <vPortValidateInterruptPriority+0x54>)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c88:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc4 <vPortValidateInterruptPriority+0x58>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	78fa      	ldrb	r2, [r7, #3]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d204      	bcs.n	8005c9c <vPortValidateInterruptPriority+0x30>
 8005c92:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8005c96:	480c      	ldr	r0, [pc, #48]	@ (8005cc8 <vPortValidateInterruptPriority+0x5c>)
 8005c98:	f7fb fcde 	bl	8001658 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <vPortValidateInterruptPriority+0x60>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <vPortValidateInterruptPriority+0x64>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d904      	bls.n	8005cb6 <vPortValidateInterruptPriority+0x4a>
 8005cac:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8005cb0:	4805      	ldr	r0, [pc, #20]	@ (8005cc8 <vPortValidateInterruptPriority+0x5c>)
 8005cb2:	f7fb fcd1 	bl	8001658 <vAssertCalled>
    }
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	e000e3f0 	.word	0xe000e3f0
 8005cc4:	20000d78 	.word	0x20000d78
 8005cc8:	08023b1c 	.word	0x08023b1c
 8005ccc:	e000ed0c 	.word	0xe000ed0c
 8005cd0:	20000d7c 	.word	0x20000d7c

08005cd4 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8005ce0:	4b60      	ldr	r3, [pc, #384]	@ (8005e64 <pvPortMalloc+0x190>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <pvPortMalloc+0x1c>
 8005ce8:	21da      	movs	r1, #218	@ 0xda
 8005cea:	485f      	ldr	r0, [pc, #380]	@ (8005e68 <pvPortMalloc+0x194>)
 8005cec:	f7fb fcb4 	bl	8001658 <vAssertCalled>

    if( xWantedSize > 0 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d022      	beq.n	8005d3c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d81b      	bhi.n	8005d38 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8005d00:	2208      	movs	r2, #8
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4413      	add	r3, r2
 8005d06:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d014      	beq.n	8005d3c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	f1c3 0308 	rsb	r3, r3, #8
 8005d1c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d804      	bhi.n	8005d32 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	e004      	b.n	8005d3c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	e001      	b.n	8005d3c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005d3c:	f7fe f84a 	bl	8003dd4 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db78      	blt.n	8005e38 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d075      	beq.n	8005e38 <pvPortMalloc+0x164>
 8005d4c:	4b47      	ldr	r3, [pc, #284]	@ (8005e6c <pvPortMalloc+0x198>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d870      	bhi.n	8005e38 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d56:	4b46      	ldr	r3, [pc, #280]	@ (8005e70 <pvPortMalloc+0x19c>)
 8005d58:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005d5a:	4b45      	ldr	r3, [pc, #276]	@ (8005e70 <pvPortMalloc+0x19c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005d60:	e004      	b.n	8005d6c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d903      	bls.n	8005d7e <pvPortMalloc+0xaa>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f1      	bne.n	8005d62 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005d7e:	4b39      	ldr	r3, [pc, #228]	@ (8005e64 <pvPortMalloc+0x190>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d057      	beq.n	8005e38 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	4413      	add	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d904      	bls.n	8005dae <pvPortMalloc+0xda>
 8005da4:	f240 1129 	movw	r1, #297	@ 0x129
 8005da8:	482f      	ldr	r0, [pc, #188]	@ (8005e68 <pvPortMalloc+0x194>)
 8005daa:	f7fb fc55 	bl	8001658 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	2308      	movs	r3, #8
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d91d      	bls.n	8005dfa <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <pvPortMalloc+0x106>
 8005dd0:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8005dd4:	4824      	ldr	r0, [pc, #144]	@ (8005e68 <pvPortMalloc+0x194>)
 8005dd6:	f7fb fc3f 	bl	8001658 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8005e6c <pvPortMalloc+0x198>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	4a19      	ldr	r2, [pc, #100]	@ (8005e6c <pvPortMalloc+0x198>)
 8005e06:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e08:	4b18      	ldr	r3, [pc, #96]	@ (8005e6c <pvPortMalloc+0x198>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <pvPortMalloc+0x1a0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d203      	bcs.n	8005e1c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e14:	4b15      	ldr	r3, [pc, #84]	@ (8005e6c <pvPortMalloc+0x198>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a16      	ldr	r2, [pc, #88]	@ (8005e74 <pvPortMalloc+0x1a0>)
 8005e1a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005e2e:	4b12      	ldr	r3, [pc, #72]	@ (8005e78 <pvPortMalloc+0x1a4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a10      	ldr	r2, [pc, #64]	@ (8005e78 <pvPortMalloc+0x1a4>)
 8005e36:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005e38:	f7fd ffda 	bl	8003df0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8005e42:	f7fb fc1d 	bl	8001680 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <pvPortMalloc+0x186>
 8005e50:	f240 1173 	movw	r1, #371	@ 0x173
 8005e54:	4804      	ldr	r0, [pc, #16]	@ (8005e68 <pvPortMalloc+0x194>)
 8005e56:	f7fb fbff 	bl	8001658 <vAssertCalled>
    return pvReturn;
 8005e5a:	697b      	ldr	r3, [r7, #20]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3720      	adds	r7, #32
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000d88 	.word	0x20000d88
 8005e68:	08023b58 	.word	0x08023b58
 8005e6c:	20000d8c 	.word	0x20000d8c
 8005e70:	20000d80 	.word	0x20000d80
 8005e74:	20000d90 	.word	0x20000d90
 8005e78:	20000d94 	.word	0x20000d94

08005e7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d03d      	beq.n	8005f0a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005e8e:	2308      	movs	r3, #8
 8005e90:	425b      	negs	r3, r3
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	db04      	blt.n	8005eae <vPortFree+0x32>
 8005ea4:	f240 1187 	movw	r1, #391	@ 0x187
 8005ea8:	481a      	ldr	r0, [pc, #104]	@ (8005f14 <vPortFree+0x98>)
 8005eaa:	f7fb fbd5 	bl	8001658 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <vPortFree+0x44>
 8005eb6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8005eba:	4816      	ldr	r0, [pc, #88]	@ (8005f14 <vPortFree+0x98>)
 8005ebc:	f7fb fbcc 	bl	8001658 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	0fdb      	lsrs	r3, r3, #31
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01c      	beq.n	8005f0a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d118      	bne.n	8005f0a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005ee4:	f7fd ff76 	bl	8003dd4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <vPortFree+0x9c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	4a09      	ldr	r2, [pc, #36]	@ (8005f18 <vPortFree+0x9c>)
 8005ef4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ef6:	68b8      	ldr	r0, [r7, #8]
 8005ef8:	f000 f82a 	bl	8005f50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <vPortFree+0xa0>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	4a06      	ldr	r2, [pc, #24]	@ (8005f1c <vPortFree+0xa0>)
 8005f04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005f06:	f7fd ff73 	bl	8003df0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	08023b58 	.word	0x08023b58
 8005f18:	20000d8c 	.word	0x20000d8c
 8005f1c:	20000d98 	.word	0x20000d98

08005f20 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <xPortGetFreeHeapSize+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000d8c 	.word	0x20000d8c

08005f38 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8005f3c:	4b03      	ldr	r3, [pc, #12]	@ (8005f4c <xPortGetMinimumEverFreeHeapSize+0x14>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20000d90 	.word	0x20000d90

08005f50 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005f58:	4b28      	ldr	r3, [pc, #160]	@ (8005ffc <prvInsertBlockIntoFreeList+0xac>)
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e002      	b.n	8005f64 <prvInsertBlockIntoFreeList+0x14>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d8f7      	bhi.n	8005f5e <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d108      	bne.n	8005f92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	441a      	add	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	441a      	add	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d118      	bne.n	8005fd8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <prvInsertBlockIntoFreeList+0xb0>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d00d      	beq.n	8005fce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	441a      	add	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e008      	b.n	8005fe0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005fce:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e003      	b.n	8005fe0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d002      	beq.n	8005fee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000d80 	.word	0x20000d80
 8006000:	20000d88 	.word	0x20000d88

08006004 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	@ 0x28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006018:	4b4b      	ldr	r3, [pc, #300]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <vPortDefineHeapRegions+0x26>
 8006020:	f240 2121 	movw	r1, #545	@ 0x221
 8006024:	4849      	ldr	r0, [pc, #292]	@ (800614c <vPortDefineHeapRegions+0x148>)
 8006026:	f7fb fb17 	bl	8001658 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006034:	e071      	b.n	800611a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	3307      	adds	r3, #7
 8006050:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f023 0307 	bic.w	r3, r3, #7
 8006058:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006066:	4413      	add	r3, r2
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4a36      	ldr	r2, [pc, #216]	@ (8006150 <vPortDefineHeapRegions+0x14c>)
 8006078:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 800607a:	4b35      	ldr	r3, [pc, #212]	@ (8006150 <vPortDefineHeapRegions+0x14c>)
 800607c:	2200      	movs	r2, #0
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e013      	b.n	80060aa <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006082:	4b31      	ldr	r3, [pc, #196]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <vPortDefineHeapRegions+0x90>
 800608a:	f240 2149 	movw	r1, #585	@ 0x249
 800608e:	482f      	ldr	r0, [pc, #188]	@ (800614c <vPortDefineHeapRegions+0x148>)
 8006090:	f7fb fae2 	bl	8001658 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006094:	4b2c      	ldr	r3, [pc, #176]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	4293      	cmp	r3, r2
 800609e:	d804      	bhi.n	80060aa <vPortDefineHeapRegions+0xa6>
 80060a0:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80060a4:	4829      	ldr	r0, [pc, #164]	@ (800614c <vPortDefineHeapRegions+0x148>)
 80060a6:	f7fb fad7 	bl	8001658 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 80060aa:	4b27      	ldr	r3, [pc, #156]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	4413      	add	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80060b8:	2208      	movs	r2, #8
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f023 0307 	bic.w	r3, r3, #7
 80060c6:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 80060cc:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 80060ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80060d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80060ec:	4b16      	ldr	r3, [pc, #88]	@ (8006148 <vPortDefineHeapRegions+0x144>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	6a3a      	ldr	r2, [r7, #32]
 8006106:	4413      	add	r3, r2
 8006108:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	3301      	adds	r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d189      	bne.n	8006036 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006122:	4a0c      	ldr	r2, [pc, #48]	@ (8006154 <vPortDefineHeapRegions+0x150>)
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006128:	4a0b      	ldr	r2, [pc, #44]	@ (8006158 <vPortDefineHeapRegions+0x154>)
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <vPortDefineHeapRegions+0x13a>
 8006134:	f240 2189 	movw	r1, #649	@ 0x289
 8006138:	4804      	ldr	r0, [pc, #16]	@ (800614c <vPortDefineHeapRegions+0x148>)
 800613a:	f7fb fa8d 	bl	8001658 <vAssertCalled>
}
 800613e:	bf00      	nop
 8006140:	3728      	adds	r7, #40	@ 0x28
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000d88 	.word	0x20000d88
 800614c:	08023b58 	.word	0x08023b58
 8006150:	20000d80 	.word	0x20000d80
 8006154:	20000d90 	.word	0x20000d90
 8006158:	20000d8c 	.word	0x20000d8c

0800615c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800615c:	b580      	push	{r7, lr}
 800615e:	b090      	sub	sp, #64	@ 0x40
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800616a:	2300      	movs	r3, #0
 800616c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006178:	330e      	adds	r3, #14
 800617a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006186:	f040 81bb 	bne.w	8006500 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	885b      	ldrh	r3, [r3, #2]
 800618e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006190:	2b08      	cmp	r3, #8
 8006192:	f040 81b5 	bne.w	8006500 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800619a:	2b06      	cmp	r3, #6
 800619c:	f040 81b0 	bne.w	8006500 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	f040 81ab 	bne.w	8006500 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	330e      	adds	r3, #14
 80061ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 80061b0:	f107 0320 	add.w	r3, r7, #32
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80061b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 80061c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006438 <eARPProcessPacket+0x2dc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 80061ce:	499b      	ldr	r1, [pc, #620]	@ (800643c <eARPProcessPacket+0x2e0>)
 80061d0:	489b      	ldr	r0, [pc, #620]	@ (8006440 <eARPProcessPacket+0x2e4>)
 80061d2:	f7fe faf3 	bl	80047bc <xTaskCheckForTimeOut>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 80061dc:	4b96      	ldr	r3, [pc, #600]	@ (8006438 <eARPProcessPacket+0x2dc>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	7a1b      	ldrb	r3, [r3, #8]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 8188 	bne.w	8006500 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	061a      	lsls	r2, r3, #24
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061fc:	431a      	orrs	r2, r3
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	0a1b      	lsrs	r3, r3, #8
 8006202:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006206:	431a      	orrs	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	0e1b      	lsrs	r3, r3, #24
 800620c:	4313      	orrs	r3, r2
 800620e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006212:	d311      	bcc.n	8006238 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	061a      	lsls	r2, r3, #24
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006220:	431a      	orrs	r2, r3
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800622a:	431a      	orrs	r2, r3
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	0e1b      	lsrs	r3, r3, #24
 8006230:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006232:	2b00      	cmp	r3, #0
 8006234:	f280 8164 	bge.w	8006500 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623a:	2b00      	cmp	r3, #0
 800623c:	d021      	beq.n	8006282 <eARPProcessPacket+0x126>
 800623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	429a      	cmp	r2, r3
 8006246:	d11c      	bne.n	8006282 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006248:	4b7b      	ldr	r3, [pc, #492]	@ (8006438 <eARPProcessPacket+0x2dc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 8157 	bne.w	8006500 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006252:	4b79      	ldr	r3, [pc, #484]	@ (8006438 <eARPProcessPacket+0x2dc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3301      	adds	r3, #1
 8006258:	4a77      	ldr	r2, [pc, #476]	@ (8006438 <eARPProcessPacket+0x2dc>)
 800625a:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4619      	mov	r1, r3
 8006262:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006264:	f000 fe32 	bl	8006ecc <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006268:	f7fd fec6 	bl	8003ff8 <xTaskGetTickCount>
 800626c:	4603      	mov	r3, r0
 800626e:	4a75      	ldr	r2, [pc, #468]	@ (8006444 <eARPProcessPacket+0x2e8>)
 8006270:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006272:	4873      	ldr	r0, [pc, #460]	@ (8006440 <eARPProcessPacket+0x2e4>)
 8006274:	f7fe fa6a 	bl	800474c <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006278:	4b70      	ldr	r3, [pc, #448]	@ (800643c <eARPProcessPacket+0x2e0>)
 800627a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800627e:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006280:	e13e      	b.n	8006500 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	88db      	ldrh	r3, [r3, #6]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800628c:	d14a      	bne.n	8006324 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	061a      	lsls	r2, r3, #24
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800629a:	431a      	orrs	r2, r3
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	0a1b      	lsrs	r3, r3, #8
 80062a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80062a4:	431a      	orrs	r2, r3
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	0e1b      	lsrs	r3, r3, #24
 80062aa:	ea42 0103 	orr.w	r1, r2, r3
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	061a      	lsls	r2, r3, #24
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062ba:	431a      	orrs	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80062c4:	431a      	orrs	r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	ea42 0003 	orr.w	r0, r2, r3
 80062ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <eARPProcessPacket+0x180>
 80062d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	061a      	lsls	r2, r3, #24
 80062da:	e000      	b.n	80062de <eARPProcessPacket+0x182>
 80062dc:	2200      	movs	r2, #0
 80062de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <eARPProcessPacket+0x194>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062ee:	e000      	b.n	80062f2 <eARPProcessPacket+0x196>
 80062f0:	2300      	movs	r3, #0
 80062f2:	431a      	orrs	r2, r3
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <eARPProcessPacket+0x1aa>
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006304:	e000      	b.n	8006308 <eARPProcessPacket+0x1ac>
 8006306:	2300      	movs	r3, #0
 8006308:	431a      	orrs	r2, r3
 800630a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <eARPProcessPacket+0x1bc>
 8006310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	0e1b      	lsrs	r3, r3, #24
 8006316:	e000      	b.n	800631a <eARPProcessPacket+0x1be>
 8006318:	2300      	movs	r3, #0
 800631a:	4313      	orrs	r3, r2
 800631c:	4602      	mov	r2, r0
 800631e:	484a      	ldr	r0, [pc, #296]	@ (8006448 <eARPProcessPacket+0x2ec>)
 8006320:	f01b faba 	bl	8021898 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	88db      	ldrh	r3, [r3, #6]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632e:	d151      	bne.n	80063d4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006330:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006334:	429a      	cmp	r2, r3
 8006336:	d04d      	beq.n	80063d4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633a:	2b00      	cmp	r3, #0
 800633c:	d04a      	beq.n	80063d4 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	061a      	lsls	r2, r3, #24
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800634a:	431a      	orrs	r2, r3
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006354:	431a      	orrs	r2, r3
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	0e1b      	lsrs	r3, r3, #24
 800635a:	ea42 0103 	orr.w	r1, r2, r3
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	061a      	lsls	r2, r3, #24
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800636a:	431a      	orrs	r2, r3
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006374:	431a      	orrs	r2, r3
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	0e1b      	lsrs	r3, r3, #24
 800637a:	ea42 0003 	orr.w	r0, r2, r3
 800637e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <eARPProcessPacket+0x230>
 8006384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	061a      	lsls	r2, r3, #24
 800638a:	e000      	b.n	800638e <eARPProcessPacket+0x232>
 800638c:	2200      	movs	r2, #0
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <eARPProcessPacket+0x244>
 8006394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800639e:	e000      	b.n	80063a2 <eARPProcessPacket+0x246>
 80063a0:	2300      	movs	r3, #0
 80063a2:	431a      	orrs	r2, r3
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <eARPProcessPacket+0x25a>
 80063aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063b4:	e000      	b.n	80063b8 <eARPProcessPacket+0x25c>
 80063b6:	2300      	movs	r3, #0
 80063b8:	431a      	orrs	r2, r3
 80063ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <eARPProcessPacket+0x26c>
 80063c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	0e1b      	lsrs	r3, r3, #24
 80063c6:	e000      	b.n	80063ca <eARPProcessPacket+0x26e>
 80063c8:	2300      	movs	r3, #0
 80063ca:	4313      	orrs	r3, r2
 80063cc:	4602      	mov	r2, r0
 80063ce:	481f      	ldr	r0, [pc, #124]	@ (800644c <eARPProcessPacket+0x2f0>)
 80063d0:	f01b fa62 	bl	8021898 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 80063d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8092 	beq.w	8006500 <eARPProcessPacket+0x3a4>
 80063dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063de:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8089 	beq.w	8006500 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	88db      	ldrh	r3, [r3, #6]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f8:	d003      	beq.n	8006402 <eARPProcessPacket+0x2a6>
 80063fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063fe:	d077      	beq.n	80064f0 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006400:	e07e      	b.n	8006500 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006408:	429a      	cmp	r2, r3
 800640a:	d121      	bne.n	8006450 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006416:	2206      	movs	r2, #6
 8006418:	4619      	mov	r1, r3
 800641a:	f01c fbee 	bl	8022bfa <memcmp>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d06c      	beq.n	80064fe <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	461a      	mov	r2, r3
 8006428:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800642a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800642c:	f000 f872 	bl	8006514 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8006430:	2302      	movs	r3, #2
 8006432:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8006436:	e062      	b.n	80064fe <eARPProcessPacket+0x3a2>
 8006438:	20000e00 	.word	0x20000e00
 800643c:	20000010 	.word	0x20000010
 8006440:	20000e04 	.word	0x20000e04
 8006444:	20000dfc 	.word	0x20000dfc
 8006448:	08023b90 	.word	0x08023b90
 800644c:	08023bc0 	.word	0x08023bc0
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006454:	429a      	cmp	r2, r3
 8006456:	d152      	bne.n	80064fe <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8006458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	405a      	eors	r2, r3
 8006460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006466:	2b00      	cmp	r3, #0
 8006468:	d149      	bne.n	80064fe <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 800646a:	4a28      	ldr	r2, [pc, #160]	@ (800650c <eARPProcessPacket+0x3b0>)
 800646c:	f107 0318 	add.w	r3, r7, #24
 8006470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006474:	6018      	str	r0, [r3, #0]
 8006476:	3304      	adds	r3, #4
 8006478:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	3312      	adds	r3, #18
 800647e:	2206      	movs	r2, #6
 8006480:	4923      	ldr	r1, [pc, #140]	@ (8006510 <eARPProcessPacket+0x3b4>)
 8006482:	4618      	mov	r0, r3
 8006484:	f01c fbb9 	bl	8022bfa <memcmp>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	3312      	adds	r3, #18
 8006492:	f107 0118 	add.w	r1, r7, #24
 8006496:	2206      	movs	r2, #6
 8006498:	4618      	mov	r0, r3
 800649a:	f01c fbae 	bl	8022bfa <memcmp>
 800649e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d12c      	bne.n	80064fe <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 80064a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a6:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	3308      	adds	r3, #8
 80064ae:	2206      	movs	r2, #6
 80064b0:	4619      	mov	r1, r3
 80064b2:	f01c fba2 	bl	8022bfa <memcmp>
 80064b6:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d020      	beq.n	80064fe <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 80064c0:	f107 020c 	add.w	r2, r7, #12
 80064c4:	f107 0110 	add.w	r1, r7, #16
 80064c8:	f107 0320 	add.w	r3, r7, #32
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fb11 	bl	8006af4 <eARPGetCacheEntry>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d112      	bne.n	80064fe <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064dc:	429a      	cmp	r2, r3
 80064de:	d10e      	bne.n	80064fe <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	3308      	adds	r3, #8
 80064e4:	6a39      	ldr	r1, [r7, #32]
 80064e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f9ef 	bl	80068cc <vARPRefreshCacheEntry>
                            break;
 80064ee:	e006      	b.n	80064fe <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	461a      	mov	r2, r3
 80064f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80064f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064f8:	f000 f84a 	bl	8006590 <vARPProcessPacketReply>
                            break;
 80064fc:	e000      	b.n	8006500 <eARPProcessPacket+0x3a4>
                            break;
 80064fe:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8006500:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8006504:	4618      	mov	r0, r3
 8006506:	3740      	adds	r7, #64	@ 0x40
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	08023bf0 	.word	0x08023bf0
 8006510:	08026f30 	.word	0x08026f30

08006514 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	330e      	adds	r3, #14
 8006524:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3308      	adds	r3, #8
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f9cc 	bl	80068cc <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2200      	movs	r2, #0
 8006538:	719a      	strb	r2, [r3, #6]
 800653a:	2200      	movs	r2, #0
 800653c:	f042 0202 	orr.w	r2, r2, #2
 8006540:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	3308      	adds	r3, #8
 8006546:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	3312      	adds	r3, #18
 800654c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800654e:	2206      	movs	r2, #6
 8006550:	69b9      	ldr	r1, [r7, #24]
 8006552:	6978      	ldr	r0, [r7, #20]
 8006554:	f01b fbbc 	bl	8021cd0 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	33e8      	adds	r3, #232	@ 0xe8
 8006562:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	3308      	adds	r3, #8
 8006568:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800656a:	2206      	movs	r2, #6
 800656c:	69b9      	ldr	r1, [r7, #24]
 800656e:	6978      	ldr	r0, [r7, #20]
 8006570:	f01b fbae 	bl	8021cd0 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	330e      	adds	r3, #14
 800657c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	601a      	str	r2, [r3, #0]
    }
 8006588:	bf00      	nop
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8006590:	b580      	push	{r7, lr}
 8006592:	b08c      	sub	sp, #48	@ 0x30
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	330e      	adds	r3, #14
 80065a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d005      	beq.n	80065be <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f844 	bl	8006640 <xIsIPInARPCache>
 80065b8:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d106      	bne.n	80065cc <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80065be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c0:	3308      	adds	r3, #8
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f980 	bl	80068cc <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80065cc:	4b1b      	ldr	r3, [pc, #108]	@ (800663c <vARPProcessPacketReply+0xac>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d02e      	beq.n	8006632 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 80065d4:	4b19      	ldr	r3, [pc, #100]	@ (800663c <vARPProcessPacketReply+0xac>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f003 f8a5 	bl	8009728 <uxIPHeaderSizePacket>
 80065de:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80065e0:	2b14      	cmp	r3, #20
 80065e2:	d126      	bne.n	8006632 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 80065e4:	4b15      	ldr	r3, [pc, #84]	@ (800663c <vARPProcessPacketReply+0xac>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	330e      	adds	r3, #14
 80065f0:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d11a      	bne.n	8006632 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8006600:	2301      	movs	r3, #1
 8006602:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8006604:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <vARPProcessPacketReply+0xac>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800660a:	f107 0314 	add.w	r3, r7, #20
 800660e:	69f9      	ldr	r1, [r7, #28]
 8006610:	4618      	mov	r0, r3
 8006612:	f002 fcd5 	bl	8008fc0 <xSendEventStructToIPTask>
 8006616:	4603      	mov	r3, r0
 8006618:	2b01      	cmp	r3, #1
 800661a:	d004      	beq.n	8006626 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800661c:	4b07      	ldr	r3, [pc, #28]	@ (800663c <vARPProcessPacketReply+0xac>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f010 fa91 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8006626:	4b05      	ldr	r3, [pc, #20]	@ (800663c <vARPProcessPacketReply+0xac>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800662c:	2000      	movs	r0, #0
 800662e:	f003 fabd 	bl	8009bac <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8006632:	bf00      	nop
 8006634:	3730      	adds	r7, #48	@ 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000fd4 	.word	0x20000fd4

08006640 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8006648:	2300      	movs	r3, #0
 800664a:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e017      	b.n	8006682 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006652:	4a12      	ldr	r2, [pc, #72]	@ (800669c <xIsIPInARPCache+0x5c>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	4413      	add	r3, r2
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d10c      	bne.n	800667c <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8006662:	2301      	movs	r3, #1
 8006664:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006666:	4a0d      	ldr	r2, [pc, #52]	@ (800669c <xIsIPInARPCache+0x5c>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	4413      	add	r3, r2
 800666e:	330b      	adds	r3, #11
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
            }

            break;
 800667a:	e006      	b.n	800668a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b05      	cmp	r3, #5
 8006686:	dde4      	ble.n	8006652 <xIsIPInARPCache+0x12>
 8006688:	e000      	b.n	800668c <xIsIPInARPCache+0x4c>
            break;
 800668a:	bf00      	nop
        }
    }

    return xReturn;
 800668c:	68bb      	ldr	r3, [r7, #8]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000d9c 	.word	0x20000d9c

080066a0 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b0a5      	sub	sp, #148	@ 0x94
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f003 f83a 	bl	8009728 <uxIPHeaderSizePacket>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b14      	cmp	r3, #20
 80066b8:	d002      	beq.n	80066c0 <xCheckRequiresARPResolution+0x20>
 80066ba:	2b28      	cmp	r3, #40	@ 0x28
 80066bc:	d029      	beq.n	8006712 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 80066be:	e0b6      	b.n	800682e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80066c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066c8:	330e      	adds	r3, #14
 80066ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d0:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 80066d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	405a      	eors	r2, r3
 80066dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 80a0 	bne.w	8006828 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 80066e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff ffa7 	bl	8006640 <xIsIPInARPCache>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f040 8097 	bne.w	8006828 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f000 fbe1 	bl	8006ecc <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 800670a:	2301      	movs	r3, #1
 800670c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006710:	e08a      	b.n	8006828 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800671a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800671e:	330e      	adds	r3, #14
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8006724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006728:	3308      	adds	r3, #8
 800672a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 800672e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006732:	799b      	ldrb	r3, [r3, #6]
 8006734:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8006738:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800673c:	2b06      	cmp	r3, #6
 800673e:	d003      	beq.n	8006748 <xCheckRequiresARPResolution+0xa8>
 8006740:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006744:	2b11      	cmp	r3, #17
 8006746:	d171      	bne.n	800682c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8006748:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800674c:	f006 ff68 	bl	800d620 <xIPv6_GetIPType>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8006756:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800675a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00d      	beq.n	800677e <xCheckRequiresARPResolution+0xde>
 8006762:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006766:	2b01      	cmp	r3, #1
 8006768:	d007      	beq.n	800677a <xCheckRequiresARPResolution+0xda>
 800676a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800676e:	2b04      	cmp	r3, #4
 8006770:	d101      	bne.n	8006776 <xCheckRequiresARPResolution+0xd6>
 8006772:	4b32      	ldr	r3, [pc, #200]	@ (800683c <xCheckRequiresARPResolution+0x19c>)
 8006774:	e004      	b.n	8006780 <xCheckRequiresARPResolution+0xe0>
 8006776:	4b32      	ldr	r3, [pc, #200]	@ (8006840 <xCheckRequiresARPResolution+0x1a0>)
 8006778:	e002      	b.n	8006780 <xCheckRequiresARPResolution+0xe0>
 800677a:	4b32      	ldr	r3, [pc, #200]	@ (8006844 <xCheckRequiresARPResolution+0x1a4>)
 800677c:	e000      	b.n	8006780 <xCheckRequiresARPResolution+0xe0>
 800677e:	4b32      	ldr	r3, [pc, #200]	@ (8006848 <xCheckRequiresARPResolution+0x1a8>)
 8006780:	461a      	mov	r2, r3
 8006782:	4832      	ldr	r0, [pc, #200]	@ (800684c <xCheckRequiresARPResolution+0x1ac>)
 8006784:	f01b f888 	bl	8021898 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8006788:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800678c:	2b01      	cmp	r3, #1
 800678e:	d14d      	bne.n	800682c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8006790:	f107 030c 	add.w	r3, r7, #12
 8006794:	2250      	movs	r2, #80	@ 0x50
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f01b fba6 	bl	8021eea <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800679e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80067a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80067a6:	4619      	mov	r1, r3
 80067a8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80067ac:	f004 fe0e 	bl	800b3cc <eNDGetCacheEntry>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 80067b6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <xCheckRequiresARPResolution+0x12e>
 80067be:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <xCheckRequiresARPResolution+0x12a>
 80067c6:	4c22      	ldr	r4, [pc, #136]	@ (8006850 <xCheckRequiresARPResolution+0x1b0>)
 80067c8:	e002      	b.n	80067d0 <xCheckRequiresARPResolution+0x130>
 80067ca:	4c22      	ldr	r4, [pc, #136]	@ (8006854 <xCheckRequiresARPResolution+0x1b4>)
 80067cc:	e000      	b.n	80067d0 <xCheckRequiresARPResolution+0x130>
 80067ce:	4c22      	ldr	r4, [pc, #136]	@ (8006858 <xCheckRequiresARPResolution+0x1b8>)
 80067d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067d2:	f107 010c 	add.w	r1, r7, #12
 80067d6:	2250      	movs	r2, #80	@ 0x50
 80067d8:	4618      	mov	r0, r3
 80067da:	f006 ff79 	bl	800d6d0 <pcEndpointName>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	4621      	mov	r1, r4
 80067e4:	481d      	ldr	r0, [pc, #116]	@ (800685c <xCheckRequiresARPResolution+0x1bc>)
 80067e6:	f01b f857 	bl	8021898 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 80067ea:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11c      	bne.n	800682c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 80067f2:	2356      	movs	r3, #86	@ 0x56
 80067f4:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 80067f6:	2100      	movs	r1, #0
 80067f8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80067fa:	f010 f93d 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 80067fe:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00c      	beq.n	8006820 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800680a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006814:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006816:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800681a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800681c:	f005 f842 	bl	800b8a4 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006826:	e001      	b.n	800682c <xCheckRequiresARPResolution+0x18c>
                   break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <xCheckRequiresARPResolution+0x18e>
                   break;
 800682c:	bf00      	nop
    }

    return xNeedsARPResolution;
 800682e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8006832:	4618      	mov	r0, r3
 8006834:	3794      	adds	r7, #148	@ 0x94
 8006836:	46bd      	mov	sp, r7
 8006838:	bd90      	pop	{r4, r7, pc}
 800683a:	bf00      	nop
 800683c:	08023bf8 	.word	0x08023bf8
 8006840:	08023c04 	.word	0x08023c04
 8006844:	08023c0c 	.word	0x08023c0c
 8006848:	08023c18 	.word	0x08023c18
 800684c:	08023c20 	.word	0x08023c20
 8006850:	08023c4c 	.word	0x08023c4c
 8006854:	08023c50 	.word	0x08023c50
 8006858:	08023c58 	.word	0x08023c58
 800685c:	08023c60 	.word	0x08023c60

08006860 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d026      	beq.n	80068be <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e020      	b.n	80068b8 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006876:	4a14      	ldr	r2, [pc, #80]	@ (80068c8 <vARPRefreshCacheEntryAge+0x68>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	4413      	add	r3, r2
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d115      	bne.n	80068b2 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	4a0f      	ldr	r2, [pc, #60]	@ (80068c8 <vARPRefreshCacheEntryAge+0x68>)
 800688c:	4413      	add	r3, r2
 800688e:	3304      	adds	r3, #4
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	2206      	movs	r2, #6
 8006894:	4618      	mov	r0, r3
 8006896:	f01c f9b0 	bl	8022bfa <memcmp>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d108      	bne.n	80068b2 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80068a0:	4a09      	ldr	r2, [pc, #36]	@ (80068c8 <vARPRefreshCacheEntryAge+0x68>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	4413      	add	r3, r2
 80068a8:	330a      	adds	r3, #10
 80068aa:	2296      	movs	r2, #150	@ 0x96
 80068ac:	701a      	strb	r2, [r3, #0]
                    break;
 80068ae:	bf00      	nop
                }
            }
        }
    }
}
 80068b0:	e005      	b.n	80068be <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	dddb      	ble.n	8006876 <vARPRefreshCacheEntryAge+0x16>
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000d9c 	.word	0x20000d9c

080068cc <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 80068d8:	f107 0310 	add.w	r3, r7, #16
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 f85b 	bl	800699c <prvFindCacheEntry>
 80068e6:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d150      	bne.n	8006990 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	db0e      	blt.n	8006912 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	db0e      	blt.n	800691c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	4a25      	ldr	r2, [pc, #148]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006904:	4413      	add	r3, r2
 8006906:	2210      	movs	r2, #16
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f01b faed 	bl	8021eea <memset>
 8006910:	e004      	b.n	800691c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	db01      	blt.n	800691c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	4413      	add	r3, r2
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01f      	beq.n	800696e <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	4a19      	ldr	r2, [pc, #100]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006934:	4413      	add	r3, r2
 8006936:	3304      	adds	r3, #4
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	2206      	movs	r2, #6
 800693c:	4618      	mov	r0, r3
 800693e:	f01b f9c7 	bl	8021cd0 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	4a14      	ldr	r2, [pc, #80]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	4413      	add	r3, r2
 800694a:	330a      	adds	r3, #10
 800694c:	2296      	movs	r2, #150	@ 0x96
 800694e:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	4413      	add	r3, r2
 8006958:	330b      	adds	r3, #11
 800695a:	2201      	movs	r2, #1
 800695c:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	4a0d      	ldr	r2, [pc, #52]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	4413      	add	r3, r2
 8006966:	330c      	adds	r3, #12
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 800696c:	e010      	b.n	8006990 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	da0d      	bge.n	8006990 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	4a08      	ldr	r2, [pc, #32]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	4413      	add	r3, r2
 800697c:	330a      	adds	r3, #10
 800697e:	2205      	movs	r2, #5
 8006980:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	4a04      	ldr	r2, [pc, #16]	@ (8006998 <vARPRefreshCacheEntry+0xcc>)
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	4413      	add	r3, r2
 800698a:	330b      	adds	r3, #11
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
}
 8006990:	bf00      	nop
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000d9c 	.word	0x20000d9c

0800699c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	@ 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80069b8:	2102      	movs	r1, #2
 80069ba:	68b8      	ldr	r0, [r7, #8]
 80069bc:	f006 fb24 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bf14      	ite	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	2300      	moveq	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 80069ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069d2:	3b01      	subs	r3, #1
 80069d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f04f 32ff 	mov.w	r2, #4294967295
 80069de:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295
 80069e6:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f2:	e074      	b.n	8006ade <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4a3b      	ldr	r2, [pc, #236]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006a04:	4413      	add	r3, r2
 8006a06:	3304      	adds	r3, #4
 8006a08:	68f9      	ldr	r1, [r7, #12]
 8006a0a:	2206      	movs	r2, #6
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f01c f8f4 	bl	8022bfa <memcmp>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006a1c:	4a34      	ldr	r2, [pc, #208]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	4413      	add	r3, r2
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d125      	bne.n	8006a78 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a36:	601a      	str	r2, [r3, #0]
                break;
 8006a38:	e054      	b.n	8006ae4 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d017      	beq.n	8006a70 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006a40:	4a2b      	ldr	r2, [pc, #172]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	4413      	add	r3, r2
 8006a48:	330a      	adds	r3, #10
 8006a4a:	2296      	movs	r2, #150	@ 0x96
 8006a4c:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8006a4e:	4a28      	ldr	r2, [pc, #160]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	4413      	add	r3, r2
 8006a56:	330b      	adds	r3, #11
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 8006a5c:	4a24      	ldr	r2, [pc, #144]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	4413      	add	r3, r2
 8006a64:	330c      	adds	r3, #12
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
                break;
 8006a6e:	e039      	b.n	8006ae4 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	e02f      	b.n	8006ad8 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d017      	beq.n	8006aae <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	4413      	add	r3, r2
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2103      	movs	r1, #3
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f006 fabc 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bf14      	ite	ne
 8006a96:	2301      	movne	r3, #1
 8006a98:	2300      	moveq	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d118      	bne.n	8006ad8 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aaa:	605a      	str	r2, [r3, #4]
 8006aac:	e014      	b.n	8006ad8 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8006aae:	4a10      	ldr	r2, [pc, #64]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	4413      	add	r3, r2
 8006ab6:	330a      	adds	r3, #10
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d90a      	bls.n	8006ad8 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8006ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8006af0 <prvFindCacheEntry+0x154>)
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	4413      	add	r3, r2
 8006aca:	330a      	adds	r3, #10
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad6:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	3301      	adds	r3, #1
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	dd87      	ble.n	80069f4 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3728      	adds	r7, #40	@ 0x28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000d9c 	.word	0x20000d9c

08006af4 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <eARPGetCacheEntry+0x20>
 8006b0a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 8006b0e:	483c      	ldr	r0, [pc, #240]	@ (8006c00 <eARPGetCacheEntry+0x10c>)
 8006b10:	f7fa fda2 	bl	8001658 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <eARPGetCacheEntry+0x30>
 8006b1a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8006b1e:	4838      	ldr	r0, [pc, #224]	@ (8006c00 <eARPGetCacheEntry+0x10c>)
 8006b20:	f7fa fd9a 	bl	8001658 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <eARPGetCacheEntry+0x40>
 8006b2a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 8006b2e:	4834      	ldr	r0, [pc, #208]	@ (8006c00 <eARPGetCacheEntry+0x10c>)
 8006b30:	f7fa fd92 	bl	8001658 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 8006b40:	2100      	movs	r1, #0
 8006b42:	6978      	ldr	r0, [r7, #20]
 8006b44:	f006 f9d4 	bl	800cef0 <FreeRTOS_FindEndPointOnIP_IPv4>
 8006b48:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8006b4a:	6978      	ldr	r0, [r7, #20]
 8006b4c:	f003 fc3c 	bl	800a3c8 <xIsIPv4Multicast>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d021      	beq.n	8006b9a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	6978      	ldr	r0, [r7, #20]
 8006b5a:	f003 fd63 	bl	800a624 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8006b62:	2000      	movs	r0, #0
 8006b64:	f006 f978 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 8006b68:	61b8      	str	r0, [r7, #24]

            for( ;
 8006b6a:	e012      	b.n	8006b92 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006b82:	2301      	movs	r3, #1
 8006b84:	77fb      	strb	r3, [r7, #31]
                    break;
 8006b86:	e035      	b.n	8006bf4 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8006b88:	69b9      	ldr	r1, [r7, #24]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	f006 f986 	bl	800ce9c <FreeRTOS_NextEndPoint>
 8006b90:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e9      	bne.n	8006b6c <eARPGetCacheEntry+0x78>
 8006b98:	e02c      	b.n	8006bf4 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	061a      	lsls	r2, r3, #24
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	0e1b      	lsrs	r3, r3, #24
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2bff      	cmp	r3, #255	@ 0xff
 8006bbc:	d113      	bne.n	8006be6 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4a10      	ldr	r2, [pc, #64]	@ (8006c04 <eARPGetCacheEntry+0x110>)
 8006bc2:	6811      	ldr	r1, [r2, #0]
 8006bc4:	6019      	str	r1, [r3, #0]
 8006bc6:	8892      	ldrh	r2, [r2, #4]
 8006bc8:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006bca:	2104      	movs	r1, #4
 8006bcc:	6978      	ldr	r0, [r7, #20]
 8006bce:	f006 fa1b 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 8006bd2:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8006be0:	2301      	movs	r3, #1
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e006      	b.n	8006bf4 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f80c 	bl	8006c08 <eARPGetCacheEntryGateWay>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8006bf4:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	08023c94 	.word	0x08023c94
 8006c04:	08026f30 	.word	0x08026f30

08006c08 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006c14:	2300      	movs	r3, #0
 8006c16:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006c24:	2104      	movs	r1, #4
 8006c26:	69b8      	ldr	r0, [r7, #24]
 8006c28:	f006 f9ee 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 8006c2c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d11b      	bne.n	8006c6c <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	69b8      	ldr	r0, [r7, #24]
 8006c3a:	f000 f86b 	bl	8006d14 <prvCacheLookup>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8006c42:	7ffb      	ldrb	r3, [r7, #31]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d017      	beq.n	8006c78 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8006c48:	2040      	movs	r0, #64	@ 0x40
 8006c4a:	f006 fca9 	bl	800d5a0 <FreeRTOS_FindGateWay>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	e008      	b.n	8006c78 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	e005      	b.n	8006c78 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8006c78:	7ffb      	ldrb	r3, [r7, #31]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d13f      	bne.n	8006cfe <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8006c84:	2302      	movs	r3, #2
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e039      	b.n	8006cfe <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	69b8      	ldr	r0, [r7, #24]
 8006c90:	f000 f840 	bl	8006d14 <prvCacheLookup>
 8006c94:	4603      	mov	r3, r0
 8006c96:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8006c98:	7ffb      	ldrb	r3, [r7, #31]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d103      	bne.n	8006ca6 <eARPGetCacheEntryGateWay+0x9e>
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d028      	beq.n	8006cf8 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	061a      	lsls	r2, r3, #24
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	0e1b      	lsrs	r3, r3, #24
 8006cc2:	ea42 0103 	orr.w	r1, r2, r3
 8006cc6:	7ffb      	ldrb	r3, [r7, #31]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <eARPGetCacheEntryGateWay+0xc8>
 8006ccc:	480e      	ldr	r0, [pc, #56]	@ (8006d08 <eARPGetCacheEntryGateWay+0x100>)
 8006cce:	e000      	b.n	8006cd2 <eARPGetCacheEntryGateWay+0xca>
 8006cd0:	480e      	ldr	r0, [pc, #56]	@ (8006d0c <eARPGetCacheEntryGateWay+0x104>)
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	061a      	lsls	r2, r3, #24
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	0e1b      	lsrs	r3, r3, #24
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4807      	ldr	r0, [pc, #28]	@ (8006d10 <eARPGetCacheEntryGateWay+0x108>)
 8006cf4:	f01a fdd0 	bl	8021898 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 8006cfe:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006d00:	4618      	mov	r0, r3
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	08023cc0 	.word	0x08023cc0
 8006d0c:	08023cc4 	.word	0x08023cc4
 8006d10:	08023ccc 	.word	0x08023ccc

08006d14 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006d20:	2300      	movs	r3, #0
 8006d22:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e02a      	b.n	8006d80 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006d2a:	4a19      	ldr	r2, [pc, #100]	@ (8006d90 <prvCacheLookup+0x7c>)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	4413      	add	r3, r2
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d11f      	bne.n	8006d7a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006d3a:	4a15      	ldr	r2, [pc, #84]	@ (8006d90 <prvCacheLookup+0x7c>)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	4413      	add	r3, r2
 8006d42:	330b      	adds	r3, #11
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 8006d4e:	e01a      	b.n	8006d86 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006d50:	68b8      	ldr	r0, [r7, #8]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	4a0e      	ldr	r2, [pc, #56]	@ (8006d90 <prvCacheLookup+0x7c>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	2206      	movs	r2, #6
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f01a ffb6 	bl	8021cd0 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8006d64:	4a0a      	ldr	r2, [pc, #40]	@ (8006d90 <prvCacheLookup+0x7c>)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	4413      	add	r3, r2
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006d74:	2301      	movs	r3, #1
 8006d76:	74fb      	strb	r3, [r7, #19]
                break;
 8006d78:	e005      	b.n	8006d86 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	ddd1      	ble.n	8006d2a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8006d86:	7cfb      	ldrb	r3, [r7, #19]
    }
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000d9c 	.word	0x20000d9c

08006d94 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e048      	b.n	8006e32 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8006da0:	4a47      	ldr	r2, [pc, #284]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	4413      	add	r3, r2
 8006da8:	330a      	adds	r3, #10
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d03d      	beq.n	8006e2c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8006db0:	4a43      	ldr	r2, [pc, #268]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	4413      	add	r3, r2
 8006db8:	330a      	adds	r3, #10
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b2d9      	uxtb	r1, r3
 8006dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	4413      	add	r3, r2
 8006dc8:	330a      	adds	r3, #10
 8006dca:	460a      	mov	r2, r1
 8006dcc:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006dce:	4a3c      	ldr	r2, [pc, #240]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	4413      	add	r3, r2
 8006dd6:	330b      	adds	r3, #11
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d108      	bne.n	8006df0 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006dde:	4a38      	ldr	r2, [pc, #224]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	4413      	add	r3, r2
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f8d7 	bl	8006f9c <FreeRTOS_OutputARPRequest>
 8006dee:	e00f      	b.n	8006e10 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8006df0:	4a33      	ldr	r2, [pc, #204]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	4413      	add	r3, r2
 8006df8:	330a      	adds	r3, #10
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d807      	bhi.n	8006e10 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006e00:	4a2f      	ldr	r2, [pc, #188]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	4413      	add	r3, r2
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f8c6 	bl	8006f9c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8006e10:	4a2b      	ldr	r2, [pc, #172]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	4413      	add	r3, r2
 8006e18:	330a      	adds	r3, #10
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d105      	bne.n	8006e2c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8006e20:	4a27      	ldr	r2, [pc, #156]	@ (8006ec0 <vARPAgeCache+0x12c>)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	4413      	add	r3, r2
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b05      	cmp	r3, #5
 8006e36:	ddb3      	ble.n	8006da0 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8006e38:	f7fd f8de 	bl	8003ff8 <xTaskGetTickCount>
 8006e3c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8006e3e:	4b21      	ldr	r3, [pc, #132]	@ (8006ec4 <vARPAgeCache+0x130>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <vARPAgeCache+0xc2>
 8006e46:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec4 <vARPAgeCache+0x130>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d92f      	bls.n	8006eb6 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8006e56:	4b1c      	ldr	r3, [pc, #112]	@ (8006ec8 <vARPAgeCache+0x134>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8006e5c:	e025      	b.n	8006eaa <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d019      	beq.n	8006ea2 <vARPAgeCache+0x10e>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d015      	beq.n	8006ea2 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006e7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <vARPAgeCache+0xf8>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d007      	beq.n	8006e9a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8006e8a:	e00a      	b.n	8006ea2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4619      	mov	r1, r3
 8006e92:	68b8      	ldr	r0, [r7, #8]
 8006e94:	f000 f81a 	bl	8006ecc <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8006e98:	e003      	b.n	8006ea2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8006e9a:	68b8      	ldr	r0, [r7, #8]
 8006e9c:	f005 f822 	bl	800bee4 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8006ea0:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006ea8:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1d6      	bne.n	8006e5e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8006eb0:	4a04      	ldr	r2, [pc, #16]	@ (8006ec4 <vARPAgeCache+0x130>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6013      	str	r3, [r2, #0]
        }
    }
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000d9c 	.word	0x20000d9c
 8006ec4:	20000dfc 	.word	0x20000dfc
 8006ec8:	20001360 	.word	0x20001360

08006ecc <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d156      	bne.n	8006f94 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d052      	beq.n	8006f94 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8006eee:	2100      	movs	r1, #0
 8006ef0:	202a      	movs	r0, #42	@ 0x2a
 8006ef2:	f00f fdc1 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 8006ef6:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d04a      	beq.n	8006f94 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8006f14:	6938      	ldr	r0, [r7, #16]
 8006f16:	f000 f855 	bl	8006fc4 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006f20:	d812      	bhi.n	8006f48 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e008      	b.n	8006f3c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006f40:	ddf3      	ble.n	8006f2a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	223c      	movs	r2, #60	@ 0x3c
 8006f46:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8006f48:	f002 ff7c 	bl	8009e44 <xIsCallingFromIPTask>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00f      	beq.n	8006f72 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01b      	beq.n	8006f94 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	6939      	ldr	r1, [r7, #16]
 8006f6e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8006f70:	e010      	b.n	8006f94 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8006f72:	2302      	movs	r3, #2
 8006f74:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8006f7a:	f107 0308 	add.w	r3, r7, #8
 8006f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 f81c 	bl	8008fc0 <xSendEventStructToIPTask>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006f8e:	6938      	ldr	r0, [r7, #16]
 8006f90:	f00f fdda 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
    }
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8006fa4:	210c      	movs	r1, #12
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f006 f82e 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 8006fac:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff ff88 	bl	8006ecc <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <vARPGenerateRequestPacket+0x18>
 8006fd2:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8006fd6:	4828      	ldr	r0, [pc, #160]	@ (8007078 <vARPGenerateRequestPacket+0xb4>)
 8006fd8:	f7fa fb3e 	bl	8001658 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	2b29      	cmp	r3, #41	@ 0x29
 8006fe2:	d804      	bhi.n	8006fee <vARPGenerateRequestPacket+0x2a>
 8006fe4:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8006fe8:	4823      	ldr	r0, [pc, #140]	@ (8007078 <vARPGenerateRequestPacket+0xb4>)
 8006fea:	f7fa fb35 	bl	8001658 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <vARPGenerateRequestPacket+0x3c>
 8006ff6:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8006ffa:	481f      	ldr	r0, [pc, #124]	@ (8007078 <vARPGenerateRequestPacket+0xb4>)
 8006ffc:	f7fa fb2c 	bl	8001658 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007006:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <vARPGenerateRequestPacket+0xb8>)
 8007008:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800700e:	2226      	movs	r2, #38	@ 0x26
 8007010:	6939      	ldr	r1, [r7, #16]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f01a fe5c 	bl	8021cd0 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701c:	33e8      	adds	r3, #232	@ 0xe8
 800701e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	3306      	adds	r3, #6
 8007024:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007026:	2206      	movs	r2, #6
 8007028:	6939      	ldr	r1, [r7, #16]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f01a fe50 	bl	8021cd0 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007034:	33e8      	adds	r3, #232	@ 0xe8
 8007036:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	3316      	adds	r3, #22
 800703c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800703e:	2206      	movs	r2, #6
 8007040:	6939      	ldr	r1, [r7, #16]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f01a fe44 	bl	8021cd0 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704c:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	331c      	adds	r3, #28
 8007052:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	222a      	movs	r2, #42	@ 0x2a
 800706c:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 800706e:	bf00      	nop
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	08023c94 	.word	0x08023c94
 800707c:	08026ef8 	.word	0x08026ef8

08007080 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01b      	beq.n	80070c6 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	e014      	b.n	80070be <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007094:	4a10      	ldr	r2, [pc, #64]	@ (80070d8 <FreeRTOS_ClearARP+0x58>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	4413      	add	r3, r2
 800709c:	330c      	adds	r3, #12
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d108      	bne.n	80070b8 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	4a0b      	ldr	r2, [pc, #44]	@ (80070d8 <FreeRTOS_ClearARP+0x58>)
 80070ac:	4413      	add	r3, r2
 80070ae:	2210      	movs	r2, #16
 80070b0:	2100      	movs	r1, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f01a ff19 	bl	8021eea <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	dde7      	ble.n	8007094 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 80070c4:	e004      	b.n	80070d0 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 80070c6:	2260      	movs	r2, #96	@ 0x60
 80070c8:	2100      	movs	r1, #0
 80070ca:	4803      	ldr	r0, [pc, #12]	@ (80070d8 <FreeRTOS_ClearARP+0x58>)
 80070cc:	f01a ff0d 	bl	8021eea <memset>
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000d9c 	.word	0x20000d9c

080070dc <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 80070e0:	f000 fc8a 	bl	80079f8 <vDNSCallbackInitialise>
        }
 80070e4:	bf00      	nop
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 80070f8:	2048      	movs	r0, #72	@ 0x48
 80070fa:	f7fe fdeb 	bl	8005cd4 <pvPortMalloc>
 80070fe:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d057      	beq.n	80071b6 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800710a:	2248      	movs	r2, #72	@ 0x48
 800710c:	2100      	movs	r1, #0
 800710e:	69f8      	ldr	r0, [r7, #28]
 8007110:	f01a feeb 	bl	8021eea <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	3338      	adds	r3, #56	@ 0x38
 8007122:	220f      	movs	r2, #15
 8007124:	68f9      	ldr	r1, [r7, #12]
 8007126:	4618      	mov	r0, r3
 8007128:	f01b fdac 	bl	8022c84 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f103 0220 	add.w	r2, r3, #32
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b02      	cmp	r3, #2
 8007142:	d003      	beq.n	800714c <pxNew_AddrInfo+0x64>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b0a      	cmp	r3, #10
 8007148:	d01e      	beq.n	8007188 <pxNew_AddrInfo+0xa0>
 800714a:	e02b      	b.n	80071a4 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f003 f87d 	bl	800a24c <ulChar2u32>
 8007152:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	061a      	lsls	r2, r3, #24
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007160:	431a      	orrs	r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800716a:	ea42 0103 	orr.w	r1, r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	0e1a      	lsrs	r2, r3, #24
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	430a      	orrs	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2202      	movs	r2, #2
 800717e:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	2204      	movs	r2, #4
 8007184:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8007186:	e016      	b.n	80071b6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	220a      	movs	r2, #10
 800718c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	2210      	movs	r2, #16
 8007192:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	3328      	adds	r3, #40	@ 0x28
 8007198:	2210      	movs	r2, #16
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4618      	mov	r0, r3
 800719e:	f01a fd97 	bl	8021cd0 <memcpy>
                        break;
 80071a2:	e008      	b.n	80071b6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 80071a4:	4806      	ldr	r0, [pc, #24]	@ (80071c0 <pxNew_AddrInfo+0xd8>)
 80071a6:	f01a fb77 	bl	8021898 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 80071aa:	69b8      	ldr	r0, [r7, #24]
 80071ac:	f7fe fe66 	bl	8005e7c <vPortFree>
                    pxAddrInfo = NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]

                    break;
 80071b4:	bf00      	nop
            }
        }

        return pxAddrInfo;
 80071b6:	69fb      	ldr	r3, [r7, #28]
    }
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	08023d38 	.word	0x08023d38

080071c4 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00b      	beq.n	80071ee <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 80071d6:	e007      	b.n	80071e8 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7fe fe4c 	bl	8005e7c <vPortFree>
                pxIterator = pxNext;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f4      	bne.n	80071d8 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af02      	add	r7, sp, #8
 80071fc:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f002 fa92 	bl	8009728 <uxIPHeaderSizePacket>
 8007204:	4603      	mov	r3, r0
 8007206:	3316      	adds	r3, #22
 8007208:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	429a      	cmp	r2, r3
 8007212:	d829      	bhi.n	8007268 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b0b      	cmp	r3, #11
 8007222:	d921      	bls.n	8007268 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4413      	add	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	b21a      	sxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	b29b      	uxth	r3, r3
 8007242:	b21b      	sxth	r3, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007248:	b29b      	uxth	r3, r3
 800724a:	f107 0208 	add.w	r2, r7, #8
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2300      	movs	r3, #0
 8007252:	6939      	ldr	r1, [r7, #16]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fcb5 	bl	8007bc4 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ffae 	bl	80071c4 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007268:	2300      	movs	r3, #0
    }
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af02      	add	r7, sp, #8
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f818 	bl	80072c0 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8007290:	2301      	movs	r3, #1
    }
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 80072a0:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80072a4:	2100      	movs	r1, #0
 80072a6:	4804      	ldr	r0, [pc, #16]	@ (80072b8 <FreeRTOS_dnsclear+0x1c>)
 80072a8:	f01a fe1f 	bl	8021eea <memset>
        uxFreeEntry = 0U;
 80072ac:	4b03      	ldr	r3, [pc, #12]	@ (80072bc <FreeRTOS_dnsclear+0x20>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
    }
 80072b2:	bf00      	nop
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000e0c 	.word	0x20000e0c
 80072bc:	20000fbc 	.word	0x20000fbc

080072c0 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 80072c0:	b590      	push	{r4, r7, lr}
 80072c2:	b09b      	sub	sp, #108	@ 0x6c
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 80072ce:	f7fc fe93 	bl	8003ff8 <xTaskGetTickCount>
 80072d2:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <FreeRTOS_ProcessDNSCache+0x22>
 80072da:	21d8      	movs	r1, #216	@ 0xd8
 80072dc:	4841      	ldr	r0, [pc, #260]	@ (80073e4 <FreeRTOS_ProcessDNSCache+0x124>)
 80072de:	f7fa f9bb 	bl	8001658 <vAssertCalled>

        if( xLookUp != pdFALSE )
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 80072ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072f0:	4a3d      	ldr	r2, [pc, #244]	@ (80073e8 <FreeRTOS_ProcessDNSCache+0x128>)
 80072f2:	fba2 2303 	umull	r2, r3, r2, r3
 80072f6:	099b      	lsrs	r3, r3, #6
 80072f8:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 80072fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80072fe:	461a      	mov	r2, r3
 8007300:	68b9      	ldr	r1, [r7, #8]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f87a 	bl	80073fc <prvFindEntryIndex>
 8007308:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 800730a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800730c:	2b01      	cmp	r3, #1
 800730e:	d110      	bne.n	8007332 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d106      	bne.n	8007324 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007316:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007318:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800731a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	f000 f8b1 	bl	8007484 <prvGetCacheIPEntry>
 8007322:	e013      	b.n	800734c <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007324:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	f000 f94a 	bl	80075c4 <prvUpdateCacheEntry>
 8007330:	e00c      	b.n	800734c <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d103      	bne.n	8007340 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e005      	b.n	800734c <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8007340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f994 	bl	8007674 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <FreeRTOS_ProcessDNSCache+0x9a>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d03f      	beq.n	80073da <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 800735a:	2302      	movs	r3, #2
 800735c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00c      	beq.n	8007380 <FreeRTOS_ProcessDNSCache+0xc0>
 8007366:	2b01      	cmp	r3, #1
 8007368:	d10e      	bne.n	8007388 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	6859      	ldr	r1, [r3, #4]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 800737a:	230a      	movs	r3, #10
 800737c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 800737e:	e007      	b.n	8007390 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8007386:	e003      	b.n	8007390 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8007388:	4818      	ldr	r0, [pc, #96]	@ (80073ec <FreeRTOS_ProcessDNSCache+0x12c>)
 800738a:	f01a fa85 	bl	8021898 <lUDPLoggingPrintf>
                        break;
 800738e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8007390:	f107 0214 	add.w	r2, r7, #20
 8007394:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8007398:	2328      	movs	r3, #40	@ 0x28
 800739a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800739c:	f007 fc62 	bl	800ec64 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <FreeRTOS_ProcessDNSCache+0xea>
 80073a6:	4912      	ldr	r1, [pc, #72]	@ (80073f0 <FreeRTOS_ProcessDNSCache+0x130>)
 80073a8:	e000      	b.n	80073ac <FreeRTOS_ProcessDNSCache+0xec>
 80073aa:	4912      	ldr	r1, [pc, #72]	@ (80073f4 <FreeRTOS_ProcessDNSCache+0x134>)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	061a      	lsls	r2, r3, #24
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	0e1b      	lsrs	r3, r3, #24
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f107 0214 	add.w	r2, r7, #20
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4808      	ldr	r0, [pc, #32]	@ (80073f8 <FreeRTOS_ProcessDNSCache+0x138>)
 80073d6:	f01a fa5f 	bl	8021898 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 80073da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 80073dc:	4618      	mov	r0, r3
 80073de:	3764      	adds	r7, #100	@ 0x64
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}
 80073e4:	08023fb4 	.word	0x08023fb4
 80073e8:	10624dd3 	.word	0x10624dd3
 80073ec:	08023fe8 	.word	0x08023fe8
 80073f0:	08024018 	.word	0x08024018
 80073f4:	08024020 	.word	0x08024020
 80073f8:	08024024 	.word	0x08024024

080073fc <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	e02d      	b.n	800746e <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007412:	4a1b      	ldr	r2, [pc, #108]	@ (8007480 <prvFindEntryIndex+0x84>)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	216c      	movs	r1, #108	@ 0x6c
 8007418:	fb01 f303 	mul.w	r3, r1, r3
 800741c:	4413      	add	r3, r2
 800741e:	3350      	adds	r3, #80	@ 0x50
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01f      	beq.n	8007466 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	226c      	movs	r2, #108	@ 0x6c
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	3350      	adds	r3, #80	@ 0x50
 8007430:	4a13      	ldr	r2, [pc, #76]	@ (8007480 <prvFindEntryIndex+0x84>)
 8007432:	4413      	add	r3, r2
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	4618      	mov	r0, r3
 8007438:	f7f8 ff52 	bl	80002e0 <strcmp>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d112      	bne.n	8007468 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	691a      	ldr	r2, [r3, #16]
 8007446:	490e      	ldr	r1, [pc, #56]	@ (8007480 <prvFindEntryIndex+0x84>)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	206c      	movs	r0, #108	@ 0x6c
 800744c:	fb00 f303 	mul.w	r3, r0, r3
 8007450:	440b      	add	r3, r1
 8007452:	3310      	adds	r3, #16
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d106      	bne.n	8007468 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 800745a:	2301      	movs	r3, #1
 800745c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	601a      	str	r2, [r3, #0]
                    break;
 8007464:	e006      	b.n	8007474 <prvFindEntryIndex+0x78>
                continue;
 8007466:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	3301      	adds	r3, #1
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b03      	cmp	r3, #3
 8007472:	d9ce      	bls.n	8007412 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8007474:	697b      	ldr	r3, [r7, #20]
    }
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000e0c 	.word	0x20000e0c

08007484 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8007496:	4a4a      	ldr	r2, [pc, #296]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	216c      	movs	r1, #108	@ 0x6c
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	3364      	adds	r3, #100	@ 0x64
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 80074ac:	4a44      	ldr	r2, [pc, #272]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	216c      	movs	r1, #108	@ 0x6c
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	3360      	adds	r3, #96	@ 0x60
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	061a      	lsls	r2, r3, #24
 80074be:	4940      	ldr	r1, [pc, #256]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	206c      	movs	r0, #108	@ 0x6c
 80074c4:	fb00 f303 	mul.w	r3, r0, r3
 80074c8:	440b      	add	r3, r1
 80074ca:	3360      	adds	r3, #96	@ 0x60
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074d4:	431a      	orrs	r2, r3
 80074d6:	493a      	ldr	r1, [pc, #232]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	206c      	movs	r0, #108	@ 0x6c
 80074dc:	fb00 f303 	mul.w	r3, r0, r3
 80074e0:	440b      	add	r3, r1
 80074e2:	3360      	adds	r3, #96	@ 0x60
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	0a1b      	lsrs	r3, r3, #8
 80074e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80074ec:	431a      	orrs	r2, r3
 80074ee:	4934      	ldr	r1, [pc, #208]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	206c      	movs	r0, #108	@ 0x6c
 80074f4:	fb00 f303 	mul.w	r3, r0, r3
 80074f8:	440b      	add	r3, r1
 80074fa:	3360      	adds	r3, #96	@ 0x60
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	0e1b      	lsrs	r3, r3, #24
 8007500:	4313      	orrs	r3, r2
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	429a      	cmp	r2, r3
 8007506:	d24a      	bcs.n	800759e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007508:	4a2d      	ldr	r2, [pc, #180]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	216c      	movs	r1, #108	@ 0x6c
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	4413      	add	r3, r2
 8007514:	3369      	adds	r3, #105	@ 0x69
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4929      	ldr	r1, [pc, #164]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	206c      	movs	r0, #108	@ 0x6c
 800751e:	fb00 f202 	mul.w	r2, r0, r2
 8007522:	440a      	add	r2, r1
 8007524:	3268      	adds	r2, #104	@ 0x68
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	fbb3 f1f2 	udiv	r1, r3, r2
 800752c:	fb01 f202 	mul.w	r2, r1, r2
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007534:	7cfb      	ldrb	r3, [r7, #19]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 800753c:	7cfb      	ldrb	r3, [r7, #19]
 800753e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8007540:	4a1f      	ldr	r2, [pc, #124]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	216c      	movs	r1, #108	@ 0x6c
 8007546:	fb01 f303 	mul.w	r3, r1, r3
 800754a:	4413      	add	r3, r2
 800754c:	3369      	adds	r3, #105	@ 0x69
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	b2d8      	uxtb	r0, r3
 8007554:	4a1a      	ldr	r2, [pc, #104]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	216c      	movs	r1, #108	@ 0x6c
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	3369      	adds	r3, #105	@ 0x69
 8007562:	4602      	mov	r2, r0
 8007564:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	216c      	movs	r1, #108	@ 0x6c
 8007574:	fb01 f202 	mul.w	r2, r1, r2
 8007578:	4413      	add	r3, r2
 800757a:	4a11      	ldr	r2, [pc, #68]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 800757c:	4413      	add	r3, r2
 800757e:	2214      	movs	r2, #20
 8007580:	4619      	mov	r1, r3
 8007582:	68b8      	ldr	r0, [r7, #8]
 8007584:	f01a fba4 	bl	8021cd0 <memcpy>
            isRead = pdTRUE;
 8007588:	2301      	movs	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d010      	beq.n	80075b4 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f8dc 	bl	8007754 <prvReadDNSCache>
 800759c:	e00a      	b.n	80075b4 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800759e:	4a08      	ldr	r2, [pc, #32]	@ (80075c0 <prvGetCacheIPEntry+0x13c>)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	216c      	movs	r1, #108	@ 0x6c
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	3350      	adds	r3, #80	@ 0x50
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 80075b4:	69fb      	ldr	r3, [r7, #28]
    }
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000e0c 	.word	0x20000e0c

080075c4 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 80075d6:	4a26      	ldr	r2, [pc, #152]	@ (8007670 <prvUpdateCacheEntry+0xac>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	216c      	movs	r1, #108	@ 0x6c
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	4413      	add	r3, r2
 80075e2:	3368      	adds	r3, #104	@ 0x68
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d81b      	bhi.n	8007622 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 80075ea:	4a21      	ldr	r2, [pc, #132]	@ (8007670 <prvUpdateCacheEntry+0xac>)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	216c      	movs	r1, #108	@ 0x6c
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	4413      	add	r3, r2
 80075f6:	3368      	adds	r3, #104	@ 0x68
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 80075fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007670 <prvUpdateCacheEntry+0xac>)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	216c      	movs	r1, #108	@ 0x6c
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	3368      	adds	r3, #104	@ 0x68
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	b2d8      	uxtb	r0, r3
 8007610:	4a17      	ldr	r2, [pc, #92]	@ (8007670 <prvUpdateCacheEntry+0xac>)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	216c      	movs	r1, #108	@ 0x6c
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4413      	add	r3, r2
 800761c:	3368      	adds	r3, #104	@ 0x68
 800761e:	4602      	mov	r2, r0
 8007620:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	216c      	movs	r1, #108	@ 0x6c
 8007630:	fb01 f202 	mul.w	r2, r1, r2
 8007634:	4413      	add	r3, r2
 8007636:	4a0e      	ldr	r2, [pc, #56]	@ (8007670 <prvUpdateCacheEntry+0xac>)
 8007638:	4413      	add	r3, r2
 800763a:	2214      	movs	r2, #20
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	f01a fb46 	bl	8021cd0 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8007644:	4a0a      	ldr	r2, [pc, #40]	@ (8007670 <prvUpdateCacheEntry+0xac>)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	216c      	movs	r1, #108	@ 0x6c
 800764a:	fb01 f303 	mul.w	r3, r1, r3
 800764e:	4413      	add	r3, r2
 8007650:	3360      	adds	r3, #96	@ 0x60
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007656:	4a06      	ldr	r2, [pc, #24]	@ (8007670 <prvUpdateCacheEntry+0xac>)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	216c      	movs	r1, #108	@ 0x6c
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	4413      	add	r3, r2
 8007662:	3364      	adds	r3, #100	@ 0x64
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	601a      	str	r2, [r3, #0]
    }
 8007668:	bf00      	nop
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000e0c 	.word	0x20000e0c

08007674 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7f8 fe36 	bl	80002f4 <strlen>
 8007688:	4603      	mov	r3, r0
 800768a:	2b0f      	cmp	r3, #15
 800768c:	d859      	bhi.n	8007742 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800768e:	4b2f      	ldr	r3, [pc, #188]	@ (800774c <prvInsertCacheEntry+0xd8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	226c      	movs	r2, #108	@ 0x6c
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	3350      	adds	r3, #80	@ 0x50
 800769a:	4a2d      	ldr	r2, [pc, #180]	@ (8007750 <prvInsertCacheEntry+0xdc>)
 800769c:	4413      	add	r3, r2
 800769e:	2210      	movs	r2, #16
 80076a0:	68f9      	ldr	r1, [r7, #12]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f01b faee 	bl	8022c84 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 80076a8:	4b28      	ldr	r3, [pc, #160]	@ (800774c <prvInsertCacheEntry+0xd8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	226c      	movs	r2, #108	@ 0x6c
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	4a27      	ldr	r2, [pc, #156]	@ (8007750 <prvInsertCacheEntry+0xdc>)
 80076b4:	4413      	add	r3, r2
 80076b6:	2214      	movs	r2, #20
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f01a fb08 	bl	8021cd0 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 80076c0:	4b22      	ldr	r3, [pc, #136]	@ (800774c <prvInsertCacheEntry+0xd8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a22      	ldr	r2, [pc, #136]	@ (8007750 <prvInsertCacheEntry+0xdc>)
 80076c6:	216c      	movs	r1, #108	@ 0x6c
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	3360      	adds	r3, #96	@ 0x60
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80076d4:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <prvInsertCacheEntry+0xd8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007750 <prvInsertCacheEntry+0xdc>)
 80076da:	216c      	movs	r1, #108	@ 0x6c
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	3364      	adds	r3, #100	@ 0x64
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 80076e8:	4b18      	ldr	r3, [pc, #96]	@ (800774c <prvInsertCacheEntry+0xd8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a18      	ldr	r2, [pc, #96]	@ (8007750 <prvInsertCacheEntry+0xdc>)
 80076ee:	216c      	movs	r1, #108	@ 0x6c
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	3368      	adds	r3, #104	@ 0x68
 80076f8:	2201      	movs	r2, #1
 80076fa:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 80076fc:	4b13      	ldr	r3, [pc, #76]	@ (800774c <prvInsertCacheEntry+0xd8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a13      	ldr	r2, [pc, #76]	@ (8007750 <prvInsertCacheEntry+0xdc>)
 8007702:	216c      	movs	r1, #108	@ 0x6c
 8007704:	fb01 f303 	mul.w	r3, r1, r3
 8007708:	4413      	add	r3, r2
 800770a:	3369      	adds	r3, #105	@ 0x69
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8007710:	4b0e      	ldr	r3, [pc, #56]	@ (800774c <prvInsertCacheEntry+0xd8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	226c      	movs	r2, #108	@ 0x6c
 8007716:	fb02 f303 	mul.w	r3, r2, r3
 800771a:	3314      	adds	r3, #20
 800771c:	4a0c      	ldr	r2, [pc, #48]	@ (8007750 <prvInsertCacheEntry+0xdc>)
 800771e:	4413      	add	r3, r2
 8007720:	223c      	movs	r2, #60	@ 0x3c
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f01a fbe0 	bl	8021eea <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 800772a:	4b08      	ldr	r3, [pc, #32]	@ (800774c <prvInsertCacheEntry+0xd8>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	4a06      	ldr	r2, [pc, #24]	@ (800774c <prvInsertCacheEntry+0xd8>)
 8007732:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <prvInsertCacheEntry+0xd8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b04      	cmp	r3, #4
 800773a:	d102      	bne.n	8007742 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 800773c:	4b03      	ldr	r3, [pc, #12]	@ (800774c <prvInsertCacheEntry+0xd8>)
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000fbc 	.word	0x20000fbc
 8007750:	20000e0c 	.word	0x20000e0c

08007754 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 800775e:	2301      	movs	r3, #1
 8007760:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 800776a:	4a2e      	ldr	r2, [pc, #184]	@ (8007824 <prvReadDNSCache+0xd0>)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	216c      	movs	r1, #108	@ 0x6c
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	3368      	adds	r3, #104	@ 0x68
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b04      	cmp	r3, #4
 8007780:	d901      	bls.n	8007786 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007782:	2304      	movs	r3, #4
 8007784:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	e041      	b.n	8007810 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	216c      	movs	r1, #108	@ 0x6c
 800779a:	fb01 f202 	mul.w	r2, r1, r2
 800779e:	4413      	add	r3, r2
 80077a0:	4a20      	ldr	r2, [pc, #128]	@ (8007824 <prvReadDNSCache+0xd0>)
 80077a2:	4413      	add	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <prvReadDNSCache+0x60>
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d010      	beq.n	80077d4 <prvReadDNSCache+0x80>
 80077b2:	e01d      	b.n	80077f0 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	226c      	movs	r2, #108	@ 0x6c
 80077bc:	fb02 f303 	mul.w	r3, r2, r3
 80077c0:	3350      	adds	r3, #80	@ 0x50
 80077c2:	4a18      	ldr	r2, [pc, #96]	@ (8007824 <prvReadDNSCache+0xd0>)
 80077c4:	4413      	add	r3, r2
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	2102      	movs	r1, #2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fc8c 	bl	80070e8 <pxNew_AddrInfo>
 80077d0:	6178      	str	r0, [r7, #20]
                       }
                       break;
 80077d2:	e011      	b.n	80077f8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	226c      	movs	r2, #108	@ 0x6c
 80077d8:	fb02 f303 	mul.w	r3, r2, r3
 80077dc:	3350      	adds	r3, #80	@ 0x50
 80077de:	4a11      	ldr	r2, [pc, #68]	@ (8007824 <prvReadDNSCache+0xd0>)
 80077e0:	4413      	add	r3, r2
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	210a      	movs	r1, #10
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fc7e 	bl	80070e8 <pxNew_AddrInfo>
 80077ec:	6178      	str	r0, [r7, #20]
                        break;
 80077ee:	e003      	b.n	80077f8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 80077f0:	480d      	ldr	r0, [pc, #52]	@ (8007828 <prvReadDNSCache+0xd4>)
 80077f2:	f01a f851 	bl	8021898 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 80077f6:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00d      	beq.n	800781a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	331c      	adds	r3, #28
 8007808:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	3301      	adds	r3, #1
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	429a      	cmp	r2, r3
 8007816:	d3b9      	bcc.n	800778c <prvReadDNSCache+0x38>
        }
    }
 8007818:	e000      	b.n	800781c <prvReadDNSCache+0xc8>
                break;
 800781a:	bf00      	nop
    }
 800781c:	bf00      	nop
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000e0c 	.word	0x20000e0c
 8007828:	08024058 	.word	0x08024058

0800782c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800783a:	4b28      	ldr	r3, [pc, #160]	@ (80078dc <xDNSDoCallback+0xb0>)
 800783c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8007850:	f7fc fac0 	bl	8003dd4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	623b      	str	r3, [r7, #32]
 800785a:	e029      	b.n	80078b0 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	429a      	cmp	r2, r3
 800786a:	d101      	bne.n	8007870 <xDNSDoCallback+0x44>
 800786c:	2301      	movs	r3, #1
 800786e:	e000      	b.n	8007872 <xDNSDoCallback+0x46>
 8007870:	2300      	movs	r3, #0
 8007872:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d117      	bne.n	80078aa <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3314      	adds	r3, #20
 800788a:	4618      	mov	r0, r3
 800788c:	f7fb fa58 	bl	8002d40 <uxListRemove>
                    vPortFree( pxCallback );
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7fe faf3 	bl	8005e7c <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007896:	4b12      	ldr	r3, [pc, #72]	@ (80078e0 <xDNSDoCallback+0xb4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800789e:	2000      	movs	r0, #0
 80078a0:	f002 f9ca 	bl	8009c38 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80078a8:	e006      	b.n	80078b8 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 80078b0:	6a3a      	ldr	r2, [r7, #32]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d1d1      	bne.n	800785c <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 80078b8:	f7fc fa9a 	bl	8003df0 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d006      	beq.n	80078d0 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	69b9      	ldr	r1, [r7, #24]
 80078ce:	4798      	blx	r3
        }

        return xResult;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	@ 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000fc8 	.word	0x20000fc8
 80078e0:	20000fc0 	.word	0x20000fc0

080078e4 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08c      	sub	sp, #48	@ 0x30
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80078ec:	4b40      	ldr	r3, [pc, #256]	@ (80079f0 <vDNSCheckCallBack+0x10c>)
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fb f999 	bl	8002c2c <vListInitialise>

        vTaskSuspendAll();
 80078fa:	f7fc fa6b 	bl	8003dd4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007904:	e02e      	b.n	8007964 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00d      	beq.n	8007934 <vDNSCheckCallBack+0x50>
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d108      	bne.n	8007934 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	3314      	adds	r3, #20
 8007926:	4618      	mov	r0, r3
 8007928:	f7fb fa0a 	bl	8002d40 <uxListRemove>
                    vPortFree( pxCallback );
 800792c:	6a38      	ldr	r0, [r7, #32]
 800792e:	f7fe faa5 	bl	8005e7c <vPortFree>
 8007932:	e017      	b.n	8007964 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	3308      	adds	r3, #8
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f7fc ff3d 	bl	80047bc <xTaskCheckForTimeOut>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00d      	beq.n	8007964 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	3314      	adds	r3, #20
 800794c:	4618      	mov	r0, r3
 800794e:	f7fb f9f7 	bl	8002d40 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	f103 0214 	add.w	r2, r3, #20
 8007958:	f107 030c 	add.w	r3, r7, #12
 800795c:	4611      	mov	r1, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f7fb f991 	bl	8002c86 <vListInsertEnd>
                 pxIterator != xEnd; )
 8007964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	429a      	cmp	r2, r3
 800796a:	d1cc      	bne.n	8007906 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 800796c:	f7fc fa40 	bl	8003df0 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d030      	beq.n	80079d8 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8007976:	f107 030c 	add.w	r3, r7, #12
 800797a:	3308      	adds	r3, #8
 800797c:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800797e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007984:	e024      	b.n	80079d0 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a0:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80079a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a6:	6911      	ldr	r1, [r2, #16]
 80079a8:	2200      	movs	r2, #0
 80079aa:	4798      	blx	r3
 80079ac:	e008      	b.n	80079c0 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b4:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80079b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ba:	6911      	ldr	r1, [r2, #16]
 80079bc:	2200      	movs	r2, #0
 80079be:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	3314      	adds	r3, #20
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fb f9bb 	bl	8002d40 <uxListRemove>
                vPortFree( pxCallback );
 80079ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079cc:	f7fe fa56 	bl	8005e7c <vPortFree>
                 pxIterator != xEnd;
 80079d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d1d6      	bne.n	8007986 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80079d8:	4b06      	ldr	r3, [pc, #24]	@ (80079f4 <vDNSCheckCallBack+0x110>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d102      	bne.n	80079e6 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 80079e0:	2000      	movs	r0, #0
 80079e2:	f002 f929 	bl	8009c38 <vIPSetDNSTimerEnableState>
        }
    }
 80079e6:	bf00      	nop
 80079e8:	3730      	adds	r7, #48	@ 0x30
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20000fc8 	.word	0x20000fc8
 80079f4:	20000fc0 	.word	0x20000fc0

080079f8 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 80079fc:	4802      	ldr	r0, [pc, #8]	@ (8007a08 <vDNSCallbackInitialise+0x10>)
 80079fe:	f7fb f915 	bl	8002c2c <vListInitialise>
    }
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000fc0 	.word	0x20000fc0

08007a0c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 8007a0c:	b480      	push	{r7}
 8007a0e:	b089      	sub	sp, #36	@ 0x24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	e069      	b.n	8007b0a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a44:	d144      	bne.n	8007ad0 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d903      	bls.n	8007a54 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	3302      	adds	r3, #2
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	e05a      	b.n	8007b0a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	e057      	b.n	8007b0a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d008      	beq.n	8007a72 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	4413      	add	r3, r2
 8007a66:	3334      	adds	r3, #52	@ 0x34
 8007a68:	222e      	movs	r2, #46	@ 0x2e
 8007a6a:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	4413      	add	r3, r2
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	4413      	add	r3, r2
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d202      	bcs.n	8007a94 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61bb      	str	r3, [r7, #24]
                    break;
 8007a92:	e027      	b.n	8007ae4 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d812      	bhi.n	8007ac6 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61bb      	str	r3, [r7, #24]
                    break;
 8007aa4:	e01e      	b.n	8007ae4 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	4413      	add	r3, r2
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3334      	adds	r3, #52	@ 0x34
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	3301      	adds	r3, #1
 8007abe:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	1e5a      	subs	r2, r3, #1
 8007aca:	617a      	str	r2, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1ea      	bne.n	8007aa6 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d205      	bcs.n	8007ae4 <DNS_ReadNameField+0xd8>
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	4413      	add	r3, r2
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1ba      	bne.n	8007a5a <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00f      	beq.n	8007b0a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d209      	bcs.n	8007b06 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	3334      	adds	r3, #52	@ 0x34
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	3301      	adds	r3, #1
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	e001      	b.n	8007b0a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
    }
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3724      	adds	r7, #36	@ 0x24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	e03f      	b.n	8007bb6 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b44:	d11f      	bne.n	8007b86 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d903      	bls.n	8007b54 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	3302      	adds	r3, #2
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	e030      	b.n	8007bb6 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	e02d      	b.n	8007bb6 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d908      	bls.n	8007b80 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
 8007b7e:	e002      	b.n	8007b86 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]
                    break;
 8007b84:	e008      	b.n	8007b98 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <DNS_SkipNameField+0x80>
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d8e0      	bhi.n	8007b5a <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3301      	adds	r3, #1
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	e001      	b.n	8007bb6 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8007bb6:	693b      	ldr	r3, [r7, #16]
    }
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b0f6      	sub	sp, #472	@ 0x1d8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8007bce:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8007bd2:	6020      	str	r0, [r4, #0]
 8007bd4:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8007bd8:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 8007bdc:	6001      	str	r1, [r0, #0]
 8007bde:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007be2:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8007be6:	600a      	str	r2, [r1, #0]
 8007be8:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007bec:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007bf0:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8007bfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c02:	224c      	movs	r2, #76	@ 0x4c
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f01a f96f 	bl	8021eea <memset>
        xSet.usPortNumber = usPort;
 8007c0c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8007c10:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8007c14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c18:	3344      	adds	r3, #68	@ 0x44
 8007c1a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8007c1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c22:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8007c2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c30:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b0b      	cmp	r3, #11
 8007c38:	d803      	bhi.n	8007c42 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007c40:	e35a      	b.n	80082f8 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8007c42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c46:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8007c50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8007c5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c62:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8007c78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c7c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8007c86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c8a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8007c96:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007c9a:	3b0c      	subs	r3, #12
 8007c9c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8007ca0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007ca4:	889b      	ldrh	r3, [r3, #4]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	b21a      	sxth	r2, r3
 8007cac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cb0:	889b      	ldrh	r3, [r3, #4]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	b21b      	sxth	r3, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	b21b      	sxth	r3, r3
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8007cc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cc8:	88db      	ldrh	r3, [r3, #6]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	b21a      	sxth	r2, r3
 8007cd0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cd4:	88db      	ldrh	r3, [r3, #6]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	b21b      	sxth	r3, r3
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	b21b      	sxth	r3, r3
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8007ce8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8007cf4:	2b80      	cmp	r3, #128	@ 0x80
 8007cf6:	d11b      	bne.n	8007d30 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 8007cfe:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d103      	bne.n	8007d0e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007d0c:	e2f4      	b.n	80082f8 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 8007d0e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d114      	bne.n	8007d40 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d1a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8007d1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d22:	2110      	movs	r1, #16
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fe71 	bl	8007a0c <DNS_ReadNameField>
 8007d2a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8007d2e:	e007      	b.n	8007d40 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8007d30:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007d3e:	e2db      	b.n	80082f8 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8007d40:	2300      	movs	r3, #0
 8007d42:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007d46:	e064      	b.n	8007e12 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8007d48:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d103      	bne.n	8007d58 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d54:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8007d58:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8007d60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d64:	2110      	movs	r1, #16
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fe50 	bl	8007a0c <DNS_ReadNameField>
 8007d6c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8007d70:	e009      	b.n	8007d86 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8007d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d76:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff fecb 	bl	8007b18 <DNS_SkipNameField>
 8007d82:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8007d86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d103      	bne.n	8007d96 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007d94:	e043      	b.n	8007e1e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8007d96:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8007d9a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007d9e:	4413      	add	r3, r2
 8007da0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8007da4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007da8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007dac:	4413      	add	r3, r2
 8007dae:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8007db2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007db6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8007dc0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d91b      	bls.n	8007e00 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8007dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f002 fa58 	bl	800a282 <usChar2u16>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8007dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ddc:	3302      	adds	r3, #2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f002 fa4f 	bl	800a282 <usChar2u16>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8007dea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dee:	3304      	adds	r3, #4
 8007df0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8007df4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007df8:	3b04      	subs	r3, #4
 8007dfa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007dfe:	e003      	b.n	8007e08 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007e06:	e00a      	b.n	8007e1e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8007e08:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007e12:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007e16:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d394      	bcc.n	8007d48 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8007e1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8265 	beq.w	80082f2 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8007e28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d10d      	bne.n	8007e4c <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8007e30:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8007e34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007e3c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8007e40:	6819      	ldr	r1, [r3, #0]
 8007e42:	f000 fa73 	bl	800832c <parseDNSAnswer>
 8007e46:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8007e4a:	e255      	b.n	80082f8 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007e4c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d004      	beq.n	8007e5e <DNS_ParseDNSReply+0x29a>
 8007e54:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007e58:	2b1c      	cmp	r3, #28
 8007e5a:	f040 824d 	bne.w	80082f8 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8007e5e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	f040 8248 	bne.w	80082f8 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8007e68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e6c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	f001 ff9f 	bl	8009db4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8007e76:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8007e7a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d103      	bne.n	8007e8a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8007e82:	48c4      	ldr	r0, [pc, #784]	@ (8008194 <DNS_ParseDNSReply+0x5d0>)
 8007e84:	f019 fd08 	bl	8021898 <lUDPLoggingPrintf>
                            break;
 8007e88:	e236      	b.n	80082f8 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8007e8a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e90:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007e94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8007ea0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ea6:	d003      	beq.n	8007eb0 <DNS_ParseDNSReply+0x2ec>
 8007ea8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007eac:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eae:	d101      	bne.n	8007eb4 <DNS_ParseDNSReply+0x2f0>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <DNS_ParseDNSReply+0x2f2>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d104      	bne.n	8007ec4 <DNS_ParseDNSReply+0x300>
 8007eba:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8007ebe:	48b6      	ldr	r0, [pc, #728]	@ (8008198 <DNS_ParseDNSReply+0x5d4>)
 8007ec0:	f7f9 fbca 	bl	8001658 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8007ec4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8213 	beq.w	80082f6 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007ed0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8007eda:	f107 0314 	add.w	r3, r7, #20
 8007ede:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007ee2:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f019 fef2 	bl	8021cd0 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8007eec:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007ef6:	3334      	adds	r3, #52	@ 0x34
 8007ef8:	4619      	mov	r1, r3
 8007efa:	48a8      	ldr	r0, [pc, #672]	@ (800819c <DNS_ParseDNSReply+0x5d8>)
 8007efc:	f019 fccc 	bl	8021898 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8007f00:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f0a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f0e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8007f12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f16:	3334      	adds	r3, #52	@ 0x34
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7f9 fc31 	bl	8001780 <xApplicationDNSQueryHook>
 8007f1e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8007f22:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d014      	beq.n	8007f54 <DNS_ParseDNSReply+0x390>
 8007f2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f32:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <DNS_ParseDNSReply+0x390>
 8007f40:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f44:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8007f54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 81cd 	beq.w	80082f8 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8007f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80081a0 <DNS_ParseDNSReply+0x5dc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d164      	bne.n	800803c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8007f72:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007f76:	f001 fbd7 	bl	8009728 <uxIPHeaderSizePacket>
 8007f7a:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8007f7c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8007f88:	3316      	adds	r3, #22
 8007f8a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8007f8e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007f92:	2b1c      	cmp	r3, #28
 8007f94:	d103      	bne.n	8007f9e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8007f96:	231c      	movs	r3, #28
 8007f98:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8007f9c:	e002      	b.n	8007fa4 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8007fa4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007fa8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8007fac:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8007fae:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8007fb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007fb6:	4413      	add	r3, r2
 8007fb8:	4619      	mov	r1, r3
 8007fba:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007fbe:	f001 fe65 	bl	8009c8c <pxDuplicateNetworkBufferWithDescriptor>
 8007fc2:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8007fc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d032      	beq.n	8008034 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8007fce:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007fd2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007fd6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8007fe2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8007fe6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007fea:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8007ff6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007ffa:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8007ffe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008004:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008008:	4413      	add	r3, r2
 800800a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 800800e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008012:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008016:	4413      	add	r3, r2
 8008018:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 800801c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008020:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008024:	4413      	add	r3, r2
 8008026:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 800802a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800802e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008032:	e00b      	b.n	800804c <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800803a:	e007      	b.n	800804c <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800803c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008042:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008046:	4413      	add	r3, r2
 8008048:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 800804c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8151 	beq.w	80082f8 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008056:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800805a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 800805e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008062:	3302      	adds	r3, #2
 8008064:	2280      	movs	r2, #128	@ 0x80
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800806c:	3303      	adds	r3, #3
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008072:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008076:	3306      	adds	r3, #6
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008080:	3307      	adds	r3, #7
 8008082:	2201      	movs	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008086:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800808a:	3308      	adds	r3, #8
 800808c:	2200      	movs	r2, #0
 800808e:	701a      	strb	r2, [r3, #0]
 8008090:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008094:	3309      	adds	r3, #9
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 800809a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800809e:	330a      	adds	r3, #10
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080a8:	330b      	adds	r3, #11
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 80080ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080b2:	22c0      	movs	r2, #192	@ 0xc0
 80080b4:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 80080b6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80080ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080c6:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 80080c8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080d4:	3302      	adds	r3, #2
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 80080de:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080e2:	3303      	adds	r3, #3
 80080e4:	b2d2      	uxtb	r2, r2
 80080e6:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 80080e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080ec:	3304      	adds	r3, #4
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80080f6:	3305      	adds	r3, #5
 80080f8:	2201      	movs	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 80080fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008100:	3306      	adds	r3, #6
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800810a:	3307      	adds	r3, #7
 800810c:	2200      	movs	r2, #0
 800810e:	701a      	strb	r2, [r3, #0]
 8008110:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008114:	3308      	adds	r3, #8
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800811e:	3309      	adds	r3, #9
 8008120:	222c      	movs	r2, #44	@ 0x2c
 8008122:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008124:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008128:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	b29b      	uxth	r3, r3
 8008130:	3310      	adds	r3, #16
 8008132:	b29b      	uxth	r3, r3
 8008134:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008138:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800813c:	2b1c      	cmp	r3, #28
 800813e:	d131      	bne.n	80081a4 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008140:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008144:	330a      	adds	r3, #10
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800814e:	330b      	adds	r3, #11
 8008150:	2210      	movs	r2, #16
 8008152:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008154:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008158:	f103 020c 	add.w	r2, r3, #12
 800815c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008160:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008164:	4615      	mov	r5, r2
 8008166:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800816a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800816c:	6028      	str	r0, [r5, #0]
 800816e:	6069      	str	r1, [r5, #4]
 8008170:	60aa      	str	r2, [r5, #8]
 8008172:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008174:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008178:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8008182:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8008186:	b29b      	uxth	r3, r3
 8008188:	331c      	adds	r3, #28
 800818a:	b29b      	uxth	r3, r3
 800818c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8008190:	e09a      	b.n	80082c8 <DNS_ParseDNSReply+0x704>
 8008192:	bf00      	nop
 8008194:	08024100 	.word	0x08024100
 8008198:	08024134 	.word	0x08024134
 800819c:	08024168 	.word	0x08024168
 80081a0:	0802701c 	.word	0x0802701c
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 80081a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081a8:	330a      	adds	r3, #10
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081b2:	330b      	adds	r3, #11
 80081b4:	2204      	movs	r2, #4
 80081b6:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 80081b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081bc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	061a      	lsls	r2, r3, #24
 80081c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081c8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081d4:	431a      	orrs	r2, r3
 80081d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	0a1b      	lsrs	r3, r3, #8
 80081e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80081e6:	431a      	orrs	r2, r3
 80081e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081ec:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	0e1b      	lsrs	r3, r3, #24
 80081f4:	4313      	orrs	r3, r2
 80081f6:	0e1a      	lsrs	r2, r3, #24
 80081f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081fc:	330c      	adds	r3, #12
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008206:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	061a      	lsls	r2, r3, #24
 800820e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008212:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800821e:	431a      	orrs	r2, r3
 8008220:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008224:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008230:	431a      	orrs	r2, r3
 8008232:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008236:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	0e1b      	lsrs	r3, r3, #24
 800823e:	4313      	orrs	r3, r2
 8008240:	0c1a      	lsrs	r2, r3, #16
 8008242:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008246:	330d      	adds	r3, #13
 8008248:	b2d2      	uxtb	r2, r2
 800824a:	701a      	strb	r2, [r3, #0]
 800824c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008250:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	061a      	lsls	r2, r3, #24
 8008258:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800825c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008268:	431a      	orrs	r2, r3
 800826a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800826e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	0a1b      	lsrs	r3, r3, #8
 8008276:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800827a:	431a      	orrs	r2, r3
 800827c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008280:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	0e1b      	lsrs	r3, r3, #24
 8008288:	4313      	orrs	r3, r2
 800828a:	0a1a      	lsrs	r2, r3, #8
 800828c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008290:	330e      	adds	r3, #14
 8008292:	b2d2      	uxtb	r2, r2
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800829a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	0e1a      	lsrs	r2, r3, #24
 80082a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80082a6:	330f      	adds	r3, #15
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 80082ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80082b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 80082ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3310      	adds	r3, #16
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 80082c8:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 80082cc:	4619      	mov	r1, r3
 80082ce:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80082d2:	f000 fa21 	bl	8008718 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 80082d6:	2100      	movs	r1, #0
 80082d8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80082dc:	f001 f924 	bl	8009528 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 80082e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d007      	beq.n	80082f8 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 80082e8:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 80082ec:	f00e fc2c 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
 80082f0:	e002      	b.n	80082f8 <DNS_ParseDNSReply+0x734>
                    break;
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <DNS_ParseDNSReply+0x734>
                            break;
 80082f6:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 80082f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008306:	e009      	b.n	800831c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008308:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800830c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 800831c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008320:	4618      	mov	r0, r3
 8008322:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008326:	46bd      	mov	sp, r7
 8008328:	bdb0      	pop	{r4, r5, r7, pc}
 800832a:	bf00      	nop

0800832c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b0a7      	sub	sp, #156	@ 0x9c
 8008330:	af02      	add	r7, sp, #8
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800833e:	2304      	movs	r3, #4
 8008340:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008350:	2300      	movs	r3, #0
 8008352:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008356:	e1c1      	b.n	80086dc <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008358:	2300      	movs	r3, #0
 800835a:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008360:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008364:	429a      	cmp	r2, r3
 8008366:	f240 81c1 	bls.w	80086ec <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f7ff fbcf 	bl	8007b18 <DNS_SkipNameField>
 800837a:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 800837c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800837e:	2b00      	cmp	r3, #0
 8008380:	d103      	bne.n	800838a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008388:	e1b1      	b.n	80086ee <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008396:	441a      	add	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	695a      	ldr	r2, [r3, #20]
 80083ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d803      	bhi.n	80083c4 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 80083bc:	2300      	movs	r3, #0
 80083be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 80083c2:	e194      	b.n	80086ee <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 ff5a 	bl	800a282 <usChar2u16>
 80083ce:	4603      	mov	r3, r0
 80083d0:	461a      	mov	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8b1b      	ldrh	r3, [r3, #24]
 80083da:	2b1c      	cmp	r3, #28
 80083dc:	d10c      	bne.n	80083f8 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2210      	movs	r2, #16
 80083e2:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	330a      	adds	r3, #10
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d323      	bcc.n	800843a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 80083f2:	2301      	movs	r3, #1
 80083f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083f6:	e020      	b.n	800843a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8b1b      	ldrh	r3, [r3, #24]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d11c      	bne.n	800843a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2204      	movs	r2, #4
 8008404:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	330a      	adds	r3, #10
 8008410:	429a      	cmp	r2, r3
 8008412:	d312      	bcc.n	800843a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	330a      	adds	r3, #10
 800841a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800841c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008420:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	461a      	mov	r2, r3
 8008428:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800842a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800842c:	f019 fc50 	bl	8021cd0 <memcpy>

                    if( ulTestAddress != 0U )
 8008430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008436:	2301      	movs	r3, #1
 8008438:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 800843a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 810d 	beq.w	800865c <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800844a:	891b      	ldrh	r3, [r3, #8]
 800844c:	b29b      	uxth	r3, r3
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	b21a      	sxth	r2, r3
 8008452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008454:	891b      	ldrh	r3, [r3, #8]
 8008456:	b29b      	uxth	r3, r3
 8008458:	0a1b      	lsrs	r3, r3, #8
 800845a:	b29b      	uxth	r3, r3
 800845c:	b21b      	sxth	r3, r3
 800845e:	4313      	orrs	r3, r2
 8008460:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008466:	b21b      	sxth	r3, r3
 8008468:	429a      	cmp	r2, r3
 800846a:	f040 80d0 	bne.w	800860e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	2b10      	cmp	r3, #16
 8008474:	d11c      	bne.n	80084b0 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 800847c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	6859      	ldr	r1, [r3, #4]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3334      	adds	r3, #52	@ 0x34
 8008494:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008498:	210a      	movs	r1, #10
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fe24 	bl	80070e8 <pxNew_AddrInfo>
 80084a0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	61da      	str	r2, [r3, #28]
 80084ae:	e021      	b.n	80084f4 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	330a      	adds	r3, #10
 80084b6:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	331c      	adds	r3, #28
 80084bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80084c6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80084c8:	f019 fc02 	bl	8021cd0 <memcpy>

                        if( ppxAddressInfo != NULL )
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	331c      	adds	r3, #28
 80084d6:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3334      	adds	r3, #52	@ 0x34
 80084dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084de:	2102      	movs	r1, #2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fe fe01 	bl	80070e8 <pxNew_AddrInfo>
 80084e6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 80084f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d013      	beq.n	8008524 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	e004      	b.n	8008518 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008512:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008516:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8008518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800851c:	f103 021c 	add.w	r2, r3, #28
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <parseDNSAnswer+0x204>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	e000      	b.n	8008532 <parseDNSAnswer+0x206>
 8008530:	2300      	movs	r3, #0
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff f979 	bl	800782c <xDNSDoCallback>
 800853a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 800853c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854c:	2b00      	cmp	r3, #0
 800854e:	d011      	beq.n	8008574 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8008556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008558:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 800855a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800855e:	2300      	movs	r3, #0
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	2300      	movs	r3, #0
 8008564:	f7fe fe85 	bl	8007272 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800856c:	3301      	adds	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8b1b      	ldrh	r3, [r3, #24]
 8008578:	2b1c      	cmp	r3, #28
 800857a:	d11f      	bne.n	80085bc <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 800857c:	f107 0214 	add.w	r2, r7, #20
 8008580:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008584:	2328      	movs	r3, #40	@ 0x28
 8008586:	200a      	movs	r0, #10
 8008588:	f006 fb6c 	bl	800ec64 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29b      	uxth	r3, r3
 8008594:	4618      	mov	r0, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <parseDNSAnswer+0x27c>
 80085a4:	4b58      	ldr	r3, [pc, #352]	@ (8008708 <parseDNSAnswer+0x3dc>)
 80085a6:	e000      	b.n	80085aa <parseDNSAnswer+0x27e>
 80085a8:	4b58      	ldr	r3, [pc, #352]	@ (800870c <parseDNSAnswer+0x3e0>)
 80085aa:	f107 0114 	add.w	r1, r7, #20
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	460b      	mov	r3, r1
 80085b2:	4601      	mov	r1, r0
 80085b4:	4856      	ldr	r0, [pc, #344]	@ (8008710 <parseDNSAnswer+0x3e4>)
 80085b6:	f019 f96f 	bl	8021898 <lUDPLoggingPrintf>
 80085ba:	e01f      	b.n	80085fc <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 80085c2:	f107 0214 	add.w	r2, r7, #20
 80085c6:	2328      	movs	r3, #40	@ 0x28
 80085c8:	2002      	movs	r0, #2
 80085ca:	f006 fb4b 	bl	800ec64 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4618      	mov	r0, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <parseDNSAnswer+0x2be>
 80085e6:	4b48      	ldr	r3, [pc, #288]	@ (8008708 <parseDNSAnswer+0x3dc>)
 80085e8:	e000      	b.n	80085ec <parseDNSAnswer+0x2c0>
 80085ea:	4b48      	ldr	r3, [pc, #288]	@ (800870c <parseDNSAnswer+0x3e0>)
 80085ec:	f107 0114 	add.w	r1, r7, #20
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	460b      	mov	r3, r1
 80085f4:	4601      	mov	r1, r0
 80085f6:	4846      	ldr	r0, [pc, #280]	@ (8008710 <parseDNSAnswer+0x3e4>)
 80085f8:	f019 f94e 	bl	8021898 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 80085fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008600:	2b00      	cmp	r3, #0
 8008602:	d119      	bne.n	8008638 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800860c:	e014      	b.n	8008638 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800860e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008610:	891b      	ldrh	r3, [r3, #8]
 8008612:	b29b      	uxth	r3, r3
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	b21a      	sxth	r2, r3
 8008618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800861a:	891b      	ldrh	r3, [r3, #8]
 800861c:	b29b      	uxth	r3, r3
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	b29b      	uxth	r3, r3
 8008622:	b21b      	sxth	r3, r3
 8008624:	4313      	orrs	r3, r2
 8008626:	b21b      	sxth	r3, r3
 8008628:	b29b      	uxth	r3, r3
 800862a:	4619      	mov	r1, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	461a      	mov	r2, r3
 8008632:	4838      	ldr	r0, [pc, #224]	@ (8008714 <parseDNSAnswer+0x3e8>)
 8008634:	f019 f930 	bl	8021898 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	330a      	adds	r3, #10
 8008642:	441a      	add	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	695a      	ldr	r2, [r3, #20]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	f1a3 020a 	sub.w	r2, r3, #10
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	615a      	str	r2, [r3, #20]
 800865a:	e03a      	b.n	80086d2 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	2b09      	cmp	r3, #9
 8008662:	d936      	bls.n	80086d2 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f103 020a 	add.w	r2, r3, #10
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f1a3 020a 	sub.w	r2, r3, #10
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8008682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008684:	891b      	ldrh	r3, [r3, #8]
 8008686:	b29b      	uxth	r3, r3
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	b21a      	sxth	r2, r3
 800868c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800868e:	891b      	ldrh	r3, [r3, #8]
 8008690:	b29b      	uxth	r3, r3
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	b29b      	uxth	r3, r3
 8008696:	b21b      	sxth	r3, r3
 8008698:	4313      	orrs	r3, r2
 800869a:	b21b      	sxth	r3, r3
 800869c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	695a      	ldr	r2, [r3, #20]
 80086a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d30e      	bcc.n	80086ca <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086c2:	1ad2      	subs	r2, r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	615a      	str	r2, [r3, #20]
 80086c8:	e003      	b.n	80086d2 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 80086ca:	2300      	movs	r3, #0
 80086cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 80086d0:	e00d      	b.n	80086ee <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 80086d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80086d6:	3301      	adds	r3, #1
 80086d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	88db      	ldrh	r3, [r3, #6]
 80086e0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80086e4:	429a      	cmp	r2, r3
 80086e6:	f4ff ae37 	bcc.w	8008358 <parseDNSAnswer+0x2c>
 80086ea:	e000      	b.n	80086ee <parseDNSAnswer+0x3c2>
                break;
 80086ec:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 80086ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <parseDNSAnswer+0x3d0>
 80086f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086fa:	e000      	b.n	80086fe <parseDNSAnswer+0x3d2>
 80086fc:	2300      	movs	r3, #0
    }
 80086fe:	4618      	mov	r0, r3
 8008700:	3794      	adds	r7, #148	@ 0x94
 8008702:	46bd      	mov	sp, r7
 8008704:	bd90      	pop	{r4, r7, pc}
 8008706:	bf00      	nop
 8008708:	08024198 	.word	0x08024198
 800870c:	0802419c 	.word	0x0802419c
 8008710:	080241a4 	.word	0x080241a4
 8008714:	080241dc 	.word	0x080241dc

08008718 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8008718:	b580      	push	{r7, lr}
 800871a:	b08c      	sub	sp, #48	@ 0x30
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008726:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fffd 	bl	8009728 <uxIPHeaderSizePacket>
 800872e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d104      	bne.n	8008740 <prepareReplyDNSMessage+0x28>
 8008736:	f240 319f 	movw	r1, #927	@ 0x39f
 800873a:	4865      	ldr	r0, [pc, #404]	@ (80088d0 <prepareReplyDNSMessage+0x1b8>)
 800873c:	f7f8 ff8c 	bl	8001658 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008744:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	330e      	adds	r3, #14
 800874a:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	2b28      	cmp	r3, #40	@ 0x28
 8008750:	d150      	bne.n	80087f4 <prepareReplyDNSMessage+0xdc>
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800875a:	2b60      	cmp	r3, #96	@ 0x60
 800875c:	d14a      	bne.n	80087f4 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	330e      	adds	r3, #14
 8008768:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	3336      	adds	r3, #54	@ 0x36
 800876e:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	3308      	adds	r3, #8
 8008776:	b29b      	uxth	r3, r3
 8008778:	021b      	lsls	r3, r3, #8
 800877a:	b29a      	uxth	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	3308      	adds	r3, #8
 8008782:	0a1b      	lsrs	r3, r3, #8
 8008784:	b29b      	uxth	r3, r3
 8008786:	4313      	orrs	r3, r2
 8008788:	b29a      	uxth	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f103 0018 	add.w	r0, r3, #24
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	3308      	adds	r3, #8
 8008798:	2210      	movs	r2, #16
 800879a:	4619      	mov	r1, r3
 800879c:	f019 fa98 	bl	8021cd0 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f103 0008 	add.w	r0, r3, #8
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	3338      	adds	r3, #56	@ 0x38
 80087aa:	2210      	movs	r2, #16
 80087ac:	4619      	mov	r1, r3
 80087ae:	f019 fa8f 	bl	8021cd0 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3308      	adds	r3, #8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	021b      	lsls	r3, r3, #8
 80087bc:	b29a      	uxth	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3308      	adds	r3, #8
 80087c4:	0a1b      	lsrs	r3, r3, #8
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	781a      	ldrb	r2, [r3, #0]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	4313      	orrs	r3, r2
 80087da:	81fb      	strh	r3, [r7, #14]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	885b      	ldrh	r3, [r3, #2]
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	801a      	strh	r2, [r3, #0]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	89fa      	ldrh	r2, [r7, #14]
 80087ea:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	333e      	adds	r3, #62	@ 0x3e
 80087f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 80087f2:	e066      	b.n	80088c2 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	3322      	adds	r3, #34	@ 0x22
 80087f8:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	b29b      	uxth	r3, r3
 8008802:	4413      	add	r3, r2
 8008804:	b29b      	uxth	r3, r3
 8008806:	3308      	adds	r3, #8
 8008808:	b29b      	uxth	r3, r3
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	b29a      	uxth	r2, r3
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	4619      	mov	r1, r3
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	440b      	add	r3, r1
 8008818:	3308      	adds	r3, #8
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	b29b      	uxth	r3, r3
 800881e:	4313      	orrs	r3, r2
 8008820:	b29a      	uxth	r2, r3
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	4a2a      	ldr	r2, [pc, #168]	@ (80088d4 <prepareReplyDNSMessage+0x1bc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d103      	bne.n	8008838 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	22ff      	movs	r2, #255	@ 0xff
 8008834:	721a      	strb	r2, [r3, #8]
 8008836:	e006      	b.n	8008846 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	2280      	movs	r2, #128	@ 0x80
 8008844:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800884e:	4b22      	ldr	r3, [pc, #136]	@ (80088d8 <prepareReplyDNSMessage+0x1c0>)
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	b21a      	sxth	r2, r3
 8008856:	4b20      	ldr	r3, [pc, #128]	@ (80088d8 <prepareReplyDNSMessage+0x1c0>)
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	0a1b      	lsrs	r3, r3, #8
 800885c:	b29b      	uxth	r3, r3
 800885e:	b21b      	sxth	r3, r3
 8008860:	4313      	orrs	r3, r2
 8008862:	b21b      	sxth	r3, r3
 8008864:	b29a      	uxth	r2, r3
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	2200      	movs	r2, #0
 800886e:	719a      	strb	r2, [r3, #6]
 8008870:	2200      	movs	r2, #0
 8008872:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8008874:	4b18      	ldr	r3, [pc, #96]	@ (80088d8 <prepareReplyDNSMessage+0x1c0>)
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	3301      	adds	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	4b16      	ldr	r3, [pc, #88]	@ (80088d8 <prepareReplyDNSMessage+0x1c0>)
 800887e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	3308      	adds	r3, #8
 8008886:	b29b      	uxth	r3, r3
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b29a      	uxth	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	0a1b      	lsrs	r3, r3, #8
 8008892:	b29b      	uxth	r3, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	b29a      	uxth	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	781a      	ldrb	r2, [r3, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	4313      	orrs	r3, r2
 80088a6:	81bb      	strh	r3, [r7, #12]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	885b      	ldrh	r3, [r3, #2]
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	801a      	strh	r2, [r3, #0]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	89ba      	ldrh	r2, [r7, #12]
 80088b6:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	4413      	add	r3, r2
 80088be:	3316      	adds	r3, #22
 80088c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c6:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 80088c8:	bf00      	nop
 80088ca:	3730      	adds	r7, #48	@ 0x30
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	08024134 	.word	0x08024134
 80088d4:	fb0000e0 	.word	0xfb0000e0
 80088d8:	20000fdc 	.word	0x20000fdc

080088dc <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	2b29      	cmp	r3, #41	@ 0x29
 80088ee:	d803      	bhi.n	80088f8 <ProcessICMPPacket+0x1c>
 80088f0:	2159      	movs	r1, #89	@ 0x59
 80088f2:	4811      	ldr	r0, [pc, #68]	@ (8008938 <ProcessICMPPacket+0x5c>)
 80088f4:	f7f8 feb0 	bl	8001658 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	2b29      	cmp	r3, #41	@ 0x29
 80088fe:	d915      	bls.n	800892c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800890c:	2b00      	cmp	r3, #0
 800890e:	d008      	beq.n	8008922 <ProcessICMPPacket+0x46>
 8008910:	2b08      	cmp	r3, #8
 8008912:	d10a      	bne.n	800892a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	68b8      	ldr	r0, [r7, #8]
 8008918:	f000 f810 	bl	800893c <prvProcessICMPEchoRequest>
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008920:	e004      	b.n	800892c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8008922:	68b8      	ldr	r0, [r7, #8]
 8008924:	f000 f836 	bl	8008994 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8008928:	e000      	b.n	800892c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800892a:	bf00      	nop
            }
        }

        return eReturn;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
    }
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	08024200 	.word	0x08024200

0800893c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3322      	adds	r3, #34	@ 0x22
 800894a:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	330e      	adds	r3, #14
 8008950:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2240      	movs	r2, #64	@ 0x40
 8008970:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2200      	movs	r2, #0
 8008976:	719a      	strb	r2, [r3, #6]
 8008978:	2200      	movs	r2, #0
 800897a:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2200      	movs	r2, #0
 8008980:	709a      	strb	r2, [r3, #2]
 8008982:	2200      	movs	r2, #0
 8008984:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8008986:	2302      	movs	r3, #2
    }
 8008988:	4618      	mov	r0, r3
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800899c:	2300      	movs	r3, #0
 800899e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7c1a      	ldrb	r2, [r3, #16]
 80089a4:	7c5b      	ldrb	r3, [r3, #17]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	4313      	orrs	r3, r2
 80089aa:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 80089ac:	89fb      	ldrh	r3, [r7, #14]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	b21a      	sxth	r2, r3
 80089b2:	89fb      	ldrh	r3, [r7, #14]
 80089b4:	0a1b      	lsrs	r3, r3, #8
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	4313      	orrs	r3, r2
 80089bc:	b21b      	sxth	r3, r3
 80089be:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 80089c0:	89fb      	ldrh	r3, [r7, #14]
 80089c2:	3b14      	subs	r3, #20
 80089c4:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 80089c6:	89fb      	ldrh	r3, [r7, #14]
 80089c8:	3b08      	subs	r3, #8
 80089ca:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	332a      	adds	r3, #42	@ 0x2a
 80089d4:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80089d6:	2300      	movs	r3, #0
 80089d8:	82bb      	strh	r3, [r7, #20]
 80089da:	e00c      	b.n	80089f6 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b78      	cmp	r3, #120	@ 0x78
 80089e2:	d002      	beq.n	80089ea <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 80089e4:	2302      	movs	r3, #2
 80089e6:	75fb      	strb	r3, [r7, #23]
                break;
 80089e8:	e009      	b.n	80089fe <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80089f0:	8abb      	ldrh	r3, [r7, #20]
 80089f2:	3301      	adds	r3, #1
 80089f4:	82bb      	strh	r3, [r7, #20]
 80089f6:	8aba      	ldrh	r2, [r7, #20]
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d3ee      	bcc.n	80089dc <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f8 fedb 	bl	80017c4 <vApplicationPingReplyHook>
    }
 8008a0e:	bf00      	nop
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8008a20:	f000 f90e 	bl	8008c40 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8008a24:	4802      	ldr	r0, [pc, #8]	@ (8008a30 <prvIPTask+0x18>)
 8008a26:	f018 ff37 	bl	8021898 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 8008a2a:	f000 f803 	bl	8008a34 <prvProcessIPEventsAndTimers>
 8008a2e:	e7fc      	b.n	8008a2a <prvIPTask+0x12>
 8008a30:	08024230 	.word	0x08024230

08008a34 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b08d      	sub	sp, #52	@ 0x34
 8008a38:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 8008a3a:	f000 ff09 	bl	8009850 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 8008a3e:	f000 fea7 	bl	8009790 <xCalculateSleepTime>
 8008a42:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8008a44:	4b7c      	ldr	r3, [pc, #496]	@ (8008c38 <prvProcessIPEventsAndTimers+0x204>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f107 0118 	add.w	r1, r7, #24
 8008a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fa fbd8 	bl	8003204 <xQueueReceive>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 8008a5a:	23ff      	movs	r3, #255	@ 0xff
 8008a5c:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 8008a5e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d00d      	beq.n	8008a84 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8008a68:	4b73      	ldr	r3, [pc, #460]	@ (8008c38 <prvProcessIPEventsAndTimers+0x204>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fa fda1 	bl	80035b4 <uxQueueSpacesAvailable>
 8008a72:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8008a74:	4b71      	ldr	r3, [pc, #452]	@ (8008c3c <prvProcessIPEventsAndTimers+0x208>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d202      	bcs.n	8008a84 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 8008a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8008c3c <prvProcessIPEventsAndTimers+0x208>)
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8008a84:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	2b0e      	cmp	r3, #14
 8008a8c:	f200 80ca 	bhi.w	8008c24 <prvProcessIPEventsAndTimers+0x1f0>
 8008a90:	a201      	add	r2, pc, #4	@ (adr r2, 8008a98 <prvProcessIPEventsAndTimers+0x64>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008c25 	.word	0x08008c25
 8008a9c:	08008ad5 	.word	0x08008ad5
 8008aa0:	08008adf 	.word	0x08008adf
 8008aa4:	08008ae9 	.word	0x08008ae9
 8008aa8:	08008af5 	.word	0x08008af5
 8008aac:	08008bbf 	.word	0x08008bbf
 8008ab0:	08008bc9 	.word	0x08008bc9
 8008ab4:	08008bdd 	.word	0x08008bdd
 8008ab8:	08008be5 	.word	0x08008be5
 8008abc:	08008c09 	.word	0x08008c09
 8008ac0:	08008aff 	.word	0x08008aff
 8008ac4:	08008bb5 	.word	0x08008bb5
 8008ac8:	08008bd3 	.word	0x08008bd3
 8008acc:	08008c25 	.word	0x08008c25
 8008ad0:	08008c0f 	.word	0x08008c0f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 f9cc 	bl	8009e74 <prvProcessNetworkDownEvent>
            break;
 8008adc:	e0a5      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f955 	bl	8008d90 <prvHandleEthernetPacket>
            break;
 8008ae6:	e0a0      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2101      	movs	r1, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f95d 	bl	8008dac <prvForwardTxPacket>
            break;
 8008af2:	e09a      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8008af4:	f7fe f94e 	bl	8006d94 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8008af8:	f002 fdb6 	bl	800b668 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 8008afc:	e095      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008b02:	2318      	movs	r3, #24
 8008b04:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	7a1b      	ldrb	r3, [r3, #8]
 8008b0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <prvProcessIPEventsAndTimers+0xe6>
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d01a      	beq.n	8008b4e <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008b18:	e02c      	b.n	8008b74 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b22:	061a      	lsls	r2, r3, #24
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b34:	0a1b      	lsrs	r3, r3, #8
 8008b36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b40:	0e1b      	lsrs	r3, r3, #24
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 8008b4c:	e012      	b.n	8008b74 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 8008b4e:	230a      	movs	r3, #10
 8008b50:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	3328      	adds	r3, #40	@ 0x28
 8008b56:	f107 0408 	add.w	r4, r7, #8
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	6859      	ldr	r1, [r3, #4]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	3328      	adds	r3, #40	@ 0x28
 8008b68:	2210      	movs	r2, #16
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f019 f9bc 	bl	8021eea <memset>
                        break;
 8008b72:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	b21a      	sxth	r2, r3
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	b21b      	sxth	r3, r3
 8008b86:	4313      	orrs	r3, r2
 8008b88:	b21b      	sxth	r3, r3
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	2200      	movs	r2, #0
 8008b92:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008b94:	4639      	mov	r1, r7
 8008b96:	2300      	movs	r3, #0
 8008b98:	2218      	movs	r2, #24
 8008b9a:	6a38      	ldr	r0, [r7, #32]
 8008b9c:	f005 fa32 	bl	800e004 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f043 0210 	orr.w	r2, r3, #16
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 8008bac:	6a38      	ldr	r0, [r7, #32]
 8008bae:	f006 f8d8 	bl	800ed62 <vSocketWakeUpUser>
            break;
 8008bb2:	e03a      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f005 fad8 	bl	800e16c <vSocketClose>
            break;
 8008bbc:	e035      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f00d f9b1 	bl	8015f28 <vProcessGeneratedUDPPacket>
            break;
 8008bc6:	e030      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f88c 	bl	8008ce8 <prvCallDHCP_RA_Handler>
            break;
 8008bd0:	e02b      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f007 fab3 	bl	8010140 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008bda:	e026      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008bdc:	2001      	movs	r0, #1
 8008bde:	f000 ffab 	bl	8009b38 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8008be2:	e022      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8008be8:	6a38      	ldr	r0, [r7, #32]
 8008bea:	f008 fbed 	bl	80113c8 <xTCPCheckNewClient>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d019      	beq.n	8008c28 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f043 0204 	orr.w	r2, r3, #4
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8008c00:	6a38      	ldr	r0, [r7, #32]
 8008c02:	f006 f8ae 	bl	800ed62 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8008c06:	e00f      	b.n	8008c28 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8008c08:	f007 f984 	bl	800ff14 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 8008c0c:	e00d      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8008c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7f9 ffb0 	bl	8002b7c <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 8008c1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c1e:	f7fd f92d 	bl	8005e7c <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008c22:	e002      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8008c24:	bf00      	nop
 8008c26:	e000      	b.n	8008c2a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8008c28:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 8008c2a:	f000 f833 	bl	8008c94 <prvIPTask_CheckPendingEvents>
}
 8008c2e:	bf00      	nop
 8008c30:	3734      	adds	r7, #52	@ 0x34
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd90      	pop	{r4, r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000fd8 	.word	0x20000fd8
 8008c3c:	20000014 	.word	0x20000014

08008c40 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8008c46:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008c4a:	f000 ff2b 	bl	8009aa4 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c8c <prvIPTask_Initialise+0x4c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	607b      	str	r3, [r7, #4]
 8008c54:	e005      	b.n	8008c62 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f8be 	bl	8008dd8 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c60:	607b      	str	r3, [r7, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f6      	bne.n	8008c56 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8008c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c6c:	f000 fee8 	bl	8009a40 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8008c70:	2000      	movs	r0, #0
 8008c72:	f000 ff9b 	bl	8009bac <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8008c76:	f7fe fa31 	bl	80070dc <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 8008c7a:	f7fe fb0f 	bl	800729c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 8008c7e:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <prvIPTask_Initialise+0x50>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20001364 	.word	0x20001364
 8008c90:	20000fe8 	.word	0x20000fe8

08008c94 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 8008c9a:	4b12      	ldr	r3, [pc, #72]	@ (8008ce4 <prvIPTask_CheckPendingEvents+0x50>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01c      	beq.n	8008cdc <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8008ca2:	4b10      	ldr	r3, [pc, #64]	@ (8008ce4 <prvIPTask_CheckPendingEvents+0x50>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8008ca8:	f004 f836 	bl	800cd18 <FreeRTOS_FirstNetworkInterface>
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	e012      	b.n	8008cd6 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7f1b      	ldrb	r3, [r3, #28]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d007      	beq.n	8008cce <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 f8d8 	bl	8009e74 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7f13      	ldrb	r3, [r2, #28]
 8008cc8:	f36f 0341 	bfc	r3, #1, #1
 8008ccc:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f004 f82e 	bl	800cd30 <FreeRTOS_NextNetworkInterface>
 8008cd4:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e9      	bne.n	8008cb0 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20000fe0 	.word	0x20000fe0

08008ce8 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d10b      	bne.n	8008d26 <prvCallDHCP_RA_Handler+0x3e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	2000      	movs	r0, #0
 8008d22:	f003 fecd 	bl	800cac0 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8008d34:	4b03      	ldr	r3, [pc, #12]	@ (8008d44 <FreeRTOS_GetIPTaskHandle+0x14>)
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20000fe4 	.word	0x20000fe4

08008d48 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008d56:	f003 0304 	and.w	r3, r3, #4
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8008d60:	2101      	movs	r1, #1
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f002 fa7e 	bl	800b264 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8008d6e:	f043 0310 	orr.w	r3, r3, #16
 8008d72:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8008d76:	2000      	movs	r0, #0
 8008d78:	f7f8 fca2 	bl	80016c0 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 8008d7c:	f7fe f9ae 	bl	80070dc <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8008d80:	f242 7010 	movw	r0, #10000	@ 0x2710
 8008d84:	f000 fe6a 	bl	8009a5c <vARPTimerReload>
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9c8 	bl	8009134 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d007      	beq.n	8008dce <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4798      	blx	r3
    }
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7f13      	ldrb	r3, [r2, #28]
 8008de8:	f36f 0300 	bfc	r3, #0, #1
 8008dec:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8008dee:	2300      	movs	r3, #0
 8008df0:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8008df6:	f107 030c 	add.w	r3, r7, #12
 8008dfa:	6979      	ldr	r1, [r7, #20]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f8df 	bl	8008fc0 <xSendEventStructToIPTask>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d008      	beq.n	8008e1a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7f13      	ldrb	r3, [r2, #28]
 8008e0c:	f043 0302 	orr.w	r3, r3, #2
 8008e10:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8008e12:	4b06      	ldr	r3, [pc, #24]	@ (8008e2c <FreeRTOS_NetworkDown+0x54>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8008e18:	e004      	b.n	8008e24 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	7f13      	ldrb	r3, [r2, #28]
 8008e1e:	f36f 0341 	bfc	r3, #1, #1
 8008e22:	7713      	strb	r3, [r2, #28]
}
 8008e24:	bf00      	nop
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000fe0 	.word	0x20000fe0

08008e30 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8008e3a:	f003 ff6d 	bl	800cd18 <FreeRTOS_FirstNetworkInterface>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <FreeRTOS_IPInit_Multi+0x1e>
 8008e44:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8008e48:	4823      	ldr	r0, [pc, #140]	@ (8008ed8 <FreeRTOS_IPInit_Multi+0xa8>)
 8008e4a:	f7f8 fc05 	bl	8001658 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8008e4e:	f001 f8cb 	bl	8009fe8 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8008e52:	2200      	movs	r2, #0
 8008e54:	2108      	movs	r1, #8
 8008e56:	2045      	movs	r0, #69	@ 0x45
 8008e58:	f7fa f822 	bl	8002ea0 <xQueueGenericCreate>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008edc <FreeRTOS_IPInit_Multi+0xac>)
 8008e60:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8008e62:	4b1e      	ldr	r3, [pc, #120]	@ (8008edc <FreeRTOS_IPInit_Multi+0xac>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d104      	bne.n	8008e74 <FreeRTOS_IPInit_Multi+0x44>
 8008e6a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8008e6e:	481a      	ldr	r0, [pc, #104]	@ (8008ed8 <FreeRTOS_IPInit_Multi+0xa8>)
 8008e70:	f7f8 fbf2 	bl	8001658 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8008e74:	4b19      	ldr	r3, [pc, #100]	@ (8008edc <FreeRTOS_IPInit_Multi+0xac>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d025      	beq.n	8008ec8 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8008e7c:	4b17      	ldr	r3, [pc, #92]	@ (8008edc <FreeRTOS_IPInit_Multi+0xac>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4917      	ldr	r1, [pc, #92]	@ (8008ee0 <FreeRTOS_IPInit_Multi+0xb0>)
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fa fcf8 	bl	8003878 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8008e88:	f00d fd8c 	bl	80169a4 <xNetworkBuffersInitialise>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d10e      	bne.n	8008eb0 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8008e92:	f004 fc7f 	bl	800d794 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8008e96:	4b13      	ldr	r3, [pc, #76]	@ (8008ee4 <FreeRTOS_IPInit_Multi+0xb4>)
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008ea4:	4910      	ldr	r1, [pc, #64]	@ (8008ee8 <FreeRTOS_IPInit_Multi+0xb8>)
 8008ea6:	4811      	ldr	r0, [pc, #68]	@ (8008eec <FreeRTOS_IPInit_Multi+0xbc>)
 8008ea8:	f7fa fd9c 	bl	80039e4 <xTaskCreate>
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	e00e      	b.n	8008ece <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8008eb0:	480f      	ldr	r0, [pc, #60]	@ (8008ef0 <FreeRTOS_IPInit_Multi+0xc0>)
 8008eb2:	f018 fcf1 	bl	8021898 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8008eb6:	4b09      	ldr	r3, [pc, #36]	@ (8008edc <FreeRTOS_IPInit_Multi+0xac>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fa fb9a 	bl	80035f4 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <FreeRTOS_IPInit_Multi+0xac>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	e002      	b.n	8008ece <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8008ec8:	480a      	ldr	r0, [pc, #40]	@ (8008ef4 <FreeRTOS_IPInit_Multi+0xc4>)
 8008eca:	f018 fce5 	bl	8021898 <lUDPLoggingPrintf>
    }

    return xReturn;
 8008ece:	687b      	ldr	r3, [r7, #4]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	08024244 	.word	0x08024244
 8008edc:	20000fd8 	.word	0x20000fd8
 8008ee0:	08024270 	.word	0x08024270
 8008ee4:	20000fe4 	.word	0x20000fe4
 8008ee8:	08024278 	.word	0x08024278
 8008eec:	08008a19 	.word	0x08008a19
 8008ef0:	08024280 	.word	0x08024280
 8008ef4:	080242bc 	.word	0x080242bc

08008ef8 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d023      	beq.n	8008f54 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d11b      	bne.n	8008f54 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	689a      	ldr	r2, [r3, #8]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8008f6e:	2000      	movs	r0, #0
 8008f70:	f003 ff72 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 8008f74:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff ffb6 	bl	8008ef8 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8008f8c:	bf00      	nop
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	6979      	ldr	r1, [r7, #20]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f805 	bl	8008fc0 <xSendEventStructToIPTask>
 8008fb6:	4603      	mov	r3, r0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8008fce:	f000 fb93 	bl	80096f8 <xIPIsNetworkTaskReady>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d107      	bne.n	8008fe8 <xSendEventStructToIPTask+0x28>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f993 3000 	ldrsb.w	r3, [r3]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e035      	b.n	8009054 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f993 3000 	ldrsb.w	r3, [r3]
 8008ff2:	2b06      	cmp	r3, #6
 8008ff4:	d10c      	bne.n	8009010 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	f000 fd9e 	bl	8009b38 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8008ffc:	4b18      	ldr	r3, [pc, #96]	@ (8009060 <xSendEventStructToIPTask+0xa0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f7fa fabd 	bl	8003580 <uxQueueMessagesWaiting>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800900c:	2300      	movs	r3, #0
 800900e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d01c      	beq.n	8009050 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009016:	f000 ff15 	bl	8009e44 <xIsCallingFromIPTask>
 800901a:	4603      	mov	r3, r0
 800901c:	2b01      	cmp	r3, #1
 800901e:	d104      	bne.n	800902a <xSendEventStructToIPTask+0x6a>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800902a:	4b0d      	ldr	r3, [pc, #52]	@ (8009060 <xSendEventStructToIPTask+0xa0>)
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	2300      	movs	r3, #0
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	6879      	ldr	r1, [r7, #4]
 8009034:	f7f9 fffe 	bl	8003034 <xQueueGenericSend>
 8009038:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d109      	bne.n	8009054 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f993 3000 	ldrsb.w	r3, [r3]
 8009046:	4619      	mov	r1, r3
 8009048:	4806      	ldr	r0, [pc, #24]	@ (8009064 <xSendEventStructToIPTask+0xa4>)
 800904a:	f018 fc25 	bl	8021898 <lUDPLoggingPrintf>
 800904e:	e001      	b.n	8009054 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009054:	697b      	ldr	r3, [r7, #20]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000fd8 	.word	0x20000fd8
 8009064:	08024300 	.word	0x08024300

08009068 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009070:	2301      	movs	r3, #1
 8009072:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009074:	2300      	movs	r3, #0
 8009076:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009082:	2300      	movs	r3, #0
 8009084:	75fb      	strb	r3, [r7, #23]
 8009086:	e032      	b.n	80090ee <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f003 ff81 	bl	800cf98 <FreeRTOS_FindEndPointOnMAC>
 8009096:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 800909e:	2301      	movs	r3, #1
 80090a0:	75fb      	strb	r3, [r7, #23]
 80090a2:	e024      	b.n	80090ee <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	2206      	movs	r2, #6
 80090a8:	4619      	mov	r1, r3
 80090aa:	4820      	ldr	r0, [pc, #128]	@ (800912c <eConsiderFrameForProcessing+0xc4>)
 80090ac:	f019 fda5 	bl	8022bfa <memcmp>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d102      	bne.n	80090bc <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
 80090ba:	e018      	b.n	80090ee <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2206      	movs	r2, #6
 80090c0:	4619      	mov	r1, r3
 80090c2:	481b      	ldr	r0, [pc, #108]	@ (8009130 <eConsiderFrameForProcessing+0xc8>)
 80090c4:	f019 fd99 	bl	8022bfa <memcmp>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d102      	bne.n	80090d4 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 80090ce:	2301      	movs	r3, #1
 80090d0:	75fb      	strb	r3, [r7, #23]
 80090d2:	e00c      	b.n	80090ee <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b33      	cmp	r3, #51	@ 0x33
 80090da:	d106      	bne.n	80090ea <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 80090e0:	2b33      	cmp	r3, #51	@ 0x33
 80090e2:	d102      	bne.n	80090ea <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 80090e4:	2301      	movs	r3, #1
 80090e6:	75fb      	strb	r3, [r7, #23]
 80090e8:	e001      	b.n	80090ee <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 80090ea:	2300      	movs	r3, #0
 80090ec:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d115      	bne.n	8009120 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	7b1a      	ldrb	r2, [r3, #12]
 80090f8:	7b5b      	ldrb	r3, [r3, #13]
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	4313      	orrs	r3, r2
 80090fe:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009100:	897b      	ldrh	r3, [r7, #10]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	b21a      	sxth	r2, r3
 8009106:	897b      	ldrh	r3, [r7, #10]
 8009108:	0a1b      	lsrs	r3, r3, #8
 800910a:	b29b      	uxth	r3, r3
 800910c:	b21b      	sxth	r3, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	b21b      	sxth	r3, r3
 8009112:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009114:	897b      	ldrh	r3, [r7, #10]
 8009116:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800911a:	d801      	bhi.n	8009120 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 800911c:	2300      	movs	r3, #0
 800911e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	08026f30 	.word	0x08026f30
 8009130:	08026f20 	.word	0x08026f20

08009134 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d03d      	beq.n	80091c4 <prvProcessEthernetPacket+0x90>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914c:	2b00      	cmp	r3, #0
 800914e:	d039      	beq.n	80091c4 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009154:	2b0d      	cmp	r3, #13
 8009156:	d934      	bls.n	80091c2 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009160:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	899b      	ldrh	r3, [r3, #12]
 8009166:	b29b      	uxth	r3, r3
 8009168:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800916c:	4293      	cmp	r3, r2
 800916e:	d015      	beq.n	800919c <prvProcessEthernetPacket+0x68>
 8009170:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009174:	4293      	cmp	r3, r2
 8009176:	dc21      	bgt.n	80091bc <prvProcessEthernetPacket+0x88>
 8009178:	2b08      	cmp	r3, #8
 800917a:	d00f      	beq.n	800919c <prvProcessEthernetPacket+0x68>
 800917c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009180:	d11c      	bne.n	80091bc <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009186:	2b29      	cmp	r3, #41	@ 0x29
 8009188:	d905      	bls.n	8009196 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7fc ffe6 	bl	800615c <eARPProcessPacket>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009194:	e016      	b.n	80091c4 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
                        break;
 800919a:	e013      	b.n	80091c4 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a0:	2b21      	cmp	r3, #33	@ 0x21
 80091a2:	d908      	bls.n	80091b6 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f8c6 	bl	800933c <prvProcessIPPacket>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80091b4:	e006      	b.n	80091c4 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
                    break;
 80091ba:	e003      	b.n	80091c4 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 80091c0:	e000      	b.n	80091c4 <prvProcessEthernetPacket+0x90>
            break;
 80091c2:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d00b      	beq.n	80091e2 <prvProcessEthernetPacket+0xae>
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	dc19      	bgt.n	8009202 <prvProcessEthernetPacket+0xce>
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d002      	beq.n	80091d8 <prvProcessEthernetPacket+0xa4>
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d019      	beq.n	800920a <prvProcessEthernetPacket+0xd6>
 80091d6:	e014      	b.n	8009202 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80091d8:	2101      	movs	r1, #1
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f9a4 	bl	8009528 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 80091e0:	e014      	b.n	800920c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 80091e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <prvProcessEthernetPacket+0xe0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d107      	bne.n	80091fa <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 80091ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009214 <prvProcessEthernetPacket+0xe0>)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 80091f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80091f4:	f000 fc06 	bl	8009a04 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 80091f8:	e008      	b.n	800920c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f00d fca4 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009200:	e004      	b.n	800920c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f00d fca0 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009208:	e000      	b.n	800920c <prvProcessEthernetPacket+0xd8>
            break;
 800920a:	bf00      	nop
    }
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000fd4 	.word	0x20000fd4

08009218 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009218:	b5b0      	push	{r4, r5, r7, lr}
 800921a:	b08c      	sub	sp, #48	@ 0x30
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009220:	2300      	movs	r3, #0
 8009222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	3322      	adds	r3, #34	@ 0x22
 8009234:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa76 	bl	8009728 <uxIPHeaderSizePacket>
 800923c:	4603      	mov	r3, r0
 800923e:	3316      	adds	r3, #22
 8009240:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	899b      	ldrh	r3, [r3, #12]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800924c:	4293      	cmp	r3, r2
 800924e:	d105      	bne.n	800925c <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	3336      	adds	r3, #54	@ 0x36
 8009256:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 800925c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925e:	889b      	ldrh	r3, [r3, #4]
 8009260:	b29b      	uxth	r3, r3
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	b21a      	sxth	r2, r3
 8009266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009268:	889b      	ldrh	r3, [r3, #4]
 800926a:	b29b      	uxth	r3, r3
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	b29b      	uxth	r3, r3
 8009270:	b21b      	sxth	r3, r3
 8009272:	4313      	orrs	r3, r2
 8009274:	b21b      	sxth	r3, r3
 8009276:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009278:	8b7b      	ldrh	r3, [r7, #26]
 800927a:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	899b      	ldrh	r3, [r3, #12]
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b08      	cmp	r3, #8
 8009284:	d11a      	bne.n	80092bc <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009286:	8b7c      	ldrh	r4, [r7, #26]
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	8a1b      	ldrh	r3, [r3, #16]
 800928c:	b29b      	uxth	r3, r3
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	b21a      	sxth	r2, r3
 8009292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009294:	8a1b      	ldrh	r3, [r3, #16]
 8009296:	b29b      	uxth	r3, r3
 8009298:	0a1b      	lsrs	r3, r3, #8
 800929a:	b29b      	uxth	r3, r3
 800929c:	b21b      	sxth	r3, r3
 800929e:	4313      	orrs	r3, r2
 80092a0:	b21b      	sxth	r3, r3
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	461d      	mov	r5, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fa3e 	bl	8009728 <uxIPHeaderSizePacket>
 80092ac:	4603      	mov	r3, r0
 80092ae:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 80092b0:	429c      	cmp	r4, r3
 80092b2:	d903      	bls.n	80092bc <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 80092b4:	2300      	movs	r3, #0
 80092b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80092ba:	e038      	b.n	800932e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c0:	6a3a      	ldr	r2, [r7, #32]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d833      	bhi.n	800932e <prvProcessUDPPacket+0x116>
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b07      	cmp	r3, #7
 80092ca:	d930      	bls.n	800932e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	3b08      	subs	r3, #8
 80092da:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d904      	bls.n	80092ee <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fa:	f8d3 201a 	ldr.w	r2, [r3, #26]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	885b      	ldrh	r3, [r3, #2]
 8009306:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009308:	f107 0208 	add.w	r2, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f00c fe2a 	bl	8015f68 <xProcessReceivedUDPPacket>
 8009314:	4603      	mov	r3, r0
 8009316:	2b01      	cmp	r3, #1
 8009318:	d103      	bne.n	8009322 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800931a:	2303      	movs	r3, #3
 800931c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009320:	e005      	b.n	800932e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d102      	bne.n	800932e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009328:	2304      	movs	r3, #4
 800932a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800932e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009332:	4618      	mov	r0, r3
 8009334:	3730      	adds	r7, #48	@ 0x30
 8009336:	46bd      	mov	sp, r7
 8009338:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800933c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009346:	2314      	movs	r3, #20
 8009348:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	330e      	adds	r3, #14
 8009356:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	899b      	ldrh	r3, [r3, #12]
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b08      	cmp	r3, #8
 8009360:	d023      	beq.n	80093aa <prvProcessIPPacket+0x6e>
 8009362:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009366:	4293      	cmp	r3, r2
 8009368:	d144      	bne.n	80093f4 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936e:	2b35      	cmp	r3, #53	@ 0x35
 8009370:	d802      	bhi.n	8009378 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8009372:	2300      	movs	r3, #0
 8009374:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8009376:	e043      	b.n	8009400 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	330e      	adds	r3, #14
 800937e:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 8009380:	2328      	movs	r3, #40	@ 0x28
 8009382:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	799b      	ldrb	r3, [r3, #6]
 8009388:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	330e      	adds	r3, #14
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f001 fb6c 	bl	800aa70 <prvAllowIPPacketIPv6>
 8009398:	4603      	mov	r3, r0
 800939a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a0:	3b06      	subs	r3, #6
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	7812      	ldrb	r2, [r2, #0]
 80093a6:	701a      	strb	r2, [r3, #0]
                break;
 80093a8:	e02a      	b.n	8009400 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80093b8:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093be:	3b0e      	subs	r3, #14
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d802      	bhi.n	80093cc <prvProcessIPPacket+0x90>
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b13      	cmp	r3, #19
 80093ca:	d802      	bhi.n	80093d2 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 80093cc:	2300      	movs	r3, #0
 80093ce:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 80093d0:	e016      	b.n	8009400 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	7ddb      	ldrb	r3, [r3, #23]
 80093d6:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f81b 	bl	800a418 <prvAllowIPPacketIPv4>
 80093e2:	4603      	mov	r3, r0
 80093e4:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ea:	3b06      	subs	r3, #6
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	701a      	strb	r2, [r3, #0]
                   break;
 80093f2:	e005      	b.n	8009400 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 80093f4:	2300      	movs	r3, #0
 80093f6:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 80093f8:	484a      	ldr	r0, [pc, #296]	@ (8009524 <prvProcessIPPacket+0x1e8>)
 80093fa:	f018 fa4d 	bl	8021898 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 80093fe:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009400:	7ffb      	ldrb	r3, [r7, #31]
 8009402:	2b01      	cmp	r3, #1
 8009404:	f040 8088 	bne.w	8009518 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	899b      	ldrh	r3, [r3, #12]
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b08      	cmp	r3, #8
 8009410:	d004      	beq.n	800941c <prvProcessIPPacket+0xe0>
 8009412:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009416:	4293      	cmp	r3, r2
 8009418:	d009      	beq.n	800942e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800941a:	e020      	b.n	800945e <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	2b14      	cmp	r3, #20
 8009420:	d91a      	bls.n	8009458 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009422:	6838      	ldr	r0, [r7, #0]
 8009424:	f001 f852 	bl	800a4cc <prvCheckIP4HeaderOptions>
 8009428:	4603      	mov	r3, r0
 800942a:	77fb      	strb	r3, [r7, #31]
                    break;
 800942c:	e014      	b.n	8009458 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f001 fb3a 	bl	800aaac <xGetExtensionOrder>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	dd0e      	ble.n	800945c <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800943e:	2101      	movs	r1, #1
 8009440:	6838      	ldr	r0, [r7, #0]
 8009442:	f001 fb99 	bl	800ab78 <eHandleIPv6ExtensionHeaders>
 8009446:	4603      	mov	r3, r0
 8009448:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800944a:	7ffb      	ldrb	r3, [r7, #31]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	799b      	ldrb	r3, [r3, #6]
 8009454:	75fb      	strb	r3, [r7, #23]
                    break;
 8009456:	e001      	b.n	800945c <prvProcessIPPacket+0x120>
                    break;
 8009458:	bf00      	nop
 800945a:	e000      	b.n	800945e <prvProcessIPPacket+0x122>
                    break;
 800945c:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800945e:	7ffb      	ldrb	r3, [r7, #31]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d059      	beq.n	8009518 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	2b11      	cmp	r3, #17
 8009468:	d026      	beq.n	80094b8 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 800946a:	6838      	ldr	r0, [r7, #0]
 800946c:	f7fd f918 	bl	80066a0 <xCheckRequiresARPResolution>
 8009470:	4603      	mov	r3, r0
 8009472:	2b01      	cmp	r3, #1
 8009474:	d102      	bne.n	800947c <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8009476:	2304      	movs	r3, #4
 8009478:	77fb      	strb	r3, [r7, #31]
 800947a:	e01d      	b.n	80094b8 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	899b      	ldrh	r3, [r3, #12]
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b08      	cmp	r3, #8
 8009484:	d00e      	beq.n	80094a4 <prvProcessIPPacket+0x168>
 8009486:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800948a:	4293      	cmp	r3, r2
 800948c:	d113      	bne.n	80094b6 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	1d98      	adds	r0, r3, #6
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f103 0108 	add.w	r1, r3, #8
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949c:	461a      	mov	r2, r3
 800949e:	f002 f843 	bl	800b528 <vNDRefreshCacheEntry>
                                break;
 80094a2:	e009      	b.n	80094b8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	1d9a      	adds	r2, r3, #6
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4619      	mov	r1, r3
 80094ae:	4610      	mov	r0, r2
 80094b0:	f7fd f9d6 	bl	8006860 <vARPRefreshCacheEntryAge>
                                break;
 80094b4:	e000      	b.n	80094b8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 80094b6:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 80094b8:	7ffb      	ldrb	r3, [r7, #31]
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d02c      	beq.n	8009518 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80094c2:	d010      	beq.n	80094e6 <prvProcessIPPacket+0x1aa>
 80094c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80094c6:	dc23      	bgt.n	8009510 <prvProcessIPPacket+0x1d4>
 80094c8:	2b11      	cmp	r3, #17
 80094ca:	d012      	beq.n	80094f2 <prvProcessIPPacket+0x1b6>
 80094cc:	2b11      	cmp	r3, #17
 80094ce:	dc1f      	bgt.n	8009510 <prvProcessIPPacket+0x1d4>
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d002      	beq.n	80094da <prvProcessIPPacket+0x19e>
 80094d4:	2b06      	cmp	r3, #6
 80094d6:	d012      	beq.n	80094fe <prvProcessIPPacket+0x1c2>
 80094d8:	e01a      	b.n	8009510 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 80094da:	6838      	ldr	r0, [r7, #0]
 80094dc:	f7ff f9fe 	bl	80088dc <ProcessICMPPacket>
 80094e0:	4603      	mov	r3, r0
 80094e2:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 80094e4:	e018      	b.n	8009518 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 80094e6:	6838      	ldr	r0, [r7, #0]
 80094e8:	f002 fb6e 	bl	800bbc8 <prvProcessICMPMessage_IPv6>
 80094ec:	4603      	mov	r3, r0
 80094ee:	77fb      	strb	r3, [r7, #31]
                            break;
 80094f0:	e012      	b.n	8009518 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 80094f2:	6838      	ldr	r0, [r7, #0]
 80094f4:	f7ff fe90 	bl	8009218 <prvProcessUDPPacket>
 80094f8:	4603      	mov	r3, r0
 80094fa:	77fb      	strb	r3, [r7, #31]
                        break;
 80094fc:	e00c      	b.n	8009518 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 80094fe:	6838      	ldr	r0, [r7, #0]
 8009500:	f007 fda0 	bl	8011044 <xProcessReceivedTCPPacket>
 8009504:	4603      	mov	r3, r0
 8009506:	2b01      	cmp	r3, #1
 8009508:	d105      	bne.n	8009516 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800950a:	2303      	movs	r3, #3
 800950c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800950e:	e002      	b.n	8009516 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009510:	2300      	movs	r3, #0
 8009512:	77fb      	strb	r3, [r7, #31]
                        break;
 8009514:	e000      	b.n	8009518 <prvProcessIPPacket+0x1dc>
                                break;
 8009516:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009518:	7ffb      	ldrb	r3, [r7, #31]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3720      	adds	r7, #32
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	0802432c 	.word	0x0802432c

08009528 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08e      	sub	sp, #56	@ 0x38
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009536:	2b3b      	cmp	r3, #59	@ 0x3b
 8009538:	d818      	bhi.n	800956c <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	4619      	mov	r1, r3
 8009540:	486a      	ldr	r0, [pc, #424]	@ (80096ec <vReturnEthernetFrame+0x1c4>)
 8009542:	f018 f9a9 	bl	8021898 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	637b      	str	r3, [r7, #52]	@ 0x34
 800954c:	e008      	b.n	8009560 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009554:	4413      	add	r3, r2
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800955a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955c:	3301      	adds	r3, #1
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	2b3b      	cmp	r3, #59	@ 0x3b
 8009564:	ddf3      	ble.n	800954e <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	223c      	movs	r2, #60	@ 0x3c
 800956a:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d111      	bne.n	8009596 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fb87 	bl	8009c8c <pxDuplicateNetworkBufferWithDescriptor>
 800957e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d005      	beq.n	8009592 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009586:	2301      	movs	r3, #1
 8009588:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009590:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8009592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009594:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 80a3 	beq.w	80096e4 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 80095a4:	2300      	movs	r3, #0
 80095a6:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d12f      	bne.n	8009614 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095ba:	061a      	lsls	r2, r3, #24
 80095bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095be:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095c8:	431a      	orrs	r2, r3
 80095ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095cc:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095d0:	0a1b      	lsrs	r3, r3, #8
 80095d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095d6:	431a      	orrs	r2, r3
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80095de:	0e1b      	lsrs	r3, r3, #24
 80095e0:	4313      	orrs	r3, r2
 80095e2:	4619      	mov	r1, r3
 80095e4:	4842      	ldr	r0, [pc, #264]	@ (80096f0 <vReturnEthernetFrame+0x1c8>)
 80095e6:	f018 f957 	bl	8021898 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ee:	899b      	ldrh	r3, [r3, #12]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d003      	beq.n	80095fe <vReturnEthernetFrame+0xd6>
 80095f6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80095fa:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 80095fc:	e00a      	b.n	8009614 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 80095fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009600:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009604:	2107      	movs	r1, #7
 8009606:	4618      	mov	r0, r3
 8009608:	f003 fcfe 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 800960c:	4602      	mov	r2, r0
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009612:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009618:	2b00      	cmp	r3, #0
 800961a:	d063      	beq.n	80096e4 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009620:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009624:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	899b      	ldrh	r3, [r3, #12]
 800962a:	b29b      	uxth	r3, r3
 800962c:	2b08      	cmp	r3, #8
 800962e:	d11c      	bne.n	800966a <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009632:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009636:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800963e:	f107 0114 	add.w	r1, r7, #20
 8009642:	f107 0310 	add.w	r3, r7, #16
 8009646:	4618      	mov	r0, r3
 8009648:	f7fd fa54 	bl	8006af4 <eARPGetCacheEntry>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 8009652:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009656:	2b01      	cmp	r3, #1
 8009658:	d103      	bne.n	8009662 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800965a:	f107 0314 	add.w	r3, r7, #20
 800965e:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8009660:	e007      	b.n	8009672 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009664:	3306      	adds	r3, #6
 8009666:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 8009668:	e003      	b.n	8009672 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800966a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966c:	3306      	adds	r3, #6
 800966e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8009670:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8009672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009674:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8009676:	2206      	movs	r2, #6
 8009678:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800967a:	69f8      	ldr	r0, [r7, #28]
 800967c:	f018 fb28 	bl	8021cd0 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009684:	33e8      	adds	r3, #232	@ 0xe8
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968a:	3306      	adds	r3, #6
 800968c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800968e:	2206      	movs	r2, #6
 8009690:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009692:	69f8      	ldr	r0, [r7, #28]
 8009694:	f018 fb1c 	bl	8021cd0 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8009698:	f000 fbd4 	bl	8009e44 <xIsCallingFromIPTask>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d106      	bne.n	80096b0 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096ac:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 80096ae:	e019      	b.n	80096e4 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d011      	beq.n	80096da <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 80096b6:	2302      	movs	r3, #2
 80096b8:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	f04f 31ff 	mov.w	r1, #4294967295
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fc7a 	bl	8008fc0 <xSendEventStructToIPTask>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d108      	bne.n	80096e4 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f00d fa38 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
}
 80096d8:	e004      	b.n	80096e4 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 80096da:	f640 019f 	movw	r1, #2207	@ 0x89f
 80096de:	4805      	ldr	r0, [pc, #20]	@ (80096f4 <vReturnEthernetFrame+0x1cc>)
 80096e0:	f7f7 ffba 	bl	8001658 <vAssertCalled>
}
 80096e4:	bf00      	nop
 80096e6:	3738      	adds	r7, #56	@ 0x38
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	08024358 	.word	0x08024358
 80096f0:	0802437c 	.word	0x0802437c
 80096f4:	08024244 	.word	0x08024244

080096f8 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 80096fc:	4b03      	ldr	r3, [pc, #12]	@ (800970c <xIPIsNetworkTaskReady+0x14>)
 80096fe:	681b      	ldr	r3, [r3, #0]
}
 8009700:	4618      	mov	r0, r3
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000fe8 	.word	0x20000fe8

08009710 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8009714:	4b03      	ldr	r3, [pc, #12]	@ (8009724 <uxGetMinimumIPQueueSpace+0x14>)
 8009716:	681b      	ldr	r3, [r3, #0]
    }
 8009718:	4618      	mov	r0, r3
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000014 	.word	0x20000014

08009728 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009734:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	899b      	ldrh	r3, [r3, #12]
 800973a:	b29b      	uxth	r3, r3
 800973c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009740:	4293      	cmp	r3, r2
 8009742:	d102      	bne.n	800974a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009744:	2328      	movs	r3, #40	@ 0x28
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	e001      	b.n	800974e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800974a:	2314      	movs	r3, #20
 800974c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800974e:	68fb      	ldr	r3, [r7, #12]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d009      	beq.n	800977e <uxIPHeaderSizeSocket+0x22>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	7a1b      	ldrb	r3, [r3, #8]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009778:	2328      	movs	r3, #40	@ 0x28
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	e001      	b.n	8009782 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800977e:	2314      	movs	r3, #20
 8009780:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009782:	68fb      	ldr	r3, [r7, #12]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009796:	f242 7310 	movw	r3, #10000	@ 0x2710
 800979a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800979c:	4b28      	ldr	r3, [pc, #160]	@ (8009840 <xCalculateSleepTime+0xb0>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 80097aa:	4b25      	ldr	r3, [pc, #148]	@ (8009840 <xCalculateSleepTime+0xb0>)
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d902      	bls.n	80097ba <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 80097b4:	4b22      	ldr	r3, [pc, #136]	@ (8009840 <xCalculateSleepTime+0xb0>)
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80097ba:	4b22      	ldr	r3, [pc, #136]	@ (8009844 <xCalculateSleepTime+0xb4>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 80097c0:	e015      	b.n	80097ee <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d009      	beq.n	80097e6 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d903      	bls.n	80097e6 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80097e4:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80097ec:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 80097f4:	4b14      	ldr	r3, [pc, #80]	@ (8009848 <xCalculateSleepTime+0xb8>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009802:	4b11      	ldr	r3, [pc, #68]	@ (8009848 <xCalculateSleepTime+0xb8>)
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	d902      	bls.n	8009812 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800980c:	4b0e      	ldr	r3, [pc, #56]	@ (8009848 <xCalculateSleepTime+0xb8>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009812:	4b0e      	ldr	r3, [pc, #56]	@ (800984c <xCalculateSleepTime+0xbc>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b00      	cmp	r3, #0
 800981e:	d007      	beq.n	8009830 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 8009820:	4b0a      	ldr	r3, [pc, #40]	@ (800984c <xCalculateSleepTime+0xbc>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	429a      	cmp	r2, r3
 8009828:	d902      	bls.n	8009830 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800982a:	4b08      	ldr	r3, [pc, #32]	@ (800984c <xCalculateSleepTime+0xbc>)
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 8009830:	687b      	ldr	r3, [r7, #4]
}
 8009832:	4618      	mov	r0, r3
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	20001004 	.word	0x20001004
 8009844:	20001360 	.word	0x20001360
 8009848:	20001018 	.word	0x20001018
 800984c:	2000102c 	.word	0x2000102c

08009850 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009856:	484f      	ldr	r0, [pc, #316]	@ (8009994 <vCheckNetworkTimers+0x144>)
 8009858:	f000 f932 	bl	8009ac0 <prvIPTimerCheck>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8009862:	2003      	movs	r0, #3
 8009864:	f7ff fb96 	bl	8008f94 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 8009868:	484b      	ldr	r0, [pc, #300]	@ (8009998 <vCheckNetworkTimers+0x148>)
 800986a:	f000 f929 	bl	8009ac0 <prvIPTimerCheck>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00e      	beq.n	8009892 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 8009874:	4b49      	ldr	r3, [pc, #292]	@ (800999c <vCheckNetworkTimers+0x14c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800987c:	2000      	movs	r0, #0
 800987e:	f000 f995 	bl	8009bac <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8009882:	4b46      	ldr	r3, [pc, #280]	@ (800999c <vCheckNetworkTimers+0x14c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f00d f95e 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800988c:	4b43      	ldr	r3, [pc, #268]	@ (800999c <vCheckNetworkTimers+0x14c>)
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009892:	4b43      	ldr	r3, [pc, #268]	@ (80099a0 <vCheckNetworkTimers+0x150>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 8009898:	e01f      	b.n	80098da <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	33f8      	adds	r3, #248	@ 0xf8
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f90e 	bl	8009ac0 <prvIPTimerCheck>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d013      	beq.n	80098d2 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00b      	beq.n	80098d2 <vCheckNetworkTimers+0x82>
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80098c0:	f003 0302 	and.w	r3, r3, #2
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 80098ca:	6939      	ldr	r1, [r7, #16]
 80098cc:	2000      	movs	r0, #0
 80098ce:	f003 f8f7 	bl	800cac0 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80098d8:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1dc      	bne.n	800989a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 80098e0:	4830      	ldr	r0, [pc, #192]	@ (80099a4 <vCheckNetworkTimers+0x154>)
 80098e2:	f000 f8ed 	bl	8009ac0 <prvIPTimerCheck>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 80098ec:	2000      	movs	r0, #0
 80098ee:	f7fd fff9 	bl	80078e4 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 80098f2:	4b2d      	ldr	r3, [pc, #180]	@ (80099a8 <vCheckNetworkTimers+0x158>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f9 fe42 	bl	8003580 <uxQueueMessagesWaiting>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d102      	bne.n	8009908 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009902:	2301      	movs	r3, #1
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	e001      	b.n	800990c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800990c:	4827      	ldr	r0, [pc, #156]	@ (80099ac <vCheckNetworkTimers+0x15c>)
 800990e:	f000 f8d7 	bl	8009ac0 <prvIPTimerCheck>
 8009912:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800991a:	2301      	movs	r3, #1
 800991c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d007      	beq.n	8009934 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f005 ff3f 	bl	800f7a8 <xTCPTimerCheck>
 800992a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	481f      	ldr	r0, [pc, #124]	@ (80099ac <vCheckNetworkTimers+0x15c>)
 8009930:	f000 f844 	bl	80099bc <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 8009934:	2000      	movs	r0, #0
 8009936:	f006 fe6f 	bl	8010618 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800993a:	2000      	movs	r0, #0
 800993c:	f006 fe88 	bl	8010650 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 8009940:	4b1b      	ldr	r3, [pc, #108]	@ (80099b0 <vCheckNetworkTimers+0x160>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d120      	bne.n	800998a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 8009948:	481a      	ldr	r0, [pc, #104]	@ (80099b4 <vCheckNetworkTimers+0x164>)
 800994a:	f000 f8b9 	bl	8009ac0 <prvIPTimerCheck>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01a      	beq.n	800998a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 8009954:	2301      	movs	r3, #1
 8009956:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009958:	4b17      	ldr	r3, [pc, #92]	@ (80099b8 <vCheckNetworkTimers+0x168>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e00e      	b.n	800997e <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	7f1b      	ldrb	r3, [r3, #28]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800996e:	2300      	movs	r3, #0
 8009970:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 8009972:	6978      	ldr	r0, [r7, #20]
 8009974:	f7ff fa30 	bl	8008dd8 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1ed      	bne.n	8009960 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f971 	bl	8009c6c <vSetAllNetworksUp>
        }
    }
}
 800998a:	bf00      	nop
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20001004 	.word	0x20001004
 8009998:	20000ff0 	.word	0x20000ff0
 800999c:	20000fd4 	.word	0x20000fd4
 80099a0:	20001360 	.word	0x20001360
 80099a4:	2000102c 	.word	0x2000102c
 80099a8:	20000fd8 	.word	0x20000fd8
 80099ac:	20001018 	.word	0x20001018
 80099b0:	20000fec 	.word	0x20000fec
 80099b4:	20001040 	.word	0x20001040
 80099b8:	20001364 	.word	0x20001364

080099bc <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fa febe 	bl	800474c <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d105      	bne.n	80099e8 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7813      	ldrb	r3, [r2, #0]
 80099e0:	f043 0302 	orr.w	r3, r3, #2
 80099e4:	7013      	strb	r3, [r2, #0]
 80099e6:	e004      	b.n	80099f2 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7813      	ldrb	r3, [r2, #0]
 80099ec:	f36f 0341 	bfc	r3, #1, #1
 80099f0:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	7813      	ldrb	r3, [r2, #0]
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	7013      	strb	r3, [r2, #0]
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	4803      	ldr	r0, [pc, #12]	@ (8009a1c <vIPTimerStartARPResolution+0x18>)
 8009a10:	f7ff ffd4 	bl	80099bc <prvIPTimerStart>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20000ff0 	.word	0x20000ff0

08009a20 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff ffc2 	bl	80099bc <prvIPTimerStart>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4803      	ldr	r0, [pc, #12]	@ (8009a58 <vTCPTimerReload+0x18>)
 8009a4c:	f7ff ffe8 	bl	8009a20 <prvIPTimerReload>
    }
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20001018 	.word	0x20001018

08009a5c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	4803      	ldr	r0, [pc, #12]	@ (8009a74 <vARPTimerReload+0x18>)
 8009a68:	f7ff ffda 	bl	8009a20 <prvIPTimerReload>
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20001004 	.word	0x20001004

08009a78 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	4806      	ldr	r0, [pc, #24]	@ (8009aa0 <vDHCP_RATimerReload+0x28>)
 8009a86:	f017 ff07 	bl	8021898 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	33f8      	adds	r3, #248	@ 0xf8
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff ffc5 	bl	8009a20 <prvIPTimerReload>
    }
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	080243b0 	.word	0x080243b0

08009aa4 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4803      	ldr	r0, [pc, #12]	@ (8009abc <vNetworkTimerReload+0x18>)
 8009ab0:	f7ff ffb6 	bl	8009a20 <prvIPTimerReload>
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20001040 	.word	0x20001040

08009ac0 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d102      	bne.n	8009adc <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	e028      	b.n	8009b2e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10f      	bne.n	8009b0a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	330c      	adds	r3, #12
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7fa fe61 	bl	80047bc <xTaskCheckForTimeOut>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7813      	ldrb	r3, [r2, #0]
 8009b04:	f043 0302 	orr.w	r3, r3, #2
 8009b08:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d008      	beq.n	8009b2a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff ff4c 	bl	80099bc <prvIPTimerStart>
            xReturn = pdTRUE;
 8009b24:	2301      	movs	r3, #1
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e001      	b.n	8009b2e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 8009b40:	4a0c      	ldr	r2, [pc, #48]	@ (8009b74 <vIPSetTCPTimerExpiredState+0x3c>)
 8009b42:	7813      	ldrb	r3, [r2, #0]
 8009b44:	f043 0301 	orr.w	r3, r3, #1
 8009b48:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009b50:	4a08      	ldr	r2, [pc, #32]	@ (8009b74 <vIPSetTCPTimerExpiredState+0x3c>)
 8009b52:	7813      	ldrb	r3, [r2, #0]
 8009b54:	f043 0302 	orr.w	r3, r3, #2
 8009b58:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 8009b5a:	e004      	b.n	8009b66 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 8009b5c:	4a05      	ldr	r2, [pc, #20]	@ (8009b74 <vIPSetTCPTimerExpiredState+0x3c>)
 8009b5e:	7813      	ldrb	r3, [r2, #0]
 8009b60:	f36f 0341 	bfc	r3, #1, #1
 8009b64:	7013      	strb	r3, [r2, #0]
    }
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20001018 	.word	0x20001018

08009b78 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 8009b86:	4a08      	ldr	r2, [pc, #32]	@ (8009ba8 <vIPSetARPTimerEnableState+0x30>)
 8009b88:	7813      	ldrb	r3, [r2, #0]
 8009b8a:	f043 0301 	orr.w	r3, r3, #1
 8009b8e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009b90:	e004      	b.n	8009b9c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009b92:	4a05      	ldr	r2, [pc, #20]	@ (8009ba8 <vIPSetARPTimerEnableState+0x30>)
 8009b94:	7813      	ldrb	r3, [r2, #0]
 8009b96:	f36f 0300 	bfc	r3, #0, #1
 8009b9a:	7013      	strb	r3, [r2, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	20001004 	.word	0x20001004

08009bac <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 8009bba:	4a08      	ldr	r2, [pc, #32]	@ (8009bdc <vIPSetARPResolutionTimerEnableState+0x30>)
 8009bbc:	7813      	ldrb	r3, [r2, #0]
 8009bbe:	f043 0301 	orr.w	r3, r3, #1
 8009bc2:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009bc4:	e004      	b.n	8009bd0 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 8009bc6:	4a05      	ldr	r2, [pc, #20]	@ (8009bdc <vIPSetARPResolutionTimerEnableState+0x30>)
 8009bc8:	7813      	ldrb	r3, [r2, #0]
 8009bca:	f36f 0300 	bfc	r3, #0, #1
 8009bce:	7013      	strb	r3, [r2, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20000ff0 	.word	0x20000ff0

08009be0 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <vIPSetDHCP_RATimerEnableState+0x14>
 8009bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8009c2c <vIPSetDHCP_RATimerEnableState+0x4c>)
 8009bf2:	e000      	b.n	8009bf6 <vIPSetDHCP_RATimerEnableState+0x16>
 8009bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8009c30 <vIPSetDHCP_RATimerEnableState+0x50>)
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	480e      	ldr	r0, [pc, #56]	@ (8009c34 <vIPSetDHCP_RATimerEnableState+0x54>)
 8009bfa:	f017 fe4d 	bl	8021898 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d007      	beq.n	8009c14 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009c12:	e006      	b.n	8009c22 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009c1a:	f36f 0300 	bfc	r3, #0, #1
 8009c1e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	080243cc 	.word	0x080243cc
 8009c30:	080243d0 	.word	0x080243d0
 8009c34:	080243d4 	.word	0x080243d4

08009c38 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 8009c46:	4a08      	ldr	r2, [pc, #32]	@ (8009c68 <vIPSetDNSTimerEnableState+0x30>)
 8009c48:	7813      	ldrb	r3, [r2, #0]
 8009c4a:	f043 0301 	orr.w	r3, r3, #1
 8009c4e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009c50:	e004      	b.n	8009c5c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 8009c52:	4a05      	ldr	r2, [pc, #20]	@ (8009c68 <vIPSetDNSTimerEnableState+0x30>)
 8009c54:	7813      	ldrb	r3, [r2, #0]
 8009c56:	f36f 0300 	bfc	r3, #0, #1
 8009c5a:	7013      	strb	r3, [r2, #0]
    }
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	2000102c 	.word	0x2000102c

08009c6c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 8009c74:	4a04      	ldr	r2, [pc, #16]	@ (8009c88 <vSetAllNetworksUp+0x1c>)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6013      	str	r3, [r2, #0]
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	20000fec 	.word	0x20000fec

08009c8c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	6838      	ldr	r0, [r7, #0]
 8009c9e:	f00c feeb 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 8009ca2:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d03e      	beq.n	8009d28 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <pxDuplicateNetworkBufferWithDescriptor+0x30>
 8009cb2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8009cb6:	481f      	ldr	r0, [pc, #124]	@ (8009d34 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 8009cb8:	f7f7 fcce 	bl	8001658 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d902      	bls.n	8009ccc <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cca:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	695a      	ldr	r2, [r3, #20]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4619      	mov	r1, r3
 8009d06:	f017 ffe3 	bl	8021cd0 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8009d0a:	68b8      	ldr	r0, [r7, #8]
 8009d0c:	f7ff fd0c 	bl	8009728 <uxIPHeaderSizePacket>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b28      	cmp	r3, #40	@ 0x28
 8009d14:	d108      	bne.n	8009d28 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f103 0014 	add.w	r0, r3, #20
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3314      	adds	r3, #20
 8009d20:	2210      	movs	r2, #16
 8009d22:	4619      	mov	r1, r3
 8009d24:	f017 ffd4 	bl	8021cd0 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 8009d28:	68bb      	ldr	r3, [r7, #8]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	080243f8 	.word	0x080243f8

08009d38 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	e013      	b.n	8009d76 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f816 	bl	8009d80 <void_ptr_to_uintptr>
 8009d54:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	3b0a      	subs	r3, #10
 8009d5e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d103      	bne.n	8009d72 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	e001      	b.n	8009d76 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 8009d76:	68fb      	ldr	r3, [r7, #12]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 8009da2:	2100      	movs	r1, #0
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff ffc7 	bl	8009d38 <prvPacketBuffer_to_NetworkBuffer>
 8009daa:	4603      	mov	r3, r0
    }
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d102      	bne.n	8009dc8 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61fb      	str	r3, [r7, #28]
 8009dc6:	e033      	b.n	8009e30 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff ffd9 	bl	8009d80 <void_ptr_to_uintptr>
 8009dce:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	3b30      	subs	r3, #48	@ 0x30
 8009dd4:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	f023 030f 	bic.w	r3, r3, #15
 8009de2:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	2b40      	cmp	r3, #64	@ 0x40
 8009de8:	d002      	beq.n	8009df0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	2b60      	cmp	r3, #96	@ 0x60
 8009dee:	d101      	bne.n	8009df4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 8009df4:	2300      	movs	r3, #0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d104      	bne.n	8009e04 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 8009dfa:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8009dfe:	480f      	ldr	r0, [pc, #60]	@ (8009e3c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 8009e00:	f7f7 fc2a 	bl	8001658 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	2b40      	cmp	r3, #64	@ 0x40
 8009e08:	d004      	beq.n	8009e14 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 8009e0a:	2b60      	cmp	r3, #96	@ 0x60
 8009e0c:	d105      	bne.n	8009e1a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 8009e0e:	233e      	movs	r3, #62	@ 0x3e
 8009e10:	61bb      	str	r3, [r7, #24]
                    break;
 8009e12:	e008      	b.n	8009e26 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 8009e14:	232a      	movs	r3, #42	@ 0x2a
 8009e16:	61bb      	str	r3, [r7, #24]
                    break;
 8009e18:	e005      	b.n	8009e26 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 8009e1a:	4809      	ldr	r0, [pc, #36]	@ (8009e40 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 8009e1c:	f017 fd3c 	bl	8021898 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 8009e20:	232a      	movs	r3, #42	@ 0x2a
 8009e22:	61bb      	str	r3, [r7, #24]
                break;
 8009e24:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 8009e26:	69b9      	ldr	r1, [r7, #24]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff ff85 	bl	8009d38 <prvPacketBuffer_to_NetworkBuffer>
 8009e2e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 8009e30:	69fb      	ldr	r3, [r7, #28]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	080243f8 	.word	0x080243f8
 8009e40:	080244d0 	.word	0x080244d0

08009e44 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 8009e4a:	f7fa fdd1 	bl	80049f0 <xTaskGetCurrentTaskHandle>
 8009e4e:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 8009e50:	f7fe ff6e 	bl	8008d30 <FreeRTOS_GetIPTaskHandle>
 8009e54:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d102      	bne.n	8009e64 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	e001      	b.n	8009e68 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009e68:	68fb      	ldr	r3, [r7, #12]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d104      	bne.n	8009e8c <prvProcessNetworkDownEvent+0x18>
 8009e82:	f240 3137 	movw	r1, #823	@ 0x337
 8009e86:	4857      	ldr	r0, [pc, #348]	@ (8009fe4 <prvProcessNetworkDownEvent+0x170>)
 8009e88:	f7f7 fbe6 	bl	8001658 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <prvProcessNetworkDownEvent+0x2a>
 8009e94:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8009e98:	4852      	ldr	r0, [pc, #328]	@ (8009fe4 <prvProcessNetworkDownEvent+0x170>)
 8009e9a:	f7f7 fbdd 	bl	8001658 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	f7ff fe6a 	bl	8009b78 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f002 ffd7 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	e041      	b.n	8009f32 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009eb4:	f36f 1304 	bfc	r3, #4, #1
 8009eb8:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 8009ecc:	2100      	movs	r1, #0
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f001 f9c8 	bl	800b264 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009eda:	f003 0308 	and.w	r3, r3, #8
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	f7f7 fbeb 	bl	80016c0 <vApplicationIPNetworkEventHook>
 8009eea:	e006      	b.n	8009efa <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009ef2:	f043 0308 	orr.w	r3, r3, #8
 8009ef6:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7fd f8c0 	bl	8007080 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f06:	f003 0304 	and.w	r3, r3, #4
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <prvProcessNetworkDownEvent+0xb4>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 8009f20:	2100      	movs	r1, #0
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f7ff fe5c 	bl	8009be0 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009f28:	68f9      	ldr	r1, [r7, #12]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f002 ffb6 	bl	800ce9c <FreeRTOS_NextEndPoint>
 8009f30:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1ba      	bne.n	8009eae <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	4798      	blx	r3
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d147      	bne.n	8009fd6 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	7f13      	ldrb	r3, [r2, #28]
 8009f4a:	f043 0301 	orr.w	r3, r3, #1
 8009f4e:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f002 ff81 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	e039      	b.n	8009fce <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00c      	beq.n	8009f84 <prvProcessNetworkDownEvent+0x110>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	f002 fd9f 	bl	800cac0 <vRAProcess>
 8009f82:	e01f      	b.n	8009fc4 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <prvProcessNetworkDownEvent+0x126>
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d008      	beq.n	8009faa <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 8009f98:	e011      	b.n	8009fbe <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	331c      	adds	r3, #28
 8009fa0:	221c      	movs	r2, #28
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	f017 fe94 	bl	8021cd0 <memcpy>
                            break;
 8009fa8:	e009      	b.n	8009fbe <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3390      	adds	r3, #144	@ 0x90
 8009fb4:	2258      	movs	r2, #88	@ 0x58
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f017 fe8a 	bl	8021cd0 <memcpy>
                            break;
 8009fbc:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f7fe fec2 	bl	8008d48 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009fc4:	68f9      	ldr	r1, [r7, #12]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f002 ff68 	bl	800ce9c <FreeRTOS_NextEndPoint>
 8009fcc:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1c2      	bne.n	8009f5a <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 8009fd4:	e002      	b.n	8009fdc <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	f7ff fe48 	bl	8009c6c <vSetAllNetworksUp>
}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	080243f8 	.word	0x080243f8

08009fe8 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8009fee:	f7ff fb83 	bl	80096f8 <xIPIsNetworkTaskReady>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d004      	beq.n	800a002 <vPreCheckConfigs+0x1a>
 8009ff8:	f240 31db 	movw	r1, #987	@ 0x3db
 8009ffc:	4831      	ldr	r0, [pc, #196]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 8009ffe:	f7f7 fb2b 	bl	8001658 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800a002:	4b31      	ldr	r3, [pc, #196]	@ (800a0c8 <vPreCheckConfigs+0xe0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <vPreCheckConfigs+0x2c>
 800a00a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800a00e:	482d      	ldr	r0, [pc, #180]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a010:	f7f7 fb22 	bl	8001658 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a014:	f7fe fe8c 	bl	8008d30 <FreeRTOS_GetIPTaskHandle>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d004      	beq.n	800a028 <vPreCheckConfigs+0x40>
 800a01e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800a022:	4828      	ldr	r0, [pc, #160]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a024:	f7f7 fb18 	bl	8001658 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a028:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a02c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a034:	4293      	cmp	r3, r2
 800a036:	d804      	bhi.n	800a042 <vPreCheckConfigs+0x5a>
 800a038:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800a03c:	4821      	ldr	r0, [pc, #132]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a03e:	f7f7 fb0b 	bl	8001658 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800a042:	230e      	movs	r3, #14
 800a044:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b0e      	cmp	r3, #14
 800a04a:	d004      	beq.n	800a056 <vPreCheckConfigs+0x6e>
 800a04c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a050:	481c      	ldr	r0, [pc, #112]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a052:	f7f7 fb01 	bl	8001658 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800a056:	231c      	movs	r3, #28
 800a058:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b1c      	cmp	r3, #28
 800a05e:	d004      	beq.n	800a06a <vPreCheckConfigs+0x82>
 800a060:	f240 4102 	movw	r1, #1026	@ 0x402
 800a064:	4817      	ldr	r0, [pc, #92]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a066:	f7f7 faf7 	bl	8001658 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800a06a:	2314      	movs	r3, #20
 800a06c:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b14      	cmp	r3, #20
 800a072:	d004      	beq.n	800a07e <vPreCheckConfigs+0x96>
 800a074:	f240 4105 	movw	r1, #1029	@ 0x405
 800a078:	4812      	ldr	r0, [pc, #72]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a07a:	f7f7 faed 	bl	8001658 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800a07e:	2308      	movs	r3, #8
 800a080:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b08      	cmp	r3, #8
 800a086:	d004      	beq.n	800a092 <vPreCheckConfigs+0xaa>
 800a088:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800a08c:	480d      	ldr	r0, [pc, #52]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a08e:	f7f7 fae3 	bl	8001658 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800a092:	2308      	movs	r3, #8
 800a094:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d004      	beq.n	800a0a6 <vPreCheckConfigs+0xbe>
 800a09c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800a0a0:	4808      	ldr	r0, [pc, #32]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a0a2:	f7f7 fad9 	bl	8001658 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a0a6:	2324      	movs	r3, #36	@ 0x24
 800a0a8:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b24      	cmp	r3, #36	@ 0x24
 800a0ae:	d004      	beq.n	800a0ba <vPreCheckConfigs+0xd2>
 800a0b0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800a0b4:	4803      	ldr	r0, [pc, #12]	@ (800a0c4 <vPreCheckConfigs+0xdc>)
 800a0b6:	f7f7 facf 	bl	8001658 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a0ba:	bf00      	nop
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	080243f8 	.word	0x080243f8
 800a0c8:	20000fd8 	.word	0x20000fd8

0800a0cc <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800a0d2:	f00c fd7f 	bl	8016bd4 <uxGetMinimumFreeNetworkBuffers>
 800a0d6:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800a0d8:	4b24      	ldr	r3, [pc, #144]	@ (800a16c <vPrintResourceStats+0xa0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d20a      	bcs.n	800a0f8 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800a0e2:	4a22      	ldr	r2, [pc, #136]	@ (800a16c <vPrintResourceStats+0xa0>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800a0e8:	f00c fd80 	bl	8016bec <uxGetNumberOfFreeNetworkBuffers>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	481f      	ldr	r0, [pc, #124]	@ (800a170 <vPrintResourceStats+0xa4>)
 800a0f4:	f017 fbd0 	bl	8021898 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800a0f8:	f7fb ff1e 	bl	8005f38 <xPortGetMinimumEverFreeHeapSize>
 800a0fc:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800a0fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a174 <vPrintResourceStats+0xa8>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d103      	bne.n	800a10e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800a106:	4a1b      	ldr	r2, [pc, #108]	@ (800a174 <vPrintResourceStats+0xa8>)
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	e019      	b.n	800a142 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a114:	d215      	bcs.n	800a142 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800a116:	4b17      	ldr	r3, [pc, #92]	@ (800a174 <vPrintResourceStats+0xa8>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	225a      	movs	r2, #90	@ 0x5a
 800a11c:	fb03 f202 	mul.w	r2, r3, r2
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2164      	movs	r1, #100	@ 0x64
 800a124:	fb01 f303 	mul.w	r3, r1, r3
 800a128:	429a      	cmp	r2, r3
 800a12a:	d90a      	bls.n	800a142 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800a12c:	4a11      	ldr	r2, [pc, #68]	@ (800a174 <vPrintResourceStats+0xa8>)
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800a132:	f7fb fef5 	bl	8005f20 <xPortGetFreeHeapSize>
 800a136:	4603      	mov	r3, r0
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	4619      	mov	r1, r3
 800a13c:	480e      	ldr	r0, [pc, #56]	@ (800a178 <vPrintResourceStats+0xac>)
 800a13e:	f017 fbab 	bl	8021898 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800a142:	2300      	movs	r3, #0
 800a144:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800a146:	f7ff fae3 	bl	8009710 <uxGetMinimumIPQueueSpace>
 800a14a:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800a14c:	4b0b      	ldr	r3, [pc, #44]	@ (800a17c <vPrintResourceStats+0xb0>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	429a      	cmp	r2, r3
 800a154:	d006      	beq.n	800a164 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800a156:	4a09      	ldr	r2, [pc, #36]	@ (800a17c <vPrintResourceStats+0xb0>)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	4808      	ldr	r0, [pc, #32]	@ (800a180 <vPrintResourceStats+0xb4>)
 800a160:	f017 fb9a 	bl	8021898 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800a164:	bf00      	nop
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20000018 	.word	0x20000018
 800a170:	08024568 	.word	0x08024568
 800a174:	20001054 	.word	0x20001054
 800a178:	0802458c 	.word	0x0802458c
 800a17c:	20001058 	.word	0x20001058
 800a180:	080245a8 	.word	0x080245a8

0800a184 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	4293      	cmp	r3, r2
 800a194:	bf38      	it	cc
 800a196:	4613      	movcc	r3, r2
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	bfa8      	it	ge
 800a1b6:	4613      	movge	r3, r2
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	bf28      	it	cs
 800a1d6:	4613      	movcs	r3, r2
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	bf28      	it	cs
 800a1f6:	4613      	movcs	r3, r2
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d104      	bne.n	800a222 <FreeRTOS_round_up+0x1e>
 800a218:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800a21c:	480a      	ldr	r0, [pc, #40]	@ (800a248 <FreeRTOS_round_up+0x44>)
 800a21e:	f7f7 fa1b 	bl	8001658 <vAssertCalled>

    if( d != 0U )
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	4413      	add	r3, r2
 800a22e:	1e5a      	subs	r2, r3, #1
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	fbb2 f2f3 	udiv	r2, r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	fb02 f303 	mul.w	r3, r2, r3
 800a23c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800a23e:	68fb      	ldr	r3, [r7, #12]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	080243f8 	.word	0x080243f8

0800a24c <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3301      	adds	r3, #1
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a262:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3302      	adds	r3, #2
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a26c:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	3203      	adds	r2, #3
 800a272:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a274:	4313      	orrs	r3, r2
}
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800a282:	b480      	push	{r7}
 800a284:	b083      	sub	sp, #12
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	3201      	adds	r2, #1
 800a296:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800a298:	4313      	orrs	r3, r2
 800a29a:	b29b      	uxth	r3, r3
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08a      	sub	sp, #40	@ 0x28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b21      	cmp	r3, #33	@ 0x21
 800a2c2:	d802      	bhi.n	800a2ca <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	61fb      	str	r3, [r7, #28]
                break;
 800a2c8:	e06f      	b.n	800a3aa <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	7b9b      	ldrb	r3, [r3, #14]
 800a2ce:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800a2d0:	8afb      	ldrh	r3, [r7, #22]
 800a2d2:	2b44      	cmp	r3, #68	@ 0x44
 800a2d4:	d902      	bls.n	800a2dc <xCheckIPv4SizeFields+0x34>
 800a2d6:	8afb      	ldrh	r3, [r7, #22]
 800a2d8:	2b4f      	cmp	r3, #79	@ 0x4f
 800a2da:	d902      	bls.n	800a2e2 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a2dc:	2302      	movs	r3, #2
 800a2de:	61fb      	str	r3, [r7, #28]
                break;
 800a2e0:	e063      	b.n	800a3aa <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800a2e2:	8afb      	ldrh	r3, [r7, #22]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a2ec:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800a2ee:	8afb      	ldrh	r3, [r7, #22]
 800a2f0:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	330e      	adds	r3, #14
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d202      	bcs.n	800a302 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	61fb      	str	r3, [r7, #28]
                break;
 800a300:	e053      	b.n	800a3aa <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	7c1a      	ldrb	r2, [r3, #16]
 800a306:	7c5b      	ldrb	r3, [r3, #17]
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	4313      	orrs	r3, r2
 800a30c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800a30e:	89fb      	ldrh	r3, [r7, #14]
 800a310:	021b      	lsls	r3, r3, #8
 800a312:	b21a      	sxth	r2, r3
 800a314:	89fb      	ldrh	r3, [r7, #14]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	b29b      	uxth	r3, r3
 800a31a:	b21b      	sxth	r3, r3
 800a31c:	4313      	orrs	r3, r2
 800a31e:	b21b      	sxth	r3, r3
 800a320:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800a322:	89fb      	ldrh	r3, [r7, #14]
 800a324:	330e      	adds	r3, #14
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d202      	bcs.n	800a332 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a32c:	2304      	movs	r3, #4
 800a32e:	61fb      	str	r3, [r7, #28]
                break;
 800a330:	e03b      	b.n	800a3aa <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	7ddb      	ldrb	r3, [r3, #23]
 800a336:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a338:	7b7b      	ldrb	r3, [r7, #13]
 800a33a:	2b11      	cmp	r3, #17
 800a33c:	d103      	bne.n	800a346 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	3316      	adds	r3, #22
 800a342:	627b      	str	r3, [r7, #36]	@ 0x24
 800a344:	e013      	b.n	800a36e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800a346:	7b7b      	ldrb	r3, [r7, #13]
 800a348:	2b06      	cmp	r3, #6
 800a34a:	d103      	bne.n	800a354 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	3322      	adds	r3, #34	@ 0x22
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
 800a352:	e00c      	b.n	800a36e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800a354:	7b7b      	ldrb	r3, [r7, #13]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d002      	beq.n	800a360 <xCheckIPv4SizeFields+0xb8>
 800a35a:	7b7b      	ldrb	r3, [r7, #13]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d103      	bne.n	800a368 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	3316      	adds	r3, #22
 800a364:	627b      	str	r3, [r7, #36]	@ 0x24
 800a366:	e002      	b.n	800a36e <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a368:	2305      	movs	r3, #5
 800a36a:	61fb      	str	r3, [r7, #28]
                break;
 800a36c:	e01d      	b.n	800a3aa <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	429a      	cmp	r2, r3
 800a374:	d202      	bcs.n	800a37c <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a376:	2306      	movs	r3, #6
 800a378:	61fb      	str	r3, [r7, #28]
                break;
 800a37a:	e016      	b.n	800a3aa <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800a37c:	89fb      	ldrh	r3, [r7, #14]
 800a37e:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	b29b      	uxth	r3, r3
 800a384:	461a      	mov	r2, r3
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2b07      	cmp	r3, #7
 800a390:	d906      	bls.n	800a3a0 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a398:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d902      	bls.n	800a3a6 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a3a0:	2307      	movs	r3, #7
 800a3a2:	61fb      	str	r3, [r7, #28]
                break;
 800a3a4:	e001      	b.n	800a3aa <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d003      	beq.n	800a3b8 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800a3b0:	69f9      	ldr	r1, [r7, #28]
 800a3b2:	4804      	ldr	r0, [pc, #16]	@ (800a3c4 <xCheckIPv4SizeFields+0x11c>)
 800a3b4:	f017 fa70 	bl	8021898 <lUDPLoggingPrintf>
        }

        return xResult;
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
    }
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3728      	adds	r7, #40	@ 0x28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	08024674 	.word	0x08024674

0800a3c8 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	061a      	lsls	r2, r3, #24
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	021b      	lsls	r3, r3, #8
 800a3d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	0a1b      	lsrs	r3, r3, #8
 800a3e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	0e1b      	lsrs	r3, r3, #24
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a3f6:	d306      	bcc.n	800a406 <xIsIPv4Multicast+0x3e>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800a3fe:	d202      	bcs.n	800a406 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800a400:	2301      	movs	r3, #1
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	e001      	b.n	800a40a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a40a:	68fb      	ldr	r3, [r7, #12]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a424:	2301      	movs	r3, #1
 800a426:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d10c      	bne.n	800a448 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f7ff ff35 	bl	800a2a8 <xCheckIPv4SizeFields>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b01      	cmp	r3, #1
 800a442:	d001      	beq.n	800a448 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a444:	2300      	movs	r3, #0
 800a446:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d134      	bne.n	800a4b8 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	7ddb      	ldrb	r3, [r3, #23]
 800a452:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	3322      	adds	r3, #34	@ 0x22
 800a45a:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a45c:	7dbb      	ldrb	r3, [r7, #22]
 800a45e:	2b11      	cmp	r3, #17
 800a460:	d12a      	bne.n	800a4b8 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	88db      	ldrh	r3, [r3, #6]
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d125      	bne.n	800a4b8 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800a46c:	4b15      	ldr	r3, [pc, #84]	@ (800a4c4 <prvAllowIPPacketIPv4+0xac>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b04      	cmp	r3, #4
 800a472:	dc1f      	bgt.n	800a4b4 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a47a:	061a      	lsls	r2, r3, #24
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a488:	431a      	orrs	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a490:	0a1b      	lsrs	r3, r3, #8
 800a492:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a496:	431a      	orrs	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a49e:	0e1b      	lsrs	r3, r3, #24
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4808      	ldr	r0, [pc, #32]	@ (800a4c8 <prvAllowIPPacketIPv4+0xb0>)
 800a4a6:	f017 f9f7 	bl	8021898 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800a4aa:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <prvAllowIPPacketIPv4+0xac>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	4a04      	ldr	r2, [pc, #16]	@ (800a4c4 <prvAllowIPPacketIPv4+0xac>)
 800a4b2:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800a4b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	2000105c 	.word	0x2000105c
 800a4c8:	08024698 	.word	0x08024698

0800a4cc <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08a      	sub	sp, #40	@ 0x28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4de:	330e      	adds	r3, #14
 800a4e0:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a4f0:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	3b14      	subs	r3, #20
 800a4f6:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	330e      	adds	r3, #14
 800a500:	4413      	add	r3, r2
 800a502:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a508:	3322      	adds	r3, #34	@ 0x22
 800a50a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	3b22      	subs	r3, #34	@ 0x22
 800a516:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	6939      	ldr	r1, [r7, #16]
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f018 fb7c 	bl	8022c1a <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	1ad2      	subs	r2, r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	885b      	ldrh	r3, [r3, #2]
 800a532:	b29b      	uxth	r3, r3
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	b21a      	sxth	r2, r3
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	885b      	ldrh	r3, [r3, #2]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	0a1b      	lsrs	r3, r3, #8
 800a540:	b29b      	uxth	r3, r3
 800a542:	b21b      	sxth	r3, r3
 800a544:	4313      	orrs	r3, r2
 800a546:	b21b      	sxth	r3, r3
 800a548:	b29a      	uxth	r2, r3
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	b29b      	uxth	r3, r3
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	b29a      	uxth	r2, r3
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	885b      	ldrh	r3, [r3, #2]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	021b      	lsls	r3, r3, #8
 800a55e:	b219      	sxth	r1, r3
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	885b      	ldrh	r3, [r3, #2]
 800a564:	b29b      	uxth	r3, r3
 800a566:	0a1b      	lsrs	r3, r3, #8
 800a568:	b29b      	uxth	r3, r3
 800a56a:	b21b      	sxth	r3, r3
 800a56c:	430b      	orrs	r3, r1
 800a56e:	b21b      	sxth	r3, r3
 800a570:	b29b      	uxth	r3, r3
 800a572:	4619      	mov	r1, r3
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	1acb      	subs	r3, r1, r3
 800a578:	0a1b      	lsrs	r3, r3, #8
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	f023 030f 	bic.w	r3, r3, #15
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	f043 0305 	orr.w	r3, r3, #5
 800a592:	b2da      	uxtb	r2, r3
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800a598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3728      	adds	r7, #40	@ 0x28
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b0f      	cmp	r3, #15
 800a5b4:	d802      	bhi.n	800a5bc <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61fb      	str	r3, [r7, #28]
 800a5ba:	e00e      	b.n	800a5da <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f004 fac9 	bl	800eb68 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800a5da:	69fb      	ldr	r3, [r7, #28]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d010      	beq.n	800a616 <xSend_UDP_Update_IPv4+0x32>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00d      	beq.n	800a616 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f042 0208 	orr.w	r2, r2, #8
 800a610:	731a      	strb	r2, [r3, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	061a      	lsls	r2, r3, #24
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	021b      	lsls	r3, r3, #8
 800a636:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	0a1b      	lsrs	r3, r3, #8
 800a640:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a644:	431a      	orrs	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	0e1b      	lsrs	r3, r3, #24
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2201      	movs	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2200      	movs	r2, #0
 800a658:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	225e      	movs	r2, #94	@ 0x5e
 800a65e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	0c1b      	lsrs	r3, r3, #16
 800a664:	b2db      	uxtb	r3, r3
 800a666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	b2da      	uxtb	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	715a      	strb	r2, [r3, #5]
}
 800a682:	bf00      	nop
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
	...

0800a690 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	@ 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b27      	cmp	r3, #39	@ 0x27
 800a6b6:	d802      	bhi.n	800a6be <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	61fb      	str	r3, [r7, #28]
                break;
 800a6bc:	e098      	b.n	800a7f0 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	7b9b      	ldrb	r3, [r3, #14]
 800a6c2:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800a6c4:	89fb      	ldrh	r3, [r7, #14]
 800a6c6:	111b      	asrs	r3, r3, #4
 800a6c8:	f003 030f 	and.w	r3, r3, #15
 800a6cc:	2b06      	cmp	r3, #6
 800a6ce:	d002      	beq.n	800a6d6 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	61fb      	str	r3, [r7, #28]
                break;
 800a6d4:	e08c      	b.n	800a7f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b35      	cmp	r3, #53	@ 0x35
 800a6da:	d802      	bhi.n	800a6e2 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a6dc:	2303      	movs	r3, #3
 800a6de:	61fb      	str	r3, [r7, #28]
                break;
 800a6e0:	e086      	b.n	800a7f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	8a5b      	ldrh	r3, [r3, #18]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	021b      	lsls	r3, r3, #8
 800a6ea:	b21a      	sxth	r2, r3
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	8a5b      	ldrh	r3, [r3, #18]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	0a1b      	lsrs	r3, r3, #8
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	b21b      	sxth	r3, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	b21b      	sxth	r3, r3
 800a6fc:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800a6fe:	89bb      	ldrh	r3, [r7, #12]
 800a700:	3336      	adds	r3, #54	@ 0x36
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d002      	beq.n	800a70e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a708:	2304      	movs	r3, #4
 800a70a:	61fb      	str	r3, [r7, #28]
                break;
 800a70c:	e070      	b.n	800a7f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	7d1b      	ldrb	r3, [r3, #20]
 800a712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800a716:	e015      	b.n	800a744 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	3336      	adds	r3, #54	@ 0x36
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	4413      	add	r3, r2
 800a720:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	785b      	ldrb	r3, [r3, #1]
 800a726:	3301      	adds	r3, #1
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	461a      	mov	r2, r3
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	4413      	add	r3, r2
 800a730:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	3336      	adds	r3, #54	@ 0x36
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	429a      	cmp	r2, r3
 800a742:	d908      	bls.n	800a756 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800a744:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f85f 	bl	800a80c <xIsExtHeader>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1e1      	bne.n	800a718 <xCheckIPv6SizeFields+0x88>
 800a754:	e000      	b.n	800a758 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800a756:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	3336      	adds	r3, #54	@ 0x36
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d802      	bhi.n	800a768 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a762:	2307      	movs	r3, #7
 800a764:	61fb      	str	r3, [r7, #28]
                break;
 800a766:	e043      	b.n	800a7f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800a768:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a76c:	2b11      	cmp	r3, #17
 800a76e:	d103      	bne.n	800a778 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	333e      	adds	r3, #62	@ 0x3e
 800a774:	627b      	str	r3, [r7, #36]	@ 0x24
 800a776:	e032      	b.n	800a7de <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800a778:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a77c:	2b06      	cmp	r3, #6
 800a77e:	d103      	bne.n	800a788 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	334a      	adds	r3, #74	@ 0x4a
 800a784:	627b      	str	r3, [r7, #36]	@ 0x24
 800a786:	e02a      	b.n	800a7de <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800a788:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a78c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a78e:	d123      	bne.n	800a7d8 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	3336      	adds	r3, #54	@ 0x36
 800a794:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	4413      	add	r3, r2
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800a7a0:	7afb      	ldrb	r3, [r7, #11]
 800a7a2:	2b80      	cmp	r3, #128	@ 0x80
 800a7a4:	d002      	beq.n	800a7ac <xCheckIPv6SizeFields+0x11c>
 800a7a6:	7afb      	ldrb	r3, [r7, #11]
 800a7a8:	2b81      	cmp	r3, #129	@ 0x81
 800a7aa:	d103      	bne.n	800a7b4 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7b2:	e014      	b.n	800a7de <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800a7b4:	7afb      	ldrb	r3, [r7, #11]
 800a7b6:	2b85      	cmp	r3, #133	@ 0x85
 800a7b8:	d103      	bne.n	800a7c2 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7bc:	3308      	adds	r3, #8
 800a7be:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7c0:	e00d      	b.n	800a7de <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800a7c2:	7afb      	ldrb	r3, [r7, #11]
 800a7c4:	2b86      	cmp	r3, #134	@ 0x86
 800a7c6:	d103      	bne.n	800a7d0 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	3310      	adds	r3, #16
 800a7cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ce:	e006      	b.n	800a7de <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	3318      	adds	r3, #24
 800a7d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7d6:	e002      	b.n	800a7de <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a7d8:	2305      	movs	r3, #5
 800a7da:	61fb      	str	r3, [r7, #28]
                break;
 800a7dc:	e008      	b.n	800a7f0 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d202      	bcs.n	800a7ec <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a7e6:	2306      	movs	r3, #6
 800a7e8:	61fb      	str	r3, [r7, #28]
                break;
 800a7ea:	e001      	b.n	800a7f0 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d003      	beq.n	800a7fe <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800a7f6:	69f9      	ldr	r1, [r7, #28]
 800a7f8:	4803      	ldr	r0, [pc, #12]	@ (800a808 <xCheckIPv6SizeFields+0x178>)
 800a7fa:	f017 f84d 	bl	8021898 <lUDPLoggingPrintf>
        }

        return xResult;
 800a7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800a800:	4618      	mov	r0, r3
 800a802:	3730      	adds	r7, #48	@ 0x30
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	080246d4 	.word	0x080246d4

0800a80c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	2b87      	cmp	r3, #135	@ 0x87
 800a81e:	d016      	beq.n	800a84e <xIsExtHeader+0x42>
 800a820:	2b87      	cmp	r3, #135	@ 0x87
 800a822:	dc16      	bgt.n	800a852 <xIsExtHeader+0x46>
 800a824:	2b00      	cmp	r3, #0
 800a826:	d012      	beq.n	800a84e <xIsExtHeader+0x42>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	db12      	blt.n	800a852 <xIsExtHeader+0x46>
 800a82c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a82e:	dc10      	bgt.n	800a852 <xIsExtHeader+0x46>
 800a830:	2b2b      	cmp	r3, #43	@ 0x2b
 800a832:	db0e      	blt.n	800a852 <xIsExtHeader+0x46>
 800a834:	3b2b      	subs	r3, #43	@ 0x2b
 800a836:	4a0a      	ldr	r2, [pc, #40]	@ (800a860 <xIsExtHeader+0x54>)
 800a838:	fa22 f303 	lsr.w	r3, r2, r3
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	bf14      	ite	ne
 800a844:	2301      	movne	r3, #1
 800a846:	2300      	moveq	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800a84e:	2301      	movs	r3, #1
 800a850:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800a852:	68fb      	ldr	r3, [r7, #12]
    }
 800a854:	4618      	mov	r0, r3
 800a856:	3714      	adds	r7, #20
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	00020183 	.word	0x00020183

0800a864 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d104      	bne.n	800a87e <xGetIPv6MulticastGroupID+0x1a>
 800a874:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800a878:	480e      	ldr	r0, [pc, #56]	@ (800a8b4 <xGetIPv6MulticastGroupID+0x50>)
 800a87a:	f7f6 feed 	bl	8001658 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <xGetIPv6MulticastGroupID+0x2a>
 800a884:	f240 1113 	movw	r1, #275	@ 0x113
 800a888:	480a      	ldr	r0, [pc, #40]	@ (800a8b4 <xGetIPv6MulticastGroupID+0x50>)
 800a88a:	f7f6 fee5 	bl	8001658 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2200      	movs	r2, #0
 800a892:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2200      	movs	r2, #0
 800a898:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	1c98      	adds	r0, r3, #2
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	3302      	adds	r3, #2
 800a8a2:	220e      	movs	r2, #14
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f017 fa13 	bl	8021cd0 <memcpy>
}
 800a8aa:	bf00      	nop
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	080246f8 	.word	0x080246f8

0800a8b8 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2210      	movs	r2, #16
 800a8c8:	4906      	ldr	r1, [pc, #24]	@ (800a8e4 <xIsIPv6Loopback+0x2c>)
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f018 f995 	bl	8022bfa <memcmp>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a8da:	68fb      	ldr	r3, [r7, #12]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	08026f48 	.word	0x08026f48

0800a8e8 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2bff      	cmp	r3, #255	@ 0xff
 800a8fa:	d123      	bne.n	800a944 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff ffae 	bl	800a864 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	785b      	ldrb	r3, [r3, #1]
 800a90c:	f003 030f 	and.w	r3, r3, #15
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
 800a918:	e014      	b.n	800a944 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	785b      	ldrb	r3, [r3, #1]
 800a91e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10c      	bne.n	800a940 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	2210      	movs	r2, #16
 800a92c:	4908      	ldr	r1, [pc, #32]	@ (800a950 <xIsIPv6AllowedMulticast+0x68>)
 800a92e:	4618      	mov	r0, r3
 800a930:	f018 f963 	bl	8022bfa <memcmp>
 800a934:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a936:	2b00      	cmp	r3, #0
 800a938:	d102      	bne.n	800a940 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800a93a:	2300      	movs	r3, #0
 800a93c:	61fb      	str	r3, [r7, #28]
 800a93e:	e001      	b.n	800a944 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800a944:	69fb      	ldr	r3, [r7, #28]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3720      	adds	r7, #32
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	08026f38 	.word	0x08026f38

0800a954 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b08a      	sub	sp, #40	@ 0x28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2bff      	cmp	r3, #255	@ 0xff
 800a966:	d112      	bne.n	800a98e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d10e      	bne.n	800a98e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a974:	2bff      	cmp	r3, #255	@ 0xff
 800a976:	d10a      	bne.n	800a98e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f103 000d 	add.w	r0, r3, #13
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	330d      	adds	r3, #13
 800a982:	2203      	movs	r2, #3
 800a984:	4619      	mov	r1, r3
 800a986:	f018 f938 	bl	8022bfa <memcmp>
 800a98a:	6278      	str	r0, [r7, #36]	@ 0x24
 800a98c:	e069      	b.n	800aa62 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2210      	movs	r2, #16
 800a992:	4936      	ldr	r1, [pc, #216]	@ (800aa6c <xCompareIPv6_Address+0x118>)
 800a994:	4618      	mov	r0, r3
 800a996:	f018 f930 	bl	8022bfa <memcmp>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d102      	bne.n	800a9a6 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9a4:	e05d      	b.n	800aa62 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9ac:	d10e      	bne.n	800a9cc <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a9b2:	2b80      	cmp	r3, #128	@ 0x80
 800a9b4:	d10a      	bne.n	800a9cc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a9ba:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9bc:	d106      	bne.n	800a9cc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a9c2:	2b80      	cmp	r3, #128	@ 0x80
 800a9c4:	d102      	bne.n	800a9cc <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9ca:	e04a      	b.n	800aa62 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9d6:	e044      	b.n	800aa62 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b80      	cmp	r3, #128	@ 0x80
 800a9dc:	d107      	bne.n	800a9ee <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68b9      	ldr	r1, [r7, #8]
 800a9e2:	2210      	movs	r2, #16
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f018 f908 	bl	8022bfa <memcmp>
 800a9ea:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9ec:	e039      	b.n	800aa62 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	08db      	lsrs	r3, r3, #3
 800a9f2:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d006      	beq.n	800aa0c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f018 f8f8 	bl	8022bfa <memcmp>
 800aa0a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d127      	bne.n	800aa62 <xCompareIPv6_Address+0x10e>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d022      	beq.n	800aa62 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f003 0307 	and.w	r3, r3, #7
 800aa22:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f1c3 0308 	rsb	r3, r3, #8
 800aa2a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	fa02 f303 	lsl.w	r3, r2, r3
 800aa34:	3b01      	subs	r3, #1
 800aa36:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	43db      	mvns	r3, r3
 800aa3e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	4413      	add	r3, r2
 800aa46:	781a      	ldrb	r2, [r3, #0]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	440b      	add	r3, r1
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	4053      	eors	r3, r2
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	7cfb      	ldrb	r3, [r7, #19]
 800aa56:	4013      	ands	r3, r2
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800aa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3728      	adds	r7, #40	@ 0x28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	08026f58 	.word	0x08026f58

0800aa70 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d10c      	bne.n	800aaa0 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8e:	4619      	mov	r1, r3
 800aa90:	4610      	mov	r0, r2
 800aa92:	f7ff fdfd 	bl	800a690 <xCheckIPv6SizeFields>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d001      	beq.n	800aaa0 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	460a      	mov	r2, r1
 800aab6:	71fb      	strb	r3, [r7, #7]
 800aab8:	4613      	mov	r3, r2
 800aaba:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	2b87      	cmp	r3, #135	@ 0x87
 800aac0:	d04b      	beq.n	800ab5a <xGetExtensionOrder+0xae>
 800aac2:	2b87      	cmp	r3, #135	@ 0x87
 800aac4:	dc4c      	bgt.n	800ab60 <xGetExtensionOrder+0xb4>
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d030      	beq.n	800ab2c <xGetExtensionOrder+0x80>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	db48      	blt.n	800ab60 <xGetExtensionOrder+0xb4>
 800aace:	2b3c      	cmp	r3, #60	@ 0x3c
 800aad0:	dc46      	bgt.n	800ab60 <xGetExtensionOrder+0xb4>
 800aad2:	2b2b      	cmp	r3, #43	@ 0x2b
 800aad4:	db44      	blt.n	800ab60 <xGetExtensionOrder+0xb4>
 800aad6:	3b2b      	subs	r3, #43	@ 0x2b
 800aad8:	2b11      	cmp	r3, #17
 800aada:	d841      	bhi.n	800ab60 <xGetExtensionOrder+0xb4>
 800aadc:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <xGetExtensionOrder+0x38>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab43 	.word	0x0800ab43
 800aae8:	0800ab49 	.word	0x0800ab49
 800aaec:	0800ab61 	.word	0x0800ab61
 800aaf0:	0800ab61 	.word	0x0800ab61
 800aaf4:	0800ab61 	.word	0x0800ab61
 800aaf8:	0800ab61 	.word	0x0800ab61
 800aafc:	0800ab61 	.word	0x0800ab61
 800ab00:	0800ab55 	.word	0x0800ab55
 800ab04:	0800ab4f 	.word	0x0800ab4f
 800ab08:	0800ab61 	.word	0x0800ab61
 800ab0c:	0800ab61 	.word	0x0800ab61
 800ab10:	0800ab61 	.word	0x0800ab61
 800ab14:	0800ab61 	.word	0x0800ab61
 800ab18:	0800ab61 	.word	0x0800ab61
 800ab1c:	0800ab61 	.word	0x0800ab61
 800ab20:	0800ab61 	.word	0x0800ab61
 800ab24:	0800ab61 	.word	0x0800ab61
 800ab28:	0800ab33 	.word	0x0800ab33
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]
            break;
 800ab30:	e01b      	b.n	800ab6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800ab32:	2307      	movs	r3, #7
 800ab34:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800ab36:	79bb      	ldrb	r3, [r7, #6]
 800ab38:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab3a:	d115      	bne.n	800ab68 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800ab40:	e012      	b.n	800ab68 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800ab42:	2303      	movs	r3, #3
 800ab44:	60fb      	str	r3, [r7, #12]
            break;
 800ab46:	e010      	b.n	800ab6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800ab48:	2304      	movs	r3, #4
 800ab4a:	60fb      	str	r3, [r7, #12]
            break;
 800ab4c:	e00d      	b.n	800ab6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800ab4e:	2305      	movs	r3, #5
 800ab50:	60fb      	str	r3, [r7, #12]
            break;
 800ab52:	e00a      	b.n	800ab6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800ab54:	2306      	movs	r3, #6
 800ab56:	60fb      	str	r3, [r7, #12]
            break;
 800ab58:	e007      	b.n	800ab6a <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800ab5a:	2308      	movs	r3, #8
 800ab5c:	60fb      	str	r3, [r7, #12]
            break;
 800ab5e:	e004      	b.n	800ab6a <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800ab60:	f04f 33ff 	mov.w	r3, #4294967295
 800ab64:	60fb      	str	r3, [r7, #12]
            break;
 800ab66:	e000      	b.n	800ab6a <xGetExtensionOrder+0xbe>
            break;
 800ab68:	bf00      	nop
    }

    return xReturn;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08e      	sub	sp, #56	@ 0x38
 800ab7c:	af02      	add	r7, sp, #8
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab92:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abac:	f107 020b 	add.w	r2, r7, #11
 800abb0:	4619      	mov	r1, r3
 800abb2:	f000 faa5 	bl	800b100 <usGetExtensionHeaderLength>
 800abb6:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	3336      	adds	r3, #54	@ 0x36
 800abbc:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d243      	bcs.n	800ac4e <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	8a5b      	ldrh	r3, [r3, #18]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	b21a      	sxth	r2, r3
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	8a5b      	ldrh	r3, [r3, #18]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	b29b      	uxth	r3, r3
 800abda:	b21b      	sxth	r3, r3
 800abdc:	4313      	orrs	r3, r2
 800abde:	b21b      	sxth	r3, r3
 800abe0:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800abe2:	8afb      	ldrh	r3, [r7, #22]
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d231      	bcs.n	800ac4e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d12e      	bne.n	800ac4e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800abf0:	7afa      	ldrb	r2, [r7, #11]
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfa:	3336      	adds	r3, #54	@ 0x36
 800abfc:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	4413      	add	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800ac08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800ac10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac12:	68f9      	ldr	r1, [r7, #12]
 800ac14:	6938      	ldr	r0, [r7, #16]
 800ac16:	f018 f800 	bl	8022c1a <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	1ad2      	subs	r2, r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	8afa      	ldrh	r2, [r7, #22]
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800ac30:	8afb      	ldrh	r3, [r7, #22]
 800ac32:	021b      	lsls	r3, r3, #8
 800ac34:	b21a      	sxth	r2, r3
 800ac36:	8afb      	ldrh	r3, [r7, #22]
 800ac38:	0a1b      	lsrs	r3, r3, #8
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	b21b      	sxth	r3, r3
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	b21b      	sxth	r3, r3
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800ac4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <eHandleIPv6ExtensionHeaders+0xe2>
 800ac56:	4910      	ldr	r1, [pc, #64]	@ (800ac98 <eHandleIPv6ExtensionHeaders+0x120>)
 800ac58:	e000      	b.n	800ac5c <eHandleIPv6ExtensionHeaders+0xe4>
 800ac5a:	4910      	ldr	r1, [pc, #64]	@ (800ac9c <eHandleIPv6ExtensionHeaders+0x124>)
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	8a5b      	ldrh	r3, [r3, #18]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	b21a      	sxth	r2, r3
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	8a5b      	ldrh	r3, [r3, #18]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	0a1b      	lsrs	r3, r3, #8
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	b21b      	sxth	r3, r3
 800ac72:	4313      	orrs	r3, r2
 800ac74:	b21b      	sxth	r3, r3
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	9200      	str	r2, [sp, #0]
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac86:	4806      	ldr	r0, [pc, #24]	@ (800aca0 <eHandleIPv6ExtensionHeaders+0x128>)
 800ac88:	f016 fe06 	bl	8021898 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800ac8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3730      	adds	r7, #48	@ 0x30
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	08024728 	.word	0x08024728
 800ac9c:	08024730 	.word	0x08024730
 800aca0:	08024734 	.word	0x08024734

0800aca4 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d026      	beq.n	800ad06 <pxTCPSocketLookup_IPv6+0x62>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d023      	beq.n	800ad06 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7a1b      	ldrb	r3, [r3, #8]
 800acc2:	f003 0301 	and.w	r3, r3, #1
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d010      	beq.n	800acee <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d018      	beq.n	800ad06 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3354      	adds	r3, #84	@ 0x54
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	2210      	movs	r2, #16
 800acdc:	4618      	mov	r0, r3
 800acde:	f017 ff8c 	bl	8022bfa <memcmp>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10e      	bne.n	800ad06 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	e00b      	b.n	800ad06 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d107      	bne.n	800ad06 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d101      	bne.n	800ad06 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800ad06:	68fb      	ldr	r3, [r7, #12]
    }
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d103      	bne.n	800ad34 <xSend_UDP_Update_IPv6+0x24>
 800ad2c:	2173      	movs	r1, #115	@ 0x73
 800ad2e:	4811      	ldr	r0, [pc, #68]	@ (800ad74 <xSend_UDP_Update_IPv6+0x64>)
 800ad30:	f7f6 fc92 	bl	8001658 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	2210      	movs	r2, #16
 800ad40:	4619      	mov	r1, r3
 800ad42:	f016 ffc5 	bl	8021cd0 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f103 0014 	add.w	r0, r3, #20
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	3308      	adds	r3, #8
 800ad50:	2210      	movs	r2, #16
 800ad52:	4619      	mov	r1, r3
 800ad54:	f016 ffbc 	bl	8021cd0 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800ad60:	731a      	strb	r2, [r3, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800ad68:	735a      	strb	r2, [r3, #13]

    return NULL;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	0802478c 	.word	0x0802478c

0800ad78 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800ad82:	2330      	movs	r3, #48	@ 0x30
 800ad84:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800ad86:	88fb      	ldrh	r3, [r7, #6]
 800ad88:	2b09      	cmp	r3, #9
 800ad8a:	d805      	bhi.n	800ad98 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800ad8c:	88fb      	ldrh	r3, [r7, #6]
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	4413      	add	r3, r2
 800ad94:	73fb      	strb	r3, [r7, #15]
 800ad96:	e010      	b.n	800adba <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800ad98:	88fb      	ldrh	r3, [r7, #6]
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d809      	bhi.n	800adb2 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800ad9e:	2361      	movs	r3, #97	@ 0x61
 800ada0:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800ada2:	88fb      	ldrh	r3, [r7, #6]
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	4413      	add	r3, r2
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	3b0a      	subs	r3, #10
 800adae:	73fb      	strb	r3, [r7, #15]
 800adb0:	e003      	b.n	800adba <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800adb2:	21b3      	movs	r1, #179	@ 0xb3
 800adb4:	4803      	ldr	r0, [pc, #12]	@ (800adc4 <cHexToChar+0x4c>)
 800adb6:	f7f6 fc4f 	bl	8001658 <vAssertCalled>
    }

    return cReturn;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	0802478c 	.word	0x0802478c

0800adc8 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800adc8:	b590      	push	{r4, r7, lr}
 800adca:	b08b      	sub	sp, #44	@ 0x2c
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800add6:	2304      	movs	r3, #4
 800add8:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800ade6:	2300      	movs	r3, #0
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adea:	e026      	b.n	800ae3a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800adec:	8bfb      	ldrh	r3, [r7, #30]
 800adee:	0b1b      	lsrs	r3, r3, #12
 800adf0:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800adf2:	8a7b      	ldrh	r3, [r7, #18]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800adf8:	2301      	movs	r3, #1
 800adfa:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d104      	bne.n	800ae0c <uxHexPrintShort+0x44>
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d110      	bne.n	800ae2e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	6a3a      	ldr	r2, [r7, #32]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d216      	bcs.n	800ae44 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	18d4      	adds	r4, r2, r3
 800ae1c:	8a7b      	ldrh	r3, [r7, #18]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff ffaa 	bl	800ad78 <cHexToChar>
 800ae24:	4603      	mov	r3, r0
 800ae26:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800ae2e:	8bfb      	ldrh	r3, [r7, #30]
 800ae30:	011b      	lsls	r3, r3, #4
 800ae32:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800ae34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae36:	3301      	adds	r3, #1
 800ae38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d3d4      	bcc.n	800adec <uxHexPrintShort+0x24>
 800ae42:	e000      	b.n	800ae46 <uxHexPrintShort+0x7e>
                break;
 800ae44:	bf00      	nop
    }

    return uxIndex;
 800ae46:	6a3b      	ldr	r3, [r7, #32]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	372c      	adds	r7, #44	@ 0x2c
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd90      	pop	{r4, r7, pc}

0800ae50 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b089      	sub	sp, #36	@ 0x24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800ae58:	2300      	movs	r3, #0
 800ae5a:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800ae64:	2308      	movs	r3, #8
 800ae66:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6e:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800ae70:	e02c      	b.n	800aecc <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	4413      	add	r3, r2
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800ae80:	89fb      	ldrh	r3, [r7, #14]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d107      	bne.n	800ae96 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	3301      	adds	r3, #1
 800ae94:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800ae96:	89fb      	ldrh	r3, [r7, #14]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <prv_ntop6_search_zeros+0x56>
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	69fa      	ldr	r2, [r7, #28]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d10f      	bne.n	800aec6 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	dd0a      	ble.n	800aec2 <prv_ntop6_search_zeros+0x72>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	dd05      	ble.n	800aec2 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	3301      	adds	r3, #1
 800aeca:	61fb      	str	r3, [r7, #28]
 800aecc:	69fa      	ldr	r2, [r7, #28]
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	dbce      	blt.n	800ae72 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop
 800aed8:	3724      	adds	r7, #36	@ 0x24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800aee2:	b480      	push	{r7}
 800aee4:	b087      	sub	sp, #28
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800aeee:	2301      	movs	r3, #1
 800aef0:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800aef2:	2308      	movs	r3, #8
 800aef4:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	691a      	ldr	r2, [r3, #16]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	429a      	cmp	r2, r3
 800af00:	d827      	bhi.n	800af52 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	4413      	add	r3, r2
 800af0a:	223a      	movs	r2, #58	@ 0x3a
 800af0c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68da      	ldr	r2, [r3, #12]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	4413      	add	r3, r2
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	429a      	cmp	r2, r3
 800af26:	d116      	bne.n	800af56 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	691a      	ldr	r2, [r3, #16]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	3b01      	subs	r3, #1
 800af30:	429a      	cmp	r2, r3
 800af32:	d80b      	bhi.n	800af4c <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	223a      	movs	r2, #58	@ 0x3a
 800af3e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	611a      	str	r2, [r3, #16]
 800af4a:	e004      	b.n	800af56 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	e001      	b.n	800af56 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800af52:	2300      	movs	r3, #0
 800af54:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800af56:	697b      	ldr	r3, [r7, #20]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800af64:	b590      	push	{r4, r7, lr}
 800af66:	b089      	sub	sp, #36	@ 0x24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800af70:	2301      	movs	r3, #1
 800af72:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800af74:	2304      	movs	r3, #4
 800af76:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dd13      	ble.n	800afa8 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	691a      	ldr	r2, [r3, #16]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	3b01      	subs	r3, #1
 800af88:	429a      	cmp	r2, r3
 800af8a:	d302      	bcc.n	800af92 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800af8c:	2300      	movs	r3, #0
 800af8e:	61fb      	str	r3, [r7, #28]
 800af90:	e00a      	b.n	800afa8 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	4413      	add	r3, r2
 800af9a:	223a      	movs	r2, #58	@ 0x3a
 800af9c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d130      	bne.n	800b010 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	691a      	ldr	r2, [r3, #16]
 800afb2:	68b9      	ldr	r1, [r7, #8]
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	1acb      	subs	r3, r1, r3
 800afb8:	429a      	cmp	r2, r3
 800afba:	d827      	bhi.n	800b00c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	18d0      	adds	r0, r2, r3
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	4413      	add	r3, r2
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	021b      	lsls	r3, r3, #8
 800afd8:	b21a      	sxth	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6819      	ldr	r1, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	440b      	add	r3, r1
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	0a1b      	lsrs	r3, r3, #8
 800afea:	b29b      	uxth	r3, r3
 800afec:	b21b      	sxth	r3, r3
 800afee:	4313      	orrs	r3, r2
 800aff0:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	461a      	mov	r2, r3
 800aff6:	4621      	mov	r1, r4
 800aff8:	f7ff fee6 	bl	800adc8 <uxHexPrintShort>
 800affc:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691a      	ldr	r2, [r3, #16]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	441a      	add	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	611a      	str	r2, [r3, #16]
 800b00a:	e001      	b.n	800b010 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b010:	69fb      	ldr	r3, [r7, #28]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3724      	adds	r7, #36	@ 0x24
 800b016:	46bd      	mov	sp, r7
 800b018:	bd90      	pop	{r4, r7, pc}

0800b01a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b08a      	sub	sp, #40	@ 0x28
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800b026:	f107 0310 	add.w	r3, r7, #16
 800b02a:	2214      	movs	r2, #20
 800b02c:	2100      	movs	r1, #0
 800b02e:	4618      	mov	r0, r3
 800b030:	f016 ff5b 	bl	8021eea <memset>

    xSet.pusAddress = pvSource;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d92c      	bls.n	800b098 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800b03e:	f107 0310 	add.w	r3, r7, #16
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff ff04 	bl	800ae50 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800b048:	e01f      	b.n	800b08a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800b04a:	69fa      	ldr	r2, [r7, #28]
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d10e      	bne.n	800b070 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b052:	f107 0310 	add.w	r3, r7, #16
 800b056:	461a      	mov	r2, r3
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	68b8      	ldr	r0, [r7, #8]
 800b05c:	f7ff ff41 	bl	800aee2 <prv_ntop6_write_zeros>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d015      	beq.n	800b092 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	4413      	add	r3, r2
 800b06c:	61fb      	str	r3, [r7, #28]
 800b06e:	e00c      	b.n	800b08a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b070:	f107 0310 	add.w	r3, r7, #16
 800b074:	461a      	mov	r2, r3
 800b076:	6879      	ldr	r1, [r7, #4]
 800b078:	68b8      	ldr	r0, [r7, #8]
 800b07a:	f7ff ff73 	bl	800af64 <prv_ntop6_write_short>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d008      	beq.n	800b096 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	3301      	adds	r3, #1
 800b088:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	2b07      	cmp	r3, #7
 800b08e:	dddc      	ble.n	800b04a <FreeRTOS_inet_ntop6+0x30>
 800b090:	e002      	b.n	800b098 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b092:	bf00      	nop
 800b094:	e000      	b.n	800b098 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b096:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	2b07      	cmp	r3, #7
 800b09c:	dc02      	bgt.n	800b0a4 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0a2:	e006      	b.n	800b0b2 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3728      	adds	r7, #40	@ 0x28
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2233      	movs	r2, #51	@ 0x33
 800b0ca:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2233      	movs	r2, #51	@ 0x33
 800b0d0:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	7b1a      	ldrb	r2, [r3, #12]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	7b5a      	ldrb	r2, [r3, #13]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	7b9a      	ldrb	r2, [r3, #14]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	7bda      	ldrb	r2, [r3, #15]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	715a      	strb	r2, [r3, #5]
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
	...

0800b100 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b08e      	sub	sp, #56	@ 0x38
 800b104:	af02      	add	r7, sp, #8
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800b112:	2336      	movs	r3, #54	@ 0x36
 800b114:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800b116:	2300      	movs	r3, #0
 800b118:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 808c 	beq.w	800b246 <usGetExtensionHeaderLength+0x146>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 8088 	beq.w	800b246 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	7d1b      	ldrb	r3, [r3, #20]
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800b142:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b146:	2100      	movs	r1, #0
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fcaf 	bl	800aaac <xGetExtensionOrder>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	dd72      	ble.n	800b23a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b154:	e06b      	b.n	800b22e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15a:	4413      	add	r3, r2
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800b162:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b166:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b16a:	4611      	mov	r1, r2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff fc9d 	bl	800aaac <xGetExtensionOrder>
 800b172:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800b174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b176:	3301      	adds	r3, #1
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4413      	add	r3, r2
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	3301      	adds	r3, #1
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800b188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	4413      	add	r3, r2
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	429a      	cmp	r2, r3
 800b192:	d806      	bhi.n	800b1a2 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	69fa      	ldr	r2, [r7, #28]
 800b198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b19a:	482d      	ldr	r0, [pc, #180]	@ (800b250 <usGetExtensionHeaderLength+0x150>)
 800b19c:	f016 fb7c 	bl	8021898 <lUDPLoggingPrintf>
                    break;
 800b1a0:	e051      	b.n	800b246 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800b1a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800b1aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1ae:	2b06      	cmp	r3, #6
 800b1b0:	d007      	beq.n	800b1c2 <usGetExtensionHeaderLength+0xc2>
 800b1b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1b6:	2b11      	cmp	r3, #17
 800b1b8:	d003      	beq.n	800b1c2 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800b1ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1be:	2b3a      	cmp	r3, #58	@ 0x3a
 800b1c0:	d10d      	bne.n	800b1de <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800b1c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4822      	ldr	r0, [pc, #136]	@ (800b254 <usGetExtensionHeaderLength+0x154>)
 800b1ca:	f016 fb65 	bl	8021898 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800b1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d0:	3b36      	subs	r3, #54	@ 0x36
 800b1d2:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b1da:	701a      	strb	r2, [r3, #0]
                    break;
 800b1dc:	e033      	b.n	800b246 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	4413      	add	r3, r2
 800b1e4:	781a      	ldrb	r2, [r3, #0]
 800b1e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fc5d 	bl	800aaac <xGetExtensionOrder>
 800b1f2:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800b1f4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800b1f8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	4613      	mov	r3, r2
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	4814      	ldr	r0, [pc, #80]	@ (800b258 <usGetExtensionHeaderLength+0x158>)
 800b206:	f016 fb47 	bl	8021898 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d103      	bne.n	800b218 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800b210:	4812      	ldr	r0, [pc, #72]	@ (800b25c <usGetExtensionHeaderLength+0x15c>)
 800b212:	f016 fb41 	bl	8021898 <lUDPLoggingPrintf>
                    break;
 800b216:	e016      	b.n	800b246 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	da03      	bge.n	800b226 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800b21e:	4810      	ldr	r0, [pc, #64]	@ (800b260 <usGetExtensionHeaderLength+0x160>)
 800b220:	f016 fb3a 	bl	8021898 <lUDPLoggingPrintf>
                    break;
 800b224:	e00f      	b.n	800b246 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800b226:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b22a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	3308      	adds	r3, #8
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	429a      	cmp	r2, r3
 800b236:	d88e      	bhi.n	800b156 <usGetExtensionHeaderLength+0x56>
 800b238:	e005      	b.n	800b246 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b240:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800b246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3730      	adds	r7, #48	@ 0x30
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	080247d4 	.word	0x080247d4
 800b254:	0802481c 	.word	0x0802481c
 800b258:	08024830 	.word	0x08024830
 800b25c:	08024858 	.word	0x08024858
 800b260:	080248b8 	.word	0x080248b8

0800b264 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d104      	bne.n	800b27e <vManageSolicitedNodeAddress+0x1a>
 800b274:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800b278:	482d      	ldr	r0, [pc, #180]	@ (800b330 <vManageSolicitedNodeAddress+0xcc>)
 800b27a:	f7f6 f9ed 	bl	8001658 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <vManageSolicitedNodeAddress+0x2e>
 800b288:	f240 1133 	movw	r1, #307	@ 0x133
 800b28c:	4828      	ldr	r0, [pc, #160]	@ (800b330 <vManageSolicitedNodeAddress+0xcc>)
 800b28e:	f7f6 f9e3 	bl	8001658 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3338      	adds	r3, #56	@ 0x38
 800b296:	4618      	mov	r0, r3
 800b298:	f002 f9c2 	bl	800d620 <xIPv6_GetIPType>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d005      	beq.n	800b2b2 <vManageSolicitedNodeAddress+0x4e>
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d002      	beq.n	800b2b2 <vManageSolicitedNodeAddress+0x4e>
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d138      	bne.n	800b324 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b2b2:	2333      	movs	r3, #51	@ 0x33
 800b2b4:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b2b6:	2333      	movs	r3, #51	@ 0x33
 800b2b8:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800b2ba:	23ff      	movs	r3, #255	@ 0xff
 800b2bc:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2c4:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b2cc:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b2d4:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d111      	bne.n	800b300 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01e      	beq.n	800b326 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b2f6:	f107 0108 	add.w	r1, r7, #8
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800b2fe:	e012      	b.n	800b326 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00c      	beq.n	800b326 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b31a:	f107 0108 	add.w	r1, r7, #8
 800b31e:	4610      	mov	r0, r2
 800b320:	4798      	blx	r3
}
 800b322:	e000      	b.n	800b326 <vManageSolicitedNodeAddress+0xc2>
            break;
 800b324:	bf00      	nop
}
 800b326:	bf00      	nop
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	080248dc 	.word	0x080248dc

0800b334 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b33a:	2000      	movs	r0, #0
 800b33c:	f001 fd8c 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	e016      	b.n	800b372 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b00      	cmp	r3, #0
 800b352:	d009      	beq.n	800b368 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3338      	adds	r3, #56	@ 0x38
 800b358:	4618      	mov	r0, r3
 800b35a:	f002 f961 	bl	800d620 <xIPv6_GetIPType>
 800b35e:	4603      	mov	r3, r0
 800b360:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800b362:	78fb      	ldrb	r3, [r7, #3]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d008      	beq.n	800b37a <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	2000      	movs	r0, #0
 800b36c:	f001 fd96 	bl	800ce9c <FreeRTOS_NextEndPoint>
 800b370:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e5      	bne.n	800b344 <pxFindLocalEndpoint+0x10>
 800b378:	e000      	b.n	800b37c <pxFindLocalEndpoint+0x48>
                {
                    break;
 800b37a:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800b37c:	687b      	ldr	r3, [r7, #4]
    }
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800b386:	b580      	push	{r7, lr}
 800b388:	b086      	sub	sp, #24
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff faa8 	bl	800a8e8 <xIsIPv6AllowedMulticast>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00e      	beq.n	800b3bc <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7ff fe8b 	bl	800b0bc <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d004      	beq.n	800b3b6 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800b3ac:	f7ff ffc2 	bl	800b334 <pxFindLocalEndpoint>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	75fb      	strb	r3, [r7, #23]
 800b3ba:	e001      	b.n	800b3c0 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	68b9      	ldr	r1, [r7, #8]
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7ff ffd2 	bl	800b386 <prvMACResolve>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800b3e6:	7ffb      	ldrb	r3, [r7, #31]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d106      	bne.n	800b3fa <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	68b9      	ldr	r1, [r7, #8]
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f000 f9a9 	bl	800b748 <prvNDCacheLookup>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800b3fa:	7ffb      	ldrb	r3, [r7, #31]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d104      	bne.n	800b40a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4619      	mov	r1, r3
 800b404:	4840      	ldr	r0, [pc, #256]	@ (800b508 <eNDGetCacheEntry+0x13c>)
 800b406:	f016 fa47 	bl	8021898 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800b40a:	7ffb      	ldrb	r3, [r7, #31]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d176      	bne.n	800b4fe <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f002 f905 	bl	800d620 <xIPv6_GetIPType>
 800b416:	4603      	mov	r3, r0
 800b418:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f001 fdae 	bl	800cf7c <FreeRTOS_FindEndPointOnIP_IPv6>
 800b420:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00d      	beq.n	800b444 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800b434:	68f9      	ldr	r1, [r7, #12]
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	3338      	adds	r3, #56	@ 0x38
 800b43a:	461a      	mov	r2, r3
 800b43c:	4833      	ldr	r0, [pc, #204]	@ (800b50c <eNDGetCacheEntry+0x140>)
 800b43e:	f016 fa2b 	bl	8021898 <lUDPLoggingPrintf>
 800b442:	e05c      	b.n	800b4fe <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800b444:	7dfb      	ldrb	r3, [r7, #23]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d12b      	bne.n	800b4a2 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b44a:	2000      	movs	r0, #0
 800b44c:	f001 fd04 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 800b450:	61b8      	str	r0, [r7, #24]
 800b452:	e017      	b.n	800b484 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	3338      	adds	r3, #56	@ 0x38
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 f8e1 	bl	800d620 <xIPv6_GetIPType>
 800b45e:	4603      	mov	r3, r0
 800b460:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800b462:	7dba      	ldrb	r2, [r7, #22]
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	429a      	cmp	r2, r3
 800b468:	d107      	bne.n	800b47a <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	68b9      	ldr	r1, [r7, #8]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f000 f96a 	bl	800b748 <prvNDCacheLookup>
 800b474:	4603      	mov	r3, r0
 800b476:	77fb      	strb	r3, [r7, #31]
                            break;
 800b478:	e007      	b.n	800b48a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b47a:	69b9      	ldr	r1, [r7, #24]
 800b47c:	2000      	movs	r0, #0
 800b47e:	f001 fd0d 	bl	800ce9c <FreeRTOS_NextEndPoint>
 800b482:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1e4      	bne.n	800b454 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800b48a:	68f9      	ldr	r1, [r7, #12]
 800b48c:	7ffb      	ldrb	r3, [r7, #31]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d101      	bne.n	800b496 <eNDGetCacheEntry+0xca>
 800b492:	4b1f      	ldr	r3, [pc, #124]	@ (800b510 <eNDGetCacheEntry+0x144>)
 800b494:	e000      	b.n	800b498 <eNDGetCacheEntry+0xcc>
 800b496:	4b1f      	ldr	r3, [pc, #124]	@ (800b514 <eNDGetCacheEntry+0x148>)
 800b498:	461a      	mov	r2, r3
 800b49a:	481f      	ldr	r0, [pc, #124]	@ (800b518 <eNDGetCacheEntry+0x14c>)
 800b49c:	f016 f9fc 	bl	8021898 <lUDPLoggingPrintf>
 800b4a0:	e02d      	b.n	800b4fe <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800b4a2:	2060      	movs	r0, #96	@ 0x60
 800b4a4:	f002 f87c 	bl	800d5a0 <FreeRTOS_FindGateWay>
 800b4a8:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d026      	beq.n	800b4fe <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	335c      	adds	r3, #92	@ 0x5c
 800b4b6:	2210      	movs	r2, #16
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	f016 fc09 	bl	8021cd0 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4816      	ldr	r0, [pc, #88]	@ (800b51c <eNDGetCacheEntry+0x150>)
 800b4c4:	f016 f9e8 	bl	8021898 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	3338      	adds	r3, #56	@ 0x38
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4814      	ldr	r0, [pc, #80]	@ (800b520 <eNDGetCacheEntry+0x154>)
 800b4d0:	f016 f9e2 	bl	8021898 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	68b9      	ldr	r1, [r7, #8]
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 f935 	bl	800b748 <prvNDCacheLookup>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d006      	beq.n	800b4f8 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3338      	adds	r3, #56	@ 0x38
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	480c      	ldr	r0, [pc, #48]	@ (800b524 <eNDGetCacheEntry+0x158>)
 800b4f4:	f016 f9d0 	bl	8021898 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	69ba      	ldr	r2, [r7, #24]
 800b4fc:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800b4fe:	7ffb      	ldrb	r3, [r7, #31]
    }
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	08024910 	.word	0x08024910
 800b50c:	08024934 	.word	0x08024934
 800b510:	08024978 	.word	0x08024978
 800b514:	0802497c 	.word	0x0802497c
 800b518:	08024984 	.word	0x08024984
 800b51c:	080249ac 	.word	0x080249ac
 800b520:	080249d0 	.word	0x080249d0
 800b524:	080249f4 	.word	0x080249f4

0800b528 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800b528:	b5b0      	push	{r4, r5, r7, lr}
 800b52a:	b08e      	sub	sp, #56	@ 0x38
 800b52c:	af04      	add	r7, sp, #16
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800b534:	f04f 33ff 	mov.w	r3, #4294967295
 800b538:	623b      	str	r3, [r7, #32]
 800b53a:	f04f 33ff 	mov.w	r3, #4294967295
 800b53e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800b540:	2397      	movs	r3, #151	@ 0x97
 800b542:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b548:	2300      	movs	r3, #0
 800b54a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b54c:	e033      	b.n	800b5b6 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b54e:	4a44      	ldr	r2, [pc, #272]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	015b      	lsls	r3, r3, #5
 800b554:	4413      	add	r3, r2
 800b556:	331d      	adds	r3, #29
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d124      	bne.n	800b5b0 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b568:	623b      	str	r3, [r7, #32]
 800b56a:	e021      	b.n	800b5b0 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56e:	015b      	lsls	r3, r3, #5
 800b570:	4a3b      	ldr	r2, [pc, #236]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b572:	4413      	add	r3, r2
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	2210      	movs	r2, #16
 800b578:	4618      	mov	r0, r3
 800b57a:	f017 fb3e 	bl	8022bfa <memcmp>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d102      	bne.n	800b58a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800b584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b586:	61fb      	str	r3, [r7, #28]
                break;
 800b588:	e018      	b.n	800b5bc <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800b58a:	4a35      	ldr	r2, [pc, #212]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58e:	015b      	lsls	r3, r3, #5
 800b590:	4413      	add	r3, r2
 800b592:	331c      	adds	r3, #28
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	8b7b      	ldrh	r3, [r7, #26]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d908      	bls.n	800b5b0 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800b59e:	4a30      	ldr	r2, [pc, #192]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a2:	015b      	lsls	r3, r3, #5
 800b5a4:	4413      	add	r3, r2
 800b5a6:	331c      	adds	r3, #28
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ae:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b8:	2b17      	cmp	r3, #23
 800b5ba:	ddc8      	ble.n	800b54e <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da22      	bge.n	800b608 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	db02      	blt.n	800b5ce <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	61fb      	str	r3, [r7, #28]
 800b5cc:	e01c      	b.n	800b608 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	461c      	mov	r4, r3
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	785b      	ldrb	r3, [r3, #1]
 800b5dc:	461d      	mov	r5, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	789b      	ldrb	r3, [r3, #2]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	78db      	ldrb	r3, [r3, #3]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	791b      	ldrb	r3, [r3, #4]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	795b      	ldrb	r3, [r3, #5]
 800b5f4:	9303      	str	r3, [sp, #12]
 800b5f6:	9002      	str	r0, [sp, #8]
 800b5f8:	9101      	str	r1, [sp, #4]
 800b5fa:	9200      	str	r2, [sp, #0]
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	4622      	mov	r2, r4
 800b600:	69f9      	ldr	r1, [r7, #28]
 800b602:	4818      	ldr	r0, [pc, #96]	@ (800b664 <vNDRefreshCacheEntry+0x13c>)
 800b604:	f016 f948 	bl	8021898 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	015b      	lsls	r3, r3, #5
 800b60c:	4a14      	ldr	r2, [pc, #80]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b60e:	4413      	add	r3, r2
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	2210      	movs	r2, #16
 800b614:	4618      	mov	r0, r3
 800b616:	f016 fb5b 	bl	8021cd0 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	015b      	lsls	r3, r3, #5
 800b61e:	3310      	adds	r3, #16
 800b620:	4a0f      	ldr	r2, [pc, #60]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b622:	4413      	add	r3, r2
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	2206      	movs	r2, #6
 800b628:	4618      	mov	r0, r3
 800b62a:	f016 fb51 	bl	8021cd0 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800b62e:	4a0c      	ldr	r2, [pc, #48]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	015b      	lsls	r3, r3, #5
 800b634:	4413      	add	r3, r2
 800b636:	3318      	adds	r3, #24
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b63c:	4a08      	ldr	r2, [pc, #32]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	015b      	lsls	r3, r3, #5
 800b642:	4413      	add	r3, r2
 800b644:	331c      	adds	r3, #28
 800b646:	2296      	movs	r2, #150	@ 0x96
 800b648:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800b64a:	4a05      	ldr	r2, [pc, #20]	@ (800b660 <vNDRefreshCacheEntry+0x138>)
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	015b      	lsls	r3, r3, #5
 800b650:	4413      	add	r3, r2
 800b652:	331d      	adds	r3, #29
 800b654:	2201      	movs	r2, #1
 800b656:	701a      	strb	r2, [r3, #0]
    }
 800b658:	bf00      	nop
 800b65a:	3728      	adds	r7, #40	@ 0x28
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bdb0      	pop	{r4, r5, r7, pc}
 800b660:	20001060 	.word	0x20001060
 800b664:	08024a1c 	.word	0x08024a1c

0800b668 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	e05f      	b.n	800b734 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800b674:	2300      	movs	r3, #0
 800b676:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800b678:	4a32      	ldr	r2, [pc, #200]	@ (800b744 <vNDAgeCache+0xdc>)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	015b      	lsls	r3, r3, #5
 800b67e:	4413      	add	r3, r2
 800b680:	331c      	adds	r3, #28
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d052      	beq.n	800b72e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800b688:	4a2e      	ldr	r2, [pc, #184]	@ (800b744 <vNDAgeCache+0xdc>)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	015b      	lsls	r3, r3, #5
 800b68e:	4413      	add	r3, r2
 800b690:	331c      	adds	r3, #28
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	3b01      	subs	r3, #1
 800b696:	b2d9      	uxtb	r1, r3
 800b698:	4a2a      	ldr	r2, [pc, #168]	@ (800b744 <vNDAgeCache+0xdc>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	015b      	lsls	r3, r3, #5
 800b69e:	4413      	add	r3, r2
 800b6a0:	331c      	adds	r3, #28
 800b6a2:	460a      	mov	r2, r1
 800b6a4:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800b6a6:	4a27      	ldr	r2, [pc, #156]	@ (800b744 <vNDAgeCache+0xdc>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	015b      	lsls	r3, r3, #5
 800b6ac:	4413      	add	r3, r2
 800b6ae:	331c      	adds	r3, #28
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d109      	bne.n	800b6ca <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	015b      	lsls	r3, r3, #5
 800b6ba:	4a22      	ldr	r2, [pc, #136]	@ (800b744 <vNDAgeCache+0xdc>)
 800b6bc:	4413      	add	r3, r2
 800b6be:	2220      	movs	r2, #32
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f016 fc11 	bl	8021eea <memset>
 800b6c8:	e031      	b.n	800b72e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b6ca:	4a1e      	ldr	r2, [pc, #120]	@ (800b744 <vNDAgeCache+0xdc>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	015b      	lsls	r3, r3, #5
 800b6d0:	4413      	add	r3, r2
 800b6d2:	331d      	adds	r3, #29
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	60bb      	str	r3, [r7, #8]
 800b6de:	e009      	b.n	800b6f4 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800b6e0:	4a18      	ldr	r2, [pc, #96]	@ (800b744 <vNDAgeCache+0xdc>)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	015b      	lsls	r3, r3, #5
 800b6e6:	4413      	add	r3, r2
 800b6e8:	331c      	adds	r3, #28
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d801      	bhi.n	800b6f4 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d019      	beq.n	800b72e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b6fa:	2356      	movs	r3, #86	@ 0x56
 800b6fc:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800b6fe:	2100      	movs	r1, #0
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f00b f9b9 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 800b706:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00f      	beq.n	800b72e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800b70e:	4a0d      	ldr	r2, [pc, #52]	@ (800b744 <vNDAgeCache+0xdc>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	015b      	lsls	r3, r3, #5
 800b714:	4413      	add	r3, r2
 800b716:	3318      	adds	r3, #24
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	015b      	lsls	r3, r3, #5
 800b722:	4a08      	ldr	r2, [pc, #32]	@ (800b744 <vNDAgeCache+0xdc>)
 800b724:	4413      	add	r3, r2
 800b726:	4619      	mov	r1, r3
 800b728:	6838      	ldr	r0, [r7, #0]
 800b72a:	f000 f8bb 	bl	800b8a4 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3301      	adds	r3, #1
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b17      	cmp	r3, #23
 800b738:	dd9c      	ble.n	800b674 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20001060 	.word	0x20001060

0800b748 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800b748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74a:	b08d      	sub	sp, #52	@ 0x34
 800b74c:	af06      	add	r7, sp, #24
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800b754:	2300      	movs	r3, #0
 800b756:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b758:	2300      	movs	r3, #0
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	e04a      	b.n	800b7f4 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b75e:	4a30      	ldr	r2, [pc, #192]	@ (800b820 <prvNDCacheLookup+0xd8>)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	015b      	lsls	r3, r3, #5
 800b764:	4413      	add	r3, r2
 800b766:	331d      	adds	r3, #29
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d03f      	beq.n	800b7ee <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	015b      	lsls	r3, r3, #5
 800b772:	4a2b      	ldr	r2, [pc, #172]	@ (800b820 <prvNDCacheLookup+0xd8>)
 800b774:	4413      	add	r3, r2
 800b776:	68f9      	ldr	r1, [r7, #12]
 800b778:	2210      	movs	r2, #16
 800b77a:	4618      	mov	r0, r3
 800b77c:	f017 fa3d 	bl	8022bfa <memcmp>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d133      	bne.n	800b7ee <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b786:	68b8      	ldr	r0, [r7, #8]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	015b      	lsls	r3, r3, #5
 800b78c:	3310      	adds	r3, #16
 800b78e:	4a24      	ldr	r2, [pc, #144]	@ (800b820 <prvNDCacheLookup+0xd8>)
 800b790:	4413      	add	r3, r2
 800b792:	2206      	movs	r2, #6
 800b794:	4619      	mov	r1, r3
 800b796:	f016 fa9b 	bl	8021cd0 <memcpy>
                eReturn = eARPCacheHit;
 800b79a:	2301      	movs	r3, #1
 800b79c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d007      	beq.n	800b7b4 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800b7a4:	4a1e      	ldr	r2, [pc, #120]	@ (800b820 <prvNDCacheLookup+0xd8>)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	015b      	lsls	r3, r3, #5
 800b7aa:	4413      	add	r3, r2
 800b7ac:	3318      	adds	r3, #24
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	461e      	mov	r6, r3
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	785b      	ldrb	r3, [r3, #1]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	789b      	ldrb	r3, [r3, #2]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	78db      	ldrb	r3, [r3, #3]
 800b7cc:	461c      	mov	r4, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	461d      	mov	r5, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	795b      	ldrb	r3, [r3, #5]
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	9503      	str	r5, [sp, #12]
 800b7dc:	9402      	str	r4, [sp, #8]
 800b7de:	9001      	str	r0, [sp, #4]
 800b7e0:	9100      	str	r1, [sp, #0]
 800b7e2:	4633      	mov	r3, r6
 800b7e4:	6979      	ldr	r1, [r7, #20]
 800b7e6:	480f      	ldr	r0, [pc, #60]	@ (800b824 <prvNDCacheLookup+0xdc>)
 800b7e8:	f016 f856 	bl	8021898 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800b7ec:	e005      	b.n	800b7fa <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b17      	cmp	r3, #23
 800b7f8:	ddb1      	ble.n	800b75e <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800b7fa:	7cfb      	ldrb	r3, [r7, #19]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10a      	bne.n	800b816 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4619      	mov	r1, r3
 800b804:	4808      	ldr	r0, [pc, #32]	@ (800b828 <prvNDCacheLookup+0xe0>)
 800b806:	f016 f847 	bl	8021898 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800b816:	7cfb      	ldrb	r3, [r7, #19]
    }
 800b818:	4618      	mov	r0, r3
 800b81a:	371c      	adds	r7, #28
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b820:	20001060 	.word	0x20001060
 800b824:	08024a80 	.word	0x08024a80
 800b828:	08024ac0 	.word	0x08024ac0

0800b82c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b840:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	3316      	adds	r3, #22
 800b84c:	2210      	movs	r2, #16
 800b84e:	4619      	mov	r1, r3
 800b850:	f016 fa3e 	bl	8021cd0 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	f103 0016 	add.w	r0, r3, #22
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3338      	adds	r3, #56	@ 0x38
 800b85e:	2210      	movs	r2, #16
 800b860:	4619      	mov	r1, r3
 800b862:	f016 fa35 	bl	8021cd0 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	b29b      	uxth	r3, r3
 800b86a:	021b      	lsls	r3, r3, #8
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	0a1b      	lsrs	r3, r3, #8
 800b872:	b29b      	uxth	r3, r3
 800b874:	4313      	orrs	r3, r2
 800b876:	b29a      	uxth	r2, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800b894:	2100      	movs	r1, #0
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7fd fe46 	bl	8009528 <vReturnEthernetFrame>
    }
 800b89c:	bf00      	nop
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800b8a4:	b5b0      	push	{r4, r5, r7, lr}
 800b8a6:	b090      	sub	sp, #64	@ 0x40
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b2:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800b8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80c1 	beq.w	800ba4a <vNDSendNeighbourSolicitation+0x1a6>
 800b8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ca:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b8ce:	f003 0304 	and.w	r3, r3, #4
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 80b8 	beq.w	800ba4a <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b8da:	2356      	movs	r3, #86	@ 0x56
 800b8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800b8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d909      	bls.n	800b8fc <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800b8e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b8ec:	f7fe f9ce 	bl	8009c8c <pxDuplicateNetworkBufferWithDescriptor>
 800b8f0:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b8f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b8f4:	f00b f928 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800b8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 80a3 	beq.w	800ba4a <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800b904:	2320      	movs	r3, #32
 800b906:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800b908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b910:	3336      	adds	r3, #54	@ 0x36
 800b912:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800b914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b918:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800b91a:	2333      	movs	r3, #51	@ 0x33
 800b91c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800b91e:	2333      	movs	r3, #51	@ 0x33
 800b920:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800b922:	23ff      	movs	r3, #255	@ 0xff
 800b924:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	7b5b      	ldrb	r3, [r3, #13]
 800b92a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	7b9b      	ldrb	r3, [r3, #14]
 800b930:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	7bdb      	ldrb	r3, [r3, #15]
 800b936:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93a:	3306      	adds	r3, #6
 800b93c:	461a      	mov	r2, r3
 800b93e:	f107 0308 	add.w	r3, r7, #8
 800b942:	6818      	ldr	r0, [r3, #0]
 800b944:	6010      	str	r0, [r2, #0]
 800b946:	889b      	ldrh	r3, [r3, #4]
 800b948:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b94a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94e:	33e8      	adds	r3, #232	@ 0xe8
 800b950:	2206      	movs	r2, #6
 800b952:	4619      	mov	r1, r3
 800b954:	f016 f9bc 	bl	8021cd0 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	2200      	movs	r2, #0
 800b95c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b960:	731a      	strb	r2, [r3, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b968:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96c:	2260      	movs	r2, #96	@ 0x60
 800b96e:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	2200      	movs	r2, #0
 800b974:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	2200      	movs	r2, #0
 800b97a:	741a      	strb	r2, [r3, #16]
 800b97c:	2200      	movs	r2, #0
 800b97e:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800b980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b982:	b29b      	uxth	r3, r3
 800b984:	021b      	lsls	r3, r3, #8
 800b986:	b29a      	uxth	r2, r3
 800b988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98a:	0a1b      	lsrs	r3, r3, #8
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	4313      	orrs	r3, r2
 800b990:	b29a      	uxth	r2, r3
 800b992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b994:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	223a      	movs	r2, #58	@ 0x3a
 800b99a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800b99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99e:	22ff      	movs	r2, #255	@ 0xff
 800b9a0:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a4:	f103 0016 	add.w	r0, r3, #22
 800b9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9aa:	3338      	adds	r3, #56	@ 0x38
 800b9ac:	2210      	movs	r2, #16
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	f016 f98e 	bl	8021cd0 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800b9b4:	f107 0310 	add.w	r3, r7, #16
 800b9b8:	2210      	movs	r2, #16
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f016 fa94 	bl	8021eea <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800b9c2:	23ff      	movs	r3, #255	@ 0xff
 800b9c4:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800b9ce:	23ff      	movs	r3, #255	@ 0xff
 800b9d0:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	7b5b      	ldrb	r3, [r3, #13]
 800b9d6:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	7b9b      	ldrb	r3, [r3, #14]
 800b9dc:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	7bdb      	ldrb	r3, [r3, #15]
 800b9e2:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e6:	3326      	adds	r3, #38	@ 0x26
 800b9e8:	461d      	mov	r5, r3
 800b9ea:	f107 0410 	add.w	r4, r7, #16
 800b9ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9f0:	6028      	str	r0, [r5, #0]
 800b9f2:	6069      	str	r1, [r5, #4]
 800b9f4:	60aa      	str	r2, [r5, #8]
 800b9f6:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	6a38      	ldr	r0, [r7, #32]
 800b9fe:	f016 fa74 	bl	8021eea <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	2287      	movs	r2, #135	@ 0x87
 800ba06:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	6839      	ldr	r1, [r7, #0]
 800ba0e:	2210      	movs	r2, #16
 800ba10:	4618      	mov	r0, r3
 800ba12:	f016 f95d 	bl	8021cd0 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800ba16:	6a3b      	ldr	r3, [r7, #32]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	f103 001a 	add.w	r0, r3, #26
 800ba28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2a:	33e8      	adds	r3, #232	@ 0xe8
 800ba2c:	2206      	movs	r2, #6
 800ba2e:	4619      	mov	r1, r3
 800ba30:	f016 f94e 	bl	8021cd0 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	2200      	movs	r2, #0
 800ba38:	709a      	strb	r2, [r3, #2]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800ba3e:	2101      	movs	r1, #1
 800ba40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba42:	f7fd fd71 	bl	8009528 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800ba46:	2301      	movs	r3, #1
 800ba48:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800ba4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d005      	beq.n	800ba5c <vNDSendNeighbourSolicitation+0x1b8>
 800ba50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d102      	bne.n	800ba5c <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800ba56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba58:	f00b f876 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800ba5c:	bf00      	nop
 800ba5e:	3740      	adds	r7, #64	@ 0x40
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bdb0      	pop	{r4, r5, r7, pc}

0800ba64 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	dc29      	bgt.n	800bac8 <pcMessageType+0x64>
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	dc19      	bgt.n	800baac <pcMessageType+0x48>
 800ba78:	e049      	b.n	800bb0e <pcMessageType+0xaa>
 800ba7a:	3b80      	subs	r3, #128	@ 0x80
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	d846      	bhi.n	800bb0e <pcMessageType+0xaa>
 800ba80:	a201      	add	r2, pc, #4	@ (adr r2, 800ba88 <pcMessageType+0x24>)
 800ba82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba86:	bf00      	nop
 800ba88:	0800baeb 	.word	0x0800baeb
 800ba8c:	0800baf1 	.word	0x0800baf1
 800ba90:	0800bb0f 	.word	0x0800bb0f
 800ba94:	0800bb0f 	.word	0x0800bb0f
 800ba98:	0800bb0f 	.word	0x0800bb0f
 800ba9c:	0800baf7 	.word	0x0800baf7
 800baa0:	0800bafd 	.word	0x0800bafd
 800baa4:	0800bb03 	.word	0x0800bb03
 800baa8:	0800bb09 	.word	0x0800bb09
 800baac:	3b01      	subs	r3, #1
 800baae:	2b03      	cmp	r3, #3
 800bab0:	d82d      	bhi.n	800bb0e <pcMessageType+0xaa>
 800bab2:	a201      	add	r2, pc, #4	@ (adr r2, 800bab8 <pcMessageType+0x54>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bad3 	.word	0x0800bad3
 800babc:	0800bad9 	.word	0x0800bad9
 800bac0:	0800badf 	.word	0x0800badf
 800bac4:	0800bae5 	.word	0x0800bae5
 800bac8:	2b88      	cmp	r3, #136	@ 0x88
 800baca:	dc20      	bgt.n	800bb0e <pcMessageType+0xaa>
 800bacc:	2b80      	cmp	r3, #128	@ 0x80
 800bace:	dad4      	bge.n	800ba7a <pcMessageType+0x16>
 800bad0:	e01d      	b.n	800bb0e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800bad2:	4b14      	ldr	r3, [pc, #80]	@ (800bb24 <pcMessageType+0xc0>)
 800bad4:	60fb      	str	r3, [r7, #12]
                    break;
 800bad6:	e01d      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800bad8:	4b13      	ldr	r3, [pc, #76]	@ (800bb28 <pcMessageType+0xc4>)
 800bada:	60fb      	str	r3, [r7, #12]
                    break;
 800badc:	e01a      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800bade:	4b13      	ldr	r3, [pc, #76]	@ (800bb2c <pcMessageType+0xc8>)
 800bae0:	60fb      	str	r3, [r7, #12]
                    break;
 800bae2:	e017      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800bae4:	4b12      	ldr	r3, [pc, #72]	@ (800bb30 <pcMessageType+0xcc>)
 800bae6:	60fb      	str	r3, [r7, #12]
                    break;
 800bae8:	e014      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800baea:	4b12      	ldr	r3, [pc, #72]	@ (800bb34 <pcMessageType+0xd0>)
 800baec:	60fb      	str	r3, [r7, #12]
                    break;
 800baee:	e011      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800baf0:	4b11      	ldr	r3, [pc, #68]	@ (800bb38 <pcMessageType+0xd4>)
 800baf2:	60fb      	str	r3, [r7, #12]
                    break;
 800baf4:	e00e      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800baf6:	4b11      	ldr	r3, [pc, #68]	@ (800bb3c <pcMessageType+0xd8>)
 800baf8:	60fb      	str	r3, [r7, #12]
                    break;
 800bafa:	e00b      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800bafc:	4b10      	ldr	r3, [pc, #64]	@ (800bb40 <pcMessageType+0xdc>)
 800bafe:	60fb      	str	r3, [r7, #12]
                    break;
 800bb00:	e008      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800bb02:	4b10      	ldr	r3, [pc, #64]	@ (800bb44 <pcMessageType+0xe0>)
 800bb04:	60fb      	str	r3, [r7, #12]
                    break;
 800bb06:	e005      	b.n	800bb14 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800bb08:	4b0f      	ldr	r3, [pc, #60]	@ (800bb48 <pcMessageType+0xe4>)
 800bb0a:	60fb      	str	r3, [r7, #12]
                    break;
 800bb0c:	e002      	b.n	800bb14 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800bb0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb4c <pcMessageType+0xe8>)
 800bb10:	60fb      	str	r3, [r7, #12]
                    break;
 800bb12:	bf00      	nop
            }

            return pcReturn;
 800bb14:	68fb      	ldr	r3, [r7, #12]
        }
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	08024b88 	.word	0x08024b88
 800bb28:	08024b9c 	.word	0x08024b9c
 800bb2c:	08024bac 	.word	0x08024bac
 800bb30:	08024bbc 	.word	0x08024bbc
 800bb34:	08024bd0 	.word	0x08024bd0
 800bb38:	08024be0 	.word	0x08024be0
 800bb3c:	08024bec 	.word	0x08024bec
 800bb40:	08024bf8 	.word	0x08024bf8
 800bb44:	08024c04 	.word	0x08024c04
 800bb48:	08024c14 	.word	0x08024c14
 800bb4c:	08024c24 	.word	0x08024c24

0800bb50 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b088      	sub	sp, #32
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800bb58:	4b19      	ldr	r3, [pc, #100]	@ (800bbc0 <prvCheckWaitingBuffer+0x70>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5e:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	330e      	adds	r3, #14
 800bb64:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	3308      	adds	r3, #8
 800bb6c:	2210      	movs	r2, #16
 800bb6e:	4619      	mov	r1, r3
 800bb70:	f017 f843 	bl	8022bfa <memcmp>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d11d      	bne.n	800bbb6 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800bb7e:	4811      	ldr	r0, [pc, #68]	@ (800bbc4 <prvCheckWaitingBuffer+0x74>)
 800bb80:	f015 fe8a 	bl	8021898 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800bb84:	2301      	movs	r3, #1
 800bb86:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800bb88:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc0 <prvCheckWaitingBuffer+0x70>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800bb8e:	f107 030c 	add.w	r3, r7, #12
 800bb92:	6979      	ldr	r1, [r7, #20]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fd fa13 	bl	8008fc0 <xSendEventStructToIPTask>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d004      	beq.n	800bbaa <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800bba0:	4b07      	ldr	r3, [pc, #28]	@ (800bbc0 <prvCheckWaitingBuffer+0x70>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f00a ffcf 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800bbaa:	4b05      	ldr	r3, [pc, #20]	@ (800bbc0 <prvCheckWaitingBuffer+0x70>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f7fd fffb 	bl	8009bac <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800bbb6:	bf00      	nop
 800bbb8:	3720      	adds	r7, #32
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20000fd4 	.word	0x20000fd4
 800bbc4:	08024c34 	.word	0x08024c34

0800bbc8 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800bbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	b09e      	sub	sp, #120	@ 0x78
 800bbce:	af02      	add	r7, sp, #8
 800bbd0:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bbd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbda:	3336      	adds	r3, #54	@ 0x36
 800bbdc:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe2:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800bbe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b80      	cmp	r3, #128	@ 0x80
 800bbea:	d01e      	beq.n	800bc2a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800bbec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	4698      	mov	r8, r3
 800bbf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff ff34 	bl	800ba64 <pcMessageType>
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc00:	f103 0516 	add.w	r5, r3, #22
 800bc04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc06:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800bc0a:	f107 030c 	add.w	r3, r7, #12
 800bc0e:	2228      	movs	r2, #40	@ 0x28
 800bc10:	4619      	mov	r1, r3
 800bc12:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bc14:	f001 fd5c 	bl	800d6d0 <pcEndpointName>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	9400      	str	r4, [sp, #0]
 800bc1e:	462b      	mov	r3, r5
 800bc20:	4632      	mov	r2, r6
 800bc22:	4641      	mov	r1, r8
 800bc24:	48a7      	ldr	r0, [pc, #668]	@ (800bec4 <prvProcessICMPMessage_IPv6+0x2fc>)
 800bc26:	f015 fe37 	bl	8021898 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800bc2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc2c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bc30:	f003 0304 	and.w	r3, r3, #4
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 813e 	beq.w	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bc3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b04      	cmp	r3, #4
 800bc42:	dc1d      	bgt.n	800bc80 <prvProcessICMPMessage_IPv6+0xb8>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f300 8130 	bgt.w	800beaa <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800bc4a:	e130      	b.n	800beae <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bc4c:	3b80      	subs	r3, #128	@ 0x80
 800bc4e:	2b08      	cmp	r3, #8
 800bc50:	f200 812d 	bhi.w	800beae <prvProcessICMPMessage_IPv6+0x2e6>
 800bc54:	a201      	add	r2, pc, #4	@ (adr r2, 800bc5c <prvProcessICMPMessage_IPv6+0x94>)
 800bc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5a:	bf00      	nop
 800bc5c:	0800bc8d 	.word	0x0800bc8d
 800bc60:	0800bcd5 	.word	0x0800bcd5
 800bc64:	0800beaf 	.word	0x0800beaf
 800bc68:	0800beaf 	.word	0x0800beaf
 800bc6c:	0800beaf 	.word	0x0800beaf
 800bc70:	0800beaf 	.word	0x0800beaf
 800bc74:	0800bea3 	.word	0x0800bea3
 800bc78:	0800bd4b 	.word	0x0800bd4b
 800bc7c:	0800be5b 	.word	0x0800be5b
 800bc80:	2b88      	cmp	r3, #136	@ 0x88
 800bc82:	f300 8114 	bgt.w	800beae <prvProcessICMPMessage_IPv6+0x2e6>
 800bc86:	2b80      	cmp	r3, #128	@ 0x80
 800bc88:	dae0      	bge.n	800bc4c <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800bc8a:	e110      	b.n	800beae <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800bc8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc8e:	8a5b      	ldrh	r3, [r3, #18]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	b21a      	sxth	r2, r3
 800bc96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc98:	8a5b      	ldrh	r3, [r3, #18]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	0a1b      	lsrs	r3, r3, #8
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	b21b      	sxth	r3, r3
 800bca2:	4313      	orrs	r3, r2
 800bca4:	b21b      	sxth	r3, r3
 800bca6:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800bca8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bcaa:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bcac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcae:	3336      	adds	r3, #54	@ 0x36
 800bcb0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d903      	bls.n	800bcc4 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800bcbc:	4882      	ldr	r0, [pc, #520]	@ (800bec8 <prvProcessICMPMessage_IPv6+0x300>)
 800bcbe:	f015 fdeb 	bl	8021898 <lUDPLoggingPrintf>
                           break;
 800bcc2:	e0f9      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800bcc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcc6:	2281      	movs	r2, #129	@ 0x81
 800bcc8:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800bcca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff fdad 	bl	800b82c <prvReturnICMP_IPv6>
                   break;
 800bcd2:	e0f1      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800bcda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcdc:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800bcde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bce0:	8a5b      	ldrh	r3, [r3, #18]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	021b      	lsls	r3, r3, #8
 800bce6:	b21a      	sxth	r2, r3
 800bce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcea:	8a5b      	ldrh	r3, [r3, #18]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	0a1b      	lsrs	r3, r3, #8
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	b21b      	sxth	r3, r3
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	b21b      	sxth	r3, r3
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800bcfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcfe:	3b08      	subs	r3, #8
 800bd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800bd02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd04:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800bd06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd08:	3308      	adds	r3, #8
 800bd0a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd10:	e00d      	b.n	800bd2e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800bd12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b78      	cmp	r3, #120	@ 0x78
 800bd18:	d003      	beq.n	800bd22 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800bd20:	e009      	b.n	800bd36 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800bd22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd24:	3301      	adds	r3, #1
 800bd26:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800bd28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bd30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d3ed      	bcc.n	800bd12 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800bd36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd38:	889b      	ldrh	r3, [r3, #4]
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bd40:	4611      	mov	r1, r2
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f5 fd3e 	bl	80017c4 <vApplicationPingReplyHook>
                           break;
 800bd48:	e0b6      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800bd4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd4c:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd54:	3308      	adds	r3, #8
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f001 f9cd 	bl	800d0f8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800bd5e:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800bd60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d002      	beq.n	800bd6c <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800bd66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd68:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd6a:	e005      	b.n	800bd78 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800bd6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd6e:	3308      	adds	r3, #8
 800bd70:	4619      	mov	r1, r3
 800bd72:	4856      	ldr	r0, [pc, #344]	@ (800becc <prvProcessICMPMessage_IPv6+0x304>)
 800bd74:	f015 fd90 	bl	8021898 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800bd78:	2320      	movs	r3, #32
 800bd7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bd7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd7e:	3336      	adds	r3, #54	@ 0x36
 800bd80:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d903      	bls.n	800bd94 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800bd8c:	484e      	ldr	r0, [pc, #312]	@ (800bec8 <prvProcessICMPMessage_IPv6+0x300>)
 800bd8e:	f015 fd83 	bl	8021898 <lUDPLoggingPrintf>
                           break;
 800bd92:	e091      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bd94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd96:	f103 0008 	add.w	r0, r3, #8
 800bd9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd9c:	3338      	adds	r3, #56	@ 0x38
 800bd9e:	2210      	movs	r2, #16
 800bda0:	4619      	mov	r1, r3
 800bda2:	f016 ff2a 	bl	8022bfa <memcmp>
 800bda6:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800bda8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdaa:	f103 0108 	add.w	r1, r3, #8
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bdb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <prvProcessICMPMessage_IPv6+0x1f8>
 800bdbc:	4b44      	ldr	r3, [pc, #272]	@ (800bed0 <prvProcessICMPMessage_IPv6+0x308>)
 800bdbe:	e000      	b.n	800bdc2 <prvProcessICMPMessage_IPv6+0x1fa>
 800bdc0:	4b44      	ldr	r3, [pc, #272]	@ (800bed4 <prvProcessICMPMessage_IPv6+0x30c>)
 800bdc2:	4845      	ldr	r0, [pc, #276]	@ (800bed8 <prvProcessICMPMessage_IPv6+0x310>)
 800bdc4:	f015 fd68 	bl	8021898 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800bdc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d171      	bne.n	800beb2 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800bdce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdd0:	2288      	movs	r2, #136	@ 0x88
 800bdd2:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800bdd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800bdda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bddc:	2200      	movs	r2, #0
 800bdde:	711a      	strb	r2, [r3, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	715a      	strb	r2, [r3, #5]
 800bde4:	2200      	movs	r2, #0
 800bde6:	719a      	strb	r2, [r3, #6]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bdee:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800bdf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	061a      	lsls	r2, r3, #24
 800bdf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be00:	431a      	orrs	r2, r3
 800be02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	0a1b      	lsrs	r3, r3, #8
 800be08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be0c:	431a      	orrs	r2, r3
 800be0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	0e1b      	lsrs	r3, r3, #24
 800be14:	431a      	orrs	r2, r3
 800be16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be18:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800be1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be1c:	2202      	movs	r2, #2
 800be1e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800be20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be22:	2201      	movs	r2, #1
 800be24:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800be26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be28:	f103 001a 	add.w	r0, r3, #26
 800be2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be2e:	33e8      	adds	r3, #232	@ 0xe8
 800be30:	2206      	movs	r2, #6
 800be32:	4619      	mov	r1, r3
 800be34:	f015 ff4c 	bl	8021cd0 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800be38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be3a:	22ff      	movs	r2, #255	@ 0xff
 800be3c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800be3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be40:	f103 0008 	add.w	r0, r3, #8
 800be44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be46:	3338      	adds	r3, #56	@ 0x38
 800be48:	2210      	movs	r2, #16
 800be4a:	4619      	mov	r1, r3
 800be4c:	f015 ff40 	bl	8021cd0 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800be50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7ff fcea 	bl	800b82c <prvReturnICMP_IPv6>
                   break;
 800be58:	e02b      	b.n	800beb2 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800be5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be5c:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800be60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be62:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800be64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be66:	4619      	mov	r1, r3
 800be68:	f7ff fb5e 	bl	800b528 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800be6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be6e:	3308      	adds	r3, #8
 800be70:	4619      	mov	r1, r3
 800be72:	481a      	ldr	r0, [pc, #104]	@ (800bedc <prvProcessICMPMessage_IPv6+0x314>)
 800be74:	f015 fd10 	bl	8021898 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fa89 	bl	800c390 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800be7e:	4b18      	ldr	r3, [pc, #96]	@ (800bee0 <prvProcessICMPMessage_IPv6+0x318>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d017      	beq.n	800beb6 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800be86:	4b16      	ldr	r3, [pc, #88]	@ (800bee0 <prvProcessICMPMessage_IPv6+0x318>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fd fc4c 	bl	8009728 <uxIPHeaderSizePacket>
 800be90:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800be92:	2b28      	cmp	r3, #40	@ 0x28
 800be94:	d10f      	bne.n	800beb6 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800be96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be98:	3308      	adds	r3, #8
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff fe58 	bl	800bb50 <prvCheckWaitingBuffer>
                    break;
 800bea0:	e009      	b.n	800beb6 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fb9a 	bl	800c5dc <vReceiveRA>
                            break;
 800bea8:	e006      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800beaa:	bf00      	nop
 800beac:	e004      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800beae:	bf00      	nop
 800beb0:	e002      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800beb2:	bf00      	nop
 800beb4:	e000      	b.n	800beb8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800beb6:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800beb8:	2300      	movs	r3, #0
    }
 800beba:	4618      	mov	r0, r3
 800bebc:	3770      	adds	r7, #112	@ 0x70
 800bebe:	46bd      	mov	sp, r7
 800bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec4:	08024c44 	.word	0x08024c44
 800bec8:	08024c7c 	.word	0x08024c7c
 800becc:	08024c88 	.word	0x08024c88
 800bed0:	08024cb8 	.word	0x08024cb8
 800bed4:	08024cc0 	.word	0x08024cc0
 800bed8:	08024cc8 	.word	0x08024cc8
 800bedc:	08024cec 	.word	0x08024cec
 800bee0:	20000fd4 	.word	0x20000fd4

0800bee4 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800bee4:	b5b0      	push	{r4, r5, r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800beec:	2356      	movs	r3, #86	@ 0x56
 800beee:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800bef0:	2100      	movs	r1, #0
 800bef2:	69f8      	ldr	r0, [r7, #28]
 800bef4:	f00a fdc0 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 800bef8:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	f000 80b1 	beq.w	800c064 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	3314      	adds	r3, #20
 800bf06:	2210      	movs	r2, #16
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f015 ffed 	bl	8021eea <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf1c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d104      	bne.n	800bf2e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800bf24:	f240 419e 	movw	r1, #1182	@ 0x49e
 800bf28:	4850      	ldr	r0, [pc, #320]	@ (800c06c <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800bf2a:	f7f5 fb95 	bl	8001658 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf32:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	3336      	adds	r3, #54	@ 0x36
 800bf38:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	4a4c      	ldr	r2, [pc, #304]	@ (800c070 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800bf3e:	6810      	ldr	r0, [r2, #0]
 800bf40:	6018      	str	r0, [r3, #0]
 800bf42:	8892      	ldrh	r2, [r2, #4]
 800bf44:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	1d98      	adds	r0, r3, #6
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	33e8      	adds	r3, #232	@ 0xe8
 800bf4e:	2206      	movs	r2, #6
 800bf50:	4619      	mov	r1, r3
 800bf52:	f015 febd 	bl	8021cd0 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bf5e:	731a      	strb	r2, [r3, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bf66:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	2260      	movs	r2, #96	@ 0x60
 800bf6c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	2200      	movs	r2, #0
 800bf72:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	2200      	movs	r2, #0
 800bf78:	741a      	strb	r2, [r3, #16]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	2200      	movs	r2, #0
 800bf82:	749a      	strb	r2, [r3, #18]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f042 0220 	orr.w	r2, r2, #32
 800bf8a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	223a      	movs	r2, #58	@ 0x3a
 800bf90:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	22ff      	movs	r2, #255	@ 0xff
 800bf96:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f103 0016 	add.w	r0, r3, #22
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3338      	adds	r3, #56	@ 0x38
 800bfa2:	2210      	movs	r2, #16
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f015 fe93 	bl	8021cd0 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3326      	adds	r3, #38	@ 0x26
 800bfae:	4a31      	ldr	r2, [pc, #196]	@ (800c074 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800bfb0:	461c      	mov	r4, r3
 800bfb2:	4615      	mov	r5, r2
 800bfb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfb6:	6020      	str	r0, [r4, #0]
 800bfb8:	6061      	str	r1, [r4, #4]
 800bfba:	60a2      	str	r2, [r4, #8]
 800bfbc:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800bfbe:	2320      	movs	r3, #32
 800bfc0:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2288      	movs	r2, #136	@ 0x88
 800bfc6:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	711a      	strb	r2, [r3, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	715a      	strb	r2, [r3, #5]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	719a      	strb	r2, [r3, #6]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bfe2:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	061a      	lsls	r2, r3, #24
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bff4:	431a      	orrs	r2, r3
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	0a1b      	lsrs	r3, r3, #8
 800bffc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c000:	431a      	orrs	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	0e1b      	lsrs	r3, r3, #24
 800c008:	431a      	orrs	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2202      	movs	r2, #2
 800c012:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2201      	movs	r2, #1
 800c018:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f103 001a 	add.w	r0, r3, #26
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	33e8      	adds	r3, #232	@ 0xe8
 800c024:	2206      	movs	r2, #6
 800c026:	4619      	mov	r1, r3
 800c028:	f015 fe52 	bl	8021cd0 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	22ff      	movs	r2, #255	@ 0xff
 800c030:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f103 0008 	add.w	r0, r3, #8
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3338      	adds	r3, #56	@ 0x38
 800c03c:	2210      	movs	r2, #16
 800c03e:	4619      	mov	r1, r3
 800c040:	f015 fe46 	bl	8021cd0 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2200      	movs	r2, #0
 800c052:	709a      	strb	r2, [r3, #2]
 800c054:	2200      	movs	r2, #0
 800c056:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	2201      	movs	r2, #1
 800c05e:	69b9      	ldr	r1, [r7, #24]
 800c060:	6978      	ldr	r0, [r7, #20]
 800c062:	4798      	blx	r3
        }
    }
 800c064:	bf00      	nop
 800c066:	3720      	adds	r7, #32
 800c068:	46bd      	mov	sp, r7
 800c06a:	bdb0      	pop	{r4, r5, r7, pc}
 800c06c:	08024d04 	.word	0x08024d04
 800c070:	08026f78 	.word	0x08026f78
 800c074:	08026f68 	.word	0x08026f68

0800c078 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b090      	sub	sp, #64	@ 0x40
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800c086:	2301      	movs	r3, #1
 800c088:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d017      	beq.n	800c0c0 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c090:	2300      	movs	r3, #0
 800c092:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c094:	e010      	b.n	800c0b8 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800c096:	f107 0214 	add.w	r2, r7, #20
 800c09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7f5 fba3 	bl	80017ec <xApplicationGetRandomNumber>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d102      	bne.n	800c0b2 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800c0b0:	e00d      	b.n	800c0ce <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ba:	2b03      	cmp	r3, #3
 800c0bc:	ddeb      	ble.n	800c096 <FreeRTOS_CreateIPv6Address+0x1e>
 800c0be:	e006      	b.n	800c0ce <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800c0c0:	f107 0314 	add.w	r3, r7, #20
 800c0c4:	2210      	movs	r2, #16
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f015 ff0e 	bl	8021eea <memset>
        }

        if( xResult == pdPASS )
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d167      	bne.n	800c1a4 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <FreeRTOS_CreateIPv6Address+0x6c>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b80      	cmp	r3, #128	@ 0x80
 800c0de:	d801      	bhi.n	800c0e4 <FreeRTOS_CreateIPv6Address+0x6c>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e000      	b.n	800c0e6 <FreeRTOS_CreateIPv6Address+0x6e>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d104      	bne.n	800c0f4 <FreeRTOS_CreateIPv6Address+0x7c>
 800c0ea:	f240 5105 	movw	r1, #1285	@ 0x505
 800c0ee:	4830      	ldr	r0, [pc, #192]	@ (800c1b0 <FreeRTOS_CreateIPv6Address+0x138>)
 800c0f0:	f7f5 fab2 	bl	8001658 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b07      	cmp	r3, #7
 800c0f8:	d907      	bls.n	800c10a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	3307      	adds	r3, #7
 800c102:	08db      	lsrs	r3, r3, #3
 800c104:	461a      	mov	r2, r3
 800c106:	f015 fde3 	bl	8021cd0 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800c10a:	f107 0314 	add.w	r3, r7, #20
 800c10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	08db      	lsrs	r3, r3, #3
 800c114:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f003 0307 	and.w	r3, r3, #7
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d034      	beq.n	800c18a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f003 0307 	and.w	r3, r3, #7
 800c126:	f1c3 0308 	rsb	r3, r3, #8
 800c12a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800c12c:	2201      	movs	r2, #1
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	3b01      	subs	r3, #1
 800c136:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800c138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	43db      	mvns	r3, r3
 800c13e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	4413      	add	r3, r2
 800c148:	781a      	ldrb	r2, [r3, #0]
 800c14a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c14e:	4013      	ands	r3, r2
 800c150:	b2d9      	uxtb	r1, r3
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c156:	4413      	add	r3, r2
 800c158:	460a      	mov	r2, r1
 800c15a:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c160:	4413      	add	r3, r2
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c166:	7819      	ldrb	r1, [r3, #0]
 800c168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	400b      	ands	r3, r1
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	4313      	orrs	r3, r2
 800c172:	b2d9      	uxtb	r1, r3
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c178:	4413      	add	r3, r2
 800c17a:	460a      	mov	r2, r1
 800c17c:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800c17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c180:	3301      	adds	r3, #1
 800c182:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c186:	3301      	adds	r3, #1
 800c188:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800c18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18c:	2b0f      	cmp	r3, #15
 800c18e:	d809      	bhi.n	800c1a4 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c194:	18d0      	adds	r0, r2, r3
 800c196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c198:	f1c3 0310 	rsb	r3, r3, #16
 800c19c:	461a      	mov	r2, r3
 800c19e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1a0:	f015 fd96 	bl	8021cd0 <memcpy>
            }
        }

        return xResult;
 800c1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3740      	adds	r7, #64	@ 0x40
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	08024d04 	.word	0x08024d04

0800c1b4 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fe48 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 800c1c8:	60b8      	str	r0, [r7, #8]
 800c1ca:	e01a      	b.n	800c202 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c1d2:	2bfe      	cmp	r3, #254	@ 0xfe
 800c1d4:	d110      	bne.n	800c1f8 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c1dc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c1e0:	2b80      	cmp	r3, #128	@ 0x80
 800c1e2:	d109      	bne.n	800c1f8 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c1e4:	6838      	ldr	r0, [r7, #0]
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	3338      	adds	r3, #56	@ 0x38
 800c1ea:	2210      	movs	r2, #16
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	f015 fd6f 	bl	8021cd0 <memcpy>
                xResult = pdPASS;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
                break;
 800c1f6:	e007      	b.n	800c208 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fe4e 	bl	800ce9c <FreeRTOS_NextEndPoint>
 800c200:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1e1      	bne.n	800c1cc <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800c208:	68fb      	ldr	r3, [r7, #12]
    }
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
	...

0800c214 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800c214:	b5b0      	push	{r4, r5, r7, lr}
 800c216:	b090      	sub	sp, #64	@ 0x40
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c222:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c224:	233e      	movs	r3, #62	@ 0x3e
 800c226:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c22c:	2300      	movs	r3, #0
 800c22e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800c230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <vNDSendRouterSolicitation+0x2a>
 800c236:	218f      	movs	r1, #143	@ 0x8f
 800c238:	4852      	ldr	r0, [pc, #328]	@ (800c384 <vNDSendRouterSolicitation+0x170>)
 800c23a:	f7f5 fa0d 	bl	8001658 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800c23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c240:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c244:	f003 0304 	and.w	r3, r3, #4
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d103      	bne.n	800c256 <vNDSendRouterSolicitation+0x42>
 800c24e:	2190      	movs	r1, #144	@ 0x90
 800c250:	484c      	ldr	r0, [pc, #304]	@ (800c384 <vNDSendRouterSolicitation+0x170>)
 800c252:	f7f5 fa01 	bl	8001658 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800c256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c258:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c25c:	f107 020c 	add.w	r2, r7, #12
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff ffa6 	bl	800c1b4 <xGetLinkLocalAddress>
 800c268:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800c26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800c270:	4845      	ldr	r0, [pc, #276]	@ (800c388 <vNDSendRouterSolicitation+0x174>)
 800c272:	f015 fb11 	bl	8021898 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c276:	f107 030c 	add.w	r3, r7, #12
 800c27a:	2210      	movs	r2, #16
 800c27c:	2100      	movs	r1, #0
 800c27e:	4618      	mov	r0, r3
 800c280:	f015 fe33 	bl	8021eea <memset>
 800c284:	e005      	b.n	800c292 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800c286:	f107 030c 	add.w	r3, r7, #12
 800c28a:	4619      	mov	r1, r3
 800c28c:	483f      	ldr	r0, [pc, #252]	@ (800c38c <vNDSendRouterSolicitation+0x178>)
 800c28e:	f015 fb03 	bl	8021898 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800c292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c298:	429a      	cmp	r2, r3
 800c29a:	d909      	bls.n	800c2b0 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c29c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c29e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2a0:	f7fd fcf4 	bl	8009c8c <pxDuplicateNetworkBufferWithDescriptor>
 800c2a4:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c2a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2a8:	f00a fc4e 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800c2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d062      	beq.n	800c37c <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ba:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2be:	3336      	adds	r3, #54	@ 0x36
 800c2c0:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800c2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2c6:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800c2c8:	f107 031c 	add.w	r3, r7, #28
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6838      	ldr	r0, [r7, #0]
 800c2d2:	f7ff f87b 	bl	800b3cc <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d8:	3306      	adds	r3, #6
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f107 031c 	add.w	r3, r7, #28
 800c2e0:	6818      	ldr	r0, [r3, #0]
 800c2e2:	6010      	str	r0, [r2, #0]
 800c2e4:	889b      	ldrh	r3, [r3, #4]
 800c2e6:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c2e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ec:	33e8      	adds	r3, #232	@ 0xe8
 800c2ee:	2206      	movs	r2, #6
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	f015 fced 	bl	8021cd0 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c2fe:	731a      	strb	r2, [r3, #12]
 800c300:	2200      	movs	r2, #0
 800c302:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c306:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800c308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30a:	2260      	movs	r2, #96	@ 0x60
 800c30c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c310:	2200      	movs	r2, #0
 800c312:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c316:	2200      	movs	r2, #0
 800c318:	741a      	strb	r2, [r3, #16]
 800c31a:	2200      	movs	r2, #0
 800c31c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800c31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c320:	2200      	movs	r2, #0
 800c322:	749a      	strb	r2, [r3, #18]
 800c324:	2200      	movs	r2, #0
 800c326:	f042 0208 	orr.w	r2, r2, #8
 800c32a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32e:	223a      	movs	r2, #58	@ 0x3a
 800c330:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800c332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c334:	22ff      	movs	r2, #255	@ 0xff
 800c336:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33a:	3316      	adds	r3, #22
 800c33c:	461d      	mov	r5, r3
 800c33e:	f107 040c 	add.w	r4, r7, #12
 800c342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c344:	6028      	str	r0, [r5, #0]
 800c346:	6069      	str	r1, [r5, #4]
 800c348:	60aa      	str	r2, [r5, #8]
 800c34a:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34e:	3326      	adds	r3, #38	@ 0x26
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	2210      	movs	r2, #16
 800c354:	4618      	mov	r0, r3
 800c356:	f015 fcbb 	bl	8021cd0 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800c35a:	2208      	movs	r2, #8
 800c35c:	2100      	movs	r1, #0
 800c35e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c360:	f015 fdc3 	bl	8021eea <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	2285      	movs	r2, #133	@ 0x85
 800c368:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800c36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36c:	2200      	movs	r2, #0
 800c36e:	709a      	strb	r2, [r3, #2]
 800c370:	2200      	movs	r2, #0
 800c372:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c374:	2101      	movs	r1, #1
 800c376:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c378:	f7fd f8d6 	bl	8009528 <vReturnEthernetFrame>
        }
    }
 800c37c:	bf00      	nop
 800c37e:	3740      	adds	r7, #64	@ 0x40
 800c380:	46bd      	mov	sp, r7
 800c382:	bdb0      	pop	{r4, r5, r7, pc}
 800c384:	08024d30 	.word	0x08024d30
 800c388:	08024d5c 	.word	0x08024d5c
 800c38c:	08024d84 	.word	0x08024d84

0800c390 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a2:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3336      	adds	r3, #54	@ 0x36
 800c3a8:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c3aa:	6938      	ldr	r0, [r7, #16]
 800c3ac:	f000 fd54 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 800c3b0:	6178      	str	r0, [r7, #20]
 800c3b2:	e028      	b.n	800c406 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c3ba:	f003 0302 	and.w	r3, r3, #2
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d01b      	beq.n	800c3fc <vReceiveNA+0x6c>
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d116      	bne.n	800c3fc <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	2210      	movs	r2, #16
 800c3da:	4619      	mov	r1, r3
 800c3dc:	f016 fc0d 	bl	8022bfa <memcmp>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10a      	bne.n	800c3fc <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c3ec:	f043 0302 	orr.w	r3, r3, #2
 800c3f0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800c3f4:	2164      	movs	r1, #100	@ 0x64
 800c3f6:	6978      	ldr	r0, [r7, #20]
 800c3f8:	f7fd fb3e 	bl	8009a78 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800c3fc:	6979      	ldr	r1, [r7, #20]
 800c3fe:	6938      	ldr	r0, [r7, #16]
 800c400:	f000 fd4c 	bl	800ce9c <FreeRTOS_NextEndPoint>
 800c404:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1d3      	bne.n	800c3b4 <vReceiveNA+0x24>
                }
            }
        }
    }
 800c40c:	bf00      	nop
 800c40e:	bf00      	nop
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41a:	b091      	sub	sp, #68	@ 0x44
 800c41c:	af04      	add	r7, sp, #16
 800c41e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800c420:	2300      	movs	r3, #0
 800c422:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c424:	2310      	movs	r3, #16
 800c426:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42a:	3336      	adds	r3, #54	@ 0x36
 800c42c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	4413      	add	r3, r2
 800c440:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800c446:	e0b2      	b.n	800c5ae <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800c448:	69ba      	ldr	r2, [r7, #24]
 800c44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c44c:	4413      	add	r3, r2
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800c452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c454:	3301      	adds	r3, #1
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	4413      	add	r3, r2
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d103      	bne.n	800c472 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800c46a:	4856      	ldr	r0, [pc, #344]	@ (800c5c4 <vReceiveRA_ReadReply+0x1ac>)
 800c46c:	f015 fa14 	bl	8021898 <lUDPLoggingPrintf>
                break;
 800c470:	e0a3      	b.n	800c5ba <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800c472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4413      	add	r3, r2
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d208      	bcs.n	800c490 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800c47e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	4413      	add	r3, r2
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	4619      	mov	r1, r3
 800c488:	484f      	ldr	r0, [pc, #316]	@ (800c5c8 <vReceiveRA_ReadReply+0x1b0>)
 800c48a:	f015 fa05 	bl	8021898 <lUDPLoggingPrintf>
                break;
 800c48e:	e094      	b.n	800c5ba <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800c490:	7dfb      	ldrb	r3, [r7, #23]
 800c492:	3b01      	subs	r3, #1
 800c494:	2b04      	cmp	r3, #4
 800c496:	d87f      	bhi.n	800c598 <vReceiveRA_ReadReply+0x180>
 800c498:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a0 <vReceiveRA_ReadReply+0x88>)
 800c49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49e:	bf00      	nop
 800c4a0:	0800c4b5 	.word	0x0800c4b5
 800c4a4:	0800c5a5 	.word	0x0800c5a5
 800c4a8:	0800c50f 	.word	0x0800c50f
 800c4ac:	0800c5a5 	.word	0x0800c5a5
 800c4b0:	0800c57f 	.word	0x0800c57f
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800c4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b6:	3302      	adds	r3, #2
 800c4b8:	69ba      	ldr	r2, [r7, #24]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	461c      	mov	r4, r3
 800c4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c2:	3303      	adds	r3, #3
 800c4c4:	69ba      	ldr	r2, [r7, #24]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	461d      	mov	r5, r3
 800c4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	69ba      	ldr	r2, [r7, #24]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	461e      	mov	r6, r3
 800c4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4da:	3305      	adds	r3, #5
 800c4dc:	69ba      	ldr	r2, [r7, #24]
 800c4de:	4413      	add	r3, r2
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e6:	3306      	adds	r3, #6
 800c4e8:	69ba      	ldr	r2, [r7, #24]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f2:	3307      	adds	r3, #7
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	9302      	str	r3, [sp, #8]
 800c4fc:	9001      	str	r0, [sp, #4]
 800c4fe:	9100      	str	r1, [sp, #0]
 800c500:	4633      	mov	r3, r6
 800c502:	462a      	mov	r2, r5
 800c504:	4621      	mov	r1, r4
 800c506:	4831      	ldr	r0, [pc, #196]	@ (800c5cc <vReceiveRA_ReadReply+0x1b4>)
 800c508:	f015 f9c6 	bl	8021898 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800c50c:	e04b      	b.n	800c5a6 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800c50e:	69ba      	ldr	r2, [r7, #24]
 800c510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c512:	4413      	add	r3, r2
 800c514:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800c516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c518:	789b      	ldrb	r3, [r3, #2]
 800c51a:	4618      	mov	r0, r3
 800c51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	061a      	lsls	r2, r3, #24
 800c522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	021b      	lsls	r3, r3, #8
 800c528:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c52c:	431a      	orrs	r2, r3
 800c52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	0a1b      	lsrs	r3, r3, #8
 800c534:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c538:	431a      	orrs	r2, r3
 800c53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	0e1b      	lsrs	r3, r3, #24
 800c540:	ea42 0103 	orr.w	r1, r2, r3
 800c544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	061a      	lsls	r2, r3, #24
 800c54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	021b      	lsls	r3, r3, #8
 800c550:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c554:	431a      	orrs	r2, r3
 800c556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	0a1b      	lsrs	r3, r3, #8
 800c55c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c560:	431a      	orrs	r2, r3
 800c562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	0e1b      	lsrs	r3, r3, #24
 800c568:	431a      	orrs	r2, r3
 800c56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56c:	3310      	adds	r3, #16
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	4613      	mov	r3, r2
 800c572:	460a      	mov	r2, r1
 800c574:	4601      	mov	r1, r0
 800c576:	4816      	ldr	r0, [pc, #88]	@ (800c5d0 <vReceiveRA_ReadReply+0x1b8>)
 800c578:	f015 f98e 	bl	8021898 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800c57c:	e013      	b.n	800c5a6 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800c57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c580:	3304      	adds	r3, #4
 800c582:	69ba      	ldr	r2, [r7, #24]
 800c584:	4413      	add	r3, r2
 800c586:	4618      	mov	r0, r3
 800c588:	f7fd fe60 	bl	800a24c <ulChar2u32>
 800c58c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800c58e:	68b9      	ldr	r1, [r7, #8]
 800c590:	4810      	ldr	r0, [pc, #64]	@ (800c5d4 <vReceiveRA_ReadReply+0x1bc>)
 800c592:	f015 f981 	bl	8021898 <lUDPLoggingPrintf>
                   }
                   break;
 800c596:	e006      	b.n	800c5a6 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800c598:	7dfb      	ldrb	r3, [r7, #23]
 800c59a:	4619      	mov	r1, r3
 800c59c:	480e      	ldr	r0, [pc, #56]	@ (800c5d8 <vReceiveRA_ReadReply+0x1c0>)
 800c59e:	f015 f97b 	bl	8021898 <lUDPLoggingPrintf>
                    break;
 800c5a2:	e000      	b.n	800c5a6 <vReceiveRA_ReadReply+0x18e>
                    break;
 800c5a4:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800c5a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800c5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	69fa      	ldr	r2, [r7, #28]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	f63f af47 	bhi.w	800c448 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800c5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3734      	adds	r7, #52	@ 0x34
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c4:	08024d98 	.word	0x08024d98
 800c5c8:	08024dcc 	.word	0x08024dcc
 800c5cc:	08024df0 	.word	0x08024df0
 800c5d0:	08024e1c 	.word	0x08024e1c
 800c5d4:	08024e44 	.word	0x08024e44
 800c5d8:	08024e54 	.word	0x08024e54

0800c5dc <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5de:	b08d      	sub	sp, #52	@ 0x34
 800c5e0:	af04      	add	r7, sp, #16
 800c5e2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e8:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c5ee:	2310      	movs	r3, #16
 800c5f0:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	3336      	adds	r3, #54	@ 0x36
 800c5f6:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d903      	bls.n	800c60a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800c602:	485b      	ldr	r0, [pc, #364]	@ (800c770 <vReceiveRA+0x194>)
 800c604:	f015 f948 	bl	8021898 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800c608:	e0ae      	b.n	800c768 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	3336      	adds	r3, #54	@ 0x36
 800c60e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	461c      	mov	r4, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	461d      	mov	r5, r3
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	885b      	ldrh	r3, [r3, #2]
 800c620:	b29b      	uxth	r3, r3
 800c622:	021b      	lsls	r3, r3, #8
 800c624:	b21a      	sxth	r2, r3
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	885b      	ldrh	r3, [r3, #2]
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	0a1b      	lsrs	r3, r3, #8
 800c62e:	b29b      	uxth	r3, r3
 800c630:	b21b      	sxth	r3, r3
 800c632:	4313      	orrs	r3, r2
 800c634:	b21b      	sxth	r3, r3
 800c636:	b29b      	uxth	r3, r3
 800c638:	461e      	mov	r6, r3
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	791b      	ldrb	r3, [r3, #4]
 800c63e:	4619      	mov	r1, r3
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	795b      	ldrb	r3, [r3, #5]
 800c644:	4618      	mov	r0, r3
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	88db      	ldrh	r3, [r3, #6]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	b21a      	sxth	r2, r3
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	88db      	ldrh	r3, [r3, #6]
 800c654:	b29b      	uxth	r3, r3
 800c656:	0a1b      	lsrs	r3, r3, #8
 800c658:	b29b      	uxth	r3, r3
 800c65a:	b21b      	sxth	r3, r3
 800c65c:	4313      	orrs	r3, r2
 800c65e:	b21b      	sxth	r3, r3
 800c660:	b29b      	uxth	r3, r3
 800c662:	9302      	str	r3, [sp, #8]
 800c664:	9001      	str	r0, [sp, #4]
 800c666:	9100      	str	r1, [sp, #0]
 800c668:	4633      	mov	r3, r6
 800c66a:	462a      	mov	r2, r5
 800c66c:	4621      	mov	r1, r4
 800c66e:	4841      	ldr	r0, [pc, #260]	@ (800c774 <vReceiveRA+0x198>)
 800c670:	f015 f912 	bl	8021898 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	88db      	ldrh	r3, [r3, #6]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d074      	beq.n	800c768 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff feca 	bl	800c418 <vReceiveRA_ReadReply>
 800c684:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d104      	bne.n	800c698 <vReceiveRA+0xbc>
 800c68e:	f240 118b 	movw	r1, #395	@ 0x18b
 800c692:	4839      	ldr	r0, [pc, #228]	@ (800c778 <vReceiveRA+0x19c>)
 800c694:	f7f4 ffe0 	bl	8001658 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d064      	beq.n	800c768 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fbd8 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 800c6a8:	61f8      	str	r0, [r7, #28]
 800c6aa:	e05a      	b.n	800c762 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c6b2:	f003 0302 	and.w	r3, r3, #2
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d04b      	beq.n	800c754 <vReceiveRA+0x178>
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d146      	bne.n	800c754 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	789b      	ldrb	r3, [r3, #2]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	3310      	adds	r3, #16
 800c6da:	2210      	movs	r2, #16
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f015 faf7 	bl	8021cd0 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	3316      	adds	r3, #22
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	f015 faee 	bl	8021cd0 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c6fa:	f043 0301 	orr.w	r3, r3, #1
 800c6fe:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	2200      	movs	r2, #0
 800c706:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	061a      	lsls	r2, r3, #24
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	021b      	lsls	r3, r3, #8
 800c716:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c71a:	431a      	orrs	r2, r3
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	0a1b      	lsrs	r3, r3, #8
 800c722:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c726:	431a      	orrs	r2, r3
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	0e1b      	lsrs	r3, r3, #24
 800c72e:	431a      	orrs	r2, r3
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c736:	69fa      	ldr	r2, [r7, #28]
 800c738:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c73c:	f043 0302 	orr.w	r3, r3, #2
 800c740:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	2202      	movs	r2, #2
 800c748:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800c74c:	69f9      	ldr	r1, [r7, #28]
 800c74e:	2000      	movs	r0, #0
 800c750:	f000 f9b6 	bl	800cac0 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c758:	69f9      	ldr	r1, [r7, #28]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fb9e 	bl	800ce9c <FreeRTOS_NextEndPoint>
 800c760:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1a1      	bne.n	800c6ac <vReceiveRA+0xd0>
    }
 800c768:	bf00      	nop
 800c76a:	3724      	adds	r7, #36	@ 0x24
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c770:	08024e78 	.word	0x08024e78
 800c774:	08024ea8 	.word	0x08024ea8
 800c778:	08024d30 	.word	0x08024d30

0800c77c <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800c77c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c780:	b088      	sub	sp, #32
 800c782:	af00      	add	r7, sp, #0
 800c784:	6178      	str	r0, [r7, #20]
 800c786:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c788:	6939      	ldr	r1, [r7, #16]
 800c78a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800c78c:	6979      	ldr	r1, [r7, #20]
 800c78e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c792:	2901      	cmp	r1, #1
 800c794:	d133      	bne.n	800c7fe <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c79c:	1c5a      	adds	r2, r3, #1
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d804      	bhi.n	800c7b8 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c7b6:	e0bf      	b.n	800c938 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800c7b8:	4862      	ldr	r0, [pc, #392]	@ (800c944 <xRAProcess_HandleWaitStates+0x1c8>)
 800c7ba:	f015 f86d 	bl	8021898 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	3390      	adds	r3, #144	@ 0x90
 800c7c8:	2258      	movs	r2, #88	@ 0x58
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f015 fa80 	bl	8021cd0 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c7d6:	f36f 0300 	bfc	r3, #0, #1
 800c7da:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c7ec:	f043 0302 	orr.w	r3, r3, #2
 800c7f0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c7fc:	e09c      	b.n	800c938 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800c7fe:	6979      	ldr	r1, [r7, #20]
 800c800:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c804:	2903      	cmp	r1, #3
 800c806:	f040 8097 	bne.w	800c938 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800c80a:	6979      	ldr	r1, [r7, #20]
 800c80c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c810:	f001 0102 	and.w	r1, r1, #2
 800c814:	b2c9      	uxtb	r1, r1
 800c816:	2900      	cmp	r1, #0
 800c818:	d00b      	beq.n	800c832 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	2202      	movs	r2, #2
 800c826:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c82a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c82e:	61fb      	str	r3, [r7, #28]
 800c830:	e082      	b.n	800c938 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800c832:	6979      	ldr	r1, [r7, #20]
 800c834:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800c838:	2902      	cmp	r1, #2
 800c83a:	d80e      	bhi.n	800c85a <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2202      	movs	r2, #2
 800c84e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c852:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c856:	61fb      	str	r3, [r7, #28]
 800c858:	e06e      	b.n	800c938 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800c85a:	6979      	ldr	r1, [r7, #20]
 800c85c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c860:	f001 0101 	and.w	r1, r1, #1
 800c864:	b2c9      	uxtb	r1, r1
 800c866:	2900      	cmp	r1, #0
 800c868:	d057      	beq.n	800c91a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800c86a:	6979      	ldr	r1, [r7, #20]
 800c86c:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800c870:	2000      	movs	r0, #0
 800c872:	4688      	mov	r8, r1
 800c874:	4681      	mov	r9, r0
 800c876:	4640      	mov	r0, r8
 800c878:	4649      	mov	r1, r9
 800c87a:	f04f 0a00 	mov.w	sl, #0
 800c87e:	f04f 0b00 	mov.w	fp, #0
 800c882:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800c886:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800c88a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800c88e:	4650      	mov	r0, sl
 800c890:	4659      	mov	r1, fp
 800c892:	ebb0 0208 	subs.w	r2, r0, r8
 800c896:	eb61 0309 	sbc.w	r3, r1, r9
 800c89a:	f04f 0000 	mov.w	r0, #0
 800c89e:	f04f 0100 	mov.w	r1, #0
 800c8a2:	0259      	lsls	r1, r3, #9
 800c8a4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c8a8:	0250      	lsls	r0, r2, #9
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	eb12 0408 	adds.w	r4, r2, r8
 800c8b2:	eb43 0509 	adc.w	r5, r3, r9
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	f04f 0300 	mov.w	r3, #0
 800c8be:	01ab      	lsls	r3, r5, #6
 800c8c0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800c8c4:	01a2      	lsls	r2, r4, #6
 800c8c6:	1b11      	subs	r1, r2, r4
 800c8c8:	6039      	str	r1, [r7, #0]
 800c8ca:	eb63 0305 	sbc.w	r3, r3, r5
 800c8ce:	607b      	str	r3, [r7, #4]
 800c8d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	eb13 0308 	adds.w	r3, r3, r8
 800c8da:	60bb      	str	r3, [r7, #8]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	eb43 0309 	adc.w	r3, r3, r9
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c8e8:	f04f 0300 	mov.w	r3, #0
 800c8ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8f0:	f7f3 fd5e 	bl	80003b0 <__aeabi_uldivmod>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2204      	movs	r2, #4
 800c900:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c910:	461a      	mov	r2, r3
 800c912:	480d      	ldr	r0, [pc, #52]	@ (800c948 <xRAProcess_HandleWaitStates+0x1cc>)
 800c914:	f014 ffc0 	bl	8021898 <lUDPLoggingPrintf>
 800c918:	e00b      	b.n	800c932 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2206      	movs	r2, #6
 800c91e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	3338      	adds	r3, #56	@ 0x38
 800c926:	4619      	mov	r1, r3
 800c928:	4808      	ldr	r0, [pc, #32]	@ (800c94c <xRAProcess_HandleWaitStates+0x1d0>)
 800c92a:	f014 ffb5 	bl	8021898 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800c92e:	2300      	movs	r3, #0
 800c930:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	f7fc fa08 	bl	8008d48 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800c938:	69fb      	ldr	r3, [r7, #28]
    }
 800c93a:	4618      	mov	r0, r3
 800c93c:	3720      	adds	r7, #32
 800c93e:	46bd      	mov	sp, r7
 800c940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c944:	08024eec 	.word	0x08024eec
 800c948:	08024f14 	.word	0x08024f14
 800c94c:	08024f54 	.word	0x08024f54

0800c950 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800c950:	b580      	push	{r7, lr}
 800c952:	b08c      	sub	sp, #48	@ 0x30
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c964:	2b06      	cmp	r3, #6
 800c966:	f200 808c 	bhi.w	800ca82 <xRAProcess_HandleOtherStates+0x132>
 800c96a:	a201      	add	r2, pc, #4	@ (adr r2, 800c970 <xRAProcess_HandleOtherStates+0x20>)
 800c96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c970:	0800c98d 	.word	0x0800c98d
 800c974:	0800ca83 	.word	0x0800ca83
 800c978:	0800c9ef 	.word	0x0800c9ef
 800c97c:	0800ca83 	.word	0x0800ca83
 800c980:	0800ca6b 	.word	0x0800ca6b
 800c984:	0800ca75 	.word	0x0800ca75
 800c988:	0800ca83 	.word	0x0800ca83
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800c98c:	f107 030c 	add.w	r3, r7, #12
 800c990:	2210      	movs	r2, #16
 800c992:	2100      	movs	r1, #0
 800c994:	4618      	mov	r0, r3
 800c996:	f015 faa8 	bl	8021eea <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800c99a:	23ff      	movs	r3, #255	@ 0xff
 800c99c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800c99e:	2302      	movs	r3, #2
 800c9a0:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800c9a2:	2302      	movs	r3, #2
 800c9a4:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c9a6:	233e      	movs	r3, #62	@ 0x3e
 800c9a8:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	6a38      	ldr	r0, [r7, #32]
 800c9ae:	f00a f863 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 800c9b2:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d008      	beq.n	800c9cc <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800c9c0:	f107 030c 	add.w	r3, r7, #12
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	69f8      	ldr	r0, [r7, #28]
 800c9c8:	f7ff fc24 	bl	800c214 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	482d      	ldr	r0, [pc, #180]	@ (800ca90 <xRAProcess_HandleOtherStates+0x140>)
 800c9da:	f014 ff5d 	bl	8021898 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800c9de:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c9e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800c9ec:	e04a      	b.n	800ca84 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c9f4:	f003 0302 	and.w	r3, r3, #2
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d014      	beq.n	800ca28 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800ca04:	f36f 0341 	bfc	r3, #1, #1
 800ca08:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	f7ff fb2b 	bl	800c078 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800ca22:	481c      	ldr	r0, [pc, #112]	@ (800ca94 <xRAProcess_HandleOtherStates+0x144>)
 800ca24:	f014 ff38 	bl	8021898 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3338      	adds	r3, #56	@ 0x38
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	481a      	ldr	r0, [pc, #104]	@ (800ca98 <xRAProcess_HandleOtherStates+0x148>)
 800ca30:	f014 ff32 	bl	8021898 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800ca34:	2356      	movs	r3, #86	@ 0x56
 800ca36:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800ca38:	2100      	movs	r1, #0
 800ca3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca3c:	f00a f81c 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 800ca40:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d008      	beq.n	800ca5a <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800ca48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3338      	adds	r3, #56	@ 0x38
 800ca52:	4619      	mov	r1, r3
 800ca54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca56:	f7fe ff25 	bl	800b8a4 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800ca5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2203      	movs	r2, #3
 800ca64:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800ca68:	e00c      	b.n	800ca84 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2205      	movs	r2, #5
 800ca6e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800ca72:	e007      	b.n	800ca84 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f811 	bl	800ca9c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800ca7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ca7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800ca80:	e000      	b.n	800ca84 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800ca82:	bf00      	nop
        }

        return uxNewReloadTime;
 800ca84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800ca86:	4618      	mov	r0, r3
 800ca88:	3730      	adds	r7, #48	@ 0x30
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	08024f90 	.word	0x08024f90
 800ca94:	08024fc4 	.word	0x08024fc4
 800ca98:	08024fe8 	.word	0x08024fe8

0800ca9c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800cac0:	b590      	push	{r4, r7, lr}
 800cac2:	b089      	sub	sp, #36	@ 0x24
 800cac4:	af04      	add	r7, sp, #16
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800caca:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cace:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d104      	bne.n	800cae0 <vRAProcess+0x20>
 800cad6:	f240 2189 	movw	r1, #649	@ 0x289
 800cada:	4828      	ldr	r0, [pc, #160]	@ (800cb7c <vRAProcess+0xbc>)
 800cadc:	f7f4 fdbc 	bl	8001658 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cae6:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d002      	beq.n	800caf4 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800caee:	6838      	ldr	r0, [r7, #0]
 800caf0:	f7ff ffd4 	bl	800ca9c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800caf4:	68f9      	ldr	r1, [r7, #12]
 800caf6:	6838      	ldr	r0, [r7, #0]
 800caf8:	f7ff fe40 	bl	800c77c <xRAProcess_HandleWaitStates>
 800cafc:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800cafe:	68f9      	ldr	r1, [r7, #12]
 800cb00:	6838      	ldr	r0, [r7, #0]
 800cb02:	f7ff ff25 	bl	800c950 <xRAProcess_HandleOtherStates>
 800cb06:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800cb14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	461c      	mov	r4, r3
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800cb22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	4618      	mov	r0, r3
 800cb2a:	7afb      	ldrb	r3, [r7, #11]
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800cb32:	9202      	str	r2, [sp, #8]
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	9000      	str	r0, [sp, #0]
 800cb38:	4623      	mov	r3, r4
 800cb3a:	460a      	mov	r2, r1
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	4810      	ldr	r0, [pc, #64]	@ (800cb80 <vRAProcess+0xc0>)
 800cb40:	f014 feaa 	bl	8021898 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00d      	beq.n	800cb66 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	4a0d      	ldr	r2, [pc, #52]	@ (800cb84 <vRAProcess+0xc4>)
 800cb4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb52:	099b      	lsrs	r3, r3, #6
 800cb54:	4619      	mov	r1, r3
 800cb56:	480c      	ldr	r0, [pc, #48]	@ (800cb88 <vRAProcess+0xc8>)
 800cb58:	f014 fe9e 	bl	8021898 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	6838      	ldr	r0, [r7, #0]
 800cb60:	f7fc ff8a 	bl	8009a78 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800cb64:	e006      	b.n	800cb74 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800cb66:	4809      	ldr	r0, [pc, #36]	@ (800cb8c <vRAProcess+0xcc>)
 800cb68:	f014 fe96 	bl	8021898 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	6838      	ldr	r0, [r7, #0]
 800cb70:	f7fd f836 	bl	8009be0 <vIPSetDHCP_RATimerEnableState>
    }
 800cb74:	bf00      	nop
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd90      	pop	{r4, r7, pc}
 800cb7c:	08024d30 	.word	0x08024d30
 800cb80:	08025010 	.word	0x08025010
 800cb84:	10624dd3 	.word	0x10624dd3
 800cb88:	0802505c 	.word	0x0802505c
 800cb8c:	08025074 	.word	0x08025074

0800cb90 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <FreeRTOS_FillEndPoint+0x1a>
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d105      	bne.n	800cbb6 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	68f9      	ldr	r1, [r7, #12]
 800cbae:	483f      	ldr	r0, [pc, #252]	@ (800ccac <FreeRTOS_FillEndPoint+0x11c>)
 800cbb0:	f014 fe72 	bl	8021898 <lUDPLoggingPrintf>
 800cbb4:	e075      	b.n	800cca2 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cbbc:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800cbbe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	68b8      	ldr	r0, [r7, #8]
 800cbc6:	f015 f990 	bl	8021eea <memset>
            pxEndPoint->pxNext = pxNext;
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	697a      	ldr	r2, [r7, #20]
 800cbce:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	3303      	adds	r3, #3
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	061a      	lsls	r2, r3, #24
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3302      	adds	r3, #2
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	041b      	lsls	r3, r3, #16
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	4313      	orrs	r3, r2
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	7812      	ldrb	r2, [r2, #0]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	3303      	adds	r3, #3
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	061a      	lsls	r2, r3, #24
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	3302      	adds	r3, #2
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	041b      	lsls	r3, r3, #16
 800cc06:	431a      	orrs	r2, r3
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	021b      	lsls	r3, r3, #8
 800cc10:	4313      	orrs	r3, r2
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	7812      	ldrb	r2, [r2, #0]
 800cc16:	431a      	orrs	r2, r3
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	3303      	adds	r3, #3
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	061a      	lsls	r2, r3, #24
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	3302      	adds	r3, #2
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	041b      	lsls	r3, r3, #16
 800cc2c:	431a      	orrs	r2, r3
 800cc2e:	6a3b      	ldr	r3, [r7, #32]
 800cc30:	3301      	adds	r3, #1
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	021b      	lsls	r3, r3, #8
 800cc36:	4313      	orrs	r3, r2
 800cc38:	6a3a      	ldr	r2, [r7, #32]
 800cc3a:	7812      	ldrb	r2, [r2, #0]
 800cc3c:	431a      	orrs	r2, r3
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc44:	3303      	adds	r3, #3
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	061a      	lsls	r2, r3, #24
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4c:	3302      	adds	r3, #2
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	041b      	lsls	r3, r3, #16
 800cc52:	431a      	orrs	r2, r3
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	3301      	adds	r3, #1
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	021b      	lsls	r3, r3, #8
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc60:	7812      	ldrb	r2, [r2, #0]
 800cc62:	431a      	orrs	r2, r3
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	43da      	mvns	r2, r3
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	431a      	orrs	r2, r3
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	331c      	adds	r3, #28
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	221c      	movs	r2, #28
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f015 f826 	bl	8021cd0 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	693a      	ldr	r2, [r7, #16]
 800cc88:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	33e8      	adds	r3, #232	@ 0xe8
 800cc8e:	2206      	movs	r2, #6
 800cc90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc92:	4618      	mov	r0, r3
 800cc94:	f015 f81c 	bl	8021cd0 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800cc98:	68b9      	ldr	r1, [r7, #8]
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f000 f85c 	bl	800cd58 <FreeRTOS_AddEndPoint>
        }
    }
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	0802508c 	.word	0x0802508c

0800ccb0 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d021      	beq.n	800cd06 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800ccc2:	4b14      	ldr	r3, [pc, #80]	@ (800cd14 <FreeRTOS_AddNetworkInterface+0x64>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d106      	bne.n	800ccd8 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800ccca:	4a12      	ldr	r2, [pc, #72]	@ (800cd14 <FreeRTOS_AddNetworkInterface+0x64>)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	625a      	str	r2, [r3, #36]	@ 0x24
 800ccd6:	e016      	b.n	800cd06 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800ccd8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd14 <FreeRTOS_AddNetworkInterface+0x64>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d00e      	beq.n	800cd04 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800ccfa:	e004      	b.n	800cd06 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd00:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800cd02:	e7ec      	b.n	800ccde <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800cd04:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800cd06:	687b      	ldr	r3, [r7, #4]
    }
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3714      	adds	r7, #20
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	20001364 	.word	0x20001364

0800cd18 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800cd18:	b480      	push	{r7}
 800cd1a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800cd1c:	4b03      	ldr	r3, [pc, #12]	@ (800cd2c <FreeRTOS_FirstNetworkInterface+0x14>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
    }
 800cd20:	4618      	mov	r0, r3
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	20001364 	.word	0x20001364

0800cd30 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d003      	beq.n	800cd46 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e001      	b.n	800cd4a <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
    }
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d102      	bne.n	800cd7c <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800cd7c:	4b33      	ldr	r3, [pc, #204]	@ (800ce4c <FreeRTOS_AddEndPoint+0xf4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d107      	bne.n	800cd94 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800cd8c:	4a2f      	ldr	r2, [pc, #188]	@ (800ce4c <FreeRTOS_AddEndPoint+0xf4>)
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6013      	str	r3, [r2, #0]
 800cd92:	e01a      	b.n	800cdca <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800cd94:	4b2d      	ldr	r3, [pc, #180]	@ (800ce4c <FreeRTOS_AddEndPoint+0xf4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d012      	beq.n	800cdc8 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d108      	bne.n	800cdbe <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	683a      	ldr	r2, [r7, #0]
 800cdb8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800cdbc:	e005      	b.n	800cdca <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cdc4:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800cdc6:	e7e8      	b.n	800cd9a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800cdc8:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cdd0:	f003 0304 	and.w	r3, r3, #4
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00c      	beq.n	800cdf4 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800cde0:	4619      	mov	r1, r3
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800cde8:	461a      	mov	r2, r3
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	3390      	adds	r3, #144	@ 0x90
 800cdee:	4818      	ldr	r0, [pc, #96]	@ (800ce50 <FreeRTOS_AddEndPoint+0xf8>)
 800cdf0:	f014 fd52 	bl	8021898 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cdfa:	f003 0304 	and.w	r3, r3, #4
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d11e      	bne.n	800ce42 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800ce12:	4618      	mov	r0, r3
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	69db      	ldr	r3, [r3, #28]
 800ce18:	061a      	lsls	r2, r3, #24
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	021b      	lsls	r3, r3, #8
 800ce20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce24:	431a      	orrs	r2, r3
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	69db      	ldr	r3, [r3, #28]
 800ce2a:	0a1b      	lsrs	r3, r3, #8
 800ce2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce30:	431a      	orrs	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	0e1b      	lsrs	r3, r3, #24
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	4805      	ldr	r0, [pc, #20]	@ (800ce54 <FreeRTOS_AddEndPoint+0xfc>)
 800ce3e:	f014 fd2b 	bl	8021898 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800ce42:	683b      	ldr	r3, [r7, #0]
    }
 800ce44:	4618      	mov	r0, r3
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	20001360 	.word	0x20001360
 800ce50:	080250cc 	.word	0x080250cc
 800ce54:	08025100 	.word	0x08025100

0800ce58 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800ce60:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <FreeRTOS_FirstEndPoint+0x40>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800ce66:	e00c      	b.n	800ce82 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00c      	beq.n	800ce88 <FreeRTOS_FirstEndPoint+0x30>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d006      	beq.n	800ce88 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ce80:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1ef      	bne.n	800ce68 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800ce88:	68fb      	ldr	r3, [r7, #12]
    }
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3714      	adds	r7, #20
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	20001360 	.word	0x20001360

0800ce9c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d015      	beq.n	800cedc <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ceb6:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800ceb8:	e00c      	b.n	800ced4 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d011      	beq.n	800cee4 <FreeRTOS_NextEndPoint+0x48>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d00b      	beq.n	800cee4 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ced2:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1ef      	bne.n	800ceba <FreeRTOS_NextEndPoint+0x1e>
 800ceda:	e003      	b.n	800cee4 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ffbb 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 800cee2:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800cee4:	68fb      	ldr	r3, [r7, #12]
    }
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cefa:	4b1e      	ldr	r3, [pc, #120]	@ (800cf74 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800cf00:	2308      	movs	r3, #8
 800cf02:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800cf04:	4b1c      	ldr	r3, [pc, #112]	@ (800cf78 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	4a1b      	ldr	r2, [pc, #108]	@ (800cf78 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf0c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d223      	bcs.n	800cf5e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800cf16:	4a18      	ldr	r2, [pc, #96]	@ (800cf78 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	3312      	adds	r3, #18
 800cf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	4915      	ldr	r1, [pc, #84]	@ (800cf78 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	3312      	adds	r3, #18
 800cf28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800cf2c:	e017      	b.n	800cf5e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10b      	bne.n	800cf56 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00f      	beq.n	800cf64 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d006      	beq.n	800cf64 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cf5c:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1e4      	bne.n	800cf2e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800cf64:	68fb      	ldr	r3, [r7, #12]
    }
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	20001360 	.word	0x20001360
 800cf78:	20001368 	.word	0x20001368

0800cf7c <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800cf84:	6879      	ldr	r1, [r7, #4]
 800cf86:	2000      	movs	r0, #0
 800cf88:	f000 f8b6 	bl	800d0f8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800cf8c:	4603      	mov	r3, r0
        }
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cfa2:	4b17      	ldr	r3, [pc, #92]	@ (800d000 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800cfa8:	4b16      	ldr	r3, [pc, #88]	@ (800d004 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	3301      	adds	r3, #1
 800cfae:	4a15      	ldr	r2, [pc, #84]	@ (800d004 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800cfb0:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d119      	bne.n	800cfec <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800cfbc:	e016      	b.n	800cfec <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d005      	beq.n	800cfd0 <FreeRTOS_FindEndPointOnMAC+0x38>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d109      	bne.n	800cfe4 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	33e8      	adds	r3, #232	@ 0xe8
 800cfd4:	6879      	ldr	r1, [r7, #4]
 800cfd6:	2206      	movs	r2, #6
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f015 fe0e 	bl	8022bfa <memcmp>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cfea:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e5      	bne.n	800cfbe <FreeRTOS_FindEndPointOnMAC+0x26>
 800cff2:	e000      	b.n	800cff6 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800cff4:	bf00      	nop
        }

        return pxEndPoint;
 800cff6:	68fb      	ldr	r3, [r7, #12]
    }
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	20001360 	.word	0x20001360
 800d004:	20001368 	.word	0x20001368

0800d008 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	2000      	movs	r0, #0
 800d018:	f000 f806 	bl	800d028 <FreeRTOS_InterfaceEndPointOnNetMask>
 800d01c:	4603      	mov	r3, r0
    }
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
	...

0800d028 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d034:	4b2d      	ldr	r3, [pc, #180]	@ (800d0ec <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800d03a:	230e      	movs	r3, #14
 800d03c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800d03e:	4b2c      	ldr	r3, [pc, #176]	@ (800d0f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	3301      	adds	r3, #1
 800d044:	4a2a      	ldr	r2, [pc, #168]	@ (800d0f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d046:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d22d      	bcs.n	800d0ac <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800d050:	4a27      	ldr	r2, [pc, #156]	@ (800d0f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3304      	adds	r3, #4
 800d056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	4924      	ldr	r1, [pc, #144]	@ (800d0f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3304      	adds	r3, #4
 800d062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800d066:	e021      	b.n	800d0ac <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d005      	beq.n	800d07a <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	429a      	cmp	r2, r3
 800d078:	d114      	bne.n	800d0a4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d080:	f003 0304 	and.w	r3, r3, #4
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10c      	bne.n	800d0a4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d090:	d00f      	beq.n	800d0b2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	405a      	eors	r2, r3
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d006      	beq.n	800d0b2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d0aa:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1da      	bne.n	800d068 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d113      	bne.n	800d0e0 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	061a      	lsls	r2, r3, #24
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	021b      	lsls	r3, r3, #8
 800d0c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	0a1b      	lsrs	r3, r3, #8
 800d0ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	0e1b      	lsrs	r3, r3, #24
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	4806      	ldr	r0, [pc, #24]	@ (800d0f4 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800d0dc:	f014 fbdc 	bl	8021898 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800d0e0:	697b      	ldr	r3, [r7, #20]
    }
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3718      	adds	r7, #24
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	20001360 	.word	0x20001360
 800d0f0:	20001368 	.word	0x20001368
 800d0f4:	08025134 	.word	0x08025134

0800d0f8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d102:	4b17      	ldr	r3, [pc, #92]	@ (800d160 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800d108:	e020      	b.n	800d14c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d005      	beq.n	800d11c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d113      	bne.n	800d144 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d122:	f003 0304 	and.w	r3, r3, #4
 800d126:	b2db      	uxtb	r3, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00b      	beq.n	800d144 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d136:	461a      	mov	r2, r3
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	f7fd fc0b 	bl	800a954 <xCompareIPv6_Address>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d007      	beq.n	800d154 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d14a:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1db      	bne.n	800d10a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800d152:	e000      	b.n	800d156 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800d154:	bf00      	nop
            }

            return pxEndPoint;
 800d156:	68fb      	ldr	r3, [r7, #12]
        }
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	20001360 	.word	0x20001360

0800d164 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800d164:	b5b0      	push	{r4, r5, r7, lr}
 800d166:	b0b0      	sub	sp, #192	@ 0xc0
 800d168:	af04      	add	r7, sp, #16
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	607a      	str	r2, [r7, #4]
 800d16e:	603b      	str	r3, [r7, #0]
 800d170:	460b      	mov	r3, r1
 800d172:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800d174:	2300      	movs	r3, #0
 800d176:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800d17a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	605a      	str	r2, [r3, #4]
 800d184:	609a      	str	r2, [r3, #8]
 800d186:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800d188:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800d18c:	2200      	movs	r2, #0
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	605a      	str	r2, [r3, #4]
 800d192:	609a      	str	r2, [r3, #8]
 800d194:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800d196:	897b      	ldrh	r3, [r7, #10]
 800d198:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d101      	bne.n	800d1a4 <pxEasyFit+0x40>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e000      	b.n	800d1a6 <pxEasyFit+0x42>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800d1b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d123      	bne.n	800d206 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2210      	movs	r2, #16
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	4888      	ldr	r0, [pc, #544]	@ (800d3e8 <pxEasyFit+0x284>)
 800d1c6:	f015 fd18 	bl	8022bfa <memcmp>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <pxEasyFit+0x70>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e000      	b.n	800d1d6 <pxEasyFit+0x72>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800d1da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d105      	bne.n	800d1ee <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4880      	ldr	r0, [pc, #512]	@ (800d3ec <pxEasyFit+0x288>)
 800d1ea:	f014 fb55 	bl	8021898 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 fa15 	bl	800d620 <xIPv6_GetIPType>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <pxEasyFit+0x9c>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e000      	b.n	800d202 <pxEasyFit+0x9e>
 800d200:	2300      	movs	r3, #0
 800d202:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f7ff fe26 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 800d20c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d210:	e07d      	b.n	800d30e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800d212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d216:	33e8      	adds	r3, #232	@ 0xe8
 800d218:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800d21c:	2206      	movs	r2, #6
 800d21e:	4618      	mov	r0, r3
 800d220:	f015 fceb 	bl	8022bfa <memcmp>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <pxEasyFit+0xca>
 800d22a:	2301      	movs	r3, #1
 800d22c:	e000      	b.n	800d230 <pxEasyFit+0xcc>
 800d22e:	2300      	movs	r3, #0
 800d230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800d234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d238:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d23c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d240:	b2db      	uxtb	r3, r3
 800d242:	461a      	mov	r2, r3
 800d244:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d248:	4293      	cmp	r3, r2
 800d24a:	d159      	bne.n	800d300 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800d24c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d250:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800d252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d254:	3301      	adds	r3, #1
 800d256:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d134      	bne.n	800d2ca <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d264:	3338      	adds	r3, #56	@ 0x38
 800d266:	4618      	mov	r0, r3
 800d268:	f000 f9da 	bl	800d620 <xIPv6_GetIPType>
 800d26c:	4603      	mov	r3, r0
 800d26e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800d272:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d276:	2b05      	cmp	r3, #5
 800d278:	d035      	beq.n	800d2e6 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d27a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d101      	bne.n	800d286 <pxEasyFit+0x122>
 800d282:	2301      	movs	r3, #1
 800d284:	e000      	b.n	800d288 <pxEasyFit+0x124>
 800d286:	2300      	movs	r3, #0
 800d288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800d28c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d290:	3338      	adds	r3, #56	@ 0x38
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	2210      	movs	r2, #16
 800d296:	4618      	mov	r0, r3
 800d298:	f015 fcaf 	bl	8022bfa <memcmp>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d2a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2a6:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800d2a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800d2ae:	e01a      	b.n	800d2e6 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800d2b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d2b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d114      	bne.n	800d2e6 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800d2bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2c0:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800d2c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800d2c8:	e00d      	b.n	800d2e6 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800d2ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d2d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2dc:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800d2de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800d2e4:	e001      	b.n	800d2ea <pxEasyFit+0x186>
                           break;
 800d2e6:	bf00      	nop
 800d2e8:	e000      	b.n	800d2ec <pxEasyFit+0x188>
                        break;
 800d2ea:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800d2ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d105      	bne.n	800d300 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800d2f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800d2fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2fe:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800d300:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	f7ff fdc9 	bl	800ce9c <FreeRTOS_NextEndPoint>
 800d30a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800d30e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d312:	2b00      	cmp	r3, #0
 800d314:	f47f af7d 	bne.w	800d212 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d318:	2300      	movs	r3, #0
 800d31a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d31e:	e017      	b.n	800d350 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800d320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	33b0      	adds	r3, #176	@ 0xb0
 800d328:	443b      	add	r3, r7
 800d32a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dd09      	ble.n	800d346 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800d332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	33b0      	adds	r3, #176	@ 0xb0
 800d33a:	443b      	add	r3, r7
 800d33c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800d340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800d344:	e008      	b.n	800d358 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d34a:	3301      	adds	r3, #1
 800d34c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d354:	2b03      	cmp	r3, #3
 800d356:	dde3      	ble.n	800d320 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800d358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d13c      	bne.n	800d3da <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800d360:	897b      	ldrh	r3, [r7, #10]
 800d362:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d366:	4293      	cmp	r3, r2
 800d368:	d101      	bne.n	800d36e <pxEasyFit+0x20a>
 800d36a:	230a      	movs	r3, #10
 800d36c:	e000      	b.n	800d370 <pxEasyFit+0x20c>
 800d36e:	2302      	movs	r3, #2
 800d370:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800d374:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800d376:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d37a:	2328      	movs	r3, #40	@ 0x28
 800d37c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d380:	f001 fc70 	bl	800ec64 <FreeRTOS_inet_ntop>
 800d384:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800d388:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800d38a:	f107 0210 	add.w	r2, r7, #16
 800d38e:	2328      	movs	r3, #40	@ 0x28
 800d390:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d394:	f001 fc66 	bl	800ec64 <FreeRTOS_inet_ntop>
 800d398:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800d39c:	8979      	ldrh	r1, [r7, #10]
 800d39e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3a0:	461c      	mov	r4, r3
 800d3a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3a4:	461d      	mov	r5, r3
 800d3a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d002      	beq.n	800d3b8 <pxEasyFit+0x254>
 800d3b2:	f107 0310 	add.w	r3, r7, #16
 800d3b6:	e000      	b.n	800d3ba <pxEasyFit+0x256>
 800d3b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f0 <pxEasyFit+0x28c>)
 800d3ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	d002      	beq.n	800d3c8 <pxEasyFit+0x264>
 800d3c2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d3c6:	e000      	b.n	800d3ca <pxEasyFit+0x266>
 800d3c8:	4a09      	ldr	r2, [pc, #36]	@ (800d3f0 <pxEasyFit+0x28c>)
 800d3ca:	9202      	str	r2, [sp, #8]
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	9000      	str	r0, [sp, #0]
 800d3d0:	462b      	mov	r3, r5
 800d3d2:	4622      	mov	r2, r4
 800d3d4:	4807      	ldr	r0, [pc, #28]	@ (800d3f4 <pxEasyFit+0x290>)
 800d3d6:	f014 fa5f 	bl	8021898 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800d3da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800d3de:	4618      	mov	r0, r3
 800d3e0:	37b0      	adds	r7, #176	@ 0xb0
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	08026f80 	.word	0x08026f80
 800d3ec:	080251d0 	.word	0x080251d0
 800d3f0:	080251ec 	.word	0x080251ec
 800d3f4:	080251f4 	.word	0x080251f4

0800d3f8 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800d3f8:	b590      	push	{r4, r7, lr}
 800d3fa:	b097      	sub	sp, #92	@ 0x5c
 800d3fc:	af02      	add	r7, sp, #8
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800d402:	2300      	movs	r3, #0
 800d404:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d104      	bne.n	800d41e <FreeRTOS_MatchingEndpoint+0x26>
 800d414:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800d418:	485e      	ldr	r0, [pc, #376]	@ (800d594 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d41a:	f7f4 f91d 	bl	8001658 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800d422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d424:	3302      	adds	r3, #2
 800d426:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800d428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d42a:	f003 0303 	and.w	r3, r3, #3
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <FreeRTOS_MatchingEndpoint+0x44>
 800d432:	f240 319b 	movw	r1, #923	@ 0x39b
 800d436:	4857      	ldr	r0, [pc, #348]	@ (800d594 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d438:	f7f4 f90e 	bl	8001658 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800d43c:	4b56      	ldr	r3, [pc, #344]	@ (800d598 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	3301      	adds	r3, #1
 800d442:	4a55      	ldr	r2, [pc, #340]	@ (800d598 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d444:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800d446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d448:	7b1a      	ldrb	r2, [r3, #12]
 800d44a:	7b5b      	ldrb	r3, [r3, #13]
 800d44c:	021b      	lsls	r3, r3, #8
 800d44e:	4313      	orrs	r3, r2
 800d450:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800d452:	2300      	movs	r3, #0
 800d454:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d45a:	2210      	movs	r2, #16
 800d45c:	2100      	movs	r1, #0
 800d45e:	4618      	mov	r0, r3
 800d460:	f014 fd43 	bl	8021eea <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d464:	f107 0314 	add.w	r3, r7, #20
 800d468:	2210      	movs	r2, #16
 800d46a:	2100      	movs	r1, #0
 800d46c:	4618      	mov	r0, r3
 800d46e:	f014 fd3c 	bl	8021eea <memset>

            switch( usFrameType )
 800d472:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d474:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d478:	4293      	cmp	r3, r2
 800d47a:	d009      	beq.n	800d490 <FreeRTOS_MatchingEndpoint+0x98>
 800d47c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d480:	4293      	cmp	r3, r2
 800d482:	dc6a      	bgt.n	800d55a <FreeRTOS_MatchingEndpoint+0x162>
 800d484:	2b08      	cmp	r3, #8
 800d486:	d05d      	beq.n	800d544 <FreeRTOS_MatchingEndpoint+0x14c>
 800d488:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d48c:	d015      	beq.n	800d4ba <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800d48e:	e064      	b.n	800d55a <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d492:	3316      	adds	r3, #22
 800d494:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800d498:	6818      	ldr	r0, [r3, #0]
 800d49a:	6859      	ldr	r1, [r3, #4]
 800d49c:	689a      	ldr	r2, [r3, #8]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d4a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4a4:	3326      	adds	r3, #38	@ 0x26
 800d4a6:	f107 0414 	add.w	r4, r7, #20
 800d4aa:	6818      	ldr	r0, [r3, #0]
 800d4ac:	6859      	ldr	r1, [r3, #4]
 800d4ae:	689a      	ldr	r2, [r3, #8]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d4b8:	e050      	b.n	800d55c <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800d4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4c0:	8a9b      	ldrh	r3, [r3, #20]
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4c8:	d108      	bne.n	800d4dc <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d4ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4cc:	331c      	adds	r3, #28
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d4d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4d4:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d4d8:	617b      	str	r3, [r7, #20]
 800d4da:	e00d      	b.n	800d4f8 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4de:	8a9b      	ldrh	r3, [r3, #20]
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4e6:	d107      	bne.n	800d4f8 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4ea:	331c      	adds	r3, #28
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d4f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4f2:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d4f6:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fa:	061a      	lsls	r2, r3, #24
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fe:	021b      	lsls	r3, r3, #8
 800d500:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d504:	431a      	orrs	r2, r3
 800d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d508:	0a1b      	lsrs	r3, r3, #8
 800d50a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d50e:	431a      	orrs	r2, r3
 800d510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d512:	0e1b      	lsrs	r3, r3, #24
 800d514:	ea42 0103 	orr.w	r1, r2, r3
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	061a      	lsls	r2, r3, #24
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	021b      	lsls	r3, r3, #8
 800d520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d524:	431a      	orrs	r2, r3
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	0a1b      	lsrs	r3, r3, #8
 800d52a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d52e:	431a      	orrs	r2, r3
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	0e1b      	lsrs	r3, r3, #24
 800d534:	4313      	orrs	r3, r2
 800d536:	461a      	mov	r2, r3
 800d538:	4818      	ldr	r0, [pc, #96]	@ (800d59c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800d53a:	f014 f9ad 	bl	8021898 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800d53e:	2301      	movs	r3, #1
 800d540:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d542:	e00b      	b.n	800d55c <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800d544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d546:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800d54c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d54e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800d552:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800d554:	2301      	movs	r3, #1
 800d556:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d558:	e000      	b.n	800d55c <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800d55a:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800d55c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d113      	bne.n	800d58a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800d562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d564:	f107 030c 	add.w	r3, r7, #12
 800d568:	6810      	ldr	r0, [r2, #0]
 800d56a:	6018      	str	r0, [r3, #0]
 800d56c:	8892      	ldrh	r2, [r2, #4]
 800d56e:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800d570:	f107 0014 	add.w	r0, r7, #20
 800d574:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d578:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800d57a:	f107 030c 	add.w	r3, r7, #12
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	4603      	mov	r3, r0
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff fdee 	bl	800d164 <pxEasyFit>
 800d588:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800d58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800d58c:	4618      	mov	r0, r3
 800d58e:	3754      	adds	r7, #84	@ 0x54
 800d590:	46bd      	mov	sp, r7
 800d592:	bd90      	pop	{r4, r7, pc}
 800d594:	0802521c 	.word	0x0802521c
 800d598:	20001368 	.word	0x20001368
 800d59c:	0802524c 	.word	0x0802524c

0800d5a0 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d5a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d618 <FreeRTOS_FindGateWay+0x78>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800d5ae:	e028      	b.n	800d602 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b60      	cmp	r3, #96	@ 0x60
 800d5b4:	d112      	bne.n	800d5dc <FreeRTOS_FindGateWay+0x3c>
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d5bc:	f003 0304 	and.w	r3, r3, #4
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00a      	beq.n	800d5dc <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	335c      	adds	r3, #92	@ 0x5c
 800d5ca:	2210      	movs	r2, #16
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4813      	ldr	r0, [pc, #76]	@ (800d61c <FreeRTOS_FindGateWay+0x7c>)
 800d5d0:	f015 fb13 	bl	8022bfa <memcmp>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00f      	beq.n	800d5fa <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800d5da:	e017      	b.n	800d60c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b40      	cmp	r3, #64	@ 0x40
 800d5e0:	d10b      	bne.n	800d5fa <FreeRTOS_FindGateWay+0x5a>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d107      	bne.n	800d60a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d600:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1d3      	bne.n	800d5b0 <FreeRTOS_FindGateWay+0x10>
 800d608:	e000      	b.n	800d60c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800d60a:	bf00      	nop
        }

        return pxEndPoint;
 800d60c:	68fb      	ldr	r3, [r7, #12]
    }
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20001360 	.word	0x20001360
 800d61c:	08026f38 	.word	0x08026f38

0800d620 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800d628:	2305      	movs	r3, #5
 800d62a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d046      	beq.n	800d6c0 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d632:	2300      	movs	r3, #0
 800d634:	613b      	str	r3, [r7, #16]
 800d636:	e040      	b.n	800d6ba <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	021b      	lsls	r3, r3, #8
 800d63e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	785b      	ldrb	r3, [r3, #1]
 800d644:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d646:	4313      	orrs	r3, r2
 800d648:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800d64a:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800d64c:	491f      	ldr	r1, [pc, #124]	@ (800d6cc <xIPv6_GetIPType+0xac>)
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	4613      	mov	r3, r2
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	4413      	add	r3, r2
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	440b      	add	r3, r1
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b04      	cmp	r3, #4
 800d65e:	d108      	bne.n	800d672 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7fd f929 	bl	800a8b8 <xIsIPv6Loopback>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800d66c:	2304      	movs	r3, #4
 800d66e:	75fb      	strb	r3, [r7, #23]
                        break;
 800d670:	e026      	b.n	800d6c0 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800d672:	4916      	ldr	r1, [pc, #88]	@ (800d6cc <xIPv6_GetIPType+0xac>)
 800d674:	693a      	ldr	r2, [r7, #16]
 800d676:	4613      	mov	r3, r2
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	4413      	add	r3, r2
 800d67c:	005b      	lsls	r3, r3, #1
 800d67e:	440b      	add	r3, r1
 800d680:	3302      	adds	r3, #2
 800d682:	881a      	ldrh	r2, [r3, #0]
 800d684:	89fb      	ldrh	r3, [r7, #14]
 800d686:	4013      	ands	r3, r2
 800d688:	b299      	uxth	r1, r3
 800d68a:	4810      	ldr	r0, [pc, #64]	@ (800d6cc <xIPv6_GetIPType+0xac>)
 800d68c:	693a      	ldr	r2, [r7, #16]
 800d68e:	4613      	mov	r3, r2
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	4413      	add	r3, r2
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	4403      	add	r3, r0
 800d698:	3304      	adds	r3, #4
 800d69a:	881b      	ldrh	r3, [r3, #0]
 800d69c:	4299      	cmp	r1, r3
 800d69e:	d109      	bne.n	800d6b4 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800d6a0:	490a      	ldr	r1, [pc, #40]	@ (800d6cc <xIPv6_GetIPType+0xac>)
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	4413      	add	r3, r2
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	440b      	add	r3, r1
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	75fb      	strb	r3, [r7, #23]
                    break;
 800d6b2:	e005      	b.n	800d6c0 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	613b      	str	r3, [r7, #16]
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2b04      	cmp	r3, #4
 800d6be:	ddbb      	ble.n	800d638 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3718      	adds	r7, #24
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	08026f90 	.word	0x08026f90

0800d6d0 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d105      	bne.n	800d6ee <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d6e2:	4a16      	ldr	r2, [pc, #88]	@ (800d73c <pcEndpointName+0x6c>)
 800d6e4:	6879      	ldr	r1, [r7, #4]
 800d6e6:	68b8      	ldr	r0, [r7, #8]
 800d6e8:	f015 f902 	bl	80228f0 <snprintf>
 800d6ec:	e020      	b.n	800d730 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d6f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <pcEndpointName+0x34>
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d007      	beq.n	800d712 <pcEndpointName+0x42>
 800d702:	e00f      	b.n	800d724 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800d704:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	2002      	movs	r0, #2
 800d70c:	f001 faaa 	bl	800ec64 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d710:	e00e      	b.n	800d730 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	200a      	movs	r0, #10
 800d71e:	f001 faa1 	bl	800ec64 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d722:	e005      	b.n	800d730 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d724:	4a05      	ldr	r2, [pc, #20]	@ (800d73c <pcEndpointName+0x6c>)
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	68b8      	ldr	r0, [r7, #8]
 800d72a:	f015 f8e1 	bl	80228f0 <snprintf>
                    break;
 800d72e:	bf00      	nop
            }
        }

        return pcBuffer;
 800d730:	68bb      	ldr	r3, [r7, #8]
    }
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	0802526c 	.word	0x0802526c

0800d740 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f002 fb21 	bl	800fd94 <xSocketValid>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800d758:	2300      	movs	r3, #0
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	e015      	b.n	800d78a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d006      	beq.n	800d772 <prvValidSocket+0x32>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	69db      	ldr	r3, [r3, #28]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d102      	bne.n	800d772 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800d76c:	2300      	movs	r3, #0
 800d76e:	617b      	str	r3, [r7, #20]
 800d770:	e00b      	b.n	800d78a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d002      	beq.n	800d786 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800d780:	2300      	movs	r3, #0
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	e001      	b.n	800d78a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800d786:	2301      	movs	r3, #1
 800d788:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d78a:	697b      	ldr	r3, [r7, #20]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3718      	adds	r7, #24
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800d798:	4803      	ldr	r0, [pc, #12]	@ (800d7a8 <vNetworkSocketsInit+0x14>)
 800d79a:	f7f5 fa47 	bl	8002c2c <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800d79e:	4803      	ldr	r0, [pc, #12]	@ (800d7ac <vNetworkSocketsInit+0x18>)
 800d7a0:	f7f5 fa44 	bl	8002c2c <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800d7a4:	bf00      	nop
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	2000142c 	.word	0x2000142c
 800d7ac:	20001440 	.word	0x20001440

0800d7b0 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800d7c6:	f7fb ff97 	bl	80096f8 <xIPIsNetworkTaskReady>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d102      	bne.n	800d7d6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	e05e      	b.n	800d894 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d004      	beq.n	800d7e6 <prvDetermineSocketSize+0x36>
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b0a      	cmp	r3, #10
 800d7e0:	d001      	beq.n	800d7e6 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d002      	beq.n	800d7f2 <prvDetermineSocketSize+0x42>
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b0a      	cmp	r3, #10
 800d7f0:	d101      	bne.n	800d7f6 <prvDetermineSocketSize+0x46>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e000      	b.n	800d7f8 <prvDetermineSocketSize+0x48>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d104      	bne.n	800d806 <prvDetermineSocketSize+0x56>
 800d7fc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d800:	4827      	ldr	r0, [pc, #156]	@ (800d8a0 <prvDetermineSocketSize+0xf0>)
 800d802:	f7f3 ff29 	bl	8001658 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800d806:	4b27      	ldr	r3, [pc, #156]	@ (800d8a4 <prvDetermineSocketSize+0xf4>)
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d80e:	d004      	beq.n	800d81a <prvDetermineSocketSize+0x6a>
 800d810:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800d814:	4822      	ldr	r0, [pc, #136]	@ (800d8a0 <prvDetermineSocketSize+0xf0>)
 800d816:	f7f3 ff1f 	bl	8001658 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800d81a:	4b23      	ldr	r3, [pc, #140]	@ (800d8a8 <prvDetermineSocketSize+0xf8>)
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d822:	d004      	beq.n	800d82e <prvDetermineSocketSize+0x7e>
 800d824:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800d828:	481d      	ldr	r0, [pc, #116]	@ (800d8a0 <prvDetermineSocketSize+0xf0>)
 800d82a:	f7f3 ff15 	bl	8001658 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b11      	cmp	r3, #17
 800d832:	d110      	bne.n	800d856 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d009      	beq.n	800d84e <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2b01      	cmp	r3, #1
 800d842:	d004      	beq.n	800d84e <prvDetermineSocketSize+0x9e>
 800d844:	f240 2106 	movw	r1, #518	@ 0x206
 800d848:	4815      	ldr	r0, [pc, #84]	@ (800d8a0 <prvDetermineSocketSize+0xf0>)
 800d84a:	f7f3 ff05 	bl	8001658 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2270      	movs	r2, #112	@ 0x70
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	e01e      	b.n	800d894 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b06      	cmp	r3, #6
 800d85a:	d111      	bne.n	800d880 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d009      	beq.n	800d876 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800d862:	2300      	movs	r3, #0
 800d864:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d004      	beq.n	800d876 <prvDetermineSocketSize+0xc6>
 800d86c:	f240 2113 	movw	r1, #531	@ 0x213
 800d870:	480b      	ldr	r0, [pc, #44]	@ (800d8a0 <prvDetermineSocketSize+0xf0>)
 800d872:	f7f3 fef1 	bl	8001658 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	e009      	b.n	800d894 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800d880:	2300      	movs	r3, #0
 800d882:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d004      	beq.n	800d894 <prvDetermineSocketSize+0xe4>
 800d88a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800d88e:	4804      	ldr	r0, [pc, #16]	@ (800d8a0 <prvDetermineSocketSize+0xf0>)
 800d890:	f7f3 fee2 	bl	8001658 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800d894:	697b      	ldr	r3, [r7, #20]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	08025274 	.word	0x08025274
 800d8a4:	2000142c 	.word	0x2000142c
 800d8a8:	20001440 	.word	0x20001440

0800d8ac <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d8bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7a1b      	ldrb	r3, [r3, #8]
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00a      	beq.n	800d8e4 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800d8ce:	2314      	movs	r3, #20
 800d8d0:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800d8d8:	89fb      	ldrh	r3, [r7, #14]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d8ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800d8ee:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800d8f2:	f640 3068 	movw	r0, #2920	@ 0xb68
 800d8f6:	f7fc fc85 	bl	800a204 <FreeRTOS_round_up>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d908:	08db      	lsrs	r3, r3, #3
 800d90a:	4a10      	ldr	r2, [pc, #64]	@ (800d94c <prvInitialiseTCPFields+0xa0>)
 800d90c:	fba2 2303 	umull	r2, r3, r2, r3
 800d910:	099b      	lsrs	r3, r3, #6
 800d912:	4619      	mov	r1, r3
 800d914:	2001      	movs	r0, #1
 800d916:	f7fc fc35 	bl	800a184 <FreeRTOS_max_size_t>
 800d91a:	4602      	mov	r2, r0
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d928:	08db      	lsrs	r3, r3, #3
 800d92a:	4a08      	ldr	r2, [pc, #32]	@ (800d94c <prvInitialiseTCPFields+0xa0>)
 800d92c:	fba2 2303 	umull	r2, r3, r2, r3
 800d930:	099b      	lsrs	r3, r3, #6
 800d932:	4619      	mov	r1, r3
 800d934:	2001      	movs	r0, #1
 800d936:	f7fc fc25 	bl	800a184 <FreeRTOS_max_size_t>
 800d93a:	4602      	mov	r2, r0
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800d942:	bf00      	nop
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	2ce33e6d 	.word	0x2ce33e6d

0800d950 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b08a      	sub	sp, #40	@ 0x28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800d95c:	2301      	movs	r3, #1
 800d95e:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b0a      	cmp	r3, #10
 800d968:	d002      	beq.n	800d970 <FreeRTOS_socket+0x20>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d101      	bne.n	800d974 <FreeRTOS_socket+0x24>
 800d970:	2301      	movs	r3, #1
 800d972:	e000      	b.n	800d976 <FreeRTOS_socket+0x26>
 800d974:	2300      	movs	r3, #0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d104      	bne.n	800d984 <FreeRTOS_socket+0x34>
 800d97a:	f240 2171 	movw	r1, #625	@ 0x271
 800d97e:	4845      	ldr	r0, [pc, #276]	@ (800da94 <FreeRTOS_socket+0x144>)
 800d980:	f7f3 fe6a 	bl	8001658 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d10c      	bne.n	800d9a4 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d005      	beq.n	800d99c <FreeRTOS_socket+0x4c>
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d105      	bne.n	800d9a2 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800d996:	2311      	movs	r3, #17
 800d998:	623b      	str	r3, [r7, #32]
                    break;
 800d99a:	e003      	b.n	800d9a4 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800d99c:	2306      	movs	r3, #6
 800d99e:	623b      	str	r3, [r7, #32]
                    break;
 800d9a0:	e000      	b.n	800d9a4 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800d9a2:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800d9a4:	f107 0314 	add.w	r3, r7, #20
 800d9a8:	6a3a      	ldr	r2, [r7, #32]
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f7ff feff 	bl	800d7b0 <prvDetermineSocketSize>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d103      	bne.n	800d9c0 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d9be:	e063      	b.n	800da88 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7f8 f986 	bl	8005cd4 <pvPortMalloc>
 800d9c8:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d4:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800d9d6:	e057      	b.n	800da88 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800d9d8:	f7f4 ff53 	bl	8002882 <xEventGroupCreate>
 800d9dc:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800d9e4:	69f8      	ldr	r0, [r7, #28]
 800d9e6:	f7f8 fa49 	bl	8005e7c <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9f0:	e04a      	b.n	800da88 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	69f8      	ldr	r0, [r7, #28]
 800d9fa:	f014 fa76 	bl	8021eea <memset>

            pxSocket->xEventGroup = xEventGroup;
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	69ba      	ldr	r2, [r7, #24]
 800da02:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2b02      	cmp	r3, #2
 800da08:	d008      	beq.n	800da1c <FreeRTOS_socket+0xcc>
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b0a      	cmp	r3, #10
 800da0e:	d10b      	bne.n	800da28 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800da10:	69fa      	ldr	r2, [r7, #28]
 800da12:	7a13      	ldrb	r3, [r2, #8]
 800da14:	f043 0301 	orr.w	r3, r3, #1
 800da18:	7213      	strb	r3, [r2, #8]
                        break;
 800da1a:	e009      	b.n	800da30 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800da1c:	69fa      	ldr	r2, [r7, #28]
 800da1e:	7a13      	ldrb	r3, [r2, #8]
 800da20:	f36f 0300 	bfc	r3, #0, #1
 800da24:	7213      	strb	r3, [r2, #8]
                        break;
 800da26:	e003      	b.n	800da30 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800da28:	481b      	ldr	r0, [pc, #108]	@ (800da98 <FreeRTOS_socket+0x148>)
 800da2a:	f013 ff35 	bl	8021898 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800da2e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800da30:	6a3b      	ldr	r3, [r7, #32]
 800da32:	2b11      	cmp	r3, #17
 800da34:	d105      	bne.n	800da42 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	3354      	adds	r3, #84	@ 0x54
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7f5 f8f6 	bl	8002c2c <vListInitialise>
 800da40:	e007      	b.n	800da52 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	2b06      	cmp	r3, #6
 800da46:	d104      	bne.n	800da52 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	4619      	mov	r1, r3
 800da4c:	69f8      	ldr	r0, [r7, #28]
 800da4e:	f7ff ff2d 	bl	800d8ac <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	330c      	adds	r3, #12
 800da56:	4618      	mov	r0, r3
 800da58:	f7f5 f908 	bl	8002c6c <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	69fa      	ldr	r2, [r7, #28]
 800da60:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da68:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da70:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	2202      	movs	r2, #2
 800da76:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800da7a:	6a3b      	ldr	r3, [r7, #32]
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800da88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3728      	adds	r7, #40	@ 0x28
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	08025274 	.word	0x08025274
 800da98:	080252a4 	.word	0x080252a4

0800da9c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800daa4:	2200      	movs	r2, #0
 800daa6:	2111      	movs	r1, #17
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff fe49 	bl	800d740 <prvValidSocket>
 800daae:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d10d      	bne.n	800dad2 <prvMakeSureSocketIsBound+0x36>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d109      	bne.n	800dad2 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800dabe:	2200      	movs	r2, #0
 800dac0:	2100      	movs	r1, #0
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f934 	bl	800dd30 <FreeRTOS_bind>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800dace:	2300      	movs	r3, #0
 800dad0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800dad2:	68fb      	ldr	r3, [r7, #12]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
 800dae8:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800daea:	2300      	movs	r3, #0
 800daec:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800daee:	2304      	movs	r3, #4
 800daf0:	753b      	strb	r3, [r7, #20]
 800daf2:	2300      	movs	r3, #0
 800daf4:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800daf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf8:	785b      	ldrb	r3, [r3, #1]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d006      	beq.n	800db0c <prvSendUDPPacket+0x30>
 800dafe:	2b0a      	cmp	r3, #10
 800db00:	d109      	bne.n	800db16 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800db02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db04:	68b8      	ldr	r0, [r7, #8]
 800db06:	f7fd f903 	bl	800ad10 <xSend_UDP_Update_IPv6>
                break;
 800db0a:	e005      	b.n	800db18 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800db0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db0e:	68b8      	ldr	r0, [r7, #8]
 800db10:	f7fc fd68 	bl	800a5e4 <xSend_UDP_Update_IPv4>
                break;
 800db14:	e000      	b.n	800db18 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800db16:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1c:	441a      	add	r2, r3
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800db22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db24:	885a      	ldrh	r2, [r3, #2]
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	b29a      	uxth	r2, r3
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db38:	3306      	adds	r3, #6
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800db40:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800db46:	f107 0314 	add.w	r3, r7, #20
 800db4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fb fa37 	bl	8008fc0 <xSendEventStructToIPTask>
 800db52:	4603      	mov	r3, r0
 800db54:	2b01      	cmp	r3, #1
 800db56:	d10b      	bne.n	800db70 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00d      	beq.n	800db80 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db68:	6879      	ldr	r1, [r7, #4]
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	4798      	blx	r3
 800db6e:	e007      	b.n	800db80 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d102      	bne.n	800db80 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800db7a:	68b8      	ldr	r0, [r7, #8]
 800db7c:	f008 ffe4 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800db80:	69fb      	ldr	r3, [r7, #28]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3720      	adds	r7, #32
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b08e      	sub	sp, #56	@ 0x38
 800db8e:	af04      	add	r7, sp, #16
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	607a      	str	r2, [r7, #4]
 800db96:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba0:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	f003 0310 	and.w	r3, r3, #16
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d104      	bne.n	800dbb6 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800dbac:	f7fc f94a 	bl	8009e44 <xIsCallingFromIPTask>
 800dbb0:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d128      	bne.n	800dc16 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800dbc4:	f107 0310 	add.w	r3, r7, #16
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7f6 fdbf 	bl	800474c <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800dbce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	69ba      	ldr	r2, [r7, #24]
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f008 ff4d 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 800dbde:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800dbe0:	6a3b      	ldr	r3, [r7, #32]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d01b      	beq.n	800dc1e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbec:	4413      	add	r3, r2
 800dbee:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	68b9      	ldr	r1, [r7, #8]
 800dbf4:	69f8      	ldr	r0, [r7, #28]
 800dbf6:	f014 f86b 	bl	8021cd0 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800dbfa:	f107 0218 	add.w	r2, r7, #24
 800dbfe:	f107 0310 	add.w	r3, r7, #16
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7f6 fdd9 	bl	80047bc <xTaskCheckForTimeOut>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d106      	bne.n	800dc1e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800dc10:	2300      	movs	r3, #0
 800dc12:	61bb      	str	r3, [r7, #24]
 800dc14:	e003      	b.n	800dc1e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800dc16:	68b8      	ldr	r0, [r7, #8]
 800dc18:	f7fc f8cc 	bl	8009db4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800dc1c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d010      	beq.n	800dc46 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc30:	9202      	str	r2, [sp, #8]
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	6a39      	ldr	r1, [r7, #32]
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff ff4c 	bl	800dadc <prvSendUDPPacket>
 800dc44:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800dc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3728      	adds	r7, #40	@ 0x28
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b090      	sub	sp, #64	@ 0x40
 800dc54:	af02      	add	r7, sp, #8
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
 800dc5c:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800dc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d013      	beq.n	800dc9c <FreeRTOS_sendto+0x4c>
 800dc74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	2b0a      	cmp	r3, #10
 800dc7a:	d00f      	beq.n	800dc9c <FreeRTOS_sendto+0x4c>
 800dc7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc7e:	785b      	ldrb	r3, [r3, #1]
 800dc80:	2b02      	cmp	r3, #2
 800dc82:	d00b      	beq.n	800dc9c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800dc84:	f107 0310 	add.w	r3, r7, #16
 800dc88:	2218      	movs	r2, #24
 800dc8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f014 f81f 	bl	8021cd0 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800dc92:	2302      	movs	r3, #2
 800dc94:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800dc96:	f107 0310 	add.w	r3, r7, #16
 800dc9a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800dc9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d104      	bne.n	800dcac <FreeRTOS_sendto+0x5c>
 800dca2:	f240 6143 	movw	r1, #1603	@ 0x643
 800dca6:	4820      	ldr	r0, [pc, #128]	@ (800dd28 <FreeRTOS_sendto+0xd8>)
 800dca8:	f7f3 fcd6 	bl	8001658 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d104      	bne.n	800dcbc <FreeRTOS_sendto+0x6c>
 800dcb2:	f240 6144 	movw	r1, #1604	@ 0x644
 800dcb6:	481c      	ldr	r0, [pc, #112]	@ (800dd28 <FreeRTOS_sendto+0xd8>)
 800dcb8:	f7f3 fcce 	bl	8001658 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800dcbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	d007      	beq.n	800dcd4 <FreeRTOS_sendto+0x84>
 800dcc4:	2b0a      	cmp	r3, #10
 800dcc6:	d10b      	bne.n	800dce0 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800dcc8:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800dccc:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800dcce:	233e      	movs	r3, #62	@ 0x3e
 800dcd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800dcd2:	e00c      	b.n	800dcee <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800dcd4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800dcd8:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800dcda:	232a      	movs	r3, #42	@ 0x2a
 800dcdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800dcde:	e006      	b.n	800dcee <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800dce0:	4812      	ldr	r0, [pc, #72]	@ (800dd2c <FreeRTOS_sendto+0xdc>)
 800dce2:	f013 fdd9 	bl	8021898 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dce6:	f06f 0315 	mvn.w	r3, #21
 800dcea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dcec:	bf00      	nop
    }

    if( lReturn == 0 )
 800dcee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d114      	bne.n	800dd1e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d810      	bhi.n	800dd1e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800dcfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcfe:	f7ff fecd 	bl	800da9c <prvMakeSureSocketIsBound>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d10a      	bne.n	800dd1e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800dd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	68b9      	ldr	r1, [r7, #8]
 800dd16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd18:	f7ff ff37 	bl	800db8a <prvSendTo_ActualSend>
 800dd1c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800dd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800dd20:	4618      	mov	r0, r3
 800dd22:	3738      	adds	r7, #56	@ 0x38
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	08025274 	.word	0x08025274
 800dd2c:	08025328 	.word	0x08025328

0800dd30 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b090      	sub	sp, #64	@ 0x40
 800dd34:	af02      	add	r7, sp, #8
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d013      	beq.n	800dd72 <FreeRTOS_bind+0x42>
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	785b      	ldrb	r3, [r3, #1]
 800dd4e:	2b0a      	cmp	r3, #10
 800dd50:	d00f      	beq.n	800dd72 <FreeRTOS_bind+0x42>
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	785b      	ldrb	r3, [r3, #1]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d00b      	beq.n	800dd72 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800dd5a:	f107 0310 	add.w	r3, r7, #16
 800dd5e:	2218      	movs	r2, #24
 800dd60:	68b9      	ldr	r1, [r7, #8]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f013 ffb4 	bl	8021cd0 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800dd68:	2302      	movs	r3, #2
 800dd6a:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800dd6c:	f107 0310 	add.w	r3, r7, #16
 800dd70:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800dd72:	f7fc f867 	bl	8009e44 <xIsCallingFromIPTask>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d004      	beq.n	800dd86 <FreeRTOS_bind+0x56>
 800dd7c:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800dd80:	484b      	ldr	r0, [pc, #300]	@ (800deb0 <FreeRTOS_bind+0x180>)
 800dd82:	f7f3 fc69 	bl	8001658 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800dd86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd88:	f002 f804 	bl	800fd94 <xSocketValid>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d103      	bne.n	800dd9a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dd92:	f06f 0315 	mvn.w	r3, #21
 800dd96:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd98:	e084      	b.n	800dea4 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9c:	69db      	ldr	r3, [r3, #28]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d009      	beq.n	800ddb6 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800dda6:	4619      	mov	r1, r3
 800dda8:	4842      	ldr	r0, [pc, #264]	@ (800deb4 <FreeRTOS_bind+0x184>)
 800ddaa:	f013 fd75 	bl	8021898 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ddae:	f06f 0315 	mvn.w	r3, #21
 800ddb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddb4:	e076      	b.n	800dea4 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800ddb6:	2309      	movs	r3, #9
 800ddb8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d042      	beq.n	800de4c <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	785b      	ldrb	r3, [r3, #1]
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	d010      	beq.n	800ddf0 <FreeRTOS_bind+0xc0>
 800ddce:	2b0a      	cmp	r3, #10
 800ddd0:	d129      	bne.n	800de26 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	3308      	adds	r3, #8
 800dddc:	2210      	movs	r2, #16
 800ddde:	4619      	mov	r1, r3
 800dde0:	f013 ff76 	bl	8021cd0 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800dde4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dde6:	7a13      	ldrb	r3, [r2, #8]
 800dde8:	f043 0301 	orr.w	r3, r3, #1
 800ddec:	7213      	strb	r3, [r2, #8]
                        break;
 800ddee:	e01e      	b.n	800de2e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	061a      	lsls	r2, r3, #24
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	021b      	lsls	r3, r3, #8
 800ddfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de00:	431a      	orrs	r2, r3
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	0a1b      	lsrs	r3, r3, #8
 800de08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800de0c:	431a      	orrs	r2, r3
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	0e1b      	lsrs	r3, r3, #24
 800de14:	431a      	orrs	r2, r3
 800de16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de18:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800de1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de1c:	7a13      	ldrb	r3, [r2, #8]
 800de1e:	f36f 0300 	bfc	r3, #0, #1
 800de22:	7213      	strb	r3, [r2, #8]
                        break;
 800de24:	e003      	b.n	800de2e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800de26:	4824      	ldr	r0, [pc, #144]	@ (800deb8 <FreeRTOS_bind+0x188>)
 800de28:	f013 fd36 	bl	8021898 <lUDPLoggingPrintf>
                    break;
 800de2c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	885b      	ldrh	r3, [r3, #2]
 800de32:	021b      	lsls	r3, r3, #8
 800de34:	b21a      	sxth	r2, r3
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	885b      	ldrh	r3, [r3, #2]
 800de3a:	0a1b      	lsrs	r3, r3, #8
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	b21b      	sxth	r3, r3
 800de40:	4313      	orrs	r3, r2
 800de42:	b21b      	sxth	r3, r3
 800de44:	b29a      	uxth	r2, r3
 800de46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de48:	871a      	strh	r2, [r3, #56]	@ 0x38
 800de4a:	e009      	b.n	800de60 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800de4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4e:	2200      	movs	r2, #0
 800de50:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800de52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de54:	3328      	adds	r3, #40	@ 0x28
 800de56:	2210      	movs	r2, #16
 800de58:	2100      	movs	r1, #0
 800de5a:	4618      	mov	r0, r3
 800de5c:	f014 f845 	bl	8021eea <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800de60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800de64:	f04f 31ff 	mov.w	r1, #4294967295
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fb f8a9 	bl	8008fc0 <xSendEventStructToIPTask>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d106      	bne.n	800de82 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800de74:	4811      	ldr	r0, [pc, #68]	@ (800debc <FreeRTOS_bind+0x18c>)
 800de76:	f013 fd0f 	bl	8021898 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800de7a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800de7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800de80:	e010      	b.n	800dea4 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800de82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de84:	6858      	ldr	r0, [r3, #4]
 800de86:	f04f 33ff 	mov.w	r3, #4294967295
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	2300      	movs	r3, #0
 800de8e:	2201      	movs	r2, #1
 800de90:	2110      	movs	r1, #16
 800de92:	f7f4 fd0d 	bl	80028b0 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d102      	bne.n	800dea4 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800de9e:	f06f 0315 	mvn.w	r3, #21
 800dea2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800dea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3738      	adds	r7, #56	@ 0x38
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	08025274 	.word	0x08025274
 800deb4:	08025350 	.word	0x08025350
 800deb8:	0802537c 	.word	0x0802537c
 800debc:	080253a4 	.word	0x080253a4

0800dec0 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <prvSocketBindAdd+0x22>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dede:	2b06      	cmp	r3, #6
 800dee0:	d024      	beq.n	800df2c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	885b      	ldrh	r3, [r3, #2]
 800dee6:	4619      	mov	r1, r3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fdf1 	bl	800ead0 <pxListFindListItemWithValue>
 800deee:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800def0:	2b00      	cmp	r3, #0
 800def2:	d01b      	beq.n	800df2c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800defa:	2b06      	cmp	r3, #6
 800defc:	d101      	bne.n	800df02 <prvSocketBindAdd+0x42>
 800defe:	493e      	ldr	r1, [pc, #248]	@ (800dff8 <prvSocketBindAdd+0x138>)
 800df00:	e000      	b.n	800df04 <prvSocketBindAdd+0x44>
 800df02:	493e      	ldr	r1, [pc, #248]	@ (800dffc <prvSocketBindAdd+0x13c>)
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	885b      	ldrh	r3, [r3, #2]
 800df08:	021b      	lsls	r3, r3, #8
 800df0a:	b21a      	sxth	r2, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	885b      	ldrh	r3, [r3, #2]
 800df10:	0a1b      	lsrs	r3, r3, #8
 800df12:	b29b      	uxth	r3, r3
 800df14:	b21b      	sxth	r3, r3
 800df16:	4313      	orrs	r3, r2
 800df18:	b21b      	sxth	r3, r3
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	461a      	mov	r2, r3
 800df1e:	4838      	ldr	r0, [pc, #224]	@ (800e000 <prvSocketBindAdd+0x140>)
 800df20:	f013 fcba 	bl	8021898 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800df24:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	e060      	b.n	800dfee <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	885b      	ldrh	r3, [r3, #2]
 800df30:	461a      	mov	r2, r3
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	021b      	lsls	r3, r3, #8
 800df3c:	b21a      	sxth	r2, r3
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	885b      	ldrh	r3, [r3, #2]
 800df42:	0a1b      	lsrs	r3, r3, #8
 800df44:	b29b      	uxth	r3, r3
 800df46:	b21b      	sxth	r3, r3
 800df48:	4313      	orrs	r3, r2
 800df4a:	b21b      	sxth	r3, r3
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	785b      	ldrb	r3, [r3, #1]
 800df56:	2b0a      	cmp	r3, #10
 800df58:	d109      	bne.n	800df6e <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	3308      	adds	r3, #8
 800df64:	2210      	movs	r2, #16
 800df66:	4619      	mov	r1, r3
 800df68:	f013 feb2 	bl	8021cd0 <memcpy>
 800df6c:	e00c      	b.n	800df88 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d008      	beq.n	800df88 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	2107      	movs	r1, #7
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe ffb7 	bl	800cef0 <FreeRTOS_FindEndPointOnIP_IPv4>
 800df82:	4602      	mov	r2, r0
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d019      	beq.n	800dfc4 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	061a      	lsls	r2, r3, #24
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	021b      	lsls	r3, r3, #8
 800dfa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dfa4:	431a      	orrs	r2, r3
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	0a1b      	lsrs	r3, r3, #8
 800dfae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	0e1b      	lsrs	r3, r3, #24
 800dfbc:	431a      	orrs	r2, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	629a      	str	r2, [r3, #40]	@ 0x28
 800dfc2:	e00a      	b.n	800dfda <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	785b      	ldrb	r3, [r3, #1]
 800dfc8:	2b0a      	cmp	r3, #10
 800dfca:	d006      	beq.n	800dfda <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	3328      	adds	r3, #40	@ 0x28
 800dfd0:	2210      	movs	r2, #16
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f013 ff88 	bl	8021eea <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800dfda:	f7f5 fefb 	bl	8003dd4 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	330c      	adds	r3, #12
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7f4 fe4e 	bl	8002c86 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800dfea:	f7f5 ff01 	bl	8003df0 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800dfee:	697b      	ldr	r3, [r7, #20]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	080253c8 	.word	0x080253c8
 800dffc:	080253cc 	.word	0x080253cc
 800e000:	080253d0 	.word	0x080253d0

0800e004 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08e      	sub	sp, #56	@ 0x38
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
 800e010:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800e012:	2300      	movs	r3, #0
 800e014:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f001 feba 	bl	800fd94 <xSocketValid>
 800e020:	4603      	mov	r3, r0
 800e022:	2b01      	cmp	r3, #1
 800e024:	d004      	beq.n	800e030 <vSocketBind+0x2c>
 800e026:	f240 716f 	movw	r1, #1903	@ 0x76f
 800e02a:	4828      	ldr	r0, [pc, #160]	@ (800e0cc <vSocketBind+0xc8>)
 800e02c:	f7f3 fb14 	bl	8001658 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e036:	2b06      	cmp	r3, #6
 800e038:	d102      	bne.n	800e040 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800e03a:	4b25      	ldr	r3, [pc, #148]	@ (800e0d0 <vSocketBind+0xcc>)
 800e03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e03e:	e001      	b.n	800e044 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800e040:	4b24      	ldr	r3, [pc, #144]	@ (800e0d4 <vSocketBind+0xd0>)
 800e042:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800e044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e046:	2b00      	cmp	r3, #0
 800e048:	d115      	bne.n	800e076 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800e04a:	f107 0314 	add.w	r3, r7, #20
 800e04e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800e050:	2218      	movs	r2, #24
 800e052:	2100      	movs	r1, #0
 800e054:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e056:	f013 ff48 	bl	8021eea <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	7a1b      	ldrb	r3, [r3, #8]
 800e05e:	f003 0301 	and.w	r3, r3, #1
 800e062:	b2db      	uxtb	r3, r3
 800e064:	2b00      	cmp	r3, #0
 800e066:	d003      	beq.n	800e070 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06a:	220a      	movs	r2, #10
 800e06c:	705a      	strb	r2, [r3, #1]
 800e06e:	e002      	b.n	800e076 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e072:	2202      	movs	r2, #2
 800e074:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800e076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d104      	bne.n	800e086 <vSocketBind+0x82>
 800e07c:	f240 719b 	movw	r1, #1947	@ 0x79b
 800e080:	4812      	ldr	r0, [pc, #72]	@ (800e0cc <vSocketBind+0xc8>)
 800e082:	f7f3 fae9 	bl	8001658 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800e086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e088:	885b      	ldrh	r3, [r3, #2]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d111      	bne.n	800e0b2 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e094:	4618      	mov	r0, r3
 800e096:	f000 fcc3 	bl	800ea20 <prvGetPrivatePortNumber>
 800e09a:	4603      	mov	r3, r0
 800e09c:	461a      	mov	r2, r3
 800e09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a0:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800e0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a4:	885b      	ldrh	r3, [r3, #2]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d103      	bne.n	800e0b2 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800e0aa:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800e0ae:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800e0b0:	e006      	b.n	800e0c0 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f7ff ff01 	bl	800dec0 <prvSocketBindAdd>
 800e0be:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800e0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3738      	adds	r7, #56	@ 0x38
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	08025274 	.word	0x08025274
 800e0d0:	20001440 	.word	0x20001440
 800e0d4:	2000142c 	.word	0x2000142c

0800e0d8 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800e0e4:	230a      	movs	r3, #10
 800e0e6:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 fe51 	bl	800fd94 <xSocketValid>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	617b      	str	r3, [r7, #20]
 800e0fc:	e02f      	b.n	800e15e <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e104:	2b06      	cmp	r3, #6
 800e106:	d10c      	bne.n	800e122 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	2200      	movs	r2, #0
 800e114:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e120:	e00a      	b.n	800e138 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e128:	2b11      	cmp	r3, #17
 800e12a:	d105      	bne.n	800e138 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	2200      	movs	r2, #0
 800e130:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	2200      	movs	r2, #0
 800e136:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e138:	f107 0308 	add.w	r3, r7, #8
 800e13c:	f04f 31ff 	mov.w	r1, #4294967295
 800e140:	4618      	mov	r0, r3
 800e142:	f7fa ff3d 	bl	8008fc0 <xSendEventStructToIPTask>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d106      	bne.n	800e15a <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800e14c:	4806      	ldr	r0, [pc, #24]	@ (800e168 <FreeRTOS_closesocket+0x90>)
 800e14e:	f013 fba3 	bl	8021898 <lUDPLoggingPrintf>
            xResult = -1;
 800e152:	f04f 33ff 	mov.w	r3, #4294967295
 800e156:	617b      	str	r3, [r7, #20]
 800e158:	e001      	b.n	800e15e <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800e15a:	2301      	movs	r3, #1
 800e15c:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800e15e:	697b      	ldr	r3, [r7, #20]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	080253f4 	.word	0x080253f4

0800e16c <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800e16c:	b590      	push	{r4, r7, lr}
 800e16e:	b085      	sub	sp, #20
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e17a:	2b06      	cmp	r3, #6
 800e17c:	d129      	bne.n	800e1d2 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e184:	2b00      	cmp	r3, #0
 800e186:	d005      	beq.n	800e194 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e18e:	4618      	mov	r0, r3
 800e190:	f008 fcda 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800e19a:	4618      	mov	r0, r3
 800e19c:	f006 fee6 	bl	8014f6c <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d005      	beq.n	800e1b6 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7f7 fe63 	bl	8005e7c <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d005      	beq.n	800e1cc <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f7 fe58 	bl	8005e7c <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f8bd 	bl	800e34c <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	69db      	ldr	r3, [r3, #28]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d008      	beq.n	800e1ec <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800e1da:	f7f5 fdfb 	bl	8003dd4 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	330c      	adds	r3, #12
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7f4 fdac 	bl	8002d40 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800e1e8:	f7f5 fe02 	bl	8003df0 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e1f2:	2b11      	cmp	r3, #17
 800e1f4:	d10f      	bne.n	800e216 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e1f6:	e00a      	b.n	800e20e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4618      	mov	r0, r3
 800e204:	f7f4 fd9c 	bl	8002d40 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f008 fc9d 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1f0      	bne.n	800e1f8 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d004      	beq.n	800e228 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	4618      	mov	r0, r3
 800e224:	f7f4 fcaa 	bl	8002b7c <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e22e:	2b06      	cmp	r3, #6
 800e230:	d10c      	bne.n	800e24c <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f816 	bl	800e264 <prvSocketProps>
 800e238:	4604      	mov	r4, r0
 800e23a:	f008 fcd7 	bl	8016bec <uxGetNumberOfFreeNetworkBuffers>
 800e23e:	4602      	mov	r2, r0
 800e240:	4b06      	ldr	r3, [pc, #24]	@ (800e25c <vSocketClose+0xf0>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4621      	mov	r1, r4
 800e246:	4806      	ldr	r0, [pc, #24]	@ (800e260 <vSocketClose+0xf4>)
 800e248:	f013 fb26 	bl	8021898 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7f7 fe15 	bl	8005e7c <vPortFree>

    return NULL;
 800e252:	2300      	movs	r3, #0
} /* Tested */
 800e254:	4618      	mov	r0, r3
 800e256:	3714      	adds	r7, #20
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd90      	pop	{r4, r7, pc}
 800e25c:	20001440 	.word	0x20001440
 800e260:	08025414 	.word	0x08025414

0800e264 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af04      	add	r7, sp, #16
 800e26a:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e272:	2b06      	cmp	r3, #6
 800e274:	d132      	bne.n	800e2dc <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	7a1b      	ldrb	r3, [r3, #8]
 800e27a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <prvSocketProps+0x26>
 800e284:	2b01      	cmp	r3, #1
 800e286:	d014      	beq.n	800e2b2 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800e288:	e050      	b.n	800e32c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e292:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e29e:	9202      	str	r2, [sp, #8]
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	9000      	str	r0, [sp, #0]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	4a24      	ldr	r2, [pc, #144]	@ (800e338 <prvSocketProps+0xd4>)
 800e2a8:	215c      	movs	r1, #92	@ 0x5c
 800e2aa:	4824      	ldr	r0, [pc, #144]	@ (800e33c <prvSocketProps+0xd8>)
 800e2ac:	f014 fb20 	bl	80228f0 <snprintf>
                            break;
 800e2b0:	e03c      	b.n	800e32c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e2bc:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e2c8:	9202      	str	r2, [sp, #8]
 800e2ca:	9301      	str	r3, [sp, #4]
 800e2cc:	9000      	str	r0, [sp, #0]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4a1b      	ldr	r2, [pc, #108]	@ (800e340 <prvSocketProps+0xdc>)
 800e2d2:	215c      	movs	r1, #92	@ 0x5c
 800e2d4:	4819      	ldr	r0, [pc, #100]	@ (800e33c <prvSocketProps+0xd8>)
 800e2d6:	f014 fb0b 	bl	80228f0 <snprintf>
                            break;
 800e2da:	e027      	b.n	800e32c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e2e2:	2b11      	cmp	r3, #17
 800e2e4:	d122      	bne.n	800e32c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	7a1b      	ldrb	r3, [r3, #8]
 800e2ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <prvSocketProps+0x96>
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d00c      	beq.n	800e312 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800e2f8:	e018      	b.n	800e32c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	4613      	mov	r3, r2
 800e306:	4a0f      	ldr	r2, [pc, #60]	@ (800e344 <prvSocketProps+0xe0>)
 800e308:	215c      	movs	r1, #92	@ 0x5c
 800e30a:	480c      	ldr	r0, [pc, #48]	@ (800e33c <prvSocketProps+0xd8>)
 800e30c:	f014 faf0 	bl	80228f0 <snprintf>
                        break;
 800e310:	e00c      	b.n	800e32c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	4613      	mov	r3, r2
 800e320:	4a09      	ldr	r2, [pc, #36]	@ (800e348 <prvSocketProps+0xe4>)
 800e322:	215c      	movs	r1, #92	@ 0x5c
 800e324:	4805      	ldr	r0, [pc, #20]	@ (800e33c <prvSocketProps+0xd8>)
 800e326:	f014 fae3 	bl	80228f0 <snprintf>
                        break;
 800e32a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800e32c:	4b03      	ldr	r3, [pc, #12]	@ (800e33c <prvSocketProps+0xd8>)
    }
 800e32e:	4618      	mov	r0, r3
 800e330:	3708      	adds	r7, #8
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	08025448 	.word	0x08025448
 800e33c:	200013d0 	.word	0x200013d0
 800e340:	08025468 	.word	0x08025468
 800e344:	08025488 	.word	0x08025488
 800e348:	08025498 	.word	0x08025498

0800e34c <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af02      	add	r7, sp, #8
 800e352:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800e354:	4b3c      	ldr	r3, [pc, #240]	@ (800e448 <prvTCPSetSocketCount+0xfc>)
 800e356:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e35c:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e364:	2b01      	cmp	r3, #1
 800e366:	d12b      	bne.n	800e3c0 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800e36e:	e022      	b.n	800e3b6 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e382:	2b01      	cmp	r3, #1
 800e384:	d017      	beq.n	800e3b6 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e38a:	89fa      	ldrh	r2, [r7, #14]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d112      	bne.n	800e3b6 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e396:	f003 0304 	and.w	r3, r3, #4
 800e39a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d107      	bne.n	800e3b0 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e3a6:	f003 0302 	and.w	r3, r3, #2
 800e3aa:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d002      	beq.n	800e3b6 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800e3b0:	68b8      	ldr	r0, [r7, #8]
 800e3b2:	f7ff fedb 	bl	800e16c <vSocketClose>
            while( pxIterator != pxEnd )
 800e3b6:	697a      	ldr	r2, [r7, #20]
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d1d8      	bne.n	800e370 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800e3be:	e03e      	b.n	800e43e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	617b      	str	r3, [r7, #20]
 800e3c6:	e036      	b.n	800e436 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d12b      	bne.n	800e430 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e3dc:	89fa      	ldrh	r2, [r7, #14]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d126      	bne.n	800e430 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d021      	beq.n	800e430 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e400:	4619      	mov	r1, r3
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e408:	461a      	mov	r2, r3
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800e410:	4618      	mov	r0, r3
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d101      	bne.n	800e420 <prvTCPSetSocketCount+0xd4>
 800e41c:	4b0b      	ldr	r3, [pc, #44]	@ (800e44c <prvTCPSetSocketCount+0x100>)
 800e41e:	e000      	b.n	800e422 <prvTCPSetSocketCount+0xd6>
 800e420:	4b0b      	ldr	r3, [pc, #44]	@ (800e450 <prvTCPSetSocketCount+0x104>)
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	4603      	mov	r3, r0
 800e426:	480b      	ldr	r0, [pc, #44]	@ (800e454 <prvTCPSetSocketCount+0x108>)
 800e428:	f013 fa36 	bl	8021898 <lUDPLoggingPrintf>
                    break;
 800e42c:	bf00      	nop
    }
 800e42e:	e006      	b.n	800e43e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d1c4      	bne.n	800e3c8 <prvTCPSetSocketCount+0x7c>
    }
 800e43e:	bf00      	nop
 800e440:	3718      	adds	r7, #24
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20001448 	.word	0x20001448
 800e44c:	080254a8 	.word	0x080254a8
 800e450:	080254ac 	.word	0x080254ac
 800e454:	080254b0 	.word	0x080254b0

0800e458 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e46a:	2b06      	cmp	r3, #6
 800e46c:	d00d      	beq.n	800e48a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2b04      	cmp	r3, #4
 800e472:	d101      	bne.n	800e478 <prvSockopt_so_buffer+0x20>
 800e474:	4b23      	ldr	r3, [pc, #140]	@ (800e504 <prvSockopt_so_buffer+0xac>)
 800e476:	e000      	b.n	800e47a <prvSockopt_so_buffer+0x22>
 800e478:	4b23      	ldr	r3, [pc, #140]	@ (800e508 <prvSockopt_so_buffer+0xb0>)
 800e47a:	4619      	mov	r1, r3
 800e47c:	4823      	ldr	r0, [pc, #140]	@ (800e50c <prvSockopt_so_buffer+0xb4>)
 800e47e:	f013 fa0b 	bl	8021898 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e482:	f06f 0315 	mvn.w	r3, #21
 800e486:	617b      	str	r3, [r7, #20]
 800e488:	e036      	b.n	800e4f8 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2b04      	cmp	r3, #4
 800e48e:	d104      	bne.n	800e49a <prvSockopt_so_buffer+0x42>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d107      	bne.n	800e4aa <prvSockopt_so_buffer+0x52>
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2b05      	cmp	r3, #5
 800e49e:	d112      	bne.n	800e4c6 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00d      	beq.n	800e4c6 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b04      	cmp	r3, #4
 800e4ae:	d101      	bne.n	800e4b4 <prvSockopt_so_buffer+0x5c>
 800e4b0:	4b14      	ldr	r3, [pc, #80]	@ (800e504 <prvSockopt_so_buffer+0xac>)
 800e4b2:	e000      	b.n	800e4b6 <prvSockopt_so_buffer+0x5e>
 800e4b4:	4b14      	ldr	r3, [pc, #80]	@ (800e508 <prvSockopt_so_buffer+0xb0>)
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	4815      	ldr	r0, [pc, #84]	@ (800e510 <prvSockopt_so_buffer+0xb8>)
 800e4ba:	f013 f9ed 	bl	8021898 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e4be:	f06f 0315 	mvn.w	r3, #21
 800e4c2:	617b      	str	r3, [r7, #20]
 800e4c4:	e018      	b.n	800e4f8 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2b04      	cmp	r3, #4
 800e4d0:	d10c      	bne.n	800e4ec <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800e4d8:	4619      	mov	r1, r3
 800e4da:	6938      	ldr	r0, [r7, #16]
 800e4dc:	f7fb fe92 	bl	800a204 <FreeRTOS_round_up>
 800e4e0:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800e4ea:	e003      	b.n	800e4f4 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800e4f8:	697b      	ldr	r3, [r7, #20]
    }
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	080254dc 	.word	0x080254dc
 800e508:	080254e0 	.word	0x080254e0
 800e50c:	080254e4 	.word	0x080254e4
 800e510:	08025508 	.word	0x08025508

0800e514 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800e514:	b480      	push	{r7}
 800e516:	b087      	sub	sp, #28
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	2b09      	cmp	r3, #9
 800e528:	d002      	beq.n	800e530 <prvSetOptionCallback+0x1c>
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b0a      	cmp	r3, #10
 800e52e:	d102      	bne.n	800e536 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800e530:	2311      	movs	r3, #17
 800e532:	613b      	str	r3, [r7, #16]
 800e534:	e001      	b.n	800e53a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800e536:	2306      	movs	r3, #6
 800e538:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	429a      	cmp	r2, r3
 800e546:	d002      	beq.n	800e54e <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e548:	f06f 0315 	mvn.w	r3, #21
 800e54c:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d131      	bne.n	800e5b8 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	3b06      	subs	r3, #6
 800e558:	2b04      	cmp	r3, #4
 800e55a:	d829      	bhi.n	800e5b0 <prvSetOptionCallback+0x9c>
 800e55c:	a201      	add	r2, pc, #4	@ (adr r2, 800e564 <prvSetOptionCallback+0x50>)
 800e55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e562:	bf00      	nop
 800e564:	0800e579 	.word	0x0800e579
 800e568:	0800e585 	.word	0x0800e585
 800e56c:	0800e591 	.word	0x0800e591
 800e570:	0800e59d 	.word	0x0800e59d
 800e574:	0800e5a7 	.word	0x0800e5a7
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800e582:	e019      	b.n	800e5b8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800e58e:	e013      	b.n	800e5b8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	689a      	ldr	r2, [r3, #8]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800e59a:	e00d      	b.n	800e5b8 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	68da      	ldr	r2, [r3, #12]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800e5a4:	e008      	b.n	800e5b8 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	691a      	ldr	r2, [r3, #16]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800e5ae:	e003      	b.n	800e5b8 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e5b0:	f06f 0315 	mvn.w	r3, #21
 800e5b4:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e5b6:	bf00      	nop
            }
        }

        return xReturn;
 800e5b8:	697b      	ldr	r3, [r7, #20]
    }
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	371c      	adds	r7, #28
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop

0800e5c8 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e5d2:	f06f 0315 	mvn.w	r3, #21
 800e5d6:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	3354      	adds	r3, #84	@ 0x54
 800e5dc:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e5e4:	2b06      	cmp	r3, #6
 800e5e6:	d003      	beq.n	800e5f0 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800e5e8:	4825      	ldr	r0, [pc, #148]	@ (800e680 <prvSetOptionTCPWindows+0xb8>)
 800e5ea:	f013 f955 	bl	8021898 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e5ee:	e042      	b.n	800e676 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	2104      	movs	r1, #4
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7ff ff2c 	bl	800e458 <prvSockopt_so_buffer>
 800e600:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d133      	bne.n	800e670 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	3308      	adds	r3, #8
 800e60c:	461a      	mov	r2, r3
 800e60e:	2105      	movs	r1, #5
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff ff21 	bl	800e458 <prvSockopt_so_buffer>
 800e616:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d12a      	bne.n	800e674 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	461a      	mov	r2, r3
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	461a      	mov	r2, r3
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800e63c:	f003 0301 	and.w	r3, r3, #1
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	d017      	beq.n	800e676 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e64c:	693a      	ldr	r2, [r7, #16]
 800e64e:	8bd2      	ldrh	r2, [r2, #30]
 800e650:	fb03 f202 	mul.w	r2, r3, r2
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	8bd2      	ldrh	r2, [r2, #30]
 800e664:	fb03 f202 	mul.w	r2, r3, r2
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e66e:	e002      	b.n	800e676 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e670:	bf00      	nop
 800e672:	e000      	b.n	800e676 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e674:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800e676:	697b      	ldr	r3, [r7, #20]
    }
 800e678:	4618      	mov	r0, r3
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	08025530 	.word	0x08025530

0800e684 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e68e:	f06f 0315 	mvn.w	r3, #21
 800e692:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e69e:	2b06      	cmp	r3, #6
 800e6a0:	d003      	beq.n	800e6aa <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800e6a2:	4813      	ldr	r0, [pc, #76]	@ (800e6f0 <prvSetOptionLowHighWater+0x6c>)
 800e6a4:	f013 f8f8 	bl	8021898 <lUDPLoggingPrintf>
 800e6a8:	e01c      	b.n	800e6e4 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d206      	bcs.n	800e6c4 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d903      	bls.n	800e6cc <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800e6c4:	480b      	ldr	r0, [pc, #44]	@ (800e6f4 <prvSetOptionLowHighWater+0x70>)
 800e6c6:	f013 f8e7 	bl	8021898 <lUDPLoggingPrintf>
 800e6ca:	e00b      	b.n	800e6e4 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	685a      	ldr	r2, [r3, #4]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
    }
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	08025554 	.word	0x08025554
 800e6f4:	08025588 	.word	0x08025588

0800e6f8 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e702:	f06f 0315 	mvn.w	r3, #21
 800e706:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e70e:	2b06      	cmp	r3, #6
 800e710:	d126      	bne.n	800e760 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d007      	beq.n	800e72a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e720:	f043 0302 	orr.w	r3, r3, #2
 800e724:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800e728:	e006      	b.n	800e738 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e730:	f36f 0341 	bfc	r3, #1, #1
 800e734:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e73e:	2b04      	cmp	r3, #4
 800e740:	d90c      	bls.n	800e75c <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f001 faba 	bl	800fcbc <FreeRTOS_tx_size>
 800e748:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d006      	beq.n	800e75c <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e756:	2006      	movs	r0, #6
 800e758:	f7fa fc1c 	bl	8008f94 <xSendEventToIPTask>
            }

            xReturn = 0;
 800e75c:	2300      	movs	r3, #0
 800e75e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e760:	68fb      	ldr	r3, [r7, #12]
    }
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b084      	sub	sp, #16
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e774:	f06f 0315 	mvn.w	r3, #21
 800e778:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e780:	2b06      	cmp	r3, #6
 800e782:	d122      	bne.n	800e7ca <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d007      	beq.n	800e79c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e792:	f043 0304 	orr.w	r3, r3, #4
 800e796:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800e79a:	e006      	b.n	800e7aa <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e7a2:	f36f 0382 	bfc	r3, #2, #1
 800e7a6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e7b0:	f043 0301 	orr.w	r3, r3, #1
 800e7b4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e7c0:	2006      	movs	r0, #6
 800e7c2:	f7fa fbe7 	bl	8008f94 <xSendEventToIPTask>
            xReturn = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
    }
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b087      	sub	sp, #28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d110      	bne.n	800e80e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e7f2:	2b11      	cmp	r3, #17
 800e7f4:	d107      	bne.n	800e806 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d902      	bls.n	800e806 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800e800:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e804:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800e80c:	e002      	b.n	800e814 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	621a      	str	r2, [r3, #32]
}
 800e814:	bf00      	nop
 800e816:	371c      	adds	r7, #28
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e82a:	f06f 0315 	mvn.w	r3, #21
 800e82e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e836:	2b06      	cmp	r3, #6
 800e838:	d114      	bne.n	800e864 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d007      	beq.n	800e852 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e848:	f043 0308 	orr.w	r3, r3, #8
 800e84c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e850:	e006      	b.n	800e860 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e858:	f36f 03c3 	bfc	r3, #3, #1
 800e85c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e860:	2300      	movs	r3, #0
 800e862:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e864:	68fb      	ldr	r3, [r7, #12]
    }
 800e866:	4618      	mov	r0, r3
 800e868:	3714      	adds	r7, #20
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800e872:	b480      	push	{r7}
 800e874:	b085      	sub	sp, #20
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
 800e87a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e87c:	f06f 0315 	mvn.w	r3, #21
 800e880:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e888:	2b06      	cmp	r3, #6
 800e88a:	d114      	bne.n	800e8b6 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d007      	beq.n	800e8a4 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e89a:	f043 0310 	orr.w	r3, r3, #16
 800e89e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e8a2:	e006      	b.n	800e8b2 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e8aa:	f36f 1304 	bfc	r3, #4, #1
 800e8ae:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
    }
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3714      	adds	r7, #20
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
 800e8d0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e8d2:	f06f 0315 	mvn.w	r3, #21
 800e8d6:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800e8dc:	6938      	ldr	r0, [r7, #16]
 800e8de:	f001 fa59 	bl	800fd94 <xSocketValid>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	f040 8093 	bne.w	800ea10 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b12      	cmp	r3, #18
 800e8ee:	f200 808b 	bhi.w	800ea08 <FreeRTOS_setsockopt+0x144>
 800e8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f8 <FreeRTOS_setsockopt+0x34>)
 800e8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f8:	0800e945 	.word	0x0800e945
 800e8fc:	0800e955 	.word	0x0800e955
 800e900:	0800e965 	.word	0x0800e965
 800e904:	0800e9a5 	.word	0x0800e9a5
 800e908:	0800e9bf 	.word	0x0800e9bf
 800e90c:	0800e9bf 	.word	0x0800e9bf
 800e910:	0800e997 	.word	0x0800e997
 800e914:	0800e997 	.word	0x0800e997
 800e918:	0800e997 	.word	0x0800e997
 800e91c:	0800e997 	.word	0x0800e997
 800e920:	0800e997 	.word	0x0800e997
 800e924:	0800e9d9 	.word	0x0800e9d9
 800e928:	0800e9e5 	.word	0x0800e9e5
 800e92c:	0800e9cd 	.word	0x0800e9cd
 800e930:	0800e9f1 	.word	0x0800e9f1
 800e934:	0800e9fd 	.word	0x0800e9fd
 800e938:	0800ea09 	.word	0x0800ea09
 800e93c:	0800ea09 	.word	0x0800ea09
 800e940:	0800e9b3 	.word	0x0800e9b3
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800e944:	2200      	movs	r2, #0
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6938      	ldr	r0, [r7, #16]
 800e94a:	f7ff ff43 	bl	800e7d4 <prvSetOptionTimeout>
                xReturn = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	617b      	str	r3, [r7, #20]
                break;
 800e952:	e060      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800e954:	2201      	movs	r2, #1
 800e956:	6839      	ldr	r1, [r7, #0]
 800e958:	6938      	ldr	r0, [r7, #16]
 800e95a:	f7ff ff3b 	bl	800e7d4 <prvSetOptionTimeout>
                xReturn = 0;
 800e95e:	2300      	movs	r3, #0
 800e960:	617b      	str	r3, [r7, #20]
                break;
 800e962:	e058      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d109      	bne.n	800e97e <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e970:	f023 0302 	bic.w	r3, r3, #2
 800e974:	b2da      	uxtb	r2, r3
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800e97c:	e008      	b.n	800e990 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e984:	f043 0302 	orr.w	r3, r3, #2
 800e988:	b2da      	uxtb	r2, r3
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	617b      	str	r3, [r7, #20]
                break;
 800e994:	e03f      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	6879      	ldr	r1, [r7, #4]
 800e99a:	6938      	ldr	r0, [r7, #16]
 800e99c:	f7ff fdba 	bl	800e514 <prvSetOptionCallback>
 800e9a0:	6178      	str	r0, [r7, #20]
                        break;
 800e9a2:	e038      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	617b      	str	r3, [r7, #20]
                        break;
 800e9b0:	e031      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800e9b2:	6839      	ldr	r1, [r7, #0]
 800e9b4:	6938      	ldr	r0, [r7, #16]
 800e9b6:	f7ff fe65 	bl	800e684 <prvSetOptionLowHighWater>
 800e9ba:	6178      	str	r0, [r7, #20]
                        break;
 800e9bc:	e02b      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	6879      	ldr	r1, [r7, #4]
 800e9c2:	6938      	ldr	r0, [r7, #16]
 800e9c4:	f7ff fd48 	bl	800e458 <prvSockopt_so_buffer>
 800e9c8:	6178      	str	r0, [r7, #20]
                        break;
 800e9ca:	e024      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	6938      	ldr	r0, [r7, #16]
 800e9d0:	f7ff fdfa 	bl	800e5c8 <prvSetOptionTCPWindows>
 800e9d4:	6178      	str	r0, [r7, #20]
                        break;
 800e9d6:	e01e      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	6938      	ldr	r0, [r7, #16]
 800e9dc:	f7ff ff20 	bl	800e820 <prvSetOptionReuseListenSocket>
 800e9e0:	6178      	str	r0, [r7, #20]
                        break;
 800e9e2:	e018      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800e9e4:	6839      	ldr	r1, [r7, #0]
 800e9e6:	6938      	ldr	r0, [r7, #16]
 800e9e8:	f7ff ff43 	bl	800e872 <prvSetOptionCloseAfterSend>
 800e9ec:	6178      	str	r0, [r7, #20]
                        break;
 800e9ee:	e012      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800e9f0:	6839      	ldr	r1, [r7, #0]
 800e9f2:	6938      	ldr	r0, [r7, #16]
 800e9f4:	f7ff fe80 	bl	800e6f8 <prvSetOptionSetFullSize>
 800e9f8:	6178      	str	r0, [r7, #20]
                        break;
 800e9fa:	e00c      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6938      	ldr	r0, [r7, #16]
 800ea00:	f7ff feb3 	bl	800e76a <prvSetOptionStopRX>
 800ea04:	6178      	str	r0, [r7, #20]
                        break;
 800ea06:	e006      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800ea08:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800ea0c:	617b      	str	r3, [r7, #20]
                break;
 800ea0e:	e002      	b.n	800ea16 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea10:	f06f 0315 	mvn.w	r3, #21
 800ea14:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800ea16:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800ea28:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800ea2c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800ea2e:	89fb      	ldrh	r3, [r7, #14]
 800ea30:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b06      	cmp	r3, #6
 800ea3e:	d102      	bne.n	800ea46 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800ea40:	4b21      	ldr	r3, [pc, #132]	@ (800eac8 <prvGetPrivatePortNumber+0xa8>)
 800ea42:	613b      	str	r3, [r7, #16]
 800ea44:	e001      	b.n	800ea4a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800ea46:	4b21      	ldr	r3, [pc, #132]	@ (800eacc <prvGetPrivatePortNumber+0xac>)
 800ea48:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800ea4a:	f107 0308 	add.w	r3, r7, #8
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7f2 fecc 	bl	80017ec <xApplicationGetRandomNumber>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d030      	beq.n	800eabc <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800ea5e:	89fa      	ldrh	r2, [r7, #14]
 800ea60:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea64:	fb01 f202 	mul.w	r2, r1, r2
 800ea68:	1a9b      	subs	r3, r3, r2
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea70:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800ea72:	8abb      	ldrh	r3, [r7, #20]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	b21a      	sxth	r2, r3
 800ea78:	8abb      	ldrh	r3, [r7, #20]
 800ea7a:	0a1b      	lsrs	r3, r3, #8
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	b21b      	sxth	r3, r3
 800ea80:	4313      	orrs	r3, r2
 800ea82:	b21b      	sxth	r3, r3
 800ea84:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800ea86:	4619      	mov	r1, r3
 800ea88:	6938      	ldr	r0, [r7, #16]
 800ea8a:	f000 f821 	bl	800ead0 <pxListFindListItemWithValue>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10a      	bne.n	800eaaa <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800ea94:	8abb      	ldrh	r3, [r7, #20]
 800ea96:	021b      	lsls	r3, r3, #8
 800ea98:	b21a      	sxth	r2, r3
 800ea9a:	8abb      	ldrh	r3, [r7, #20]
 800ea9c:	0a1b      	lsrs	r3, r3, #8
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	b21b      	sxth	r3, r3
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	b21b      	sxth	r3, r3
 800eaa6:	82bb      	strh	r3, [r7, #20]
            break;
 800eaa8:	e009      	b.n	800eabe <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800eaae:	8afb      	ldrh	r3, [r7, #22]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800eab4:	8afb      	ldrh	r3, [r7, #22]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1c7      	bne.n	800ea4a <prvGetPrivatePortNumber+0x2a>
 800eaba:	e000      	b.n	800eabe <prvGetPrivatePortNumber+0x9e>
            break;
 800eabc:	bf00      	nop

    return usResult;
 800eabe:	8abb      	ldrh	r3, [r7, #20]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	20001440 	.word	0x20001440
 800eacc:	2000142c 	.word	0x2000142c

0800ead0 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800eada:	2300      	movs	r3, #0
 800eadc:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800eade:	f7fa fe0b 	bl	80096f8 <xIPIsNetworkTaskReady>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d018      	beq.n	800eb1a <pxListFindListItemWithValue+0x4a>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d015      	beq.n	800eb1a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	3308      	adds	r3, #8
 800eaf2:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	613b      	str	r3, [r7, #16]
 800eafa:	e00a      	b.n	800eb12 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	683a      	ldr	r2, [r7, #0]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d102      	bne.n	800eb0c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	617b      	str	r3, [r7, #20]
                break;
 800eb0a:	e006      	b.n	800eb1a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d1f0      	bne.n	800eafc <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800eb1a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800eb30:	6879      	ldr	r1, [r7, #4]
 800eb32:	480b      	ldr	r0, [pc, #44]	@ (800eb60 <pxUDPSocketLookup+0x3c>)
 800eb34:	f7ff ffcc 	bl	800ead0 <pxListFindListItemWithValue>
 800eb38:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00a      	beq.n	800eb56 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d104      	bne.n	800eb56 <pxUDPSocketLookup+0x32>
 800eb4c:	f640 4111 	movw	r1, #3089	@ 0xc11
 800eb50:	4804      	ldr	r0, [pc, #16]	@ (800eb64 <pxUDPSocketLookup+0x40>)
 800eb52:	f7f2 fd81 	bl	8001658 <vAssertCalled>
    }

    return pxSocket;
 800eb56:	68fb      	ldr	r3, [r7, #12]
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	2000142c 	.word	0x2000142c
 800eb64:	08025274 	.word	0x08025274

0800eb68 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b08b      	sub	sp, #44	@ 0x2c
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800eb72:	2300      	movs	r3, #0
 800eb74:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800eb76:	1d3b      	adds	r3, r7, #4
 800eb78:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800eb7e:	2300      	movs	r3, #0
 800eb80:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb82:	e062      	b.n	800ec4a <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800eb84:	697a      	ldr	r2, [r7, #20]
 800eb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb88:	4413      	add	r3, r2
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800eb8e:	2302      	movs	r3, #2
 800eb90:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800eb92:	7ffa      	ldrb	r2, [r7, #31]
 800eb94:	4b32      	ldr	r3, [pc, #200]	@ (800ec60 <FreeRTOS_inet_ntoa+0xf8>)
 800eb96:	fba3 1302 	umull	r1, r3, r3, r2
 800eb9a:	08d9      	lsrs	r1, r3, #3
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	440b      	add	r3, r1
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	b2d9      	uxtb	r1, r3
 800eba8:	f107 020c 	add.w	r2, r7, #12
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	4413      	add	r3, r2
 800ebb0:	460a      	mov	r2, r1
 800ebb2:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800ebb4:	7ffb      	ldrb	r3, [r7, #31]
 800ebb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ec60 <FreeRTOS_inet_ntoa+0xf8>)
 800ebb8:	fba2 2303 	umull	r2, r3, r2, r3
 800ebbc:	08db      	lsrs	r3, r3, #3
 800ebbe:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d003      	beq.n	800ebce <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	3b01      	subs	r3, #1
 800ebca:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800ebcc:	e7e1      	b.n	800eb92 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800ebce:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800ebd0:	7ffb      	ldrb	r3, [r7, #31]
 800ebd2:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	61bb      	str	r3, [r7, #24]
 800ebd8:	e009      	b.n	800ebee <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800ebda:	f107 020c 	add.w	r2, r7, #12
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d106      	bne.n	800ebf6 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	3301      	adds	r3, #1
 800ebec:	61bb      	str	r3, [r7, #24]
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d9f2      	bls.n	800ebda <FreeRTOS_inet_ntoa+0x72>
 800ebf4:	e012      	b.n	800ec1c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800ebf6:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ebf8:	e010      	b.n	800ec1c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800ebfa:	f107 020c 	add.w	r2, r7, #12
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	4413      	add	r3, r2
 800ec02:	781a      	ldrb	r2, [r3, #0]
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	440b      	add	r3, r1
 800ec0a:	3230      	adds	r2, #48	@ 0x30
 800ec0c:	b2d2      	uxtb	r2, r2
 800ec0e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800ec10:	6a3b      	ldr	r3, [r7, #32]
 800ec12:	3301      	adds	r3, #1
 800ec14:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	61bb      	str	r3, [r7, #24]
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d9eb      	bls.n	800ebfa <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800ec22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec24:	2b02      	cmp	r3, #2
 800ec26:	d805      	bhi.n	800ec34 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	222e      	movs	r2, #46	@ 0x2e
 800ec30:	701a      	strb	r2, [r3, #0]
 800ec32:	e004      	b.n	800ec3e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800ec34:	683a      	ldr	r2, [r7, #0]
 800ec36:	6a3b      	ldr	r3, [r7, #32]
 800ec38:	4413      	add	r3, r2
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	3301      	adds	r3, #1
 800ec42:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ec44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec46:	3301      	adds	r3, #1
 800ec48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4c:	2b03      	cmp	r3, #3
 800ec4e:	d999      	bls.n	800eb84 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800ec50:	693b      	ldr	r3, [r7, #16]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	372c      	adds	r7, #44	@ 0x2c
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	cccccccd 	.word	0xcccccccd

0800ec64 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d003      	beq.n	800ec80 <FreeRTOS_inet_ntop+0x1c>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b0a      	cmp	r3, #10
 800ec7c:	d007      	beq.n	800ec8e <FreeRTOS_inet_ntop+0x2a>
 800ec7e:	e00d      	b.n	800ec9c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800ec80:	683a      	ldr	r2, [r7, #0]
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	68b8      	ldr	r0, [r7, #8]
 800ec86:	f7fb fc8d 	bl	800a5a4 <FreeRTOS_inet_ntop4>
 800ec8a:	6178      	str	r0, [r7, #20]
                break;
 800ec8c:	e009      	b.n	800eca2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	6879      	ldr	r1, [r7, #4]
 800ec92:	68b8      	ldr	r0, [r7, #8]
 800ec94:	f7fc f9c1 	bl	800b01a <FreeRTOS_inet_ntop6>
 800ec98:	6178      	str	r0, [r7, #20]
                break;
 800ec9a:	e002      	b.n	800eca2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	617b      	str	r3, [r7, #20]
            break;
 800eca0:	bf00      	nop
    }

    return pcResult;
 800eca2:	697b      	ldr	r3, [r7, #20]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3718      	adds	r7, #24
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	7a1b      	ldrb	r3, [r3, #8]
 800ecbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <FreeRTOS_GetLocalAddress+0x22>
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d02a      	beq.n	800ed22 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800eccc:	e044      	b.n	800ed58 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	2202      	movs	r2, #2
 800ecd2:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	2218      	movs	r2, #24
 800ecd8:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecde:	061a      	lsls	r2, r3, #24
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ece4:	021b      	lsls	r3, r3, #8
 800ece6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ecea:	431a      	orrs	r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecf0:	0a1b      	lsrs	r3, r3, #8
 800ecf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ecf6:	431a      	orrs	r2, r3
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecfc:	0e1b      	lsrs	r3, r3, #24
 800ecfe:	431a      	orrs	r2, r3
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed08:	021b      	lsls	r3, r3, #8
 800ed0a:	b21a      	sxth	r2, r3
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed10:	0a1b      	lsrs	r3, r3, #8
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	b21b      	sxth	r3, r3
 800ed16:	4313      	orrs	r3, r2
 800ed18:	b21b      	sxth	r3, r3
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	805a      	strh	r2, [r3, #2]
                break;
 800ed20:	e01a      	b.n	800ed58 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	220a      	movs	r2, #10
 800ed26:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	f103 0008 	add.w	r0, r3, #8
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3328      	adds	r3, #40	@ 0x28
 800ed32:	2210      	movs	r2, #16
 800ed34:	4619      	mov	r1, r3
 800ed36:	f012 ffcb 	bl	8021cd0 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed3e:	021b      	lsls	r3, r3, #8
 800ed40:	b21a      	sxth	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ed46:	0a1b      	lsrs	r3, r3, #8
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	b21b      	sxth	r3, r3
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	b21b      	sxth	r3, r3
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	805a      	strh	r2, [r3, #2]
                break;
 800ed56:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800ed58:	2318      	movs	r3, #24
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b084      	sub	sp, #16
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d006      	beq.n	800ed80 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ed76:	2300      	movs	r3, #0
 800ed78:	2200      	movs	r2, #0
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	f7f4 f95a 	bl	8003034 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d015      	beq.n	800edb4 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	0a1b      	lsrs	r3, r3, #8
 800ed8e:	f003 030f 	and.w	r3, r3, #15
 800ed92:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00c      	beq.n	800edb4 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	431a      	orrs	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68f9      	ldr	r1, [r7, #12]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7f3 fe64 	bl	8002a7c <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00b      	beq.n	800ede0 <vSocketWakeUpUser+0x7e>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d007      	beq.n	800ede0 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685a      	ldr	r2, [r3, #4]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4619      	mov	r1, r3
 800edda:	4610      	mov	r0, r2
 800eddc:	f7f3 fe4e 	bl	8002a7c <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	601a      	str	r2, [r3, #0]
}
 800ede6:	bf00      	nop
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800edee:	b480      	push	{r7}
 800edf0:	b085      	sub	sp, #20
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800edfc:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800edfe:	7afb      	ldrb	r3, [r7, #11]
 800ee00:	2b08      	cmp	r3, #8
 800ee02:	d006      	beq.n	800ee12 <bMayConnect+0x24>
 800ee04:	2b08      	cmp	r3, #8
 800ee06:	dc0b      	bgt.n	800ee20 <bMayConnect+0x32>
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <bMayConnect+0x24>
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d003      	beq.n	800ee18 <bMayConnect+0x2a>
 800ee10:	e006      	b.n	800ee20 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	60fb      	str	r3, [r7, #12]
                break;
 800ee16:	e007      	b.n	800ee28 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800ee18:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800ee1c:	60fb      	str	r3, [r7, #12]
                break;
 800ee1e:	e003      	b.n	800ee28 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800ee20:	f06f 030a 	mvn.w	r3, #10
 800ee24:	60fb      	str	r3, [r7, #12]
                break;
 800ee26:	bf00      	nop
        }

        return xResult;
 800ee28:	68fb      	ldr	r3, [r7, #12]
    }
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3714      	adds	r7, #20
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
	...

0800ee38 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d103      	bne.n	800ee54 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800ee4c:	f06f 0315 	mvn.w	r3, #21
 800ee50:	60fb      	str	r3, [r7, #12]
 800ee52:	e01f      	b.n	800ee94 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800ee54:	2200      	movs	r2, #0
 800ee56:	2106      	movs	r1, #6
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f7fe fc71 	bl	800d740 <prvValidSocket>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d103      	bne.n	800ee6c <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800ee64:	f06f 0308 	mvn.w	r3, #8
 800ee68:	60fb      	str	r3, [r7, #12]
 800ee6a:	e013      	b.n	800ee94 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 ff49 	bl	800fd04 <FreeRTOS_issocketconnected>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	dd03      	ble.n	800ee80 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800ee78:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800ee7c:	60fb      	str	r3, [r7, #12]
 800ee7e:	e009      	b.n	800ee94 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d105      	bne.n	800ee94 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7fe ff4f 	bl	800dd30 <FreeRTOS_bind>
 800ee92:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f040 80a6 	bne.w	800efe8 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f7ff ffa6 	bl	800edee <bMayConnect>
 800eea2:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f040 809e 	bne.w	800efe8 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800eeb2:	f36f 03c3 	bfc	r3, #3, #1
 800eeb6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	785b      	ldrb	r3, [r3, #1]
 800eec6:	2b02      	cmp	r3, #2
 800eec8:	d027      	beq.n	800ef1a <prvTCPConnectStart+0xe2>
 800eeca:	2b0a      	cmp	r3, #10
 800eecc:	d168      	bne.n	800efa0 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	7a13      	ldrb	r3, [r2, #8]
 800eed2:	f043 0301 	orr.w	r3, r3, #1
 800eed6:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eedc:	4618      	mov	r0, r3
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	f103 0108 	add.w	r1, r3, #8
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	885b      	ldrh	r3, [r3, #2]
 800eee8:	021b      	lsls	r3, r3, #8
 800eeea:	b21a      	sxth	r2, r3
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	885b      	ldrh	r3, [r3, #2]
 800eef0:	0a1b      	lsrs	r3, r3, #8
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	b21b      	sxth	r3, r3
 800eef6:	4313      	orrs	r3, r2
 800eef8:	b21b      	sxth	r3, r3
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	460a      	mov	r2, r1
 800eefe:	4601      	mov	r1, r0
 800ef00:	483c      	ldr	r0, [pc, #240]	@ (800eff4 <prvTCPConnectStart+0x1bc>)
 800ef02:	f012 fcc9 	bl	8021898 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	3308      	adds	r3, #8
 800ef10:	2210      	movs	r2, #16
 800ef12:	4619      	mov	r1, r3
 800ef14:	f012 fedc 	bl	8021cd0 <memcpy>
                            break;
 800ef18:	e046      	b.n	800efa8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	7a13      	ldrb	r3, [r2, #8]
 800ef1e:	f36f 0300 	bfc	r3, #0, #1
 800ef22:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ef28:	4618      	mov	r0, r3
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	061a      	lsls	r2, r3, #24
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	021b      	lsls	r3, r3, #8
 800ef36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ef3a:	431a      	orrs	r2, r3
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	0a1b      	lsrs	r3, r3, #8
 800ef42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ef46:	431a      	orrs	r2, r3
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	0e1b      	lsrs	r3, r3, #24
 800ef4e:	ea42 0103 	orr.w	r1, r2, r3
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	885b      	ldrh	r3, [r3, #2]
 800ef56:	021b      	lsls	r3, r3, #8
 800ef58:	b21a      	sxth	r2, r3
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	885b      	ldrh	r3, [r3, #2]
 800ef5e:	0a1b      	lsrs	r3, r3, #8
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	b21b      	sxth	r3, r3
 800ef64:	4313      	orrs	r3, r2
 800ef66:	b21b      	sxth	r3, r3
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	460a      	mov	r2, r1
 800ef6c:	4601      	mov	r1, r0
 800ef6e:	4822      	ldr	r0, [pc, #136]	@ (800eff8 <prvTCPConnectStart+0x1c0>)
 800ef70:	f012 fc92 	bl	8021898 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	061a      	lsls	r2, r3, #24
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	689b      	ldr	r3, [r3, #8]
 800ef7e:	021b      	lsls	r3, r3, #8
 800ef80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ef84:	431a      	orrs	r2, r3
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	0a1b      	lsrs	r3, r3, #8
 800ef8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ef90:	431a      	orrs	r2, r3
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	0e1b      	lsrs	r3, r3, #24
 800ef98:	431a      	orrs	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800ef9e:	e003      	b.n	800efa8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800efa0:	4816      	ldr	r0, [pc, #88]	@ (800effc <prvTCPConnectStart+0x1c4>)
 800efa2:	f012 fc79 	bl	8021898 <lUDPLoggingPrintf>
                        break;
 800efa6:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	885b      	ldrh	r3, [r3, #2]
 800efac:	021b      	lsls	r3, r3, #8
 800efae:	b21a      	sxth	r2, r3
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	885b      	ldrh	r3, [r3, #2]
 800efb4:	0a1b      	lsrs	r3, r3, #8
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	b21b      	sxth	r3, r3
 800efba:	4313      	orrs	r3, r2
 800efbc:	b21b      	sxth	r3, r3
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800efc6:	2102      	movs	r1, #2
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f001 fc59 	bl	8010880 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2201      	movs	r2, #1
 800efd2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800efd6:	2006      	movs	r0, #6
 800efd8:	f7f9 ffdc 	bl	8008f94 <xSendEventToIPTask>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d002      	beq.n	800efe8 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800efe2:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800efe6:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800efe8:	68fb      	ldr	r3, [r7, #12]
    }
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	080255b4 	.word	0x080255b4
 800eff8:	080255dc 	.word	0x080255dc
 800effc:	08025600 	.word	0x08025600

0800f000 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800f000:	b580      	push	{r7, lr}
 800f002:	b094      	sub	sp, #80	@ 0x50
 800f004:	af02      	add	r7, sp, #8
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f010:	2300      	movs	r3, #0
 800f012:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f014:	f06f 0315 	mvn.w	r3, #21
 800f018:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d013      	beq.n	800f048 <FreeRTOS_connect+0x48>
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	785b      	ldrb	r3, [r3, #1]
 800f024:	2b0a      	cmp	r3, #10
 800f026:	d00f      	beq.n	800f048 <FreeRTOS_connect+0x48>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	785b      	ldrb	r3, [r3, #1]
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	d00b      	beq.n	800f048 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800f030:	f107 0314 	add.w	r3, r7, #20
 800f034:	2218      	movs	r2, #24
 800f036:	68b9      	ldr	r1, [r7, #8]
 800f038:	4618      	mov	r0, r3
 800f03a:	f012 fe49 	bl	8021cd0 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800f03e:	2302      	movs	r3, #2
 800f040:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800f042:	f107 0314 	add.w	r3, r7, #20
 800f046:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800f048:	68b9      	ldr	r1, [r7, #8]
 800f04a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f04c:	f7ff fef4 	bl	800ee38 <prvTCPConnectStart>
 800f050:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800f052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f054:	2b00      	cmp	r3, #0
 800f056:	d146      	bne.n	800f0e6 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800f058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d110      	bne.n	800f080 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800f05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f060:	6a1b      	ldr	r3, [r3, #32]
 800f062:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800f064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f066:	2b00      	cmp	r3, #0
 800f068:	d103      	bne.n	800f072 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800f06a:	f06f 030a 	mvn.w	r3, #10
 800f06e:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800f070:	e039      	b.n	800f0e6 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800f072:	2301      	movs	r3, #1
 800f074:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800f076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7f5 fb66 	bl	800474c <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800f080:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f082:	f000 fe3f 	bl	800fd04 <FreeRTOS_issocketconnected>
 800f086:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800f088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	db2a      	blt.n	800f0e4 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800f08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f090:	2b00      	cmp	r3, #0
 800f092:	dd02      	ble.n	800f09a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800f094:	2300      	movs	r3, #0
 800f096:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f098:	e025      	b.n	800f0e6 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f09a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f09e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f0a2:	4611      	mov	r1, r2
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f5 fb89 	bl	80047bc <xTaskCheckForTimeOut>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800f0b0:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800f0b4:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f0b6:	e016      	b.n	800f0e6 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0ba:	6858      	ldr	r0, [r3, #4]
 800f0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	2128      	movs	r1, #40	@ 0x28
 800f0c6:	f7f3 fbf3 	bl	80028b0 <xEventGroupWaitBits>
 800f0ca:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ce:	f003 0320 	and.w	r3, r3, #32
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0c0      	beq.n	800f058 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f0d6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f0da:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800f0dc:	4804      	ldr	r0, [pc, #16]	@ (800f0f0 <FreeRTOS_connect+0xf0>)
 800f0de:	f012 fbdb 	bl	8021898 <lUDPLoggingPrintf>
                    break;
 800f0e2:	e000      	b.n	800f0e6 <FreeRTOS_connect+0xe6>
                    break;
 800f0e4:	bf00      	nop
                }
            }
        }

        return xResult;
 800f0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3748      	adds	r7, #72	@ 0x48
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	0802562c 	.word	0x0802562c

0800f0f4 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08a      	sub	sp, #40	@ 0x28
 800f0f8:	af02      	add	r7, sp, #8
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	f003 0301 	and.w	r3, r3, #1
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d13b      	bne.n	800f184 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	089b      	lsrs	r3, r3, #2
 800f110:	f003 0301 	and.w	r3, r3, #1
 800f114:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	2100      	movs	r1, #0
 800f126:	f001 fa04 	bl	8010532 <uxStreamBufferGet>
 800f12a:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800f12c:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f134:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d02b      	beq.n	800f196 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f144:	4618      	mov	r0, r3
 800f146:	f001 f8c5 	bl	80102d4 <uxStreamBufferFrontSpace>
 800f14a:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	429a      	cmp	r2, r3
 800f156:	d31e      	bcc.n	800f196 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f15e:	f36f 13c7 	bfc	r3, #7, #1
 800f162:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f166:	68fa      	ldr	r2, [r7, #12]
 800f168:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f16c:	f043 0301 	orr.w	r3, r3, #1
 800f170:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2201      	movs	r2, #1
 800f178:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f17c:	2006      	movs	r0, #6
 800f17e:	f7f9 ff09 	bl	8008f94 <xSendEventToIPTask>
 800f182:	e008      	b.n	800f196 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f18a:	68b9      	ldr	r1, [r7, #8]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f001 f930 	bl	80103f2 <uxStreamBufferGetPtr>
 800f192:	4603      	mov	r3, r0
 800f194:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800f196:	69fb      	ldr	r3, [r7, #28]
    }
 800f198:	4618      	mov	r0, r3
 800f19a:	3720      	adds	r7, #32
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08e      	sub	sp, #56	@ 0x38
 800f1a4:	af02      	add	r7, sp, #8
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d05f      	beq.n	800f282 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f001 f894 	bl	80102f6 <uxStreamBufferGetSize>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800f1d2:	e056      	b.n	800f282 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f1da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800f1de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d007      	beq.n	800f1f6 <prvRecvWait+0x56>
 800f1e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1ea:	2b08      	cmp	r3, #8
 800f1ec:	d003      	beq.n	800f1f6 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800f1ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1f2:	2b09      	cmp	r3, #9
 800f1f4:	d10e      	bne.n	800f214 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800f1f6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f202:	f003 0308 	and.w	r3, r3, #8
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d03e      	beq.n	800f28a <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800f20c:	f06f 030b 	mvn.w	r3, #11
 800f210:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800f212:	e03a      	b.n	800f28a <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800f214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f216:	2b00      	cmp	r3, #0
 800f218:	d111      	bne.n	800f23e <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d033      	beq.n	800f28e <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f003 0310 	and.w	r3, r3, #16
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d130      	bne.n	800f292 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f230:	2301      	movs	r3, #1
 800f232:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f234:	f107 0314 	add.w	r3, r7, #20
 800f238:	4618      	mov	r0, r3
 800f23a:	f7f5 fa87 	bl	800474c <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f23e:	f107 021c 	add.w	r2, r7, #28
 800f242:	f107 0314 	add.w	r3, r7, #20
 800f246:	4611      	mov	r1, r2
 800f248:	4618      	mov	r0, r3
 800f24a:	f7f5 fab7 	bl	80047bc <xTaskCheckForTimeOut>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d120      	bne.n	800f296 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6858      	ldr	r0, [r3, #4]
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	2300      	movs	r3, #0
 800f25e:	2201      	movs	r2, #1
 800f260:	2161      	movs	r1, #97	@ 0x61
 800f262:	f7f3 fb25 	bl	80028b0 <xEventGroupWaitBits>
 800f266:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d007      	beq.n	800f282 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f278:	4618      	mov	r0, r3
 800f27a:	f001 f83c 	bl	80102f6 <uxStreamBufferGetSize>
 800f27e:	4603      	mov	r3, r0
 800f280:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800f282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f284:	2b00      	cmp	r3, #0
 800f286:	d0a5      	beq.n	800f1d4 <prvRecvWait+0x34>
 800f288:	e006      	b.n	800f298 <prvRecvWait+0xf8>
                break;
 800f28a:	bf00      	nop
 800f28c:	e004      	b.n	800f298 <prvRecvWait+0xf8>
                    break;
 800f28e:	bf00      	nop
 800f290:	e002      	b.n	800f298 <prvRecvWait+0xf8>
                    break;
 800f292:	bf00      	nop
 800f294:	e000      	b.n	800f298 <prvRecvWait+0xf8>
                break;
 800f296:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f29c:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800f29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3730      	adds	r7, #48	@ 0x30
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b088      	sub	sp, #32
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	2106      	movs	r1, #6
 800f2c6:	69b8      	ldr	r0, [r7, #24]
 800f2c8:	f7fe fa3a 	bl	800d740 <prvValidSocket>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d103      	bne.n	800f2da <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f2d2:	f06f 0315 	mvn.w	r3, #21
 800f2d6:	61fb      	str	r3, [r7, #28]
 800f2d8:	e01d      	b.n	800f316 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	f003 0301 	and.w	r3, r3, #1
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d006      	beq.n	800f2f2 <FreeRTOS_recv+0x4a>
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d103      	bne.n	800f2f2 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f2ea:	f06f 0315 	mvn.w	r3, #21
 800f2ee:	61fb      	str	r3, [r7, #28]
 800f2f0:	e011      	b.n	800f316 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800f2f2:	f107 0314 	add.w	r3, r7, #20
 800f2f6:	683a      	ldr	r2, [r7, #0]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	69b8      	ldr	r0, [r7, #24]
 800f2fc:	f7ff ff50 	bl	800f1a0 <prvRecvWait>
 800f300:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	2b00      	cmp	r3, #0
 800f306:	dd06      	ble.n	800f316 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	68b9      	ldr	r1, [r7, #8]
 800f30e:	69b8      	ldr	r0, [r7, #24]
 800f310:	f7ff fef0 	bl	800f0f4 <prvRecvData>
 800f314:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800f316:	69fb      	ldr	r3, [r7, #28]
    }
 800f318:	4618      	mov	r0, r3
 800f31a:	3720      	adds	r7, #32
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800f32a:	2301      	movs	r3, #1
 800f32c:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f32e:	2201      	movs	r2, #1
 800f330:	2106      	movs	r1, #6
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7fe fa04 	bl	800d740 <prvValidSocket>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d103      	bne.n	800f346 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f33e:	f06f 0315 	mvn.w	r3, #21
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	e040      	b.n	800f3c8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f34c:	f003 0308 	and.w	r3, r3, #8
 800f350:	b2db      	uxtb	r3, r3
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f356:	f06f 030b 	mvn.w	r3, #11
 800f35a:	60fb      	str	r3, [r7, #12]
 800f35c:	e034      	b.n	800f3c8 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f364:	2b00      	cmp	r3, #0
 800f366:	d009      	beq.n	800f37c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f36e:	2b08      	cmp	r3, #8
 800f370:	d004      	beq.n	800f37c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f378:	2b09      	cmp	r3, #9
 800f37a:	d103      	bne.n	800f384 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f37c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	e021      	b.n	800f3c8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f38a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	60fb      	str	r3, [r7, #12]
 800f398:	e016      	b.n	800f3c8 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d102      	bne.n	800f3a6 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e010      	b.n	800f3c8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d10b      	bne.n	800f3c8 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f000 fac6 	bl	800f944 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d102      	bne.n	800f3c8 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f3c2:	f06f 030b 	mvn.w	r3, #11
 800f3c6:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
    }
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b088      	sub	sp, #32
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
 800f3da:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	2106      	movs	r1, #6
 800f3f2:	6978      	ldr	r0, [r7, #20]
 800f3f4:	f7fe f9a4 	bl	800d740 <prvValidSocket>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d135      	bne.n	800f46a <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f404:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10f      	bne.n	800f42c <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f412:	f003 0308 	and.w	r3, r3, #8
 800f416:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d107      	bne.n	800f42c <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f41c:	2100      	movs	r1, #0
 800f41e:	6978      	ldr	r0, [r7, #20]
 800f420:	f000 fa90 	bl	800f944 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f42a:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d01b      	beq.n	800f46a <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800f432:	69b8      	ldr	r0, [r7, #24]
 800f434:	f000 ff3d 	bl	80102b2 <uxStreamBufferGetSpace>
 800f438:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	691a      	ldr	r2, [r3, #16]
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d803      	bhi.n	800f456 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	e002      	b.n	800f45c <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	3310      	adds	r3, #16
 800f462:	69ba      	ldr	r2, [r7, #24]
 800f464:	4413      	add	r3, r2
 800f466:	3304      	adds	r3, #4
 800f468:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800f46a:	69fb      	ldr	r3, [r7, #28]
    }
 800f46c:	4618      	mov	r0, r3
 800f46e:	3720      	adds	r7, #32
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800f474:	b580      	push	{r7, lr}
 800f476:	b090      	sub	sp, #64	@ 0x40
 800f478:	af02      	add	r7, sp, #8
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800f482:	2300      	movs	r3, #0
 800f484:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f490:	4618      	mov	r0, r3
 800f492:	f000 ff0e 	bl	80102b2 <uxStreamBufferGetSpace>
 800f496:	4603      	mov	r3, r0
 800f498:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f49a:	2300      	movs	r3, #0
 800f49c:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800f4a2:	e08f      	b.n	800f5c4 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800f4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	dd4b      	ble.n	800f542 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800f4ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	dd01      	ble.n	800f4ba <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f4c0:	f003 0310 	and.w	r3, r3, #16
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00e      	beq.n	800f4e8 <prvTCPSendLoop+0x74>
 800f4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d10a      	bne.n	800f4e8 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800f4d6:	f7f4 fc7d 	bl	8003dd4 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4e4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800f4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	f000 ff9d 	bl	8010432 <uxStreamBufferAdd>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d101      	bne.n	800f506 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800f502:	f7f4 fc75 	bl	8003df0 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2201      	movs	r2, #1
 800f50a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800f50e:	f7fa fc99 	bl	8009e44 <xIsCallingFromIPTask>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d102      	bne.n	800f51e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f518:	2006      	movs	r0, #6
 800f51a:	f7f9 fd3b 	bl	8008f94 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800f51e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800f526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f52a:	4413      	add	r3, r2
 800f52c:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800f52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f530:	2b00      	cmp	r3, #0
 800f532:	d053      	beq.n	800f5dc <prvTCPSendLoop+0x168>
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d050      	beq.n	800f5dc <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800f53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f53c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f53e:	4413      	add	r3, r2
 800f540:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800f542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f544:	2b00      	cmp	r3, #0
 800f546:	d119      	bne.n	800f57c <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f54c:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800f54e:	f7fa fc79 	bl	8009e44 <xIsCallingFromIPTask>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800f558:	2300      	movs	r3, #0
 800f55a:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d035      	beq.n	800f5ce <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	f003 0310 	and.w	r3, r3, #16
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d132      	bne.n	800f5d2 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f56c:	2301      	movs	r3, #1
 800f56e:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f570:	f107 0314 	add.w	r3, r7, #20
 800f574:	4618      	mov	r0, r3
 800f576:	f7f5 f8e9 	bl	800474c <vTaskSetTimeOutState>
 800f57a:	e00a      	b.n	800f592 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f57c:	f107 021c 	add.w	r2, r7, #28
 800f580:	f107 0314 	add.w	r3, r7, #20
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7f5 f918 	bl	80047bc <xTaskCheckForTimeOut>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d121      	bne.n	800f5d6 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6858      	ldr	r0, [r3, #4]
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	2300      	movs	r3, #0
 800f59c:	2201      	movs	r2, #1
 800f59e:	2122      	movs	r1, #34	@ 0x22
 800f5a0:	f7f3 f986 	bl	80028b0 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f5a4:	6879      	ldr	r1, [r7, #4]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f7ff feba 	bl	800f320 <prvTCPSendCheck>
 800f5ac:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800f5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	db12      	blt.n	800f5da <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f000 fe79 	bl	80102b2 <uxStreamBufferGetSpace>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800f5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f73f af6c 	bgt.w	800f4a4 <prvTCPSendLoop+0x30>
 800f5cc:	e006      	b.n	800f5dc <prvTCPSendLoop+0x168>
                    break;
 800f5ce:	bf00      	nop
 800f5d0:	e004      	b.n	800f5dc <prvTCPSendLoop+0x168>
                    break;
 800f5d2:	bf00      	nop
 800f5d4:	e002      	b.n	800f5dc <prvTCPSendLoop+0x168>
                    break;
 800f5d6:	bf00      	nop
 800f5d8:	e000      	b.n	800f5dc <prvTCPSendLoop+0x168>
                break;
 800f5da:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800f5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3738      	adds	r7, #56	@ 0x38
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
	...

0800f5e8 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f5fa:	6879      	ldr	r1, [r7, #4]
 800f5fc:	6938      	ldr	r0, [r7, #16]
 800f5fe:	f7ff fe8f 	bl	800f320 <prvTCPSendCheck>
 800f602:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	2b00      	cmp	r3, #0
 800f608:	dd24      	ble.n	800f654 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	68b9      	ldr	r1, [r7, #8]
 800f610:	6938      	ldr	r0, [r7, #16]
 800f612:	f7ff ff2f 	bl	800f474 <prvTCPSendLoop>
 800f616:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d11a      	bne.n	800f654 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f624:	2b05      	cmp	r3, #5
 800f626:	d903      	bls.n	800f630 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800f628:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f62c:	617b      	str	r3, [r7, #20]
 800f62e:	e011      	b.n	800f654 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f634:	2b17      	cmp	r3, #23
 800f636:	d00a      	beq.n	800f64e <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f63c:	4619      	mov	r1, r3
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f648:	4805      	ldr	r0, [pc, #20]	@ (800f660 <FreeRTOS_send+0x78>)
 800f64a:	f012 f925 	bl	8021898 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800f64e:	f06f 031b 	mvn.w	r3, #27
 800f652:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800f654:	697b      	ldr	r3, [r7, #20]
    }
 800f656:	4618      	mov	r0, r3
 800f658:	3718      	adds	r7, #24
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	08025684 	.word	0x08025684

0800f664 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f676:	2201      	movs	r2, #1
 800f678:	2106      	movs	r1, #6
 800f67a:	68b8      	ldr	r0, [r7, #8]
 800f67c:	f7fe f860 	bl	800d740 <prvValidSocket>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d103      	bne.n	800f68e <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f686:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	e056      	b.n	800f73c <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f694:	2b00      	cmp	r3, #0
 800f696:	d008      	beq.n	800f6aa <FreeRTOS_listen+0x46>
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f69e:	2b08      	cmp	r3, #8
 800f6a0:	d003      	beq.n	800f6aa <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f6a2:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f6a6:	60fb      	str	r3, [r7, #12]
 800f6a8:	e048      	b.n	800f73c <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800f6b0:	f7fa fd78 	bl	800a1a4 <FreeRTOS_min_int32>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	b29a      	uxth	r2, r3
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f6c4:	f003 0308 	and.w	r3, r3, #8
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d032      	beq.n	800f734 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d005      	beq.n	800f6e4 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f000 fe2b 	bl	801033a <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d005      	beq.n	800f6fa <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 fe20 	bl	801033a <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	33aa      	adds	r3, #170	@ 0xaa
 800f6fe:	225a      	movs	r2, #90	@ 0x5a
 800f700:	2100      	movs	r1, #0
 800f702:	4618      	mov	r0, r3
 800f704:	f012 fbf1 	bl	8021eea <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800f70e:	22c0      	movs	r2, #192	@ 0xc0
 800f710:	2100      	movs	r1, #0
 800f712:	4618      	mov	r0, r3
 800f714:	f012 fbe9 	bl	8021eea <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	3368      	adds	r3, #104	@ 0x68
 800f71c:	2204      	movs	r2, #4
 800f71e:	2100      	movs	r1, #0
 800f720:	4618      	mov	r0, r3
 800f722:	f012 fbe2 	bl	8021eea <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f72c:	f043 0308 	orr.w	r3, r3, #8
 800f730:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800f734:	2101      	movs	r1, #1
 800f736:	68b8      	ldr	r0, [r7, #8]
 800f738:	f001 f8a2 	bl	8010880 <vTCPStateChange>
        }

        return xResult;
 800f73c:	68fb      	ldr	r3, [r7, #12]
    }
 800f73e:	4618      	mov	r0, r3
 800f740:	3710      	adds	r7, #16
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800f746:	b580      	push	{r7, lr}
 800f748:	b084      	sub	sp, #16
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
 800f74e:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f754:	2201      	movs	r2, #1
 800f756:	2106      	movs	r1, #6
 800f758:	68b8      	ldr	r0, [r7, #8]
 800f75a:	f7fd fff1 	bl	800d740 <prvValidSocket>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d103      	bne.n	800f76c <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f764:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	e018      	b.n	800f79e <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f772:	2b05      	cmp	r3, #5
 800f774:	d003      	beq.n	800f77e <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f776:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f77a:	60fb      	str	r3, [r7, #12]
 800f77c:	e00f      	b.n	800f79e <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f784:	f043 0320 	orr.w	r3, r3, #32
 800f788:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2201      	movs	r2, #1
 800f790:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f794:	2006      	movs	r0, #6
 800f796:	f7f9 fbfd 	bl	8008f94 <xSendEventToIPTask>
            xResult = 0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800f79e:	68fb      	ldr	r3, [r7, #12]
    }
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	@ 0x28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800f7b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7b4:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800f7b6:	f7f4 fc1f 	bl	8003ff8 <xTaskGetTickCount>
 800f7ba:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800f7bc:	4b32      	ldr	r3, [pc, #200]	@ (800f888 <xTCPTimerCheck+0xe0>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	69ba      	ldr	r2, [r7, #24]
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f7c6:	4b31      	ldr	r3, [pc, #196]	@ (800f88c <xTCPTimerCheck+0xe4>)
 800f7c8:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f7ca:	4b31      	ldr	r3, [pc, #196]	@ (800f890 <xTCPTimerCheck+0xe8>)
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800f7d0:	4a2d      	ldr	r2, [pc, #180]	@ (800f888 <xTCPTimerCheck+0xe0>)
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800f7d6:	6a3b      	ldr	r3, [r7, #32]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d14b      	bne.n	800f874 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800f7e0:	e048      	b.n	800f874 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d03a      	beq.n	800f86e <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f7fe:	461a      	mov	r2, r3
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	4293      	cmp	r3, r2
 800f804:	d20a      	bcs.n	800f81c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800f80c:	6a3b      	ldr	r3, [r7, #32]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	b29a      	uxth	r2, r3
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800f81a:	e00a      	b.n	800f832 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	2200      	movs	r2, #0
 800f820:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800f824:	6938      	ldr	r0, [r7, #16]
 800f826:	f000 ff33 	bl	8010690 <xTCPSocketCheck>
 800f82a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	db1f      	blt.n	800f872 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d008      	beq.n	800f84c <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d003      	beq.n	800f848 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800f840:	6938      	ldr	r0, [r7, #16]
 800f842:	f7ff fa8e 	bl	800ed62 <vSocketWakeUpUser>
 800f846:	e001      	b.n	800f84c <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800f848:	2300      	movs	r3, #0
 800f84a:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00e      	beq.n	800f874 <xTCPTimerCheck+0xcc>
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f85c:	461a      	mov	r2, r3
 800f85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f860:	4293      	cmp	r3, r2
 800f862:	d907      	bls.n	800f874 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f86a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f86c:	e002      	b.n	800f874 <xTCPTimerCheck+0xcc>
                continue;
 800f86e:	bf00      	nop
 800f870:	e000      	b.n	800f874 <xTCPTimerCheck+0xcc>
                    continue;
 800f872:	bf00      	nop
        while( pxIterator != pxEnd )
 800f874:	69fa      	ldr	r2, [r7, #28]
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d1b2      	bne.n	800f7e2 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800f87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800f87e:	4618      	mov	r0, r3
 800f880:	3728      	adds	r7, #40	@ 0x28
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	20001454 	.word	0x20001454
 800f88c:	20001448 	.word	0x20001448
 800f890:	20001440 	.word	0x20001440

0800f894 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800f894:	b082      	sub	sp, #8
 800f896:	b580      	push	{r7, lr}
 800f898:	b088      	sub	sp, #32
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
 800f89e:	6039      	str	r1, [r7, #0]
 800f8a0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f8a4:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	61bb      	str	r3, [r7, #24]
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f8b0:	4b23      	ldr	r3, [pc, #140]	@ (800f940 <pxTCPSocketLookup+0xac>)
 800f8b2:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	61fb      	str	r3, [r7, #28]
 800f8ba:	e02e      	b.n	800f91a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d122      	bne.n	800f914 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d102      	bne.n	800f8de <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	617b      	str	r3, [r7, #20]
 800f8dc:	e01a      	b.n	800f914 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d113      	bne.n	800f914 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d006      	beq.n	800f900 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800f8f2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f7fb f9d4 	bl	800aca4 <pxTCPSocketLookup_IPv6>
 800f8fc:	61b8      	str	r0, [r7, #24]
 800f8fe:	e006      	b.n	800f90e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f906:	429a      	cmp	r2, r3
 800f908:	d101      	bne.n	800f90e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800f90e:	69bb      	ldr	r3, [r7, #24]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d107      	bne.n	800f924 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d1cc      	bne.n	800f8bc <pxTCPSocketLookup+0x28>
 800f922:	e000      	b.n	800f926 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800f924:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d101      	bne.n	800f930 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800f930:	69bb      	ldr	r3, [r7, #24]
    }
 800f932:	4618      	mov	r0, r3
 800f934:	3720      	adds	r7, #32
 800f936:	46bd      	mov	sp, r7
 800f938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f93c:	b002      	add	sp, #8
 800f93e:	4770      	bx	lr
 800f940:	20001448 	.word	0x20001448

0800f944 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800f944:	b580      	push	{r7, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d048      	beq.n	800f9e6 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800f954:	2314      	movs	r3, #20
 800f956:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800f958:	2350      	movs	r3, #80	@ 0x50
 800f95a:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800f968:	fbb3 f3f2 	udiv	r3, r3, r2
 800f96c:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00f      	beq.n	800f994 <prvTCPCreateStream+0x50>
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	2b04      	cmp	r3, #4
 800f978:	d80c      	bhi.n	800f994 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	3b01      	subs	r3, #1
 800f97e:	4a40      	ldr	r2, [pc, #256]	@ (800fa80 <prvTCPCreateStream+0x13c>)
 800f980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f984:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	3b01      	subs	r3, #1
 800f98a:	4a3d      	ldr	r2, [pc, #244]	@ (800fa80 <prvTCPCreateStream+0x13c>)
 800f98c:	00db      	lsls	r3, r3, #3
 800f98e:	4413      	add	r3, r2
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f99a:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10c      	bne.n	800f9c0 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f9ac:	69ba      	ldr	r2, [r7, #24]
 800f9ae:	fb02 f303 	mul.w	r3, r2, r3
 800f9b2:	4a34      	ldr	r2, [pc, #208]	@ (800fa84 <prvTCPCreateStream+0x140>)
 800f9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800f9b8:	095a      	lsrs	r2, r3, #5
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d111      	bne.n	800f9ee <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f9d0:	697a      	ldr	r2, [r7, #20]
 800f9d2:	fb02 f303 	mul.w	r3, r2, r3
 800f9d6:	4a2b      	ldr	r2, [pc, #172]	@ (800fa84 <prvTCPCreateStream+0x140>)
 800f9d8:	fba2 2303 	umull	r2, r3, r2, r3
 800f9dc:	095a      	lsrs	r2, r3, #5
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800f9e4:	e003      	b.n	800f9ee <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f9ec:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	3304      	adds	r3, #4
 800f9f2:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	f023 0303 	bic.w	r3, r3, #3
 800f9fa:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800f9fc:	69fb      	ldr	r3, [r7, #28]
 800f9fe:	3314      	adds	r3, #20
 800fa00:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f7f6 f966 	bl	8005cd4 <pvPortMalloc>
 800fa08:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10e      	bne.n	800fa2e <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800fa10:	481d      	ldr	r0, [pc, #116]	@ (800fa88 <prvTCPCreateStream+0x144>)
 800fa12:	f011 ff41 	bl	8021898 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800fa1c:	f043 0308 	orr.w	r3, r3, #8
 800fa20:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800fa24:	2108      	movs	r1, #8
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 ff2a 	bl	8010880 <vTCPStateChange>
 800fa2c:	e022      	b.n	800fa74 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800fa2e:	2214      	movs	r2, #20
 800fa30:	2100      	movs	r1, #0
 800fa32:	68b8      	ldr	r0, [r7, #8]
 800fa34:	f012 fa59 	bl	8021eea <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	69fa      	ldr	r2, [r7, #28]
 800fa3c:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800fa3e:	4b13      	ldr	r3, [pc, #76]	@ (800fa8c <prvTCPCreateStream+0x148>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d00a      	beq.n	800fa5c <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <prvTCPCreateStream+0x10c>
 800fa4c:	2152      	movs	r1, #82	@ 0x52
 800fa4e:	e000      	b.n	800fa52 <prvTCPCreateStream+0x10e>
 800fa50:	2154      	movs	r1, #84	@ 0x54
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	69fa      	ldr	r2, [r7, #28]
 800fa56:	480e      	ldr	r0, [pc, #56]	@ (800fa90 <prvTCPCreateStream+0x14c>)
 800fa58:	f011 ff1e 	bl	8021898 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d004      	beq.n	800fa6c <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68ba      	ldr	r2, [r7, #8]
 800fa66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800fa6a:	e003      	b.n	800fa74 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 800fa74:	68bb      	ldr	r3, [r7, #8]
    }
 800fa76:	4618      	mov	r0, r3
 800fa78:	3720      	adds	r7, #32
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	08026fb0 	.word	0x08026fb0
 800fa84:	51eb851f 	.word	0x51eb851f
 800fa88:	080256ac 	.word	0x080256ac
 800fa8c:	20001484 	.word	0x20001484
 800fa90:	080256d0 	.word	0x080256d0

0800fa94 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08a      	sub	sp, #40	@ 0x28
 800fa98:	af02      	add	r7, sp, #8
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800faa4:	2300      	movs	r3, #0
 800faa6:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d006      	beq.n	800fabc <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800fab6:	2300      	movs	r3, #0
 800fab8:	61fb      	str	r3, [r7, #28]
 800faba:	e009      	b.n	800fad0 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fac2:	f107 0214 	add.w	r2, r7, #20
 800fac6:	4611      	mov	r1, r2
 800fac8:	4618      	mov	r0, r3
 800faca:	f000 fc92 	bl	80103f2 <uxStreamBufferGetPtr>
 800face:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d011      	beq.n	800fafa <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fadc:	6979      	ldr	r1, [r7, #20]
 800fade:	69ba      	ldr	r2, [r7, #24]
 800fae0:	68f8      	ldr	r0, [r7, #12]
 800fae2:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800faea:	2300      	movs	r3, #0
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	2200      	movs	r2, #0
 800faf2:	2100      	movs	r1, #0
 800faf4:	f000 fd1d 	bl	8010532 <uxStreamBufferGet>
        {
 800faf8:	e7d4      	b.n	800faa4 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800fafa:	bf00      	nop
 800fafc:	3720      	adds	r7, #32
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b084      	sub	sp, #16
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fb10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d121      	bne.n	800fb5e <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 fbd7 	bl	80102d4 <uxStreamBufferFrontSpace>
 800fb26:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb2e:	68fa      	ldr	r2, [r7, #12]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d814      	bhi.n	800fb5e <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fb3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb3e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fb48:	f043 0301 	orr.w	r3, r3, #1
 800fb4c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fb58:	2006      	movs	r0, #6
 800fb5a:	f7f9 fa1b 	bl	8008f94 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f043 0201 	orr.w	r2, r3, #1
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb6e:	f003 0301 	and.w	r3, r3, #1
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d005      	beq.n	800fb82 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800fb82:	bf00      	nop
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
	...

0800fb8c <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800fb8c:	b5b0      	push	{r4, r5, r7, lr}
 800fb8e:	b08c      	sub	sp, #48	@ 0x30
 800fb90:	af04      	add	r7, sp, #16
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
 800fb98:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fba0:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800fba2:	2300      	movs	r3, #0
 800fba4:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d001      	beq.n	800fbb4 <lTCPAddRxdata+0x28>
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	e000      	b.n	800fbb6 <lTCPAddRxdata+0x2a>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d10a      	bne.n	800fbd8 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800fbc2:	2101      	movs	r1, #1
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f7ff febd 	bl	800f944 <prvTCPCreateStream>
 800fbca:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d102      	bne.n	800fbd8 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 800fbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	db41      	blt.n	800fc62 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00f      	beq.n	800fc04 <lTCPAddRxdata+0x78>
 800fbe4:	69f8      	ldr	r0, [r7, #28]
 800fbe6:	f000 fb86 	bl	80102f6 <uxStreamBufferGetSize>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d109      	bne.n	800fc04 <lTCPAddRxdata+0x78>
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d106      	bne.n	800fc04 <lTCPAddRxdata+0x78>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d003      	beq.n	800fc04 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	68b9      	ldr	r1, [r7, #8]
 800fc0a:	69f8      	ldr	r0, [r7, #28]
 800fc0c:	f000 fc11 	bl	8010432 <uxStreamBufferAdd>
 800fc10:	4603      	mov	r3, r0
 800fc12:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	69ba      	ldr	r2, [r7, #24]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d013      	beq.n	800fc44 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	681c      	ldr	r4, [r3, #0]
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	689d      	ldr	r5, [r3, #8]
 800fc24:	69f8      	ldr	r0, [r7, #28]
 800fc26:	f000 fb55 	bl	80102d4 <uxStreamBufferFrontSpace>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	9303      	str	r3, [sp, #12]
 800fc32:	9202      	str	r2, [sp, #8]
 800fc34:	9501      	str	r5, [sp, #4]
 800fc36:	9400      	str	r4, [sp, #0]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	69ba      	ldr	r2, [r7, #24]
 800fc3c:	68b9      	ldr	r1, [r7, #8]
 800fc3e:	480b      	ldr	r0, [pc, #44]	@ (800fc6c <lTCPAddRxdata+0xe0>)
 800fc40:	f011 fe2a 	bl	8021898 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d10b      	bne.n	800fc62 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d005      	beq.n	800fc5c <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	6979      	ldr	r1, [r7, #20]
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7ff ff1d 	bl	800fa94 <vTCPAddRxdata_Callback>
 800fc5a:	e002      	b.n	800fc62 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7ff ff50 	bl	800fb02 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800fc62:	69bb      	ldr	r3, [r7, #24]
    }
 800fc64:	4618      	mov	r0, r3
 800fc66:	3720      	adds	r7, #32
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc6c:	0802570c 	.word	0x0802570c

0800fc70 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fc82:	2b06      	cmp	r3, #6
 800fc84:	d003      	beq.n	800fc8e <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fc86:	f06f 0315 	mvn.w	r3, #21
 800fc8a:	60fb      	str	r3, [r7, #12]
 800fc8c:	e011      	b.n	800fcb2 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d008      	beq.n	800fcaa <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f000 fb07 	bl	80102b2 <uxStreamBufferGetSpace>
 800fca4:	4603      	mov	r3, r0
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	e003      	b.n	800fcb2 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fcb0:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
    }
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fcce:	2b06      	cmp	r3, #6
 800fcd0:	d003      	beq.n	800fcda <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fcd2:	f06f 0315 	mvn.w	r3, #21
 800fcd6:	60fb      	str	r3, [r7, #12]
 800fcd8:	e00f      	b.n	800fcfa <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d008      	beq.n	800fcf6 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 fb03 	bl	80102f6 <uxStreamBufferGetSize>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	e001      	b.n	800fcfa <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
    }
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800fd04:	b480      	push	{r7}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800fd10:	2300      	movs	r3, #0
 800fd12:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fd1a:	2b06      	cmp	r3, #6
 800fd1c:	d003      	beq.n	800fd26 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fd1e:	f06f 0315 	mvn.w	r3, #21
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	e00b      	b.n	800fd3e <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fd2c:	2b04      	cmp	r3, #4
 800fd2e:	d906      	bls.n	800fd3e <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fd36:	2b07      	cmp	r3, #7
 800fd38:	d801      	bhi.n	800fd3e <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
    }
 800fd40:	4618      	mov	r0, r3
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fd5e:	2b06      	cmp	r3, #6
 800fd60:	d003      	beq.n	800fd6a <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fd62:	f06f 0315 	mvn.w	r3, #21
 800fd66:	60fb      	str	r3, [r7, #12]
 800fd68:	e00f      	b.n	800fd8a <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d008      	beq.n	800fd86 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 fabb 	bl	80102f6 <uxStreamBufferGetSize>
 800fd80:	4603      	mov	r3, r0
 800fd82:	60fb      	str	r3, [r7, #12]
 800fd84:	e001      	b.n	800fd8a <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
    }
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800fd94:	b480      	push	{r7}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fda6:	d004      	beq.n	800fdb2 <xSocketValid+0x1e>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3714      	adds	r7, #20
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800fdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc4:	b09c      	sub	sp, #112	@ 0x70
 800fdc6:	af08      	add	r7, sp, #32
 800fdc8:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800fdca:	2320      	movs	r3, #32
 800fdcc:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800fdce:	f7f4 f913 	bl	8003ff8 <xTaskGetTickCount>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800fdde:	2300      	movs	r3, #0
 800fde0:	60fb      	str	r3, [r7, #12]
 800fde2:	f107 0310 	add.w	r3, r7, #16
 800fde6:	2200      	movs	r2, #0
 800fde8:	601a      	str	r2, [r3, #0]
 800fdea:	605a      	str	r2, [r3, #4]
 800fdec:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d11f      	bne.n	800fe38 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800fdfe:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800fe06:	f107 000c 	add.w	r0, r7, #12
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	4a3b      	ldr	r2, [pc, #236]	@ (800fefc <vTCPNetStat_TCPSocket+0x13c>)
 800fe10:	2110      	movs	r1, #16
 800fe12:	f012 fd6d 	bl	80228f0 <snprintf>
 800fe16:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800fe18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	da04      	bge.n	800fe28 <vTCPNetStat_TCPSocket+0x68>
 800fe1e:	f241 61df 	movw	r1, #5855	@ 0x16df
 800fe22:	4837      	ldr	r0, [pc, #220]	@ (800ff00 <vTCPNetStat_TCPSocket+0x140>)
 800fe24:	f7f1 fc18 	bl	8001658 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800fe28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe2a:	2b0f      	cmp	r3, #15
 800fe2c:	dd04      	ble.n	800fe38 <vTCPNetStat_TCPSocket+0x78>
 800fe2e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 800fe32:	4833      	ldr	r0, [pc, #204]	@ (800ff00 <vTCPNetStat_TCPSocket+0x140>)
 800fe34:	f7f1 fc10 	bl	8001658 <vAssertCalled>
        }

        if( age > 999999U )
 800fe38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe3a:	4a32      	ldr	r2, [pc, #200]	@ (800ff04 <vTCPNetStat_TCPSocket+0x144>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d901      	bls.n	800fe44 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 800fe40:	4b30      	ldr	r3, [pc, #192]	@ (800ff04 <vTCPNetStat_TCPSocket+0x144>)
 800fe42:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	7a1b      	ldrb	r3, [r3, #8]
 800fe48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <vTCPNetStat_TCPSocket+0x98>
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d009      	beq.n	800fe6a <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800fe56:	e011      	b.n	800fe7c <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe5c:	f107 001c 	add.w	r0, r7, #28
 800fe60:	4a29      	ldr	r2, [pc, #164]	@ (800ff08 <vTCPNetStat_TCPSocket+0x148>)
 800fe62:	2128      	movs	r1, #40	@ 0x28
 800fe64:	f012 fd44 	bl	80228f0 <snprintf>
                    break;
 800fe68:	e008      	b.n	800fe7c <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 800fe6e:	f107 001c 	add.w	r0, r7, #28
 800fe72:	4a26      	ldr	r2, [pc, #152]	@ (800ff0c <vTCPNetStat_TCPSocket+0x14c>)
 800fe74:	2128      	movs	r1, #40	@ 0x28
 800fe76:	f012 fd3b 	bl	80228f0 <snprintf>
                    break;
 800fe7a:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fe80:	4698      	mov	r8, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe88:	461c      	mov	r4, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	bf14      	ite	ne
 800fe94:	2301      	movne	r3, #1
 800fe96:	2300      	moveq	r3, #0
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	461d      	mov	r5, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	bf14      	ite	ne
 800fea6:	2301      	movne	r3, #1
 800fea8:	2300      	moveq	r3, #0
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	461e      	mov	r6, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800feb4:	4618      	mov	r0, r3
 800feb6:	f002 fbf5 	bl	80126a4 <FreeRTOS_GetTCPStateName>
 800feba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800febc:	4a11      	ldr	r2, [pc, #68]	@ (800ff04 <vTCPNetStat_TCPSocket+0x144>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	bf28      	it	cs
 800fec2:	4613      	movcs	r3, r2
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 800feca:	603a      	str	r2, [r7, #0]
 800fecc:	f107 011c 	add.w	r1, r7, #28
 800fed0:	f107 020c 	add.w	r2, r7, #12
 800fed4:	9206      	str	r2, [sp, #24]
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	9205      	str	r2, [sp, #20]
 800feda:	9304      	str	r3, [sp, #16]
 800fedc:	9003      	str	r0, [sp, #12]
 800fede:	9602      	str	r6, [sp, #8]
 800fee0:	9501      	str	r5, [sp, #4]
 800fee2:	9400      	str	r4, [sp, #0]
 800fee4:	460b      	mov	r3, r1
 800fee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fee8:	4641      	mov	r1, r8
 800feea:	4809      	ldr	r0, [pc, #36]	@ (800ff10 <vTCPNetStat_TCPSocket+0x150>)
 800feec:	f011 fcd4 	bl	8021898 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800fef0:	bf00      	nop
 800fef2:	3750      	adds	r7, #80	@ 0x50
 800fef4:	46bd      	mov	sp, r7
 800fef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fefa:	bf00      	nop
 800fefc:	08025754 	.word	0x08025754
 800ff00:	08025274 	.word	0x08025274
 800ff04:	000f423f 	.word	0x000f423f
 800ff08:	0802575c 	.word	0x0802575c
 800ff0c:	08025764 	.word	0x08025764
 800ff10:	0802576c 	.word	0x0802576c

0800ff14 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b08a      	sub	sp, #40	@ 0x28
 800ff18:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800ff1e:	f006 fe59 	bl	8016bd4 <uxGetMinimumFreeNetworkBuffers>
 800ff22:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800ff24:	f006 fe62 	bl	8016bec <uxGetNumberOfFreeNetworkBuffers>
 800ff28:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800ff2a:	4b26      	ldr	r3, [pc, #152]	@ (800ffc4 <vTCPNetStat+0xb0>)
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff32:	d003      	beq.n	800ff3c <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800ff34:	4824      	ldr	r0, [pc, #144]	@ (800ffc8 <vTCPNetStat+0xb4>)
 800ff36:	f011 fcaf 	bl	8021898 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800ff3a:	e03f      	b.n	800ffbc <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ff3c:	4b23      	ldr	r3, [pc, #140]	@ (800ffcc <vTCPNetStat+0xb8>)
 800ff3e:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800ff40:	4b23      	ldr	r3, [pc, #140]	@ (800ffd0 <vTCPNetStat+0xbc>)
 800ff42:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800ff44:	4823      	ldr	r0, [pc, #140]	@ (800ffd4 <vTCPNetStat+0xc0>)
 800ff46:	f011 fca7 	bl	8021898 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ff4a:	4b1e      	ldr	r3, [pc, #120]	@ (800ffc4 <vTCPNetStat+0xb0>)
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	61fb      	str	r3, [r7, #28]
 800ff50:	e00b      	b.n	800ff6a <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff ff31 	bl	800fdc0 <vTCPNetStat_TCPSocket>
                count++;
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	3301      	adds	r3, #1
 800ff62:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800ff6a:	69fa      	ldr	r2, [r7, #28]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d1ef      	bne.n	800ff52 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800ff72:	4b19      	ldr	r3, [pc, #100]	@ (800ffd8 <vTCPNetStat+0xc4>)
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	61fb      	str	r3, [r7, #28]
 800ff78:	e014      	b.n	800ffa4 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	021b      	lsls	r3, r3, #8
 800ff82:	b29a      	uxth	r2, r3
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	0a1b      	lsrs	r3, r3, #8
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	4619      	mov	r1, r3
 800ff92:	4812      	ldr	r0, [pc, #72]	@ (800ffdc <vTCPNetStat+0xc8>)
 800ff94:	f011 fc80 	bl	8021898 <lUDPLoggingPrintf>
                count++;
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ff9e:	69fb      	ldr	r3, [r7, #28]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800ffa4:	69fa      	ldr	r2, [r7, #28]
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d1e6      	bne.n	800ff7a <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 800ffac:	2340      	movs	r3, #64	@ 0x40
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	697a      	ldr	r2, [r7, #20]
 800ffb4:	69b9      	ldr	r1, [r7, #24]
 800ffb6:	480a      	ldr	r0, [pc, #40]	@ (800ffe0 <vTCPNetStat+0xcc>)
 800ffb8:	f011 fc6e 	bl	8021898 <lUDPLoggingPrintf>
    }
 800ffbc:	bf00      	nop
 800ffbe:	3720      	adds	r7, #32
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	20001440 	.word	0x20001440
 800ffc8:	08025798 	.word	0x08025798
 800ffcc:	20001448 	.word	0x20001448
 800ffd0:	20001434 	.word	0x20001434
 800ffd4:	080257b4 	.word	0x080257b4
 800ffd8:	2000142c 	.word	0x2000142c
 800ffdc:	080257fc 	.word	0x080257fc
 800ffe0:	0802580c 	.word	0x0802580c

0800ffe4 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 800ffec:	2300      	movs	r3, #0
 800ffee:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 800fff0:	2300      	movs	r3, #0
 800fff2:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fffa:	f003 0304 	and.w	r3, r3, #4
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	d109      	bne.n	8010018 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801000a:	f003 0302 	and.w	r3, r3, #2
 801000e:	b2db      	uxtb	r3, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	d101      	bne.n	8010018 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010014:	2301      	movs	r3, #1
 8010016:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801001c:	f003 0301 	and.w	r3, r3, #1
 8010020:	2b00      	cmp	r3, #0
 8010022:	d038      	beq.n	8010096 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801002a:	2b01      	cmp	r3, #1
 801002c:	d111      	bne.n	8010052 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010032:	2b00      	cmp	r3, #0
 8010034:	d02f      	beq.n	8010096 <vSocketSelectTCP+0xb2>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801003a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801003e:	f003 0302 	and.w	r3, r3, #2
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b00      	cmp	r3, #0
 8010046:	d026      	beq.n	8010096 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	f043 0301 	orr.w	r3, r3, #1
 801004e:	613b      	str	r3, [r7, #16]
 8010050:	e021      	b.n	8010096 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010058:	f003 0308 	and.w	r3, r3, #8
 801005c:	b2db      	uxtb	r3, r3
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00c      	beq.n	801007c <vSocketSelectTCP+0x98>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010068:	f003 0302 	and.w	r3, r3, #2
 801006c:	b2db      	uxtb	r3, r3
 801006e:	2b00      	cmp	r3, #0
 8010070:	d004      	beq.n	801007c <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	f043 0301 	orr.w	r3, r3, #1
 8010078:	613b      	str	r3, [r7, #16]
 801007a:	e00c      	b.n	8010096 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d009      	beq.n	8010096 <vSocketSelectTCP+0xb2>
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff fe62 	bl	800fd4c <FreeRTOS_rx_size>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	dd03      	ble.n	8010096 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	f043 0301 	orr.w	r3, r3, #1
 8010094:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801009a:	f003 0304 	and.w	r3, r3, #4
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d00d      	beq.n	80100be <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100a8:	2b08      	cmp	r3, #8
 80100aa:	d004      	beq.n	80100b6 <vSocketSelectTCP+0xd2>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d103      	bne.n	80100be <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	f043 0304 	orr.w	r3, r3, #4
 80100bc:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100c2:	f003 0302 	and.w	r3, r3, #2
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d034      	beq.n	8010134 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 80100ca:	2300      	movs	r3, #0
 80100cc:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d007      	beq.n	80100e4 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7ff fdcb 	bl	800fc70 <FreeRTOS_tx_space>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	dd01      	ble.n	80100e4 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 80100e0:	2301      	movs	r3, #1
 80100e2:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d11d      	bne.n	8010126 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80100f0:	f003 0308 	and.w	r3, r3, #8
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d015      	beq.n	8010126 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010100:	2b04      	cmp	r3, #4
 8010102:	d910      	bls.n	8010126 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801010a:	f003 0310 	and.w	r3, r3, #16
 801010e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010110:	2b00      	cmp	r3, #0
 8010112:	d108      	bne.n	8010126 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801011a:	f043 0310 	orr.w	r3, r3, #16
 801011e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 8010122:	2301      	movs	r3, #1
 8010124:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d003      	beq.n	8010134 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	f043 0302 	orr.w	r3, r3, #2
 8010132:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8010134:	693b      	ldr	r3, [r7, #16]
        }
 8010136:	4618      	mov	r0, r3
 8010138:	3718      	adds	r7, #24
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 8010140:	b580      	push	{r7, lr}
 8010142:	b08a      	sub	sp, #40	@ 0x28
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8010148:	2301      	movs	r3, #1
 801014a:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010150:	2300      	movs	r3, #0
 8010152:	627b      	str	r3, [r7, #36]	@ 0x24
 8010154:	e043      	b.n	80101de <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8010156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010158:	2b00      	cmp	r3, #0
 801015a:	d102      	bne.n	8010162 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 801015c:	4b34      	ldr	r3, [pc, #208]	@ (8010230 <vSocketSelect+0xf0>)
 801015e:	617b      	str	r3, [r7, #20]
 8010160:	e001      	b.n	8010166 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010162:	4b34      	ldr	r3, [pc, #208]	@ (8010234 <vSocketSelect+0xf4>)
 8010164:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	61bb      	str	r3, [r7, #24]
 801016c:	e030      	b.n	80101d0 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801016e:	69bb      	ldr	r3, [r7, #24]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	429a      	cmp	r2, r3
 801017c:	d124      	bne.n	80101c8 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 801017e:	2300      	movs	r3, #0
 8010180:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010188:	2b06      	cmp	r3, #6
 801018a:	d107      	bne.n	801019c <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 801018c:	68b8      	ldr	r0, [r7, #8]
 801018e:	f7ff ff29 	bl	800ffe4 <vSocketSelectTCP>
 8010192:	4602      	mov	r2, r0
 8010194:	6a3b      	ldr	r3, [r7, #32]
 8010196:	4313      	orrs	r3, r2
 8010198:	623b      	str	r3, [r7, #32]
 801019a:	e00d      	b.n	80101b8 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101a0:	f003 0301 	and.w	r3, r3, #1
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d007      	beq.n	80101b8 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d003      	beq.n	80101b8 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	f043 0301 	orr.w	r3, r3, #1
 80101b6:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	6a3a      	ldr	r2, [r7, #32]
 80101bc:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 80101be:	69fa      	ldr	r2, [r7, #28]
 80101c0:	6a3b      	ldr	r3, [r7, #32]
 80101c2:	4313      	orrs	r3, r2
 80101c4:	61fb      	str	r3, [r7, #28]
 80101c6:	e000      	b.n	80101ca <vSocketSelect+0x8a>
                    continue;
 80101c8:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 80101d0:	69ba      	ldr	r2, [r7, #24]
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d1ca      	bne.n	801016e <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 80101d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101da:	3301      	adds	r3, #1
 80101dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80101de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	ddb7      	ble.n	8010156 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2100      	movs	r1, #0
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7f2 fc17 	bl	8002a20 <xEventGroupClearBits>
 80101f2:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	43da      	mvns	r2, r3
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	4013      	ands	r3, r2
 80101fc:	f003 030f 	and.w	r3, r3, #15
 8010200:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d005      	beq.n	8010214 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	68f9      	ldr	r1, [r7, #12]
 801020e:	4618      	mov	r0, r3
 8010210:	f7f2 fc06 	bl	8002a20 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	f043 0310 	orr.w	r3, r3, #16
 801021e:	4619      	mov	r1, r3
 8010220:	4610      	mov	r0, r2
 8010222:	f7f2 fc2b 	bl	8002a7c <xEventGroupSetBits>
    }
 8010226:	bf00      	nop
 8010228:	3728      	adds	r7, #40	@ 0x28
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20001434 	.word	0x20001434
 8010234:	20001448 	.word	0x20001448

08010238 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8010238:	b480      	push	{r7}
 801023a:	b087      	sub	sp, #28
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 801024a:	693a      	ldr	r2, [r7, #16]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	441a      	add	r2, r3
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	3b01      	subs	r3, #1
 8010256:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	429a      	cmp	r2, r3
 801025e:	d303      	bcc.n	8010268 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8010268:	697b      	ldr	r3, [r7, #20]
}
 801026a:	4618      	mov	r0, r3
 801026c:	371c      	adds	r7, #28
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr

08010276 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8010276:	b480      	push	{r7}
 8010278:	b087      	sub	sp, #28
 801027a:	af00      	add	r7, sp, #0
 801027c:	60f8      	str	r0, [r7, #12]
 801027e:	60b9      	str	r1, [r7, #8]
 8010280:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	691b      	ldr	r3, [r3, #16]
 8010286:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 8010288:	693a      	ldr	r2, [r7, #16]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	441a      	add	r2, r3
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8010294:	697a      	ldr	r2, [r7, #20]
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	429a      	cmp	r2, r3
 801029a:	d303      	bcc.n	80102a4 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 801029c:	697a      	ldr	r2, [r7, #20]
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	1ad3      	subs	r3, r2, r3
 80102a2:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80102a4:	697b      	ldr	r3, [r7, #20]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	371c      	adds	r7, #28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 80102b2:	b580      	push	{r7, lr}
 80102b4:	b082      	sub	sp, #8
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6899      	ldr	r1, [r3, #8]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	461a      	mov	r2, r3
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f7ff ffb7 	bl	8010238 <uxStreamBufferSpace>
 80102ca:	4603      	mov	r3, r0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	68d9      	ldr	r1, [r3, #12]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	461a      	mov	r2, r3
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff ffa6 	bl	8010238 <uxStreamBufferSpace>
 80102ec:	4603      	mov	r3, r0
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3708      	adds	r7, #8
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}

080102f6 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 80102f6:	b580      	push	{r7, lr}
 80102f8:	b082      	sub	sp, #8
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6819      	ldr	r1, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	461a      	mov	r2, r3
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7ff ffb4 	bl	8010276 <uxStreamBufferDistance>
 801030e:	4603      	mov	r3, r0
}
 8010310:	4618      	mov	r0, r3
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6859      	ldr	r1, [r3, #4]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	461a      	mov	r2, r3
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7ff ffa3 	bl	8010276 <uxStreamBufferDistance>
 8010330:	4603      	mov	r3, r0
}
 8010332:	4618      	mov	r0, r3
 8010334:	3708      	adds	r7, #8
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 801033a:	b480      	push	{r7}
 801033c:	b083      	sub	sp, #12
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	605a      	str	r2, [r3, #4]
}
 801035a:	bf00      	nop
 801035c:	370c      	adds	r7, #12
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr

08010366 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8010366:	b580      	push	{r7, lr}
 8010368:	b086      	sub	sp, #24
 801036a:	af00      	add	r7, sp, #0
 801036c:	6078      	str	r0, [r7, #4]
 801036e:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7ff ffce 	bl	8010318 <uxStreamBufferMidSpace>
 801037c:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8010388:	693a      	ldr	r2, [r7, #16]
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	429a      	cmp	r2, r3
 801038e:	d901      	bls.n	8010394 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 8010394:	697a      	ldr	r2, [r7, #20]
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	4413      	add	r3, r2
 801039a:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 801039c:	697a      	ldr	r2, [r7, #20]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d303      	bcc.n	80103ac <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 80103a4:	697a      	ldr	r2, [r7, #20]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	605a      	str	r2, [r3, #4]
}
 80103b2:	bf00      	nop
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 80103ba:	b480      	push	{r7}
 80103bc:	b087      	sub	sp, #28
 80103be:	af00      	add	r7, sp, #0
 80103c0:	60f8      	str	r0, [r7, #12]
 80103c2:	60b9      	str	r1, [r7, #8]
 80103c4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80103c6:	2300      	movs	r3, #0
 80103c8:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 80103d0:	68ba      	ldr	r2, [r7, #8]
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	1ad2      	subs	r2, r2, r3
 80103d6:	6879      	ldr	r1, [r7, #4]
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	1acb      	subs	r3, r1, r3
 80103dc:	429a      	cmp	r2, r3
 80103de:	d801      	bhi.n	80103e4 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 80103e0:	2301      	movs	r3, #1
 80103e2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80103e4:	697b      	ldr	r3, [r7, #20]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	371c      	adds	r7, #28
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr

080103f2 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b084      	sub	sp, #16
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
 80103fa:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7ff ff77 	bl	80102f6 <uxStreamBufferGetSize>
 8010408:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f103 0214 	add.w	r2, r3, #20
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	441a      	add	r2, r3
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	691a      	ldr	r2, [r3, #16]
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	4619      	mov	r1, r3
 8010422:	68b8      	ldr	r0, [r7, #8]
 8010424:	f7f9 fede 	bl	800a1e4 <FreeRTOS_min_size_t>
 8010428:	4603      	mov	r3, r0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b08a      	sub	sp, #40	@ 0x28
 8010436:	af00      	add	r7, sp, #0
 8010438:	60f8      	str	r0, [r7, #12]
 801043a:	60b9      	str	r1, [r7, #8]
 801043c:	607a      	str	r2, [r7, #4]
 801043e:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 8010440:	68f8      	ldr	r0, [r7, #12]
 8010442:	f7ff ff36 	bl	80102b2 <uxStreamBufferGetSpace>
 8010446:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8010448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	429a      	cmp	r2, r3
 801044e:	d904      	bls.n	801045a <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 8010450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	1ad3      	subs	r3, r2, r3
 8010456:	627b      	str	r3, [r7, #36]	@ 0x24
 8010458:	e001      	b.n	801045e <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 801045a:	2300      	movs	r3, #0
 801045c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801045e:	6839      	ldr	r1, [r7, #0]
 8010460:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010462:	f7f9 febf 	bl	800a1e4 <FreeRTOS_min_size_t>
 8010466:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d05c      	beq.n	8010528 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00b      	beq.n	8010498 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 8010480:	6a3a      	ldr	r2, [r7, #32]
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	4413      	add	r3, r2
 8010486:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8010488:	6a3a      	ldr	r2, [r7, #32]
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	429a      	cmp	r2, r3
 801048e:	d303      	bcc.n	8010498 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 8010490:	6a3a      	ldr	r2, [r7, #32]
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	1ad3      	subs	r3, r2, r3
 8010496:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d021      	beq.n	80104e2 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 801049e:	69ba      	ldr	r2, [r7, #24]
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	69f9      	ldr	r1, [r7, #28]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7f9 fe9c 	bl	800a1e4 <FreeRTOS_min_size_t>
 80104ac:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 80104ae:	6a3b      	ldr	r3, [r7, #32]
 80104b0:	3310      	adds	r3, #16
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	4413      	add	r3, r2
 80104b6:	3304      	adds	r3, #4
 80104b8:	697a      	ldr	r2, [r7, #20]
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	4618      	mov	r0, r3
 80104be:	f011 fc07 	bl	8021cd0 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 80104c2:	69fa      	ldr	r2, [r7, #28]
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d90b      	bls.n	80104e2 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f103 0014 	add.w	r0, r3, #20
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	18d1      	adds	r1, r2, r3
 80104d6:	69fa      	ldr	r2, [r7, #28]
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	461a      	mov	r2, r3
 80104de:	f011 fbf7 	bl	8021cd0 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 80104e2:	f7f3 fc77 	bl	8003dd4 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10e      	bne.n	801050a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 80104ec:	6a3a      	ldr	r2, [r7, #32]
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	4413      	add	r3, r2
 80104f2:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 80104f4:	6a3a      	ldr	r2, [r7, #32]
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d303      	bcc.n	8010504 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 80104fc:	6a3a      	ldr	r2, [r7, #32]
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6a3a      	ldr	r2, [r7, #32]
 8010508:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	6a3a      	ldr	r2, [r7, #32]
 8010510:	4619      	mov	r1, r3
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	f7ff ff51 	bl	80103ba <xStreamBufferLessThenEqual>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d002      	beq.n	8010524 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	6a3a      	ldr	r2, [r7, #32]
 8010522:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8010524:	f7f3 fc64 	bl	8003df0 <xTaskResumeAll>
    }

    return uxCount;
 8010528:	69fb      	ldr	r3, [r7, #28]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3728      	adds	r7, #40	@ 0x28
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b08a      	sub	sp, #40	@ 0x28
 8010536:	af00      	add	r7, sp, #0
 8010538:	60f8      	str	r0, [r7, #12]
 801053a:	60b9      	str	r1, [r7, #8]
 801053c:	607a      	str	r2, [r7, #4]
 801053e:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f7ff fed8 	bl	80102f6 <uxStreamBufferGetSize>
 8010546:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8010548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	429a      	cmp	r2, r3
 801054e:	d904      	bls.n	801055a <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 8010550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	627b      	str	r3, [r7, #36]	@ 0x24
 8010558:	e001      	b.n	801055e <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 801055a:	2300      	movs	r3, #0
 801055c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010562:	f7f9 fe3f 	bl	800a1e4 <FreeRTOS_min_size_t>
 8010566:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d04e      	beq.n	801060c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	691b      	ldr	r3, [r3, #16]
 8010572:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00b      	beq.n	8010598 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 8010580:	6a3a      	ldr	r2, [r7, #32]
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	4413      	add	r3, r2
 8010586:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010588:	6a3a      	ldr	r2, [r7, #32]
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	429a      	cmp	r2, r3
 801058e:	d303      	bcc.n	8010598 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 8010590:	6a3a      	ldr	r2, [r7, #32]
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d021      	beq.n	80105e2 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 801059e:	69ba      	ldr	r2, [r7, #24]
 80105a0:	6a3b      	ldr	r3, [r7, #32]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	69f9      	ldr	r1, [r7, #28]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7f9 fe1c 	bl	800a1e4 <FreeRTOS_min_size_t>
 80105ac:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 80105ae:	6a3b      	ldr	r3, [r7, #32]
 80105b0:	3310      	adds	r3, #16
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	4413      	add	r3, r2
 80105b6:	3304      	adds	r3, #4
 80105b8:	697a      	ldr	r2, [r7, #20]
 80105ba:	4619      	mov	r1, r3
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f011 fb87 	bl	8021cd0 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 80105c2:	69fa      	ldr	r2, [r7, #28]
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d90b      	bls.n	80105e2 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	18d0      	adds	r0, r2, r3
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f103 0114 	add.w	r1, r3, #20
 80105d6:	69fa      	ldr	r2, [r7, #28]
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	461a      	mov	r2, r3
 80105de:	f011 fb77 	bl	8021cd0 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 80105e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d111      	bne.n	801060c <uxStreamBufferGet+0xda>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d10e      	bne.n	801060c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 80105ee:	6a3a      	ldr	r2, [r7, #32]
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	4413      	add	r3, r2
 80105f4:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80105f6:	6a3a      	ldr	r2, [r7, #32]
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d303      	bcc.n	8010606 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 80105fe:	6a3a      	ldr	r2, [r7, #32]
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	1ad3      	subs	r3, r2, r3
 8010604:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6a3a      	ldr	r2, [r7, #32]
 801060a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 801060c:	69fb      	ldr	r3, [r7, #28]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3728      	adds	r7, #40	@ 0x28
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
	...

08010618 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 8010620:	4b0a      	ldr	r3, [pc, #40]	@ (801064c <vSocketCloseNextTime+0x34>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d009      	beq.n	801063c <vSocketCloseNextTime+0x24>
 8010628:	4b08      	ldr	r3, [pc, #32]	@ (801064c <vSocketCloseNextTime+0x34>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	429a      	cmp	r2, r3
 8010630:	d004      	beq.n	801063c <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 8010632:	4b06      	ldr	r3, [pc, #24]	@ (801064c <vSocketCloseNextTime+0x34>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4618      	mov	r0, r3
 8010638:	f7fd fd98 	bl	800e16c <vSocketClose>
        }

        xSocketToClose = pxSocket;
 801063c:	4a03      	ldr	r2, [pc, #12]	@ (801064c <vSocketCloseNextTime+0x34>)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6013      	str	r3, [r2, #0]
    }
 8010642:	bf00      	nop
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	20001458 	.word	0x20001458

08010650 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8010658:	4b0c      	ldr	r3, [pc, #48]	@ (801068c <vSocketListenNextTime+0x3c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00e      	beq.n	801067e <vSocketListenNextTime+0x2e>
 8010660:	4b0a      	ldr	r3, [pc, #40]	@ (801068c <vSocketListenNextTime+0x3c>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	429a      	cmp	r2, r3
 8010668:	d009      	beq.n	801067e <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 801066a:	4b08      	ldr	r3, [pc, #32]	@ (801068c <vSocketListenNextTime+0x3c>)
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	4b07      	ldr	r3, [pc, #28]	@ (801068c <vSocketListenNextTime+0x3c>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010676:	4619      	mov	r1, r3
 8010678:	4610      	mov	r0, r2
 801067a:	f7fe fff3 	bl	800f664 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 801067e:	4a03      	ldr	r2, [pc, #12]	@ (801068c <vSocketListenNextTime+0x3c>)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6013      	str	r3, [r2, #0]
    }
 8010684:	bf00      	nop
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	2000145c 	.word	0x2000145c

08010690 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	b086      	sub	sp, #24
 8010696:	af02      	add	r7, sp, #8
 8010698:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 801069a:	2300      	movs	r3, #0
 801069c:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 801069e:	2300      	movs	r3, #0
 80106a0:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80106a8:	2b04      	cmp	r3, #4
 80106aa:	d907      	bls.n	80106bc <xTCPSocketCheck+0x2c>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d002      	beq.n	80106bc <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f003 f834 	bl	8013724 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d05f      	beq.n	8010786 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80106cc:	f003 0320 	and.w	r3, r3, #32
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d148      	bne.n	8010768 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d03b      	beq.n	8010758 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 80106e0:	4b37      	ldr	r3, [pc, #220]	@ (80107c0 <xTCPSocketCheck+0x130>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	dd25      	ble.n	8010734 <xTCPSocketCheck+0xa4>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80106ec:	2b17      	cmp	r3, #23
 80106ee:	d021      	beq.n	8010734 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80106f4:	461e      	mov	r6, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80106fc:	4698      	mov	r8, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801070a:	1ad5      	subs	r5, r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010718:	1ad4      	subs	r4, r2, r3
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7f9 f81e 	bl	800975c <uxIPHeaderSizeSocket>
 8010720:	4603      	mov	r3, r0
 8010722:	3314      	adds	r3, #20
 8010724:	9301      	str	r3, [sp, #4]
 8010726:	9400      	str	r4, [sp, #0]
 8010728:	462b      	mov	r3, r5
 801072a:	4642      	mov	r2, r8
 801072c:	4631      	mov	r1, r6
 801072e:	4825      	ldr	r0, [pc, #148]	@ (80107c4 <xTCPSocketCheck+0x134>)
 8010730:	f011 f8b2 	bl	8021898 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7f9 f80e 	bl	800975c <uxIPHeaderSizeSocket>
 8010740:	4603      	mov	r3, r0
 8010742:	f103 0214 	add.w	r2, r3, #20
 8010746:	2301      	movs	r3, #1
 8010748:	4621      	mov	r1, r4
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f002 fac8 	bl	8012ce0 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2200      	movs	r2, #0
 8010754:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 faa1 	bl	8010ca0 <prvTCPNextTimeout>
 801075e:	4603      	mov	r3, r0
 8010760:	2b01      	cmp	r3, #1
 8010762:	d901      	bls.n	8010768 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8010764:	2301      	movs	r3, #1
 8010766:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801076e:	2b00      	cmp	r3, #0
 8010770:	d009      	beq.n	8010786 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010778:	4618      	mov	r0, r3
 801077a:	f006 f9e5 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d113      	bne.n	80107b4 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010792:	2b04      	cmp	r3, #4
 8010794:	d804      	bhi.n	80107a0 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801079c:	2b02      	cmp	r3, #2
 801079e:	d102      	bne.n	80107a6 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f002 f9ff 	bl	8012ba4 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 fa7a 	bl	8010ca0 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f001 f973 	bl	8011a98 <prvTCPStatusAgeCheck>
 80107b2:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 80107b4:	68fb      	ldr	r3, [r7, #12]
    }
 80107b6:	4618      	mov	r0, r3
 80107b8:	3710      	adds	r7, #16
 80107ba:	46bd      	mov	sp, r7
 80107bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c0:	20001484 	.word	0x20001484
 80107c4:	08025844 	.word	0x08025844

080107c8 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 80107d0:	f7f3 fc12 	bl	8003ff8 <xTaskGetTickCount>
 80107d4:	4602      	mov	r2, r0
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80107e2:	f36f 0382 	bfc	r3, #2, #1
 80107e6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80107f0:	f36f 0341 	bfc	r3, #1, #1
 80107f4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010800:	f7f3 fbfa 	bl	8003ff8 <xTaskGetTickCount>
 8010804:	4602      	mov	r2, r0
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 801080c:	bf00      	nop
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010814:	b480      	push	{r7}
 8010816:	b087      	sub	sp, #28
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 801081c:	2300      	movs	r3, #0
 801081e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010820:	4b15      	ldr	r3, [pc, #84]	@ (8010878 <vTCPRemoveTCPChild+0x64>)
 8010822:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010824:	4b15      	ldr	r3, [pc, #84]	@ (801087c <vTCPRemoveTCPChild+0x68>)
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 801082a:	e01a      	b.n	8010862 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	429a      	cmp	r2, r3
 801083e:	d010      	beq.n	8010862 <vTCPRemoveTCPChild+0x4e>
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010848:	429a      	cmp	r2, r3
 801084a:	d10a      	bne.n	8010862 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	429a      	cmp	r2, r3
 8010854:	d105      	bne.n	8010862 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	2200      	movs	r2, #0
 801085a:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 801085c:	2301      	movs	r3, #1
 801085e:	617b      	str	r3, [r7, #20]
                    break;
 8010860:	e003      	b.n	801086a <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 8010862:	693a      	ldr	r2, [r7, #16]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	429a      	cmp	r2, r3
 8010868:	d1e0      	bne.n	801082c <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 801086a:	697b      	ldr	r3, [r7, #20]
    }
 801086c:	4618      	mov	r0, r3
 801086e:	371c      	adds	r7, #28
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr
 8010878:	20001448 	.word	0x20001448
 801087c:	20001440 	.word	0x20001440

08010880 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8010880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010882:	b097      	sub	sp, #92	@ 0x5c
 8010884:	af02      	add	r7, sp, #8
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	460b      	mov	r3, r1
 801088a:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010896:	2b04      	cmp	r3, #4
 8010898:	d906      	bls.n	80108a8 <vTCPStateChange+0x28>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80108a0:	2b08      	cmp	r3, #8
 80108a2:	d001      	beq.n	80108a8 <vTCPStateChange+0x28>
 80108a4:	2301      	movs	r3, #1
 80108a6:	e000      	b.n	80108aa <vTCPStateChange+0x2a>
 80108a8:	2300      	movs	r3, #0
 80108aa:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 80108ac:	78fb      	ldrb	r3, [r7, #3]
 80108ae:	2b04      	cmp	r3, #4
 80108b0:	d904      	bls.n	80108bc <vTCPStateChange+0x3c>
 80108b2:	78fb      	ldrb	r3, [r7, #3]
 80108b4:	2b08      	cmp	r3, #8
 80108b6:	d001      	beq.n	80108bc <vTCPStateChange+0x3c>
 80108b8:	2301      	movs	r3, #1
 80108ba:	e000      	b.n	80108be <vTCPStateChange+0x3e>
 80108bc:	2300      	movs	r3, #0
 80108be:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80108c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 80108ca:	2300      	movs	r3, #0
 80108cc:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 80108ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d007      	beq.n	80108e6 <vTCPStateChange+0x66>
 80108d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108da:	2b03      	cmp	r3, #3
 80108dc:	d003      	beq.n	80108e6 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 80108de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108e2:	2b04      	cmp	r3, #4
 80108e4:	d114      	bne.n	8010910 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 80108e6:	78fb      	ldrb	r3, [r7, #3]
 80108e8:	2b08      	cmp	r3, #8
 80108ea:	d111      	bne.n	8010910 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 80108ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108f0:	4618      	mov	r0, r3
 80108f2:	f001 fed7 	bl	80126a4 <FreeRTOS_GetTCPStateName>
 80108f6:	4604      	mov	r4, r0
 80108f8:	78fb      	ldrb	r3, [r7, #3]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f001 fed2 	bl	80126a4 <FreeRTOS_GetTCPStateName>
 8010900:	4603      	mov	r3, r0
 8010902:	461a      	mov	r2, r3
 8010904:	4621      	mov	r1, r4
 8010906:	4875      	ldr	r0, [pc, #468]	@ (8010adc <vTCPStateChange+0x25c>)
 8010908:	f010 ffc6 	bl	8021898 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 801090c:	2301      	movs	r3, #1
 801090e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010914:	429a      	cmp	r2, r3
 8010916:	f000 809f 	beq.w	8010a58 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010920:	f003 0304 	and.w	r3, r3, #4
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	d012      	beq.n	8010950 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010930:	f003 0308 	and.w	r3, r3, #8
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	d10a      	bne.n	8010950 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801093e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 8010940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010942:	2b00      	cmp	r3, #0
 8010944:	d104      	bne.n	8010950 <vTCPStateChange+0xd0>
 8010946:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 801094a:	4865      	ldr	r0, [pc, #404]	@ (8010ae0 <vTCPStateChange+0x260>)
 801094c:	f7f0 fe84 	bl	8001658 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8010950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010952:	2b00      	cmp	r3, #0
 8010954:	d057      	beq.n	8010a06 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801095c:	f003 0304 	and.w	r3, r3, #4
 8010960:	b2db      	uxtb	r3, r3
 8010962:	2b00      	cmp	r3, #0
 8010964:	d03c      	beq.n	80109e0 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8010966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010968:	2b00      	cmp	r3, #0
 801096a:	d027      	beq.n	80109bc <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 801096c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801096e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010970:	2b00      	cmp	r3, #0
 8010972:	d102      	bne.n	801097a <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8010974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 801097a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f043 0204 	orr.w	r2, r3, #4
 8010982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010984:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8010986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801098a:	f003 0301 	and.w	r3, r3, #1
 801098e:	2b00      	cmp	r3, #0
 8010990:	d005      	beq.n	801099e <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8010992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801099a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801099c:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 801099e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d009      	beq.n	80109bc <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 80109a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109aa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80109ae:	f003 0308 	and.w	r3, r3, #8
 80109b2:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d101      	bne.n	80109bc <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 80109b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109ba:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80109c8:	f36f 0382 	bfc	r3, #2, #1
 80109cc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80109d6:	f043 0302 	orr.w	r3, r3, #2
 80109da:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 80109de:	e024      	b.n	8010a2a <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f043 0208 	orr.w	r2, r3, #8
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109f0:	f003 0302 	and.w	r3, r3, #2
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d018      	beq.n	8010a2a <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	601a      	str	r2, [r3, #0]
 8010a04:	e011      	b.n	8010a2a <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f043 0220 	orr.w	r2, r3, #32
 8010a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a10:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a16:	f003 0304 	and.w	r3, r3, #4
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d005      	beq.n	8010a2a <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 8010a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a28:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d004      	beq.n	8010a3e <vTCPStateChange+0x1be>
 8010a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010a44:	4618      	mov	r0, r3
 8010a46:	f000 ffff 	bl	8011a48 <prvTCPSocketIsActive>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d103      	bne.n	8010a58 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	78fa      	ldrb	r2, [r7, #3]
 8010a5c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 8010a60:	78fb      	ldrb	r3, [r7, #3]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d003      	beq.n	8010a6e <vTCPStateChange+0x1ee>
 8010a66:	78fb      	ldrb	r3, [r7, #3]
 8010a68:	2b08      	cmp	r3, #8
 8010a6a:	f040 8084 	bne.w	8010b76 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 8010a72:	2300      	movs	r3, #0
 8010a74:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8010a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d106      	bne.n	8010a8c <vTCPStateChange+0x20c>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d002      	beq.n	8010a8c <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d006      	beq.n	8010aa2 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8010a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d101      	bne.n	8010aa2 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010aa8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	4619      	mov	r1, r3
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ab6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	461a      	mov	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ac4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	4806      	ldr	r0, [pc, #24]	@ (8010ae4 <vTCPStateChange+0x264>)
 8010acc:	f010 fee4 	bl	8021898 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8010ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d008      	beq.n	8010ae8 <vTCPStateChange+0x268>
 8010ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ada:	e006      	b.n	8010aea <vTCPStateChange+0x26a>
 8010adc:	08025870 	.word	0x08025870
 8010ae0:	08025884 	.word	0x08025884
 8010ae4:	080258b4 	.word	0x080258b4
 8010ae8:	2300      	movs	r3, #0
 8010aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010aec:	9200      	str	r2, [sp, #0]
 8010aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010af0:	6879      	ldr	r1, [r7, #4]
 8010af2:	4865      	ldr	r0, [pc, #404]	@ (8010c88 <vTCPStateChange+0x408>)
 8010af4:	f010 fed0 	bl	8021898 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8010af8:	f7f3 f96c 	bl	8003dd4 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010b02:	f003 0304 	and.w	r3, r3, #4
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d107      	bne.n	8010b1c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010b12:	f003 0302 	and.w	r3, r3, #2
 8010b16:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d026      	beq.n	8010b6a <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010b22:	f003 0308 	and.w	r3, r3, #8
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d11e      	bne.n	8010b6a <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff fe71 	bl	8010814 <vTCPRemoveTCPChild>
 8010b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010b3a:	f36f 0382 	bfc	r3, #2, #1
 8010b3e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010b48:	f36f 0341 	bfc	r3, #1, #1
 8010b4c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8010b50:	f7f9 f978 	bl	8009e44 <xIsCallingFromIPTask>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d104      	bne.n	8010b64 <vTCPStateChange+0x2e4>
 8010b5a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8010b5e:	484b      	ldr	r0, [pc, #300]	@ (8010c8c <vTCPStateChange+0x40c>)
 8010b60:	f7f0 fd7a 	bl	8001658 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7ff fd57 	bl	8010618 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8010b6a:	f7f3 f941 	bl	8003df0 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8010b6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010b70:	4847      	ldr	r0, [pc, #284]	@ (8010c90 <vTCPStateChange+0x410>)
 8010b72:	f010 fe91 	bl	8021898 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8010b76:	78fb      	ldrb	r3, [r7, #3]
 8010b78:	2b08      	cmp	r3, #8
 8010b7a:	d11b      	bne.n	8010bb4 <vTCPStateChange+0x334>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010b82:	f003 0308 	and.w	r3, r3, #8
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d013      	beq.n	8010bb4 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8010b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010b90:	3b03      	subs	r3, #3
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	d80d      	bhi.n	8010bb2 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	483d      	ldr	r0, [pc, #244]	@ (8010c94 <vTCPStateChange+0x414>)
 8010b9e:	f010 fe7b 	bl	8021898 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f7ff fd50 	bl	8010650 <vSocketListenNextTime>
                    break;
 8010bb0:	e000      	b.n	8010bb4 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8010bb2:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7ff fe07 	bl	80107c8 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8010bba:	4b37      	ldr	r3, [pc, #220]	@ (8010c98 <vTCPStateChange+0x418>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	db4f      	blt.n	8010c62 <vTCPStateChange+0x3e2>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010bc6:	2b17      	cmp	r3, #23
 8010bc8:	d04b      	beq.n	8010c62 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	7a1b      	ldrb	r3, [r3, #8]
 8010bce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <vTCPStateChange+0x35e>
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d01d      	beq.n	8010c18 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8010bdc:	e026      	b.n	8010c2c <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010be2:	061a      	lsls	r2, r3, #24
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010be8:	021b      	lsls	r3, r3, #8
 8010bea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010bee:	431a      	orrs	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010bf4:	0a1b      	lsrs	r3, r3, #8
 8010bf6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010bfa:	431a      	orrs	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c00:	0e1b      	lsrs	r3, r3, #24
 8010c02:	4313      	orrs	r3, r2
 8010c04:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8010c06:	f107 0208 	add.w	r2, r7, #8
 8010c0a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010c0e:	2328      	movs	r3, #40	@ 0x28
 8010c10:	2002      	movs	r0, #2
 8010c12:	f7fe f827 	bl	800ec64 <FreeRTOS_inet_ntop>
                           break;
 8010c16:	e009      	b.n	8010c2c <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8010c1e:	f107 0208 	add.w	r2, r7, #8
 8010c22:	2328      	movs	r3, #40	@ 0x28
 8010c24:	200a      	movs	r0, #10
 8010c26:	f7fe f81d 	bl	800ec64 <FreeRTOS_inet_ntop>
                            break;
 8010c2a:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c30:	461d      	mov	r5, r3
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010c38:	461e      	mov	r6, r3
 8010c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f001 fd30 	bl	80126a4 <FreeRTOS_GetTCPStateName>
 8010c44:	4604      	mov	r4, r0
 8010c46:	78fb      	ldrb	r3, [r7, #3]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f001 fd2b 	bl	80126a4 <FreeRTOS_GetTCPStateName>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	f107 0208 	add.w	r2, r7, #8
 8010c54:	9301      	str	r3, [sp, #4]
 8010c56:	9400      	str	r4, [sp, #0]
 8010c58:	4633      	mov	r3, r6
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	480f      	ldr	r0, [pc, #60]	@ (8010c9c <vTCPStateChange+0x41c>)
 8010c5e:	f010 fe1b 	bl	8021898 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8010c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d005      	beq.n	8010c74 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8010c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c6a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010c6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010c70:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010c72:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8010c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d002      	beq.n	8010c80 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8010c7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010c7c:	f7fe f871 	bl	800ed62 <vSocketWakeUpUser>
        }
    }
 8010c80:	bf00      	nop
 8010c82:	3754      	adds	r7, #84	@ 0x54
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c88:	080258f0 	.word	0x080258f0
 8010c8c:	08025884 	.word	0x08025884
 8010c90:	08025924 	.word	0x08025924
 8010c94:	08025948 	.word	0x08025948
 8010c98:	20001484 	.word	0x20001484
 8010c9c:	0802596c 	.word	0x0802596c

08010ca0 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8010ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ca4:	b098      	sub	sp, #96	@ 0x60
 8010ca6:	af02      	add	r7, sp, #8
 8010ca8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010caa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010cae:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8010cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cb2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010cb6:	2b02      	cmp	r3, #2
 8010cb8:	f040 80cc 	bne.w	8010e54 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cbe:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010cc2:	f003 0308 	and.w	r3, r3, #8
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d01a      	beq.n	8010d02 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8010ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cce:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d811      	bhi.n	8010cfa <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8010cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cd8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ce4:	e010      	b.n	8010d08 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8010ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ce8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010cec:	3b01      	subs	r3, #1
 8010cee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8010cf8:	e006      	b.n	8010d08 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8010cfa:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8010cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d00:	e002      	b.n	8010d08 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8010d02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010d06:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8010d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d0a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d12:	4618      	mov	r0, r3
 8010d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d16:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	4613      	mov	r3, r2
 8010d22:	4602      	mov	r2, r0
 8010d24:	48a4      	ldr	r0, [pc, #656]	@ (8010fb8 <prvTCPNextTimeout+0x318>)
 8010d26:	f010 fdb7 	bl	8021898 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8010d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d30:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d32:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010d36:	4622      	mov	r2, r4
 8010d38:	462b      	mov	r3, r5
 8010d3a:	f04f 0000 	mov.w	r0, #0
 8010d3e:	f04f 0100 	mov.w	r1, #0
 8010d42:	0159      	lsls	r1, r3, #5
 8010d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010d48:	0150      	lsls	r0, r2, #5
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	4621      	mov	r1, r4
 8010d50:	1a51      	subs	r1, r2, r1
 8010d52:	6239      	str	r1, [r7, #32]
 8010d54:	4629      	mov	r1, r5
 8010d56:	eb63 0301 	sbc.w	r3, r3, r1
 8010d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d5c:	f04f 0200 	mov.w	r2, #0
 8010d60:	f04f 0300 	mov.w	r3, #0
 8010d64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010d68:	4649      	mov	r1, r9
 8010d6a:	008b      	lsls	r3, r1, #2
 8010d6c:	4641      	mov	r1, r8
 8010d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010d72:	4641      	mov	r1, r8
 8010d74:	008a      	lsls	r2, r1, #2
 8010d76:	4610      	mov	r0, r2
 8010d78:	4619      	mov	r1, r3
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	189b      	adds	r3, r3, r2
 8010d80:	61bb      	str	r3, [r7, #24]
 8010d82:	462b      	mov	r3, r5
 8010d84:	460a      	mov	r2, r1
 8010d86:	eb42 0303 	adc.w	r3, r2, r3
 8010d8a:	61fb      	str	r3, [r7, #28]
 8010d8c:	f04f 0200 	mov.w	r2, #0
 8010d90:	f04f 0300 	mov.w	r3, #0
 8010d94:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8010d98:	4629      	mov	r1, r5
 8010d9a:	00cb      	lsls	r3, r1, #3
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010da2:	4621      	mov	r1, r4
 8010da4:	00ca      	lsls	r2, r1, #3
 8010da6:	4610      	mov	r0, r2
 8010da8:	4619      	mov	r1, r3
 8010daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010dae:	f04f 0300 	mov.w	r3, #0
 8010db2:	f7ef fafd 	bl	80003b0 <__aeabi_uldivmod>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	4613      	mov	r3, r2
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d044      	beq.n	8010e4a <prvTCPNextTimeout+0x1aa>
 8010dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010dc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010dc8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8010dcc:	4622      	mov	r2, r4
 8010dce:	462b      	mov	r3, r5
 8010dd0:	f04f 0000 	mov.w	r0, #0
 8010dd4:	f04f 0100 	mov.w	r1, #0
 8010dd8:	0159      	lsls	r1, r3, #5
 8010dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010dde:	0150      	lsls	r0, r2, #5
 8010de0:	4602      	mov	r2, r0
 8010de2:	460b      	mov	r3, r1
 8010de4:	4621      	mov	r1, r4
 8010de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8010dea:	4629      	mov	r1, r5
 8010dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8010df0:	f04f 0200 	mov.w	r2, #0
 8010df4:	f04f 0300 	mov.w	r3, #0
 8010df8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010dfc:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8010e00:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010e04:	4692      	mov	sl, r2
 8010e06:	469b      	mov	fp, r3
 8010e08:	4623      	mov	r3, r4
 8010e0a:	eb1a 0303 	adds.w	r3, sl, r3
 8010e0e:	613b      	str	r3, [r7, #16]
 8010e10:	462b      	mov	r3, r5
 8010e12:	eb4b 0303 	adc.w	r3, fp, r3
 8010e16:	617b      	str	r3, [r7, #20]
 8010e18:	f04f 0200 	mov.w	r2, #0
 8010e1c:	f04f 0300 	mov.w	r3, #0
 8010e20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010e24:	4629      	mov	r1, r5
 8010e26:	00cb      	lsls	r3, r1, #3
 8010e28:	4621      	mov	r1, r4
 8010e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010e2e:	4621      	mov	r1, r4
 8010e30:	00ca      	lsls	r2, r1, #3
 8010e32:	4610      	mov	r0, r2
 8010e34:	4619      	mov	r1, r3
 8010e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010e3a:	f04f 0300 	mov.w	r3, #0
 8010e3e:	f7ef fab7 	bl	80003b0 <__aeabi_uldivmod>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	b292      	uxth	r2, r2
 8010e48:	e000      	b.n	8010e4c <prvTCPNextTimeout+0x1ac>
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e4e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8010e52:	e0a8      	b.n	8010fa6 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8010e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e56:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f040 80a3 	bne.w	8010fa6 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8010e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e62:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8010e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e68:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8010e6c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010e70:	461a      	mov	r2, r3
 8010e72:	f004 fcbd 	bl	80157f0 <xTCPWindowTxHasData>
 8010e76:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8010e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d108      	bne.n	8010e90 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8010e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8010e84:	2301      	movs	r3, #1
 8010e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e88:	e002      	b.n	8010e90 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010e8a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010e8e:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8010e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e92:	2200      	movs	r2, #0
 8010e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e96:	637a      	str	r2, [r7, #52]	@ 0x34
 8010e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010e9c:	4652      	mov	r2, sl
 8010e9e:	465b      	mov	r3, fp
 8010ea0:	f04f 0000 	mov.w	r0, #0
 8010ea4:	f04f 0100 	mov.w	r1, #0
 8010ea8:	0159      	lsls	r1, r3, #5
 8010eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010eae:	0150      	lsls	r0, r2, #5
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4651      	mov	r1, sl
 8010eb6:	ebb2 0801 	subs.w	r8, r2, r1
 8010eba:	4659      	mov	r1, fp
 8010ebc:	eb63 0901 	sbc.w	r9, r3, r1
 8010ec0:	f04f 0200 	mov.w	r2, #0
 8010ec4:	f04f 0300 	mov.w	r3, #0
 8010ec8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8010ecc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8010ed0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8010ed4:	4690      	mov	r8, r2
 8010ed6:	4699      	mov	r9, r3
 8010ed8:	4653      	mov	r3, sl
 8010eda:	eb18 0303 	adds.w	r3, r8, r3
 8010ede:	60bb      	str	r3, [r7, #8]
 8010ee0:	465b      	mov	r3, fp
 8010ee2:	eb49 0303 	adc.w	r3, r9, r3
 8010ee6:	60fb      	str	r3, [r7, #12]
 8010ee8:	f04f 0200 	mov.w	r2, #0
 8010eec:	f04f 0300 	mov.w	r3, #0
 8010ef0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8010ef4:	4649      	mov	r1, r9
 8010ef6:	00cb      	lsls	r3, r1, #3
 8010ef8:	4641      	mov	r1, r8
 8010efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010efe:	4641      	mov	r1, r8
 8010f00:	00ca      	lsls	r2, r1, #3
 8010f02:	4610      	mov	r0, r2
 8010f04:	4619      	mov	r1, r3
 8010f06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010f0a:	f04f 0300 	mov.w	r3, #0
 8010f0e:	f7ef fa4f 	bl	80003b0 <__aeabi_uldivmod>
 8010f12:	4602      	mov	r2, r0
 8010f14:	460b      	mov	r3, r1
 8010f16:	4613      	mov	r3, r2
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d040      	beq.n	8010f9e <prvTCPNextTimeout+0x2fe>
 8010f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f1e:	2200      	movs	r2, #0
 8010f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010f24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8010f28:	4642      	mov	r2, r8
 8010f2a:	464b      	mov	r3, r9
 8010f2c:	f04f 0000 	mov.w	r0, #0
 8010f30:	f04f 0100 	mov.w	r1, #0
 8010f34:	0159      	lsls	r1, r3, #5
 8010f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010f3a:	0150      	lsls	r0, r2, #5
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	4641      	mov	r1, r8
 8010f42:	1a54      	subs	r4, r2, r1
 8010f44:	4649      	mov	r1, r9
 8010f46:	eb63 0501 	sbc.w	r5, r3, r1
 8010f4a:	f04f 0200 	mov.w	r2, #0
 8010f4e:	f04f 0300 	mov.w	r3, #0
 8010f52:	00ab      	lsls	r3, r5, #2
 8010f54:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010f58:	00a2      	lsls	r2, r4, #2
 8010f5a:	4614      	mov	r4, r2
 8010f5c:	461d      	mov	r5, r3
 8010f5e:	4643      	mov	r3, r8
 8010f60:	18e3      	adds	r3, r4, r3
 8010f62:	603b      	str	r3, [r7, #0]
 8010f64:	464b      	mov	r3, r9
 8010f66:	eb45 0303 	adc.w	r3, r5, r3
 8010f6a:	607b      	str	r3, [r7, #4]
 8010f6c:	f04f 0200 	mov.w	r2, #0
 8010f70:	f04f 0300 	mov.w	r3, #0
 8010f74:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010f78:	4629      	mov	r1, r5
 8010f7a:	00cb      	lsls	r3, r1, #3
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010f82:	4621      	mov	r1, r4
 8010f84:	00ca      	lsls	r2, r1, #3
 8010f86:	4610      	mov	r0, r2
 8010f88:	4619      	mov	r1, r3
 8010f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010f8e:	f04f 0300 	mov.w	r3, #0
 8010f92:	f7ef fa0d 	bl	80003b0 <__aeabi_uldivmod>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	b292      	uxth	r2, r2
 8010f9c:	e000      	b.n	8010fa0 <prvTCPNextTimeout+0x300>
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fa2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fa8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8010fac:	4618      	mov	r0, r3
 8010fae:	3758      	adds	r7, #88	@ 0x58
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010fb6:	bf00      	nop
 8010fb8:	08025990 	.word	0x08025990

08010fbc <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8010fbc:	b4b0      	push	{r4, r5, r7}
 8010fbe:	b08b      	sub	sp, #44	@ 0x2c
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8010fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fcc:	899b      	ldrh	r3, [r3, #12]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d10e      	bne.n	8010ff6 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	330e      	adds	r3, #14
 8010fdc:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	f107 0408 	add.w	r4, r7, #8
 8010fea:	6818      	ldr	r0, [r3, #0]
 8010fec:	6859      	ldr	r1, [r3, #4]
 8010fee:	689a      	ldr	r2, [r3, #8]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ff4:	e018      	b.n	8011028 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	330e      	adds	r3, #14
 8010ffa:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011000:	6a3b      	ldr	r3, [r7, #32]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	061a      	lsls	r2, r3, #24
 8011006:	6a3b      	ldr	r3, [r7, #32]
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	021b      	lsls	r3, r3, #8
 801100c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011010:	431a      	orrs	r2, r3
 8011012:	6a3b      	ldr	r3, [r7, #32]
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	0a1b      	lsrs	r3, r3, #8
 8011018:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801101c:	431a      	orrs	r2, r3
 801101e:	6a3b      	ldr	r3, [r7, #32]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	0e1b      	lsrs	r3, r3, #24
 8011024:	4313      	orrs	r3, r2
 8011026:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	461d      	mov	r5, r3
 801102c:	f107 0408 	add.w	r4, r7, #8
 8011030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011034:	6823      	ldr	r3, [r4, #0]
 8011036:	602b      	str	r3, [r5, #0]
    }
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	372c      	adds	r7, #44	@ 0x2c
 801103c:	46bd      	mov	sp, r7
 801103e:	bcb0      	pop	{r4, r5, r7}
 8011040:	4770      	bx	lr
	...

08011044 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011044:	b5b0      	push	{r4, r5, r7, lr}
 8011046:	b096      	sub	sp, #88	@ 0x58
 8011048:	af04      	add	r7, sp, #16
 801104a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 801104c:	2301      	movs	r3, #1
 801104e:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d104      	bne.n	8011060 <xProcessReceivedTCPPacket+0x1c>
 8011056:	f240 21f7 	movw	r1, #759	@ 0x2f7
 801105a:	4898      	ldr	r0, [pc, #608]	@ (80112bc <xProcessReceivedTCPPacket+0x278>)
 801105c:	f7f0 fafc 	bl	8001658 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011064:	2b00      	cmp	r3, #0
 8011066:	d104      	bne.n	8011072 <xProcessReceivedTCPPacket+0x2e>
 8011068:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 801106c:	4893      	ldr	r0, [pc, #588]	@ (80112bc <xProcessReceivedTCPPacket+0x278>)
 801106e:	f7f0 faf3 	bl	8001658 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	4618      	mov	r0, r3
 801107a:	f7f8 fb55 	bl	8009728 <uxIPHeaderSizePacket>
 801107e:	4603      	mov	r3, r0
 8011080:	330e      	adds	r3, #14
 8011082:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801108a:	3314      	adds	r3, #20
 801108c:	429a      	cmp	r2, r3
 801108e:	d202      	bcs.n	8011096 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8011090:	2300      	movs	r3, #0
 8011092:	647b      	str	r3, [r7, #68]	@ 0x44
 8011094:	e191      	b.n	80113ba <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 801109a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801109c:	4413      	add	r3, r2
 801109e:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80110a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a2:	7b5b      	ldrb	r3, [r3, #13]
 80110a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	885b      	ldrh	r3, [r3, #2]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	021b      	lsls	r3, r3, #8
 80110ae:	b21a      	sxth	r2, r3
 80110b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b2:	885b      	ldrh	r3, [r3, #2]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	0a1b      	lsrs	r3, r3, #8
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	b21b      	sxth	r3, r3
 80110bc:	4313      	orrs	r3, r2
 80110be:	b21b      	sxth	r3, r3
 80110c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 80110c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c4:	881b      	ldrh	r3, [r3, #0]
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	021b      	lsls	r3, r3, #8
 80110ca:	b21a      	sxth	r2, r3
 80110cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	0a1b      	lsrs	r3, r3, #8
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	b21b      	sxth	r3, r3
 80110d8:	4313      	orrs	r3, r2
 80110da:	b21b      	sxth	r3, r3
 80110dc:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110e2:	f107 0308 	add.w	r3, r7, #8
 80110e6:	4611      	mov	r1, r2
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7ff ff67 	bl	8010fbc <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 80110ee:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 80110f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80110f2:	9303      	str	r3, [sp, #12]
 80110f4:	466c      	mov	r4, sp
 80110f6:	f107 0310 	add.w	r3, r7, #16
 80110fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80110fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011102:	f107 0308 	add.w	r3, r7, #8
 8011106:	cb0c      	ldmia	r3, {r2, r3}
 8011108:	4629      	mov	r1, r5
 801110a:	2000      	movs	r0, #0
 801110c:	f7fe fbc2 	bl	800f894 <pxTCPSocketLookup>
 8011110:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8011112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011114:	2b00      	cmp	r3, #0
 8011116:	d008      	beq.n	801112a <xProcessReceivedTCPPacket+0xe6>
 8011118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801111a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801111e:	4618      	mov	r0, r3
 8011120:	f000 fc92 	bl	8011a48 <prvTCPSocketIsActive>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d116      	bne.n	8011158 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 801112a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801112c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801112e:	4619      	mov	r1, r3
 8011130:	4863      	ldr	r0, [pc, #396]	@ (80112c0 <xProcessReceivedTCPPacket+0x27c>)
 8011132:	f010 fbb1 	bl	8021898 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011136:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011138:	f003 031f 	and.w	r3, r3, #31
 801113c:	2b10      	cmp	r3, #16
 801113e:	d008      	beq.n	8011152 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8011140:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011142:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011146:	2b00      	cmp	r3, #0
 8011148:	d103      	bne.n	8011152 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801114a:	69fb      	ldr	r3, [r7, #28]
 801114c:	4618      	mov	r0, r3
 801114e:	f002 fd0b 	bl	8013b68 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8011152:	2300      	movs	r3, #0
 8011154:	647b      	str	r3, [r7, #68]	@ 0x44
 8011156:	e0d6      	b.n	8011306 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8011158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801115a:	2200      	movs	r2, #0
 801115c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8011160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011162:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011166:	2b01      	cmp	r3, #1
 8011168:	d127      	bne.n	80111ba <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 801116a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801116c:	f003 031f 	and.w	r3, r3, #31
 8011170:	2b02      	cmp	r3, #2
 8011172:	d015      	beq.n	80111a0 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8011174:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011176:	4618      	mov	r0, r3
 8011178:	f003 fbbe 	bl	80148f8 <prvTCPFlagMeaning>
 801117c:	4601      	mov	r1, r0
 801117e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011180:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011182:	4850      	ldr	r0, [pc, #320]	@ (80112c4 <xProcessReceivedTCPPacket+0x280>)
 8011184:	f010 fb88 	bl	8021898 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8011188:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801118a:	f003 0304 	and.w	r3, r3, #4
 801118e:	2b00      	cmp	r3, #0
 8011190:	d103      	bne.n	801119a <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	4618      	mov	r0, r3
 8011196:	f002 fce7 	bl	8013b68 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 801119a:	2300      	movs	r3, #0
 801119c:	647b      	str	r3, [r7, #68]	@ 0x44
 801119e:	e0b2      	b.n	8011306 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	4619      	mov	r1, r3
 80111a4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80111a6:	f001 f999 	bl	80124dc <prvHandleListen>
 80111aa:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 80111ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f040 80a9 	bne.w	8011306 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 80111b4:	2300      	movs	r3, #0
 80111b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80111b8:	e0a5      	b.n	8011306 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 80111ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111bc:	f003 0304 	and.w	r3, r3, #4
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d068      	beq.n	8011296 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 80111c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80111c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80111c8:	4619      	mov	r1, r3
 80111ca:	483f      	ldr	r0, [pc, #252]	@ (80112c8 <xProcessReceivedTCPPacket+0x284>)
 80111cc:	f010 fb64 	bl	8021898 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80111d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111d2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80111d6:	2b02      	cmp	r3, #2
 80111d8:	d11f      	bne.n	801121a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80111da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	061a      	lsls	r2, r3, #24
 80111e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	021b      	lsls	r3, r3, #8
 80111e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80111ea:	431a      	orrs	r2, r3
 80111ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	0a1b      	lsrs	r3, r3, #8
 80111f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80111f6:	431a      	orrs	r2, r3
 80111f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	0e1b      	lsrs	r3, r3, #24
 80111fe:	4313      	orrs	r3, r2
 8011200:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8011202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011204:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011208:	3301      	adds	r3, #1
 801120a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801120c:	429a      	cmp	r2, r3
 801120e:	d13f      	bne.n	8011290 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011210:	2100      	movs	r1, #0
 8011212:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011214:	f7ff fb34 	bl	8010880 <vTCPStateChange>
 8011218:	e03a      	b.n	8011290 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801121a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	061a      	lsls	r2, r3, #24
 8011220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	021b      	lsls	r3, r3, #8
 8011226:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801122a:	431a      	orrs	r2, r3
 801122c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	0a1b      	lsrs	r3, r3, #8
 8011232:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011236:	431a      	orrs	r2, r3
 8011238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	0e1b      	lsrs	r3, r3, #24
 801123e:	4313      	orrs	r3, r2
 8011240:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8011242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011244:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801124a:	429a      	cmp	r2, r3
 801124c:	d104      	bne.n	8011258 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801124e:	2100      	movs	r1, #0
 8011250:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011252:	f7ff fb15 	bl	8010880 <vTCPStateChange>
 8011256:	e01b      	b.n	8011290 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8011258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801125a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801125e:	4619      	mov	r1, r3
 8011260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011262:	f003 fc82 	bl	8014b6a <xSequenceGreaterThan>
 8011266:	4603      	mov	r3, r0
 8011268:	2b00      	cmp	r3, #0
 801126a:	d011      	beq.n	8011290 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 801126c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801126e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 8011272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011274:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8011278:	4413      	add	r3, r2
 801127a:	4619      	mov	r1, r3
 801127c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801127e:	f003 fc5e 	bl	8014b3e <xSequenceLessThan>
 8011282:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8011284:	2b00      	cmp	r3, #0
 8011286:	d003      	beq.n	8011290 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8011288:	69fb      	ldr	r3, [r7, #28]
 801128a:	4618      	mov	r0, r3
 801128c:	f002 fc5f 	bl	8013b4e <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 8011290:	2300      	movs	r3, #0
 8011292:	647b      	str	r3, [r7, #68]	@ 0x44
 8011294:	e037      	b.n	8011306 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8011296:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011298:	f003 031f 	and.w	r3, r3, #31
 801129c:	2b02      	cmp	r3, #2
 801129e:	d117      	bne.n	80112d0 <xProcessReceivedTCPPacket+0x28c>
 80112a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112a2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80112a6:	2b04      	cmp	r3, #4
 80112a8:	d912      	bls.n	80112d0 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 80112aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80112ac:	4619      	mov	r1, r3
 80112ae:	4807      	ldr	r0, [pc, #28]	@ (80112cc <xProcessReceivedTCPPacket+0x288>)
 80112b0:	f010 faf2 	bl	8021898 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 80112b4:	2300      	movs	r3, #0
 80112b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80112b8:	e025      	b.n	8011306 <xProcessReceivedTCPPacket+0x2c2>
 80112ba:	bf00      	nop
 80112bc:	08025884 	.word	0x08025884
 80112c0:	080259bc 	.word	0x080259bc
 80112c4:	080259e4 	.word	0x080259e4
 80112c8:	08025a1c 	.word	0x08025a1c
 80112cc:	08025a40 	.word	0x08025a40
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 80112d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80112d2:	f7f8 fa43 	bl	800975c <uxIPHeaderSizeSocket>
 80112d6:	4603      	mov	r3, r0
 80112d8:	330e      	adds	r3, #14
 80112da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80112dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112de:	33a0      	adds	r3, #160	@ 0xa0
 80112e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80112e2:	4413      	add	r3, r2
 80112e4:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 80112e8:	69fb      	ldr	r3, [r7, #28]
 80112ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ee:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80112f0:	2214      	movs	r2, #20
 80112f2:	4619      	mov	r1, r3
 80112f4:	f010 fcec 	bl	8021cd0 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 80112f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112fa:	330d      	adds	r3, #13
 80112fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80112fe:	4413      	add	r3, r2
 8011300:	2210      	movs	r2, #16
 8011302:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8011306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011308:	2b00      	cmp	r3, #0
 801130a:	d056      	beq.n	80113ba <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 801130c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801130e:	2b00      	cmp	r3, #0
 8011310:	d104      	bne.n	801131c <xProcessReceivedTCPPacket+0x2d8>
 8011312:	f240 319e 	movw	r1, #926	@ 0x39e
 8011316:	482b      	ldr	r0, [pc, #172]	@ (80113c4 <xProcessReceivedTCPPacket+0x380>)
 8011318:	f7f0 f99e 	bl	8001658 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 801131c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801131e:	f7ff fa53 	bl	80107c8 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8011322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011324:	7b1b      	ldrb	r3, [r3, #12]
 8011326:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801132a:	2b50      	cmp	r3, #80	@ 0x50
 801132c:	d905      	bls.n	801133a <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	4619      	mov	r1, r3
 8011332:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011334:	f000 f894 	bl	8011460 <prvCheckOptions>
 8011338:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 801133a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801133c:	2b00      	cmp	r3, #0
 801133e:	d03c      	beq.n	80113ba <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011342:	89db      	ldrh	r3, [r3, #14]
 8011344:	b29b      	uxth	r3, r3
 8011346:	021b      	lsls	r3, r3, #8
 8011348:	b21a      	sxth	r2, r3
 801134a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801134c:	89db      	ldrh	r3, [r3, #14]
 801134e:	b29b      	uxth	r3, r3
 8011350:	0a1b      	lsrs	r3, r3, #8
 8011352:	b29b      	uxth	r3, r3
 8011354:	b21b      	sxth	r3, r3
 8011356:	4313      	orrs	r3, r2
 8011358:	b21b      	sxth	r3, r3
 801135a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801135c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801135e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011360:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8011364:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011366:	f003 0302 	and.w	r3, r3, #2
 801136a:	2b00      	cmp	r3, #0
 801136c:	d10a      	bne.n	8011384 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801136e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011370:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011376:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 801137a:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 801137e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011380:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8011384:	f107 031c 	add.w	r3, r7, #28
 8011388:	4619      	mov	r1, r3
 801138a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801138c:	f000 ff78 	bl	8012280 <prvTCPHandleState>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	dd05      	ble.n	80113a2 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8011396:	f107 031c 	add.w	r3, r7, #28
 801139a:	4619      	mov	r1, r3
 801139c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801139e:	f001 fc6f 	bl	8012c80 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d005      	beq.n	80113b4 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f005 fbcc 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 80113b0:	2300      	movs	r3, #0
 80113b2:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 80113b4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80113b6:	f7ff fc73 	bl	8010ca0 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 80113ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80113bc:	4618      	mov	r0, r3
 80113be:	3748      	adds	r7, #72	@ 0x48
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bdb0      	pop	{r4, r5, r7, pc}
 80113c4:	08025884 	.word	0x08025884

080113c8 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b088      	sub	sp, #32
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80113d4:	021b      	lsls	r3, r3, #8
 80113d6:	b21a      	sxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80113dc:	0a1b      	lsrs	r3, r3, #8
 80113de:	b29b      	uxth	r3, r3
 80113e0:	b21b      	sxth	r3, r3
 80113e2:	4313      	orrs	r3, r2
 80113e4:	b21b      	sxth	r3, r3
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 80113ea:	2300      	movs	r3, #0
 80113ec:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80113ee:	4b19      	ldr	r3, [pc, #100]	@ (8011454 <xTCPCheckNewClient+0x8c>)
 80113f0:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80113f2:	4b19      	ldr	r3, [pc, #100]	@ (8011458 <xTCPCheckNewClient+0x90>)
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	61fb      	str	r3, [r7, #28]
 80113f8:	e023      	b.n	8011442 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	697a      	ldr	r2, [r7, #20]
 8011400:	429a      	cmp	r2, r3
 8011402:	d11b      	bne.n	801143c <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011410:	2b06      	cmp	r3, #6
 8011412:	d113      	bne.n	801143c <xTCPCheckNewClient+0x74>
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801141a:	f003 0302 	and.w	r3, r3, #2
 801141e:	b2db      	uxtb	r3, r3
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00b      	beq.n	801143c <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801142e:	4619      	mov	r1, r3
 8011430:	480a      	ldr	r0, [pc, #40]	@ (801145c <xTCPCheckNewClient+0x94>)
 8011432:	f010 fa31 	bl	8021898 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8011436:	2301      	movs	r3, #1
 8011438:	61bb      	str	r3, [r7, #24]
                    break;
 801143a:	e006      	b.n	801144a <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8011442:	69fa      	ldr	r2, [r7, #28]
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	429a      	cmp	r2, r3
 8011448:	d1d7      	bne.n	80113fa <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 801144a:	69bb      	ldr	r3, [r7, #24]
    }
 801144c:	4618      	mov	r0, r3
 801144e:	3720      	adds	r7, #32
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	20001448 	.word	0x20001448
 8011458:	20001440 	.word	0x20001440
 801145c:	08025a60 	.word	0x08025a60

08011460 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011460:	b580      	push	{r7, lr}
 8011462:	b08c      	sub	sp, #48	@ 0x30
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 801146a:	6838      	ldr	r0, [r7, #0]
 801146c:	f7f8 f95c 	bl	8009728 <uxIPHeaderSizePacket>
 8011470:	4603      	mov	r3, r0
 8011472:	330e      	adds	r3, #14
 8011474:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801147a:	69fb      	ldr	r3, [r7, #28]
 801147c:	4413      	add	r3, r2
 801147e:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 8011480:	2301      	movs	r3, #1
 8011482:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	3314      	adds	r3, #20
 8011488:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	3314      	adds	r3, #20
 8011492:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	7b1b      	ldrb	r3, [r3, #12]
 8011498:	2b50      	cmp	r3, #80	@ 0x50
 801149a:	d93f      	bls.n	801151c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	7b1b      	ldrb	r3, [r3, #12]
 80114a0:	091b      	lsrs	r3, r3, #4
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	3b05      	subs	r3, #5
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
 80114ae:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d230      	bcs.n	801151c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	6a3a      	ldr	r2, [r7, #32]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d829      	bhi.n	801151c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	7b5b      	ldrb	r3, [r3, #13]
 80114cc:	f003 0302 	and.w	r3, r3, #2
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d002      	beq.n	80114da <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 80114d4:	2301      	movs	r3, #1
 80114d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80114d8:	e001      	b.n	80114de <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 80114da:	2300      	movs	r3, #0
 80114dc:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d018      	beq.n	8011516 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 80114e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	6a39      	ldr	r1, [r7, #32]
 80114ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80114ec:	f000 f81c 	bl	8011528 <prvSingleStepTCPHeaderOptions>
 80114f0:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	da02      	bge.n	80114fe <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 80114f8:	2300      	movs	r3, #0
 80114fa:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 80114fc:	e00e      	b.n	801151c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00a      	beq.n	801151a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	6a3a      	ldr	r2, [r7, #32]
 8011508:	1ad3      	subs	r3, r2, r3
 801150a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011510:	4413      	add	r3, r2
 8011512:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8011514:	e7e3      	b.n	80114de <prvCheckOptions+0x7e>
                            break;
 8011516:	bf00      	nop
 8011518:	e000      	b.n	801151c <prvCheckOptions+0xbc>
                            break;
 801151a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 801151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801151e:	4618      	mov	r0, r3
 8011520:	3730      	adds	r7, #48	@ 0x30
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
	...

08011528 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8011528:	b580      	push	{r7, lr}
 801152a:	b08a      	sub	sp, #40	@ 0x28
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
 8011534:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011544:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011546:	2300      	movs	r3, #0
 8011548:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d102      	bne.n	8011558 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 8011552:	2300      	movs	r3, #0
 8011554:	61fb      	str	r3, [r7, #28]
 8011556:	e0da      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	2b01      	cmp	r3, #1
 801155e:	d102      	bne.n	8011566 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 8011560:	2301      	movs	r3, #1
 8011562:	61fb      	str	r3, [r7, #28]
 8011564:	e0d3      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	2b01      	cmp	r3, #1
 801156a:	d803      	bhi.n	8011574 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 801156c:	f04f 33ff 	mov.w	r3, #4294967295
 8011570:	61fb      	str	r3, [r7, #28]
 8011572:	e0cc      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b03      	cmp	r3, #3
 801157a:	d11e      	bne.n	80115ba <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	2b02      	cmp	r3, #2
 8011580:	d904      	bls.n	801158c <prvSingleStepTCPHeaderOptions+0x64>
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	3301      	adds	r3, #1
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	2b03      	cmp	r3, #3
 801158a:	d003      	beq.n	8011594 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 801158c:	f04f 33ff 	mov.w	r3, #4294967295
 8011590:	61fb      	str	r3, [r7, #28]
 8011592:	e0bc      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d00c      	beq.n	80115b4 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	3302      	adds	r3, #2
 801159e:	781a      	ldrb	r2, [r3, #0]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80115ac:	f043 0310 	orr.w	r3, r3, #16
 80115b0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 80115b4:	2303      	movs	r3, #3
 80115b6:	61fb      	str	r3, [r7, #28]
 80115b8:	e0a9      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	2b02      	cmp	r3, #2
 80115c0:	d16d      	bne.n	801169e <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	2b03      	cmp	r3, #3
 80115c6:	d904      	bls.n	80115d2 <prvSingleStepTCPHeaderOptions+0xaa>
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	3301      	adds	r3, #1
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	2b04      	cmp	r3, #4
 80115d0:	d003      	beq.n	80115da <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 80115d2:	f04f 33ff 	mov.w	r3, #4294967295
 80115d6:	61fb      	str	r3, [r7, #28]
 80115d8:	e099      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	3302      	adds	r3, #2
 80115de:	4618      	mov	r0, r3
 80115e0:	f7f8 fe4f 	bl	800a282 <usChar2u16>
 80115e4:	4603      	mov	r3, r0
 80115e6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80115ee:	461a      	mov	r2, r3
 80115f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d010      	beq.n	8011618 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 80115f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d105      	bne.n	8011608 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 80115fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011600:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8011602:	2301      	movs	r3, #1
 8011604:	61bb      	str	r3, [r7, #24]
 8011606:	e007      	b.n	8011618 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801160e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011610:	4619      	mov	r1, r3
 8011612:	4841      	ldr	r0, [pc, #260]	@ (8011718 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8011614:	f010 f940 	bl	8021898 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d177      	bne.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 801161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011620:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011624:	d202      	bcs.n	801162c <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8011626:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801162a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011632:	461a      	mov	r2, r3
 8011634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011636:	4293      	cmp	r3, r2
 8011638:	d22e      	bcs.n	8011698 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011640:	f043 0301 	orr.w	r3, r3, #1
 8011644:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801164e:	461a      	mov	r2, r3
 8011650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011652:	4293      	cmp	r3, r2
 8011654:	d207      	bcs.n	8011666 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801165c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801165e:	4619      	mov	r1, r3
 8011660:	482e      	ldr	r0, [pc, #184]	@ (801171c <prvSingleStepTCPHeaderOptions+0x1f4>)
 8011662:	f010 f919 	bl	8021898 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	685a      	ldr	r2, [r3, #4]
 801166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011672:	fb03 f202 	mul.w	r2, r3, r2
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 801167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801167c:	b29a      	uxth	r2, r3
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8011684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011686:	b29a      	uxth	r2, r3
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 801168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011690:	b29a      	uxth	r2, r3
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8011698:	2304      	movs	r3, #4
 801169a:	61fb      	str	r3, [r7, #28]
 801169c:	e037      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	3301      	adds	r3, #1
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 80116a8:	2300      	movs	r3, #0
 80116aa:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 80116ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d904      	bls.n	80116be <prvSingleStepTCPHeaderOptions+0x196>
 80116b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d203      	bcs.n	80116c6 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 80116be:	f04f 33ff 	mov.w	r3, #4294967295
 80116c2:	61fb      	str	r3, [r7, #28]
 80116c4:	e023      	b.n	801170e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b05      	cmp	r3, #5
 80116cc:	d11a      	bne.n	8011704 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 80116ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116d2:	3b02      	subs	r3, #2
 80116d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	3302      	adds	r3, #2
 80116dc:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 80116de:	e00d      	b.n	80116fc <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	4619      	mov	r1, r3
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f000 f81a 	bl	8011720 <prvReadSackOption>
                            lIndex += 8;
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	3308      	adds	r3, #8
 80116f0:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 80116f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116f6:	3b08      	subs	r3, #8
 80116f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 80116fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011700:	2b07      	cmp	r3, #7
 8011702:	d8ed      	bhi.n	80116e0 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8011704:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011708:	69fa      	ldr	r2, [r7, #28]
 801170a:	4413      	add	r3, r2
 801170c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 801170e:	69fb      	ldr	r3, [r7, #28]
    }
 8011710:	4618      	mov	r0, r3
 8011712:	3728      	adds	r7, #40	@ 0x28
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	08025a8c 	.word	0x08025a8c
 801171c:	08025aa4 	.word	0x08025aa4

08011720 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8011720:	b580      	push	{r7, lr}
 8011722:	b08a      	sub	sp, #40	@ 0x28
 8011724:	af02      	add	r7, sp, #8
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	4413      	add	r3, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f7f8 fd8a 	bl	800a24c <ulChar2u32>
 8011738:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	3304      	adds	r3, #4
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	4413      	add	r3, r2
 8011742:	4618      	mov	r0, r3
 8011744:	f7f8 fd82 	bl	800a24c <ulChar2u32>
 8011748:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	69f9      	ldr	r1, [r7, #28]
 8011754:	4618      	mov	r0, r3
 8011756:	f004 fba3 	bl	8015ea0 <ulTCPWindowTxSack>
 801175a:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d029      	beq.n	80117ba <prvReadSackOption+0x9a>
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d026      	beq.n	80117ba <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8011772:	2300      	movs	r3, #0
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	2200      	movs	r2, #0
 801177a:	2100      	movs	r1, #0
 801177c:	f7fe fed9 	bl	8010532 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f043 0202 	orr.w	r2, r3, #2
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011790:	f003 0302 	and.w	r3, r3, #2
 8011794:	2b00      	cmp	r3, #0
 8011796:	d005      	beq.n	80117a4 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d005      	beq.n	80117ba <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80117b4:	6979      	ldr	r1, [r7, #20]
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 80117ba:	bf00      	nop
 80117bc:	3720      	adds	r7, #32
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 80117c2:	b590      	push	{r4, r7, lr}
 80117c4:	b08f      	sub	sp, #60	@ 0x3c
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
 80117ca:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f7f7 ffa9 	bl	8009728 <uxIPHeaderSizePacket>
 80117d6:	4603      	mov	r3, r0
 80117d8:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80117da:	4423      	add	r3, r4
 80117dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80117de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7f7 ffa0 	bl	8009728 <uxIPHeaderSizePacket>
 80117e8:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 80117ea:	2300      	movs	r3, #0
 80117ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 80117f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117f2:	7b1b      	ldrb	r3, [r3, #12]
 80117f4:	089b      	lsrs	r3, r3, #2
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80117fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011800:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011804:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801180a:	69f9      	ldr	r1, [r7, #28]
 801180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801180e:	440b      	add	r3, r1
 8011810:	330e      	adds	r3, #14
 8011812:	441a      	add	r2, r3
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801181c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801181e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011820:	3b0e      	subs	r3, #14
 8011822:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011828:	899b      	ldrh	r3, [r3, #12]
 801182a:	b29b      	uxth	r3, r3
 801182c:	2b08      	cmp	r3, #8
 801182e:	d004      	beq.n	801183a <prvCheckRxData+0x78>
 8011830:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011834:	4293      	cmp	r3, r2
 8011836:	d015      	beq.n	8011864 <prvCheckRxData+0xa2>
 8011838:	e02c      	b.n	8011894 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801183e:	330e      	adds	r3, #14
 8011840:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	885b      	ldrh	r3, [r3, #2]
 8011846:	b29b      	uxth	r3, r3
 8011848:	021b      	lsls	r3, r3, #8
 801184a:	b21a      	sxth	r2, r3
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	885b      	ldrh	r3, [r3, #2]
 8011850:	b29b      	uxth	r3, r3
 8011852:	0a1b      	lsrs	r3, r3, #8
 8011854:	b29b      	uxth	r3, r3
 8011856:	b21b      	sxth	r3, r3
 8011858:	4313      	orrs	r3, r2
 801185a:	b21b      	sxth	r3, r3
 801185c:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801185e:	8afb      	ldrh	r3, [r7, #22]
 8011860:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011862:	e01a      	b.n	801189a <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011868:	330e      	adds	r3, #14
 801186a:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	889b      	ldrh	r3, [r3, #4]
 8011870:	b29b      	uxth	r3, r3
 8011872:	021b      	lsls	r3, r3, #8
 8011874:	b21a      	sxth	r2, r3
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	889b      	ldrh	r3, [r3, #4]
 801187a:	b29b      	uxth	r3, r3
 801187c:	0a1b      	lsrs	r3, r3, #8
 801187e:	b29b      	uxth	r3, r3
 8011880:	b21b      	sxth	r3, r3
 8011882:	4313      	orrs	r3, r2
 8011884:	b21b      	sxth	r3, r3
 8011886:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011888:	8afb      	ldrh	r3, [r7, #22]
 801188a:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 801188c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801188e:	3328      	adds	r3, #40	@ 0x28
 8011890:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011892:	e002      	b.n	801189a <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8011894:	2300      	movs	r3, #0
 8011896:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8011898:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 801189a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801189e:	429a      	cmp	r2, r3
 80118a0:	dd01      	ble.n	80118a6 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 80118a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118a4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 80118a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	4413      	add	r3, r2
 80118ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ae:	429a      	cmp	r2, r3
 80118b0:	dd06      	ble.n	80118c0 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 80118b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118b4:	69fb      	ldr	r3, [r7, #28]
 80118b6:	4413      	add	r3, r2
 80118b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80118be:	e001      	b.n	80118c4 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 80118c0:	2300      	movs	r3, #0
 80118c2:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 80118c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c6:	7b5b      	ldrb	r3, [r3, #13]
 80118c8:	f003 0320 	and.w	r3, r3, #32
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d01c      	beq.n	801190a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 80118d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118d2:	8a5b      	ldrh	r3, [r3, #18]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	021b      	lsls	r3, r3, #8
 80118d8:	b21a      	sxth	r2, r3
 80118da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118dc:	8a5b      	ldrh	r3, [r3, #18]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	0a1b      	lsrs	r3, r3, #8
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	b21b      	sxth	r3, r3
 80118e6:	4313      	orrs	r3, r2
 80118e8:	b21b      	sxth	r3, r3
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	441a      	add	r2, r3
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 80118fa:	68f9      	ldr	r1, [r7, #12]
 80118fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118fe:	f7f8 fc51 	bl	800a1a4 <FreeRTOS_min_int32>
 8011902:	4602      	mov	r2, r0
 8011904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011906:	1a9b      	subs	r3, r3, r2
 8011908:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 801190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 801190c:	4618      	mov	r0, r3
 801190e:	373c      	adds	r7, #60	@ 0x3c
 8011910:	46bd      	mov	sp, r7
 8011912:	bd90      	pop	{r4, r7, pc}

08011914 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011914:	b580      	push	{r7, lr}
 8011916:	b092      	sub	sp, #72	@ 0x48
 8011918:	af02      	add	r7, sp, #8
 801191a:	60f8      	str	r0, [r7, #12]
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	607a      	str	r2, [r7, #4]
 8011920:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f7f7 ff00 	bl	8009728 <uxIPHeaderSizePacket>
 8011928:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801192e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011930:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8011932:	4413      	add	r3, r2
 8011934:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011938:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011940:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 8011942:	2300      	movs	r3, #0
 8011944:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	061a      	lsls	r2, r3, #24
 8011954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	021b      	lsls	r3, r3, #8
 801195a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801195e:	431a      	orrs	r2, r3
 8011960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	0a1b      	lsrs	r3, r3, #8
 8011966:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801196a:	431a      	orrs	r2, r3
 801196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	0e1b      	lsrs	r3, r3, #24
 8011972:	4313      	orrs	r3, r2
 8011974:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8011976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011978:	2b00      	cmp	r3, #0
 801197a:	d057      	beq.n	8011a2c <prvStoreRxData+0x118>
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011982:	2b03      	cmp	r3, #3
 8011984:	d952      	bls.n	8011a2c <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8011986:	2300      	movs	r3, #0
 8011988:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011990:	2b00      	cmp	r3, #0
 8011992:	d007      	beq.n	80119a4 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801199a:	4618      	mov	r0, r3
 801199c:	f7fe fc89 	bl	80102b2 <uxStreamBufferGetSpace>
 80119a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80119a2:	e003      	b.n	80119ac <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80119aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 80119ac:	f107 0310 	add.w	r3, r7, #16
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119b6:	69f9      	ldr	r1, [r7, #28]
 80119b8:	6a38      	ldr	r0, [r7, #32]
 80119ba:	f003 fd45 	bl	8015448 <lTCPWindowRxCheck>
 80119be:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	db20      	blt.n	8011a08 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d007      	beq.n	80119dc <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119d0:	1ad3      	subs	r3, r2, r3
 80119d2:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	68ba      	ldr	r2, [r7, #8]
 80119d8:	4413      	add	r3, r2
 80119da:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 80119dc:	69b9      	ldr	r1, [r7, #24]
 80119de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f7fe f8d2 	bl	800fb8c <lTCPAddRxdata>
 80119e8:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 80119ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119ec:	697a      	ldr	r2, [r7, #20]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d00a      	beq.n	8011a08 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 80119f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119f4:	6979      	ldr	r1, [r7, #20]
 80119f6:	4813      	ldr	r0, [pc, #76]	@ (8011a44 <prvStoreRxData+0x130>)
 80119f8:	f00f ff4e 	bl	8021898 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f002 f8b3 	bl	8013b68 <prvTCPSendReset>
                    xResult = -1;
 8011a02:	f04f 33ff 	mov.w	r3, #4294967295
 8011a06:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8011a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d113      	bne.n	8011a36 <prvStoreRxData+0x122>
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00f      	beq.n	8011a36 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8011a16:	6a3b      	ldr	r3, [r7, #32]
 8011a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f7fe f8b4 	bl	800fb8c <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8011a24:	6a3b      	ldr	r3, [r7, #32]
 8011a26:	2200      	movs	r2, #0
 8011a28:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 8011a2a:	e004      	b.n	8011a36 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8011a2c:	6a3b      	ldr	r3, [r7, #32]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011a34:	e000      	b.n	8011a38 <prvStoreRxData+0x124>
        {
 8011a36:	bf00      	nop
        }

        return xResult;
 8011a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3740      	adds	r7, #64	@ 0x40
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	08025abc 	.word	0x08025abc

08011a48 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8011a48:	b480      	push	{r7}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	4603      	mov	r3, r0
 8011a50:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 8011a52:	79fb      	ldrb	r3, [r7, #7]
 8011a54:	2b0b      	cmp	r3, #11
 8011a56:	bf8c      	ite	hi
 8011a58:	2201      	movhi	r2, #1
 8011a5a:	2200      	movls	r2, #0
 8011a5c:	b2d2      	uxtb	r2, r2
 8011a5e:	2a00      	cmp	r2, #0
 8011a60:	d10f      	bne.n	8011a82 <prvTCPSocketIsActive+0x3a>
 8011a62:	f640 3281 	movw	r2, #2945	@ 0xb81
 8011a66:	fa22 f303 	lsr.w	r3, r2, r3
 8011a6a:	f003 0301 	and.w	r3, r3, #1
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	bf14      	ite	ne
 8011a72:	2301      	movne	r3, #1
 8011a74:	2300      	moveq	r3, #0
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d002      	beq.n	8011a82 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	60fb      	str	r3, [r7, #12]
                break;
 8011a80:	e002      	b.n	8011a88 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8011a82:	2301      	movs	r3, #1
 8011a84:	60fb      	str	r3, [r7, #12]
                break;
 8011a86:	bf00      	nop
        }

        return xResult;
 8011a88:	68fb      	ldr	r3, [r7, #12]
    }
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3714      	adds	r7, #20
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr
	...

08011a98 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8011a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a9a:	b089      	sub	sp, #36	@ 0x24
 8011a9c:	af02      	add	r7, sp, #8
 8011a9e:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011aa6:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8011aa8:	7cfb      	ldrb	r3, [r7, #19]
 8011aaa:	2b08      	cmp	r3, #8
 8011aac:	d00b      	beq.n	8011ac6 <prvTCPStatusAgeCheck+0x2e>
 8011aae:	2b08      	cmp	r3, #8
 8011ab0:	dc0c      	bgt.n	8011acc <prvTCPStatusAgeCheck+0x34>
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	dc02      	bgt.n	8011abc <prvTCPStatusAgeCheck+0x24>
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	da05      	bge.n	8011ac6 <prvTCPStatusAgeCheck+0x2e>
 8011aba:	e007      	b.n	8011acc <prvTCPStatusAgeCheck+0x34>
 8011abc:	2b05      	cmp	r3, #5
 8011abe:	d105      	bne.n	8011acc <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	617b      	str	r3, [r7, #20]
                    break;
 8011ac4:	e005      	b.n	8011ad2 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	617b      	str	r3, [r7, #20]
                    break;
 8011aca:	e002      	b.n	8011ad2 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 8011acc:	2301      	movs	r3, #1
 8011ace:	617b      	str	r3, [r7, #20]
                    break;
 8011ad0:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d032      	beq.n	8011b3e <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8011ad8:	f7f2 fa8e 	bl	8003ff8 <xTaskGetTickCount>
 8011adc:	4602      	mov	r2, r0
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ae4:	1ad3      	subs	r3, r2, r3
 8011ae6:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d925      	bls.n	8011b3e <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011af6:	461d      	mov	r5, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b02:	461e      	mov	r6, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f000 fdca 	bl	80126a4 <FreeRTOS_GetTCPStateName>
 8011b10:	4603      	mov	r3, r0
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	4633      	mov	r3, r6
 8011b16:	4622      	mov	r2, r4
 8011b18:	4629      	mov	r1, r5
 8011b1a:	480b      	ldr	r0, [pc, #44]	@ (8011b48 <prvTCPStatusAgeCheck+0xb0>)
 8011b1c:	f00f febc 	bl	8021898 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011b20:	2108      	movs	r1, #8
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7fe feac 	bl	8010880 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011b2e:	f003 0304 	and.w	r3, r3, #4
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d002      	beq.n	8011b3e <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8011b38:	f04f 33ff 	mov.w	r3, #4294967295
 8011b3c:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 8011b3e:	697b      	ldr	r3, [r7, #20]
        }
 8011b40:	4618      	mov	r0, r3
 8011b42:	371c      	adds	r7, #28
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b48:	08025ae4 	.word	0x08025ae4

08011b4c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011b4c:	b5b0      	push	{r4, r5, r7, lr}
 8011b4e:	b08a      	sub	sp, #40	@ 0x28
 8011b50:	af02      	add	r7, sp, #8
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011b5a:	6838      	ldr	r0, [r7, #0]
 8011b5c:	f7f7 fde4 	bl	8009728 <uxIPHeaderSizePacket>
 8011b60:	4603      	mov	r3, r0
 8011b62:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011b64:	4423      	add	r3, r4
 8011b66:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	74fb      	strb	r3, [r7, #19]
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	7b5b      	ldrb	r3, [r3, #13]
 8011b74:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011b7c:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	061a      	lsls	r2, r3, #24
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	021b      	lsls	r3, r3, #8
 8011b8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b92:	431a      	orrs	r2, r3
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	689b      	ldr	r3, [r3, #8]
 8011b98:	0a1b      	lsrs	r3, r3, #8
 8011b9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b9e:	431a      	orrs	r2, r3
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	689b      	ldr	r3, [r3, #8]
 8011ba4:	0e1b      	lsrs	r3, r3, #24
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8011baa:	7cbb      	ldrb	r3, [r7, #18]
 8011bac:	f003 0301 	and.w	r3, r3, #1
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d004      	beq.n	8011bbe <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	695b      	ldr	r3, [r3, #20]
 8011bb8:	1c5a      	adds	r2, r3, #1
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10b      	bne.n	8011be6 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	6a1a      	ldr	r2, [r3, #32]
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011be0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8011be4:	e00c      	b.n	8011c00 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bea:	3301      	adds	r3, #1
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d106      	bne.n	8011c00 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011bf8:	f043 0301 	orr.w	r3, r3, #1
 8011bfc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011c06:	f003 0301 	and.w	r3, r3, #1
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10b      	bne.n	8011c28 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	2211      	movs	r2, #17
 8011c1c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8011c1e:	210a      	movs	r1, #10
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f7fe fe2d 	bl	8010880 <vTCPStateChange>
 8011c26:	e023      	b.n	8011c70 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c2c:	1c5a      	adds	r2, r3, #1
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011c38:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d103      	bne.n	8011c4a <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	2200      	movs	r2, #0
 8011c46:	735a      	strb	r2, [r3, #13]
 8011c48:	e012      	b.n	8011c70 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011c50:	f003 0302 	and.w	r3, r3, #2
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d103      	bne.n	8011c62 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	2210      	movs	r2, #16
 8011c5e:	735a      	strb	r2, [r3, #13]
 8011c60:	e002      	b.n	8011c68 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	2200      	movs	r2, #0
 8011c66:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011c68:	2108      	movs	r1, #8
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7fe fe08 	bl	8010880 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6a1a      	ldr	r2, [r3, #32]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	7b5b      	ldrb	r3, [r3, #13]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d00d      	beq.n	8011c9c <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f7f7 fd6b 	bl	800975c <uxIPHeaderSizeSocket>
 8011c86:	4603      	mov	r3, r0
 8011c88:	b2da      	uxtb	r2, r3
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011c90:	4413      	add	r3, r2
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	3314      	adds	r3, #20
 8011c96:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8011c98:	7cfb      	ldrb	r3, [r7, #19]
 8011c9a:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011ca2:	3314      	adds	r3, #20
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	b2da      	uxtb	r2, r3
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8011cae:	4b14      	ldr	r3, [pc, #80]	@ (8011d00 <prvTCPHandleFin+0x1b4>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d01f      	beq.n	8011cf6 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	69db      	ldr	r3, [r3, #28]
 8011cba:	68ba      	ldr	r2, [r7, #8]
 8011cbc:	1ad0      	subs	r0, r2, r3
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	6a1a      	ldr	r2, [r3, #32]
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	69db      	ldr	r3, [r3, #28]
 8011cc6:	1ad4      	subs	r4, r2, r3
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	69db      	ldr	r3, [r3, #28]
 8011cd0:	1ad5      	subs	r5, r2, r3
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	69db      	ldr	r3, [r3, #28]
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	6911      	ldr	r1, [r2, #16]
 8011ce0:	68fa      	ldr	r2, [r7, #12]
 8011ce2:	68d2      	ldr	r2, [r2, #12]
 8011ce4:	1a8a      	subs	r2, r1, r2
 8011ce6:	9201      	str	r2, [sp, #4]
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462b      	mov	r3, r5
 8011cec:	4622      	mov	r2, r4
 8011cee:	4601      	mov	r1, r0
 8011cf0:	4804      	ldr	r0, [pc, #16]	@ (8011d04 <prvTCPHandleFin+0x1b8>)
 8011cf2:	f00f fdd1 	bl	8021898 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8011cf6:	69fb      	ldr	r3, [r7, #28]
    }
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3720      	adds	r7, #32
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8011d00:	20001484 	.word	0x20001484
 8011d04:	08025b1c 	.word	0x08025b1c

08011d08 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011d08:	b590      	push	{r4, r7, lr}
 8011d0a:	b09b      	sub	sp, #108	@ 0x6c
 8011d0c:	af02      	add	r7, sp, #8
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f7f7 fd1e 	bl	800975c <uxIPHeaderSizeSocket>
 8011d20:	4603      	mov	r3, r0
 8011d22:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011d24:	4423      	add	r3, r4
 8011d26:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d2a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d36:	7b5b      	ldrb	r3, [r3, #13]
 8011d38:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	061a      	lsls	r2, r3, #24
 8011d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	021b      	lsls	r3, r3, #8
 8011d48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011d4c:	431a      	orrs	r2, r3
 8011d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	0a1b      	lsrs	r3, r3, #8
 8011d54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011d58:	431a      	orrs	r2, r3
 8011d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	0e1b      	lsrs	r3, r3, #24
 8011d60:	4313      	orrs	r3, r2
 8011d62:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8011d6c:	2310      	movs	r3, #16
 8011d6e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8011d72:	2317      	movs	r3, #23
 8011d74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011d7e:	2b02      	cmp	r3, #2
 8011d80:	d105      	bne.n	8011d8e <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8011d82:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8011d86:	f043 0302 	orr.w	r3, r3, #2
 8011d8a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8011d8e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011d92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011d96:	4013      	ands	r3, r2
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d044      	beq.n	8011e2c <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011da8:	2b04      	cmp	r3, #4
 8011daa:	d101      	bne.n	8011db0 <prvHandleSynReceived+0xa8>
 8011dac:	4977      	ldr	r1, [pc, #476]	@ (8011f8c <prvHandleSynReceived+0x284>)
 8011dae:	e000      	b.n	8011db2 <prvHandleSynReceived+0xaa>
 8011db0:	4977      	ldr	r1, [pc, #476]	@ (8011f90 <prvHandleSynReceived+0x288>)
 8011db2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011db6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011dba:	4876      	ldr	r0, [pc, #472]	@ (8011f94 <prvHandleSynReceived+0x28c>)
 8011dbc:	f00f fd6c 	bl	8021898 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011dc0:	2108      	movs	r1, #8
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f7fe fd5c 	bl	8010880 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8011dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	061a      	lsls	r2, r3, #24
 8011dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	021b      	lsls	r3, r3, #8
 8011dd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011dd8:	431a      	orrs	r2, r3
 8011dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	0a1b      	lsrs	r3, r3, #8
 8011de0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011de4:	431a      	orrs	r2, r3
 8011de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011de8:	689b      	ldr	r3, [r3, #8]
 8011dea:	0e1b      	lsrs	r3, r3, #24
 8011dec:	431a      	orrs	r2, r3
 8011dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011df0:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011df6:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8011df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dfa:	7b5b      	ldrb	r3, [r3, #13]
 8011dfc:	f043 0304 	orr.w	r3, r3, #4
 8011e00:	b2da      	uxtb	r2, r3
 8011e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e04:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f7f7 fca8 	bl	800975c <uxIPHeaderSizeSocket>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	4413      	add	r3, r2
 8011e12:	3314      	adds	r3, #20
 8011e14:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e18:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	3314      	adds	r3, #20
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	b2da      	uxtb	r2, r3
 8011e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e28:	731a      	strb	r2, [r3, #12]
 8011e2a:	e0aa      	b.n	8011f82 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e34:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e3e:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	d12e      	bne.n	8011eaa <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	f7f7 fc85 	bl	800975c <uxIPHeaderSizeSocket>
 8011e52:	4603      	mov	r3, r0
 8011e54:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8011e56:	33a0      	adds	r3, #160	@ 0xa0
 8011e58:	68fa      	ldr	r2, [r7, #12]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	330a      	adds	r3, #10
 8011e5e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e62:	2210      	movs	r2, #16
 8011e64:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e68:	2210      	movs	r2, #16
 8011e6a:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011e7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011e80:	f003 f8ec 	bl	801505c <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e86:	1c5a      	adds	r2, r3, #1
 8011e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e8a:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8011e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e8e:	1c5a      	adds	r2, r3, #1
 8011e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e92:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8011e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e96:	6a1b      	ldr	r3, [r3, #32]
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e9c:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8011e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ea6:	635a      	str	r2, [r3, #52]	@ 0x34
 8011ea8:	e005      	b.n	8011eb6 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d102      	bne.n	8011eb6 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011eb4:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eb8:	69db      	ldr	r3, [r3, #28]
 8011eba:	1c5a      	adds	r2, r3, #1
 8011ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	7a1b      	ldrb	r3, [r3, #8]
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <prvHandleSynReceived+0x1ca>
 8011ece:	200a      	movs	r0, #10
 8011ed0:	e000      	b.n	8011ed4 <prvHandleSynReceived+0x1cc>
 8011ed2:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011eda:	f107 0210 	add.w	r2, r7, #16
 8011ede:	2328      	movs	r3, #40	@ 0x28
 8011ee0:	f7fc fec0 	bl	800ec64 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011eea:	2b02      	cmp	r3, #2
 8011eec:	d101      	bne.n	8011ef2 <prvHandleSynReceived+0x1ea>
 8011eee:	492a      	ldr	r1, [pc, #168]	@ (8011f98 <prvHandleSynReceived+0x290>)
 8011ef0:	e000      	b.n	8011ef4 <prvHandleSynReceived+0x1ec>
 8011ef2:	492a      	ldr	r1, [pc, #168]	@ (8011f9c <prvHandleSynReceived+0x294>)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011ef8:	461c      	mov	r4, r3
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011f00:	461a      	mov	r2, r3
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011f08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f107 0310 	add.w	r3, r7, #16
 8011f14:	9001      	str	r0, [sp, #4]
 8011f16:	9200      	str	r2, [sp, #0]
 8011f18:	4622      	mov	r2, r4
 8011f1a:	4821      	ldr	r0, [pc, #132]	@ (8011fa0 <prvHandleSynReceived+0x298>)
 8011f1c:	f00f fcbc 	bl	8021898 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	d002      	beq.n	8011f30 <prvHandleSynReceived+0x228>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d014      	beq.n	8011f5a <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f32:	2210      	movs	r2, #16
 8011f34:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f7f7 fc10 	bl	800975c <uxIPHeaderSizeSocket>
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	4413      	add	r3, r2
 8011f42:	3314      	adds	r3, #20
 8011f44:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	3314      	adds	r3, #20
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f58:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011f60:	f003 0310 	and.w	r3, r3, #16
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d107      	bne.n	8011f7a <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2200      	movs	r2, #0
 8011f76:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8011f7a:	2105      	movs	r1, #5
 8011f7c:	68f8      	ldr	r0, [r7, #12]
 8011f7e:	f7fe fc7f 	bl	8010880 <vTCPStateChange>
        }

        return xSendLength;
 8011f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8011f84:	4618      	mov	r0, r3
 8011f86:	3764      	adds	r7, #100	@ 0x64
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd90      	pop	{r4, r7, pc}
 8011f8c:	08025b5c 	.word	0x08025b5c
 8011f90:	08025b6c 	.word	0x08025b6c
 8011f94:	08025b7c 	.word	0x08025b7c
 8011f98:	08025ba0 	.word	0x08025ba0
 8011f9c:	08025ba8 	.word	0x08025ba8
 8011fa0:	08025bb0 	.word	0x08025bb0

08011fa4 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011fa4:	b590      	push	{r4, r7, lr}
 8011fa6:	b097      	sub	sp, #92	@ 0x5c
 8011fa8:	af02      	add	r7, sp, #8
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	607a      	str	r2, [r7, #4]
 8011fb0:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f7f7 fbcf 	bl	800975c <uxIPHeaderSizeSocket>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011fc2:	4423      	add	r3, r4
 8011fc4:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fc8:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fd4:	7b5b      	ldrb	r3, [r3, #13]
 8011fd6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8011fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	061a      	lsls	r2, r3, #24
 8011fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	021b      	lsls	r3, r3, #8
 8011fe6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011fea:	431a      	orrs	r2, r3
 8011fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	0a1b      	lsrs	r3, r3, #8
 8011ff2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011ff6:	431a      	orrs	r2, r3
 8011ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	0e1b      	lsrs	r3, r3, #24
 8011ffe:	4313      	orrs	r3, r2
 8012000:	637b      	str	r3, [r7, #52]	@ 0x34
 8012002:	2300      	movs	r3, #0
 8012004:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012006:	2300      	movs	r3, #0
 8012008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801200a:	2300      	movs	r3, #0
 801200c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 801200e:	2300      	movs	r3, #0
 8012010:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012014:	89db      	ldrh	r3, [r3, #14]
 8012016:	b29b      	uxth	r3, r3
 8012018:	021b      	lsls	r3, r3, #8
 801201a:	b21a      	sxth	r2, r3
 801201c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801201e:	89db      	ldrh	r3, [r3, #14]
 8012020:	b29b      	uxth	r3, r3
 8012022:	0a1b      	lsrs	r3, r3, #8
 8012024:	b29b      	uxth	r3, r3
 8012026:	b21b      	sxth	r3, r3
 8012028:	4313      	orrs	r3, r2
 801202a:	b21b      	sxth	r3, r3
 801202c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801202e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012042:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 801204c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012050:	f003 0310 	and.w	r3, r3, #16
 8012054:	2b00      	cmp	r3, #0
 8012056:	f000 8106 	beq.w	8012266 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 801205a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801205c:	689b      	ldr	r3, [r3, #8]
 801205e:	061a      	lsls	r2, r3, #24
 8012060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	021b      	lsls	r3, r3, #8
 8012066:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801206a:	431a      	orrs	r2, r3
 801206c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801206e:	689b      	ldr	r3, [r3, #8]
 8012070:	0a1b      	lsrs	r3, r3, #8
 8012072:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012076:	431a      	orrs	r2, r3
 8012078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801207a:	689b      	ldr	r3, [r3, #8]
 801207c:	0e1b      	lsrs	r3, r3, #24
 801207e:	4313      	orrs	r3, r2
 8012080:	4619      	mov	r1, r3
 8012082:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012084:	f003 feee 	bl	8015e64 <ulTCPWindowTxAck>
 8012088:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012090:	2b00      	cmp	r3, #0
 8012092:	d02c      	beq.n	80120ee <prvHandleEstablished+0x14a>
 8012094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012096:	2b00      	cmp	r3, #0
 8012098:	d029      	beq.n	80120ee <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80120a0:	2300      	movs	r3, #0
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120a6:	2200      	movs	r2, #0
 80120a8:	2100      	movs	r1, #0
 80120aa:	f7fe fa42 	bl	8010532 <uxStreamBufferGet>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d01c      	beq.n	80120ee <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	f043 0202 	orr.w	r2, r3, #2
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120c4:	f003 0302 	and.w	r3, r3, #2
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d005      	beq.n	80120d8 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d005      	beq.n	80120ee <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80120e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d002      	beq.n	80120fe <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 80120f8:	68f8      	ldr	r0, [r7, #12]
 80120fa:	f001 fb13 	bl	8013724 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80120fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012100:	6a1a      	ldr	r2, [r3, #32]
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801210e:	f003 0320 	and.w	r3, r3, #32
 8012112:	b2db      	uxtb	r3, r3
 8012114:	2b00      	cmp	r3, #0
 8012116:	d105      	bne.n	8012124 <prvHandleEstablished+0x180>
 8012118:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801211c:	f003 0301 	and.w	r3, r3, #1
 8012120:	2b00      	cmp	r3, #0
 8012122:	d06b      	beq.n	80121fc <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8012124:	2301      	movs	r3, #1
 8012126:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801212e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b00      	cmp	r3, #0
 8012136:	d13a      	bne.n	80121ae <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8012138:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801213a:	f002 fe87 	bl	8014e4c <xTCPWindowRxEmpty>
 801213e:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8012140:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012142:	f003 fafd 	bl	8015740 <xTCPWindowTxDone>
 8012146:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8012148:	6a3b      	ldr	r3, [r7, #32]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d002      	beq.n	8012154 <prvHandleEstablished+0x1b0>
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10f      	bne.n	8012174 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012158:	4619      	mov	r1, r3
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012160:	461a      	mov	r2, r3
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	6a3b      	ldr	r3, [r7, #32]
 8012168:	4841      	ldr	r0, [pc, #260]	@ (8012270 <prvHandleEstablished+0x2cc>)
 801216a:	f00f fb95 	bl	8021898 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801216e:	2300      	movs	r3, #0
 8012170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012172:	e01c      	b.n	80121ae <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8012174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	441a      	add	r2, r3
 801217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801217c:	691b      	ldr	r3, [r3, #16]
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 8012182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012184:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	2b01      	cmp	r3, #1
 801218a:	dd10      	ble.n	80121ae <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 801218c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801218e:	691a      	ldr	r2, [r3, #16]
 8012190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	1ad1      	subs	r1, r2, r3
 8012196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012198:	699a      	ldr	r2, [r3, #24]
 801219a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801219c:	68db      	ldr	r3, [r3, #12]
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	460a      	mov	r2, r1
 80121a2:	69b9      	ldr	r1, [r7, #24]
 80121a4:	4833      	ldr	r0, [pc, #204]	@ (8012274 <prvHandleEstablished+0x2d0>)
 80121a6:	f00f fb77 	bl	8021898 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 80121aa:	2300      	movs	r3, #0
 80121ac:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 80121ae:	4b32      	ldr	r3, [pc, #200]	@ (8012278 <prvHandleEstablished+0x2d4>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	dd11      	ble.n	80121da <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80121bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121be:	1ad1      	subs	r1, r2, r3
 80121c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121c2:	6a1a      	ldr	r2, [r3, #32]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	9300      	str	r3, [sp, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	460a      	mov	r2, r1
 80121d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80121d4:	4829      	ldr	r0, [pc, #164]	@ (801227c <prvHandleEstablished+0x2d8>)
 80121d6:	f00f fb5f 	bl	8021898 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 80121da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00d      	beq.n	80121fc <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80121e0:	68fa      	ldr	r2, [r7, #12]
 80121e2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80121e6:	f043 0320 	orr.w	r3, r3, #32
 80121ea:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	4619      	mov	r1, r3
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f7ff fca9 	bl	8011b4c <prvTCPHandleFin>
 80121fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 80121fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d131      	bne.n	8012266 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012204:	2210      	movs	r2, #16
 8012206:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d01d      	beq.n	801224a <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801220e:	68f8      	ldr	r0, [r7, #12]
 8012210:	f7f7 faa4 	bl	800975c <uxIPHeaderSizeSocket>
 8012214:	4602      	mov	r2, r0
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	4413      	add	r3, r2
 801221a:	3314      	adds	r3, #20
 801221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 801221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012220:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	b2db      	uxtb	r3, r3
 8012226:	3314      	adds	r3, #20
 8012228:	b2db      	uxtb	r3, r3
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	b2da      	uxtb	r2, r3
 801222e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012230:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d003      	beq.n	801224a <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012248:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d10a      	bne.n	8012266 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012250:	683a      	ldr	r2, [r7, #0]
 8012252:	68b9      	ldr	r1, [r7, #8]
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f001 f8a1 	bl	801339c <prvTCPPrepareSend>
 801225a:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	2b00      	cmp	r3, #0
 8012260:	dd01      	ble.n	8012266 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8012266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8012268:	4618      	mov	r0, r3
 801226a:	3754      	adds	r7, #84	@ 0x54
 801226c:	46bd      	mov	sp, r7
 801226e:	bd90      	pop	{r4, r7, pc}
 8012270:	08025be4 	.word	0x08025be4
 8012274:	08025c10 	.word	0x08025c10
 8012278:	20001484 	.word	0x20001484
 801227c:	08025c44 	.word	0x08025c44

08012280 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012280:	b590      	push	{r4, r7, lr}
 8012282:	b08f      	sub	sp, #60	@ 0x3c
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	4618      	mov	r0, r3
 8012296:	f7f7 fa47 	bl	8009728 <uxIPHeaderSizePacket>
 801229a:	4603      	mov	r3, r0
 801229c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801229e:	4423      	add	r3, r4
 80122a0:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80122a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 80122a6:	2300      	movs	r3, #0
 80122a8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80122aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	061a      	lsls	r2, r3, #24
 80122b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	021b      	lsls	r3, r3, #8
 80122b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80122ba:	431a      	orrs	r2, r3
 80122bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	0a1b      	lsrs	r3, r3, #8
 80122c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80122c6:	431a      	orrs	r2, r3
 80122c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	0e1b      	lsrs	r3, r3, #24
 80122ce:	4313      	orrs	r3, r2
 80122d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 80122d2:	2300      	movs	r3, #0
 80122d4:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80122d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122d8:	7b5b      	ldrb	r3, [r3, #13]
 80122da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80122e4:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 80122e6:	2300      	movs	r3, #0
 80122e8:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f107 0208 	add.w	r2, r7, #8
 80122f2:	4611      	mov	r1, r2
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7ff fa64 	bl	80117c2 <prvCheckRxData>
 80122fa:	4603      	mov	r3, r0
 80122fc:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012304:	2b04      	cmp	r3, #4
 8012306:	d90c      	bls.n	8012322 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8012308:	69fb      	ldr	r3, [r7, #28]
 801230a:	691a      	ldr	r2, [r3, #16]
 801230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801230e:	3301      	adds	r3, #1
 8012310:	429a      	cmp	r2, r3
 8012312:	d106      	bne.n	8012322 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801231a:	f043 0301 	orr.w	r3, r3, #1
 801231e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8012322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	441a      	add	r2, r3
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	699b      	ldr	r3, [r3, #24]
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	2b00      	cmp	r3, #0
 8012334:	dd04      	ble.n	8012340 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	441a      	add	r2, r3
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8012340:	68b9      	ldr	r1, [r7, #8]
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	697b      	ldr	r3, [r7, #20]
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7ff fae3 	bl	8011914 <prvStoreRxData>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	da03      	bge.n	801235c <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8012354:	f04f 33ff 	mov.w	r3, #4294967295
 8012358:	637b      	str	r3, [r7, #52]	@ 0x34
 801235a:	e0ae      	b.n	80124ba <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f001 fa0c 	bl	8013780 <prvSetOptions>
 8012368:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012370:	2b04      	cmp	r3, #4
 8012372:	d10c      	bne.n	801238e <prvTCPHandleState+0x10e>
 8012374:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012378:	f003 031f 	and.w	r3, r3, #31
 801237c:	2b02      	cmp	r3, #2
 801237e:	d106      	bne.n	801238e <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 8012380:	4855      	ldr	r0, [pc, #340]	@ (80124d8 <prvTCPHandleState+0x258>)
 8012382:	f00f fa89 	bl	8021898 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8012386:	2103      	movs	r1, #3
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f7fe fa79 	bl	8010880 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801238e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012392:	f003 0301 	and.w	r3, r3, #1
 8012396:	2b00      	cmp	r3, #0
 8012398:	d022      	beq.n	80123e0 <prvTCPHandleState+0x160>
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80123a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d11a      	bne.n	80123e0 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80123aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	441a      	add	r2, r3
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80123ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123be:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80123c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80123d8:	f043 0302 	orr.w	r3, r3, #2
 80123dc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80123e6:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 80123e8:	7bfb      	ldrb	r3, [r7, #15]
 80123ea:	2b0b      	cmp	r3, #11
 80123ec:	d864      	bhi.n	80124b8 <prvTCPHandleState+0x238>
 80123ee:	a201      	add	r2, pc, #4	@ (adr r2, 80123f4 <prvTCPHandleState+0x174>)
 80123f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123f4:	080124b9 	.word	0x080124b9
 80123f8:	080124b9 	.word	0x080124b9
 80123fc:	08012487 	.word	0x08012487
 8012400:	08012425 	.word	0x08012425
 8012404:	08012487 	.word	0x08012487
 8012408:	08012499 	.word	0x08012499
 801240c:	080124a9 	.word	0x080124a9
 8012410:	080124a9 	.word	0x080124a9
 8012414:	080124b9 	.word	0x080124b9
 8012418:	080124b9 	.word	0x080124b9
 801241c:	080124a9 	.word	0x080124a9
 8012420:	080124b9 	.word	0x080124b9
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8012424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f000 fe4e 	bl	80130c8 <prvSetSynAckOptions>
 801242c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 801242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012430:	2212      	movs	r2, #18
 8012432:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f7f7 f991 	bl	800975c <uxIPHeaderSizeSocket>
 801243a:	4602      	mov	r2, r0
 801243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243e:	4413      	add	r3, r2
 8012440:	3314      	adds	r3, #20
 8012442:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801244a:	b2db      	uxtb	r3, r3
 801244c:	3314      	adds	r3, #20
 801244e:	b2db      	uxtb	r3, r3
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	b2da      	uxtb	r2, r3
 8012454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012456:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8012458:	2104      	movs	r1, #4
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f7fe fa10 	bl	8010880 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012462:	1c5a      	adds	r2, r3, #1
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801246a:	1c5a      	adds	r2, r3, #1
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	69db      	ldr	r3, [r3, #28]
 8012474:	1c5a      	adds	r2, r3, #1
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 801247a:	69fb      	ldr	r3, [r7, #28]
 801247c:	69db      	ldr	r3, [r3, #28]
 801247e:	1c5a      	adds	r2, r3, #1
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	621a      	str	r2, [r3, #32]
                    break;
 8012484:	e019      	b.n	80124ba <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	6819      	ldr	r1, [r3, #0]
 801248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801248c:	697a      	ldr	r2, [r7, #20]
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7ff fc3a 	bl	8011d08 <prvHandleSynReceived>
 8012494:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012496:	e010      	b.n	80124ba <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8012498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801249a:	697a      	ldr	r2, [r7, #20]
 801249c:	6839      	ldr	r1, [r7, #0]
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ff fd80 	bl	8011fa4 <prvHandleEstablished>
 80124a4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80124a6:	e008      	b.n	80124ba <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4619      	mov	r1, r3
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f7ff fb4c 	bl	8011b4c <prvTCPHandleFin>
 80124b4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80124b6:	e000      	b.n	80124ba <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 80124b8:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 80124ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124bc:	2b00      	cmp	r3, #0
 80124be:	dd06      	ble.n	80124ce <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 80124c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124c2:	697a      	ldr	r2, [r7, #20]
 80124c4:	6839      	ldr	r1, [r7, #0]
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f001 fa1a 	bl	8013900 <prvSendData>
 80124cc:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 80124ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80124d0:	4618      	mov	r0, r3
 80124d2:	373c      	adds	r7, #60	@ 0x3c
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd90      	pop	{r4, r7, pc}
 80124d8:	08025c7c 	.word	0x08025c7c

080124dc <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 80124e6:	2300      	movs	r3, #0
 80124e8:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80124ea:	6838      	ldr	r0, [r7, #0]
 80124ec:	f7f7 f91c 	bl	8009728 <uxIPHeaderSizePacket>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b14      	cmp	r3, #20
 80124f4:	d002      	beq.n	80124fc <prvHandleListen+0x20>
 80124f6:	2b28      	cmp	r3, #40	@ 0x28
 80124f8:	d006      	beq.n	8012508 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 80124fa:	e00b      	b.n	8012514 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 80124fc:	6839      	ldr	r1, [r7, #0]
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f000 f8ee 	bl	80126e0 <prvHandleListen_IPV4>
 8012504:	60f8      	str	r0, [r7, #12]
                    break;
 8012506:	e005      	b.n	8012514 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8012508:	6839      	ldr	r1, [r7, #0]
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f000 fa10 	bl	8012930 <prvHandleListen_IPV6>
 8012510:	60f8      	str	r0, [r7, #12]
                    break;
 8012512:	bf00      	nop
        }

        return pxNewSocket;
 8012514:	68fb      	ldr	r3, [r7, #12]
    }
 8012516:	4618      	mov	r0, r3
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
	...

08012520 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8012520:	b590      	push	{r4, r7, lr}
 8012522:	b08f      	sub	sp, #60	@ 0x3c
 8012524:	af04      	add	r7, sp, #16
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	6a1a      	ldr	r2, [r3, #32]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d009      	beq.n	80125d6 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125ce:	f043 0205 	orr.w	r2, r3, #5
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 80125d6:	f107 030c 	add.w	r3, r7, #12
 80125da:	4619      	mov	r1, r3
 80125dc:	6838      	ldr	r0, [r7, #0]
 80125de:	f7fc fb65 	bl	800ecac <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80125e8:	f043 0304 	orr.w	r3, r3, #4
 80125ec:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	683a      	ldr	r2, [r7, #0]
 80125f4:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80125fc:	3301      	adds	r3, #1
 80125fe:	b29a      	uxth	r2, r3
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801260a:	2b00      	cmp	r3, #0
 801260c:	d102      	bne.n	8012614 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012618:	4619      	mov	r1, r3
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012620:	4618      	mov	r0, r3
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012628:	461c      	mov	r4, r3
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012630:	2b01      	cmp	r3, #1
 8012632:	d101      	bne.n	8012638 <prvTCPSocketCopy+0x118>
 8012634:	4a17      	ldr	r2, [pc, #92]	@ (8012694 <prvTCPSocketCopy+0x174>)
 8012636:	e000      	b.n	801263a <prvTCPSocketCopy+0x11a>
 8012638:	4a17      	ldr	r2, [pc, #92]	@ (8012698 <prvTCPSocketCopy+0x178>)
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d002      	beq.n	8012646 <prvTCPSocketCopy+0x126>
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012644:	e000      	b.n	8012648 <prvTCPSocketCopy+0x128>
 8012646:	2300      	movs	r3, #0
 8012648:	9303      	str	r3, [sp, #12]
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	9302      	str	r3, [sp, #8]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	9301      	str	r3, [sp, #4]
 8012652:	9200      	str	r2, [sp, #0]
 8012654:	4623      	mov	r3, r4
 8012656:	4602      	mov	r2, r0
 8012658:	4810      	ldr	r0, [pc, #64]	@ (801269c <prvTCPSocketCopy+0x17c>)
 801265a:	f00f f91d 	bl	8021898 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801265e:	f107 010c 	add.w	r1, r7, #12
 8012662:	2301      	movs	r3, #1
 8012664:	2218      	movs	r2, #24
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7fb fccc 	bl	800e004 <vSocketBind>
 801266c:	4603      	mov	r3, r0
 801266e:	2b00      	cmp	r3, #0
 8012670:	d008      	beq.n	8012684 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8012672:	480b      	ldr	r0, [pc, #44]	@ (80126a0 <prvTCPSocketCopy+0x180>)
 8012674:	f00f f910 	bl	8021898 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f7fb fd77 	bl	800e16c <vSocketClose>
            xResult = pdFALSE;
 801267e:	2300      	movs	r3, #0
 8012680:	627b      	str	r3, [r7, #36]	@ 0x24
 8012682:	e001      	b.n	8012688 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8012684:	2301      	movs	r3, #1
 8012686:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8012688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801268a:	4618      	mov	r0, r3
 801268c:	372c      	adds	r7, #44	@ 0x2c
 801268e:	46bd      	mov	sp, r7
 8012690:	bd90      	pop	{r4, r7, pc}
 8012692:	bf00      	nop
 8012694:	08025cbc 	.word	0x08025cbc
 8012698:	08025cc0 	.word	0x08025cc0
 801269c:	08025cc4 	.word	0x08025cc4
 80126a0:	08025d08 	.word	0x08025d08

080126a4 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	db02      	blt.n	80126bc <FreeRTOS_GetTCPStateName+0x18>
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2b0c      	cmp	r3, #12
 80126ba:	dd04      	ble.n	80126c6 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 80126bc:	230d      	movs	r3, #13
 80126be:	60fb      	str	r3, [r7, #12]
                xIndex--;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	3b01      	subs	r3, #1
 80126c4:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 80126c6:	4a05      	ldr	r2, [pc, #20]	@ (80126dc <FreeRTOS_GetTCPStateName+0x38>)
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 80126ce:	4618      	mov	r0, r3
 80126d0:	3714      	adds	r7, #20
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop
 80126dc:	08026fd0 	.word	0x08026fd0

080126e0 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80126e0:	b590      	push	{r4, r7, lr}
 80126e2:	b08f      	sub	sp, #60	@ 0x3c
 80126e4:	af02      	add	r7, sp, #8
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 80126ea:	2300      	movs	r3, #0
 80126ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80126ee:	2300      	movs	r3, #0
 80126f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 80126f2:	2300      	movs	r3, #0
 80126f4:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 80126f6:	2300      	movs	r3, #0
 80126f8:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 80126fa:	2300      	movs	r3, #0
 80126fc:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d008      	beq.n	8012716 <prvHandleListen_IPV4+0x36>
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d005      	beq.n	8012716 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012714:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8012716:	6a3b      	ldr	r3, [r7, #32]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d015      	beq.n	8012748 <prvHandleListen_IPV4+0x68>
 801271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801271e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8012722:	6a3b      	ldr	r3, [r7, #32]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	429a      	cmp	r2, r3
 8012728:	d10e      	bne.n	8012748 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 801272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801272c:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8012734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012736:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 801273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801273c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801273e:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012740:	f7ee ffaa 	bl	8001698 <ulApplicationGetNextSequenceNumber>
 8012744:	6278      	str	r0, [r7, #36]	@ 0x24
 8012746:	e001      	b.n	801274c <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8012748:	2300      	movs	r3, #0
 801274a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 801274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274e:	2b00      	cmp	r3, #0
 8012750:	d059      	beq.n	8012806 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012758:	f003 0308 	and.w	r3, r3, #8
 801275c:	b2db      	uxtb	r3, r3
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00c      	beq.n	801277c <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801276c:	f043 0304 	orr.w	r3, r3, #4
 8012770:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	67da      	str	r2, [r3, #124]	@ 0x7c
 801277a:	e044      	b.n	8012806 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801277c:	2300      	movs	r3, #0
 801277e:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801278c:	429a      	cmp	r2, r3
 801278e:	d31b      	bcc.n	80127c8 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012794:	4619      	mov	r1, r3
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801279c:	461a      	mov	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80127a4:	4618      	mov	r0, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d101      	bne.n	80127b4 <prvHandleListen_IPV4+0xd4>
 80127b0:	4b5b      	ldr	r3, [pc, #364]	@ (8012920 <prvHandleListen_IPV4+0x240>)
 80127b2:	e000      	b.n	80127b6 <prvHandleListen_IPV4+0xd6>
 80127b4:	4b5b      	ldr	r3, [pc, #364]	@ (8012924 <prvHandleListen_IPV4+0x244>)
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	4603      	mov	r3, r0
 80127ba:	485b      	ldr	r0, [pc, #364]	@ (8012928 <prvHandleListen_IPV4+0x248>)
 80127bc:	f00f f86c 	bl	8021898 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80127c0:	6838      	ldr	r0, [r7, #0]
 80127c2:	f001 f9d1 	bl	8013b68 <prvTCPSendReset>
 80127c6:	e01e      	b.n	8012806 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80127c8:	2206      	movs	r2, #6
 80127ca:	2101      	movs	r1, #1
 80127cc:	2002      	movs	r0, #2
 80127ce:	f7fb f8bf 	bl	800d950 <FreeRTOS_socket>
 80127d2:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d003      	beq.n	80127e2 <prvHandleListen_IPV4+0x102>
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127e0:	d106      	bne.n	80127f0 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80127e2:	4852      	ldr	r0, [pc, #328]	@ (801292c <prvHandleListen_IPV4+0x24c>)
 80127e4:	f00f f858 	bl	8021898 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80127e8:	6838      	ldr	r0, [r7, #0]
 80127ea:	f001 f9bd 	bl	8013b68 <prvTCPSendReset>
 80127ee:	e00a      	b.n	8012806 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80127f0:	6879      	ldr	r1, [r7, #4]
 80127f2:	6978      	ldr	r0, [r7, #20]
 80127f4:	f7ff fe94 	bl	8012520 <prvTCPSocketCopy>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d003      	beq.n	8012806 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012802:	2301      	movs	r3, #1
 8012804:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012808:	2b00      	cmp	r3, #0
 801280a:	f000 8083 	beq.w	8012914 <prvHandleListen_IPV4+0x234>
 801280e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012810:	2b00      	cmp	r3, #0
 8012812:	d07f      	beq.n	8012914 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012818:	6838      	ldr	r0, [r7, #0]
 801281a:	f7f6 ff85 	bl	8009728 <uxIPHeaderSizePacket>
 801281e:	4603      	mov	r3, r0
 8012820:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012822:	4423      	add	r3, r4
 8012824:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801282a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801282c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801282e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012830:	7a13      	ldrb	r3, [r2, #8]
 8012832:	f36f 0300 	bfc	r3, #0, #1
 8012836:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8012838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801283c:	b29b      	uxth	r3, r3
 801283e:	021b      	lsls	r3, r3, #8
 8012840:	b21a      	sxth	r2, r3
 8012842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012844:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012846:	b29b      	uxth	r3, r3
 8012848:	0a1b      	lsrs	r3, r3, #8
 801284a:	b29b      	uxth	r3, r3
 801284c:	b21b      	sxth	r3, r3
 801284e:	4313      	orrs	r3, r2
 8012850:	b21b      	sxth	r3, r3
 8012852:	b29a      	uxth	r2, r3
 8012854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012856:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 801285a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801285c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012860:	061a      	lsls	r2, r3, #24
 8012862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012864:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012868:	021b      	lsls	r3, r3, #8
 801286a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801286e:	431a      	orrs	r2, r3
 8012870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012872:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012876:	0a1b      	lsrs	r3, r3, #8
 8012878:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801287c:	431a      	orrs	r2, r3
 801287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012880:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012884:	0e1b      	lsrs	r3, r3, #24
 8012886:	431a      	orrs	r2, r3
 8012888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801288a:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801288e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012890:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	061a      	lsls	r2, r3, #24
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	021b      	lsls	r3, r3, #8
 80128a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80128a4:	431a      	orrs	r2, r3
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	0a1b      	lsrs	r3, r3, #8
 80128ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80128b0:	431a      	orrs	r2, r3
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	0e1b      	lsrs	r3, r3, #24
 80128b8:	431a      	orrs	r2, r3
 80128ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128bc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80128c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128c2:	f002 f877 	bl	80149b4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80128c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128c8:	f000 fb66 	bl	8012f98 <prvTCPCreateWindow>
 80128cc:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d008      	beq.n	80128e6 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d102      	bne.n	80128e0 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 80128da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128dc:	f7fb fc46 	bl	800e16c <vSocketClose>
                }

                pxReturn = NULL;
 80128e0:	2300      	movs	r3, #0
 80128e2:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80128e4:	e016      	b.n	8012914 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80128e6:	2103      	movs	r1, #3
 80128e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128ea:	f7fd ffc9 	bl	8010880 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80128f4:	d902      	bls.n	80128fc <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80128f6:	235a      	movs	r3, #90	@ 0x5a
 80128f8:	61bb      	str	r3, [r7, #24]
 80128fa:	e002      	b.n	8012902 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012900:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012904:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801290c:	69ba      	ldr	r2, [r7, #24]
 801290e:	4619      	mov	r1, r3
 8012910:	f00f f9de 	bl	8021cd0 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012916:	4618      	mov	r0, r3
 8012918:	3734      	adds	r7, #52	@ 0x34
 801291a:	46bd      	mov	sp, r7
 801291c:	bd90      	pop	{r4, r7, pc}
 801291e:	bf00      	nop
 8012920:	08025db0 	.word	0x08025db0
 8012924:	08025db4 	.word	0x08025db4
 8012928:	08025db8 	.word	0x08025db8
 801292c:	08025de8 	.word	0x08025de8

08012930 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012930:	b590      	push	{r4, r7, lr}
 8012932:	b08f      	sub	sp, #60	@ 0x3c
 8012934:	af02      	add	r7, sp, #8
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801293a:	2300      	movs	r3, #0
 801293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801293e:	2300      	movs	r3, #0
 8012940:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 8012942:	2300      	movs	r3, #0
 8012944:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8012946:	2300      	movs	r3, #0
 8012948:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 801294a:	2300      	movs	r3, #0
 801294c:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d024      	beq.n	801299e <prvHandleListen_IPV6+0x6e>
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d021      	beq.n	801299e <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801295e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012964:	2b00      	cmp	r3, #0
 8012966:	d103      	bne.n	8012970 <prvHandleListen_IPV6+0x40>
 8012968:	215d      	movs	r1, #93	@ 0x5d
 801296a:	487b      	ldr	r0, [pc, #492]	@ (8012b58 <prvHandleListen_IPV6+0x228>)
 801296c:	f7ee fe74 	bl	8001658 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8012970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012972:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801297a:	3338      	adds	r3, #56	@ 0x38
 801297c:	2210      	movs	r2, #16
 801297e:	4619      	mov	r1, r3
 8012980:	f010 f93b 	bl	8022bfa <memcmp>
 8012984:	4603      	mov	r3, r0
 8012986:	2b00      	cmp	r3, #0
 8012988:	d109      	bne.n	801299e <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 801298a:	f107 0308 	add.w	r3, r7, #8
 801298e:	4618      	mov	r0, r3
 8012990:	f7ee ff2c 	bl	80017ec <xApplicationGetRandomNumber>
 8012994:	4603      	mov	r3, r0
 8012996:	2b01      	cmp	r3, #1
 8012998:	d101      	bne.n	801299e <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 801299a:	2301      	movs	r3, #1
 801299c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 801299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d059      	beq.n	8012a58 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80129aa:	f003 0308 	and.w	r3, r3, #8
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d00c      	beq.n	80129ce <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80129be:	f043 0304 	orr.w	r3, r3, #4
 80129c2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 80129cc:	e044      	b.n	8012a58 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80129ce:	2300      	movs	r3, #0
 80129d0:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80129de:	429a      	cmp	r2, r3
 80129e0:	d31b      	bcc.n	8012a1a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80129e6:	4619      	mov	r1, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80129ee:	461a      	mov	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80129f6:	4618      	mov	r0, r3
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d101      	bne.n	8012a06 <prvHandleListen_IPV6+0xd6>
 8012a02:	4b56      	ldr	r3, [pc, #344]	@ (8012b5c <prvHandleListen_IPV6+0x22c>)
 8012a04:	e000      	b.n	8012a08 <prvHandleListen_IPV6+0xd8>
 8012a06:	4b56      	ldr	r3, [pc, #344]	@ (8012b60 <prvHandleListen_IPV6+0x230>)
 8012a08:	9300      	str	r3, [sp, #0]
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	4855      	ldr	r0, [pc, #340]	@ (8012b64 <prvHandleListen_IPV6+0x234>)
 8012a0e:	f00e ff43 	bl	8021898 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012a12:	6838      	ldr	r0, [r7, #0]
 8012a14:	f001 f8a8 	bl	8013b68 <prvTCPSendReset>
 8012a18:	e01e      	b.n	8012a58 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012a1a:	2206      	movs	r2, #6
 8012a1c:	2101      	movs	r1, #1
 8012a1e:	200a      	movs	r0, #10
 8012a20:	f7fa ff96 	bl	800d950 <FreeRTOS_socket>
 8012a24:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d003      	beq.n	8012a34 <prvHandleListen_IPV6+0x104>
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a32:	d106      	bne.n	8012a42 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012a34:	484c      	ldr	r0, [pc, #304]	@ (8012b68 <prvHandleListen_IPV6+0x238>)
 8012a36:	f00e ff2f 	bl	8021898 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012a3a:	6838      	ldr	r0, [r7, #0]
 8012a3c:	f001 f894 	bl	8013b68 <prvTCPSendReset>
 8012a40:	e00a      	b.n	8012a58 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012a42:	6879      	ldr	r1, [r7, #4]
 8012a44:	69b8      	ldr	r0, [r7, #24]
 8012a46:	f7ff fd6b 	bl	8012520 <prvTCPSocketCopy>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d003      	beq.n	8012a58 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8012a50:	69bb      	ldr	r3, [r7, #24]
 8012a52:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012a54:	2301      	movs	r3, #1
 8012a56:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8012a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d076      	beq.n	8012b4c <prvHandleListen_IPV6+0x21c>
 8012a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d073      	beq.n	8012b4c <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a68:	6838      	ldr	r0, [r7, #0]
 8012a6a:	f7f6 fe5d 	bl	8009728 <uxIPHeaderSizePacket>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012a72:	4423      	add	r3, r4
 8012a74:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 8012a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a80:	7a13      	ldrb	r3, [r2, #8]
 8012a82:	f043 0301 	orr.w	r3, r3, #1
 8012a86:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a8c:	330e      	adds	r3, #14
 8012a8e:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8012a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	021b      	lsls	r3, r3, #8
 8012a98:	b21a      	sxth	r2, r3
 8012a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	0a1b      	lsrs	r3, r3, #8
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	b21b      	sxth	r3, r3
 8012aa6:	4313      	orrs	r3, r2
 8012aa8:	b21b      	sxth	r3, r3
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8012ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ab4:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	3308      	adds	r3, #8
 8012abc:	2210      	movs	r2, #16
 8012abe:	4619      	mov	r1, r3
 8012ac0:	f00f f906 	bl	8021cd0 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012ac4:	68ba      	ldr	r2, [r7, #8]
 8012ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ac8:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	061a      	lsls	r2, r3, #24
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	021b      	lsls	r3, r3, #8
 8012ad8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012adc:	431a      	orrs	r2, r3
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	0a1b      	lsrs	r3, r3, #8
 8012ae4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012ae8:	431a      	orrs	r2, r3
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	0e1b      	lsrs	r3, r3, #24
 8012af0:	431a      	orrs	r2, r3
 8012af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af4:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012afa:	f001 ff5b 	bl	80149b4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b00:	f000 fa4a 	bl	8012f98 <prvTCPCreateWindow>
 8012b04:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d008      	beq.n	8012b1e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012b0c:	6a3b      	ldr	r3, [r7, #32]
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d102      	bne.n	8012b18 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8012b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b14:	f7fb fb2a 	bl	800e16c <vSocketClose>
                }

                pxReturn = NULL;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012b1c:	e016      	b.n	8012b4c <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012b1e:	2103      	movs	r1, #3
 8012b20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b22:	f7fd fead 	bl	8010880 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b2a:	2b5a      	cmp	r3, #90	@ 0x5a
 8012b2c:	d902      	bls.n	8012b34 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012b2e:	235a      	movs	r3, #90	@ 0x5a
 8012b30:	61fb      	str	r3, [r7, #28]
 8012b32:	e002      	b.n	8012b3a <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b38:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b3c:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012b44:	69fa      	ldr	r2, [r7, #28]
 8012b46:	4619      	mov	r1, r3
 8012b48:	f00f f8c2 	bl	8021cd0 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3734      	adds	r7, #52	@ 0x34
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd90      	pop	{r4, r7, pc}
 8012b56:	bf00      	nop
 8012b58:	08025e08 	.word	0x08025e08
 8012b5c:	08025e48 	.word	0x08025e48
 8012b60:	08025e4c 	.word	0x08025e4c
 8012b64:	08025e50 	.word	0x08025e50
 8012b68:	08025e80 	.word	0x08025e80

08012b6c <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8012b74:	2301      	movs	r3, #1
 8012b76:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012b7e:	f003 0308 	and.w	r3, r3, #8
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d107      	bne.n	8012b98 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f000 fa51 	bl	8013030 <prvTCPPrepareConnect>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d001      	beq.n	8012b98 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8012b94:	2300      	movs	r3, #0
 8012b96:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8012b98:	68fb      	ldr	r3, [r7, #12]
    }
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3710      	adds	r7, #16
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
	...

08012ba4 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b088      	sub	sp, #32
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8012bac:	2300      	movs	r3, #0
 8012bae:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012bba:	2b02      	cmp	r3, #2
 8012bbc:	d010      	beq.n	8012be0 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012bc2:	f107 030c 	add.w	r3, r7, #12
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 f859 	bl	8012c80 <prvTCPSendRepeated>
 8012bce:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d04d      	beq.n	8012c72 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f003 ffb5 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
 8012bde:	e048      	b.n	8012c72 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012be6:	2b02      	cmp	r3, #2
 8012be8:	d90d      	bls.n	8012c06 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	4821      	ldr	r0, [pc, #132]	@ (8012c7c <prvTCPSendPacket+0xd8>)
 8012bf8:	f00e fe4e 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012bfc:	2108      	movs	r1, #8
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f7fd fe3e 	bl	8010880 <vTCPStateChange>
 8012c04:	e035      	b.n	8012c72 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7ff ffb0 	bl	8012b6c <prvTCPMakeSurePrepared>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d12f      	bne.n	8012c72 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7f6 fda2 	bl	800975c <uxIPHeaderSizeSocket>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	330e      	adds	r3, #14
 8012c1c:	33a0      	adds	r3, #160	@ 0xa0
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	4413      	add	r3, r2
 8012c22:	330a      	adds	r3, #10
 8012c24:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	4619      	mov	r1, r3
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 fa4c 	bl	80130c8 <prvSetSynAckOptions>
 8012c30:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7f6 fd92 	bl	800975c <uxIPHeaderSizeSocket>
 8012c38:	4602      	mov	r2, r0
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	3314      	adds	r3, #20
 8012c40:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	3314      	adds	r3, #20
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	b2da      	uxtb	r2, r3
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	b2da      	uxtb	r2, r3
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8012c66:	69fa      	ldr	r2, [r7, #28]
 8012c68:	2300      	movs	r3, #0
 8012c6a:	2100      	movs	r1, #0
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 f837 	bl	8012ce0 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012c72:	69fb      	ldr	r3, [r7, #28]
    }
 8012c74:	4618      	mov	r0, r3
 8012c76:	3720      	adds	r7, #32
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	08025ea0 	.word	0x08025ea0

08012c80 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012c92:	2300      	movs	r3, #0
 8012c94:	617b      	str	r3, [r7, #20]
 8012c96:	e019      	b.n	8012ccc <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	6839      	ldr	r1, [r7, #0]
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f000 fb7d 	bl	801339c <prvTCPPrepareSend>
 8012ca2:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	dd14      	ble.n	8012cd4 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	6819      	ldr	r1, [r3, #0]
 8012cae:	68ba      	ldr	r2, [r7, #8]
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f814 	bl	8012ce0 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8012cbe:	693a      	ldr	r2, [r7, #16]
 8012cc0:	68bb      	ldr	r3, [r7, #8]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	617b      	str	r3, [r7, #20]
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	2b07      	cmp	r3, #7
 8012cd0:	d9e2      	bls.n	8012c98 <prvTCPSendRepeated+0x18>
 8012cd2:	e000      	b.n	8012cd6 <prvTCPSendRepeated+0x56>
                break;
 8012cd4:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012cd6:	693b      	ldr	r3, [r7, #16]
    }
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3718      	adds	r7, #24
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b086      	sub	sp, #24
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	607a      	str	r2, [r7, #4]
 8012cec:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d008      	beq.n	8012d0e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8012cfc:	6938      	ldr	r0, [r7, #16]
 8012cfe:	f7f6 fd13 	bl	8009728 <uxIPHeaderSizePacket>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2b28      	cmp	r3, #40	@ 0x28
 8012d06:	d113      	bne.n	8012d30 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012d08:	2301      	movs	r3, #1
 8012d0a:	617b      	str	r3, [r7, #20]
 8012d0c:	e010      	b.n	8012d30 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d008      	beq.n	8012d26 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8012d14:	68f8      	ldr	r0, [r7, #12]
 8012d16:	f7f6 fd21 	bl	800975c <uxIPHeaderSizeSocket>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b28      	cmp	r3, #40	@ 0x28
 8012d1e:	d107      	bne.n	8012d30 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012d20:	2301      	movs	r3, #1
 8012d22:	617b      	str	r3, [r7, #20]
 8012d24:	e004      	b.n	8012d30 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8012d26:	f240 1119 	movw	r1, #281	@ 0x119
 8012d2a:	480c      	ldr	r0, [pc, #48]	@ (8012d5c <prvTCPReturnPacket+0x7c>)
 8012d2c:	f7ee fc94 	bl	8001658 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d105      	bne.n	8012d42 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	687a      	ldr	r2, [r7, #4]
 8012d3a:	68b9      	ldr	r1, [r7, #8]
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f001 fa61 	bl	8014204 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d105      	bne.n	8012d54 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	68b9      	ldr	r1, [r7, #8]
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f000 ff18 	bl	8013b84 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8012d54:	bf00      	nop
 8012d56:	3718      	adds	r7, #24
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	08025ebc 	.word	0x08025ebc

08012d60 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b08a      	sub	sp, #40	@ 0x28
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012d72:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012d7c:	4413      	add	r3, r2
 8012d7e:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d007      	beq.n	8012d9a <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7fd fa9f 	bl	80102d4 <uxStreamBufferFrontSpace>
 8012d96:	6278      	str	r0, [r7, #36]	@ 0x24
 8012d98:	e003      	b.n	8012da2 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012da0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7f7 fa0b 	bl	800a1c4 <FreeRTOS_min_uint32>
 8012dae:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012db6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d107      	bne.n	8012dd0 <prvTCPReturn_CheckTCPWindow+0x70>
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012dc6:	f003 0304 	and.w	r3, r3, #4
 8012dca:	b2db      	uxtb	r3, r3
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d001      	beq.n	8012dd4 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012dda:	461a      	mov	r2, r3
 8012ddc:	6a3b      	ldr	r3, [r7, #32]
 8012dde:	4293      	cmp	r3, r2
 8012de0:	d20a      	bcs.n	8012df8 <prvTCPReturn_CheckTCPWindow+0x98>
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012de8:	461a      	mov	r2, r3
 8012dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dec:	4293      	cmp	r3, r2
 8012dee:	d303      	bcc.n	8012df8 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012df6:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8012dfe:	461a      	mov	r2, r3
 8012e00:	6a3b      	ldr	r3, [r7, #32]
 8012e02:	40d3      	lsrs	r3, r2
 8012e04:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d902      	bls.n	8012e16 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8012e10:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8012e14:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8012e16:	69fb      	ldr	r3, [r7, #28]
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	021b      	lsls	r3, r3, #8
 8012e1c:	b21a      	sxth	r2, r3
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	0a1b      	lsrs	r3, r3, #8
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	b21b      	sxth	r3, r3
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	b21b      	sxth	r3, r3
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8012e32:	68fa      	ldr	r2, [r7, #12]
 8012e34:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012e38:	f36f 0300 	bfc	r3, #0, #1
 8012e3c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	691a      	ldr	r2, [r3, #16]
 8012e44:	6a3b      	ldr	r3, [r7, #32]
 8012e46:	441a      	add	r2, r3
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8012e4c:	bf00      	nop
 8012e4e:	3728      	adds	r7, #40	@ 0x28
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b088      	sub	sp, #32
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	60b9      	str	r1, [r7, #8]
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012e68:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012e72:	4413      	add	r3, r2
 8012e74:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012e7c:	f003 0302 	and.w	r3, r3, #2
 8012e80:	b2db      	uxtb	r3, r3
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d029      	beq.n	8012eda <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8012e86:	68fa      	ldr	r2, [r7, #12]
 8012e88:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012e8c:	f36f 0341 	bfc	r3, #1, #1
 8012e90:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012e9a:	f043 0304 	orr.w	r3, r3, #4
 8012e9e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012ea8:	1e5a      	subs	r2, r3, #1
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	061a      	lsls	r2, r3, #24
 8012eb4:	69bb      	ldr	r3, [r7, #24]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	021b      	lsls	r3, r3, #8
 8012eba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ebe:	431a      	orrs	r2, r3
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	0a1b      	lsrs	r3, r3, #8
 8012ec6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012eca:	431a      	orrs	r2, r3
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	0e1b      	lsrs	r3, r3, #24
 8012ed2:	431a      	orrs	r2, r3
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	605a      	str	r2, [r3, #4]
 8012ed8:	e043      	b.n	8012f62 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012ee0:	061a      	lsls	r2, r3, #24
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012ee8:	021b      	lsls	r3, r3, #8
 8012eea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012eee:	431a      	orrs	r2, r3
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012ef6:	0a1b      	lsrs	r3, r3, #8
 8012ef8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012efc:	431a      	orrs	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012f04:	0e1b      	lsrs	r3, r3, #24
 8012f06:	431a      	orrs	r2, r3
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	7b5b      	ldrb	r3, [r3, #13]
 8012f10:	f003 0301 	and.w	r3, r3, #1
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d024      	beq.n	8012f62 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8012f18:	68f8      	ldr	r0, [r7, #12]
 8012f1a:	f7f6 fc1f 	bl	800975c <uxIPHeaderSizeSocket>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	1a9b      	subs	r3, r3, r2
 8012f24:	3b14      	subs	r3, #20
 8012f26:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	441a      	add	r2, r3
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d014      	beq.n	8012f62 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	7b5b      	ldrb	r3, [r3, #13]
 8012f3c:	f023 0301 	bic.w	r3, r3, #1
 8012f40:	b2da      	uxtb	r2, r3
 8012f42:	69bb      	ldr	r3, [r7, #24]
 8012f44:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	69db      	ldr	r3, [r3, #28]
 8012f4e:	1ad1      	subs	r1, r2, r3
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	69db      	ldr	r3, [r3, #28]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	697a      	ldr	r2, [r7, #20]
 8012f5c:	480d      	ldr	r0, [pc, #52]	@ (8012f94 <prvTCPReturn_SetSequenceNumber+0x140>)
 8012f5e:	f00e fc9b 	bl	8021898 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8012f62:	69fb      	ldr	r3, [r7, #28]
 8012f64:	691b      	ldr	r3, [r3, #16]
 8012f66:	061a      	lsls	r2, r3, #24
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	691b      	ldr	r3, [r3, #16]
 8012f6c:	021b      	lsls	r3, r3, #8
 8012f6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f72:	431a      	orrs	r2, r3
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	0a1b      	lsrs	r3, r3, #8
 8012f7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f7e:	431a      	orrs	r2, r3
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	691b      	ldr	r3, [r3, #16]
 8012f84:	0e1b      	lsrs	r3, r3, #24
 8012f86:	431a      	orrs	r2, r3
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	609a      	str	r2, [r3, #8]
    }
 8012f8c:	bf00      	nop
 8012f8e:	3720      	adds	r7, #32
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	08025ef8 	.word	0x08025ef8

08012f98 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8012f98:	b5b0      	push	{r4, r5, r7, lr}
 8012f9a:	b088      	sub	sp, #32
 8012f9c:	af02      	add	r7, sp, #8
 8012f9e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012fa6:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012fae:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8012fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8013028 <prvTCPCreateWindow+0x90>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d014      	beq.n	8012fe2 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012fbe:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012fc2:	fb02 f103 	mul.w	r1, r2, r3
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012fd8:	9300      	str	r3, [sp, #0]
 8012fda:	4603      	mov	r3, r0
 8012fdc:	4813      	ldr	r0, [pc, #76]	@ (801302c <prvTCPCreateWindow+0x94>)
 8012fde:	f00e fc5b 	bl	8021898 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012fee:	fb02 f103 	mul.w	r1, r2, r3
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012ff8:	fb02 f403 	mul.w	r4, r2, r3
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013008:	687a      	ldr	r2, [r7, #4]
 801300a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 801300e:	9201      	str	r2, [sp, #4]
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	462b      	mov	r3, r5
 8013014:	4622      	mov	r2, r4
 8013016:	f001 ffd7 	bl	8014fc8 <xTCPWindowCreate>
 801301a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 801301c:	68fb      	ldr	r3, [r7, #12]
    }
 801301e:	4618      	mov	r0, r3
 8013020:	3718      	adds	r7, #24
 8013022:	46bd      	mov	sp, r7
 8013024:	bdb0      	pop	{r4, r5, r7, pc}
 8013026:	bf00      	nop
 8013028:	20001484 	.word	0x20001484
 801302c:	08025f18 	.word	0x08025f18

08013030 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013038:	2301      	movs	r3, #1
 801303a:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	7a1b      	ldrb	r3, [r3, #8]
 8013040:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013044:	b2db      	uxtb	r3, r3
 8013046:	2b00      	cmp	r3, #0
 8013048:	d002      	beq.n	8013050 <prvTCPPrepareConnect+0x20>
 801304a:	2b01      	cmp	r3, #1
 801304c:	d005      	beq.n	801305a <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801304e:	e009      	b.n	8013064 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f000 ff69 	bl	8013f28 <prvTCPPrepareConnect_IPV4>
 8013056:	60f8      	str	r0, [r7, #12]
                    break;
 8013058:	e004      	b.n	8013064 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f001 fab4 	bl	80145c8 <prvTCPPrepareConnect_IPV6>
 8013060:	60f8      	str	r0, [r7, #12]
                    break;
 8013062:	bf00      	nop
        }

        return xReturn;
 8013064:	68fb      	ldr	r3, [r7, #12]
    }
 8013066:	4618      	mov	r0, r3
 8013068:	3710      	adds	r7, #16
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
	...

08013070 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8013084:	fb02 f303 	mul.w	r3, r2, r3
 8013088:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 801308a:	2300      	movs	r3, #0
 801308c:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 801308e:	e005      	b.n	801309c <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	085b      	lsrs	r3, r3, #1
 8013094:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8013096:	7afb      	ldrb	r3, [r7, #11]
 8013098:	3301      	adds	r3, #1
 801309a:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130a2:	d2f5      	bcs.n	8013090 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80130b0:	461a      	mov	r2, r3
 80130b2:	7afb      	ldrb	r3, [r7, #11]
 80130b4:	4803      	ldr	r0, [pc, #12]	@ (80130c4 <prvWinScaleFactor+0x54>)
 80130b6:	f00e fbef 	bl	8021898 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 80130ba:	7afb      	ldrb	r3, [r7, #11]
        }
 80130bc:	4618      	mov	r0, r3
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	08025f50 	.word	0x08025f50

080130c8 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80130d8:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	2202      	movs	r2, #2
 80130de:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	2204      	movs	r2, #4
 80130e4:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 80130e6:	89fb      	ldrh	r3, [r7, #14]
 80130e8:	0a1b      	lsrs	r3, r3, #8
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	b2da      	uxtb	r2, r3
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 80130f2:	89fb      	ldrh	r3, [r7, #14]
 80130f4:	b2da      	uxtb	r2, r3
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f7ff ffb8 	bl	8013070 <prvWinScaleFactor>
 8013100:	4603      	mov	r3, r0
 8013102:	461a      	mov	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	2201      	movs	r2, #1
 801310e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	2203      	movs	r2, #3
 8013114:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	2203      	movs	r2, #3
 801311a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8013126:	2308      	movs	r3, #8
 8013128:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 801312a:	683a      	ldr	r2, [r7, #0]
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	4413      	add	r3, r2
 8013130:	3314      	adds	r3, #20
 8013132:	2201      	movs	r2, #1
 8013134:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	3301      	adds	r3, #1
 801313a:	683a      	ldr	r2, [r7, #0]
 801313c:	4413      	add	r3, r2
 801313e:	2201      	movs	r2, #1
 8013140:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	3302      	adds	r3, #2
 8013146:	683a      	ldr	r2, [r7, #0]
 8013148:	4413      	add	r3, r2
 801314a:	2204      	movs	r2, #4
 801314c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	3303      	adds	r3, #3
 8013152:	683a      	ldr	r2, [r7, #0]
 8013154:	4413      	add	r3, r2
 8013156:	2202      	movs	r2, #2
 8013158:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	3304      	adds	r3, #4
 801315e:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 8013160:	68bb      	ldr	r3, [r7, #8]
    }
 8013162:	4618      	mov	r0, r3
 8013164:	3710      	adds	r7, #16
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 801316c:	b580      	push	{r7, lr}
 801316e:	b088      	sub	sp, #32
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
 8013178:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 801317a:	4b38      	ldr	r3, [pc, #224]	@ (801325c <prvTCPBufferResize+0xf0>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00b      	beq.n	801319a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8013182:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8013186:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d102      	bne.n	8013194 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801318e:	2301      	movs	r3, #1
 8013190:	617b      	str	r3, [r7, #20]
 8013192:	e020      	b.n	80131d6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013194:	2300      	movs	r3, #0
 8013196:	617b      	str	r3, [r7, #20]
 8013198:	e01d      	b.n	80131d6 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801319a:	68f8      	ldr	r0, [r7, #12]
 801319c:	f7f6 fade 	bl	800975c <uxIPHeaderSizeSocket>
 80131a0:	4602      	mov	r2, r0
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	4413      	add	r3, r2
 80131a6:	3322      	adds	r3, #34	@ 0x22
 80131a8:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	69ba      	ldr	r2, [r7, #24]
 80131ae:	4413      	add	r3, r2
 80131b0:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	2b59      	cmp	r3, #89	@ 0x59
 80131b6:	d801      	bhi.n	80131bc <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80131b8:	235a      	movs	r3, #90	@ 0x5a
 80131ba:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d004      	beq.n	80131cc <prvTCPBufferResize+0x60>
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131c6:	69ba      	ldr	r2, [r7, #24]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d902      	bls.n	80131d2 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 80131cc:	2301      	movs	r3, #1
 80131ce:	617b      	str	r3, [r7, #20]
 80131d0:	e001      	b.n	80131d6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80131d2:	2300      	movs	r3, #0
 80131d4:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d023      	beq.n	8013224 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80131dc:	2100      	movs	r1, #0
 80131de:	69b8      	ldr	r0, [r7, #24]
 80131e0:	f003 fc4a 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 80131e4:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d031      	beq.n	8013250 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	69ba      	ldr	r2, [r7, #24]
 80131f0:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d00c      	beq.n	8013212 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013204:	461a      	mov	r2, r3
 8013206:	f00e fd63 	bl	8021cd0 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801320a:	68b8      	ldr	r0, [r7, #8]
 801320c:	f003 fc9c 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
 8013210:	e01e      	b.n	8013250 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	33aa      	adds	r3, #170	@ 0xaa
 801321a:	225a      	movs	r2, #90	@ 0x5a
 801321c:	4619      	mov	r1, r3
 801321e:	f00e fd57 	bl	8021cd0 <memcpy>
 8013222:	e015      	b.n	8013250 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d104      	bne.n	8013234 <prvTCPBufferResize+0xc8>
 801322a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 801322e:	480c      	ldr	r0, [pc, #48]	@ (8013260 <prvTCPBufferResize+0xf4>)
 8013230:	f7ee fa12 	bl	8001658 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8013238:	68f8      	ldr	r0, [r7, #12]
 801323a:	f7f6 fa8f 	bl	800975c <uxIPHeaderSizeSocket>
 801323e:	4602      	mov	r2, r0
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	441a      	add	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	4413      	add	r3, r2
 8013248:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8013250:	69fb      	ldr	r3, [r7, #28]
    }
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	0802701c 	.word	0x0802701c
 8013260:	08025ebc 	.word	0x08025ebc

08013264 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8013270:	2300      	movs	r3, #0
 8013272:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8013274:	2300      	movs	r3, #0
 8013276:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d008      	beq.n	8013290 <prvTCPReturn_SetEndPoint+0x2c>
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013282:	2b00      	cmp	r3, #0
 8013284:	d004      	beq.n	8013290 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 801328e:	e078      	b.n	8013382 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 8013290:	483e      	ldr	r0, [pc, #248]	@ (801338c <prvTCPReturn_SetEndPoint+0x128>)
 8013292:	f00e fb01 	bl	8021898 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2b14      	cmp	r3, #20
 801329a:	d003      	beq.n	80132a4 <prvTCPReturn_SetEndPoint+0x40>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2b28      	cmp	r3, #40	@ 0x28
 80132a0:	d03d      	beq.n	801331e <prvTCPReturn_SetEndPoint+0xba>
 80132a2:	e056      	b.n	8013352 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132a8:	330e      	adds	r3, #14
 80132aa:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	691b      	ldr	r3, [r3, #16]
 80132b0:	2108      	movs	r1, #8
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7f9 fea8 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 80132b8:	4602      	mov	r2, r0
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d149      	bne.n	801335a <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	68db      	ldr	r3, [r3, #12]
 80132ca:	061a      	lsls	r2, r3, #24
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	68db      	ldr	r3, [r3, #12]
 80132d0:	021b      	lsls	r3, r3, #8
 80132d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80132d6:	431a      	orrs	r2, r3
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	0a1b      	lsrs	r3, r3, #8
 80132de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80132e2:	431a      	orrs	r2, r3
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	68db      	ldr	r3, [r3, #12]
 80132e8:	0e1b      	lsrs	r3, r3, #24
 80132ea:	ea42 0103 	orr.w	r1, r2, r3
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	691b      	ldr	r3, [r3, #16]
 80132f2:	061a      	lsls	r2, r3, #24
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	021b      	lsls	r3, r3, #8
 80132fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80132fe:	431a      	orrs	r2, r3
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	691b      	ldr	r3, [r3, #16]
 8013304:	0a1b      	lsrs	r3, r3, #8
 8013306:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801330a:	431a      	orrs	r2, r3
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	691b      	ldr	r3, [r3, #16]
 8013310:	0e1b      	lsrs	r3, r3, #24
 8013312:	4313      	orrs	r3, r2
 8013314:	461a      	mov	r2, r3
 8013316:	481e      	ldr	r0, [pc, #120]	@ (8013390 <prvTCPReturn_SetEndPoint+0x12c>)
 8013318:	f00e fabe 	bl	8021898 <lUDPLoggingPrintf>
                        break;
 801331c:	e01d      	b.n	801335a <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013322:	330e      	adds	r3, #14
 8013324:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	3318      	adds	r3, #24
 801332a:	4618      	mov	r0, r3
 801332c:	f7f9 fe26 	bl	800cf7c <FreeRTOS_FindEndPointOnIP_IPv6>
 8013330:	4602      	mov	r2, r0
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10f      	bne.n	801335e <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	f103 0108 	add.w	r1, r3, #8
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	3318      	adds	r3, #24
 8013348:	461a      	mov	r2, r3
 801334a:	4812      	ldr	r0, [pc, #72]	@ (8013394 <prvTCPReturn_SetEndPoint+0x130>)
 801334c:	f00e faa4 	bl	8021898 <lUDPLoggingPrintf>
                        break;
 8013350:	e005      	b.n	801335e <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	2200      	movs	r2, #0
 8013356:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8013358:	e002      	b.n	8013360 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801335a:	bf00      	nop
 801335c:	e000      	b.n	8013360 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801335e:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013364:	2b00      	cmp	r3, #0
 8013366:	d00c      	beq.n	8013382 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801336c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8013370:	4619      	mov	r1, r3
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013376:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 801337a:	461a      	mov	r2, r3
 801337c:	4806      	ldr	r0, [pc, #24]	@ (8013398 <prvTCPReturn_SetEndPoint+0x134>)
 801337e:	f00e fa8b 	bl	8021898 <lUDPLoggingPrintf>
    }
 8013382:	bf00      	nop
 8013384:	3718      	adds	r7, #24
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	08025f84 	.word	0x08025f84
 8013390:	08025fac 	.word	0x08025fac
 8013394:	08025fe0 	.word	0x08025fe0
 8013398:	08026014 	.word	0x08026014

0801339c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 801339c:	b580      	push	{r7, lr}
 801339e:	b096      	sub	sp, #88	@ 0x58
 80133a0:	af02      	add	r7, sp, #8
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 80133a8:	2300      	movs	r3, #0
 80133aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d004      	beq.n	80133be <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80133bc:	e002      	b.n	80133c4 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	33aa      	adds	r3, #170	@ 0xaa
 80133c2:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80133c4:	68f8      	ldr	r0, [r7, #12]
 80133c6:	f7f6 f9c9 	bl	800975c <uxIPHeaderSizeSocket>
 80133ca:	4603      	mov	r3, r0
 80133cc:	330e      	adds	r3, #14
 80133ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80133d0:	4413      	add	r3, r2
 80133d2:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80133da:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 80133dc:	2300      	movs	r3, #0
 80133de:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 80133e0:	2300      	movs	r3, #0
 80133e2:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 80133e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133e6:	7b5b      	ldrb	r3, [r3, #13]
 80133e8:	f043 0310 	orr.w	r3, r3, #16
 80133ec:	b2da      	uxtb	r2, r3
 80133ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133f0:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 80a5 	beq.w	8013548 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013404:	2b01      	cmp	r3, #1
 8013406:	d90a      	bls.n	801341e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801340e:	f107 0210 	add.w	r2, r7, #16
 8013412:	4619      	mov	r1, r3
 8013414:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013416:	f002 fb13 	bl	8015a40 <ulTCPWindowTxGet>
 801341a:	4603      	mov	r3, r0
 801341c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 801341e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013420:	2b00      	cmp	r3, #0
 8013422:	f340 8091 	ble.w	8013548 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	6819      	ldr	r1, [r3, #0]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	f7ff fe9c 	bl	801316c <prvTCPBufferResize>
 8013434:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8013436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013438:	2b00      	cmp	r3, #0
 801343a:	f000 8082 	beq.w	8013542 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013442:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8013444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013448:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801344a:	68f8      	ldr	r0, [r7, #12]
 801344c:	f7f6 f986 	bl	800975c <uxIPHeaderSizeSocket>
 8013450:	4603      	mov	r3, r0
 8013452:	330e      	adds	r3, #14
 8013454:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013456:	4413      	add	r3, r2
 8013458:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	f7f6 f97e 	bl	800975c <uxIPHeaderSizeSocket>
 8013460:	4602      	mov	r2, r0
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	4413      	add	r3, r2
 8013466:	3322      	adds	r3, #34	@ 0x22
 8013468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801346a:	4413      	add	r3, r2
 801346c:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	693a      	ldr	r2, [r7, #16]
 801347e:	4619      	mov	r1, r3
 8013480:	f7fc fef9 	bl	8010276 <uxStreamBufferDistance>
 8013484:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801348c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801348e:	2201      	movs	r2, #1
 8013490:	9200      	str	r2, [sp, #0]
 8013492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013496:	f7fd f84c 	bl	8010532 <uxStreamBufferGet>
 801349a:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 801349c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801349e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d007      	beq.n	80134b4 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 80134a4:	6939      	ldr	r1, [r7, #16]
 80134a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80134ae:	4898      	ldr	r0, [pc, #608]	@ (8013710 <prvTCPPrepareSend+0x374>)
 80134b0:	f00e f9f2 	bl	8021898 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80134ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d041      	beq.n	8013548 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	4619      	mov	r1, r3
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80134d4:	689b      	ldr	r3, [r3, #8]
 80134d6:	461a      	mov	r2, r3
 80134d8:	f7fc fecd 	bl	8010276 <uxStreamBufferDistance>
 80134dc:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 80134de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80134e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d130      	bne.n	8013548 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80134ec:	689b      	ldr	r3, [r3, #8]
 80134ee:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8013504:	6a3b      	ldr	r3, [r7, #32]
 8013506:	9301      	str	r3, [sp, #4]
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013510:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013512:	4880      	ldr	r0, [pc, #512]	@ (8013714 <prvTCPPrepareSend+0x378>)
 8013514:	f00e f9c0 	bl	8021898 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801351a:	7b5b      	ldrb	r3, [r3, #13]
 801351c:	f043 0301 	orr.w	r3, r3, #1
 8013520:	b2da      	uxtb	r2, r3
 8013522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013524:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8013526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801352a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801352c:	441a      	add	r2, r3
 801352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013530:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013532:	68fa      	ldr	r2, [r7, #12]
 8013534:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801353c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8013540:	e002      	b.n	8013548 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8013542:	f04f 33ff 	mov.w	r3, #4294967295
 8013546:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8013548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801354a:	2b00      	cmp	r3, #0
 801354c:	f2c0 8099 	blt.w	8013682 <prvTCPPrepareSend+0x2e6>
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013556:	2b05      	cmp	r3, #5
 8013558:	f040 8093 	bne.w	8013682 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013562:	f003 0320 	and.w	r3, r3, #32
 8013566:	b2db      	uxtb	r3, r3
 8013568:	2b00      	cmp	r3, #0
 801356a:	d029      	beq.n	80135c0 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 801356c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801356e:	f002 f8e7 	bl	8015740 <xTCPWindowTxDone>
 8013572:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013574:	2b00      	cmp	r3, #0
 8013576:	d023      	beq.n	80135c0 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8013578:	68fa      	ldr	r2, [r7, #12]
 801357a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801357e:	f36f 1345 	bfc	r3, #5, #1
 8013582:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013588:	7b5b      	ldrb	r3, [r3, #13]
 801358a:	f043 0301 	orr.w	r3, r3, #1
 801358e:	b2da      	uxtb	r2, r3
 8013590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013592:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801359a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801359e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80135a2:	68fa      	ldr	r2, [r7, #12]
 80135a4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80135a8:	f043 0301 	orr.w	r3, r3, #1
 80135ac:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80135b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b2:	6a1a      	ldr	r2, [r3, #32]
 80135b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b6:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80135b8:	2106      	movs	r1, #6
 80135ba:	68f8      	ldr	r0, [r7, #12]
 80135bc:	f7fd f960 	bl	8010880 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80135c6:	2b03      	cmp	r3, #3
 80135c8:	d90f      	bls.n	80135ea <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80135d4:	461a      	mov	r2, r3
 80135d6:	4850      	ldr	r0, [pc, #320]	@ (8013718 <prvTCPPrepareSend+0x37c>)
 80135d8:	f00e f95e 	bl	8021898 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80135dc:	2108      	movs	r1, #8
 80135de:	68f8      	ldr	r0, [r7, #12]
 80135e0:	f7fd f94e 	bl	8010880 <vTCPStateChange>
                    lDataLen = -1;
 80135e4:	f04f 33ff 	mov.w	r3, #4294967295
 80135e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80135ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d148      	bne.n	8013682 <prvTCPPrepareSend+0x2e6>
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80135f6:	f003 0301 	and.w	r3, r3, #1
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d140      	bne.n	8013682 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8013600:	f7f0 fcfa 	bl	8003ff8 <xTaskGetTickCount>
 8013604:	4602      	mov	r2, r0
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013610:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013614:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801361c:	2b00      	cmp	r3, #0
 801361e:	d002      	beq.n	8013626 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8013620:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013624:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8013626:	697a      	ldr	r2, [r7, #20]
 8013628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801362a:	429a      	cmp	r2, r3
 801362c:	d929      	bls.n	8013682 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801362e:	f7f0 fce3 	bl	8003ff8 <xTaskGetTickCount>
 8013632:	4602      	mov	r2, r0
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 801363a:	4b38      	ldr	r3, [pc, #224]	@ (801371c <prvTCPPrepareSend+0x380>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d00b      	beq.n	801365a <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801364c:	461a      	mov	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013654:	4832      	ldr	r0, [pc, #200]	@ (8013720 <prvTCPPrepareSend+0x384>)
 8013656:	f00e f91f 	bl	8021898 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013660:	f043 0302 	orr.w	r3, r3, #2
 8013664:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801366e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013678:	3301      	adds	r3, #1
 801367a:	b2da      	uxtb	r2, r3
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8013682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013684:	2b00      	cmp	r3, #0
 8013686:	db3e      	blt.n	8013706 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8013688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801368a:	2b00      	cmp	r3, #0
 801368c:	dc0f      	bgt.n	80136ae <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013694:	f003 0301 	and.w	r3, r3, #1
 8013698:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 801369a:	2b00      	cmp	r3, #0
 801369c:	d107      	bne.n	80136ae <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80136a4:	f003 0302 	and.w	r3, r3, #2
 80136a8:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d02b      	beq.n	8013706 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80136ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136b0:	7b5b      	ldrb	r3, [r3, #13]
 80136b2:	f023 0308 	bic.w	r3, r3, #8
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ba:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	3314      	adds	r3, #20
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	009b      	lsls	r3, r3, #2
 80136c6:	b2da      	uxtb	r2, r3
 80136c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ca:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80136cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ce:	7b5b      	ldrb	r3, [r3, #13]
 80136d0:	f043 0310 	orr.w	r3, r3, #16
 80136d4:	b2da      	uxtb	r2, r3
 80136d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136d8:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 80136da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d006      	beq.n	80136ee <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 80136e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136e2:	7b5b      	ldrb	r3, [r3, #13]
 80136e4:	f043 0308 	orr.w	r3, r3, #8
 80136e8:	b2da      	uxtb	r2, r3
 80136ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ec:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80136ee:	68f8      	ldr	r0, [r7, #12]
 80136f0:	f7f6 f834 	bl	800975c <uxIPHeaderSizeSocket>
 80136f4:	4602      	mov	r2, r0
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	4413      	add	r3, r2
 80136fa:	3314      	adds	r3, #20
 80136fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 80136fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013702:	4413      	add	r3, r2
 8013704:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8013706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013708:	4618      	mov	r0, r3
 801370a:	3750      	adds	r7, #80	@ 0x50
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	08026048 	.word	0x08026048
 8013714:	0802607c 	.word	0x0802607c
 8013718:	080260a4 	.word	0x080260a4
 801371c:	20001484 	.word	0x20001484
 8013720:	080260c4 	.word	0x080260c4

08013724 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8013724:	b580      	push	{r7, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013732:	4618      	mov	r0, r3
 8013734:	f7fc fdf0 	bl	8010318 <uxStreamBufferMidSpace>
 8013738:	4603      	mov	r3, r0
 801373a:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2b00      	cmp	r3, #0
 8013740:	dd1a      	ble.n	8013778 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013748:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013750:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013752:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801375a:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801375c:	f001 ff5c 	bl	8015618 <lTCPWindowTxAdd>
 8013760:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	2b00      	cmp	r3, #0
 8013766:	dd07      	ble.n	8013778 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801376e:	68ba      	ldr	r2, [r7, #8]
 8013770:	4611      	mov	r1, r2
 8013772:	4618      	mov	r0, r3
 8013774:	f7fc fdf7 	bl	8010366 <vStreamBufferMoveMid>
            }
        }
    }
 8013778:	bf00      	nop
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013780:	b590      	push	{r4, r7, lr}
 8013782:	b08b      	sub	sp, #44	@ 0x2c
 8013784:	af02      	add	r7, sp, #8
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801378e:	6838      	ldr	r0, [r7, #0]
 8013790:	f7f5 ffca 	bl	8009728 <uxIPHeaderSizePacket>
 8013794:	4603      	mov	r3, r0
 8013796:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013798:	4423      	add	r3, r4
 801379a:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80137a6:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137ae:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d05c      	beq.n	8013870 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 80137b6:	4b4f      	ldr	r3, [pc, #316]	@ (80138f4 <prvSetOptions+0x174>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	db44      	blt.n	8013848 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80137c2:	4618      	mov	r0, r3
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80137ca:	461c      	mov	r4, r3
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80137d2:	061a      	lsls	r2, r3, #24
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80137da:	021b      	lsls	r3, r3, #8
 80137dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80137e0:	431a      	orrs	r2, r3
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80137e8:	0a1b      	lsrs	r3, r3, #8
 80137ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80137ee:	431a      	orrs	r2, r3
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80137f6:	0e1b      	lsrs	r3, r3, #24
 80137f8:	431a      	orrs	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013800:	1ad3      	subs	r3, r2, r3
 8013802:	693a      	ldr	r2, [r7, #16]
 8013804:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013808:	0611      	lsls	r1, r2, #24
 801380a:	693a      	ldr	r2, [r7, #16]
 801380c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013810:	0212      	lsls	r2, r2, #8
 8013812:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013816:	4311      	orrs	r1, r2
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801381e:	0a12      	lsrs	r2, r2, #8
 8013820:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8013824:	4311      	orrs	r1, r2
 8013826:	693a      	ldr	r2, [r7, #16]
 8013828:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801382c:	0e12      	lsrs	r2, r2, #24
 801382e:	4311      	orrs	r1, r2
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013836:	1a8a      	subs	r2, r1, r2
 8013838:	9201      	str	r2, [sp, #4]
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	4622      	mov	r2, r4
 8013840:	4601      	mov	r1, r0
 8013842:	482d      	ldr	r0, [pc, #180]	@ (80138f8 <prvSetOptions+0x178>)
 8013844:	f00e f828 	bl	8021898 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	3380      	adds	r3, #128	@ 0x80
 801384c:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	3314      	adds	r3, #20
 8013852:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8013854:	69fa      	ldr	r2, [r7, #28]
 8013856:	68f9      	ldr	r1, [r7, #12]
 8013858:	68b8      	ldr	r0, [r7, #8]
 801385a:	f00e fa39 	bl	8021cd0 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801385e:	69fb      	ldr	r3, [r7, #28]
 8013860:	b2db      	uxtb	r3, r3
 8013862:	3314      	adds	r3, #20
 8013864:	b2db      	uxtb	r3, r3
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	b2da      	uxtb	r2, r3
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	731a      	strb	r2, [r3, #12]
 801386e:	e03c      	b.n	80138ea <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013876:	2b04      	cmp	r3, #4
 8013878:	d937      	bls.n	80138ea <prvSetOptions+0x16a>
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013880:	f003 0301 	and.w	r3, r3, #1
 8013884:	b2db      	uxtb	r3, r3
 8013886:	2b00      	cmp	r3, #0
 8013888:	d02f      	beq.n	80138ea <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013890:	f36f 0300 	bfc	r3, #0, #1
 8013894:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8013898:	4b16      	ldr	r3, [pc, #88]	@ (80138f4 <prvSetOptions+0x174>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	db06      	blt.n	80138ae <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80138a6:	4619      	mov	r1, r3
 80138a8:	4814      	ldr	r0, [pc, #80]	@ (80138fc <prvSetOptions+0x17c>)
 80138aa:	f00d fff5 	bl	8021898 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	2202      	movs	r2, #2
 80138b2:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	2204      	movs	r2, #4
 80138b8:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80138c0:	0a1b      	lsrs	r3, r3, #8
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	b2da      	uxtb	r2, r3
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80138d0:	b2da      	uxtb	r2, r3
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 80138d6:	2304      	movs	r3, #4
 80138d8:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80138da:	69fb      	ldr	r3, [r7, #28]
 80138dc:	b2db      	uxtb	r3, r3
 80138de:	3314      	adds	r3, #20
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	009b      	lsls	r3, r3, #2
 80138e4:	b2da      	uxtb	r2, r3
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 80138ea:	69fb      	ldr	r3, [r7, #28]
    }
 80138ec:	4618      	mov	r0, r3
 80138ee:	3724      	adds	r7, #36	@ 0x24
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd90      	pop	{r4, r7, pc}
 80138f4:	20001484 	.word	0x20001484
 80138f8:	080260e4 	.word	0x080260e4
 80138fc:	0802610c 	.word	0x0802610c

08013900 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013902:	b093      	sub	sp, #76	@ 0x4c
 8013904:	af04      	add	r7, sp, #16
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
 801390c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	4618      	mov	r0, r3
 801391a:	f7f5 ff05 	bl	8009728 <uxIPHeaderSizePacket>
 801391e:	4603      	mov	r3, r0
 8013920:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013922:	4423      	add	r3, r4
 8013924:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013928:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013930:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	4618      	mov	r0, r3
 801393c:	f7f5 fef4 	bl	8009728 <uxIPHeaderSizePacket>
 8013940:	4603      	mov	r3, r0
 8013942:	3314      	adds	r3, #20
 8013944:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8013946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013948:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	1ad3      	subs	r3, r2, r3
 8013954:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013960:	005b      	lsls	r3, r3, #1
 8013962:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d079      	beq.n	8013a5e <prvSendData+0x15e>
 801396a:	69ba      	ldr	r2, [r7, #24]
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	429a      	cmp	r2, r3
 8013970:	db75      	blt.n	8013a5e <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801397c:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 801397e:	2b00      	cmp	r3, #0
 8013980:	d16d      	bne.n	8013a5e <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013984:	6a3b      	ldr	r3, [r7, #32]
 8013986:	429a      	cmp	r2, r3
 8013988:	d169      	bne.n	8013a5e <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8013990:	2b05      	cmp	r3, #5
 8013992:	d164      	bne.n	8013a5e <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8013994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013996:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013998:	2b10      	cmp	r3, #16
 801399a:	d160      	bne.n	8013a5e <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80139a2:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d00f      	beq.n	80139d2 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d005      	beq.n	80139c8 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80139c2:	4618      	mov	r0, r3
 80139c4:	f003 f8c0 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	681a      	ldr	r2, [r3, #0]
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d204      	bcs.n	80139e4 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	2202      	movs	r2, #2
 80139de:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80139e2:	e00c      	b.n	80139fe <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2214      	movs	r2, #20
 80139e8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d103      	bne.n	80139fe <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2201      	movs	r2, #1
 80139fa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80139fe:	4b3d      	ldr	r3, [pc, #244]	@ (8013af4 <prvSendData+0x1f4>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	dd25      	ble.n	8013a52 <prvSendData+0x152>
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013a0a:	2b17      	cmp	r3, #23
 8013a0c:	d021      	beq.n	8013a52 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013a12:	461d      	mov	r5, r3
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013a1a:	461e      	mov	r6, r3
 8013a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a1e:	691a      	ldr	r2, [r3, #16]
 8013a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	1ad0      	subs	r0, r2, r3
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8013a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2e:	69db      	ldr	r3, [r3, #28]
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a34:	68f9      	ldr	r1, [r7, #12]
 8013a36:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	69b9      	ldr	r1, [r7, #24]
 8013a3e:	9103      	str	r1, [sp, #12]
 8013a40:	9402      	str	r4, [sp, #8]
 8013a42:	9201      	str	r2, [sp, #4]
 8013a44:	9300      	str	r3, [sp, #0]
 8013a46:	4603      	mov	r3, r0
 8013a48:	4632      	mov	r2, r6
 8013a4a:	4629      	mov	r1, r5
 8013a4c:	482a      	ldr	r0, [pc, #168]	@ (8013af8 <prvSendData+0x1f8>)
 8013a4e:	f00d ff23 	bl	8021898 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	2200      	movs	r2, #0
 8013a56:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8013a5c:	e015      	b.n	8013a8a <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d010      	beq.n	8013a8a <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d005      	beq.n	8013a82 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f003 f863 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2200      	movs	r2, #0
 8013a86:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8013a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d02b      	beq.n	8013ae8 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013a90:	4b18      	ldr	r3, [pc, #96]	@ (8013af4 <prvSendData+0x1f4>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	dd1d      	ble.n	8013ad4 <prvSendData+0x1d4>
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013a9c:	2b17      	cmp	r3, #23
 8013a9e:	d019      	beq.n	8013ad4 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013aac:	461c      	mov	r4, r3
 8013aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab0:	691a      	ldr	r2, [r3, #16]
 8013ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	1ad1      	subs	r1, r2, r3
 8013ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013abe:	69db      	ldr	r3, [r3, #28]
 8013ac0:	1ad3      	subs	r3, r2, r3
 8013ac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ac4:	9201      	str	r2, [sp, #4]
 8013ac6:	9300      	str	r3, [sp, #0]
 8013ac8:	460b      	mov	r3, r1
 8013aca:	4622      	mov	r2, r4
 8013acc:	4601      	mov	r1, r0
 8013ace:	480b      	ldr	r0, [pc, #44]	@ (8013afc <prvSendData+0x1fc>)
 8013ad0:	f00d fee2 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	6819      	ldr	r1, [r3, #0]
 8013ad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ada:	2301      	movs	r3, #1
 8013adc:	68f8      	ldr	r0, [r7, #12]
 8013ade:	f7ff f8ff 	bl	8012ce0 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8013ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8013aea:	4618      	mov	r0, r3
 8013aec:	373c      	adds	r7, #60	@ 0x3c
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013af2:	bf00      	nop
 8013af4:	20001484 	.word	0x20001484
 8013af8:	08026120 	.word	0x08026120
 8013afc:	08026158 	.word	0x08026158

08013b00 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b084      	sub	sp, #16
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7f5 fe09 	bl	8009728 <uxIPHeaderSizePacket>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b14      	cmp	r3, #20
 8013b1a:	d002      	beq.n	8013b22 <prvTCPSendSpecialPacketHelper+0x22>
 8013b1c:	2b28      	cmp	r3, #40	@ 0x28
 8013b1e:	d007      	beq.n	8013b30 <prvTCPSendSpecialPacketHelper+0x30>
 8013b20:	e00d      	b.n	8013b3e <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8013b22:	78fb      	ldrb	r3, [r7, #3]
 8013b24:	4619      	mov	r1, r3
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f000 fb18 	bl	801415c <prvTCPSendSpecialPktHelper_IPV4>
 8013b2c:	60f8      	str	r0, [r7, #12]
                        break;
 8013b2e:	e009      	b.n	8013b44 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8013b30:	78fb      	ldrb	r3, [r7, #3]
 8013b32:	4619      	mov	r1, r3
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f000 fe8b 	bl	8014850 <prvTCPSendSpecialPktHelper_IPV6>
 8013b3a:	60f8      	str	r0, [r7, #12]
                        break;
 8013b3c:	e002      	b.n	8013b44 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	60fb      	str	r3, [r7, #12]
                    break;
 8013b42:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8013b44:	68fb      	ldr	r3, [r7, #12]
    }
 8013b46:	4618      	mov	r0, r3
 8013b48:	3710      	adds	r7, #16
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}

08013b4e <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013b4e:	b580      	push	{r7, lr}
 8013b50:	b082      	sub	sp, #8
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8013b56:	2110      	movs	r1, #16
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f7ff ffd1 	bl	8013b00 <prvTCPSendSpecialPacketHelper>
 8013b5e:	4603      	mov	r3, r0
    }
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8013b70:	2114      	movs	r1, #20
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7ff ffc4 	bl	8013b00 <prvTCPSendSpecialPacketHelper>
 8013b78:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
	...

08013b84 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b0a6      	sub	sp, #152	@ 0x98
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	607a      	str	r2, [r7, #4]
 8013b90:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8013b92:	2300      	movs	r3, #0
 8013b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8013bbc:	2314      	movs	r3, #20
 8013bbe:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d117      	bne.n	8013bfc <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8013bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013bd8:	2238      	movs	r2, #56	@ 0x38
 8013bda:	2100      	movs	r1, #0
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f00e f984 	bl	8021eea <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bec:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bf2:	225a      	movs	r2, #90	@ 0x5a
 8013bf4:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8013bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d114      	bne.n	8013c2e <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013c10:	f7f6 f83c 	bl	8009c8c <pxDuplicateNetworkBufferWithDescriptor>
 8013c14:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8013c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d003      	beq.n	8013c28 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8013c20:	2301      	movs	r3, #1
 8013c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013c26:	e002      	b.n	8013c2e <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013c28:	48bc      	ldr	r0, [pc, #752]	@ (8013f1c <prvTCPReturnPacket_IPV4+0x398>)
 8013c2a:	f00d fe35 	bl	8021898 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8013c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	f000 8166 	beq.w	8013f04 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c3e:	330e      	adds	r3, #14
 8013c40:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8013c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013c50:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013c5a:	330e      	adds	r3, #14
 8013c5c:	4413      	add	r3, r2
 8013c5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d10b      	bne.n	8013c84 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013c6c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013c72:	68f8      	ldr	r0, [r7, #12]
 8013c74:	f7ff faf6 	bl	8013264 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	f000 813d 	beq.w	8013efe <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d028      	beq.n	8013cdc <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013c8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013c8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013c90:	68f8      	ldr	r0, [r7, #12]
 8013c92:	f7ff f865 	bl	8012d60 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013c9e:	68f8      	ldr	r0, [r7, #12]
 8013ca0:	f7ff f8d8 	bl	8012e54 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ca8:	061a      	lsls	r2, r3, #24
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cae:	021b      	lsls	r3, r3, #8
 8013cb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013cb4:	431a      	orrs	r2, r3
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cba:	0a1b      	lsrs	r3, r3, #8
 8013cbc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013cc0:	431a      	orrs	r2, r3
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cc6:	0e1b      	lsrs	r3, r3, #24
 8013cc8:	431a      	orrs	r2, r3
 8013cca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ccc:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8013cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013cd8:	60da      	str	r2, [r3, #12]
 8013cda:	e017      	b.n	8013d0c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8013cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013ce8:	689a      	ldr	r2, [r3, #8]
 8013cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013cee:	605a      	str	r2, [r3, #4]
 8013cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013cf4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013cf6:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8013cf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013cfa:	691b      	ldr	r3, [r3, #16]
 8013cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013cfe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d00:	68da      	ldr	r2, [r3, #12]
 8013d02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d04:	611a      	str	r2, [r3, #16]
 8013d06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013d0a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8013d0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d0e:	2280      	movs	r2, #128	@ 0x80
 8013d10:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	021b      	lsls	r3, r3, #8
 8013d18:	b29a      	uxth	r2, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	0a1b      	lsrs	r3, r3, #8
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	4313      	orrs	r3, r2
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d26:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8013d28:	4b7d      	ldr	r3, [pc, #500]	@ (8013f20 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d2a:	881b      	ldrh	r3, [r3, #0]
 8013d2c:	021b      	lsls	r3, r3, #8
 8013d2e:	b21a      	sxth	r2, r3
 8013d30:	4b7b      	ldr	r3, [pc, #492]	@ (8013f20 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d32:	881b      	ldrh	r3, [r3, #0]
 8013d34:	0a1b      	lsrs	r3, r3, #8
 8013d36:	b29b      	uxth	r3, r3
 8013d38:	b21b      	sxth	r3, r3
 8013d3a:	4313      	orrs	r3, r2
 8013d3c:	b21b      	sxth	r3, r3
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d42:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8013d44:	4b76      	ldr	r3, [pc, #472]	@ (8013f20 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d46:	881b      	ldrh	r3, [r3, #0]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	4b74      	ldr	r3, [pc, #464]	@ (8013f20 <prvTCPReturnPacket_IPV4+0x39c>)
 8013d4e:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8013d50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d52:	2200      	movs	r2, #0
 8013d54:	719a      	strb	r2, [r3, #6]
 8013d56:	2200      	movs	r2, #0
 8013d58:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8013d5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d5e:	781a      	ldrb	r2, [r3, #0]
 8013d60:	785b      	ldrb	r3, [r3, #1]
 8013d62:	021b      	lsls	r3, r3, #8
 8013d64:	4313      	orrs	r3, r2
 8013d66:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8013d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d6e:	885b      	ldrh	r3, [r3, #2]
 8013d70:	b29a      	uxth	r2, r3
 8013d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d76:	801a      	strh	r2, [r3, #0]
 8013d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d7c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8013d80:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8013d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8013d8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d90:	f103 020e 	add.w	r2, r3, #14
 8013d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d98:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013d9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d9c:	3306      	adds	r3, #6
 8013d9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013da2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013da4:	691b      	ldr	r3, [r3, #16]
 8013da6:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8013da8:	f107 0214 	add.w	r2, r7, #20
 8013dac:	f107 011c 	add.w	r1, r7, #28
 8013db0:	f107 0318 	add.w	r3, r7, #24
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7f2 fe9d 	bl	8006af4 <eARPGetCacheEntry>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8013dc0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d108      	bne.n	8013dda <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8013dc8:	f107 031c 	add.w	r3, r7, #28
 8013dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8013dd0:	697a      	ldr	r2, [r7, #20]
 8013dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8013dd8:	e003      	b.n	8013de2 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013ddc:	3306      	adds	r3, #6
 8013dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f000 808a 	beq.w	8013f02 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8013dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013df0:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013df2:	2206      	movs	r2, #6
 8013df4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013df8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013dfa:	f00d ff69 	bl	8021cd0 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8013dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e04:	33e8      	adds	r3, #232	@ 0xe8
 8013e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8013e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e0c:	3306      	adds	r3, #6
 8013e0e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013e10:	2206      	movs	r2, #6
 8013e12:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013e16:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013e18:	f00d ff5a 	bl	8021cd0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8013e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e22:	2b3b      	cmp	r3, #59	@ 0x3b
 8013e24:	d81a      	bhi.n	8013e5c <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013e30:	e00c      	b.n	8013e4c <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8013e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e3c:	4413      	add	r3, r2
 8013e3e:	2200      	movs	r2, #0
 8013e40:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e46:	3301      	adds	r3, #1
 8013e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e50:	2b3b      	cmp	r3, #59	@ 0x3b
 8013e52:	ddee      	ble.n	8013e32 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8013e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e58:	223c      	movs	r2, #60	@ 0x3c
 8013e5a:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8013e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e62:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d104      	bne.n	8013e74 <prvTCPReturnPacket_IPV4+0x2f0>
 8013e6a:	f240 111d 	movw	r1, #285	@ 0x11d
 8013e6e:	482d      	ldr	r0, [pc, #180]	@ (8013f24 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013e70:	f7ed fbf2 	bl	8001658 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8013e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e7a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d104      	bne.n	8013e8e <prvTCPReturnPacket_IPV4+0x30a>
 8013e84:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8013e88:	4826      	ldr	r0, [pc, #152]	@ (8013f24 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013e8a:	f7ed fbe5 	bl	8001658 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8013e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e94:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013e98:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8013e9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013ea6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013ea8:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8013eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d121      	bne.n	8013ef6 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8013eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013eb6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8013eba:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8013ebe:	021b      	lsls	r3, r3, #8
 8013ec0:	4313      	orrs	r3, r2
 8013ec2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8013ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013eca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013ecc:	b29a      	uxth	r2, r3
 8013ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ed2:	845a      	strh	r2, [r3, #34]	@ 0x22
 8013ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ed8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8013edc:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013ede:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ee0:	691a      	ldr	r2, [r3, #16]
 8013ee2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ee4:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013ee8:	3306      	adds	r3, #6
 8013eea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013eec:	2206      	movs	r2, #6
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f00d feee 	bl	8021cd0 <memcpy>
 8013ef4:	e006      	b.n	8013f04 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013efc:	e002      	b.n	8013f04 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8013efe:	bf00      	nop
 8013f00:	e000      	b.n	8013f04 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8013f02:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8013f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013f08:	2b01      	cmp	r3, #1
 8013f0a:	d103      	bne.n	8013f14 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013f0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013f10:	f002 fe1a 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8013f14:	bf00      	nop
 8013f16:	3798      	adds	r7, #152	@ 0x98
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	08026184 	.word	0x08026184
 8013f20:	20000fdc 	.word	0x20000fdc
 8013f24:	080261ac 	.word	0x080261ac

08013f28 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8013f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f2a:	b093      	sub	sp, #76	@ 0x4c
 8013f2c:	af06      	add	r7, sp, #24
 8013f2e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8013f30:	2301      	movs	r3, #1
 8013f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8013f34:	2300      	movs	r3, #0
 8013f36:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8013f38:	f107 030c 	add.w	r3, r7, #12
 8013f3c:	2206      	movs	r2, #6
 8013f3e:	2100      	movs	r1, #0
 8013f40:	4618      	mov	r0, r3
 8013f42:	f00d ffd2 	bl	8021eea <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f4a:	061a      	lsls	r2, r3, #24
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f50:	021b      	lsls	r3, r3, #8
 8013f52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013f56:	431a      	orrs	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f5c:	0a1b      	lsrs	r3, r3, #8
 8013f5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013f62:	431a      	orrs	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f68:	0e1b      	lsrs	r3, r3, #24
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8013f74:	f107 010c 	add.w	r1, r7, #12
 8013f78:	f107 0314 	add.w	r3, r7, #20
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7f2 fdb9 	bl	8006af4 <eARPGetCacheEntry>
 8013f82:	4603      	mov	r3, r0
 8013f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8013f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d037      	beq.n	8014000 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013f96:	3301      	adds	r3, #1
 8013f98:	b2da      	uxtb	r2, r3
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	061a      	lsls	r2, r3, #24
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	021b      	lsls	r3, r3, #8
 8013fac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013fb0:	431a      	orrs	r2, r3
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	0a1b      	lsrs	r3, r3, #8
 8013fb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013fba:	431a      	orrs	r2, r3
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	0e1b      	lsrs	r3, r3, #24
 8013fc0:	431a      	orrs	r2, r3
 8013fc2:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8013fc6:	7b38      	ldrb	r0, [r7, #12]
 8013fc8:	7b7c      	ldrb	r4, [r7, #13]
 8013fca:	7bbd      	ldrb	r5, [r7, #14]
 8013fcc:	7bfe      	ldrb	r6, [r7, #15]
 8013fce:	f897 c010 	ldrb.w	ip, [r7, #16]
 8013fd2:	f8c7 c000 	str.w	ip, [r7]
 8013fd6:	f897 c011 	ldrb.w	ip, [r7, #17]
 8013fda:	4663      	mov	r3, ip
 8013fdc:	9305      	str	r3, [sp, #20]
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	9304      	str	r3, [sp, #16]
 8013fe2:	9603      	str	r6, [sp, #12]
 8013fe4:	9502      	str	r5, [sp, #8]
 8013fe6:	9401      	str	r4, [sp, #4]
 8013fe8:	9000      	str	r0, [sp, #0]
 8013fea:	4673      	mov	r3, lr
 8013fec:	485a      	ldr	r0, [pc, #360]	@ (8014158 <prvTCPPrepareConnect_IPV4+0x230>)
 8013fee:	f00d fc53 	bl	8021898 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7f2 ffd1 	bl	8006f9c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8013ffe:	e000      	b.n	8014002 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014000:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014004:	2b00      	cmp	r3, #0
 8014006:	d010      	beq.n	801402a <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801401a:	f7ed fb3d 	bl	8001698 <ulApplicationGetNextSequenceNumber>
 801401e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014022:	2b00      	cmp	r3, #0
 8014024:	d101      	bne.n	801402a <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014026:	2300      	movs	r3, #0
 8014028:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402c:	2b00      	cmp	r3, #0
 801402e:	f000 808d 	beq.w	801414c <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	33aa      	adds	r3, #170	@ 0xaa
 8014036:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014038:	6a3b      	ldr	r3, [r7, #32]
 801403a:	330e      	adds	r3, #14
 801403c:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2200      	movs	r2, #0
 8014042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014046:	687a      	ldr	r2, [r7, #4]
 8014048:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801404c:	f043 0308 	orr.w	r3, r3, #8
 8014050:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	33aa      	adds	r3, #170	@ 0xaa
 8014058:	225a      	movs	r2, #90	@ 0x5a
 801405a:	2100      	movs	r1, #0
 801405c:	4618      	mov	r0, r3
 801405e:	f00d ff44 	bl	8021eea <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014062:	6a3b      	ldr	r3, [r7, #32]
 8014064:	3306      	adds	r3, #6
 8014066:	461a      	mov	r2, r3
 8014068:	f107 030c 	add.w	r3, r7, #12
 801406c:	6818      	ldr	r0, [r3, #0]
 801406e:	6010      	str	r0, [r2, #0]
 8014070:	889b      	ldrh	r3, [r3, #4]
 8014072:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014074:	6a3b      	ldr	r3, [r7, #32]
 8014076:	2200      	movs	r2, #0
 8014078:	f042 0208 	orr.w	r2, r2, #8
 801407c:	731a      	strb	r2, [r3, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8014082:	69fb      	ldr	r3, [r7, #28]
 8014084:	2245      	movs	r2, #69	@ 0x45
 8014086:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8014088:	2338      	movs	r3, #56	@ 0x38
 801408a:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 801408c:	8b7b      	ldrh	r3, [r7, #26]
 801408e:	021b      	lsls	r3, r3, #8
 8014090:	b21a      	sxth	r2, r3
 8014092:	8b7b      	ldrh	r3, [r7, #26]
 8014094:	0a1b      	lsrs	r3, r3, #8
 8014096:	b29b      	uxth	r3, r3
 8014098:	b21b      	sxth	r3, r3
 801409a:	4313      	orrs	r3, r2
 801409c:	b21b      	sxth	r3, r3
 801409e:	b29a      	uxth	r2, r3
 80140a0:	69fb      	ldr	r3, [r7, #28]
 80140a2:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	2280      	movs	r2, #128	@ 0x80
 80140a8:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 80140aa:	69fb      	ldr	r3, [r7, #28]
 80140ac:	2206      	movs	r2, #6
 80140ae:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140b4:	061a      	lsls	r2, r3, #24
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140ba:	021b      	lsls	r3, r3, #8
 80140bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80140c0:	431a      	orrs	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140c6:	0a1b      	lsrs	r3, r3, #8
 80140c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80140cc:	431a      	orrs	r2, r3
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140d2:	0e1b      	lsrs	r3, r3, #24
 80140d4:	431a      	orrs	r2, r3
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80140e0:	021b      	lsls	r3, r3, #8
 80140e2:	b21a      	sxth	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80140ea:	0a1b      	lsrs	r3, r3, #8
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	b21b      	sxth	r3, r3
 80140f0:	4313      	orrs	r3, r2
 80140f2:	b21b      	sxth	r3, r3
 80140f4:	b29a      	uxth	r2, r3
 80140f6:	6a3b      	ldr	r3, [r7, #32]
 80140f8:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80140fe:	021b      	lsls	r3, r3, #8
 8014100:	b21a      	sxth	r2, r3
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014106:	0a1b      	lsrs	r3, r3, #8
 8014108:	b29b      	uxth	r3, r3
 801410a:	b21b      	sxth	r3, r3
 801410c:	4313      	orrs	r3, r2
 801410e:	b21b      	sxth	r3, r3
 8014110:	b29a      	uxth	r2, r3
 8014112:	6a3b      	ldr	r3, [r7, #32]
 8014114:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2200      	movs	r2, #0
 801411a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014122:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8014126:	6a3b      	ldr	r3, [r7, #32]
 8014128:	2250      	movs	r2, #80	@ 0x50
 801412a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801412e:	6a3b      	ldr	r3, [r7, #32]
 8014130:	2202      	movs	r2, #2
 8014132:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f000 fc3c 	bl	80149b4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7fe ff2b 	bl	8012f98 <prvTCPCreateWindow>
 8014142:	4603      	mov	r3, r0
 8014144:	2b01      	cmp	r3, #1
 8014146:	d001      	beq.n	801414c <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8014148:	2300      	movs	r3, #0
 801414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 801414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801414e:	4618      	mov	r0, r3
 8014150:	3734      	adds	r7, #52	@ 0x34
 8014152:	46bd      	mov	sp, r7
 8014154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014156:	bf00      	nop
 8014158:	080261ec 	.word	0x080261ec

0801415c <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b086      	sub	sp, #24
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	460b      	mov	r3, r1
 8014166:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801416c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801416e:	2328      	movs	r3, #40	@ 0x28
 8014170:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014178:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	78fa      	ldrb	r2, [r7, #3]
 801417e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	2250      	movs	r2, #80	@ 0x50
 8014186:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801418a:	7bfb      	ldrb	r3, [r7, #15]
 801418c:	f003 0302 	and.w	r3, r3, #2
 8014190:	2b00      	cmp	r3, #0
 8014192:	d02c      	beq.n	80141ee <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801419a:	061a      	lsls	r2, r3, #24
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80141a2:	021b      	lsls	r3, r3, #8
 80141a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80141a8:	431a      	orrs	r2, r3
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80141b0:	0a1b      	lsrs	r3, r3, #8
 80141b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80141b6:	431a      	orrs	r2, r3
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80141be:	0e1b      	lsrs	r3, r3, #24
 80141c0:	4313      	orrs	r3, r2
 80141c2:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	3301      	adds	r3, #1
 80141c8:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	061a      	lsls	r2, r3, #24
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	021b      	lsls	r3, r3, #8
 80141d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80141d6:	431a      	orrs	r2, r3
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	0a1b      	lsrs	r3, r3, #8
 80141dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80141e0:	431a      	orrs	r2, r3
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	0e1b      	lsrs	r3, r3, #24
 80141e6:	431a      	orrs	r2, r3
 80141e8:	697b      	ldr	r3, [r7, #20]
 80141ea:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80141ee:	2300      	movs	r3, #0
 80141f0:	693a      	ldr	r2, [r7, #16]
 80141f2:	6879      	ldr	r1, [r7, #4]
 80141f4:	2000      	movs	r0, #0
 80141f6:	f7fe fd73 	bl	8012ce0 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80141fa:	2300      	movs	r3, #0
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3718      	adds	r7, #24
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014204:	b5b0      	push	{r4, r5, r7, lr}
 8014206:	b0aa      	sub	sp, #168	@ 0xa8
 8014208:	af00      	add	r7, sp, #0
 801420a:	60f8      	str	r0, [r7, #12]
 801420c:	60b9      	str	r1, [r7, #8]
 801420e:	607a      	str	r2, [r7, #4]
 8014210:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014212:	2300      	movs	r3, #0
 8014214:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014218:	2300      	movs	r3, #0
 801421a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 801421e:	2300      	movs	r3, #0
 8014220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 801422a:	2300      	movs	r3, #0
 801422c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014236:	2300      	movs	r3, #0
 8014238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 801423c:	2300      	movs	r3, #0
 801423e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8014242:	2328      	movs	r3, #40	@ 0x28
 8014244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8014248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d103      	bne.n	8014258 <prvTCPReturnPacket_IPV6+0x54>
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2b00      	cmp	r3, #0
 8014254:	f000 81ae 	beq.w	80145b4 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d117      	bne.n	8014290 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014260:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014264:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014268:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801426c:	2238      	movs	r2, #56	@ 0x38
 801426e:	2100      	movs	r1, #0
 8014270:	4618      	mov	r0, r3
 8014272:	f00d fe3a 	bl	8021eea <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 801427c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014280:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014286:	225a      	movs	r2, #90	@ 0x5a
 8014288:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 801428a:	2300      	movs	r3, #0
 801428c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8014290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014294:	2b00      	cmp	r3, #0
 8014296:	d114      	bne.n	80142c2 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014298:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801429e:	4619      	mov	r1, r3
 80142a0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80142a4:	f7f5 fcf2 	bl	8009c8c <pxDuplicateNetworkBufferWithDescriptor>
 80142a8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 80142ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d003      	beq.n	80142bc <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 80142b4:	2301      	movs	r3, #1
 80142b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80142ba:	e002      	b.n	80142c2 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80142bc:	48c0      	ldr	r0, [pc, #768]	@ (80145c0 <prvTCPReturnPacket_IPV6+0x3bc>)
 80142be:	f00d faeb 	bl	8021898 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80142c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	f000 8175 	beq.w	80145b6 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80142cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d103      	bne.n	80142de <prvTCPReturnPacket_IPV6+0xda>
 80142d6:	219d      	movs	r1, #157	@ 0x9d
 80142d8:	48ba      	ldr	r0, [pc, #744]	@ (80145c4 <prvTCPReturnPacket_IPV6+0x3c0>)
 80142da:	f7ed f9bd 	bl	8001658 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80142de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142e4:	330e      	adds	r3, #14
 80142e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80142ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80142ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80142f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80142f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80142fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014306:	330e      	adds	r3, #14
 8014308:	4413      	add	r3, r2
 801430a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801430e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014314:	2b00      	cmp	r3, #0
 8014316:	d117      	bne.n	8014348 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014318:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801431c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014320:	68f8      	ldr	r0, [r7, #12]
 8014322:	f7fe ff9f 	bl	8013264 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801432c:	2b00      	cmp	r3, #0
 801432e:	d10b      	bne.n	8014348 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8014330:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014334:	2b00      	cmp	r3, #0
 8014336:	d003      	beq.n	8014340 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014338:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801433c:	f002 fc04 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8014340:	2300      	movs	r3, #0
 8014342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8014346:	e136      	b.n	80145b6 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d025      	beq.n	801439a <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801434e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014352:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014356:	68f8      	ldr	r0, [r7, #12]
 8014358:	f7fe fd02 	bl	8012d60 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014362:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014366:	68f8      	ldr	r0, [r7, #12]
 8014368:	f7fe fd74 	bl	8012e54 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801436c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014370:	f103 0018 	add.w	r0, r3, #24
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	3354      	adds	r3, #84	@ 0x54
 8014378:	2210      	movs	r2, #16
 801437a:	4619      	mov	r1, r3
 801437c:	f00d fca8 	bl	8021cd0 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014384:	f103 0008 	add.w	r0, r3, #8
 8014388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801438e:	3338      	adds	r3, #56	@ 0x38
 8014390:	2210      	movs	r2, #16
 8014392:	4619      	mov	r1, r3
 8014394:	f00d fc9c 	bl	8021cd0 <memcpy>
 8014398:	e02d      	b.n	80143f6 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801439a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80143a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143a6:	689a      	ldr	r2, [r3, #8]
 80143a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143ac:	605a      	str	r2, [r3, #4]
 80143ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80143b4:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80143b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143ba:	3318      	adds	r3, #24
 80143bc:	f107 0410 	add.w	r4, r7, #16
 80143c0:	6818      	ldr	r0, [r3, #0]
 80143c2:	6859      	ldr	r1, [r3, #4]
 80143c4:	689a      	ldr	r2, [r3, #8]
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80143ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143ce:	f103 0018 	add.w	r0, r3, #24
 80143d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143d6:	3308      	adds	r3, #8
 80143d8:	2210      	movs	r2, #16
 80143da:	4619      	mov	r1, r3
 80143dc:	f00d fc78 	bl	8021cd0 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80143e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80143e4:	3308      	adds	r3, #8
 80143e6:	461d      	mov	r5, r3
 80143e8:	f107 0410 	add.w	r4, r7, #16
 80143ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80143ee:	6028      	str	r0, [r5, #0]
 80143f0:	6069      	str	r1, [r5, #4]
 80143f2:	60aa      	str	r2, [r5, #8]
 80143f4:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	3b28      	subs	r3, #40	@ 0x28
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	021b      	lsls	r3, r3, #8
 8014400:	b29a      	uxth	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	3b28      	subs	r3, #40	@ 0x28
 8014406:	0a1b      	lsrs	r3, r3, #8
 8014408:	b29b      	uxth	r3, r3
 801440a:	4313      	orrs	r3, r2
 801440c:	b29a      	uxth	r2, r3
 801440e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014412:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014414:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014418:	781a      	ldrb	r2, [r3, #0]
 801441a:	785b      	ldrb	r3, [r3, #1]
 801441c:	021b      	lsls	r3, r3, #8
 801441e:	4313      	orrs	r3, r2
 8014420:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8014424:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014428:	885b      	ldrh	r3, [r3, #2]
 801442a:	b29a      	uxth	r2, r3
 801442c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014430:	801a      	strh	r2, [r3, #0]
 8014432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014436:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 801443a:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 801443c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014444:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801444a:	f103 020e 	add.w	r2, r3, #14
 801444e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014452:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014458:	3318      	adds	r3, #24
 801445a:	f107 0420 	add.w	r4, r7, #32
 801445e:	6818      	ldr	r0, [r3, #0]
 8014460:	6859      	ldr	r1, [r3, #4]
 8014462:	689a      	ldr	r2, [r3, #8]
 8014464:	68db      	ldr	r3, [r3, #12]
 8014466:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8014468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801446c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014470:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014474:	f107 0320 	add.w	r3, r7, #32
 8014478:	4618      	mov	r0, r3
 801447a:	f7f6 ffa7 	bl	800b3cc <eNDGetCacheEntry>
 801447e:	4603      	mov	r3, r0
 8014480:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8014484:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8014488:	2b01      	cmp	r3, #1
 801448a:	d104      	bne.n	8014496 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 801448c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014494:	e004      	b.n	80144a0 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014496:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801449a:	3306      	adds	r3, #6
 801449c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 80144a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80144a8:	2206      	movs	r2, #6
 80144aa:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80144ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80144b2:	f00d fc0d 	bl	8021cd0 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80144b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80144ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144bc:	33e8      	adds	r3, #232	@ 0xe8
 80144be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 80144c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144c6:	3306      	adds	r3, #6
 80144c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80144cc:	2206      	movs	r2, #6
 80144ce:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80144d2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80144d6:	f00d fbfb 	bl	8021cd0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80144da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80144de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80144e2:	d81a      	bhi.n	801451a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80144e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80144e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80144ee:	e00c      	b.n	801450a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80144f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80144f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80144f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80144fa:	4413      	add	r3, r2
 80144fc:	2200      	movs	r2, #0
 80144fe:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014504:	3301      	adds	r3, #1
 8014506:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801450a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801450e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014510:	ddee      	ble.n	80144f0 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014516:	223c      	movs	r2, #60	@ 0x3c
 8014518:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801451a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014520:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014524:	2b00      	cmp	r3, #0
 8014526:	d104      	bne.n	8014532 <prvTCPReturnPacket_IPV6+0x32e>
 8014528:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801452c:	4825      	ldr	r0, [pc, #148]	@ (80145c4 <prvTCPReturnPacket_IPV6+0x3c0>)
 801452e:	f7ed f893 	bl	8001658 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014538:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801453c:	68db      	ldr	r3, [r3, #12]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d104      	bne.n	801454c <prvTCPReturnPacket_IPV6+0x348>
 8014542:	f240 1119 	movw	r1, #281	@ 0x119
 8014546:	481f      	ldr	r0, [pc, #124]	@ (80145c4 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014548:	f7ed f886 	bl	8001658 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801454c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014552:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014556:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014560:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014564:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014566:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014568:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801456c:	2b00      	cmp	r3, #0
 801456e:	d122      	bne.n	80145b6 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014570:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014574:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8014578:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801457c:	021b      	lsls	r3, r3, #8
 801457e:	4313      	orrs	r3, r2
 8014580:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8014584:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014588:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801458a:	b29a      	uxth	r2, r3
 801458c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014590:	86da      	strh	r2, [r3, #54]	@ 0x36
 8014592:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014596:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 801459a:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801459c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145a0:	f103 0008 	add.w	r0, r3, #8
 80145a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145a8:	3318      	adds	r3, #24
 80145aa:	2210      	movs	r2, #16
 80145ac:	4619      	mov	r1, r3
 80145ae:	f00d fb8f 	bl	8021cd0 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 80145b2:	e000      	b.n	80145b6 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 80145b4:	bf00      	nop
}
 80145b6:	bf00      	nop
 80145b8:	37a8      	adds	r7, #168	@ 0xa8
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bdb0      	pop	{r4, r5, r7, pc}
 80145be:	bf00      	nop
 80145c0:	0802622c 	.word	0x0802622c
 80145c4:	08026254 	.word	0x08026254

080145c8 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80145c8:	b590      	push	{r4, r7, lr}
 80145ca:	b093      	sub	sp, #76	@ 0x4c
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80145d0:	2300      	movs	r3, #0
 80145d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 80145d4:	2300      	movs	r3, #0
 80145d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 80145d8:	2301      	movs	r3, #1
 80145da:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 80145dc:	2300      	movs	r3, #0
 80145de:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 80145e0:	2300      	movs	r3, #0
 80145e2:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 80145e4:	2300      	movs	r3, #0
 80145e6:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 80145e8:	f107 0310 	add.w	r3, r7, #16
 80145ec:	2206      	movs	r2, #6
 80145ee:	2100      	movs	r1, #0
 80145f0:	4618      	mov	r0, r3
 80145f2:	f00d fc7a 	bl	8021eea <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 80145f6:	f107 0318 	add.w	r3, r7, #24
 80145fa:	2210      	movs	r2, #16
 80145fc:	2100      	movs	r1, #0
 80145fe:	4618      	mov	r0, r3
 8014600:	f00d fc73 	bl	8021eea <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	3354      	adds	r3, #84	@ 0x54
 8014608:	f107 0418 	add.w	r4, r7, #24
 801460c:	6818      	ldr	r0, [r3, #0]
 801460e:	6859      	ldr	r1, [r3, #4]
 8014610:	689a      	ldr	r2, [r3, #8]
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8014616:	f107 020c 	add.w	r2, r7, #12
 801461a:	f107 0110 	add.w	r1, r7, #16
 801461e:	f107 0318 	add.w	r3, r7, #24
 8014622:	4618      	mov	r0, r3
 8014624:	f7f6 fed2 	bl	800b3cc <eNDGetCacheEntry>
 8014628:	4603      	mov	r3, r0
 801462a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 801462e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014632:	68fa      	ldr	r2, [r7, #12]
 8014634:	4619      	mov	r1, r3
 8014636:	4881      	ldr	r0, [pc, #516]	@ (801483c <prvTCPPrepareConnect_IPV6+0x274>)
 8014638:	f00d f92e 	bl	8021898 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d002      	beq.n	8014648 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014642:	68fa      	ldr	r2, [r7, #12]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7f5 f887 	bl	800975c <uxIPHeaderSizeSocket>
 801464e:	4603      	mov	r3, r0
 8014650:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014652:	33a0      	adds	r3, #160	@ 0xa0
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	4413      	add	r3, r2
 8014658:	330a      	adds	r3, #10
 801465a:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 801465c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014660:	2b01      	cmp	r3, #1
 8014662:	d02c      	beq.n	80146be <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801466a:	3301      	adds	r3, #1
 801466c:	b2da      	uxtb	r2, r3
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d001      	beq.n	801467e <prvTCPPrepareConnect_IPV6+0xb6>
 801467a:	4a71      	ldr	r2, [pc, #452]	@ (8014840 <prvTCPPrepareConnect_IPV6+0x278>)
 801467c:	e000      	b.n	8014680 <prvTCPPrepareConnect_IPV6+0xb8>
 801467e:	4a71      	ldr	r2, [pc, #452]	@ (8014844 <prvTCPPrepareConnect_IPV6+0x27c>)
 8014680:	f107 0318 	add.w	r3, r7, #24
 8014684:	4619      	mov	r1, r3
 8014686:	4870      	ldr	r0, [pc, #448]	@ (8014848 <prvTCPPrepareConnect_IPV6+0x280>)
 8014688:	f00d f906 	bl	8021898 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d012      	beq.n	80146b8 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 8014692:	2356      	movs	r3, #86	@ 0x56
 8014694:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8014696:	2100      	movs	r1, #0
 8014698:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801469a:	f002 f9ed 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 801469e:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 80146a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d008      	beq.n	80146b8 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146aa:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 80146ac:	f107 0318 	add.w	r3, r7, #24
 80146b0:	4619      	mov	r1, r3
 80146b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146b4:	f7f7 f8f6 	bl	800b8a4 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 80146b8:	2300      	movs	r3, #0
 80146ba:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 80146bc:	e000      	b.n	80146c0 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 80146be:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80146c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d010      	beq.n	80146e8 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80146d8:	f7ec ffde 	bl	8001698 <ulApplicationGetNextSequenceNumber>
 80146dc:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 80146de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d101      	bne.n	80146e8 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 80146e4:	2300      	movs	r3, #0
 80146e6:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 80146e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d05d      	beq.n	80147aa <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	33aa      	adds	r3, #170	@ 0xaa
 80146f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 80146f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80146f6:	330e      	adds	r3, #14
 80146f8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2200      	movs	r2, #0
 80146fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014702:	687a      	ldr	r2, [r7, #4]
 8014704:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014708:	f043 0308 	orr.w	r3, r3, #8
 801470c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	33aa      	adds	r3, #170	@ 0xaa
 8014714:	225a      	movs	r2, #90	@ 0x5a
 8014716:	2100      	movs	r1, #0
 8014718:	4618      	mov	r0, r3
 801471a:	f00d fbe6 	bl	8021eea <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801471e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014720:	3306      	adds	r3, #6
 8014722:	461a      	mov	r2, r3
 8014724:	f107 0310 	add.w	r3, r7, #16
 8014728:	6818      	ldr	r0, [r3, #0]
 801472a:	6010      	str	r0, [r2, #0]
 801472c:	889b      	ldrh	r3, [r3, #4]
 801472e:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	7a1b      	ldrb	r3, [r3, #8]
 8014734:	f003 0301 	and.w	r3, r3, #1
 8014738:	b2db      	uxtb	r3, r3
 801473a:	2b00      	cmp	r3, #0
 801473c:	d035      	beq.n	80147aa <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 801473e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014740:	2200      	movs	r2, #0
 8014742:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8014746:	731a      	strb	r2, [r3, #12]
 8014748:	2200      	movs	r2, #0
 801474a:	f062 0222 	orn	r2, r2, #34	@ 0x22
 801474e:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8014750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014752:	2260      	movs	r2, #96	@ 0x60
 8014754:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8014756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014758:	2200      	movs	r2, #0
 801475a:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 801475c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801475e:	2200      	movs	r2, #0
 8014760:	709a      	strb	r2, [r3, #2]
 8014762:	2200      	movs	r2, #0
 8014764:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8014766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014768:	2200      	movs	r2, #0
 801476a:	711a      	strb	r2, [r3, #4]
 801476c:	2200      	movs	r2, #0
 801476e:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8014772:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8014774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014776:	2206      	movs	r2, #6
 8014778:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 801477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801477c:	2280      	movs	r2, #128	@ 0x80
 801477e:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8014780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014782:	f103 0008 	add.w	r0, r3, #8
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	3354      	adds	r3, #84	@ 0x54
 801478a:	2210      	movs	r2, #16
 801478c:	4619      	mov	r1, r3
 801478e:	f00d fa9f 	bl	8021cd0 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8014792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014794:	f103 0018 	add.w	r0, r3, #24
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	3328      	adds	r3, #40	@ 0x28
 801479c:	2210      	movs	r2, #16
 801479e:	4619      	mov	r1, r3
 80147a0:	f00d fa96 	bl	8021cd0 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80147a8:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d03a      	beq.n	8014826 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80147b0:	68fa      	ldr	r2, [r7, #12]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80147bc:	021b      	lsls	r3, r3, #8
 80147be:	b21a      	sxth	r2, r3
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80147c6:	0a1b      	lsrs	r3, r3, #8
 80147c8:	b29b      	uxth	r3, r3
 80147ca:	b21b      	sxth	r3, r3
 80147cc:	4313      	orrs	r3, r2
 80147ce:	b21b      	sxth	r3, r3
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147d4:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80147da:	021b      	lsls	r3, r3, #8
 80147dc:	b21a      	sxth	r2, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80147e2:	0a1b      	lsrs	r3, r3, #8
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	b21b      	sxth	r3, r3
 80147e8:	4313      	orrs	r3, r2
 80147ea:	b21b      	sxth	r3, r3
 80147ec:	b29a      	uxth	r2, r3
 80147ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147f0:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2200      	movs	r2, #0
 80147f6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80147fe:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014804:	2250      	movs	r2, #80	@ 0x50
 8014806:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801480a:	2202      	movs	r2, #2
 801480c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f000 f8d0 	bl	80149b4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7fe fbbf 	bl	8012f98 <prvTCPCreateWindow>
 801481a:	4603      	mov	r3, r0
 801481c:	2b01      	cmp	r3, #1
 801481e:	d007      	beq.n	8014830 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 8014820:	2300      	movs	r3, #0
 8014822:	647b      	str	r3, [r7, #68]	@ 0x44
 8014824:	e004      	b.n	8014830 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8014826:	4809      	ldr	r0, [pc, #36]	@ (801484c <prvTCPPrepareConnect_IPV6+0x284>)
 8014828:	f00d f836 	bl	8021898 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 801482c:	2300      	movs	r3, #0
 801482e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 8014830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014832:	4618      	mov	r0, r3
 8014834:	374c      	adds	r7, #76	@ 0x4c
 8014836:	46bd      	mov	sp, r7
 8014838:	bd90      	pop	{r4, r7, pc}
 801483a:	bf00      	nop
 801483c:	08026294 	.word	0x08026294
 8014840:	080262bc 	.word	0x080262bc
 8014844:	080262c0 	.word	0x080262c0
 8014848:	080262c4 	.word	0x080262c4
 801484c:	080262e8 	.word	0x080262e8

08014850 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b086      	sub	sp, #24
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	460b      	mov	r3, r1
 801485a:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014860:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014862:	233c      	movs	r3, #60	@ 0x3c
 8014864:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801486c:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	78fa      	ldrb	r2, [r7, #3]
 8014872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	2250      	movs	r2, #80	@ 0x50
 801487a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801487e:	7bfb      	ldrb	r3, [r7, #15]
 8014880:	f003 0302 	and.w	r3, r3, #2
 8014884:	2b00      	cmp	r3, #0
 8014886:	d02c      	beq.n	80148e2 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801488e:	061a      	lsls	r2, r3, #24
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014896:	021b      	lsls	r3, r3, #8
 8014898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801489c:	431a      	orrs	r2, r3
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80148a4:	0a1b      	lsrs	r3, r3, #8
 80148a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80148aa:	431a      	orrs	r2, r3
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80148b2:	0e1b      	lsrs	r3, r3, #24
 80148b4:	4313      	orrs	r3, r2
 80148b6:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	3301      	adds	r3, #1
 80148bc:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	061a      	lsls	r2, r3, #24
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	021b      	lsls	r3, r3, #8
 80148c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80148ca:	431a      	orrs	r2, r3
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	0a1b      	lsrs	r3, r3, #8
 80148d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80148d4:	431a      	orrs	r2, r3
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	0e1b      	lsrs	r3, r3, #24
 80148da:	431a      	orrs	r2, r3
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80148e2:	2300      	movs	r3, #0
 80148e4:	693a      	ldr	r2, [r7, #16]
 80148e6:	6879      	ldr	r1, [r7, #4]
 80148e8:	2000      	movs	r0, #0
 80148ea:	f7fe f9f9 	bl	8012ce0 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3718      	adds	r7, #24
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 80148f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148fa:	b08d      	sub	sp, #52	@ 0x34
 80148fc:	af08      	add	r7, sp, #32
 80148fe:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 801490a:	2b00      	cmp	r3, #0
 801490c:	d002      	beq.n	8014914 <prvTCPFlagMeaning+0x1c>
 801490e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014912:	e001      	b.n	8014918 <prvTCPFlagMeaning+0x20>
 8014914:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 801491e:	2b00      	cmp	r3, #0
 8014920:	d001      	beq.n	8014926 <prvTCPFlagMeaning+0x2e>
 8014922:	2353      	movs	r3, #83	@ 0x53
 8014924:	e000      	b.n	8014928 <prvTCPFlagMeaning+0x30>
 8014926:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8014928:	68fa      	ldr	r2, [r7, #12]
 801492a:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 801492e:	2a00      	cmp	r2, #0
 8014930:	d001      	beq.n	8014936 <prvTCPFlagMeaning+0x3e>
 8014932:	2252      	movs	r2, #82	@ 0x52
 8014934:	e000      	b.n	8014938 <prvTCPFlagMeaning+0x40>
 8014936:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8014938:	68f9      	ldr	r1, [r7, #12]
 801493a:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 801493e:	2900      	cmp	r1, #0
 8014940:	d001      	beq.n	8014946 <prvTCPFlagMeaning+0x4e>
 8014942:	2150      	movs	r1, #80	@ 0x50
 8014944:	e000      	b.n	8014948 <prvTCPFlagMeaning+0x50>
 8014946:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8014948:	68f8      	ldr	r0, [r7, #12]
 801494a:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 801494e:	2800      	cmp	r0, #0
 8014950:	d001      	beq.n	8014956 <prvTCPFlagMeaning+0x5e>
 8014952:	2041      	movs	r0, #65	@ 0x41
 8014954:	e000      	b.n	8014958 <prvTCPFlagMeaning+0x60>
 8014956:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8014958:	68fc      	ldr	r4, [r7, #12]
 801495a:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801495e:	2c00      	cmp	r4, #0
 8014960:	d001      	beq.n	8014966 <prvTCPFlagMeaning+0x6e>
 8014962:	2455      	movs	r4, #85	@ 0x55
 8014964:	e000      	b.n	8014968 <prvTCPFlagMeaning+0x70>
 8014966:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8014968:	68fd      	ldr	r5, [r7, #12]
 801496a:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801496e:	2d00      	cmp	r5, #0
 8014970:	d001      	beq.n	8014976 <prvTCPFlagMeaning+0x7e>
 8014972:	2545      	movs	r5, #69	@ 0x45
 8014974:	e000      	b.n	8014978 <prvTCPFlagMeaning+0x80>
 8014976:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8014978:	68fe      	ldr	r6, [r7, #12]
 801497a:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 801497e:	2e00      	cmp	r6, #0
 8014980:	d001      	beq.n	8014986 <prvTCPFlagMeaning+0x8e>
 8014982:	2643      	movs	r6, #67	@ 0x43
 8014984:	e000      	b.n	8014988 <prvTCPFlagMeaning+0x90>
 8014986:	262e      	movs	r6, #46	@ 0x2e
 8014988:	9606      	str	r6, [sp, #24]
 801498a:	9505      	str	r5, [sp, #20]
 801498c:	9404      	str	r4, [sp, #16]
 801498e:	9003      	str	r0, [sp, #12]
 8014990:	9102      	str	r1, [sp, #8]
 8014992:	9201      	str	r2, [sp, #4]
 8014994:	9300      	str	r3, [sp, #0]
 8014996:	4663      	mov	r3, ip
 8014998:	4a04      	ldr	r2, [pc, #16]	@ (80149ac <prvTCPFlagMeaning+0xb4>)
 801499a:	210a      	movs	r1, #10
 801499c:	4804      	ldr	r0, [pc, #16]	@ (80149b0 <prvTCPFlagMeaning+0xb8>)
 801499e:	f00d ffa7 	bl	80228f0 <snprintf>
            return retString;
 80149a2:	4b03      	ldr	r3, [pc, #12]	@ (80149b0 <prvTCPFlagMeaning+0xb8>)
        }
 80149a4:	4618      	mov	r0, r3
 80149a6:	3714      	adds	r7, #20
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ac:	08026314 	.word	0x08026314
 80149b0:	20001460 	.word	0x20001460

080149b4 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	7a1b      	ldrb	r3, [r3, #8]
 80149c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d002      	beq.n	80149d0 <prvSocketSetMSS+0x1c>
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d004      	beq.n	80149d8 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80149ce:	e007      	b.n	80149e0 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 f809 	bl	80149e8 <prvSocketSetMSS_IPV4>
                    break;
 80149d6:	e003      	b.n	80149e0 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 f84b 	bl	8014a74 <prvSocketSetMSS_IPV6>
                    break;
 80149de:	bf00      	nop
        }
    }
 80149e0:	bf00      	nop
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b084      	sub	sp, #16
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80149f0:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80149f4:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80149fa:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d023      	beq.n	8014a4a <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8014a02:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014a06:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a0c:	061a      	lsls	r2, r3, #24
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a12:	021b      	lsls	r3, r3, #8
 8014a14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014a18:	431a      	orrs	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a1e:	0a1b      	lsrs	r3, r3, #8
 8014a20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014a24:	431a      	orrs	r2, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a2a:	0e1b      	lsrs	r3, r3, #24
 8014a2c:	431a      	orrs	r2, r3
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	405a      	eors	r2, r3
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	685b      	ldr	r3, [r3, #4]
 8014a38:	4013      	ands	r3, r2
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d005      	beq.n	8014a4a <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014a3e:	68f9      	ldr	r1, [r7, #12]
 8014a40:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014a44:	f7f5 fbbe 	bl	800a1c4 <FreeRTOS_min_uint32>
 8014a48:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014a54:	68f9      	ldr	r1, [r7, #12]
 8014a56:	4806      	ldr	r0, [pc, #24]	@ (8014a70 <prvSocketSetMSS_IPV4+0x88>)
 8014a58:	f00c ff1e 	bl	8021898 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	b29a      	uxth	r2, r3
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8014a66:	bf00      	nop
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
 8014a6e:	bf00      	nop
 8014a70:	08026328 	.word	0x08026328

08014a74 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b090      	sub	sp, #64	@ 0x40
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014a7c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014a80:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8014a82:	2300      	movs	r3, #0
 8014a84:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d103      	bne.n	8014a94 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8014a8c:	481f      	ldr	r0, [pc, #124]	@ (8014b0c <prvSocketSetMSS_IPV6+0x98>)
 8014a8e:	f00c ff03 	bl	8021898 <lUDPLoggingPrintf>

            break;
 8014a92:	e036      	b.n	8014b02 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a98:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 8014a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d018      	beq.n	8014ad2 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8014aa0:	2314      	movs	r3, #20
 8014aa2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8014aa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014aa6:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014aaa:	1a9b      	subs	r3, r3, r2
 8014aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	3354      	adds	r3, #84	@ 0x54
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7f8 fdb4 	bl	800d620 <xIPv6_GetIPType>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 8014abe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d105      	bne.n	8014ad2 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014ac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014ac8:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014acc:	f7f5 fb7a 	bl	800a1c4 <FreeRTOS_min_uint32>
 8014ad0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014ad8:	f107 0208 	add.w	r2, r7, #8
 8014adc:	2328      	movs	r3, #40	@ 0x28
 8014ade:	200a      	movs	r0, #10
 8014ae0:	f7fa f8c0 	bl	800ec64 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014aea:	f107 0208 	add.w	r2, r7, #8
 8014aee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014af0:	4807      	ldr	r0, [pc, #28]	@ (8014b10 <prvSocketSetMSS_IPV6+0x9c>)
 8014af2:	f00c fed1 	bl	8021898 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014af8:	b29a      	uxth	r2, r3
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8014b00:	bf00      	nop
 8014b02:	bf00      	nop
 8014b04:	3740      	adds	r7, #64	@ 0x40
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	08026354 	.word	0x08026354
 8014b10:	08026380 	.word	0x08026380

08014b14 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8014b14:	b480      	push	{r7}
 8014b16:	b085      	sub	sp, #20
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8014b22:	683a      	ldr	r2, [r7, #0]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	1ad3      	subs	r3, r2, r3
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	db01      	blt.n	8014b30 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8014b30:	68fb      	ldr	r3, [r7, #12]
        }
 8014b32:	4618      	mov	r0, r3
 8014b34:	3714      	adds	r7, #20
 8014b36:	46bd      	mov	sp, r7
 8014b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3c:	4770      	bx	lr

08014b3e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 8014b3e:	b480      	push	{r7}
 8014b40:	b085      	sub	sp, #20
 8014b42:	af00      	add	r7, sp, #0
 8014b44:	6078      	str	r0, [r7, #4]
 8014b46:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8014b4c:	683a      	ldr	r2, [r7, #0]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	1ad3      	subs	r3, r2, r3
 8014b52:	3b01      	subs	r3, #1
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	db01      	blt.n	8014b5c <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
    }
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3714      	adds	r7, #20
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr

08014b6a <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8014b6a:	b480      	push	{r7}
 8014b6c:	b085      	sub	sp, #20
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014b74:	2300      	movs	r3, #0
 8014b76:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	1ad3      	subs	r3, r2, r3
 8014b7e:	3b01      	subs	r3, #1
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	db01      	blt.n	8014b88 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8014b84:	2301      	movs	r3, #1
 8014b86:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014b88:	68fb      	ldr	r3, [r7, #12]
    }
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3714      	adds	r7, #20
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8014b96:	b480      	push	{r7}
 8014b98:	b085      	sub	sp, #20
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	1ad3      	subs	r3, r2, r3
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	db01      	blt.n	8014bb2 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8014bae:	2301      	movs	r3, #1
 8014bb0:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
    }
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3714      	adds	r7, #20
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr

08014bc0 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b082      	sub	sp, #8
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	3308      	adds	r3, #8
 8014bce:	461a      	mov	r2, r3
 8014bd0:	6839      	ldr	r1, [r7, #0]
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f000 f822 	bl	8014c1c <vListInsertGeneric>
        }
 8014bd8:	bf00      	nop
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8014be8:	f7ef fa06 	bl	8003ff8 <xTaskGetTickCount>
 8014bec:	4602      	mov	r2, r0
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	601a      	str	r2, [r3, #0]
    }
 8014bf2:	bf00      	nop
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8014c02:	f7ef f9f9 	bl	8003ff8 <xTaskGetTickCount>
 8014c06:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	68fa      	ldr	r2, [r7, #12]
 8014c0e:	1ad3      	subs	r3, r2, r3
 8014c10:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8014c12:	68bb      	ldr	r3, [r7, #8]
    }
 8014c14:	4618      	mov	r0, r3
 8014c16:	3710      	adds	r7, #16
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8014c1c:	b480      	push	{r7}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	60b9      	str	r1, [r7, #8]
 8014c26:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	689a      	ldr	r2, [r3, #8]
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	689b      	ldr	r3, [r3, #8]
 8014c3a:	68ba      	ldr	r2, [r7, #8]
 8014c3c:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	68ba      	ldr	r2, [r7, #8]
 8014c42:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	68fa      	ldr	r2, [r7, #12]
 8014c48:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	1c5a      	adds	r2, r3, #1
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	601a      	str	r2, [r3, #0]
        }
 8014c54:	bf00      	nop
 8014c56:	3714      	adds	r7, #20
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr

08014c60 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b082      	sub	sp, #8
 8014c64:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8014c66:	4827      	ldr	r0, [pc, #156]	@ (8014d04 <prvCreateSectors+0xa4>)
 8014c68:	f7ed ffe0 	bl	8002c2c <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8014c6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8014c70:	f7f1 f830 	bl	8005cd4 <pvPortMalloc>
 8014c74:	4603      	mov	r3, r0
 8014c76:	4a24      	ldr	r2, [pc, #144]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014c78:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8014c7a:	4b23      	ldr	r3, [pc, #140]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d107      	bne.n	8014c92 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8014c82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014c86:	4821      	ldr	r0, [pc, #132]	@ (8014d0c <prvCreateSectors+0xac>)
 8014c88:	f00c fe06 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	603b      	str	r3, [r7, #0]
 8014c90:	e032      	b.n	8014cf8 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8014c92:	4b1d      	ldr	r3, [pc, #116]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014c9a:	2100      	movs	r1, #0
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f00d f924 	bl	8021eea <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	607b      	str	r3, [r7, #4]
 8014ca6:	e022      	b.n	8014cee <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014ca8:	4b17      	ldr	r3, [pc, #92]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014caa:	6819      	ldr	r1, [r3, #0]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	019a      	lsls	r2, r3, #6
 8014cb0:	4b15      	ldr	r3, [pc, #84]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014cb2:	6818      	ldr	r0, [r3, #0]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	019b      	lsls	r3, r3, #6
 8014cb8:	4403      	add	r3, r0
 8014cba:	440a      	add	r2, r1
 8014cbc:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014cbe:	4b12      	ldr	r3, [pc, #72]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014cc0:	6819      	ldr	r1, [r3, #0]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	019a      	lsls	r2, r3, #6
 8014cc6:	4b10      	ldr	r3, [pc, #64]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014cc8:	6818      	ldr	r0, [r3, #0]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	019b      	lsls	r3, r3, #6
 8014cce:	4403      	add	r3, r0
 8014cd0:	440a      	add	r2, r1
 8014cd2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8014cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8014d08 <prvCreateSectors+0xa8>)
 8014cd6:	681a      	ldr	r2, [r3, #0]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	019b      	lsls	r3, r3, #6
 8014cdc:	4413      	add	r3, r2
 8014cde:	332c      	adds	r3, #44	@ 0x2c
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	4808      	ldr	r0, [pc, #32]	@ (8014d04 <prvCreateSectors+0xa4>)
 8014ce4:	f7ff ff6c 	bl	8014bc0 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	3301      	adds	r3, #1
 8014cec:	607b      	str	r3, [r7, #4]
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8014cf2:	ddd9      	ble.n	8014ca8 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8014cf8:	683b      	ldr	r3, [r7, #0]
        }
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3708      	adds	r7, #8
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
 8014d02:	bf00      	nop
 8014d04:	20001470 	.word	0x20001470
 8014d08:	2000146c 	.word	0x2000146c
 8014d0c:	080263b0 	.word	0x080263b0

08014d10 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8014d10:	b480      	push	{r7}
 8014d12:	b087      	sub	sp, #28
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	33ac      	adds	r3, #172	@ 0xac
 8014d22:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	617b      	str	r3, [r7, #20]
 8014d2a:	e00d      	b.n	8014d48 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	683a      	ldr	r2, [r7, #0]
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d102      	bne.n	8014d42 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	613b      	str	r3, [r7, #16]
                    break;
 8014d40:	e006      	b.n	8014d50 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8014d48:	697a      	ldr	r2, [r7, #20]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d1ed      	bne.n	8014d2c <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8014d50:	693b      	ldr	r3, [r7, #16]
        }
 8014d52:	4618      	mov	r0, r3
 8014d54:	371c      	adds	r7, #28
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr
	...

08014d60 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b088      	sub	sp, #32
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	60f8      	str	r0, [r7, #12]
 8014d68:	60b9      	str	r1, [r7, #8]
 8014d6a:	607a      	str	r2, [r7, #4]
 8014d6c:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8014d6e:	4b33      	ldr	r3, [pc, #204]	@ (8014e3c <xTCPWindowNew+0xdc>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d10c      	bne.n	8014d90 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d001      	beq.n	8014d80 <xTCPWindowNew+0x20>
 8014d7c:	2352      	movs	r3, #82	@ 0x52
 8014d7e:	e000      	b.n	8014d82 <xTCPWindowNew+0x22>
 8014d80:	2354      	movs	r3, #84	@ 0x54
 8014d82:	4619      	mov	r1, r3
 8014d84:	482e      	ldr	r0, [pc, #184]	@ (8014e40 <xTCPWindowNew+0xe0>)
 8014d86:	f00c fd87 	bl	8021898 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	61fb      	str	r3, [r7, #28]
 8014d8e:	e04f      	b.n	8014e30 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8014d90:	4b2a      	ldr	r3, [pc, #168]	@ (8014e3c <xTCPWindowNew+0xdc>)
 8014d92:	68db      	ldr	r3, [r3, #12]
 8014d94:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	68db      	ldr	r3, [r3, #12]
 8014d9a:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8014d9c:	69bb      	ldr	r3, [r7, #24]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d104      	bne.n	8014dac <xTCPWindowNew+0x4c>
 8014da2:	f240 2125 	movw	r1, #549	@ 0x225
 8014da6:	4827      	ldr	r0, [pc, #156]	@ (8014e44 <xTCPWindowNew+0xe4>)
 8014da8:	f7ec fc56 	bl	8001658 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d104      	bne.n	8014dbc <xTCPWindowNew+0x5c>
 8014db2:	f240 2126 	movw	r1, #550	@ 0x226
 8014db6:	4823      	ldr	r0, [pc, #140]	@ (8014e44 <xTCPWindowNew+0xe4>)
 8014db8:	f7ec fc4e 	bl	8001658 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8014dbc:	69b8      	ldr	r0, [r7, #24]
 8014dbe:	f7ed ffbf 	bl	8002d40 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d006      	beq.n	8014dd6 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	33a4      	adds	r3, #164	@ 0xa4
 8014dcc:	69b9      	ldr	r1, [r7, #24]
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7ff fef6 	bl	8014bc0 <vListInsertFifo>
 8014dd4:	e005      	b.n	8014de2 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	3390      	adds	r3, #144	@ 0x90
 8014dda:	69b9      	ldr	r1, [r7, #24]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7ff feef 	bl	8014bc0 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	3310      	adds	r3, #16
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7ff fefa 	bl	8014be0 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8014dec:	69fb      	ldr	r3, [r7, #28]
 8014dee:	2200      	movs	r2, #0
 8014df0:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d001      	beq.n	8014dfc <xTCPWindowNew+0x9c>
 8014df8:	2101      	movs	r1, #1
 8014dfa:	e000      	b.n	8014dfe <xTCPWindowNew+0x9e>
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	69fa      	ldr	r2, [r7, #28]
 8014e00:	7d93      	ldrb	r3, [r2, #22]
 8014e02:	f361 0382 	bfi	r3, r1, #2, #1
 8014e06:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8014e08:	69fb      	ldr	r3, [r7, #28]
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8014e0e:	69fb      	ldr	r3, [r7, #28]
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8014e14:	69fb      	ldr	r3, [r7, #28]
 8014e16:	68ba      	ldr	r2, [r7, #8]
 8014e18:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8014e1a:	4b08      	ldr	r3, [pc, #32]	@ (8014e3c <xTCPWindowNew+0xdc>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8014e20:	4b09      	ldr	r3, [pc, #36]	@ (8014e48 <xTCPWindowNew+0xe8>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	697a      	ldr	r2, [r7, #20]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d202      	bcs.n	8014e30 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8014e2a:	4a07      	ldr	r2, [pc, #28]	@ (8014e48 <xTCPWindowNew+0xe8>)
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8014e30:	69fb      	ldr	r3, [r7, #28]
        }
 8014e32:	4618      	mov	r0, r3
 8014e34:	3720      	adds	r7, #32
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}
 8014e3a:	bf00      	nop
 8014e3c:	20001470 	.word	0x20001470
 8014e40:	080263d4 	.word	0x080263d4
 8014e44:	08026404 	.word	0x08026404
 8014e48:	2000001c 	.word	0x2000001c

08014e4c <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b084      	sub	sp, #16
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d002      	beq.n	8014e64 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	60fb      	str	r3, [r7, #12]
 8014e62:	e01e      	b.n	8014ea2 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	691b      	ldr	r3, [r3, #16]
 8014e68:	1c5a      	adds	r2, r3, #1
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	699b      	ldr	r3, [r3, #24]
 8014e6e:	4619      	mov	r1, r3
 8014e70:	4610      	mov	r0, r2
 8014e72:	f7ff fe90 	bl	8014b96 <xSequenceGreaterThanOrEqual>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d002      	beq.n	8014e82 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	60fb      	str	r3, [r7, #12]
 8014e80:	e00f      	b.n	8014ea2 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	691a      	ldr	r2, [r3, #16]
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	68db      	ldr	r3, [r3, #12]
 8014e8a:	1ad1      	subs	r1, r2, r3
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	699a      	ldr	r2, [r3, #24]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	68db      	ldr	r3, [r3, #12]
 8014e94:	1ad3      	subs	r3, r2, r3
 8014e96:	461a      	mov	r2, r3
 8014e98:	4804      	ldr	r0, [pc, #16]	@ (8014eac <xTCPWindowRxEmpty+0x60>)
 8014e9a:	f00c fcfd 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
        }
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3710      	adds	r7, #16
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	08026434 	.word	0x08026434

08014eb0 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d102      	bne.n	8014ec6 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	60fb      	str	r3, [r7, #12]
 8014ec4:	e008      	b.n	8014ed8 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8014ed2:	68b8      	ldr	r0, [r7, #8]
 8014ed4:	f7ed ff34 	bl	8002d40 <uxListRemove>
            }

            return pxSegment;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
        }
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8014ee2:	b480      	push	{r7}
 8014ee4:	b085      	sub	sp, #20
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d102      	bne.n	8014ef8 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	60fb      	str	r3, [r7, #12]
 8014ef6:	e005      	b.n	8014f04 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	68db      	ldr	r3, [r3, #12]
 8014efc:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	68db      	ldr	r3, [r3, #12]
 8014f02:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8014f04:	68fb      	ldr	r3, [r7, #12]
        }
 8014f06:	4618      	mov	r0, r3
 8014f08:	3714      	adds	r7, #20
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f10:	4770      	bx	lr
	...

08014f14 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b082      	sub	sp, #8
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d004      	beq.n	8014f2e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	3318      	adds	r3, #24
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7ed ff09 	bl	8002d40 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2200      	movs	r2, #0
 8014f32:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2200      	movs	r2, #0
 8014f38:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d004      	beq.n	8014f52 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	332c      	adds	r3, #44	@ 0x2c
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7ed fef7 	bl	8002d40 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	332c      	adds	r3, #44	@ 0x2c
 8014f56:	4619      	mov	r1, r3
 8014f58:	4803      	ldr	r0, [pc, #12]	@ (8014f68 <vTCPWindowFree+0x54>)
 8014f5a:	f7ff fe31 	bl	8014bc0 <vListInsertFifo>
        }
 8014f5e:	bf00      	nop
 8014f60:	3708      	adds	r7, #8
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	20001470 	.word	0x20001470

08014f6c <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b086      	sub	sp, #24
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8014f74:	2300      	movs	r3, #0
 8014f76:	613b      	str	r3, [r7, #16]
 8014f78:	e01d      	b.n	8014fb6 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d003      	beq.n	8014f88 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	33a4      	adds	r3, #164	@ 0xa4
 8014f84:	617b      	str	r3, [r7, #20]
 8014f86:	e002      	b.n	8014f8e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	3390      	adds	r3, #144	@ 0x90
 8014f8c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	689b      	ldr	r3, [r3, #8]
 8014f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f96:	d10b      	bne.n	8014fb0 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014f98:	e006      	b.n	8014fa8 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7ff ffb6 	bl	8014f14 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d1f4      	bne.n	8014f9a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	613b      	str	r3, [r7, #16]
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	2b01      	cmp	r3, #1
 8014fba:	ddde      	ble.n	8014f7a <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8014fbc:	bf00      	nop
 8014fbe:	bf00      	nop
 8014fc0:	3718      	adds	r7, #24
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
	...

08014fc8 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b086      	sub	sp, #24
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	60f8      	str	r0, [r7, #12]
 8014fd0:	60b9      	str	r1, [r7, #8]
 8014fd2:	607a      	str	r2, [r7, #4]
 8014fd4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8014fda:	4b1d      	ldr	r3, [pc, #116]	@ (8015050 <xTCPWindowCreate+0x88>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d102      	bne.n	8014fe8 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8014fe2:	f7ff fe3d 	bl	8014c60 <prvCreateSectors>
 8014fe6:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	3390      	adds	r3, #144	@ 0x90
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7ed fe1d 	bl	8002c2c <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	33a4      	adds	r3, #164	@ 0xa4
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7ed fe18 	bl	8002c2c <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	3340      	adds	r3, #64	@ 0x40
 8015000:	4618      	mov	r0, r3
 8015002:	f7ed fe13 	bl	8002c2c <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	3354      	adds	r3, #84	@ 0x54
 801500a:	4618      	mov	r0, r3
 801500c:	f7ed fe0e 	bl	8002c2c <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	3368      	adds	r3, #104	@ 0x68
 8015014:	4618      	mov	r0, r3
 8015016:	f7ed fe09 	bl	8002c2c <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 801501a:	4b0e      	ldr	r3, [pc, #56]	@ (8015054 <xTCPWindowCreate+0x8c>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d004      	beq.n	801502c <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	68b9      	ldr	r1, [r7, #8]
 8015026:	480c      	ldr	r0, [pc, #48]	@ (8015058 <xTCPWindowCreate+0x90>)
 8015028:	f00c fc36 	bl	8021898 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	68ba      	ldr	r2, [r7, #8]
 8015030:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801503a:	6a3a      	ldr	r2, [r7, #32]
 801503c:	6839      	ldr	r1, [r7, #0]
 801503e:	68f8      	ldr	r0, [r7, #12]
 8015040:	f000 f80c 	bl	801505c <vTCPWindowInit>

        return xReturn;
 8015044:	697b      	ldr	r3, [r7, #20]
    }
 8015046:	4618      	mov	r0, r3
 8015048:	3718      	adds	r7, #24
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	2000146c 	.word	0x2000146c
 8015054:	20001484 	.word	0x20001484
 8015058:	08026464 	.word	0x08026464

0801505c <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 801505c:	b480      	push	{r7}
 801505e:	b087      	sub	sp, #28
 8015060:	af00      	add	r7, sp, #0
 8015062:	60f8      	str	r0, [r7, #12]
 8015064:	60b9      	str	r1, [r7, #8]
 8015066:	607a      	str	r2, [r7, #4]
 8015068:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 801506a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801506e:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2200      	movs	r2, #0
 8015074:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015076:	68fa      	ldr	r2, [r7, #12]
 8015078:	7813      	ldrb	r3, [r2, #0]
 801507a:	f043 0301 	orr.w	r3, r3, #1
 801507e:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d024      	beq.n	80150d0 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 801508c:	2b00      	cmp	r3, #0
 801508e:	d004      	beq.n	801509a <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	b29a      	uxth	r2, r3
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80150a0:	461a      	mov	r2, r3
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	4293      	cmp	r3, r2
 80150a6:	d304      	bcc.n	80150b2 <vTCPWindowInit+0x56>
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d10e      	bne.n	80150d0 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	685a      	ldr	r2, [r3, #4]
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80150bc:	683a      	ldr	r2, [r7, #0]
 80150be:	fb03 f202 	mul.w	r2, r3, r2
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	697a      	ldr	r2, [r7, #20]
 80150d4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	68ba      	ldr	r2, [r7, #8]
 80150da:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	68ba      	ldr	r2, [r7, #8]
 80150e0:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	68ba      	ldr	r2, [r7, #8]
 80150e6:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	687a      	ldr	r2, [r7, #4]
 80150ec:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8015106:	bf00      	nop
 8015108:	371c      	adds	r7, #28
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
	...

08015114 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8015114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015116:	b08f      	sub	sp, #60	@ 0x3c
 8015118:	af04      	add	r7, sp, #16
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8015120:	2300      	movs	r3, #0
 8015122:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015124:	68ba      	ldr	r2, [r7, #8]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	4413      	add	r3, r2
 801512a:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	33ac      	adds	r3, #172	@ 0xac
 8015130:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8015132:	69bb      	ldr	r3, [r7, #24]
 8015134:	685b      	ldr	r3, [r3, #4]
 8015136:	623b      	str	r3, [r7, #32]
 8015138:	e027      	b.n	801518a <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801513a:	6a3b      	ldr	r3, [r7, #32]
 801513c:	68db      	ldr	r3, [r3, #12]
 801513e:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	68b9      	ldr	r1, [r7, #8]
 8015146:	4618      	mov	r0, r3
 8015148:	f7ff fd25 	bl	8014b96 <xSequenceGreaterThanOrEqual>
 801514c:	4603      	mov	r3, r0
 801514e:	2b00      	cmp	r3, #0
 8015150:	d018      	beq.n	8015184 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8015152:	697b      	ldr	r3, [r7, #20]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	69f9      	ldr	r1, [r7, #28]
 8015158:	4618      	mov	r0, r3
 801515a:	f7ff fcf0 	bl	8014b3e <xSequenceLessThan>
 801515e:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015160:	2b00      	cmp	r3, #0
 8015162:	d00f      	beq.n	8015184 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8015164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015166:	2b00      	cmp	r3, #0
 8015168:	d00a      	beq.n	8015180 <xTCPWindowRxConfirm+0x6c>
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	4619      	mov	r1, r3
 8015174:	4610      	mov	r0, r2
 8015176:	f7ff fce2 	bl	8014b3e <xSequenceLessThan>
 801517a:	4603      	mov	r3, r0
 801517c:	2b00      	cmp	r3, #0
 801517e:	d001      	beq.n	8015184 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015184:	6a3b      	ldr	r3, [r7, #32]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 801518a:	6a3a      	ldr	r2, [r7, #32]
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	429a      	cmp	r2, r3
 8015190:	d1d3      	bne.n	801513a <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8015192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015194:	2b00      	cmp	r3, #0
 8015196:	d030      	beq.n	80151fa <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8015198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801519a:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 801519c:	68ba      	ldr	r2, [r7, #8]
 801519e:	429a      	cmp	r2, r3
 80151a0:	d104      	bne.n	80151ac <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80151a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a4:	689a      	ldr	r2, [r3, #8]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d026      	beq.n	80151fa <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80151b2:	461e      	mov	r6, r3
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	68db      	ldr	r3, [r3, #12]
 80151b8:	68ba      	ldr	r2, [r7, #8]
 80151ba:	1ad5      	subs	r5, r2, r3
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	441a      	add	r2, r3
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	68db      	ldr	r3, [r3, #12]
 80151c6:	1ad3      	subs	r3, r2, r3
 80151c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151ca:	6811      	ldr	r1, [r2, #0]
 80151cc:	68fa      	ldr	r2, [r7, #12]
 80151ce:	68d2      	ldr	r2, [r2, #12]
 80151d0:	1a8a      	subs	r2, r1, r2
 80151d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80151d4:	6889      	ldr	r1, [r1, #8]
 80151d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80151d8:	6800      	ldr	r0, [r0, #0]
 80151da:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80151dc:	68a4      	ldr	r4, [r4, #8]
 80151de:	4404      	add	r4, r0
 80151e0:	68f8      	ldr	r0, [r7, #12]
 80151e2:	68c0      	ldr	r0, [r0, #12]
 80151e4:	1a20      	subs	r0, r4, r0
 80151e6:	9003      	str	r0, [sp, #12]
 80151e8:	9102      	str	r1, [sp, #8]
 80151ea:	9201      	str	r2, [sp, #4]
 80151ec:	9300      	str	r3, [sp, #0]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	462a      	mov	r2, r5
 80151f2:	4631      	mov	r1, r6
 80151f4:	4803      	ldr	r0, [pc, #12]	@ (8015204 <xTCPWindowRxConfirm+0xf0>)
 80151f6:	f00c fb4f 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 80151fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80151fc:	4618      	mov	r0, r3
 80151fe:	372c      	adds	r7, #44	@ 0x2c
 8015200:	46bd      	mov	sp, r7
 8015202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015204:	08026494 	.word	0x08026494

08015208 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8015208:	b5b0      	push	{r4, r5, r7, lr}
 801520a:	b08a      	sub	sp, #40	@ 0x28
 801520c:	af04      	add	r7, sp, #16
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	691b      	ldr	r3, [r3, #16]
 8015216:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8015218:	693a      	ldr	r2, [r7, #16]
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	4413      	add	r3, r2
 801521e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015226:	2b00      	cmp	r3, #0
 8015228:	d04e      	beq.n	80152c8 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	6939      	ldr	r1, [r7, #16]
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f7ff ff6e 	bl	8015114 <xTCPWindowRxConfirm>
 8015238:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d002      	beq.n	8015246 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8015240:	68b8      	ldr	r0, [r7, #8]
 8015242:	f7ff fe67 	bl	8014f14 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d1f0      	bne.n	801522e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801524c:	6979      	ldr	r1, [r7, #20]
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f7ff fd5e 	bl	8014d10 <xTCPWindowRxFind>
 8015254:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d009      	beq.n	8015270 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	689b      	ldr	r3, [r3, #8]
 8015260:	461a      	mov	r2, r3
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	4413      	add	r3, r2
 8015266:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8015268:	68b8      	ldr	r0, [r7, #8]
 801526a:	f7ff fe53 	bl	8014f14 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801526e:	e7ed      	b.n	801524c <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8015270:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8015272:	68fa      	ldr	r2, [r7, #12]
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	429a      	cmp	r2, r3
 8015278:	d026      	beq.n	80152c8 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 801527a:	697a      	ldr	r2, [r7, #20]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	1ad2      	subs	r2, r2, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8015284:	4b14      	ldr	r3, [pc, #80]	@ (80152d8 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	dd1d      	ble.n	80152c8 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015292:	461c      	mov	r4, r3
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801529a:	461d      	mov	r5, r3
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	693a      	ldr	r2, [r7, #16]
 80152a2:	1ad0      	subs	r0, r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	68d2      	ldr	r2, [r2, #12]
 80152ac:	68f9      	ldr	r1, [r7, #12]
 80152ae:	1a8a      	subs	r2, r1, r2
 80152b0:	6879      	ldr	r1, [r7, #4]
 80152b2:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 80152b6:	9102      	str	r1, [sp, #8]
 80152b8:	9201      	str	r2, [sp, #4]
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	4603      	mov	r3, r0
 80152be:	462a      	mov	r2, r5
 80152c0:	4621      	mov	r1, r4
 80152c2:	4806      	ldr	r0, [pc, #24]	@ (80152dc <prvTCPWindowRx_ExpectedRX+0xd4>)
 80152c4:	f00c fae8 	bl	8021898 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	697a      	ldr	r2, [r7, #20]
 80152cc:	611a      	str	r2, [r3, #16]
        }
 80152ce:	bf00      	nop
 80152d0:	3718      	adds	r7, #24
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bdb0      	pop	{r4, r5, r7, pc}
 80152d6:	bf00      	nop
 80152d8:	20001484 	.word	0x20001484
 80152dc:	080264d4 	.word	0x080264d4

080152e0 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 80152e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152e2:	b08f      	sub	sp, #60	@ 0x3c
 80152e4:	af04      	add	r7, sp, #16
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 80152ec:	f04f 33ff 	mov.w	r3, #4294967295
 80152f0:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 80152f2:	68ba      	ldr	r2, [r7, #8]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	4413      	add	r3, r2
 80152f8:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	691b      	ldr	r3, [r3, #16]
 80152fe:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8015300:	6a39      	ldr	r1, [r7, #32]
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	f7ff fd04 	bl	8014d10 <xTCPWindowRxFind>
 8015308:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d006      	beq.n	801531e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8015310:	69bb      	ldr	r3, [r7, #24]
 8015312:	689b      	ldr	r3, [r3, #8]
 8015314:	461a      	mov	r2, r3
 8015316:	6a3b      	ldr	r3, [r7, #32]
 8015318:	4413      	add	r3, r2
 801531a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801531c:	e7f0      	b.n	8015300 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801531e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8015320:	4b45      	ldr	r3, [pc, #276]	@ (8015438 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	dd20      	ble.n	801536a <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801532e:	461d      	mov	r5, r3
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015336:	461e      	mov	r6, r3
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	68db      	ldr	r3, [r3, #12]
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	1ad0      	subs	r0, r2, r3
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	69fa      	ldr	r2, [r7, #28]
 8015346:	1ad3      	subs	r3, r2, r3
 8015348:	68b9      	ldr	r1, [r7, #8]
 801534a:	69fa      	ldr	r2, [r7, #28]
 801534c:	1a8a      	subs	r2, r1, r2
 801534e:	4614      	mov	r4, r2
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	68d2      	ldr	r2, [r2, #12]
 8015354:	6a39      	ldr	r1, [r7, #32]
 8015356:	1a8a      	subs	r2, r1, r2
 8015358:	9202      	str	r2, [sp, #8]
 801535a:	9401      	str	r4, [sp, #4]
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	4603      	mov	r3, r0
 8015360:	4632      	mov	r2, r6
 8015362:	4629      	mov	r1, r5
 8015364:	4835      	ldr	r0, [pc, #212]	@ (801543c <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8015366:	f00c fa97 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	4a34      	ldr	r2, [pc, #208]	@ (8015440 <prvTCPWindowRx_UnexpectedRX+0x160>)
 801536e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	061a      	lsls	r2, r3, #24
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	021b      	lsls	r3, r3, #8
 801537a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801537e:	431a      	orrs	r2, r3
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	0a1b      	lsrs	r3, r3, #8
 8015384:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015388:	431a      	orrs	r2, r3
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	0e1b      	lsrs	r3, r3, #24
 801538e:	431a      	orrs	r2, r3
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8015396:	6a3b      	ldr	r3, [r7, #32]
 8015398:	061a      	lsls	r2, r3, #24
 801539a:	6a3b      	ldr	r3, [r7, #32]
 801539c:	021b      	lsls	r3, r3, #8
 801539e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80153a2:	431a      	orrs	r2, r3
 80153a4:	6a3b      	ldr	r3, [r7, #32]
 80153a6:	0a1b      	lsrs	r3, r3, #8
 80153a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80153ac:	431a      	orrs	r2, r3
 80153ae:	6a3b      	ldr	r3, [r7, #32]
 80153b0:	0e1b      	lsrs	r3, r3, #24
 80153b2:	431a      	orrs	r2, r3
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	220c      	movs	r2, #12
 80153be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80153c2:	68b9      	ldr	r1, [r7, #8]
 80153c4:	68f8      	ldr	r0, [r7, #12]
 80153c6:	f7ff fca3 	bl	8014d10 <xTCPWindowRxFind>
 80153ca:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 80153cc:	69bb      	ldr	r3, [r7, #24]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d12d      	bne.n	801542e <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	2301      	movs	r3, #1
 80153d6:	68b9      	ldr	r1, [r7, #8]
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f7ff fcc1 	bl	8014d60 <xTCPWindowNew>
 80153de:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d104      	bne.n	80153f0 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2200      	movs	r2, #0
 80153ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80153ee:	e01e      	b.n	801542e <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 80153f0:	4b11      	ldr	r3, [pc, #68]	@ (8015438 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d014      	beq.n	8015422 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80153fe:	4619      	mov	r1, r3
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015406:	4618      	mov	r0, r3
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	68db      	ldr	r3, [r3, #12]
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	1ad2      	subs	r2, r2, r3
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015416:	9300      	str	r3, [sp, #0]
 8015418:	4613      	mov	r3, r2
 801541a:	4602      	mov	r2, r0
 801541c:	4809      	ldr	r0, [pc, #36]	@ (8015444 <prvTCPWindowRx_UnexpectedRX+0x164>)
 801541e:	f00c fa3b 	bl	8021898 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	1ad3      	subs	r3, r2, r3
 8015428:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 801542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015430:	4618      	mov	r0, r3
 8015432:	372c      	adds	r7, #44	@ 0x2c
 8015434:	46bd      	mov	sp, r7
 8015436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015438:	20001484 	.word	0x20001484
 801543c:	08026518 	.word	0x08026518
 8015440:	0a050101 	.word	0x0a050101
 8015444:	08026558 	.word	0x08026558

08015448 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8015448:	b580      	push	{r7, lr}
 801544a:	b08c      	sub	sp, #48	@ 0x30
 801544c:	af00      	add	r7, sp, #0
 801544e:	60f8      	str	r0, [r7, #12]
 8015450:	60b9      	str	r1, [r7, #8]
 8015452:	607a      	str	r2, [r7, #4]
 8015454:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8015456:	f04f 33ff 	mov.w	r3, #4294967295
 801545a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8015464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015466:	2200      	movs	r2, #0
 8015468:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	691b      	ldr	r3, [r3, #16]
 801546e:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8015470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015474:	4413      	add	r3, r2
 8015476:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8015478:	69fa      	ldr	r2, [r7, #28]
 801547a:	6a3b      	ldr	r3, [r7, #32]
 801547c:	1ad3      	subs	r3, r2, r3
 801547e:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8015480:	69bb      	ldr	r3, [r7, #24]
 8015482:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8015484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015486:	6a3b      	ldr	r3, [r7, #32]
 8015488:	1ad3      	subs	r3, r2, r3
 801548a:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 801548c:	69bb      	ldr	r3, [r7, #24]
 801548e:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	2b00      	cmp	r3, #0
 8015494:	da18      	bge.n	80154c8 <lTCPWindowRxCheck+0x80>
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	2b00      	cmp	r3, #0
 801549a:	dd15      	ble.n	80154c8 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	68db      	ldr	r3, [r3, #12]
 80154a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154a2:	1ad2      	subs	r2, r2, r3
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154a8:	4824      	ldr	r0, [pc, #144]	@ (801553c <lTCPWindowRxCheck+0xf4>)
 80154aa:	f00c f9f5 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154b2:	1ad3      	subs	r3, r2, r3
 80154b4:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80154ba:	4413      	add	r3, r2
 80154bc:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	425b      	negs	r3, r3
 80154c2:	461a      	mov	r2, r3
 80154c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154c6:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2200      	movs	r2, #0
 80154cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2200      	movs	r2, #0
 80154d4:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 80154d6:	6a3a      	ldr	r2, [r7, #32]
 80154d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154da:	429a      	cmp	r2, r3
 80154dc:	d110      	bne.n	8015500 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 80154de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d905      	bls.n	80154f2 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154ea:	4815      	ldr	r0, [pc, #84]	@ (8015540 <lTCPWindowRxCheck+0xf8>)
 80154ec:	f00c f9d4 	bl	8021898 <lUDPLoggingPrintf>
 80154f0:	e01f      	b.n	8015532 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 80154f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154f4:	68f8      	ldr	r0, [r7, #12]
 80154f6:	f7ff fe87 	bl	8015208 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 80154fa:	2300      	movs	r3, #0
 80154fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80154fe:	e018      	b.n	8015532 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8015500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015502:	3301      	adds	r3, #1
 8015504:	6a3a      	ldr	r2, [r7, #32]
 8015506:	429a      	cmp	r2, r3
 8015508:	d013      	beq.n	8015532 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	2b00      	cmp	r3, #0
 801550e:	dd10      	ble.n	8015532 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	697a      	ldr	r2, [r7, #20]
 8015514:	429a      	cmp	r2, r3
 8015516:	dd06      	ble.n	8015526 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801551c:	6979      	ldr	r1, [r7, #20]
 801551e:	4809      	ldr	r0, [pc, #36]	@ (8015544 <lTCPWindowRxCheck+0xfc>)
 8015520:	f00c f9ba 	bl	8021898 <lUDPLoggingPrintf>
 8015524:	e005      	b.n	8015532 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8015526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801552a:	68f8      	ldr	r0, [r7, #12]
 801552c:	f7ff fed8 	bl	80152e0 <prvTCPWindowRx_UnexpectedRX>
 8015530:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8015532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015534:	4618      	mov	r0, r3
 8015536:	3730      	adds	r7, #48	@ 0x30
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	08026588 	.word	0x08026588
 8015540:	080265c8 	.word	0x080265c8
 8015544:	08026608 	.word	0x08026608

08015548 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8015548:	b480      	push	{r7}
 801554a:	b087      	sub	sp, #28
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8015554:	68fa      	ldr	r2, [r7, #12]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	4413      	add	r3, r2
 801555a:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 801555c:	697a      	ldr	r2, [r7, #20]
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	429a      	cmp	r2, r3
 8015562:	db03      	blt.n	801556c <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8015564:	697a      	ldr	r2, [r7, #20]
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	1ad3      	subs	r3, r2, r3
 801556a:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 801556c:	697b      	ldr	r3, [r7, #20]
        }
 801556e:	4618      	mov	r0, r3
 8015570:	371c      	adds	r7, #28
 8015572:	46bd      	mov	sp, r7
 8015574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015578:	4770      	bx	lr
	...

0801557c <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 801557c:	b580      	push	{r7, lr}
 801557e:	b088      	sub	sp, #32
 8015580:	af02      	add	r7, sp, #8
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	60b9      	str	r1, [r7, #8]
 8015586:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	685a      	ldr	r2, [r3, #4]
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	689b      	ldr	r3, [r3, #8]
 8015590:	1ad3      	subs	r3, r2, r3
 8015592:	4619      	mov	r1, r3
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f7f4 fe05 	bl	800a1a4 <FreeRTOS_min_int32>
 801559a:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	689a      	ldr	r2, [r3, #8]
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	441a      	add	r2, r3
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	689a      	ldr	r2, [r3, #8]
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	db02      	blt.n	80155ba <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	2200      	movs	r2, #0
 80155b8:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	441a      	add	r2, r3
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80155c6:	4b12      	ldr	r3, [pc, #72]	@ (8015610 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	2b01      	cmp	r3, #1
 80155cc:	dd1a      	ble.n	8015604 <prvTCPWindowTxAdd_FrontSegment+0x88>
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80155d4:	2b17      	cmp	r3, #23
 80155d6:	d015      	beq.n	8015604 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	69db      	ldr	r3, [r3, #28]
 80155e0:	1ad1      	subs	r1, r2, r3
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	6898      	ldr	r0, [r3, #8]
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	69db      	ldr	r3, [r3, #28]
 80155ee:	1ad3      	subs	r3, r2, r3
 80155f0:	68ba      	ldr	r2, [r7, #8]
 80155f2:	68d2      	ldr	r2, [r2, #12]
 80155f4:	9201      	str	r2, [sp, #4]
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	4603      	mov	r3, r0
 80155fa:	460a      	mov	r2, r1
 80155fc:	6879      	ldr	r1, [r7, #4]
 80155fe:	4805      	ldr	r0, [pc, #20]	@ (8015614 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8015600:	f00c f94a 	bl	8021898 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8015604:	697b      	ldr	r3, [r7, #20]
        }
 8015606:	4618      	mov	r0, r3
 8015608:	3718      	adds	r7, #24
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	20001484 	.word	0x20001484
 8015614:	0802664c 	.word	0x0802664c

08015618 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8015618:	b580      	push	{r7, lr}
 801561a:	b08a      	sub	sp, #40	@ 0x28
 801561c:	af00      	add	r7, sp, #0
 801561e:	60f8      	str	r0, [r7, #12]
 8015620:	60b9      	str	r1, [r7, #8]
 8015622:	607a      	str	r2, [r7, #4]
 8015624:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 801562a:	2300      	movs	r3, #0
 801562c:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015636:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d073      	beq.n	8015726 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	689a      	ldr	r2, [r3, #8]
 8015642:	69bb      	ldr	r3, [r7, #24]
 8015644:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8015646:	429a      	cmp	r2, r3
 8015648:	da6d      	bge.n	8015726 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	7d9b      	ldrb	r3, [r3, #22]
 801564e:	f003 0301 	and.w	r3, r3, #1
 8015652:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8015654:	2b00      	cmp	r3, #0
 8015656:	d166      	bne.n	8015726 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 801565c:	2b00      	cmp	r3, #0
 801565e:	d062      	beq.n	8015726 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8015660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015662:	69b9      	ldr	r1, [r7, #24]
 8015664:	68f8      	ldr	r0, [r7, #12]
 8015666:	f7ff ff89 	bl	801557c <prvTCPWindowTxAdd_FrontSegment>
 801566a:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 801566c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	1ad3      	subs	r3, r2, r3
 8015672:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8015674:	6a3a      	ldr	r2, [r7, #32]
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	4413      	add	r3, r2
 801567a:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 801567c:	697a      	ldr	r2, [r7, #20]
 801567e:	6839      	ldr	r1, [r7, #0]
 8015680:	69f8      	ldr	r0, [r7, #28]
 8015682:	f7ff ff61 	bl	8015548 <lTCPIncrementTxPosition>
 8015686:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8015688:	e04d      	b.n	8015726 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015694:	461a      	mov	r2, r3
 8015696:	2300      	movs	r3, #0
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f7ff fb61 	bl	8014d60 <xTCPWindowNew>
 801569e:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d037      	beq.n	8015716 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80156a6:	69bb      	ldr	r3, [r7, #24]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	4619      	mov	r1, r3
 80156ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80156ae:	f7f4 fd79 	bl	800a1a4 <FreeRTOS_min_int32>
 80156b2:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 80156b4:	69bb      	ldr	r3, [r7, #24]
 80156b6:	697a      	ldr	r2, [r7, #20]
 80156b8:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	69fa      	ldr	r2, [r7, #28]
 80156be:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 80156c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	1ad3      	subs	r3, r2, r3
 80156c6:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80156c8:	697a      	ldr	r2, [r7, #20]
 80156ca:	6839      	ldr	r1, [r7, #0]
 80156cc:	69f8      	ldr	r0, [r7, #28]
 80156ce:	f7ff ff3b 	bl	8015548 <lTCPIncrementTxPosition>
 80156d2:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	441a      	add	r2, r3
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 80156e0:	6a3a      	ldr	r2, [r7, #32]
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	4413      	add	r3, r2
 80156e6:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	3318      	adds	r3, #24
 80156f2:	4619      	mov	r1, r3
 80156f4:	4610      	mov	r0, r2
 80156f6:	f7ff fa63 	bl	8014bc0 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	689a      	ldr	r2, [r3, #8]
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	429a      	cmp	r2, r3
 8015704:	da03      	bge.n	801570e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	69ba      	ldr	r2, [r7, #24]
 801570a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801570c:	e00b      	b.n	8015726 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2200      	movs	r2, #0
 8015712:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015714:	e007      	b.n	8015726 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8015716:	6a3b      	ldr	r3, [r7, #32]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d008      	beq.n	801572e <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 801571c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801571e:	4807      	ldr	r0, [pc, #28]	@ (801573c <lTCPWindowTxAdd+0x124>)
 8015720:	f00c f8ba 	bl	8021898 <lUDPLoggingPrintf>
                    }

                    break;
 8015724:	e003      	b.n	801572e <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8015726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015728:	2b00      	cmp	r3, #0
 801572a:	dcae      	bgt.n	801568a <lTCPWindowTxAdd+0x72>
 801572c:	e000      	b.n	8015730 <lTCPWindowTxAdd+0x118>
                    break;
 801572e:	bf00      	nop
                }
            }

            return lDone;
 8015730:	6a3b      	ldr	r3, [r7, #32]
        }
 8015732:	4618      	mov	r0, r3
 8015734:	3728      	adds	r7, #40	@ 0x28
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	08026694 	.word	0x08026694

08015740 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8015740:	b480      	push	{r7}
 8015742:	b083      	sub	sp, #12
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801574e:	2b00      	cmp	r3, #0
 8015750:	d101      	bne.n	8015756 <xTCPWindowTxDone+0x16>
 8015752:	2301      	movs	r3, #1
 8015754:	e000      	b.n	8015758 <xTCPWindowTxDone+0x18>
 8015756:	2300      	movs	r3, #0
        }
 8015758:	4618      	mov	r0, r3
 801575a:	370c      	adds	r7, #12
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8015764:	b580      	push	{r7, lr}
 8015766:	b086      	sub	sp, #24
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	3354      	adds	r3, #84	@ 0x54
 8015772:	4618      	mov	r0, r3
 8015774:	f7ff fbb5 	bl	8014ee2 <xTCPWindowPeekHead>
 8015778:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d102      	bne.n	8015786 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8015780:	2300      	movs	r3, #0
 8015782:	613b      	str	r3, [r7, #16]
 8015784:	e02f      	b.n	80157e6 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6a1b      	ldr	r3, [r3, #32]
 801578e:	429a      	cmp	r2, r3
 8015790:	d306      	bcc.n	80157a0 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	6a1b      	ldr	r3, [r3, #32]
 801579a:	1ad3      	subs	r3, r2, r3
 801579c:	617b      	str	r3, [r7, #20]
 801579e:	e001      	b.n	80157a4 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 80157a0:	2300      	movs	r3, #0
 80157a2:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80157a4:	6979      	ldr	r1, [r7, #20]
 80157a6:	6838      	ldr	r0, [r7, #0]
 80157a8:	f7f4 fd0c 	bl	800a1c4 <FreeRTOS_min_uint32>
 80157ac:	4602      	mov	r2, r0
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	1a9b      	subs	r3, r3, r2
 80157b2:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	689b      	ldr	r3, [r3, #8]
 80157b8:	461a      	mov	r2, r3
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	4293      	cmp	r3, r2
 80157be:	d302      	bcc.n	80157c6 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 80157c0:	2301      	movs	r3, #1
 80157c2:	613b      	str	r3, [r7, #16]
 80157c4:	e001      	b.n	80157ca <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 80157c6:	2300      	movs	r3, #0
 80157c8:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d00a      	beq.n	80157e6 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	689b      	ldr	r3, [r3, #8]
 80157d8:	4619      	mov	r1, r3
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 80157de:	429a      	cmp	r2, r3
 80157e0:	d201      	bcs.n	80157e6 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 80157e2:	2300      	movs	r3, #0
 80157e4:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 80157e6:	693b      	ldr	r3, [r7, #16]
        }
 80157e8:	4618      	mov	r0, r3
 80157ea:	3718      	adds	r7, #24
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b08a      	sub	sp, #40	@ 0x28
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	60f8      	str	r0, [r7, #12]
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2200      	movs	r2, #0
 8015800:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015806:	2b00      	cmp	r3, #0
 8015808:	d002      	beq.n	8015810 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 801580a:	2301      	movs	r3, #1
 801580c:	627b      	str	r3, [r7, #36]	@ 0x24
 801580e:	e050      	b.n	80158b2 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	3368      	adds	r3, #104	@ 0x68
 8015814:	4618      	mov	r0, r3
 8015816:	f7ff fb64 	bl	8014ee2 <xTCPWindowPeekHead>
 801581a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 801581c:	6a3b      	ldr	r3, [r7, #32]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d01f      	beq.n	8015862 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015826:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015828:	6a3b      	ldr	r3, [r7, #32]
 801582a:	3310      	adds	r3, #16
 801582c:	4618      	mov	r0, r3
 801582e:	f7ff f9e4 	bl	8014bfa <ulTimerGetAge>
 8015832:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8015834:	6a3b      	ldr	r3, [r7, #32]
 8015836:	7d1b      	ldrb	r3, [r3, #20]
 8015838:	461a      	mov	r2, r3
 801583a:	2301      	movs	r3, #1
 801583c:	4093      	lsls	r3, r2
 801583e:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	69fa      	ldr	r2, [r7, #28]
 8015844:	fb02 f303 	mul.w	r3, r2, r3
 8015848:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 801584a:	697a      	ldr	r2, [r7, #20]
 801584c:	69bb      	ldr	r3, [r7, #24]
 801584e:	429a      	cmp	r2, r3
 8015850:	d904      	bls.n	801585c <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8015852:	697a      	ldr	r2, [r7, #20]
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	1ad2      	subs	r2, r2, r3
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 801585c:	2301      	movs	r3, #1
 801585e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015860:	e027      	b.n	80158b2 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	3354      	adds	r3, #84	@ 0x54
 8015866:	4618      	mov	r0, r3
 8015868:	f7ff fb3b 	bl	8014ee2 <xTCPWindowPeekHead>
 801586c:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801586e:	6a3b      	ldr	r3, [r7, #32]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d102      	bne.n	801587a <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8015874:	2300      	movs	r3, #0
 8015876:	627b      	str	r3, [r7, #36]	@ 0x24
 8015878:	e01b      	b.n	80158b2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801587a:	68b9      	ldr	r1, [r7, #8]
 801587c:	68f8      	ldr	r0, [r7, #12]
 801587e:	f7ff ff71 	bl	8015764 <prvTCPWindowTxHasSpace>
 8015882:	4603      	mov	r3, r0
 8015884:	2b00      	cmp	r3, #0
 8015886:	d102      	bne.n	801588e <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8015888:	2300      	movs	r3, #0
 801588a:	627b      	str	r3, [r7, #36]	@ 0x24
 801588c:	e011      	b.n	80158b2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	f003 0302 	and.w	r3, r3, #2
 8015896:	b2db      	uxtb	r3, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	d008      	beq.n	80158ae <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801589c:	6a3b      	ldr	r3, [r7, #32]
 801589e:	689a      	ldr	r2, [r3, #8]
 80158a0:	6a3b      	ldr	r3, [r7, #32]
 80158a2:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80158a4:	429a      	cmp	r2, r3
 80158a6:	da02      	bge.n	80158ae <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80158a8:	2300      	movs	r3, #0
 80158aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80158ac:	e001      	b.n	80158b2 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 80158ae:	2301      	movs	r3, #1
 80158b0:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 80158b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80158b4:	4618      	mov	r0, r3
 80158b6:	3728      	adds	r7, #40	@ 0x28
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}

080158bc <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 80158bc:	b590      	push	{r4, r7, lr}
 80158be:	b087      	sub	sp, #28
 80158c0:	af02      	add	r7, sp, #8
 80158c2:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3368      	adds	r3, #104	@ 0x68
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7ff fb0a 	bl	8014ee2 <xTCPWindowPeekHead>
 80158ce:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d043      	beq.n	801595e <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	7d1b      	ldrb	r3, [r3, #20]
 80158da:	461a      	mov	r2, r3
 80158dc:	2301      	movs	r3, #1
 80158de:	4093      	lsls	r3, r2
 80158e0:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158e6:	461a      	mov	r2, r3
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	fb02 f303 	mul.w	r3, r2, r3
 80158ee:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	3310      	adds	r3, #16
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7ff f980 	bl	8014bfa <ulTimerGetAge>
 80158fa:	4602      	mov	r2, r0
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	4293      	cmp	r3, r2
 8015900:	d22b      	bcs.n	801595a <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	3368      	adds	r3, #104	@ 0x68
 8015906:	4618      	mov	r0, r3
 8015908:	f7ff fad2 	bl	8014eb0 <xTCPWindowGetHead>
 801590c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2200      	movs	r2, #0
 8015912:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015914:	4b14      	ldr	r3, [pc, #80]	@ (8015968 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d020      	beq.n	801595e <pxTCPWindowTx_GetWaitQueue+0xa2>
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015922:	2b17      	cmp	r3, #23
 8015924:	d01b      	beq.n	801595e <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801592c:	4618      	mov	r0, r3
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015934:	461c      	mov	r4, r3
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	6899      	ldr	r1, [r3, #8]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	681a      	ldr	r2, [r3, #0]
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	69db      	ldr	r3, [r3, #28]
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	68fa      	ldr	r2, [r7, #12]
 8015946:	6812      	ldr	r2, [r2, #0]
 8015948:	9201      	str	r2, [sp, #4]
 801594a:	9300      	str	r3, [sp, #0]
 801594c:	460b      	mov	r3, r1
 801594e:	4622      	mov	r2, r4
 8015950:	4601      	mov	r1, r0
 8015952:	4806      	ldr	r0, [pc, #24]	@ (801596c <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8015954:	f00b ffa0 	bl	8021898 <lUDPLoggingPrintf>
 8015958:	e001      	b.n	801595e <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 801595a:	2300      	movs	r3, #0
 801595c:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801595e:	68fb      	ldr	r3, [r7, #12]
        }
 8015960:	4618      	mov	r0, r3
 8015962:	3714      	adds	r7, #20
 8015964:	46bd      	mov	sp, r7
 8015966:	bd90      	pop	{r4, r7, pc}
 8015968:	20001484 	.word	0x20001484
 801596c:	080266d0 	.word	0x080266d0

08015970 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8015970:	b590      	push	{r4, r7, lr}
 8015972:	b087      	sub	sp, #28
 8015974:	af02      	add	r7, sp, #8
 8015976:	6078      	str	r0, [r7, #4]
 8015978:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	3354      	adds	r3, #84	@ 0x54
 801597e:	4618      	mov	r0, r3
 8015980:	f7ff faaf 	bl	8014ee2 <xTCPWindowPeekHead>
 8015984:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d04f      	beq.n	8015a2c <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	f003 0302 	and.w	r3, r3, #2
 8015994:	b2db      	uxtb	r3, r3
 8015996:	2b00      	cmp	r3, #0
 8015998:	d008      	beq.n	80159ac <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	689a      	ldr	r2, [r3, #8]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80159a2:	429a      	cmp	r2, r3
 80159a4:	da02      	bge.n	80159ac <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 80159a6:	2300      	movs	r3, #0
 80159a8:	60fb      	str	r3, [r7, #12]
 80159aa:	e03f      	b.n	8015a2c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f7ff fed8 	bl	8015764 <prvTCPWindowTxHasSpace>
 80159b4:	4603      	mov	r3, r0
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d102      	bne.n	80159c0 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 80159ba:	2300      	movs	r3, #0
 80159bc:	60fb      	str	r3, [r7, #12]
 80159be:	e035      	b.n	8015a2c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	3354      	adds	r3, #84	@ 0x54
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7ff fa73 	bl	8014eb0 <xTCPWindowGetHead>
 80159ca:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80159d0:	68fa      	ldr	r2, [r7, #12]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d102      	bne.n	80159dc <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2200      	movs	r2, #0
 80159da:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	68fa      	ldr	r2, [r7, #12]
 80159e2:	6892      	ldr	r2, [r2, #8]
 80159e4:	441a      	add	r2, r3
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80159ea:	4b13      	ldr	r3, [pc, #76]	@ (8015a38 <pxTCPWindowTx_GetTXQueue+0xc8>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2b01      	cmp	r3, #1
 80159f0:	dd1c      	ble.n	8015a2c <pxTCPWindowTx_GetTXQueue+0xbc>
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80159f8:	2b17      	cmp	r3, #23
 80159fa:	d017      	beq.n	8015a2c <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015a02:	4618      	mov	r0, r3
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a0a:	461c      	mov	r4, r3
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	6899      	ldr	r1, [r3, #8]
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	69db      	ldr	r3, [r3, #28]
 8015a18:	1ad3      	subs	r3, r2, r3
 8015a1a:	683a      	ldr	r2, [r7, #0]
 8015a1c:	9201      	str	r2, [sp, #4]
 8015a1e:	9300      	str	r3, [sp, #0]
 8015a20:	460b      	mov	r3, r1
 8015a22:	4622      	mov	r2, r4
 8015a24:	4601      	mov	r1, r0
 8015a26:	4805      	ldr	r0, [pc, #20]	@ (8015a3c <pxTCPWindowTx_GetTXQueue+0xcc>)
 8015a28:	f00b ff36 	bl	8021898 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
        }
 8015a2e:	4618      	mov	r0, r3
 8015a30:	3714      	adds	r7, #20
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd90      	pop	{r4, r7, pc}
 8015a36:	bf00      	nop
 8015a38:	20001484 	.word	0x20001484
 8015a3c:	0802671c 	.word	0x0802671c

08015a40 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8015a40:	b590      	push	{r4, r7, lr}
 8015a42:	b08b      	sub	sp, #44	@ 0x2c
 8015a44:	af02      	add	r7, sp, #8
 8015a46:	60f8      	str	r0, [r7, #12]
 8015a48:	60b9      	str	r1, [r7, #8]
 8015a4a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	3340      	adds	r3, #64	@ 0x40
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7ff fa2b 	bl	8014eb0 <xTCPWindowGetHead>
 8015a5a:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8015a64:	69fb      	ldr	r3, [r7, #28]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d01c      	beq.n	8015aa4 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8015a6a:	4b41      	ldr	r3, [pc, #260]	@ (8015b70 <ulTCPWindowTxGet+0x130>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d024      	beq.n	8015abc <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015a78:	4618      	mov	r0, r3
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a80:	461c      	mov	r4, r3
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	6899      	ldr	r1, [r3, #8]
 8015a86:	69fb      	ldr	r3, [r7, #28]
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	69db      	ldr	r3, [r3, #28]
 8015a8e:	1ad3      	subs	r3, r2, r3
 8015a90:	68ba      	ldr	r2, [r7, #8]
 8015a92:	9201      	str	r2, [sp, #4]
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	460b      	mov	r3, r1
 8015a98:	4622      	mov	r2, r4
 8015a9a:	4601      	mov	r1, r0
 8015a9c:	4835      	ldr	r0, [pc, #212]	@ (8015b74 <ulTCPWindowTxGet+0x134>)
 8015a9e:	f00b fefb 	bl	8021898 <lUDPLoggingPrintf>
 8015aa2:	e00b      	b.n	8015abc <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8015aa4:	68f8      	ldr	r0, [r7, #12]
 8015aa6:	f7ff ff09 	bl	80158bc <pxTCPWindowTx_GetWaitQueue>
 8015aaa:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8015aac:	69fb      	ldr	r3, [r7, #28]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d104      	bne.n	8015abc <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8015ab2:	68b9      	ldr	r1, [r7, #8]
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f7ff ff5b 	bl	8015970 <pxTCPWindowTx_GetTXQueue>
 8015aba:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8015abc:	69fb      	ldr	r3, [r7, #28]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d051      	beq.n	8015b66 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8015ac2:	69fb      	ldr	r3, [r7, #28]
 8015ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d004      	beq.n	8015ad4 <ulTCPWindowTxGet+0x94>
 8015aca:	f240 7136 	movw	r1, #1846	@ 0x736
 8015ace:	482a      	ldr	r0, [pc, #168]	@ (8015b78 <ulTCPWindowTxGet+0x138>)
 8015ad0:	f7eb fdc2 	bl	8001658 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	3318      	adds	r3, #24
 8015ade:	4619      	mov	r1, r3
 8015ae0:	4610      	mov	r0, r2
 8015ae2:	f7ff f86d 	bl	8014bc0 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8015ae6:	69fa      	ldr	r2, [r7, #28]
 8015ae8:	7d93      	ldrb	r3, [r2, #22]
 8015aea:	f043 0301 	orr.w	r3, r3, #1
 8015aee:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8015af0:	69fb      	ldr	r3, [r7, #28]
 8015af2:	7d1b      	ldrb	r3, [r3, #20]
 8015af4:	3301      	adds	r3, #1
 8015af6:	b2da      	uxtb	r2, r3
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015afc:	69fb      	ldr	r3, [r7, #28]
 8015afe:	7d1b      	ldrb	r3, [r3, #20]
 8015b00:	2b04      	cmp	r3, #4
 8015b02:	d120      	bne.n	8015b46 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	689a      	ldr	r2, [r3, #8]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015b0e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d918      	bls.n	8015b46 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015b1a:	005b      	lsls	r3, r3, #1
 8015b1c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015b24:	4619      	mov	r1, r3
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	689a      	ldr	r2, [r3, #8]
 8015b32:	8afb      	ldrh	r3, [r7, #22]
 8015b34:	9300      	str	r3, [sp, #0]
 8015b36:	4613      	mov	r3, r2
 8015b38:	4602      	mov	r2, r0
 8015b3a:	4810      	ldr	r0, [pc, #64]	@ (8015b7c <ulTCPWindowTxGet+0x13c>)
 8015b3c:	f00b feac 	bl	8021898 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8015b40:	8afa      	ldrh	r2, [r7, #22]
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8015b46:	69fb      	ldr	r3, [r7, #28]
 8015b48:	3310      	adds	r3, #16
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7ff f848 	bl	8014be0 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8015b58:	69fb      	ldr	r3, [r7, #28]
 8015b5a:	68da      	ldr	r2, [r3, #12]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8015b60:	69fb      	ldr	r3, [r7, #28]
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8015b66:	69bb      	ldr	r3, [r7, #24]
        }
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3724      	adds	r7, #36	@ 0x24
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd90      	pop	{r4, r7, pc}
 8015b70:	20001484 	.word	0x20001484
 8015b74:	08026768 	.word	0x08026768
 8015b78:	08026404 	.word	0x08026404
 8015b7c:	080267b4 	.word	0x080267b4

08015b80 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b084      	sub	sp, #16
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
 8015b88:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	3310      	adds	r3, #16
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7ff f833 	bl	8014bfa <ulTimerGetAge>
 8015b94:	4603      	mov	r3, r0
 8015b96:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b9c:	68fa      	ldr	r2, [r7, #12]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	dc0e      	bgt.n	8015bc0 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	00db      	lsls	r3, r3, #3
 8015baa:	1a9a      	subs	r2, r3, r2
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	4413      	add	r3, r2
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	da00      	bge.n	8015bb6 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8015bb4:	3307      	adds	r3, #7
 8015bb6:	10db      	asrs	r3, r3, #3
 8015bb8:	461a      	mov	r2, r3
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	639a      	str	r2, [r3, #56]	@ 0x38
 8015bbe:	e00d      	b.n	8015bdc <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	005b      	lsls	r3, r3, #1
 8015bc8:	441a      	add	r2, r3
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	4413      	add	r3, r2
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	da00      	bge.n	8015bd4 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8015bd2:	3303      	adds	r3, #3
 8015bd4:	109b      	asrs	r3, r3, #2
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015be0:	2b31      	cmp	r3, #49	@ 0x31
 8015be2:	dc02      	bgt.n	8015bea <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2232      	movs	r2, #50	@ 0x32
 8015be8:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8015bea:	bf00      	nop
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
	...

08015bf4 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8015bf4:	b5b0      	push	{r4, r5, r7, lr}
 8015bf6:	b090      	sub	sp, #64	@ 0x40
 8015bf8:	af04      	add	r7, sp, #16
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8015c00:	2300      	movs	r3, #0
 8015c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	3398      	adds	r3, #152	@ 0x98
 8015c0c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8015c0e:	69fb      	ldr	r3, [r7, #28]
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015c14:	e0a6      	b.n	8015d64 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8015c16:	2300      	movs	r3, #0
 8015c18:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c1c:	68db      	ldr	r3, [r3, #12]
 8015c1e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8015c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8015c26:	69bb      	ldr	r3, [r7, #24]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4619      	mov	r1, r3
 8015c2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c2e:	f7fe ff9c 	bl	8014b6a <xSequenceGreaterThan>
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	f040 8094 	bne.w	8015d62 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8015c3a:	69bb      	ldr	r3, [r7, #24]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015c40:	429a      	cmp	r2, r3
 8015c42:	f040 809c 	bne.w	8015d7e <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8015c46:	69bb      	ldr	r3, [r7, #24]
 8015c48:	689b      	ldr	r3, [r3, #8]
 8015c4a:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015c4c:	69bb      	ldr	r3, [r7, #24]
 8015c4e:	7d9b      	ldrb	r3, [r3, #22]
 8015c50:	f003 0302 	and.w	r3, r3, #2
 8015c54:	b2db      	uxtb	r3, r3
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d144      	bne.n	8015ce4 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	681a      	ldr	r2, [r3, #0]
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	4413      	add	r3, r2
 8015c62:	6879      	ldr	r1, [r7, #4]
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7fe ff80 	bl	8014b6a <xSequenceGreaterThan>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d023      	beq.n	8015cb8 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8015c70:	69bb      	ldr	r3, [r7, #24]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	69db      	ldr	r3, [r3, #28]
 8015c78:	1ad3      	subs	r3, r2, r3
 8015c7a:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015c82:	461c      	mov	r4, r3
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015c8a:	461d      	mov	r5, r3
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	69db      	ldr	r3, [r3, #28]
 8015c90:	693a      	ldr	r2, [r7, #16]
 8015c92:	1ad0      	subs	r0, r2, r3
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	69db      	ldr	r3, [r3, #28]
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	1ad3      	subs	r3, r2, r3
 8015c9c:	6939      	ldr	r1, [r7, #16]
 8015c9e:	697a      	ldr	r2, [r7, #20]
 8015ca0:	440a      	add	r2, r1
 8015ca2:	9202      	str	r2, [sp, #8]
 8015ca4:	693a      	ldr	r2, [r7, #16]
 8015ca6:	9201      	str	r2, [sp, #4]
 8015ca8:	9300      	str	r3, [sp, #0]
 8015caa:	4603      	mov	r3, r0
 8015cac:	462a      	mov	r2, r5
 8015cae:	4621      	mov	r1, r4
 8015cb0:	4836      	ldr	r0, [pc, #216]	@ (8015d8c <prvTCPWindowTxCheckAck+0x198>)
 8015cb2:	f00b fdf1 	bl	8021898 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8015cb6:	e063      	b.n	8015d80 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8015cb8:	69ba      	ldr	r2, [r7, #24]
 8015cba:	7d93      	ldrb	r3, [r2, #22]
 8015cbc:	f043 0302 	orr.w	r3, r3, #2
 8015cc0:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015cc2:	69bb      	ldr	r3, [r7, #24]
 8015cc4:	7d1b      	ldrb	r3, [r3, #20]
 8015cc6:	2b01      	cmp	r3, #1
 8015cc8:	d10a      	bne.n	8015ce0 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8015cca:	69bb      	ldr	r3, [r7, #24]
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015cd2:	687a      	ldr	r2, [r7, #4]
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d103      	bne.n	8015ce0 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8015cd8:	69b9      	ldr	r1, [r7, #24]
 8015cda:	68f8      	ldr	r0, [r7, #12]
 8015cdc:	f7ff ff50 	bl	8015b80 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	6a1b      	ldr	r3, [r3, #32]
 8015ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d128      	bne.n	8015d40 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015cee:	4b28      	ldr	r3, [pc, #160]	@ (8015d90 <prvTCPWindowTxCheckAck+0x19c>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	dd15      	ble.n	8015d22 <prvTCPWindowTxCheckAck+0x12e>
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015cfc:	2b17      	cmp	r3, #23
 8015cfe:	d010      	beq.n	8015d22 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	69db      	ldr	r3, [r3, #28]
 8015d04:	68ba      	ldr	r2, [r7, #8]
 8015d06:	1ad1      	subs	r1, r2, r3
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	69db      	ldr	r3, [r3, #28]
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	1ad0      	subs	r0, r2, r3
 8015d10:	69bb      	ldr	r3, [r7, #24]
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	69db      	ldr	r3, [r3, #28]
 8015d18:	1ad3      	subs	r3, r2, r3
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	481d      	ldr	r0, [pc, #116]	@ (8015d94 <prvTCPWindowTxCheckAck+0x1a0>)
 8015d1e:	f00b fdbb 	bl	8021898 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	6a1a      	ldr	r2, [r3, #32]
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	441a      	add	r2, r3
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8015d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	4413      	add	r3, r2
 8015d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8015d36:	69b8      	ldr	r0, [r7, #24]
 8015d38:	f7ff f8ec 	bl	8014f14 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8015d40:	6a3b      	ldr	r3, [r7, #32]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d008      	beq.n	8015d58 <prvTCPWindowTxCheckAck+0x164>
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d004      	beq.n	8015d58 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015d4e:	69bb      	ldr	r3, [r7, #24]
 8015d50:	3318      	adds	r3, #24
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ec fff4 	bl	8002d40 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8015d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015d60:	e000      	b.n	8015d64 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8015d62:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d66:	69fb      	ldr	r3, [r7, #28]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d009      	beq.n	8015d80 <prvTCPWindowTxCheckAck+0x18c>
 8015d6c:	6879      	ldr	r1, [r7, #4]
 8015d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d70:	f7fe fee5 	bl	8014b3e <xSequenceLessThan>
 8015d74:	4603      	mov	r3, r0
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	f47f af4d 	bne.w	8015c16 <prvTCPWindowTxCheckAck+0x22>
 8015d7c:	e000      	b.n	8015d80 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8015d7e:	bf00      	nop
            }

            return ulBytesConfirmed;
 8015d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015d82:	4618      	mov	r0, r3
 8015d84:	3730      	adds	r7, #48	@ 0x30
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bdb0      	pop	{r4, r5, r7, pc}
 8015d8a:	bf00      	nop
 8015d8c:	080267ec 	.word	0x080267ec
 8015d90:	20001484 	.word	0x20001484
 8015d94:	08026834 	.word	0x08026834

08015d98 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8015da2:	2300      	movs	r3, #0
 8015da4:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	3370      	adds	r3, #112	@ 0x70
 8015daa:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	685b      	ldr	r3, [r3, #4]
 8015db0:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8015db2:	e049      	b.n	8015e48 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	68db      	ldr	r3, [r3, #12]
 8015db8:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	7d9b      	ldrb	r3, [r3, #22]
 8015dc4:	f003 0302 	and.w	r3, r3, #2
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d13c      	bne.n	8015e48 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8015dce:	68bb      	ldr	r3, [r7, #8]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	6839      	ldr	r1, [r7, #0]
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7fe feb2 	bl	8014b3e <xSequenceLessThan>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d033      	beq.n	8015e48 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	7d5b      	ldrb	r3, [r3, #21]
 8015de4:	3301      	adds	r3, #1
 8015de6:	b2da      	uxtb	r2, r3
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	7d5b      	ldrb	r3, [r3, #21]
 8015df0:	2b03      	cmp	r3, #3
 8015df2:	d129      	bne.n	8015e48 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	2200      	movs	r2, #0
 8015df8:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015dfa:	4b18      	ldr	r3, [pc, #96]	@ (8015e5c <prvTCPWindowFastRetransmit+0xc4>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	db11      	blt.n	8015e26 <prvTCPWindowFastRetransmit+0x8e>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015e08:	2b17      	cmp	r3, #23
 8015e0a:	d00c      	beq.n	8015e26 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	69db      	ldr	r3, [r3, #28]
 8015e14:	1ad1      	subs	r1, r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	69db      	ldr	r3, [r3, #28]
 8015e1a:	683a      	ldr	r2, [r7, #0]
 8015e1c:	1ad3      	subs	r3, r2, r3
 8015e1e:	461a      	mov	r2, r3
 8015e20:	480f      	ldr	r0, [pc, #60]	@ (8015e60 <prvTCPWindowFastRetransmit+0xc8>)
 8015e22:	f00b fd39 	bl	8021898 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	3318      	adds	r3, #24
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7ec ff88 	bl	8002d40 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	3318      	adds	r3, #24
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	4610      	mov	r0, r2
 8015e3e:	f7fe febf 	bl	8014bc0 <vListInsertFifo>
                            ulCount++;
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	3301      	adds	r3, #1
 8015e46:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8015e48:	697a      	ldr	r2, [r7, #20]
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d1b1      	bne.n	8015db4 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8015e50:	693b      	ldr	r3, [r7, #16]
        }
 8015e52:	4618      	mov	r0, r3
 8015e54:	3718      	adds	r7, #24
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}
 8015e5a:	bf00      	nop
 8015e5c:	20001484 	.word	0x20001484
 8015e60:	08026870 	.word	0x08026870

08015e64 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	6a1b      	ldr	r3, [r3, #32]
 8015e72:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8015e74:	68b9      	ldr	r1, [r7, #8]
 8015e76:	6838      	ldr	r0, [r7, #0]
 8015e78:	f7fe fe4c 	bl	8014b14 <xSequenceLessThanOrEqual>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d002      	beq.n	8015e88 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8015e82:	2300      	movs	r3, #0
 8015e84:	60fb      	str	r3, [r7, #12]
 8015e86:	e005      	b.n	8015e94 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8015e88:	683a      	ldr	r2, [r7, #0]
 8015e8a:	68b9      	ldr	r1, [r7, #8]
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f7ff feb1 	bl	8015bf4 <prvTCPWindowTxCheckAck>
 8015e92:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8015e94:	68fb      	ldr	r3, [r7, #12]
        }
 8015e96:	4618      	mov	r0, r3
 8015e98:	3710      	adds	r7, #16
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
	...

08015ea0 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8015ea0:	b5b0      	push	{r4, r5, r7, lr}
 8015ea2:	b088      	sub	sp, #32
 8015ea4:	af02      	add	r7, sp, #8
 8015ea6:	60f8      	str	r0, [r7, #12]
 8015ea8:	60b9      	str	r1, [r7, #8]
 8015eaa:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	6a1b      	ldr	r3, [r3, #32]
 8015eb0:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	68b9      	ldr	r1, [r7, #8]
 8015eb6:	68f8      	ldr	r0, [r7, #12]
 8015eb8:	f7ff fe9c 	bl	8015bf4 <prvTCPWindowTxCheckAck>
 8015ebc:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8015ebe:	68b9      	ldr	r1, [r7, #8]
 8015ec0:	68f8      	ldr	r0, [r7, #12]
 8015ec2:	f7ff ff69 	bl	8015d98 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8015ec6:	4b16      	ldr	r3, [pc, #88]	@ (8015f20 <ulTCPWindowTxSack+0x80>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	dd23      	ble.n	8015f16 <ulTCPWindowTxSack+0x76>
 8015ece:	6979      	ldr	r1, [r7, #20]
 8015ed0:	68b8      	ldr	r0, [r7, #8]
 8015ed2:	f7fe fe4a 	bl	8014b6a <xSequenceGreaterThan>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d01c      	beq.n	8015f16 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015ee2:	461c      	mov	r4, r3
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015eea:	461d      	mov	r5, r3
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	69db      	ldr	r3, [r3, #28]
 8015ef0:	68ba      	ldr	r2, [r7, #8]
 8015ef2:	1ad0      	subs	r0, r2, r3
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	69db      	ldr	r3, [r3, #28]
 8015ef8:	687a      	ldr	r2, [r7, #4]
 8015efa:	1ad3      	subs	r3, r2, r3
 8015efc:	68fa      	ldr	r2, [r7, #12]
 8015efe:	6a11      	ldr	r1, [r2, #32]
 8015f00:	68fa      	ldr	r2, [r7, #12]
 8015f02:	69d2      	ldr	r2, [r2, #28]
 8015f04:	1a8a      	subs	r2, r1, r2
 8015f06:	9201      	str	r2, [sp, #4]
 8015f08:	9300      	str	r3, [sp, #0]
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	462a      	mov	r2, r5
 8015f0e:	4621      	mov	r1, r4
 8015f10:	4804      	ldr	r0, [pc, #16]	@ (8015f24 <ulTCPWindowTxSack+0x84>)
 8015f12:	f00b fcc1 	bl	8021898 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8015f16:	693b      	ldr	r3, [r7, #16]
        }
 8015f18:	4618      	mov	r0, r3
 8015f1a:	3718      	adds	r7, #24
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8015f20:	20001484 	.word	0x20001484
 8015f24:	080268b0 	.word	0x080268b0

08015f28 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d014      	beq.n	8015f60 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f3a:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	899b      	ldrh	r3, [r3, #12]
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	2b08      	cmp	r3, #8
 8015f44:	d004      	beq.n	8015f50 <vProcessGeneratedUDPPacket+0x28>
 8015f46:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8015f4a:	4293      	cmp	r3, r2
 8015f4c:	d004      	beq.n	8015f58 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8015f4e:	e007      	b.n	8015f60 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 f845 	bl	8015fe0 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8015f56:	e003      	b.n	8015f60 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 fae3 	bl	8016524 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 8015f5e:	bf00      	nop
        }
    }
}
 8015f60:	bf00      	nop
 8015f62:	3710      	adds	r7, #16
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b086      	sub	sp, #24
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	460b      	mov	r3, r1
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8015f76:	2300      	movs	r3, #0
 8015f78:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d103      	bne.n	8015f88 <xProcessReceivedUDPPacket+0x20>
 8015f80:	2178      	movs	r1, #120	@ 0x78
 8015f82:	4816      	ldr	r0, [pc, #88]	@ (8015fdc <xProcessReceivedUDPPacket+0x74>)
 8015f84:	f7eb fb68 	bl	8001658 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d103      	bne.n	8015f98 <xProcessReceivedUDPPacket+0x30>
 8015f90:	2179      	movs	r1, #121	@ 0x79
 8015f92:	4812      	ldr	r0, [pc, #72]	@ (8015fdc <xProcessReceivedUDPPacket+0x74>)
 8015f94:	f7eb fb60 	bl	8001658 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f9c:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	899b      	ldrh	r3, [r3, #12]
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	2b08      	cmp	r3, #8
 8015fa6:	d004      	beq.n	8015fb2 <xProcessReceivedUDPPacket+0x4a>
 8015fa8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8015fac:	4293      	cmp	r3, r2
 8015fae:	d008      	beq.n	8015fc2 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8015fb0:	e00f      	b.n	8015fd2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8015fb2:	897b      	ldrh	r3, [r7, #10]
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	68f8      	ldr	r0, [r7, #12]
 8015fba:	f000 f92f 	bl	801621c <xProcessReceivedUDPPacket_IPv4>
 8015fbe:	6178      	str	r0, [r7, #20]
                break;
 8015fc0:	e007      	b.n	8015fd2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8015fc2:	897b      	ldrh	r3, [r7, #10]
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f000 fbdd 	bl	8016788 <xProcessReceivedUDPPacket_IPv6>
 8015fce:	6178      	str	r0, [r7, #20]
                break;
 8015fd0:	bf00      	nop
    }

    return xReturn;
 8015fd2:	697b      	ldr	r3, [r7, #20]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3718      	adds	r7, #24
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	080268e4 	.word	0x080268e4

08015fe0 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b08e      	sub	sp, #56	@ 0x38
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	695b      	ldr	r3, [r3, #20]
 8015fec:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015ff2:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ff8:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d104      	bne.n	801600c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016006:	3b2a      	subs	r3, #42	@ 0x2a
 8016008:	633b      	str	r3, [r7, #48]	@ 0x30
 801600a:	e003      	b.n	8016014 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016010:	3b2a      	subs	r3, #42	@ 0x2a
 8016012:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016016:	f107 0208 	add.w	r2, r7, #8
 801601a:	f107 030c 	add.w	r3, r7, #12
 801601e:	4618      	mov	r0, r3
 8016020:	f7f0 fd68 	bl	8006af4 <eARPGetCacheEntry>
 8016024:	4603      	mov	r3, r0
 8016026:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801602e:	2b00      	cmp	r3, #0
 8016030:	d102      	bne.n	8016038 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016032:	68ba      	ldr	r2, [r7, #8]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016038:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801603c:	2b02      	cmp	r3, #2
 801603e:	f000 80a0 	beq.w	8016182 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016042:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016046:	2b01      	cmp	r3, #1
 8016048:	d176      	bne.n	8016138 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 801604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801604c:	330e      	adds	r3, #14
 801604e:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016054:	2b00      	cmp	r3, #0
 8016056:	d025      	beq.n	80160a4 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801605a:	3322      	adds	r3, #34	@ 0x22
 801605c:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016062:	6a3b      	ldr	r3, [r7, #32]
 8016064:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801606a:	6a3b      	ldr	r3, [r7, #32]
 801606c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 801606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016070:	b29b      	uxth	r3, r3
 8016072:	3308      	adds	r3, #8
 8016074:	b29a      	uxth	r2, r3
 8016076:	6a3b      	ldr	r3, [r7, #32]
 8016078:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801607a:	6a3b      	ldr	r3, [r7, #32]
 801607c:	889b      	ldrh	r3, [r3, #4]
 801607e:	b29b      	uxth	r3, r3
 8016080:	021b      	lsls	r3, r3, #8
 8016082:	b21a      	sxth	r2, r3
 8016084:	6a3b      	ldr	r3, [r7, #32]
 8016086:	889b      	ldrh	r3, [r3, #4]
 8016088:	b29b      	uxth	r3, r3
 801608a:	0a1b      	lsrs	r3, r3, #8
 801608c:	b29b      	uxth	r3, r3
 801608e:	b21b      	sxth	r3, r3
 8016090:	4313      	orrs	r3, r2
 8016092:	b21b      	sxth	r3, r3
 8016094:	b29a      	uxth	r2, r3
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801609a:	6a3b      	ldr	r3, [r7, #32]
 801609c:	2200      	movs	r2, #0
 801609e:	719a      	strb	r2, [r3, #6]
 80160a0:	2200      	movs	r2, #0
 80160a2:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 80160a4:	4b5b      	ldr	r3, [pc, #364]	@ (8016214 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 80160a6:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ac:	3306      	adds	r3, #6
 80160ae:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 80160b0:	2218      	movs	r2, #24
 80160b2:	69f9      	ldr	r1, [r7, #28]
 80160b4:	69b8      	ldr	r0, [r7, #24]
 80160b6:	f00b fe0b 	bl	8021cd0 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d109      	bne.n	80160d6 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 80160c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160c4:	2201      	movs	r2, #1
 80160c6:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 80160c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	331c      	adds	r3, #28
 80160ce:	b29a      	uxth	r2, r3
 80160d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160d2:	805a      	strh	r2, [r3, #2]
 80160d4:	e005      	b.n	80160e2 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 80160d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160d8:	b29b      	uxth	r3, r3
 80160da:	331c      	adds	r3, #28
 80160dc:	b29a      	uxth	r2, r3
 80160de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160e0:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80160e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160e4:	885b      	ldrh	r3, [r3, #2]
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	021b      	lsls	r3, r3, #8
 80160ea:	b21a      	sxth	r2, r3
 80160ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160ee:	885b      	ldrh	r3, [r3, #2]
 80160f0:	b29b      	uxth	r3, r3
 80160f2:	0a1b      	lsrs	r3, r3, #8
 80160f4:	b29b      	uxth	r3, r3
 80160f6:	b21b      	sxth	r3, r3
 80160f8:	4313      	orrs	r3, r2
 80160fa:	b21b      	sxth	r3, r3
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016100:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	695a      	ldr	r2, [r3, #20]
 8016106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016108:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801610e:	2b00      	cmp	r3, #0
 8016110:	d004      	beq.n	801611c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016116:	681a      	ldr	r2, [r3, #0]
 8016118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801611a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801611e:	2200      	movs	r2, #0
 8016120:	719a      	strb	r2, [r3, #6]
 8016122:	2200      	movs	r2, #0
 8016124:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	695b      	ldr	r3, [r3, #20]
 801612a:	4a3b      	ldr	r2, [pc, #236]	@ (8016218 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 801612c:	4293      	cmp	r3, r2
 801612e:	d128      	bne.n	8016182 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8016130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016132:	2201      	movs	r2, #1
 8016134:	721a      	strb	r2, [r3, #8]
 8016136:	e024      	b.n	8016182 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016138:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801613c:	2b00      	cmp	r3, #0
 801613e:	d11d      	bne.n	801617c <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2200      	movs	r2, #0
 8016144:	4619      	mov	r1, r3
 8016146:	2000      	movs	r0, #0
 8016148:	f7f0 fbc0 	bl	80068cc <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	695b      	ldr	r3, [r3, #20]
 8016150:	210b      	movs	r1, #11
 8016152:	4618      	mov	r0, r3
 8016154:	f7f6 ff58 	bl	800d008 <FreeRTOS_FindEndPointOnNetMask>
 8016158:	4602      	mov	r2, r0
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016162:	2b00      	cmp	r3, #0
 8016164:	d103      	bne.n	801616e <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8016166:	2302      	movs	r3, #2
 8016168:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801616c:	e009      	b.n	8016182 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801616e:	68fa      	ldr	r2, [r7, #12]
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7f0 ff25 	bl	8006fc4 <vARPGenerateRequestPacket>
 801617a:	e002      	b.n	8016182 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 801617c:	2302      	movs	r3, #2
 801617e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 8016182:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016186:	2b02      	cmp	r3, #2
 8016188:	d03d      	beq.n	8016206 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801618e:	2b00      	cmp	r3, #0
 8016190:	d035      	beq.n	80161fe <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016196:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801619a:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161a0:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80161a2:	693b      	ldr	r3, [r7, #16]
 80161a4:	1d98      	adds	r0, r3, #6
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161aa:	33e8      	adds	r3, #232	@ 0xe8
 80161ac:	2206      	movs	r2, #6
 80161ae:	4619      	mov	r1, r3
 80161b0:	f00b fd8e 	bl	8021cd0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80161ba:	d812      	bhi.n	80161e2 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80161c2:	e008      	b.n	80161d6 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80161c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ca:	4413      	add	r3, r2
 80161cc:	2200      	movs	r2, #0
 80161ce:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80161d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161d2:	3301      	adds	r3, #1
 80161d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80161d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80161da:	ddf3      	ble.n	80161c4 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	223c      	movs	r2, #60	@ 0x3c
 80161e0:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d011      	beq.n	801620c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	68db      	ldr	r3, [r3, #12]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d00d      	beq.n	801620c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	2201      	movs	r2, #1
 80161f6:	6879      	ldr	r1, [r7, #4]
 80161f8:	6978      	ldr	r0, [r7, #20]
 80161fa:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 80161fc:	e006      	b.n	801620c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80161fe:	6878      	ldr	r0, [r7, #4]
 8016200:	f000 fca2 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
}
 8016204:	e002      	b.n	801620c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 fc9e 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
}
 801620c:	bf00      	nop
 801620e:	3738      	adds	r7, #56	@ 0x38
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}
 8016214:	08027004 	.word	0x08027004
 8016218:	fc0000e0 	.word	0xfc0000e0

0801621c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 801621c:	b590      	push	{r4, r7, lr}
 801621e:	b099      	sub	sp, #100	@ 0x64
 8016220:	af02      	add	r7, sp, #8
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	460b      	mov	r3, r1
 8016226:	607a      	str	r2, [r7, #4]
 8016228:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 801622a:	2301      	movs	r3, #1
 801622c:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d104      	bne.n	801623e <xProcessReceivedUDPPacket_IPv4+0x22>
 8016234:	f240 116f 	movw	r1, #367	@ 0x16f
 8016238:	4872      	ldr	r0, [pc, #456]	@ (8016404 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801623a:	f7eb fa0d 	bl	8001658 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016242:	2b00      	cmp	r3, #0
 8016244:	d104      	bne.n	8016250 <xProcessReceivedUDPPacket_IPv4+0x34>
 8016246:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 801624a:	486e      	ldr	r0, [pc, #440]	@ (8016404 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801624c:	f7eb fa04 	bl	8001658 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016254:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801625a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801625c:	897b      	ldrh	r3, [r7, #10]
 801625e:	4618      	mov	r0, r3
 8016260:	f7f8 fc60 	bl	800eb24 <pxUDPSocketLookup>
 8016264:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	2200      	movs	r2, #0
 801626a:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 801626c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801626e:	2b00      	cmp	r3, #0
 8016270:	f000 8085 	beq.w	801637e <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8016274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016276:	2b00      	cmp	r3, #0
 8016278:	d018      	beq.n	80162ac <xProcessReceivedUDPPacket_IPv4+0x90>
 801627a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d014      	beq.n	80162ac <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016282:	68f8      	ldr	r0, [r7, #12]
 8016284:	f7f0 fa0c 	bl	80066a0 <xCheckRequiresARPResolution>
 8016288:	4603      	mov	r3, r0
 801628a:	2b01      	cmp	r3, #1
 801628c:	d105      	bne.n	801629a <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2201      	movs	r2, #1
 8016292:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8016294:	2300      	movs	r3, #0
 8016296:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8016298:	e0ae      	b.n	80163f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801629a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801629c:	1d9a      	adds	r2, r3, #6
 801629e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162a0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80162a4:	4619      	mov	r1, r3
 80162a6:	4610      	mov	r0, r2
 80162a8:	f7f0 fada 	bl	8006860 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80162ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80162ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d02f      	beq.n	8016314 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162b8:	332a      	adds	r3, #42	@ 0x2a
 80162ba:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80162bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80162be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162c0:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80162c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	695b      	ldr	r3, [r3, #20]
 80162cc:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80162ce:	2302      	movs	r3, #2
 80162d0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 80162d4:	2318      	movs	r3, #24
 80162d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 80162da:	897b      	ldrh	r3, [r7, #10]
 80162dc:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 80162de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162e0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80162e4:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80162e6:	2302      	movs	r3, #2
 80162e8:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80162ea:	2318      	movs	r3, #24
 80162ec:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162f2:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 80162f6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80162fa:	f107 0310 	add.w	r3, r7, #16
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8016302:	460b      	mov	r3, r1
 8016304:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016306:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016308:	47a0      	blx	r4
 801630a:	4603      	mov	r3, r0
 801630c:	2b00      	cmp	r3, #0
 801630e:	d001      	beq.n	8016314 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016310:	2300      	movs	r3, #0
 8016312:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016316:	2b01      	cmp	r3, #1
 8016318:	d16e      	bne.n	80163f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 801631a:	f7ed fd5b 	bl	8003dd4 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801631e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016320:	3354      	adds	r3, #84	@ 0x54
 8016322:	68fa      	ldr	r2, [r7, #12]
 8016324:	4611      	mov	r1, r2
 8016326:	4618      	mov	r0, r3
 8016328:	f7ec fcad 	bl	8002c86 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 801632c:	f7ed fd60 	bl	8003df0 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016332:	685b      	ldr	r3, [r3, #4]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d005      	beq.n	8016344 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	2101      	movs	r1, #1
 801633e:	4618      	mov	r0, r3
 8016340:	f7ec fb9c 	bl	8002a7c <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016348:	2b00      	cmp	r3, #0
 801634a:	d00c      	beq.n	8016366 <xProcessReceivedUDPPacket_IPv4+0x14a>
 801634c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801634e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016350:	f003 0301 	and.w	r3, r3, #1
 8016354:	2b00      	cmp	r3, #0
 8016356:	d006      	beq.n	8016366 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	2101      	movs	r1, #1
 8016360:	4618      	mov	r0, r3
 8016362:	f7ec fb8b 	bl	8002a7c <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801636a:	2b00      	cmp	r3, #0
 801636c:	d044      	beq.n	80163f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801636e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016370:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016372:	2300      	movs	r3, #0
 8016374:	2200      	movs	r2, #0
 8016376:	2100      	movs	r1, #0
 8016378:	f7ec fe5c 	bl	8003034 <xQueueGenericSend>
 801637c:	e03c      	b.n	80163f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801637e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016380:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8016382:	b29b      	uxth	r3, r3
 8016384:	021b      	lsls	r3, r3, #8
 8016386:	b21a      	sxth	r2, r3
 8016388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801638a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801638c:	b29b      	uxth	r3, r3
 801638e:	0a1b      	lsrs	r3, r3, #8
 8016390:	b29b      	uxth	r3, r3
 8016392:	b21b      	sxth	r3, r3
 8016394:	4313      	orrs	r3, r2
 8016396:	b21b      	sxth	r3, r3
 8016398:	2b35      	cmp	r3, #53	@ 0x35
 801639a:	d10f      	bne.n	80163bc <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 801639c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801639e:	1d98      	adds	r0, r3, #6
 80163a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163a2:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163aa:	461a      	mov	r2, r3
 80163ac:	f7f0 fa8e 	bl	80068cc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80163b0:	68f8      	ldr	r0, [r7, #12]
 80163b2:	f7f0 ff20 	bl	80071f6 <ulDNSHandlePacket>
 80163b6:	4603      	mov	r3, r0
 80163b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80163ba:	e01d      	b.n	80163f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80163bc:	897b      	ldrh	r3, [r7, #10]
 80163be:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80163c2:	4293      	cmp	r3, r2
 80163c4:	d006      	beq.n	80163d4 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 80163c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163c8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80163ca:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80163cc:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80163d0:	4293      	cmp	r3, r2
 80163d2:	d10f      	bne.n	80163f4 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80163d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163d6:	1d98      	adds	r0, r3, #6
 80163d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163da:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163e2:	461a      	mov	r2, r3
 80163e4:	f7f0 fa72 	bl	80068cc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80163e8:	68f8      	ldr	r0, [r7, #12]
 80163ea:	f7f0 ff04 	bl	80071f6 <ulDNSHandlePacket>
 80163ee:	4603      	mov	r3, r0
 80163f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80163f2:	e001      	b.n	80163f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80163f4:	2300      	movs	r3, #0
 80163f6:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80163f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	375c      	adds	r7, #92	@ 0x5c
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd90      	pop	{r4, r7, pc}
 8016402:	bf00      	nop
 8016404:	08026914 	.word	0x08026914

08016408 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b086      	sub	sp, #24
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
 8016410:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8016412:	2000      	movs	r0, #0
 8016414:	f7f6 fd20 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 8016418:	6178      	str	r0, [r7, #20]
 801641a:	e021      	b.n	8016460 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2b60      	cmp	r3, #96	@ 0x60
 8016420:	d119      	bne.n	8016456 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016428:	f003 0304 	and.w	r3, r3, #4
 801642c:	b2db      	uxtb	r3, r3
 801642e:	2b00      	cmp	r3, #0
 8016430:	d011      	beq.n	8016456 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	3338      	adds	r3, #56	@ 0x38
 8016436:	4618      	mov	r0, r3
 8016438:	f7f7 f8f2 	bl	800d620 <xIPv6_GetIPType>
 801643c:	4603      	mov	r3, r0
 801643e:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016440:	7cfb      	ldrb	r3, [r7, #19]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d101      	bne.n	801644a <pxGetEndpoint+0x42>
 8016446:	2301      	movs	r3, #1
 8016448:	e000      	b.n	801644c <pxGetEndpoint+0x44>
 801644a:	2300      	movs	r3, #0
 801644c:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801644e:	68fa      	ldr	r2, [r7, #12]
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	429a      	cmp	r2, r3
 8016454:	d008      	beq.n	8016468 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8016456:	6979      	ldr	r1, [r7, #20]
 8016458:	2000      	movs	r0, #0
 801645a:	f7f6 fd1f 	bl	800ce9c <FreeRTOS_NextEndPoint>
 801645e:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d1da      	bne.n	801641c <pxGetEndpoint+0x14>
 8016466:	e000      	b.n	801646a <pxGetEndpoint+0x62>
                {
                    break;
 8016468:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 801646a:	697b      	ldr	r3, [r7, #20]
}
 801646c:	4618      	mov	r0, r3
 801646e:	3718      	adds	r7, #24
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 801647e:	2300      	movs	r3, #0
 8016480:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f103 0114 	add.w	r1, r3, #20
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801648c:	2b00      	cmp	r3, #0
 801648e:	d001      	beq.n	8016494 <prvStartLookup+0x20>
 8016490:	4b1e      	ldr	r3, [pc, #120]	@ (801650c <prvStartLookup+0x98>)
 8016492:	e000      	b.n	8016496 <prvStartLookup+0x22>
 8016494:	4b1e      	ldr	r3, [pc, #120]	@ (8016510 <prvStartLookup+0x9c>)
 8016496:	461a      	mov	r2, r3
 8016498:	481e      	ldr	r0, [pc, #120]	@ (8016514 <prvStartLookup+0xa0>)
 801649a:	f00b f9fd 	bl	8021898 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d11f      	bne.n	80164e6 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	3314      	adds	r3, #20
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7f7 f8b8 	bl	800d620 <xIPv6_GetIPType>
 80164b0:	4603      	mov	r3, r0
 80164b2:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80164b4:	7bbb      	ldrb	r3, [r7, #14]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d101      	bne.n	80164be <prvStartLookup+0x4a>
 80164ba:	2301      	movs	r3, #1
 80164bc:	e000      	b.n	80164c0 <prvStartLookup+0x4c>
 80164be:	2300      	movs	r3, #0
 80164c0:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 80164c2:	68b9      	ldr	r1, [r7, #8]
 80164c4:	2060      	movs	r0, #96	@ 0x60
 80164c6:	f7ff ff9f 	bl	8016408 <pxGetEndpoint>
 80164ca:	4602      	mov	r2, r0
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d001      	beq.n	80164dc <prvStartLookup+0x68>
 80164d8:	4b0f      	ldr	r3, [pc, #60]	@ (8016518 <prvStartLookup+0xa4>)
 80164da:	e000      	b.n	80164de <prvStartLookup+0x6a>
 80164dc:	4b0f      	ldr	r3, [pc, #60]	@ (801651c <prvStartLookup+0xa8>)
 80164de:	4619      	mov	r1, r3
 80164e0:	480f      	ldr	r0, [pc, #60]	@ (8016520 <prvStartLookup+0xac>)
 80164e2:	f00b f9d9 	bl	8021898 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d008      	beq.n	8016500 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	3314      	adds	r3, #20
 80164f2:	4619      	mov	r1, r3
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f7f5 f9d5 	bl	800b8a4 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	2201      	movs	r2, #1
 80164fe:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8016500:	7bfb      	ldrb	r3, [r7, #15]
}
 8016502:	4618      	mov	r0, r3
 8016504:	3710      	adds	r7, #16
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop
 801650c:	08026948 	.word	0x08026948
 8016510:	0802694c 	.word	0x0802694c
 8016514:	08026950 	.word	0x08026950
 8016518:	08026974 	.word	0x08026974
 801651c:	08026978 	.word	0x08026978
 8016520:	0802697c 	.word	0x0802697c

08016524 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016524:	b590      	push	{r4, r7, lr}
 8016526:	b093      	sub	sp, #76	@ 0x4c
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 801652c:	2300      	movs	r3, #0
 801652e:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8016530:	2300      	movs	r3, #0
 8016532:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8016534:	2300      	movs	r3, #0
 8016536:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8016538:	2300      	movs	r3, #0
 801653a:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016540:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8016542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016544:	330e      	adds	r3, #14
 8016546:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	3314      	adds	r3, #20
 801654c:	f107 040c 	add.w	r4, r7, #12
 8016550:	6818      	ldr	r0, [r3, #0]
 8016552:	6859      	ldr	r1, [r3, #4]
 8016554:	689a      	ldr	r2, [r3, #8]
 8016556:	68db      	ldr	r3, [r3, #12]
 8016558:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801655e:	2b00      	cmp	r3, #0
 8016560:	d107      	bne.n	8016572 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 8016562:	233e      	movs	r3, #62	@ 0x3e
 8016564:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801656c:	1ad3      	subs	r3, r2, r3
 801656e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016570:	e003      	b.n	801657a <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016576:	3b3e      	subs	r3, #62	@ 0x3e
 8016578:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	3314      	adds	r3, #20
 801657e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016580:	f107 021c 	add.w	r2, r7, #28
 8016584:	4618      	mov	r0, r3
 8016586:	f7f4 ff21 	bl	800b3cc <eNDGetCacheEntry>
 801658a:	4603      	mov	r3, r0
 801658c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 8016590:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016594:	2b02      	cmp	r3, #2
 8016596:	f000 80b1 	beq.w	80166fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 801659a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801659e:	2b01      	cmp	r3, #1
 80165a0:	f040 8095 	bne.w	80166ce <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80165a4:	69fa      	ldr	r2, [r7, #28]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d109      	bne.n	80165c6 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80165b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b4:	2260      	movs	r2, #96	@ 0x60
 80165b6:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 80165b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165ba:	223a      	movs	r2, #58	@ 0x3a
 80165bc:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 80165be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165c0:	2280      	movs	r2, #128	@ 0x80
 80165c2:	71da      	strb	r2, [r3, #7]
 80165c4:	e05e      	b.n	8016684 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 80165c6:	2300      	movs	r3, #0
 80165c8:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 80165ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165cc:	3336      	adds	r3, #54	@ 0x36
 80165ce:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80165d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165d2:	2260      	movs	r2, #96	@ 0x60
 80165d4:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 80165d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165d8:	2200      	movs	r2, #0
 80165da:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 80165dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165de:	2200      	movs	r2, #0
 80165e0:	709a      	strb	r2, [r3, #2]
 80165e2:	2200      	movs	r2, #0
 80165e4:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 80165e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165e8:	22ff      	movs	r2, #255	@ 0xff
 80165ea:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	3b36      	subs	r3, #54	@ 0x36
 80165f4:	b29a      	uxth	r2, r3
 80165f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f8:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80165fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165fc:	2211      	movs	r2, #17
 80165fe:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016604:	b29b      	uxth	r3, r3
 8016606:	3b36      	subs	r3, #54	@ 0x36
 8016608:	b29a      	uxth	r2, r3
 801660a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801660c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 801660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016610:	889b      	ldrh	r3, [r3, #4]
 8016612:	b29b      	uxth	r3, r3
 8016614:	021b      	lsls	r3, r3, #8
 8016616:	b21a      	sxth	r2, r3
 8016618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801661a:	889b      	ldrh	r3, [r3, #4]
 801661c:	b29b      	uxth	r3, r3
 801661e:	0a1b      	lsrs	r3, r3, #8
 8016620:	b29b      	uxth	r3, r3
 8016622:	b21b      	sxth	r3, r3
 8016624:	4313      	orrs	r3, r2
 8016626:	b21b      	sxth	r3, r3
 8016628:	b29a      	uxth	r2, r3
 801662a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801662c:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016634:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801663c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016640:	889b      	ldrh	r3, [r3, #4]
 8016642:	b29b      	uxth	r3, r3
 8016644:	021b      	lsls	r3, r3, #8
 8016646:	b21a      	sxth	r2, r3
 8016648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801664a:	889b      	ldrh	r3, [r3, #4]
 801664c:	b29b      	uxth	r3, r3
 801664e:	0a1b      	lsrs	r3, r3, #8
 8016650:	b29b      	uxth	r3, r3
 8016652:	b21b      	sxth	r3, r3
 8016654:	4313      	orrs	r3, r2
 8016656:	b21b      	sxth	r3, r3
 8016658:	b29a      	uxth	r2, r3
 801665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801665c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016660:	2200      	movs	r2, #0
 8016662:	719a      	strb	r2, [r3, #6]
 8016664:	2200      	movs	r2, #0
 8016666:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801666c:	2b00      	cmp	r3, #0
 801666e:	d009      	beq.n	8016684 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8016670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016672:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801667a:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801667c:	2210      	movs	r2, #16
 801667e:	4619      	mov	r1, r3
 8016680:	f00b fb26 	bl	8021cd0 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016688:	2b00      	cmp	r3, #0
 801668a:	d10e      	bne.n	80166aa <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 801668c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801668e:	b29b      	uxth	r3, r3
 8016690:	3308      	adds	r3, #8
 8016692:	b29b      	uxth	r3, r3
 8016694:	021b      	lsls	r3, r3, #8
 8016696:	b29a      	uxth	r2, r3
 8016698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801669a:	3308      	adds	r3, #8
 801669c:	0a1b      	lsrs	r3, r3, #8
 801669e:	b29b      	uxth	r3, r3
 80166a0:	4313      	orrs	r3, r2
 80166a2:	b29a      	uxth	r2, r3
 80166a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166a6:	809a      	strh	r2, [r3, #4]
 80166a8:	e028      	b.n	80166fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80166aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ac:	2211      	movs	r2, #17
 80166ae:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 80166b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	3308      	adds	r3, #8
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	021b      	lsls	r3, r3, #8
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166be:	3308      	adds	r3, #8
 80166c0:	0a1b      	lsrs	r3, r3, #8
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	4313      	orrs	r3, r2
 80166c6:	b29a      	uxth	r2, r3
 80166c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ca:	809a      	strh	r2, [r3, #4]
 80166cc:	e016      	b.n	80166fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80166ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d10f      	bne.n	80166f6 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 80166d6:	69fb      	ldr	r3, [r7, #28]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d002      	beq.n	80166e2 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80166dc:	69fa      	ldr	r2, [r7, #28]
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 80166e2:	f107 0320 	add.w	r3, r7, #32
 80166e6:	4619      	mov	r1, r3
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7ff fec3 	bl	8016474 <prvStartLookup>
 80166ee:	4603      	mov	r3, r0
 80166f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80166f4:	e002      	b.n	80166fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80166f6:	2302      	movs	r3, #2
 80166f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 80166fc:	6a3b      	ldr	r3, [r7, #32]
 80166fe:	2b01      	cmp	r3, #1
 8016700:	d03d      	beq.n	801677e <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8016702:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016706:	2b02      	cmp	r3, #2
 8016708:	d036      	beq.n	8016778 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801670e:	2b00      	cmp	r3, #0
 8016710:	d02e      	beq.n	8016770 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016716:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801671a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016720:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016724:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801672a:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 801672c:	2206      	movs	r2, #6
 801672e:	4619      	mov	r1, r3
 8016730:	f00b face 	bl	8021cd0 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016738:	2b3b      	cmp	r3, #59	@ 0x3b
 801673a:	d812      	bhi.n	8016762 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016742:	e008      	b.n	8016756 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801674a:	4413      	add	r3, r2
 801674c:	2200      	movs	r2, #0
 801674e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016752:	3301      	adds	r3, #1
 8016754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016758:	2b3b      	cmp	r3, #59	@ 0x3b
 801675a:	ddf3      	ble.n	8016744 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	223c      	movs	r2, #60	@ 0x3c
 8016760:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016764:	68db      	ldr	r3, [r3, #12]
 8016766:	2201      	movs	r2, #1
 8016768:	6879      	ldr	r1, [r7, #4]
 801676a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801676c:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801676e:	e006      	b.n	801677e <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f000 f9e9 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
}
 8016776:	e002      	b.n	801677e <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f000 f9e5 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
}
 801677e:	bf00      	nop
 8016780:	374c      	adds	r7, #76	@ 0x4c
 8016782:	46bd      	mov	sp, r7
 8016784:	bd90      	pop	{r4, r7, pc}
	...

08016788 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8016788:	b590      	push	{r4, r7, lr}
 801678a:	b09b      	sub	sp, #108	@ 0x6c
 801678c:	af02      	add	r7, sp, #8
 801678e:	60f8      	str	r0, [r7, #12]
 8016790:	460b      	mov	r3, r1
 8016792:	607a      	str	r2, [r7, #4]
 8016794:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8016796:	2301      	movs	r3, #1
 8016798:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d104      	bne.n	80167aa <xProcessReceivedUDPPacket_IPv6+0x22>
 80167a0:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80167a4:	4874      	ldr	r0, [pc, #464]	@ (8016978 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80167a6:	f7ea ff57 	bl	8001658 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d104      	bne.n	80167bc <xProcessReceivedUDPPacket_IPv6+0x34>
 80167b2:	f240 1187 	movw	r1, #391	@ 0x187
 80167b6:	4870      	ldr	r0, [pc, #448]	@ (8016978 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80167b8:	f7ea ff4e 	bl	8001658 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167c0:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80167c2:	897b      	ldrh	r3, [r7, #10]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f8 f9ad 	bl	800eb24 <pxUDPSocketLookup>
 80167ca:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2200      	movs	r2, #0
 80167d0:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 80167d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80167d4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d109      	bne.n	80167f0 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 80167dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80167de:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80167e0:	b29b      	uxth	r3, r3
 80167e2:	4619      	mov	r1, r3
 80167e4:	4865      	ldr	r0, [pc, #404]	@ (801697c <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 80167e6:	f00b f857 	bl	8021898 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 80167ea:	2300      	movs	r3, #0
 80167ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80167ee:	e0bd      	b.n	801696c <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 80167f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f000 8091 	beq.w	801691a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f7ef ff51 	bl	80066a0 <xCheckRequiresARPResolution>
 80167fe:	4603      	mov	r3, r0
 8016800:	2b01      	cmp	r3, #1
 8016802:	d105      	bne.n	8016810 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2201      	movs	r2, #1
 8016808:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 801680a:	2300      	movs	r3, #0
 801680c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801680e:	e0ad      	b.n	801696c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016812:	1d98      	adds	r0, r3, #6
 8016814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016816:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801681e:	461a      	mov	r2, r3
 8016820:	f7f4 fe82 	bl	800b528 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8016824:	68f8      	ldr	r0, [r7, #12]
 8016826:	f7f2 ff7f 	bl	8009728 <uxIPHeaderSizePacket>
 801682a:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 801682c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801682e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016830:	2b00      	cmp	r3, #0
 8016832:	d03d      	beq.n	80168b0 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801683a:	3316      	adds	r3, #22
 801683c:	4413      	add	r3, r2
 801683e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8016840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016844:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801684a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 801684c:	897b      	ldrh	r3, [r7, #10]
 801684e:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016852:	3316      	adds	r3, #22
 8016854:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8016858:	6818      	ldr	r0, [r3, #0]
 801685a:	6859      	ldr	r1, [r3, #4]
 801685c:	689a      	ldr	r2, [r3, #8]
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016862:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016864:	3326      	adds	r3, #38	@ 0x26
 8016866:	f107 041c 	add.w	r4, r7, #28
 801686a:	6818      	ldr	r0, [r3, #0]
 801686c:	6859      	ldr	r1, [r3, #4]
 801686e:	689a      	ldr	r2, [r3, #8]
 8016870:	68db      	ldr	r3, [r3, #12]
 8016872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016874:	230a      	movs	r3, #10
 8016876:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 801687a:	230a      	movs	r3, #10
 801687c:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801687e:	2318      	movs	r3, #24
 8016880:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8016884:	2318      	movs	r3, #24
 8016886:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801688c:	3b3e      	subs	r3, #62	@ 0x3e
 801688e:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 8016890:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016894:	f107 0314 	add.w	r3, r7, #20
 8016898:	9300      	str	r3, [sp, #0]
 801689a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801689c:	4613      	mov	r3, r2
 801689e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80168a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80168a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80168a4:	47a0      	blx	r4
 80168a6:	4603      	mov	r3, r0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d001      	beq.n	80168b0 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80168ac:	2300      	movs	r3, #0
 80168ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80168b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168b2:	2b01      	cmp	r3, #1
 80168b4:	d15a      	bne.n	801696c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80168b6:	f7ed fa8d 	bl	8003dd4 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80168ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168bc:	3354      	adds	r3, #84	@ 0x54
 80168be:	68fa      	ldr	r2, [r7, #12]
 80168c0:	4611      	mov	r1, r2
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7ec f9df 	bl	8002c86 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80168c8:	f7ed fa92 	bl	8003df0 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80168cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168ce:	685b      	ldr	r3, [r3, #4]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d005      	beq.n	80168e0 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80168d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	2101      	movs	r1, #1
 80168da:	4618      	mov	r0, r3
 80168dc:	f7ec f8ce 	bl	8002a7c <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80168e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d00c      	beq.n	8016902 <xProcessReceivedUDPPacket_IPv6+0x17a>
 80168e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168ec:	f003 0301 	and.w	r3, r3, #1
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d006      	beq.n	8016902 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80168f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	2101      	movs	r1, #1
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7ec f8bd 	bl	8002a7c <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016906:	2b00      	cmp	r3, #0
 8016908:	d030      	beq.n	801696c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801690a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801690c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801690e:	2300      	movs	r3, #0
 8016910:	2200      	movs	r2, #0
 8016912:	2100      	movs	r1, #0
 8016914:	f7ec fb8e 	bl	8003034 <xQueueGenericSend>
 8016918:	e028      	b.n	801696c <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801691a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801691c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801691e:	b29b      	uxth	r3, r3
 8016920:	021b      	lsls	r3, r3, #8
 8016922:	b21a      	sxth	r2, r3
 8016924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016928:	b29b      	uxth	r3, r3
 801692a:	0a1b      	lsrs	r3, r3, #8
 801692c:	b29b      	uxth	r3, r3
 801692e:	b21b      	sxth	r3, r3
 8016930:	4313      	orrs	r3, r2
 8016932:	b21b      	sxth	r3, r3
 8016934:	2b35      	cmp	r3, #53	@ 0x35
 8016936:	d105      	bne.n	8016944 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016938:	68f8      	ldr	r0, [r7, #12]
 801693a:	f7f0 fc5c 	bl	80071f6 <ulDNSHandlePacket>
 801693e:	4603      	mov	r3, r0
 8016940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016942:	e013      	b.n	801696c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016944:	897b      	ldrh	r3, [r7, #10]
 8016946:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801694a:	4293      	cmp	r3, r2
 801694c:	d006      	beq.n	801695c <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 801694e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016952:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016954:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016958:	4293      	cmp	r3, r2
 801695a:	d105      	bne.n	8016968 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801695c:	68f8      	ldr	r0, [r7, #12]
 801695e:	f7f0 fc4a 	bl	80071f6 <ulDNSHandlePacket>
 8016962:	4603      	mov	r3, r0
 8016964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016966:	e001      	b.n	801696c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016968:	2300      	movs	r3, #0
 801696a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 801696c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801696e:	4618      	mov	r0, r3
 8016970:	3764      	adds	r7, #100	@ 0x64
 8016972:	46bd      	mov	sp, r7
 8016974:	bd90      	pop	{r4, r7, pc}
 8016976:	bf00      	nop
 8016978:	080269a4 	.word	0x080269a4
 801697c:	080269d8 	.word	0x080269d8

08016980 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8016980:	b480      	push	{r7}
 8016982:	b083      	sub	sp, #12
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8016988:	2301      	movs	r3, #1
    }
 801698a:	4618      	mov	r0, r3
 801698c:	370c      	adds	r7, #12
 801698e:	46bd      	mov	sp, r7
 8016990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016994:	4770      	bx	lr

08016996 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8016996:	b480      	push	{r7}
 8016998:	af00      	add	r7, sp, #0
    }
 801699a:	bf00      	nop
 801699c:	46bd      	mov	sp, r7
 801699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a2:	4770      	bx	lr

080169a4 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 80169aa:	4b2e      	ldr	r3, [pc, #184]	@ (8016a64 <xNetworkBuffersInitialise+0xc0>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d149      	bne.n	8016a46 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80169b2:	2140      	movs	r1, #64	@ 0x40
 80169b4:	2040      	movs	r0, #64	@ 0x40
 80169b6:	f7ec fb13 	bl	8002fe0 <xQueueCreateCountingSemaphore>
 80169ba:	4603      	mov	r3, r0
 80169bc:	4a29      	ldr	r2, [pc, #164]	@ (8016a64 <xNetworkBuffersInitialise+0xc0>)
 80169be:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 80169c0:	4b28      	ldr	r3, [pc, #160]	@ (8016a64 <xNetworkBuffersInitialise+0xc0>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d103      	bne.n	80169d0 <xNetworkBuffersInitialise+0x2c>
 80169c8:	21c3      	movs	r1, #195	@ 0xc3
 80169ca:	4827      	ldr	r0, [pc, #156]	@ (8016a68 <xNetworkBuffersInitialise+0xc4>)
 80169cc:	f7ea fe44 	bl	8001658 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 80169d0:	4b24      	ldr	r3, [pc, #144]	@ (8016a64 <xNetworkBuffersInitialise+0xc0>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d036      	beq.n	8016a46 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 80169d8:	4824      	ldr	r0, [pc, #144]	@ (8016a6c <xNetworkBuffersInitialise+0xc8>)
 80169da:	f7ec f927 	bl	8002c2c <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 80169de:	4824      	ldr	r0, [pc, #144]	@ (8016a70 <xNetworkBuffersInitialise+0xcc>)
 80169e0:	f001 fa24 	bl	8017e2c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80169e4:	2300      	movs	r3, #0
 80169e6:	603b      	str	r3, [r7, #0]
 80169e8:	e027      	b.n	8016a3a <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 80169ea:	683a      	ldr	r2, [r7, #0]
 80169ec:	4613      	mov	r3, r2
 80169ee:	00db      	lsls	r3, r3, #3
 80169f0:	1a9b      	subs	r3, r3, r2
 80169f2:	00db      	lsls	r3, r3, #3
 80169f4:	4a1e      	ldr	r2, [pc, #120]	@ (8016a70 <xNetworkBuffersInitialise+0xcc>)
 80169f6:	4413      	add	r3, r2
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7ec f937 	bl	8002c6c <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 80169fe:	683a      	ldr	r2, [r7, #0]
 8016a00:	4613      	mov	r3, r2
 8016a02:	00db      	lsls	r3, r3, #3
 8016a04:	1a9b      	subs	r3, r3, r2
 8016a06:	00db      	lsls	r3, r3, #3
 8016a08:	4a19      	ldr	r2, [pc, #100]	@ (8016a70 <xNetworkBuffersInitialise+0xcc>)
 8016a0a:	1899      	adds	r1, r3, r2
 8016a0c:	4818      	ldr	r0, [pc, #96]	@ (8016a70 <xNetworkBuffersInitialise+0xcc>)
 8016a0e:	683a      	ldr	r2, [r7, #0]
 8016a10:	4613      	mov	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	1a9b      	subs	r3, r3, r2
 8016a16:	00db      	lsls	r3, r3, #3
 8016a18:	4403      	add	r3, r0
 8016a1a:	330c      	adds	r3, #12
 8016a1c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8016a1e:	683a      	ldr	r2, [r7, #0]
 8016a20:	4613      	mov	r3, r2
 8016a22:	00db      	lsls	r3, r3, #3
 8016a24:	1a9b      	subs	r3, r3, r2
 8016a26:	00db      	lsls	r3, r3, #3
 8016a28:	4a11      	ldr	r2, [pc, #68]	@ (8016a70 <xNetworkBuffersInitialise+0xcc>)
 8016a2a:	4413      	add	r3, r2
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	480f      	ldr	r0, [pc, #60]	@ (8016a6c <xNetworkBuffersInitialise+0xc8>)
 8016a30:	f7ec f94d 	bl	8002cce <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	3301      	adds	r3, #1
 8016a38:	603b      	str	r3, [r7, #0]
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8016a3e:	d9d4      	bls.n	80169ea <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8016a40:	4b0c      	ldr	r3, [pc, #48]	@ (8016a74 <xNetworkBuffersInitialise+0xd0>)
 8016a42:	2240      	movs	r2, #64	@ 0x40
 8016a44:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8016a46:	4b07      	ldr	r3, [pc, #28]	@ (8016a64 <xNetworkBuffersInitialise+0xc0>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d102      	bne.n	8016a54 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	607b      	str	r3, [r7, #4]
 8016a52:	e001      	b.n	8016a58 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8016a54:	2301      	movs	r3, #1
 8016a56:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8016a58:	687b      	ldr	r3, [r7, #4]
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	3708      	adds	r7, #8
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}
 8016a62:	bf00      	nop
 8016a64:	200022a0 	.word	0x200022a0
 8016a68:	08026a18 	.word	0x08026a18
 8016a6c:	20001488 	.word	0x20001488
 8016a70:	200014a0 	.word	0x200014a0
 8016a74:	2000149c 	.word	0x2000149c

08016a78 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b086      	sub	sp, #24
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8016a82:	2300      	movs	r3, #0
 8016a84:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8016a86:	2300      	movs	r3, #0
 8016a88:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8016a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8016b34 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d04b      	beq.n	8016b2a <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8016a92:	4b28      	ldr	r3, [pc, #160]	@ (8016b34 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	6839      	ldr	r1, [r7, #0]
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7ec fc83 	bl	80033a4 <xQueueSemaphoreTake>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b01      	cmp	r3, #1
 8016aa2:	d13d      	bne.n	8016b20 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8016aa4:	f7ef f814 	bl	8005ad0 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8016aa8:	4b23      	ldr	r3, [pc, #140]	@ (8016b38 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	68db      	ldr	r3, [r3, #12]
 8016aae:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016ab0:	6978      	ldr	r0, [r7, #20]
 8016ab2:	f7ff ff65 	bl	8016980 <bIsValidNetworkDescriptor>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d009      	beq.n	8016ad0 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8016b38 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016ac2:	4293      	cmp	r3, r2
 8016ac4:	d104      	bne.n	8016ad0 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7ec f939 	bl	8002d40 <uxListRemove>
 8016ace:	e001      	b.n	8016ad4 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8016ad0:	2301      	movs	r3, #1
 8016ad2:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8016ad4:	f7ef f828 	bl	8005b28 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	2b01      	cmp	r3, #1
 8016adc:	d10b      	bne.n	8016af6 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 8016ade:	6978      	ldr	r0, [r7, #20]
 8016ae0:	f7ff ff4e 	bl	8016980 <bIsValidNetworkDescriptor>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	6979      	ldr	r1, [r7, #20]
 8016aea:	4814      	ldr	r0, [pc, #80]	@ (8016b3c <pxGetNetworkBufferWithDescriptor+0xc4>)
 8016aec:	f00a fed4 	bl	8021898 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8016af0:	2300      	movs	r3, #0
 8016af2:	617b      	str	r3, [r7, #20]
 8016af4:	e019      	b.n	8016b2a <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016af6:	4b10      	ldr	r3, [pc, #64]	@ (8016b38 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8016afc:	4b10      	ldr	r3, [pc, #64]	@ (8016b40 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	68fa      	ldr	r2, [r7, #12]
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d202      	bcs.n	8016b0c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8016b06:	4a0e      	ldr	r2, [pc, #56]	@ (8016b40 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	687a      	ldr	r2, [r7, #4]
 8016b10:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8016b12:	697b      	ldr	r3, [r7, #20]
 8016b14:	2200      	movs	r2, #0
 8016b16:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8016b1e:	e004      	b.n	8016b2a <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8016b20:	f240 113b 	movw	r1, #315	@ 0x13b
 8016b24:	4807      	ldr	r0, [pc, #28]	@ (8016b44 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8016b26:	f7ea fd97 	bl	8001658 <vAssertCalled>
        }
    }

    return pxReturn;
 8016b2a:	697b      	ldr	r3, [r7, #20]
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	3718      	adds	r7, #24
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}
 8016b34:	200022a0 	.word	0x200022a0
 8016b38:	20001488 	.word	0x20001488
 8016b3c:	08026a64 	.word	0x08026a64
 8016b40:	2000149c 	.word	0x2000149c
 8016b44:	08026a18 	.word	0x08026a18

08016b48 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b084      	sub	sp, #16
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f7ff ff15 	bl	8016980 <bIsValidNetworkDescriptor>
 8016b56:	4603      	mov	r3, r0
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d104      	bne.n	8016b66 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8016b5c:	6879      	ldr	r1, [r7, #4]
 8016b5e:	4819      	ldr	r0, [pc, #100]	@ (8016bc4 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8016b60:	f00a fe9a 	bl	8021898 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8016b64:	e029      	b.n	8016bba <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8016b66:	f7ee ffb3 	bl	8005ad0 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	691b      	ldr	r3, [r3, #16]
 8016b6e:	4a16      	ldr	r2, [pc, #88]	@ (8016bc8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016b70:	4293      	cmp	r3, r2
 8016b72:	d101      	bne.n	8016b78 <vReleaseNetworkBufferAndDescriptor+0x30>
 8016b74:	2301      	movs	r3, #1
 8016b76:	e000      	b.n	8016b7a <vReleaseNetworkBufferAndDescriptor+0x32>
 8016b78:	2300      	movs	r3, #0
 8016b7a:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d104      	bne.n	8016b8c <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	4619      	mov	r1, r3
 8016b86:	4810      	ldr	r0, [pc, #64]	@ (8016bc8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016b88:	f7ec f87d 	bl	8002c86 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8016b8c:	f7ee ffcc 	bl	8005b28 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d008      	beq.n	8016ba8 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8016b96:	f000 f829 	bl	8016bec <uxGetNumberOfFreeNetworkBuffers>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	461a      	mov	r2, r3
 8016b9e:	6879      	ldr	r1, [r7, #4]
 8016ba0:	480a      	ldr	r0, [pc, #40]	@ (8016bcc <vReleaseNetworkBufferAndDescriptor+0x84>)
 8016ba2:	f00a fe79 	bl	8021898 <lUDPLoggingPrintf>
}
 8016ba6:	e008      	b.n	8016bba <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8016ba8:	4b09      	ldr	r3, [pc, #36]	@ (8016bd0 <vReleaseNetworkBufferAndDescriptor+0x88>)
 8016baa:	6818      	ldr	r0, [r3, #0]
 8016bac:	2300      	movs	r3, #0
 8016bae:	2200      	movs	r2, #0
 8016bb0:	2100      	movs	r1, #0
 8016bb2:	f7ec fa3f 	bl	8003034 <xQueueGenericSend>
            prvShowWarnings();
 8016bb6:	f7ff feee 	bl	8016996 <prvShowWarnings>
}
 8016bba:	bf00      	nop
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}
 8016bc2:	bf00      	nop
 8016bc4:	08026aa8 	.word	0x08026aa8
 8016bc8:	20001488 	.word	0x20001488
 8016bcc:	08026ae0 	.word	0x08026ae0
 8016bd0:	200022a0 	.word	0x200022a0

08016bd4 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8016bd4:	b480      	push	{r7}
 8016bd6:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8016bd8:	4b03      	ldr	r3, [pc, #12]	@ (8016be8 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8016bda:	681b      	ldr	r3, [r3, #0]
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	46bd      	mov	sp, r7
 8016be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be4:	4770      	bx	lr
 8016be6:	bf00      	nop
 8016be8:	2000149c 	.word	0x2000149c

08016bec <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8016bec:	b480      	push	{r7}
 8016bee:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016bf0:	4b03      	ldr	r3, [pc, #12]	@ (8016c00 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfc:	4770      	bx	lr
 8016bfe:	bf00      	nop
 8016c00:	20001488 	.word	0x20001488

08016c04 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016c04:	b480      	push	{r7}
 8016c06:	b085      	sub	sp, #20
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	4a11      	ldr	r2, [pc, #68]	@ (8016c58 <xHas_1F_PHYSPCS+0x54>)
 8016c14:	4293      	cmp	r3, r2
 8016c16:	d016      	beq.n	8016c46 <xHas_1F_PHYSPCS+0x42>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8016c58 <xHas_1F_PHYSPCS+0x54>)
 8016c1c:	4293      	cmp	r3, r2
 8016c1e:	d80f      	bhi.n	8016c40 <xHas_1F_PHYSPCS+0x3c>
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	4a0e      	ldr	r2, [pc, #56]	@ (8016c5c <xHas_1F_PHYSPCS+0x58>)
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d00e      	beq.n	8016c46 <xHas_1F_PHYSPCS+0x42>
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8016c5c <xHas_1F_PHYSPCS+0x58>)
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	d807      	bhi.n	8016c40 <xHas_1F_PHYSPCS+0x3c>
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	4a0b      	ldr	r2, [pc, #44]	@ (8016c60 <xHas_1F_PHYSPCS+0x5c>)
 8016c34:	4293      	cmp	r3, r2
 8016c36:	d006      	beq.n	8016c46 <xHas_1F_PHYSPCS+0x42>
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8016c64 <xHas_1F_PHYSPCS+0x60>)
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	d002      	beq.n	8016c46 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8016c40:	2301      	movs	r3, #1
 8016c42:	60fb      	str	r3, [r7, #12]
            break;
 8016c44:	e000      	b.n	8016c48 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8016c46:	bf00      	nop
    }

    return xResult;
 8016c48:	68fb      	ldr	r3, [r7, #12]
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3714      	adds	r7, #20
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c54:	4770      	bx	lr
 8016c56:	bf00      	nop
 8016c58:	ff000710 	.word	0xff000710
 8016c5c:	2000a250 	.word	0x2000a250
 8016c60:	20005c90 	.word	0x20005c90
 8016c64:	2000a221 	.word	0x2000a221

08016c68 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b085      	sub	sp, #20
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016c70:	2300      	movs	r3, #0
 8016c72:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	4a0d      	ldr	r2, [pc, #52]	@ (8016cac <xHas_19_PHYCR+0x44>)
 8016c78:	4293      	cmp	r3, r2
 8016c7a:	d00b      	beq.n	8016c94 <xHas_19_PHYCR+0x2c>
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8016cac <xHas_19_PHYCR+0x44>)
 8016c80:	4293      	cmp	r3, r2
 8016c82:	d80a      	bhi.n	8016c9a <xHas_19_PHYCR+0x32>
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	4a0a      	ldr	r2, [pc, #40]	@ (8016cb0 <xHas_19_PHYCR+0x48>)
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d003      	beq.n	8016c94 <xHas_19_PHYCR+0x2c>
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	4a09      	ldr	r2, [pc, #36]	@ (8016cb4 <xHas_19_PHYCR+0x4c>)
 8016c90:	4293      	cmp	r3, r2
 8016c92:	d102      	bne.n	8016c9a <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8016c94:	2301      	movs	r3, #1
 8016c96:	60fb      	str	r3, [r7, #12]
            break;
 8016c98:	e000      	b.n	8016c9c <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8016c9a:	bf00      	nop
    }

    return xResult;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	3714      	adds	r7, #20
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr
 8016caa:	bf00      	nop
 8016cac:	2000a221 	.word	0x2000a221
 8016cb0:	0007c130 	.word	0x0007c130
 8016cb4:	20005c90 	.word	0x20005c90

08016cb8 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8016cc4:	2240      	movs	r2, #64	@ 0x40
 8016cc6:	2100      	movs	r1, #0
 8016cc8:	68f8      	ldr	r0, [r7, #12]
 8016cca:	f00b f90e 	bl	8021eea <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	68ba      	ldr	r2, [r7, #8]
 8016cd2:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	687a      	ldr	r2, [r7, #4]
 8016cd8:	605a      	str	r2, [r3, #4]
}
 8016cda:	bf00      	nop
 8016cdc:	3710      	adds	r7, #16
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}
	...

08016ce4 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b086      	sub	sp, #24
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	617b      	str	r3, [r7, #20]
 8016cf6:	e03a      	b.n	8016d6e <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	f107 020c 	add.w	r2, r7, #12
 8016d04:	2103      	movs	r1, #3
 8016d06:	6978      	ldr	r0, [r7, #20]
 8016d08:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d10:	4293      	cmp	r3, r2
 8016d12:	d029      	beq.n	8016d68 <xPhyDiscover+0x84>
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d026      	beq.n	8016d68 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f107 0208 	add.w	r2, r7, #8
 8016d22:	2102      	movs	r1, #2
 8016d24:	6978      	ldr	r0, [r7, #20]
 8016d26:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	041a      	lsls	r2, r3, #16
 8016d2c:	68f9      	ldr	r1, [r7, #12]
 8016d2e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8016d32:	400b      	ands	r3, r1
 8016d34:	4313      	orrs	r3, r2
 8016d36:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d3c:	697a      	ldr	r2, [r7, #20]
 8016d3e:	b2d1      	uxtb	r1, r2
 8016d40:	687a      	ldr	r2, [r7, #4]
 8016d42:	4413      	add	r3, r2
 8016d44:	460a      	mov	r2, r1
 8016d46:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	3202      	adds	r2, #2
 8016d50:	6939      	ldr	r1, [r7, #16]
 8016d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d5a:	1c5a      	adds	r2, r3, #1
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d64:	2b04      	cmp	r3, #4
 8016d66:	d005      	beq.n	8016d74 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016d68:	697b      	ldr	r3, [r7, #20]
 8016d6a:	3301      	adds	r3, #1
 8016d6c:	617b      	str	r3, [r7, #20]
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	2b1f      	cmp	r3, #31
 8016d72:	ddc1      	ble.n	8016cf8 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	dd05      	ble.n	8016d88 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	689b      	ldr	r3, [r3, #8]
 8016d80:	4619      	mov	r1, r3
 8016d82:	4804      	ldr	r0, [pc, #16]	@ (8016d94 <xPhyDiscover+0xb0>)
 8016d84:	f00a fd88 	bl	8021898 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	3718      	adds	r7, #24
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd80      	pop	{r7, pc}
 8016d94:	08026b24 	.word	0x08026b24

08016d98 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b08c      	sub	sp, #48	@ 0x30
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
 8016da0:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8016da2:	2300      	movs	r3, #0
 8016da4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016da6:	2300      	movs	r3, #0
 8016da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016daa:	e017      	b.n	8016ddc <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016db0:	4413      	add	r3, r2
 8016db2:	3318      	adds	r3, #24
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	f107 0218 	add.w	r2, r7, #24
 8016dc0:	2100      	movs	r1, #0
 8016dc2:	69f8      	ldr	r0, [r7, #28]
 8016dc4:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	69ba      	ldr	r2, [r7, #24]
 8016dcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016dd0:	2100      	movs	r1, #0
 8016dd2:	69f8      	ldr	r0, [r7, #28]
 8016dd4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd8:	3301      	adds	r3, #1
 8016dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016de2:	429a      	cmp	r2, r3
 8016de4:	dbe2      	blt.n	8016dac <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8016de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016dea:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8016dec:	f107 030c 	add.w	r3, r7, #12
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7ed fcab 	bl	800474c <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016df6:	2300      	movs	r3, #0
 8016df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016dfa:	e01f      	b.n	8016e3c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016dfc:	687a      	ldr	r2, [r7, #4]
 8016dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e00:	4413      	add	r3, r2
 8016e02:	3318      	adds	r3, #24
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	f107 0218 	add.w	r2, r7, #24
 8016e10:	2100      	movs	r1, #0
 8016e12:	6a38      	ldr	r0, [r7, #32]
 8016e14:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8016e16:	69bb      	ldr	r3, [r7, #24]
 8016e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d10a      	bne.n	8016e36 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8016e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016e22:	482d      	ldr	r0, [pc, #180]	@ (8016ed8 <xPhyReset+0x140>)
 8016e24:	f00a fd38 	bl	8021898 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8016e28:	2201      	movs	r2, #1
 8016e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8016e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e32:	4313      	orrs	r3, r2
 8016e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e38:	3301      	adds	r3, #1
 8016e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e42:	429a      	cmp	r2, r3
 8016e44:	dbda      	blt.n	8016dfc <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8016e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	d013      	beq.n	8016e76 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016e4e:	f107 0214 	add.w	r2, r7, #20
 8016e52:	f107 030c 	add.w	r3, r7, #12
 8016e56:	4611      	mov	r1, r2
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7ed fcaf 	bl	80047bc <xTaskCheckForTimeOut>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d004      	beq.n	8016e6e <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8016e64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016e66:	481d      	ldr	r0, [pc, #116]	@ (8016edc <xPhyReset+0x144>)
 8016e68:	f00a fd16 	bl	8021898 <lUDPLoggingPrintf>
            break;
 8016e6c:	e004      	b.n	8016e78 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016e6e:	2032      	movs	r0, #50	@ 0x32
 8016e70:	f7ec fef8 	bl	8003c64 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016e74:	e7bf      	b.n	8016df6 <xPhyReset+0x5e>
            break;
 8016e76:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016e78:	2300      	movs	r3, #0
 8016e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e7c:	e01e      	b.n	8016ebc <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8016e7e:	2201      	movs	r2, #1
 8016e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e82:	409a      	lsls	r2, r3
 8016e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e86:	4013      	ands	r3, r2
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d114      	bne.n	8016eb6 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016e8c:	687a      	ldr	r2, [r7, #4]
 8016e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e90:	4413      	add	r3, r2
 8016e92:	3318      	adds	r3, #24
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	f107 0218 	add.w	r2, r7, #24
 8016ea0:	2100      	movs	r1, #0
 8016ea2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ea4:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	685b      	ldr	r3, [r3, #4]
 8016eaa:	69ba      	ldr	r2, [r7, #24]
 8016eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016eb0:	2100      	movs	r1, #0
 8016eb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016eb4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb8:	3301      	adds	r3, #1
 8016eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	dbdb      	blt.n	8016e7e <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016ec6:	2032      	movs	r0, #50	@ 0x32
 8016ec8:	f7ec fecc 	bl	8003c64 <vTaskDelay>

    return ulDoneMask;
 8016ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8016ece:	4618      	mov	r0, r3
 8016ed0:	3730      	adds	r7, #48	@ 0x30
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}
 8016ed6:	bf00      	nop
 8016ed8:	08026b30 	.word	0x08026b30
 8016edc:	08026b54 	.word	0x08026b54

08016ee0 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b088      	sub	sp, #32
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	dc05      	bgt.n	8016efe <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8016ef2:	487c      	ldr	r0, [pc, #496]	@ (80170e4 <xPhyConfigure+0x204>)
 8016ef4:	f00a fcd0 	bl	8021898 <lUDPLoggingPrintf>
        return -1;
 8016ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8016efc:	e0ed      	b.n	80170da <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	2b03      	cmp	r3, #3
 8016f04:	d107      	bne.n	8016f16 <xPhyConfigure+0x36>
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	789b      	ldrb	r3, [r3, #2]
 8016f0a:	2b03      	cmp	r3, #3
 8016f0c:	d103      	bne.n	8016f16 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8016f0e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8016f12:	61fb      	str	r3, [r7, #28]
 8016f14:	e044      	b.n	8016fa0 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8016f16:	2301      	movs	r3, #1
 8016f18:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	2b03      	cmp	r3, #3
 8016f20:	d10d      	bne.n	8016f3e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016f22:	683b      	ldr	r3, [r7, #0]
 8016f24:	789b      	ldrb	r3, [r3, #2]
 8016f26:	2b02      	cmp	r3, #2
 8016f28:	d104      	bne.n	8016f34 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8016f30:	61fb      	str	r3, [r7, #28]
 8016f32:	e035      	b.n	8016fa0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8016f3a:	61fb      	str	r3, [r7, #28]
 8016f3c:	e030      	b.n	8016fa0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	789b      	ldrb	r3, [r3, #2]
 8016f42:	2b03      	cmp	r3, #3
 8016f44:	d10d      	bne.n	8016f62 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	2b01      	cmp	r3, #1
 8016f4c:	d104      	bne.n	8016f58 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8016f4e:	69fb      	ldr	r3, [r7, #28]
 8016f50:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8016f54:	61fb      	str	r3, [r7, #28]
 8016f56:	e023      	b.n	8016fa0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8016f5e:	61fb      	str	r3, [r7, #28]
 8016f60:	e01e      	b.n	8016fa0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	d10d      	bne.n	8016f86 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	789b      	ldrb	r3, [r3, #2]
 8016f6e:	2b02      	cmp	r3, #2
 8016f70:	d104      	bne.n	8016f7c <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8016f72:	69fb      	ldr	r3, [r7, #28]
 8016f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016f78:	61fb      	str	r3, [r7, #28]
 8016f7a:	e011      	b.n	8016fa0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f82:	61fb      	str	r3, [r7, #28]
 8016f84:	e00c      	b.n	8016fa0 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	789b      	ldrb	r3, [r3, #2]
 8016f8a:	2b02      	cmp	r3, #2
 8016f8c:	d104      	bne.n	8016f98 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8016f8e:	69fb      	ldr	r3, [r7, #28]
 8016f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f94:	61fb      	str	r3, [r7, #28]
 8016f96:	e003      	b.n	8016fa0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8016f98:	69fb      	ldr	r3, [r7, #28]
 8016f9a:	f043 0320 	orr.w	r3, r3, #32
 8016f9e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fa4:	2201      	movs	r2, #1
 8016fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8016faa:	3b01      	subs	r3, #1
 8016fac:	4619      	mov	r1, r3
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f7ff fef2 	bl	8016d98 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	61bb      	str	r3, [r7, #24]
 8016fb8:	e080      	b.n	80170bc <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	69bb      	ldr	r3, [r7, #24]
 8016fbe:	4413      	add	r3, r2
 8016fc0:	3318      	adds	r3, #24
 8016fc2:	781b      	ldrb	r3, [r3, #0]
 8016fc4:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	69ba      	ldr	r2, [r7, #24]
 8016fca:	3202      	adds	r2, #2
 8016fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fd0:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	69fa      	ldr	r2, [r7, #28]
 8016fd8:	2104      	movs	r1, #4
 8016fda:	6978      	ldr	r0, [r7, #20]
 8016fdc:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	f107 020c 	add.w	r2, r7, #12
 8016fe6:	2100      	movs	r1, #0
 8016fe8:	6978      	ldr	r0, [r7, #20]
 8016fea:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8016ff2:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8016ffa:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	781b      	ldrb	r3, [r3, #0]
 8017000:	2b02      	cmp	r3, #2
 8017002:	d003      	beq.n	801700c <xPhyConfigure+0x12c>
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	2b03      	cmp	r3, #3
 801700a:	d104      	bne.n	8017016 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017012:	60fb      	str	r3, [r7, #12]
 8017014:	e007      	b.n	8017026 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	781b      	ldrb	r3, [r3, #0]
 801701a:	2b01      	cmp	r3, #1
 801701c:	d103      	bne.n	8017026 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017024:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	789b      	ldrb	r3, [r3, #2]
 801702a:	2b02      	cmp	r3, #2
 801702c:	d003      	beq.n	8017036 <xPhyConfigure+0x156>
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	789b      	ldrb	r3, [r3, #2]
 8017032:	2b03      	cmp	r3, #3
 8017034:	d104      	bne.n	8017040 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801703c:	60fb      	str	r3, [r7, #12]
 801703e:	e007      	b.n	8017050 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	789b      	ldrb	r3, [r3, #2]
 8017044:	2b01      	cmp	r3, #1
 8017046:	d103      	bne.n	8017050 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801704e:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017050:	6938      	ldr	r0, [r7, #16]
 8017052:	f7ff fe09 	bl	8016c68 <xHas_19_PHYCR>
 8017056:	4603      	mov	r3, r0
 8017058:	2b00      	cmp	r3, #0
 801705a:	d026      	beq.n	80170aa <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	f107 0208 	add.w	r2, r7, #8
 8017064:	2119      	movs	r1, #25
 8017066:	6978      	ldr	r0, [r7, #20]
 8017068:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017070:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	785b      	ldrb	r3, [r3, #1]
 8017076:	2b03      	cmp	r3, #3
 8017078:	d104      	bne.n	8017084 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017080:	60bb      	str	r3, [r7, #8]
 8017082:	e00c      	b.n	801709e <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	785b      	ldrb	r3, [r3, #1]
 8017088:	2b02      	cmp	r3, #2
 801708a:	d104      	bne.n	8017096 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017092:	60bb      	str	r3, [r7, #8]
 8017094:	e003      	b.n	801709e <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801709c:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	685b      	ldr	r3, [r3, #4]
 80170a2:	68ba      	ldr	r2, [r7, #8]
 80170a4:	2119      	movs	r1, #25
 80170a6:	6978      	ldr	r0, [r7, #20]
 80170a8:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	461a      	mov	r2, r3
 80170ae:	69f9      	ldr	r1, [r7, #28]
 80170b0:	480d      	ldr	r0, [pc, #52]	@ (80170e8 <xPhyConfigure+0x208>)
 80170b2:	f00a fbf1 	bl	8021898 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80170b6:	69bb      	ldr	r3, [r7, #24]
 80170b8:	3301      	adds	r3, #1
 80170ba:	61bb      	str	r3, [r7, #24]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170c0:	69ba      	ldr	r2, [r7, #24]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	f6ff af79 	blt.w	8016fba <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	69fa      	ldr	r2, [r7, #28]
 80170d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80170d8:	2300      	movs	r3, #0
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3720      	adds	r7, #32
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}
 80170e2:	bf00      	nop
 80170e4:	08026b88 	.word	0x08026b88
 80170e8:	08026bac 	.word	0x08026bac

080170ec <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 80170ec:	b590      	push	{r4, r7, lr}
 80170ee:	b095      	sub	sp, #84	@ 0x54
 80170f0:	af02      	add	r7, sp, #8
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d101      	bne.n	8017100 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 80170fc:	2300      	movs	r3, #0
 80170fe:	e18d      	b.n	801741c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017100:	2300      	movs	r3, #0
 8017102:	647b      	str	r3, [r7, #68]	@ 0x44
 8017104:	e020      	b.n	8017148 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8017106:	683a      	ldr	r2, [r7, #0]
 8017108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801710a:	fa22 f303 	lsr.w	r3, r2, r3
 801710e:	f003 0301 	and.w	r3, r3, #1
 8017112:	2b00      	cmp	r3, #0
 8017114:	d015      	beq.n	8017142 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017116:	687a      	ldr	r2, [r7, #4]
 8017118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801711a:	4413      	add	r3, r2
 801711c:	3318      	adds	r3, #24
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	687a      	ldr	r2, [r7, #4]
 8017128:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801712a:	2104      	movs	r1, #4
 801712c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801712e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801713c:	2100      	movs	r1, #0
 801713e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017140:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017144:	3301      	adds	r3, #1
 8017146:	647b      	str	r3, [r7, #68]	@ 0x44
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801714c:	461a      	mov	r2, r3
 801714e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017150:	4293      	cmp	r3, r2
 8017152:	d3d8      	bcc.n	8017106 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8017154:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017158:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 801715a:	f107 0318 	add.w	r3, r7, #24
 801715e:	4618      	mov	r0, r3
 8017160:	f7ed faf4 	bl	800474c <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8017164:	2300      	movs	r3, #0
 8017166:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8017168:	2301      	movs	r3, #1
 801716a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801716c:	2300      	movs	r3, #0
 801716e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017170:	e025      	b.n	80171be <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8017172:	683a      	ldr	r2, [r7, #0]
 8017174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017176:	4013      	ands	r3, r2
 8017178:	2b00      	cmp	r3, #0
 801717a:	d01a      	beq.n	80171b2 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 801717c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801717e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017180:	4013      	ands	r3, r2
 8017182:	2b00      	cmp	r3, #0
 8017184:	d115      	bne.n	80171b2 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017186:	687a      	ldr	r2, [r7, #4]
 8017188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801718a:	4413      	add	r3, r2
 801718c:	3318      	adds	r3, #24
 801718e:	781b      	ldrb	r3, [r3, #0]
 8017190:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801719a:	2101      	movs	r1, #1
 801719c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801719e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80171a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171a2:	f003 0320 	and.w	r3, r3, #32
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d003      	beq.n	80171b2 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80171aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80171ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171ae:	4313      	orrs	r3, r2
 80171b0:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80171b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171b4:	3301      	adds	r3, #1
 80171b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80171b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171ba:	005b      	lsls	r3, r3, #1
 80171bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171c2:	461a      	mov	r2, r3
 80171c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171c6:	4293      	cmp	r3, r2
 80171c8:	d3d3      	bcc.n	8017172 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80171ca:	683a      	ldr	r2, [r7, #0]
 80171cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d013      	beq.n	80171fa <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80171d2:	f107 0220 	add.w	r2, r7, #32
 80171d6:	f107 0318 	add.w	r3, r7, #24
 80171da:	4611      	mov	r1, r2
 80171dc:	4618      	mov	r0, r3
 80171de:	f7ed faed 	bl	80047bc <xTaskCheckForTimeOut>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d004      	beq.n	80171f2 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80171e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80171ea:	488e      	ldr	r0, [pc, #568]	@ (8017424 <xPhyStartAutoNegotiation+0x338>)
 80171ec:	f00a fb54 	bl	8021898 <lUDPLoggingPrintf>
            break;
 80171f0:	e004      	b.n	80171fc <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80171f2:	2032      	movs	r0, #50	@ 0x32
 80171f4:	f7ec fd36 	bl	8003c64 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 80171f8:	e7b6      	b.n	8017168 <xPhyStartAutoNegotiation+0x7c>
            break;
 80171fa:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 80171fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f000 810b 	beq.w	801741a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8017204:	2301      	movs	r3, #1
 8017206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801720c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801720e:	43db      	mvns	r3, r3
 8017210:	401a      	ands	r2, r3
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017216:	2300      	movs	r3, #0
 8017218:	647b      	str	r3, [r7, #68]	@ 0x44
 801721a:	e0f7      	b.n	801740c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801721c:	687a      	ldr	r2, [r7, #4]
 801721e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017220:	4413      	add	r3, r2
 8017222:	3318      	adds	r3, #24
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801722c:	3202      	adds	r2, #2
 801722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017232:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8017234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017238:	4013      	ands	r3, r2
 801723a:	2b00      	cmp	r3, #0
 801723c:	f000 80df 	beq.w	80173fe <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	685b      	ldr	r3, [r3, #4]
 8017244:	687a      	ldr	r2, [r7, #4]
 8017246:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017248:	2100      	movs	r1, #0
 801724a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801724c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017256:	2101      	movs	r1, #1
 8017258:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801725a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 801725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801725e:	f003 0304 	and.w	r3, r3, #4
 8017262:	2b00      	cmp	r3, #0
 8017264:	d005      	beq.n	8017272 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801726a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801726c:	431a      	orrs	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8017272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017274:	4a6c      	ldr	r2, [pc, #432]	@ (8017428 <xPhyStartAutoNegotiation+0x33c>)
 8017276:	4293      	cmp	r3, r2
 8017278:	d130      	bne.n	80172dc <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	f107 0214 	add.w	r2, r7, #20
 8017282:	211e      	movs	r1, #30
 8017284:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017286:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8017288:	697b      	ldr	r3, [r7, #20]
 801728a:	f003 0307 	and.w	r3, r3, #7
 801728e:	3b01      	subs	r3, #1
 8017290:	2b05      	cmp	r3, #5
 8017292:	d814      	bhi.n	80172be <xPhyStartAutoNegotiation+0x1d2>
 8017294:	a201      	add	r2, pc, #4	@ (adr r2, 801729c <xPhyStartAutoNegotiation+0x1b0>)
 8017296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801729a:	bf00      	nop
 801729c:	080172b5 	.word	0x080172b5
 80172a0:	080172bf 	.word	0x080172bf
 80172a4:	080172bf 	.word	0x080172bf
 80172a8:	080172bf 	.word	0x080172bf
 80172ac:	080172b5 	.word	0x080172b5
 80172b0:	080172bf 	.word	0x080172bf
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80172b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172b6:	f043 0302 	orr.w	r3, r3, #2
 80172ba:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80172bc:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80172be:	697b      	ldr	r3, [r7, #20]
 80172c0:	f003 0307 	and.w	r3, r3, #7
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	d801      	bhi.n	80172cc <xPhyStartAutoNegotiation+0x1e0>
 80172c8:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 80172ca:	e05b      	b.n	8017384 <xPhyStartAutoNegotiation+0x298>
 80172cc:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 80172ce:	2b01      	cmp	r3, #1
 80172d0:	d858      	bhi.n	8017384 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80172d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d4:	f043 0304 	orr.w	r3, r3, #4
 80172d8:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80172da:	e053      	b.n	8017384 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 80172dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172de:	4a53      	ldr	r2, [pc, #332]	@ (801742c <xPhyStartAutoNegotiation+0x340>)
 80172e0:	4293      	cmp	r3, r2
 80172e2:	d126      	bne.n	8017332 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 80172e4:	2300      	movs	r3, #0
 80172e6:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 80172e8:	2300      	movs	r3, #0
 80172ea:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f107 0210 	add.w	r2, r7, #16
 80172f4:	211f      	movs	r1, #31
 80172f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80172f8:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	0a1b      	lsrs	r3, r3, #8
 80172fe:	f003 0307 	and.w	r3, r3, #7
 8017302:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8017304:	2300      	movs	r3, #0
 8017306:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8017308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801730a:	2b02      	cmp	r3, #2
 801730c:	d002      	beq.n	8017314 <xPhyStartAutoNegotiation+0x228>
 801730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017310:	2b05      	cmp	r3, #5
 8017312:	d103      	bne.n	801731c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017316:	f043 0302 	orr.w	r3, r3, #2
 801731a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 801731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801731e:	2b05      	cmp	r3, #5
 8017320:	d002      	beq.n	8017328 <xPhyStartAutoNegotiation+0x23c>
 8017322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017324:	2b06      	cmp	r3, #6
 8017326:	d12d      	bne.n	8017384 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801732a:	f043 0304 	orr.w	r3, r3, #4
 801732e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017330:	e028      	b.n	8017384 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8017332:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017334:	f7ff fc66 	bl	8016c04 <xHas_1F_PHYSPCS>
 8017338:	4603      	mov	r3, r0
 801733a:	2b00      	cmp	r3, #0
 801733c:	d01b      	beq.n	8017376 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	f107 020c 	add.w	r2, r7, #12
 8017346:	211f      	movs	r1, #31
 8017348:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801734a:	4798      	blx	r3
                ulRegValue = 0;
 801734c:	2300      	movs	r3, #0
 801734e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	f003 0310 	and.w	r3, r3, #16
 8017356:	2b00      	cmp	r3, #0
 8017358:	d003      	beq.n	8017362 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735c:	f043 0304 	orr.w	r3, r3, #4
 8017360:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	f003 030c 	and.w	r3, r3, #12
 8017368:	2b04      	cmp	r3, #4
 801736a:	d10b      	bne.n	8017384 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 801736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801736e:	f043 0302 	orr.w	r3, r3, #2
 8017372:	627b      	str	r3, [r7, #36]	@ 0x24
 8017374:	e006      	b.n	8017384 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801737e:	2110      	movs	r1, #16
 8017380:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017382:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8017384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017388:	f003 0304 	and.w	r3, r3, #4
 801738c:	2b00      	cmp	r3, #0
 801738e:	d001      	beq.n	8017394 <xPhyStartAutoNegotiation+0x2a8>
 8017390:	4827      	ldr	r0, [pc, #156]	@ (8017430 <xPhyStartAutoNegotiation+0x344>)
 8017392:	e000      	b.n	8017396 <xPhyStartAutoNegotiation+0x2aa>
 8017394:	4827      	ldr	r0, [pc, #156]	@ (8017434 <xPhyStartAutoNegotiation+0x348>)
 8017396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017398:	f003 0302 	and.w	r3, r3, #2
 801739c:	2b00      	cmp	r3, #0
 801739e:	d001      	beq.n	80173a4 <xPhyStartAutoNegotiation+0x2b8>
 80173a0:	240a      	movs	r4, #10
 80173a2:	e000      	b.n	80173a6 <xPhyStartAutoNegotiation+0x2ba>
 80173a4:	2464      	movs	r4, #100	@ 0x64
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80173aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173ac:	4013      	ands	r3, r2
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d001      	beq.n	80173b6 <xPhyStartAutoNegotiation+0x2ca>
 80173b2:	4b21      	ldr	r3, [pc, #132]	@ (8017438 <xPhyStartAutoNegotiation+0x34c>)
 80173b4:	e000      	b.n	80173b8 <xPhyStartAutoNegotiation+0x2cc>
 80173b6:	4b21      	ldr	r3, [pc, #132]	@ (801743c <xPhyStartAutoNegotiation+0x350>)
 80173b8:	9300      	str	r3, [sp, #0]
 80173ba:	4623      	mov	r3, r4
 80173bc:	4602      	mov	r2, r0
 80173be:	4820      	ldr	r0, [pc, #128]	@ (8017440 <xPhyStartAutoNegotiation+0x354>)
 80173c0:	f00a fa6a 	bl	8021898 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 80173c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173c6:	f003 0304 	and.w	r3, r3, #4
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d004      	beq.n	80173d8 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2202      	movs	r2, #2
 80173d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80173d6:	e003      	b.n	80173e0 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2201      	movs	r2, #1
 80173dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 80173e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173e2:	f003 0302 	and.w	r3, r3, #2
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d004      	beq.n	80173f4 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	2201      	movs	r2, #1
 80173ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80173f2:	e005      	b.n	8017400 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2202      	movs	r2, #2
 80173f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80173fc:	e000      	b.n	8017400 <xPhyStartAutoNegotiation+0x314>
                continue;
 80173fe:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017402:	3301      	adds	r3, #1
 8017404:	647b      	str	r3, [r7, #68]	@ 0x44
 8017406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017408:	005b      	lsls	r3, r3, #1
 801740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017410:	461a      	mov	r2, r3
 8017412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017414:	4293      	cmp	r3, r2
 8017416:	f4ff af01 	bcc.w	801721c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 801741a:	2300      	movs	r3, #0
}
 801741c:	4618      	mov	r0, r3
 801741e:	374c      	adds	r7, #76	@ 0x4c
 8017420:	46bd      	mov	sp, r7
 8017422:	bd90      	pop	{r4, r7, pc}
 8017424:	08026bd0 	.word	0x08026bd0
 8017428:	00221560 	.word	0x00221560
 801742c:	00221550 	.word	0x00221550
 8017430:	08026c1c 	.word	0x08026c1c
 8017434:	08026c24 	.word	0x08026c24
 8017438:	08026c2c 	.word	0x08026c2c
 801743c:	08026c34 	.word	0x08026c34
 8017440:	08026c38 	.word	0x08026c38

08017444 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b088      	sub	sp, #32
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801744e:	2301      	movs	r3, #1
 8017450:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8017452:	2300      	movs	r3, #0
 8017454:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	dd2b      	ble.n	80174b4 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	331c      	adds	r3, #28
 8017460:	4618      	mov	r0, r3
 8017462:	f7ed f973 	bl	800474c <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	f643 2298 	movw	r2, #15000	@ 0x3a98
 801746c:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801746e:	2300      	movs	r3, #0
 8017470:	61bb      	str	r3, [r7, #24]
 8017472:	e019      	b.n	80174a8 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017478:	69fb      	ldr	r3, [r7, #28]
 801747a:	4013      	ands	r3, r2
 801747c:	2b00      	cmp	r3, #0
 801747e:	d10d      	bne.n	801749c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017484:	69fb      	ldr	r3, [r7, #28]
 8017486:	431a      	orrs	r2, r3
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017490:	4619      	mov	r1, r3
 8017492:	4842      	ldr	r0, [pc, #264]	@ (801759c <xPhyCheckLinkStatus+0x158>)
 8017494:	f00a fa00 	bl	8021898 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8017498:	2301      	movs	r3, #1
 801749a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801749c:	69bb      	ldr	r3, [r7, #24]
 801749e:	3301      	adds	r3, #1
 80174a0:	61bb      	str	r3, [r7, #24]
 80174a2:	69fb      	ldr	r3, [r7, #28]
 80174a4:	005b      	lsls	r3, r3, #1
 80174a6:	61fb      	str	r3, [r7, #28]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174ac:	69ba      	ldr	r2, [r7, #24]
 80174ae:	429a      	cmp	r2, r3
 80174b0:	dbe0      	blt.n	8017474 <xPhyCheckLinkStatus+0x30>
 80174b2:	e06e      	b.n	8017592 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f103 021c 	add.w	r2, r3, #28
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	3324      	adds	r3, #36	@ 0x24
 80174be:	4619      	mov	r1, r3
 80174c0:	4610      	mov	r0, r2
 80174c2:	f7ed f97b 	bl	80047bc <xTaskCheckForTimeOut>
 80174c6:	4603      	mov	r3, r0
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d062      	beq.n	8017592 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80174cc:	2300      	movs	r3, #0
 80174ce:	61bb      	str	r3, [r7, #24]
 80174d0:	e045      	b.n	801755e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80174d2:	687a      	ldr	r2, [r7, #4]
 80174d4:	69bb      	ldr	r3, [r7, #24]
 80174d6:	4413      	add	r3, r2
 80174d8:	3318      	adds	r3, #24
 80174da:	781b      	ldrb	r3, [r3, #0]
 80174dc:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	f107 020c 	add.w	r2, r7, #12
 80174e6:	2101      	movs	r1, #1
 80174e8:	6938      	ldr	r0, [r7, #16]
 80174ea:	4798      	blx	r3
 80174ec:	4603      	mov	r3, r0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d12f      	bne.n	8017552 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80174f6:	69fb      	ldr	r3, [r7, #28]
 80174f8:	4013      	ands	r3, r2
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	bf14      	ite	ne
 80174fe:	2301      	movne	r3, #1
 8017500:	2300      	moveq	r3, #0
 8017502:	b2da      	uxtb	r2, r3
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	f003 0304 	and.w	r3, r3, #4
 801750a:	2b00      	cmp	r3, #0
 801750c:	bf14      	ite	ne
 801750e:	2301      	movne	r3, #1
 8017510:	2300      	moveq	r3, #0
 8017512:	b2db      	uxtb	r3, r3
 8017514:	4053      	eors	r3, r2
 8017516:	b2db      	uxtb	r3, r3
 8017518:	2b00      	cmp	r3, #0
 801751a:	d01a      	beq.n	8017552 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	f003 0304 	and.w	r3, r3, #4
 8017522:	2b00      	cmp	r3, #0
 8017524:	d006      	beq.n	8017534 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801752a:	69fb      	ldr	r3, [r7, #28]
 801752c:	431a      	orrs	r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	635a      	str	r2, [r3, #52]	@ 0x34
 8017532:	e006      	b.n	8017542 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017538:	69fb      	ldr	r3, [r7, #28]
 801753a:	43db      	mvns	r3, r3
 801753c:	401a      	ands	r2, r3
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017546:	4619      	mov	r1, r3
 8017548:	4814      	ldr	r0, [pc, #80]	@ (801759c <xPhyCheckLinkStatus+0x158>)
 801754a:	f00a f9a5 	bl	8021898 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801754e:	2301      	movs	r3, #1
 8017550:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017552:	69bb      	ldr	r3, [r7, #24]
 8017554:	3301      	adds	r3, #1
 8017556:	61bb      	str	r3, [r7, #24]
 8017558:	69fb      	ldr	r3, [r7, #28]
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	61fb      	str	r3, [r7, #28]
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017562:	69ba      	ldr	r2, [r7, #24]
 8017564:	429a      	cmp	r2, r3
 8017566:	dbb4      	blt.n	80174d2 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	331c      	adds	r3, #28
 801756c:	4618      	mov	r0, r3
 801756e:	f7ed f8ed 	bl	800474c <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017576:	69fb      	ldr	r3, [r7, #28]
 8017578:	085b      	lsrs	r3, r3, #1
 801757a:	4013      	ands	r3, r2
 801757c:	2b00      	cmp	r3, #0
 801757e:	d004      	beq.n	801758a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8017586:	625a      	str	r2, [r3, #36]	@ 0x24
 8017588:	e003      	b.n	8017592 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017590:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8017592:	697b      	ldr	r3, [r7, #20]
}
 8017594:	4618      	mov	r0, r3
 8017596:	3720      	adds	r7, #32
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}
 801759c:	08026c6c 	.word	0x08026c6c

080175a0 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 80175a0:	b480      	push	{r7}
 80175a2:	b085      	sub	sp, #20
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 80175a8:	2300      	movs	r3, #0
 80175aa:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 80175ac:	2300      	movs	r3, #0
 80175ae:	60bb      	str	r3, [r7, #8]
 80175b0:	e013      	b.n	80175da <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 80175b2:	2201      	movs	r2, #1
 80175b4:	68bb      	ldr	r3, [r7, #8]
 80175b6:	fa02 f303 	lsl.w	r3, r2, r3
 80175ba:	461a      	mov	r2, r3
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	4013      	ands	r3, r2
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d007      	beq.n	80175d4 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 80175c4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	fa22 f303 	lsr.w	r3, r2, r3
 80175ce:	68fa      	ldr	r2, [r7, #12]
 80175d0:	4313      	orrs	r3, r2
 80175d2:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	3301      	adds	r3, #1
 80175d8:	60bb      	str	r3, [r7, #8]
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	2b1f      	cmp	r3, #31
 80175de:	dde8      	ble.n	80175b2 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 80175e0:	68fb      	ldr	r3, [r7, #12]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3714      	adds	r7, #20
 80175e6:	46bd      	mov	sp, r7
 80175e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ec:	4770      	bx	lr
	...

080175f0 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 80175f0:	b590      	push	{r4, r7, lr}
 80175f2:	b087      	sub	sp, #28
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 80175f8:	f04f 33ff 	mov.w	r3, #4294967295
 80175fc:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 80175fe:	2300      	movs	r3, #0
 8017600:	613b      	str	r3, [r7, #16]
 8017602:	e024      	b.n	801764e <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	687a      	ldr	r2, [r7, #4]
 8017608:	4413      	add	r3, r2
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	461a      	mov	r2, r3
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	4053      	eors	r3, r2
 8017612:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017614:	2300      	movs	r3, #0
 8017616:	617b      	str	r3, [r7, #20]
 8017618:	e013      	b.n	8017642 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	f003 0301 	and.w	r3, r3, #1
 8017620:	2b00      	cmp	r3, #0
 8017622:	d008      	beq.n	8017636 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	085c      	lsrs	r4, r3, #1
 8017628:	480e      	ldr	r0, [pc, #56]	@ (8017664 <prvComputeCRC32_MAC+0x74>)
 801762a:	f7ff ffb9 	bl	80175a0 <prvRevBits32>
 801762e:	4603      	mov	r3, r0
 8017630:	4063      	eors	r3, r4
 8017632:	60fb      	str	r3, [r7, #12]
 8017634:	e002      	b.n	801763c <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	085b      	lsrs	r3, r3, #1
 801763a:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	3301      	adds	r3, #1
 8017640:	617b      	str	r3, [r7, #20]
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	2b07      	cmp	r3, #7
 8017646:	dde8      	ble.n	801761a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	3301      	adds	r3, #1
 801764c:	613b      	str	r3, [r7, #16]
 801764e:	693b      	ldr	r3, [r7, #16]
 8017650:	2b05      	cmp	r3, #5
 8017652:	ddd7      	ble.n	8017604 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	43db      	mvns	r3, r3
 8017658:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 801765a:	68fb      	ldr	r3, [r7, #12]
}
 801765c:	4618      	mov	r0, r3
 801765e:	371c      	adds	r7, #28
 8017660:	46bd      	mov	sp, r7
 8017662:	bd90      	pop	{r4, r7, pc}
 8017664:	04c11db7 	.word	0x04c11db7

08017668 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b084      	sub	sp, #16
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f7ff ffbd 	bl	80175f0 <prvComputeCRC32_MAC>
 8017676:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8017678:	68f8      	ldr	r0, [r7, #12]
 801767a:	f7ff ff91 	bl	80175a0 <prvRevBits32>
 801767e:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 8017680:	68bb      	ldr	r3, [r7, #8]
 8017682:	0e9b      	lsrs	r3, r3, #26
}
 8017684:	4618      	mov	r0, r3
 8017686:	3710      	adds	r7, #16
 8017688:	46bd      	mov	sp, r7
 801768a:	bd80      	pop	{r7, pc}

0801768c <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b084      	sub	sp, #16
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
 8017694:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8017696:	6838      	ldr	r0, [r7, #0]
 8017698:	f7ff ffe6 	bl	8017668 <prvComputeEthernet_MACHash>
 801769c:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	2b1f      	cmp	r3, #31
 80176a2:	d80c      	bhi.n	80176be <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	691a      	ldr	r2, [r3, #16]
 80176aa:	2101      	movs	r1, #1
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	fa01 f303 	lsl.w	r3, r1, r3
 80176b2:	4619      	mov	r1, r3
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	430a      	orrs	r2, r1
 80176ba:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 80176bc:	e00d      	b.n	80176da <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	695a      	ldr	r2, [r3, #20]
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	f003 031f 	and.w	r3, r3, #31
 80176ca:	2101      	movs	r1, #1
 80176cc:	fa01 f303 	lsl.w	r3, r1, r3
 80176d0:	4619      	mov	r1, r3
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	430a      	orrs	r2, r1
 80176d8:	615a      	str	r2, [r3, #20]
}
 80176da:	bf00      	nop
 80176dc:	3710      	adds	r7, #16
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}

080176e2 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 80176e2:	b580      	push	{r7, lr}
 80176e4:	b086      	sub	sp, #24
 80176e6:	af00      	add	r7, sp, #0
 80176e8:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 80176ea:	230a      	movs	r3, #10
 80176ec:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 80176ee:	2300      	movs	r3, #0
 80176f0:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 80176f2:	6939      	ldr	r1, [r7, #16]
 80176f4:	6878      	ldr	r0, [r7, #4]
 80176f6:	f7ff f9bf 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 80176fa:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d002      	beq.n	8017708 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017706:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8017708:	697b      	ldr	r3, [r7, #20]
}
 801770a:	4618      	mov	r0, r3
 801770c:	3718      	adds	r7, #24
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}
	...

08017714 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b08e      	sub	sp, #56	@ 0x38
 8017718:	af02      	add	r7, sp, #8
 801771a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 801771c:	2300      	movs	r3, #0
 801771e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8017720:	2300      	movs	r3, #0
 8017722:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8017724:	4b8d      	ldr	r3, [pc, #564]	@ (801795c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	2b00      	cmp	r3, #0
 801772a:	f040 8104 	bne.w	8017936 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 801772e:	4a8c      	ldr	r2, [pc, #560]	@ (8017960 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8017734:	6878      	ldr	r0, [r7, #4]
 8017736:	f7f5 fb8f 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 801773a:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 801773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801773e:	2b00      	cmp	r3, #0
 8017740:	d104      	bne.n	801774c <xSTM32H_NetworkInterfaceInitialise+0x38>
 8017742:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8017746:	4887      	ldr	r0, [pc, #540]	@ (8017964 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017748:	f7e9 ff86 	bl	8001658 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 801774c:	4b86      	ldr	r3, [pc, #536]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801774e:	4a87      	ldr	r2, [pc, #540]	@ (801796c <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8017750:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8017752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017754:	33e8      	adds	r3, #232	@ 0xe8
 8017756:	4a84      	ldr	r2, [pc, #528]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017758:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801775a:	4b83      	ldr	r3, [pc, #524]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801775c:	2201      	movs	r2, #1
 801775e:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8017760:	4b81      	ldr	r3, [pc, #516]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017762:	4a83      	ldr	r2, [pc, #524]	@ (8017970 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8017764:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8017766:	4b80      	ldr	r3, [pc, #512]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017768:	4a82      	ldr	r2, [pc, #520]	@ (8017974 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 801776a:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 801776c:	4b7e      	ldr	r3, [pc, #504]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801776e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8017772:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017774:	2260      	movs	r2, #96	@ 0x60
 8017776:	2100      	movs	r1, #0
 8017778:	487d      	ldr	r0, [pc, #500]	@ (8017970 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 801777a:	f00a fbb6 	bl	8021eea <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801777e:	2260      	movs	r2, #96	@ 0x60
 8017780:	2100      	movs	r1, #0
 8017782:	487c      	ldr	r0, [pc, #496]	@ (8017974 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8017784:	f00a fbb1 	bl	8021eea <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8017788:	4877      	ldr	r0, [pc, #476]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801778a:	f000 fc71 	bl	8018070 <HAL_ETH_Init>
 801778e:	4603      	mov	r3, r0
 8017790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8017794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017798:	2b00      	cmp	r3, #0
 801779a:	f040 80c9 	bne.w	8017930 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801779e:	4b72      	ldr	r3, [pc, #456]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	6899      	ldr	r1, [r3, #8]
 80177a4:	4b70      	ldr	r3, [pc, #448]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80177a6:	681a      	ldr	r2, [r3, #0]
 80177a8:	f240 4316 	movw	r3, #1046	@ 0x416
 80177ac:	430b      	orrs	r3, r1
 80177ae:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80177b0:	2234      	movs	r2, #52	@ 0x34
 80177b2:	2100      	movs	r1, #0
 80177b4:	4870      	ldr	r0, [pc, #448]	@ (8017978 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177b6:	f00a fb98 	bl	8021eea <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 80177ba:	4b6f      	ldr	r3, [pc, #444]	@ (8017978 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177bc:	2220      	movs	r2, #32
 80177be:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80177c0:	4b6d      	ldr	r3, [pc, #436]	@ (8017978 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	f043 0301 	orr.w	r3, r3, #1
 80177c8:	4a6b      	ldr	r2, [pc, #428]	@ (8017978 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177ca:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80177cc:	4b6a      	ldr	r3, [pc, #424]	@ (8017978 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177ce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80177d2:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80177d4:	4b68      	ldr	r3, [pc, #416]	@ (8017978 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80177da:	2104      	movs	r1, #4
 80177dc:	2004      	movs	r0, #4
 80177de:	f7eb fbff 	bl	8002fe0 <xQueueCreateCountingSemaphore>
 80177e2:	4603      	mov	r3, r0
 80177e4:	4a65      	ldr	r2, [pc, #404]	@ (801797c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80177e6:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 80177e8:	4b64      	ldr	r3, [pc, #400]	@ (801797c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d104      	bne.n	80177fa <xSTM32H_NetworkInterfaceInitialise+0xe6>
 80177f0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80177f4:	485b      	ldr	r0, [pc, #364]	@ (8017964 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80177f6:	f7e9 ff2f 	bl	8001658 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 80177fa:	2001      	movs	r0, #1
 80177fc:	f7eb fbd7 	bl	8002fae <xQueueCreateMutex>
 8017800:	4603      	mov	r3, r0
 8017802:	4a5f      	ldr	r2, [pc, #380]	@ (8017980 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017804:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017806:	4b5e      	ldr	r3, [pc, #376]	@ (8017980 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d104      	bne.n	8017818 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801780e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017812:	4854      	ldr	r0, [pc, #336]	@ (8017964 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017814:	f7e9 ff20 	bl	8001658 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017818:	2300      	movs	r3, #0
 801781a:	627b      	str	r3, [r7, #36]	@ 0x24
 801781c:	e015      	b.n	801784a <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801781e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8017822:	f7ff ff5e 	bl	80176e2 <pucGetRXBuffer>
 8017826:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8017828:	69fb      	ldr	r3, [r7, #28]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d104      	bne.n	8017838 <xSTM32H_NetworkInterfaceInitialise+0x124>
 801782e:	f240 1189 	movw	r1, #393	@ 0x189
 8017832:	484c      	ldr	r0, [pc, #304]	@ (8017964 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017834:	f7e9 ff10 	bl	8001658 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8017838:	2300      	movs	r3, #0
 801783a:	69fa      	ldr	r2, [r7, #28]
 801783c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801783e:	484a      	ldr	r0, [pc, #296]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017840:	f000 fd02 	bl	8018248 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017846:	3301      	adds	r3, #1
 8017848:	627b      	str	r3, [r7, #36]	@ 0x24
 801784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801784c:	2b03      	cmp	r3, #3
 801784e:	d9e6      	bls.n	801781e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 8017850:	494c      	ldr	r1, [pc, #304]	@ (8017984 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 8017852:	4845      	ldr	r0, [pc, #276]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017854:	f7ff ff1a 	bl	801768c <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8017858:	494b      	ldr	r1, [pc, #300]	@ (8017988 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 801785a:	4843      	ldr	r0, [pc, #268]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801785c:	f7ff ff16 	bl	801768c <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 8017860:	e03a      	b.n	80178d8 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 8017862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017864:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017868:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801786c:	b2db      	uxtb	r3, r3
 801786e:	2b00      	cmp	r3, #0
 8017870:	d002      	beq.n	8017878 <xSTM32H_NetworkInterfaceInitialise+0x164>
 8017872:	2b01      	cmp	r3, #1
 8017874:	d00d      	beq.n	8017892 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8017876:	e028      	b.n	80178ca <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8017878:	4b3b      	ldr	r3, [pc, #236]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801787a:	685a      	ldr	r2, [r3, #4]
 801787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801787e:	33e8      	adds	r3, #232	@ 0xe8
 8017880:	429a      	cmp	r2, r3
 8017882:	d021      	beq.n	80178c8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8017884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017886:	33e8      	adds	r3, #232	@ 0xe8
 8017888:	4619      	mov	r1, r3
 801788a:	4837      	ldr	r0, [pc, #220]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801788c:	f7ff fefe 	bl	801768c <prvSetMAC_HashFilter>
                                break;
 8017890:	e01a      	b.n	80178c8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 8017892:	4a3e      	ldr	r2, [pc, #248]	@ (801798c <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8017894:	f107 0314 	add.w	r3, r7, #20
 8017898:	e892 0003 	ldmia.w	r2, {r0, r1}
 801789c:	6018      	str	r0, [r3, #0]
 801789e:	3304      	adds	r3, #4
 80178a0:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 80178a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80178a8:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 80178aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80178b0:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 80178b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178b4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80178b8:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80178ba:	f107 0314 	add.w	r3, r7, #20
 80178be:	4619      	mov	r1, r3
 80178c0:	4829      	ldr	r0, [pc, #164]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80178c2:	f7ff fee3 	bl	801768c <prvSetMAC_HashFilter>
                               break;
 80178c6:	e000      	b.n	80178ca <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 80178c8:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 80178ca:	4b25      	ldr	r3, [pc, #148]	@ (8017960 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7f5 fae3 	bl	800ce9c <FreeRTOS_NextEndPoint>
 80178d6:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 80178d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d1c1      	bne.n	8017862 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 80178de:	4a2c      	ldr	r2, [pc, #176]	@ (8017990 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 80178e0:	f107 030c 	add.w	r3, r7, #12
 80178e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178e8:	6018      	str	r0, [r3, #0]
 80178ea:	3304      	adds	r3, #4
 80178ec:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80178ee:	f107 030c 	add.w	r3, r7, #12
 80178f2:	4619      	mov	r1, r3
 80178f4:	481c      	ldr	r0, [pc, #112]	@ (8017968 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80178f6:	f7ff fec9 	bl	801768c <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 80178fa:	f000 f911 	bl	8017b20 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 80178fe:	2001      	movs	r0, #1
 8017900:	f000 f926 	bl	8017b50 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017904:	4b23      	ldr	r3, [pc, #140]	@ (8017994 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017906:	9301      	str	r3, [sp, #4]
 8017908:	2305      	movs	r3, #5
 801790a:	9300      	str	r3, [sp, #0]
 801790c:	2300      	movs	r3, #0
 801790e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017912:	4921      	ldr	r1, [pc, #132]	@ (8017998 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017914:	4821      	ldr	r0, [pc, #132]	@ (801799c <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017916:	f7ec f865 	bl	80039e4 <xTaskCreate>
 801791a:	4603      	mov	r3, r0
 801791c:	2b01      	cmp	r3, #1
 801791e:	d103      	bne.n	8017928 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 8017920:	4b0e      	ldr	r3, [pc, #56]	@ (801795c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017922:	2201      	movs	r2, #1
 8017924:	701a      	strb	r2, [r3, #0]
 8017926:	e006      	b.n	8017936 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8017928:	4b0c      	ldr	r3, [pc, #48]	@ (801795c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801792a:	2202      	movs	r2, #2
 801792c:	701a      	strb	r2, [r3, #0]
 801792e:	e002      	b.n	8017936 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 8017930:	4b0a      	ldr	r3, [pc, #40]	@ (801795c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017932:	2202      	movs	r2, #2
 8017934:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8017936:	4b09      	ldr	r3, [pc, #36]	@ (801795c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017938:	781b      	ldrb	r3, [r3, #0]
 801793a:	2b01      	cmp	r3, #1
 801793c:	d108      	bne.n	8017950 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 801793e:	4b18      	ldr	r3, [pc, #96]	@ (80179a0 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 8017940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017942:	2b00      	cmp	r3, #0
 8017944:	d004      	beq.n	8017950 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8017946:	2301      	movs	r3, #1
 8017948:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 801794a:	4816      	ldr	r0, [pc, #88]	@ (80179a4 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 801794c:	f009 ffa4 	bl	8021898 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8017950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017952:	4618      	mov	r0, r3
 8017954:	3730      	adds	r7, #48	@ 0x30
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}
 801795a:	bf00      	nop
 801795c:	200022a8 	.word	0x200022a8
 8017960:	2000235c 	.word	0x2000235c
 8017964:	08026c94 	.word	0x08026c94
 8017968:	200022b4 	.word	0x200022b4
 801796c:	40028000 	.word	0x40028000
 8017970:	24040060 	.word	0x24040060
 8017974:	24040000 	.word	0x24040000
 8017978:	20002328 	.word	0x20002328
 801797c:	200022ac 	.word	0x200022ac
 8017980:	200022b0 	.word	0x200022b0
 8017984:	08026f20 	.word	0x08026f20
 8017988:	08026f28 	.word	0x08026f28
 801798c:	08026d0c 	.word	0x08026d0c
 8017990:	08026d14 	.word	0x08026d14
 8017994:	20002360 	.word	0x20002360
 8017998:	08026ce8 	.word	0x08026ce8
 801799c:	08017f05 	.word	0x08017f05
 80179a0:	20002364 	.word	0x20002364
 80179a4:	08026cf4 	.word	0x08026cf4

080179a8 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 80179a8:	b480      	push	{r7}
 80179aa:	b085      	sub	sp, #20
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 80179b0:	4b07      	ldr	r3, [pc, #28]	@ (80179d0 <xSTM32H_GetPhyLinkStatus+0x28>)
 80179b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d002      	beq.n	80179be <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 80179b8:	2301      	movs	r3, #1
 80179ba:	60fb      	str	r3, [r7, #12]
 80179bc:	e001      	b.n	80179c2 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 80179be:	2300      	movs	r3, #0
 80179c0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80179c2:	68fb      	ldr	r3, [r7, #12]
}
 80179c4:	4618      	mov	r0, r3
 80179c6:	3714      	adds	r7, #20
 80179c8:	46bd      	mov	sp, r7
 80179ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ce:	4770      	bx	lr
 80179d0:	20002364 	.word	0x20002364

080179d4 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b082      	sub	sp, #8
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
 80179dc:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	4a10      	ldr	r2, [pc, #64]	@ (8017a24 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 80179e2:	2111      	movs	r1, #17
 80179e4:	4810      	ldr	r0, [pc, #64]	@ (8017a28 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80179e6:	f00a ff83 	bl	80228f0 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 80179ea:	2228      	movs	r2, #40	@ 0x28
 80179ec:	2100      	movs	r1, #0
 80179ee:	6838      	ldr	r0, [r7, #0]
 80179f0:	f00a fa7b 	bl	8021eea <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 80179f4:	683b      	ldr	r3, [r7, #0]
 80179f6:	4a0c      	ldr	r2, [pc, #48]	@ (8017a28 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80179f8:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 80179fa:	687a      	ldr	r2, [r7, #4]
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8017a00:	683b      	ldr	r3, [r7, #0]
 8017a02:	4a0a      	ldr	r2, [pc, #40]	@ (8017a2c <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8017a04:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8017a06:	683b      	ldr	r3, [r7, #0]
 8017a08:	4a09      	ldr	r2, [pc, #36]	@ (8017a30 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 8017a0a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	4a09      	ldr	r2, [pc, #36]	@ (8017a34 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8017a10:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8017a12:	6838      	ldr	r0, [r7, #0]
 8017a14:	f7f5 f94c 	bl	800ccb0 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8017a18:	683b      	ldr	r3, [r7, #0]
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3708      	adds	r7, #8
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	08026d1c 	.word	0x08026d1c
 8017a28:	200023a4 	.word	0x200023a4
 8017a2c:	08017715 	.word	0x08017715
 8017a30:	08017a39 	.word	0x08017a39
 8017a34:	080179a9 	.word	0x080179a9

08017a38 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b08a      	sub	sp, #40	@ 0x28
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017a44:	2300      	movs	r3, #0
 8017a46:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8017a48:	2364      	movs	r3, #100	@ 0x64
 8017a4a:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8017a4c:	68f8      	ldr	r0, [r7, #12]
 8017a4e:	f7ff ffab 	bl	80179a8 <xSTM32H_GetPhyLinkStatus>
 8017a52:	4603      	mov	r3, r0
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d14c      	bne.n	8017af2 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a5c:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d104      	bne.n	8017a6e <xSTM32H_NetworkInterfaceOutput+0x36>
 8017a64:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8017a68:	4827      	ldr	r0, [pc, #156]	@ (8017b08 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8017a6a:	f7e9 fdf5 	bl	8001658 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 8017a72:	68bb      	ldr	r3, [r7, #8]
 8017a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8017a76:	617b      	str	r3, [r7, #20]
 8017a78:	2300      	movs	r3, #0
 8017a7a:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8017a7c:	68bb      	ldr	r3, [r7, #8]
 8017a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a80:	4a22      	ldr	r2, [pc, #136]	@ (8017b0c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017a82:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8017a84:	4a21      	ldr	r2, [pc, #132]	@ (8017b0c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017a86:	f107 0310 	add.w	r3, r7, #16
 8017a8a:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8017a8c:	4b20      	ldr	r3, [pc, #128]	@ (8017b10 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	6a39      	ldr	r1, [r7, #32]
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7eb fc86 	bl	80033a4 <xQueueSemaphoreTake>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	2b01      	cmp	r3, #1
 8017a9c:	d003      	beq.n	8017aa6 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 8017a9e:	481d      	ldr	r0, [pc, #116]	@ (8017b14 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8017aa0:	f009 fefa 	bl	8021898 <lUDPLoggingPrintf>
 8017aa4:	e025      	b.n	8017af2 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8017aa6:	f3bf 8f4f 	dsb	sy
}
 8017aaa:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 8017aac:	4b1a      	ldr	r3, [pc, #104]	@ (8017b18 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	6a39      	ldr	r1, [r7, #32]
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7eb fc76 	bl	80033a4 <xQueueSemaphoreTake>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d019      	beq.n	8017af2 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8017ac2:	4912      	ldr	r1, [pc, #72]	@ (8017b0c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017ac4:	4815      	ldr	r0, [pc, #84]	@ (8017b1c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8017ac6:	f000 fcef 	bl	80184a8 <HAL_ETH_Transmit_IT>
 8017aca:	4603      	mov	r3, r0
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d102      	bne.n	8017ad6 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ad4:	e006      	b.n	8017ae4 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8017ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8017b10 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017ad8:	6818      	ldr	r0, [r3, #0]
 8017ada:	2300      	movs	r3, #0
 8017adc:	2200      	movs	r2, #0
 8017ade:	2100      	movs	r1, #0
 8017ae0:	f7eb faa8 	bl	8003034 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8017ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8017b18 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017ae6:	6818      	ldr	r0, [r3, #0]
 8017ae8:	2300      	movs	r3, #0
 8017aea:	2200      	movs	r2, #0
 8017aec:	2100      	movs	r1, #0
 8017aee:	f7eb faa1 	bl	8003034 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d002      	beq.n	8017afe <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8017af8:	68b8      	ldr	r0, [r7, #8]
 8017afa:	f7ff f825 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 8017afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3728      	adds	r7, #40	@ 0x28
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}
 8017b08:	08026c94 	.word	0x08026c94
 8017b0c:	20002328 	.word	0x20002328
 8017b10:	200022ac 	.word	0x200022ac
 8017b14:	08026d24 	.word	0x08026d24
 8017b18:	200022b0 	.word	0x200022b0
 8017b1c:	200022b4 	.word	0x200022b4

08017b20 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8017b24:	4a06      	ldr	r2, [pc, #24]	@ (8017b40 <prvMACBProbePhy+0x20>)
 8017b26:	4907      	ldr	r1, [pc, #28]	@ (8017b44 <prvMACBProbePhy+0x24>)
 8017b28:	4807      	ldr	r0, [pc, #28]	@ (8017b48 <prvMACBProbePhy+0x28>)
 8017b2a:	f7ff f8c5 	bl	8016cb8 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 8017b2e:	4806      	ldr	r0, [pc, #24]	@ (8017b48 <prvMACBProbePhy+0x28>)
 8017b30:	f7ff f8d8 	bl	8016ce4 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8017b34:	4905      	ldr	r1, [pc, #20]	@ (8017b4c <prvMACBProbePhy+0x2c>)
 8017b36:	4804      	ldr	r0, [pc, #16]	@ (8017b48 <prvMACBProbePhy+0x28>)
 8017b38:	f7ff f9d2 	bl	8016ee0 <xPhyConfigure>
}
 8017b3c:	bf00      	nop
 8017b3e:	bd80      	pop	{r7, pc}
 8017b40:	08017d41 	.word	0x08017d41
 8017b44:	08017d09 	.word	0x08017d09
 8017b48:	20002364 	.word	0x20002364
 8017b4c:	08027020 	.word	0x08027020

08017b50 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b09e      	sub	sp, #120	@ 0x78
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8017b60:	4b25      	ldr	r3, [pc, #148]	@ (8017bf8 <prvEthernetUpdateConfig+0xa8>)
 8017b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b64:	687a      	ldr	r2, [r7, #4]
 8017b66:	4619      	mov	r1, r3
 8017b68:	4824      	ldr	r0, [pc, #144]	@ (8017bfc <prvEthernetUpdateConfig+0xac>)
 8017b6a:	f009 fe95 	bl	8021898 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d103      	bne.n	8017b7c <prvEthernetUpdateConfig+0x2c>
 8017b74:	4b20      	ldr	r3, [pc, #128]	@ (8017bf8 <prvEthernetUpdateConfig+0xa8>)
 8017b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d035      	beq.n	8017be8 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8017b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8017bf8 <prvEthernetUpdateConfig+0xa8>)
 8017b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b80:	2201      	movs	r2, #1
 8017b82:	fa02 f303 	lsl.w	r3, r2, r3
 8017b86:	3b01      	subs	r3, #1
 8017b88:	4619      	mov	r1, r3
 8017b8a:	481b      	ldr	r0, [pc, #108]	@ (8017bf8 <prvEthernetUpdateConfig+0xa8>)
 8017b8c:	f7ff faae 	bl	80170ec <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8017b90:	4b19      	ldr	r3, [pc, #100]	@ (8017bf8 <prvEthernetUpdateConfig+0xa8>)
 8017b92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8017b96:	2b02      	cmp	r3, #2
 8017b98:	d103      	bne.n	8017ba2 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8017b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017ba0:	e001      	b.n	8017ba6 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8017ba6:	4b14      	ldr	r3, [pc, #80]	@ (8017bf8 <prvEthernetUpdateConfig+0xa8>)
 8017ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d102      	bne.n	8017bb6 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8017bb4:	e002      	b.n	8017bbc <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8017bb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017bba:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017bbc:	f107 030c 	add.w	r3, r7, #12
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	480f      	ldr	r0, [pc, #60]	@ (8017c00 <prvEthernetUpdateConfig+0xb0>)
 8017bc4:	f000 ffcc 	bl	8018b60 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8017bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017bca:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8017bcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017bce:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017bd0:	f107 030c 	add.w	r3, r7, #12
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	480a      	ldr	r0, [pc, #40]	@ (8017c00 <prvEthernetUpdateConfig+0xb0>)
 8017bd8:	f001 f996 	bl	8018f08 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8017bdc:	2301      	movs	r3, #1
 8017bde:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8017be0:	4807      	ldr	r0, [pc, #28]	@ (8017c00 <prvEthernetUpdateConfig+0xb0>)
 8017be2:	f000 fb64 	bl	80182ae <HAL_ETH_Start_IT>
 8017be6:	e003      	b.n	8017bf0 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017be8:	4805      	ldr	r0, [pc, #20]	@ (8017c00 <prvEthernetUpdateConfig+0xb0>)
 8017bea:	f000 fbe5 	bl	80183b8 <HAL_ETH_Stop_IT>
    }
}
 8017bee:	bf00      	nop
 8017bf0:	bf00      	nop
 8017bf2:	3778      	adds	r7, #120	@ 0x78
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	bd80      	pop	{r7, pc}
 8017bf8:	20002364 	.word	0x20002364
 8017bfc:	08026d5c 	.word	0x08026d5c
 8017c00:	200022b4 	.word	0x200022b4

08017c04 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b08c      	sub	sp, #48	@ 0x30
 8017c08:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8017c12:	f107 0308 	add.w	r3, r7, #8
 8017c16:	4619      	mov	r1, r3
 8017c18:	4838      	ldr	r0, [pc, #224]	@ (8017cfc <prvNetworkInterfaceInput+0xf8>)
 8017c1a:	f000 fd19 	bl	8018650 <HAL_ETH_GetRxData>
 8017c1e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8017c20:	69fb      	ldr	r3, [r7, #28]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d101      	bne.n	8017c2a <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8017c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c28:	e064      	b.n	8017cf4 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8017c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c2c:	3301      	adds	r3, #1
 8017c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8017c30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8017c34:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8017c36:	68bb      	ldr	r3, [r7, #8]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d004      	beq.n	8017c46 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7f2 f8ab 	bl	8009d9a <pxPacketBuffer_to_NetworkBuffer>
 8017c44:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8017c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d102      	bne.n	8017c52 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8017c4c:	482c      	ldr	r0, [pc, #176]	@ (8017d00 <prvNetworkInterfaceInput+0xfc>)
 8017c4e:	f009 fe23 	bl	8021898 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8017c52:	2100      	movs	r1, #0
 8017c54:	69b8      	ldr	r0, [r7, #24]
 8017c56:	f7fe ff0f 	bl	8016a78 <pxGetNetworkBufferWithDescriptor>
 8017c5a:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8017c5c:	697b      	ldr	r3, [r7, #20]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d102      	bne.n	8017c68 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8017c62:	2300      	movs	r3, #0
 8017c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c66:	e005      	b.n	8017c74 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8017c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d002      	beq.n	8017c74 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8017c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c70:	69fa      	ldr	r2, [r7, #28]
 8017c72:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8017c74:	2300      	movs	r3, #0
 8017c76:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d002      	beq.n	8017c84 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8017c7e:	697b      	ldr	r3, [r7, #20]
 8017c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c82:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8017c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017c86:	481d      	ldr	r0, [pc, #116]	@ (8017cfc <prvNetworkInterfaceInput+0xf8>)
 8017c88:	f000 fd2a 	bl	80186e0 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8017c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d0bd      	beq.n	8017c0e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8017c92:	2300      	movs	r3, #0
 8017c94:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8017c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7f1 f9e4 	bl	8009068 <eConsiderFrameForProcessing>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b01      	cmp	r3, #1
 8017ca4:	d002      	beq.n	8017cac <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	623b      	str	r3, [r7, #32]
 8017caa:	e01c      	b.n	8017ce6 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8017cac:	2301      	movs	r3, #1
 8017cae:	703b      	strb	r3, [r7, #0]
 8017cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cb2:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8017cb4:	4b13      	ldr	r3, [pc, #76]	@ (8017d04 <prvNetworkInterfaceInput+0x100>)
 8017cb6:	681a      	ldr	r2, [r3, #0]
 8017cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cba:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8017cbc:	4b11      	ldr	r3, [pc, #68]	@ (8017d04 <prvNetworkInterfaceInput+0x100>)
 8017cbe:	681a      	ldr	r2, [r3, #0]
 8017cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	4610      	mov	r0, r2
 8017cc8:	f7f5 fb96 	bl	800d3f8 <FreeRTOS_MatchingEndpoint>
 8017ccc:	4602      	mov	r2, r0
 8017cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cd0:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8017cd2:	463b      	mov	r3, r7
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7f1 f972 	bl	8008fc0 <xSendEventStructToIPTask>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d101      	bne.n	8017ce6 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8017ce2:	2301      	movs	r3, #1
 8017ce4:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8017ce6:	6a3b      	ldr	r3, [r7, #32]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d090      	beq.n	8017c0e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8017cec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017cee:	f7fe ff2b 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
    {
 8017cf2:	e78c      	b.n	8017c0e <prvNetworkInterfaceInput+0xa>
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	3730      	adds	r7, #48	@ 0x30
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}
 8017cfc:	200022b4 	.word	0x200022b4
 8017d00:	08026d90 	.word	0x08026d90
 8017d04:	2000235c 	.word	0x2000235c

08017d08 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b086      	sub	sp, #24
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017d14:	f04f 33ff 	mov.w	r3, #4294967295
 8017d18:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	68ba      	ldr	r2, [r7, #8]
 8017d1e:	68f9      	ldr	r1, [r7, #12]
 8017d20:	4806      	ldr	r0, [pc, #24]	@ (8017d3c <ETH_PHY_IO_ReadReg+0x34>)
 8017d22:	f000 fe75 	bl	8018a10 <HAL_ETH_ReadPHYRegister>
 8017d26:	4603      	mov	r3, r0
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d101      	bne.n	8017d30 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017d30:	697b      	ldr	r3, [r7, #20]
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	3718      	adds	r7, #24
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	200022b4 	.word	0x200022b4

08017d40 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b086      	sub	sp, #24
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d50:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	68ba      	ldr	r2, [r7, #8]
 8017d56:	68f9      	ldr	r1, [r7, #12]
 8017d58:	4806      	ldr	r0, [pc, #24]	@ (8017d74 <ETH_PHY_IO_WriteReg+0x34>)
 8017d5a:	f000 fead 	bl	8018ab8 <HAL_ETH_WritePHYRegister>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d101      	bne.n	8017d68 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8017d64:	2300      	movs	r3, #0
 8017d66:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017d68:	697b      	ldr	r3, [r7, #20]
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	3718      	adds	r7, #24
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}
 8017d72:	bf00      	nop
 8017d74:	200022b4 	.word	0x200022b4

08017d78 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8017d7c:	4802      	ldr	r0, [pc, #8]	@ (8017d88 <ETH_IRQHandler+0x10>)
 8017d7e:	f000 fd27 	bl	80187d0 <HAL_ETH_IRQHandler>
}
 8017d82:	bf00      	nop
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	200022b4 	.word	0x200022b4

08017d8c <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017d94:	2300      	movs	r3, #0
 8017d96:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8017d98:	4b10      	ldr	r3, [pc, #64]	@ (8017ddc <prvSetFlagsAndNotify+0x50>)
 8017d9a:	681a      	ldr	r2, [r3, #0]
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	4313      	orrs	r3, r2
 8017da0:	4a0e      	ldr	r2, [pc, #56]	@ (8017ddc <prvSetFlagsAndNotify+0x50>)
 8017da2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8017da4:	4b0e      	ldr	r3, [pc, #56]	@ (8017de0 <prvSetFlagsAndNotify+0x54>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d012      	beq.n	8017dd2 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8017dac:	4b0c      	ldr	r3, [pc, #48]	@ (8017de0 <prvSetFlagsAndNotify+0x54>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	f107 020c 	add.w	r2, r7, #12
 8017db4:	2100      	movs	r1, #0
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7ed fbd4 	bl	8005564 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d007      	beq.n	8017dd2 <prvSetFlagsAndNotify+0x46>
 8017dc2:	4b08      	ldr	r3, [pc, #32]	@ (8017de4 <prvSetFlagsAndNotify+0x58>)
 8017dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017dc8:	601a      	str	r2, [r3, #0]
 8017dca:	f3bf 8f4f 	dsb	sy
 8017dce:	f3bf 8f6f 	isb	sy
    }
}
 8017dd2:	bf00      	nop
 8017dd4:	3710      	adds	r7, #16
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}
 8017dda:	bf00      	nop
 8017ddc:	200022a4 	.word	0x200022a4
 8017de0:	20002360 	.word	0x20002360
 8017de4:	e000ed04 	.word	0xe000ed04

08017de8 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b082      	sub	sp, #8
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8017df0:	2002      	movs	r0, #2
 8017df2:	f7ff ffcb 	bl	8017d8c <prvSetFlagsAndNotify>
}
 8017df6:	bf00      	nop
 8017df8:	3708      	adds	r7, #8
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bd80      	pop	{r7, pc}

08017dfe <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017dfe:	b580      	push	{r7, lr}
 8017e00:	b082      	sub	sp, #8
 8017e02:	af00      	add	r7, sp, #0
 8017e04:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8017e06:	2001      	movs	r0, #1
 8017e08:	f7ff ffc0 	bl	8017d8c <prvSetFlagsAndNotify>
}
 8017e0c:	bf00      	nop
 8017e0e:	3708      	adds	r7, #8
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}

08017e14 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b082      	sub	sp, #8
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8017e1c:	2004      	movs	r0, #4
 8017e1e:	f7ff ffb5 	bl	8017d8c <prvSetFlagsAndNotify>
}
 8017e22:	bf00      	nop
 8017e24:	3708      	adds	r7, #8
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}
	...

08017e2c <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b085      	sub	sp, #20
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8017e34:	4b15      	ldr	r3, [pc, #84]	@ (8017e8c <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8017e36:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017e38:	2300      	movs	r3, #0
 8017e3a:	60bb      	str	r3, [r7, #8]
 8017e3c:	e01c      	b.n	8017e78 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8017e3e:	68ba      	ldr	r2, [r7, #8]
 8017e40:	4613      	mov	r3, r2
 8017e42:	00db      	lsls	r3, r3, #3
 8017e44:	1a9b      	subs	r3, r3, r2
 8017e46:	00db      	lsls	r3, r3, #3
 8017e48:	461a      	mov	r2, r3
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	4413      	add	r3, r2
 8017e4e:	68fa      	ldr	r2, [r7, #12]
 8017e50:	320a      	adds	r2, #10
 8017e52:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8017e54:	68ba      	ldr	r2, [r7, #8]
 8017e56:	4613      	mov	r3, r2
 8017e58:	00db      	lsls	r3, r3, #3
 8017e5a:	1a9b      	subs	r3, r3, r2
 8017e5c:	00db      	lsls	r3, r3, #3
 8017e5e:	461a      	mov	r2, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	4413      	add	r3, r2
 8017e64:	461a      	mov	r2, r3
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8017e70:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017e72:	68bb      	ldr	r3, [r7, #8]
 8017e74:	3301      	adds	r3, #1
 8017e76:	60bb      	str	r3, [r7, #8]
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8017e7c:	d9df      	bls.n	8017e3e <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8017e7e:	bf00      	nop
 8017e80:	bf00      	nop
 8017e82:	3714      	adds	r7, #20
 8017e84:	46bd      	mov	sp, r7
 8017e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8a:	4770      	bx	lr
 8017e8c:	240400c0 	.word	0x240400c0

08017e90 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8017e9a:	f7ed fe19 	bl	8005ad0 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681a      	ldr	r2, [r3, #0]
 8017ea2:	683b      	ldr	r3, [r7, #0]
 8017ea4:	43db      	mvns	r3, r3
 8017ea6:	401a      	ands	r2, r3
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8017eac:	f7ed fe3c 	bl	8005b28 <vPortExitCritical>
}
 8017eb0:	bf00      	nop
 8017eb2:	3708      	adds	r7, #8
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}

08017eb8 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8017eb8:	b480      	push	{r7}
 8017eba:	b087      	sub	sp, #28
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	3330      	adds	r3, #48	@ 0x30
 8017ec8:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017eca:	2300      	movs	r3, #0
 8017ecc:	617b      	str	r3, [r7, #20]
 8017ece:	e00e      	b.n	8017eee <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	697a      	ldr	r2, [r7, #20]
 8017ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8017ed8:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	68db      	ldr	r3, [r3, #12]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	da02      	bge.n	8017ee8 <uxGetOwnCount+0x30>
            {
                xCount++;
 8017ee2:	693b      	ldr	r3, [r7, #16]
 8017ee4:	3301      	adds	r3, #1
 8017ee6:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017ee8:	697b      	ldr	r3, [r7, #20]
 8017eea:	3301      	adds	r3, #1
 8017eec:	617b      	str	r3, [r7, #20]
 8017eee:	697b      	ldr	r3, [r7, #20]
 8017ef0:	2b03      	cmp	r3, #3
 8017ef2:	d9ed      	bls.n	8017ed0 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8017ef4:	693b      	ldr	r3, [r7, #16]
    }
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	371c      	adds	r7, #28
 8017efa:	46bd      	mov	sp, r7
 8017efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f00:	4770      	bx	lr
	...

08017f04 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b088      	sub	sp, #32
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8017f0c:	2364      	movs	r3, #100	@ 0x64
 8017f0e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8017f10:	2300      	movs	r3, #0
 8017f12:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8017f14:	2304      	movs	r3, #4
 8017f16:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8017f1c:	f7f2 f8d6 	bl	800a0cc <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8017f20:	4b43      	ldr	r3, [pc, #268]	@ (8018030 <prvEMACHandlerTask+0x12c>)
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7eb fb2b 	bl	8003580 <uxQueueMessagesWaiting>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	f1c3 0304 	rsb	r3, r3, #4
 8017f30:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8017f32:	69fa      	ldr	r2, [r7, #28]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d206      	bcs.n	8017f48 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8017f3e:	2204      	movs	r2, #4
 8017f40:	69f9      	ldr	r1, [r7, #28]
 8017f42:	483c      	ldr	r0, [pc, #240]	@ (8018034 <prvEMACHandlerTask+0x130>)
 8017f44:	f009 fca8 	bl	8021898 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8017f48:	483b      	ldr	r0, [pc, #236]	@ (8018038 <prvEMACHandlerTask+0x134>)
 8017f4a:	f7ff ffb5 	bl	8017eb8 <uxGetOwnCount>
 8017f4e:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8017f50:	69ba      	ldr	r2, [r7, #24]
 8017f52:	68bb      	ldr	r3, [r7, #8]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d906      	bls.n	8017f66 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8017f5c:	2204      	movs	r2, #4
 8017f5e:	69b9      	ldr	r1, [r7, #24]
 8017f60:	4836      	ldr	r0, [pc, #216]	@ (801803c <prvEMACHandlerTask+0x138>)
 8017f62:	f009 fc99 	bl	8021898 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8017f66:	693a      	ldr	r2, [r7, #16]
 8017f68:	2100      	movs	r1, #0
 8017f6a:	2000      	movs	r0, #0
 8017f6c:	f7ec ff8a 	bl	8004e84 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8017f70:	4b33      	ldr	r3, [pc, #204]	@ (8018040 <prvEMACHandlerTask+0x13c>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	f003 0301 	and.w	r3, r3, #1
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d006      	beq.n	8017f8a <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8017f7c:	2101      	movs	r1, #1
 8017f7e:	4830      	ldr	r0, [pc, #192]	@ (8018040 <prvEMACHandlerTask+0x13c>)
 8017f80:	f7ff ff86 	bl	8017e90 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8017f84:	f7ff fe3e 	bl	8017c04 <prvNetworkInterfaceInput>
 8017f88:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8017f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8018040 <prvEMACHandlerTask+0x13c>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f003 0302 	and.w	r3, r3, #2
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d017      	beq.n	8017fc6 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8017f96:	2102      	movs	r1, #2
 8017f98:	4829      	ldr	r0, [pc, #164]	@ (8018040 <prvEMACHandlerTask+0x13c>)
 8017f9a:	f7ff ff79 	bl	8017e90 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8017f9e:	4b29      	ldr	r3, [pc, #164]	@ (8018044 <prvEMACHandlerTask+0x140>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7eb f9fc 	bl	80033a4 <xQueueSemaphoreTake>
 8017fac:	4603      	mov	r3, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d009      	beq.n	8017fc6 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8017fb2:	4821      	ldr	r0, [pc, #132]	@ (8018038 <prvEMACHandlerTask+0x134>)
 8017fb4:	f001 fb04 	bl	80195c0 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8017fb8:	4b22      	ldr	r3, [pc, #136]	@ (8018044 <prvEMACHandlerTask+0x140>)
 8017fba:	6818      	ldr	r0, [r3, #0]
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	2100      	movs	r1, #0
 8017fc2:	f7eb f837 	bl	8003034 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8017fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8018040 <prvEMACHandlerTask+0x13c>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f003 0304 	and.w	r3, r3, #4
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d00f      	beq.n	8017ff2 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8017fd2:	2104      	movs	r1, #4
 8017fd4:	481a      	ldr	r0, [pc, #104]	@ (8018040 <prvEMACHandlerTask+0x13c>)
 8017fd6:	f7ff ff5b 	bl	8017e90 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8017fda:	4b17      	ldr	r3, [pc, #92]	@ (8018038 <prvEMACHandlerTask+0x134>)
 8017fdc:	2210      	movs	r2, #16
 8017fde:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8017fe0:	4815      	ldr	r0, [pc, #84]	@ (8018038 <prvEMACHandlerTask+0x134>)
 8017fe2:	f000 f964 	bl	80182ae <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8017fe6:	f7ff fe0d 	bl	8017c04 <prvNetworkInterfaceInput>
 8017fea:	4602      	mov	r2, r0
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	4413      	add	r3, r2
 8017ff0:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8017ff2:	6979      	ldr	r1, [r7, #20]
 8017ff4:	4814      	ldr	r0, [pc, #80]	@ (8018048 <prvEMACHandlerTask+0x144>)
 8017ff6:	f7ff fa25 	bl	8017444 <xPhyCheckLinkStatus>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d08b      	beq.n	8017f18 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018000:	4b12      	ldr	r3, [pc, #72]	@ (801804c <prvEMACHandlerTask+0x148>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	4618      	mov	r0, r3
 8018006:	f7ff fccf 	bl	80179a8 <xSTM32H_GetPhyLinkStatus>
 801800a:	4603      	mov	r3, r0
 801800c:	2b00      	cmp	r3, #0
 801800e:	d10b      	bne.n	8018028 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018010:	4809      	ldr	r0, [pc, #36]	@ (8018038 <prvEMACHandlerTask+0x134>)
 8018012:	f000 f9d1 	bl	80183b8 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018016:	2260      	movs	r2, #96	@ 0x60
 8018018:	2100      	movs	r1, #0
 801801a:	480d      	ldr	r0, [pc, #52]	@ (8018050 <prvEMACHandlerTask+0x14c>)
 801801c:	f009 ff65 	bl	8021eea <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018020:	4805      	ldr	r0, [pc, #20]	@ (8018038 <prvEMACHandlerTask+0x134>)
 8018022:	f001 facd 	bl	80195c0 <ETH_Clear_Tx_Descriptors>
 8018026:	e777      	b.n	8017f18 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018028:	2000      	movs	r0, #0
 801802a:	f7ff fd91 	bl	8017b50 <prvEthernetUpdateConfig>
    {
 801802e:	e773      	b.n	8017f18 <prvEMACHandlerTask+0x14>
 8018030:	200022ac 	.word	0x200022ac
 8018034:	08026db4 	.word	0x08026db4
 8018038:	200022b4 	.word	0x200022b4
 801803c:	08026dcc 	.word	0x08026dcc
 8018040:	200022a4 	.word	0x200022a4
 8018044:	200022b0 	.word	0x200022b0
 8018048:	20002364 	.word	0x20002364
 801804c:	2000235c 	.word	0x2000235c
 8018050:	24040060 	.word	0x24040060

08018054 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018054:	b480      	push	{r7}
 8018056:	b083      	sub	sp, #12
 8018058:	af00      	add	r7, sp, #0
 801805a:	6078      	str	r0, [r7, #4]
 801805c:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	683a      	ldr	r2, [r7, #0]
 8018062:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018064:	bf00      	nop
 8018066:	370c      	adds	r7, #12
 8018068:	46bd      	mov	sp, r7
 801806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806e:	4770      	bx	lr

08018070 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018070:	b580      	push	{r7, lr}
 8018072:	b084      	sub	sp, #16
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d101      	bne.n	8018082 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 801807e:	2301      	movs	r3, #1
 8018080:	e0d4      	b.n	801822c <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018086:	2b00      	cmp	r3, #0
 8018088:	d102      	bne.n	8018090 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f7e9 fd1a 	bl	8001ac4 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2223      	movs	r2, #35	@ 0x23
 8018094:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018096:	4b67      	ldr	r3, [pc, #412]	@ (8018234 <HAL_ETH_Init+0x1c4>)
 8018098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801809c:	4a65      	ldr	r2, [pc, #404]	@ (8018234 <HAL_ETH_Init+0x1c4>)
 801809e:	f043 0302 	orr.w	r3, r3, #2
 80180a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80180a6:	4b63      	ldr	r3, [pc, #396]	@ (8018234 <HAL_ETH_Init+0x1c4>)
 80180a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80180ac:	f003 0302 	and.w	r3, r3, #2
 80180b0:	60bb      	str	r3, [r7, #8]
 80180b2:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	7a1b      	ldrb	r3, [r3, #8]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d103      	bne.n	80180c4 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 80180bc:	2000      	movs	r0, #0
 80180be:	f001 fc17 	bl	80198f0 <HAL_SYSCFG_ETHInterfaceSelect>
 80180c2:	e003      	b.n	80180cc <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 80180c4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80180c8:	f001 fc12 	bl	80198f0 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	6812      	ldr	r2, [r2, #0]
 80180da:	f043 0301 	orr.w	r3, r3, #1
 80180de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80180e2:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 80180e4:	f001 fbc8 	bl	8019878 <HAL_GetTick>
 80180e8:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80180ea:	e010      	b.n	801810e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 80180ec:	f001 fbc4 	bl	8019878 <HAL_GetTick>
 80180f0:	4602      	mov	r2, r0
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	1ad3      	subs	r3, r2, r3
 80180f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80180fa:	d908      	bls.n	801810e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2204      	movs	r2, #4
 8018100:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018102:	21e0      	movs	r1, #224	@ 0xe0
 8018104:	6878      	ldr	r0, [r7, #4]
 8018106:	f7ff ffa5 	bl	8018054 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 801810a:	2301      	movs	r3, #1
 801810c:	e08e      	b.n	801822c <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	f003 0301 	and.w	r3, r3, #1
 801811c:	2b00      	cmp	r3, #0
 801811e:	d1e5      	bne.n	80180ec <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f001 f94b 	bl	80193bc <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8018126:	f004 ff49 	bl	801cfbc <HAL_RCC_GetHCLKFreq>
 801812a:	4603      	mov	r3, r0
 801812c:	4a42      	ldr	r2, [pc, #264]	@ (8018238 <HAL_ETH_Init+0x1c8>)
 801812e:	fba2 2303 	umull	r2, r3, r2, r3
 8018132:	0c9a      	lsrs	r2, r3, #18
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	3a01      	subs	r2, #1
 801813a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f001 f89e 	bl	8019280 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801814c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8018150:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8018154:	687a      	ldr	r2, [r7, #4]
 8018156:	6812      	ldr	r2, [r2, #0]
 8018158:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801815c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018160:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	695b      	ldr	r3, [r3, #20]
 8018168:	f003 0303 	and.w	r3, r3, #3
 801816c:	2b00      	cmp	r3, #0
 801816e:	d008      	beq.n	8018182 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	2201      	movs	r2, #1
 8018174:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018176:	21e0      	movs	r1, #224	@ 0xe0
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	f7ff ff6b 	bl	8018054 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801817e:	2301      	movs	r3, #1
 8018180:	e054      	b.n	801822c <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801818a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801818e:	4b2b      	ldr	r3, [pc, #172]	@ (801823c <HAL_ETH_Init+0x1cc>)
 8018190:	4013      	ands	r3, r2
 8018192:	687a      	ldr	r2, [r7, #4]
 8018194:	6952      	ldr	r2, [r2, #20]
 8018196:	0051      	lsls	r1, r2, #1
 8018198:	687a      	ldr	r2, [r7, #4]
 801819a:	6812      	ldr	r2, [r2, #0]
 801819c:	430b      	orrs	r3, r1
 801819e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181a2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80181a6:	6878      	ldr	r0, [r7, #4]
 80181a8:	f001 f960 	bl	801946c <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80181ac:	6878      	ldr	r0, [r7, #4]
 80181ae:	f001 f9a9 	bl	8019504 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	3305      	adds	r3, #5
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	021a      	lsls	r2, r3, #8
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	3304      	adds	r3, #4
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	4619      	mov	r1, r3
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	430a      	orrs	r2, r1
 80181cc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	685b      	ldr	r3, [r3, #4]
 80181d4:	3303      	adds	r3, #3
 80181d6:	781b      	ldrb	r3, [r3, #0]
 80181d8:	061a      	lsls	r2, r3, #24
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	3302      	adds	r3, #2
 80181e0:	781b      	ldrb	r3, [r3, #0]
 80181e2:	041b      	lsls	r3, r3, #16
 80181e4:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	685b      	ldr	r3, [r3, #4]
 80181ea:	3301      	adds	r3, #1
 80181ec:	781b      	ldrb	r3, [r3, #0]
 80181ee:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80181f0:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	781b      	ldrb	r3, [r3, #0]
 80181f8:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80181fe:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018200:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2200      	movs	r2, #0
 8018208:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	2210      	movs	r2, #16
 801820e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2210      	movs	r2, #16
 8018214:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	4a09      	ldr	r2, [pc, #36]	@ (8018240 <HAL_ETH_Init+0x1d0>)
 801821c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4a07      	ldr	r2, [pc, #28]	@ (8018244 <HAL_ETH_Init+0x1d4>)
 8018226:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 801822a:	2300      	movs	r3, #0
        }
 801822c:	4618      	mov	r0, r3
 801822e:	3710      	adds	r7, #16
 8018230:	46bd      	mov	sp, r7
 8018232:	bd80      	pop	{r7, pc}
 8018234:	58024400 	.word	0x58024400
 8018238:	431bde83 	.word	0x431bde83
 801823c:	ffff8001 	.word	0xffff8001
 8018240:	0c020060 	.word	0x0c020060
 8018244:	0c20c000 	.word	0x0c20c000

08018248 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8018248:	b480      	push	{r7}
 801824a:	b087      	sub	sp, #28
 801824c:	af00      	add	r7, sp, #0
 801824e:	60f8      	str	r0, [r7, #12]
 8018250:	60b9      	str	r1, [r7, #8]
 8018252:	607a      	str	r2, [r7, #4]
 8018254:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	68ba      	ldr	r2, [r7, #8]
 801825a:	320c      	adds	r2, #12
 801825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018260:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d002      	beq.n	801826e <HAL_ETH_DescAssignMemory+0x26>
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	2b03      	cmp	r3, #3
 801826c:	d904      	bls.n	8018278 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	2201      	movs	r2, #1
 8018272:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8018274:	2301      	movs	r3, #1
 8018276:	e014      	b.n	80182a2 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8018278:	687a      	ldr	r2, [r7, #4]
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018284:	697b      	ldr	r3, [r7, #20]
 8018286:	68db      	ldr	r3, [r3, #12]
 8018288:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8018290:	697b      	ldr	r3, [r7, #20]
 8018292:	68db      	ldr	r3, [r3, #12]
 8018294:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8018298:	697b      	ldr	r3, [r7, #20]
 801829a:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 80182a0:	2300      	movs	r3, #0
        }
 80182a2:	4618      	mov	r0, r3
 80182a4:	371c      	adds	r7, #28
 80182a6:	46bd      	mov	sp, r7
 80182a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ac:	4770      	bx	lr

080182ae <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 80182ae:	b480      	push	{r7}
 80182b0:	b085      	sub	sp, #20
 80182b2:	af00      	add	r7, sp, #0
 80182b4:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80182ba:	2b10      	cmp	r3, #16
 80182bc:	d175      	bne.n	80183aa <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2223      	movs	r2, #35	@ 0x23
 80182c2:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80182c4:	2300      	movs	r3, #0
 80182c6:	60fb      	str	r3, [r7, #12]
 80182c8:	e00e      	b.n	80182e8 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	68fa      	ldr	r2, [r7, #12]
 80182ce:	320c      	adds	r2, #12
 80182d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182d4:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	68db      	ldr	r3, [r3, #12]
 80182da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80182de:	68bb      	ldr	r3, [r7, #8]
 80182e0:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	3301      	adds	r3, #1
 80182e6:	60fb      	str	r3, [r7, #12]
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	2b03      	cmp	r3, #3
 80182ec:	d9ed      	bls.n	80182ca <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	2201      	movs	r2, #1
 80182f2:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	681a      	ldr	r2, [r3, #0]
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	f042 0202 	orr.w	r2, r2, #2
 8018302:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	f042 0201 	orr.w	r2, r2, #1
 8018312:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	f042 0201 	orr.w	r2, r2, #1
 8018324:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018330:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	6812      	ldr	r2, [r2, #0]
 8018338:	f043 0301 	orr.w	r3, r3, #1
 801833c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018340:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801834c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	6812      	ldr	r2, [r2, #0]
 8018354:	f043 0301 	orr.w	r3, r3, #1
 8018358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801835c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018368:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801836c:	687a      	ldr	r2, [r7, #4]
 801836e:	6812      	ldr	r2, [r2, #0]
 8018370:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8018374:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018378:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018384:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681a      	ldr	r2, [r3, #0]
 801838c:	f24d 0341 	movw	r3, #53313	@ 0xd041
 8018390:	430b      	orrs	r3, r1
 8018392:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018396:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2210      	movs	r2, #16
 801839e:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2222      	movs	r2, #34	@ 0x22
 80183a4:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 80183a6:	2300      	movs	r3, #0
 80183a8:	e000      	b.n	80183ac <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 80183aa:	2301      	movs	r3, #1
            }
        }
 80183ac:	4618      	mov	r0, r3
 80183ae:	3714      	adds	r7, #20
 80183b0:	46bd      	mov	sp, r7
 80183b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b6:	4770      	bx	lr

080183b8 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 80183b8:	b480      	push	{r7}
 80183ba:	b085      	sub	sp, #20
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d066      	beq.n	8018496 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2223      	movs	r2, #35	@ 0x23
 80183cc:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80183d6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	4b31      	ldr	r3, [pc, #196]	@ (80184a4 <HAL_ETH_Stop_IT+0xec>)
 80183e0:	400b      	ands	r3, r1
 80183e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80183e6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80183f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80183f6:	687a      	ldr	r2, [r7, #4]
 80183f8:	6812      	ldr	r2, [r2, #0]
 80183fa:	f023 0301 	bic.w	r3, r3, #1
 80183fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018402:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801840e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018412:	687a      	ldr	r2, [r7, #4]
 8018414:	6812      	ldr	r2, [r2, #0]
 8018416:	f023 0301 	bic.w	r3, r3, #1
 801841a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801841e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	681a      	ldr	r2, [r3, #0]
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	f022 0201 	bic.w	r2, r2, #1
 8018430:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f042 0201 	orr.w	r2, r2, #1
 8018442:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	681a      	ldr	r2, [r3, #0]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	f022 0202 	bic.w	r2, r2, #2
 8018454:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018456:	2300      	movs	r3, #0
 8018458:	60fb      	str	r3, [r7, #12]
 801845a:	e00e      	b.n	801847a <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	68fa      	ldr	r2, [r7, #12]
 8018460:	320c      	adds	r2, #12
 8018462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018466:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	68db      	ldr	r3, [r3, #12]
 801846c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	3301      	adds	r3, #1
 8018478:	60fb      	str	r3, [r7, #12]
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	2b03      	cmp	r3, #3
 801847e:	d9ed      	bls.n	801845c <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2200      	movs	r2, #0
 8018484:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2210      	movs	r2, #16
 801848a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2210      	movs	r2, #16
 8018490:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 8018492:	2300      	movs	r3, #0
 8018494:	e000      	b.n	8018498 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8018496:	2301      	movs	r3, #1
            }
        }
 8018498:	4618      	mov	r0, r3
 801849a:	3714      	adds	r7, #20
 801849c:	46bd      	mov	sp, r7
 801849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a2:	4770      	bx	lr
 80184a4:	ffff2fbe 	.word	0xffff2fbe

080184a8 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b082      	sub	sp, #8
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
 80184b0:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 80184b2:	683b      	ldr	r3, [r7, #0]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d107      	bne.n	80184c8 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80184bc:	f043 0201 	orr.w	r2, r3, #1
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 80184c4:	2301      	movs	r3, #1
 80184c6:	e039      	b.n	801853c <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184cc:	2b10      	cmp	r3, #16
 80184ce:	d134      	bne.n	801853a <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 80184d0:	2201      	movs	r2, #1
 80184d2:	6839      	ldr	r1, [r7, #0]
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f001 f8c1 	bl	801965c <ETH_Prepare_Tx_Descriptors>
 80184da:	4603      	mov	r3, r0
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d007      	beq.n	80184f0 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80184e4:	f043 0202 	orr.w	r2, r3, #2
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 80184ec:	2301      	movs	r3, #1
 80184ee:	e025      	b.n	801853c <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184f4:	1c5a      	adds	r2, r3, #1
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184fe:	2b03      	cmp	r3, #3
 8018500:	d904      	bls.n	801850c <HAL_ETH_Transmit_IT+0x64>
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018506:	1f1a      	subs	r2, r3, #4
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681a      	ldr	r2, [r3, #0]
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	3106      	adds	r1, #6
 8018518:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801851c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018520:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8018524:	f3bf 8f4f 	dsb	sy
}
 8018528:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018532:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8018536:	2300      	movs	r3, #0
 8018538:	e000      	b.n	801853c <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 801853a:	2301      	movs	r3, #1
            }
        }
 801853c:	4618      	mov	r0, r3
 801853e:	3708      	adds	r7, #8
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}

08018544 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8018544:	b580      	push	{r7, lr}
 8018546:	b08a      	sub	sp, #40	@ 0x28
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	3330      	adds	r3, #48	@ 0x30
 8018550:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8018552:	69bb      	ldr	r3, [r7, #24]
 8018554:	691b      	ldr	r3, [r3, #16]
 8018556:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801855c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018560:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 8018562:	2300      	movs	r3, #0
 8018564:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8018566:	2300      	movs	r3, #0
 8018568:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 801856a:	2300      	movs	r3, #0
 801856c:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801856e:	e055      	b.n	801861c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8018570:	697b      	ldr	r3, [r7, #20]
 8018572:	68db      	ldr	r3, [r3, #12]
 8018574:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8018576:	6a3b      	ldr	r3, [r7, #32]
 8018578:	3301      	adds	r3, #1
 801857a:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018582:	2b00      	cmp	r3, #0
 8018584:	d006      	beq.n	8018594 <HAL_ETH_IsRxDataAvailable+0x50>
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801858c:	2b00      	cmp	r3, #0
 801858e:	d001      	beq.n	8018594 <HAL_ETH_IsRxDataAvailable+0x50>
 8018590:	2301      	movs	r3, #1
 8018592:	e000      	b.n	8018596 <HAL_ETH_IsRxDataAvailable+0x52>
 8018594:	2300      	movs	r3, #0
 8018596:	2b00      	cmp	r3, #0
 8018598:	d104      	bne.n	80185a4 <HAL_ETH_IsRxDataAvailable+0x60>
 801859a:	f240 4195 	movw	r1, #1173	@ 0x495
 801859e:	482b      	ldr	r0, [pc, #172]	@ (801864c <HAL_ETH_IsRxDataAvailable+0x108>)
 80185a0:	f7e9 f85a 	bl	8001658 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d036      	beq.n	801861c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 80185ae:	693b      	ldr	r3, [r7, #16]
 80185b0:	3301      	adds	r3, #1
 80185b2:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 80185b4:	693b      	ldr	r3, [r7, #16]
 80185b6:	2b01      	cmp	r3, #1
 80185b8:	d101      	bne.n	80185be <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 80185ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185bc:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 80185be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185c0:	3301      	adds	r3, #1
 80185c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80185c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185c6:	2b03      	cmp	r3, #3
 80185c8:	d902      	bls.n	80185d0 <HAL_ETH_IsRxDataAvailable+0x8c>
 80185ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185cc:	3b04      	subs	r3, #4
 80185ce:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80185d0:	69bb      	ldr	r3, [r7, #24]
 80185d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80185d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185d8:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 80185da:	697b      	ldr	r3, [r7, #20]
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	db11      	blt.n	8018606 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 80185e2:	697b      	ldr	r3, [r7, #20]
 80185e4:	68db      	ldr	r3, [r3, #12]
 80185e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d00b      	beq.n	8018606 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 80185ee:	69bb      	ldr	r3, [r7, #24]
 80185f0:	2201      	movs	r2, #1
 80185f2:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 80185f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f6:	3301      	adds	r3, #1
 80185f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80185fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185fc:	2b03      	cmp	r3, #3
 80185fe:	d902      	bls.n	8018606 <HAL_ETH_IsRxDataAvailable+0xc2>
 8018600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018602:	3b04      	subs	r3, #4
 8018604:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8018606:	69bb      	ldr	r3, [r7, #24]
 8018608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801860a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 801860c:	69bb      	ldr	r3, [r7, #24]
 801860e:	69fa      	ldr	r2, [r7, #28]
 8018610:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8018612:	69bb      	ldr	r3, [r7, #24]
 8018614:	693a      	ldr	r2, [r7, #16]
 8018616:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8018618:	2301      	movs	r3, #1
 801861a:	e012      	b.n	8018642 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	68db      	ldr	r3, [r3, #12]
 8018620:	2b00      	cmp	r3, #0
 8018622:	db02      	blt.n	801862a <HAL_ETH_IsRxDataAvailable+0xe6>
 8018624:	6a3b      	ldr	r3, [r7, #32]
 8018626:	2b03      	cmp	r3, #3
 8018628:	d9a2      	bls.n	8018570 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d004      	beq.n	801863a <HAL_ETH_IsRxDataAvailable+0xf6>
 8018630:	f240 41db 	movw	r1, #1243	@ 0x4db
 8018634:	4805      	ldr	r0, [pc, #20]	@ (801864c <HAL_ETH_IsRxDataAvailable+0x108>)
 8018636:	f7e9 f80f 	bl	8001658 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 801863a:	69bb      	ldr	r3, [r7, #24]
 801863c:	2200      	movs	r2, #0
 801863e:	619a      	str	r2, [r3, #24]

            return 0;
 8018640:	2300      	movs	r3, #0
        }
 8018642:	4618      	mov	r0, r3
 8018644:	3728      	adds	r7, #40	@ 0x28
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
 801864a:	bf00      	nop
 801864c:	08026de4 	.word	0x08026de4

08018650 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 8018650:	b580      	push	{r7, lr}
 8018652:	b086      	sub	sp, #24
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
 8018658:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	3330      	adds	r3, #48	@ 0x30
 801865e:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d104      	bne.n	8018670 <HAL_ETH_GetRxData+0x20>
 8018666:	f240 511f 	movw	r1, #1311	@ 0x51f
 801866a:	481c      	ldr	r0, [pc, #112]	@ (80186dc <HAL_ETH_GetRxData+0x8c>)
 801866c:	f7e8 fff4 	bl	8001658 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8018670:	6878      	ldr	r0, [r7, #4]
 8018672:	f7ff ff67 	bl	8018544 <HAL_ETH_IsRxDataAvailable>
 8018676:	4603      	mov	r3, r0
 8018678:	2b00      	cmp	r3, #0
 801867a:	d101      	bne.n	8018680 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 801867c:	2300      	movs	r3, #0
 801867e:	e028      	b.n	80186d2 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	695b      	ldr	r3, [r3, #20]
 8018684:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	693a      	ldr	r2, [r7, #16]
 801868a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801868e:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	699b      	ldr	r3, [r3, #24]
 8018694:	2b01      	cmp	r3, #1
 8018696:	d004      	beq.n	80186a2 <HAL_ETH_GetRxData+0x52>
 8018698:	f240 512a 	movw	r1, #1322	@ 0x52a
 801869c:	480f      	ldr	r0, [pc, #60]	@ (80186dc <HAL_ETH_GetRxData+0x8c>)
 801869e:	f7e8 ffdb 	bl	8001658 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	68db      	ldr	r3, [r3, #12]
 80186a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80186aa:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	691b      	ldr	r3, [r3, #16]
 80186b0:	461a      	mov	r2, r3
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	68ba      	ldr	r2, [r7, #8]
 80186ba:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	695b      	ldr	r3, [r3, #20]
 80186c0:	68ba      	ldr	r2, [r7, #8]
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d904      	bls.n	80186d0 <HAL_ETH_GetRxData+0x80>
 80186c6:	f240 5133 	movw	r1, #1331	@ 0x533
 80186ca:	4804      	ldr	r0, [pc, #16]	@ (80186dc <HAL_ETH_GetRxData+0x8c>)
 80186cc:	f7e8 ffc4 	bl	8001658 <vAssertCalled>

            return packet_length;
 80186d0:	68bb      	ldr	r3, [r7, #8]
        }
 80186d2:	4618      	mov	r0, r3
 80186d4:	3718      	adds	r7, #24
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
 80186da:	bf00      	nop
 80186dc:	08026de4 	.word	0x08026de4

080186e0 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 80186e0:	b480      	push	{r7}
 80186e2:	b08b      	sub	sp, #44	@ 0x2c
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	3330      	adds	r3, #48	@ 0x30
 80186ee:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	695b      	ldr	r3, [r3, #20]
 80186f4:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186fe:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	699b      	ldr	r3, [r3, #24]
 8018704:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	699b      	ldr	r3, [r3, #24]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d101      	bne.n	8018712 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 801870e:	2301      	movs	r3, #1
 8018710:	e057      	b.n	80187c2 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	69db      	ldr	r3, [r3, #28]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d002      	beq.n	8018720 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 801871a:	69fb      	ldr	r3, [r7, #28]
 801871c:	3301      	adds	r3, #1
 801871e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018720:	2300      	movs	r3, #0
 8018722:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8018724:	683b      	ldr	r3, [r7, #0]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d005      	beq.n	8018736 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 801872a:	683b      	ldr	r3, [r7, #0]
 801872c:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 801872e:	683a      	ldr	r2, [r7, #0]
 8018730:	6a3b      	ldr	r3, [r7, #32]
 8018732:	611a      	str	r2, [r3, #16]
 8018734:	e002      	b.n	801873c <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8018736:	6a3b      	ldr	r3, [r7, #32]
 8018738:	691b      	ldr	r3, [r3, #16]
 801873a:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 801873c:	693a      	ldr	r2, [r7, #16]
 801873e:	6a3b      	ldr	r3, [r7, #32]
 8018740:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8018742:	6a3b      	ldr	r3, [r7, #32]
 8018744:	68db      	ldr	r3, [r3, #12]
 8018746:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801874c:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	6a1b      	ldr	r3, [r3, #32]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d003      	beq.n	801875e <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8018756:	697b      	ldr	r3, [r7, #20]
 8018758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801875c:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018764:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8018766:	6a3b      	ldr	r3, [r7, #32]
 8018768:	697a      	ldr	r2, [r7, #20]
 801876a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801876c:	f3bf 8f4f 	dsb	sy
}
 8018770:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8018772:	6a3b      	ldr	r3, [r7, #32]
 8018774:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8018776:	69fb      	ldr	r3, [r7, #28]
 8018778:	3b01      	subs	r3, #1
 801877a:	69ba      	ldr	r2, [r7, #24]
 801877c:	429a      	cmp	r2, r3
 801877e:	d211      	bcs.n	80187a4 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8018780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018782:	3301      	adds	r3, #1
 8018784:	627b      	str	r3, [r7, #36]	@ 0x24
 8018786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018788:	2b03      	cmp	r3, #3
 801878a:	d902      	bls.n	8018792 <HAL_ETH_BuildRxDescriptors+0xb2>
 801878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801878e:	3b04      	subs	r3, #4
 8018790:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801879a:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 801879c:	69bb      	ldr	r3, [r7, #24]
 801879e:	3301      	adds	r3, #1
 80187a0:	61bb      	str	r3, [r7, #24]
            {
 80187a2:	e7bf      	b.n	8018724 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 80187a4:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681a      	ldr	r2, [r3, #0]
 80187aa:	6a3b      	ldr	r3, [r7, #32]
 80187ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80187b0:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	2200      	movs	r2, #0
 80187b8:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	2200      	movs	r2, #0
 80187be:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 80187c0:	2300      	movs	r3, #0
        }
 80187c2:	4618      	mov	r0, r3
 80187c4:	372c      	adds	r7, #44	@ 0x2c
 80187c6:	46bd      	mov	sp, r7
 80187c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187cc:	4770      	bx	lr
	...

080187d0 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b082      	sub	sp, #8
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80187e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80187e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80187e8:	2b40      	cmp	r3, #64	@ 0x40
 80187ea:	d115      	bne.n	8018818 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80187f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80187f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80187fc:	2b40      	cmp	r3, #64	@ 0x40
 80187fe:	d10b      	bne.n	8018818 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f7ff fafc 	bl	8017dfe <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801880e:	461a      	mov	r2, r3
 8018810:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018814:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018820:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018824:	f003 0301 	and.w	r3, r3, #1
 8018828:	2b01      	cmp	r3, #1
 801882a:	d115      	bne.n	8018858 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018834:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018838:	f003 0301 	and.w	r3, r3, #1
 801883c:	2b01      	cmp	r3, #1
 801883e:	d10b      	bne.n	8018858 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 8018840:	6878      	ldr	r0, [r7, #4]
 8018842:	f7ff fad1 	bl	8017de8 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801884e:	461a      	mov	r2, r3
 8018850:	f248 0301 	movw	r3, #32769	@ 0x8001
 8018854:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018860:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801886c:	d14f      	bne.n	801890e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018876:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801887a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801887e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018882:	d144      	bne.n	801890e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018888:	f043 0208 	orr.w	r2, r3, #8
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018898:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801889c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80188a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80188a4:	d11d      	bne.n	80188e2 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188ae:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80188b2:	f241 1302 	movw	r3, #4354	@ 0x1102
 80188b6:	4013      	ands	r3, r2
 80188b8:	687a      	ldr	r2, [r7, #4]
 80188ba:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80188c8:	687a      	ldr	r2, [r7, #4]
 80188ca:	6812      	ldr	r2, [r2, #0]
 80188cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80188d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80188d4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 80188d8:	21e0      	movs	r1, #224	@ 0xe0
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	f7ff fbba 	bl	8018054 <set_error_state>
 80188e0:	e012      	b.n	8018908 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188ea:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80188ee:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188fe:	461a      	mov	r2, r3
 8018900:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018904:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f7ff fa83 	bl	8017e14 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018916:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801891a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801891e:	d10f      	bne.n	8018940 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 801892c:	21e0      	movs	r1, #224	@ 0xe0
 801892e:	6878      	ldr	r0, [r7, #4]
 8018930:	f7ff fb90 	bl	8018054 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8018934:	6878      	ldr	r0, [r7, #4]
 8018936:	f000 f843 	bl	80189c0 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	2200      	movs	r2, #0
 801893e:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018948:	f003 0310 	and.w	r3, r3, #16
 801894c:	2b10      	cmp	r3, #16
 801894e:	d10d      	bne.n	801896c <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018958:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f000 f837 	bl	80189d4 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	2200      	movs	r2, #0
 801896a:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018974:	f003 0320 	and.w	r3, r3, #32
 8018978:	2b20      	cmp	r3, #32
 801897a:	d10d      	bne.n	8018998 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018984:	f003 020f 	and.w	r2, r3, #15
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f000 f82b 	bl	80189e8 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	2200      	movs	r2, #0
 8018996:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8018998:	4b08      	ldr	r3, [pc, #32]	@ (80189bc <HAL_ETH_IRQHandler+0x1ec>)
 801899a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801899c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d006      	beq.n	80189b2 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 80189a4:	4b05      	ldr	r3, [pc, #20]	@ (80189bc <HAL_ETH_IRQHandler+0x1ec>)
 80189a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80189aa:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 80189ac:	6878      	ldr	r0, [r7, #4]
 80189ae:	f000 f825 	bl	80189fc <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 80189b2:	bf00      	nop
 80189b4:	3708      	adds	r7, #8
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd80      	pop	{r7, pc}
 80189ba:	bf00      	nop
 80189bc:	58000080 	.word	0x58000080

080189c0 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 80189c0:	b480      	push	{r7}
 80189c2:	b083      	sub	sp, #12
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 80189c8:	bf00      	nop
 80189ca:	370c      	adds	r7, #12
 80189cc:	46bd      	mov	sp, r7
 80189ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d2:	4770      	bx	lr

080189d4 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 80189d4:	b480      	push	{r7}
 80189d6:	b083      	sub	sp, #12
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 80189dc:	bf00      	nop
 80189de:	370c      	adds	r7, #12
 80189e0:	46bd      	mov	sp, r7
 80189e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e6:	4770      	bx	lr

080189e8 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 80189e8:	b480      	push	{r7}
 80189ea:	b083      	sub	sp, #12
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 80189f0:	bf00      	nop
 80189f2:	370c      	adds	r7, #12
 80189f4:	46bd      	mov	sp, r7
 80189f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fa:	4770      	bx	lr

080189fc <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 80189fc:	b480      	push	{r7}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8018a04:	bf00      	nop
 8018a06:	370c      	adds	r7, #12
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr

08018a10 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b086      	sub	sp, #24
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	607a      	str	r2, [r7, #4]
 8018a1c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018a26:	f003 0301 	and.w	r3, r3, #1
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d001      	beq.n	8018a32 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 8018a2e:	2301      	movs	r3, #1
 8018a30:	e03e      	b.n	8018ab0 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018a3a:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	055b      	lsls	r3, r3, #21
 8018a46:	4313      	orrs	r3, r2
 8018a48:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018a4a:	697b      	ldr	r3, [r7, #20]
 8018a4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	041b      	lsls	r3, r3, #16
 8018a54:	4313      	orrs	r3, r2
 8018a56:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	f043 030c 	orr.w	r3, r3, #12
 8018a5e:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018a60:	697b      	ldr	r3, [r7, #20]
 8018a62:	f043 0301 	orr.w	r3, r3, #1
 8018a66:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	697a      	ldr	r2, [r7, #20]
 8018a6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018a72:	f000 ff01 	bl	8019878 <HAL_GetTick>
 8018a76:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018a78:	e009      	b.n	8018a8e <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018a7a:	f000 fefd 	bl	8019878 <HAL_GetTick>
 8018a7e:	4602      	mov	r2, r0
 8018a80:	693b      	ldr	r3, [r7, #16]
 8018a82:	1ad3      	subs	r3, r2, r3
 8018a84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018a88:	d901      	bls.n	8018a8e <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	e010      	b.n	8018ab0 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018a96:	f003 0301 	and.w	r3, r3, #1
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d1ed      	bne.n	8018a7a <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018aa6:	b29b      	uxth	r3, r3
 8018aa8:	461a      	mov	r2, r3
 8018aaa:	683b      	ldr	r3, [r7, #0]
 8018aac:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 8018aae:	2300      	movs	r3, #0
        }
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	3718      	adds	r7, #24
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}

08018ab8 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b086      	sub	sp, #24
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	60f8      	str	r0, [r7, #12]
 8018ac0:	60b9      	str	r1, [r7, #8]
 8018ac2:	607a      	str	r2, [r7, #4]
 8018ac4:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018ace:	f003 0301 	and.w	r3, r3, #1
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d001      	beq.n	8018ada <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8018ad6:	2301      	movs	r3, #1
 8018ad8:	e03c      	b.n	8018b54 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018ae2:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018aea:	68bb      	ldr	r3, [r7, #8]
 8018aec:	055b      	lsls	r3, r3, #21
 8018aee:	4313      	orrs	r3, r2
 8018af0:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018af2:	697b      	ldr	r3, [r7, #20]
 8018af4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	041b      	lsls	r3, r3, #16
 8018afc:	4313      	orrs	r3, r2
 8018afe:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	f023 030c 	bic.w	r3, r3, #12
 8018b06:	f043 0304 	orr.w	r3, r3, #4
 8018b0a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018b0c:	697b      	ldr	r3, [r7, #20]
 8018b0e:	f043 0301 	orr.w	r3, r3, #1
 8018b12:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8018b14:	683b      	ldr	r3, [r7, #0]
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	4b10      	ldr	r3, [pc, #64]	@ (8018b5c <HAL_ETH_WritePHYRegister+0xa4>)
 8018b1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8018b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8018b5c <HAL_ETH_WritePHYRegister+0xa4>)
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018b26:	f000 fea7 	bl	8019878 <HAL_GetTick>
 8018b2a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018b2c:	e009      	b.n	8018b42 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018b2e:	f000 fea3 	bl	8019878 <HAL_GetTick>
 8018b32:	4602      	mov	r2, r0
 8018b34:	693b      	ldr	r3, [r7, #16]
 8018b36:	1ad3      	subs	r3, r2, r3
 8018b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018b3c:	d901      	bls.n	8018b42 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8018b3e:	2301      	movs	r3, #1
 8018b40:	e008      	b.n	8018b54 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018b4a:	f003 0301 	and.w	r3, r3, #1
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d1ed      	bne.n	8018b2e <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8018b52:	2300      	movs	r3, #0
        }
 8018b54:	4618      	mov	r0, r3
 8018b56:	3718      	adds	r7, #24
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	40028000 	.word	0x40028000

08018b60 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018b60:	b480      	push	{r7}
 8018b62:	b083      	sub	sp, #12
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
 8018b68:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018b6a:	683b      	ldr	r3, [r7, #0]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d101      	bne.n	8018b74 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018b70:	2301      	movs	r3, #1
 8018b72:	e1c3      	b.n	8018efc <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	f003 020c 	and.w	r2, r3, #12
 8018b7e:	683b      	ldr	r3, [r7, #0]
 8018b80:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	f003 0310 	and.w	r3, r3, #16
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	bf14      	ite	ne
 8018b90:	2301      	movne	r3, #1
 8018b92:	2300      	moveq	r3, #0
 8018b94:	b2db      	uxtb	r3, r3
 8018b96:	461a      	mov	r2, r3
 8018b98:	683b      	ldr	r3, [r7, #0]
 8018b9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	bf0c      	ite	eq
 8018bba:	2301      	moveq	r3, #1
 8018bbc:	2300      	movne	r3, #0
 8018bbe:	b2db      	uxtb	r3, r3
 8018bc0:	461a      	mov	r2, r3
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	bf14      	ite	ne
 8018bd6:	2301      	movne	r3, #1
 8018bd8:	2300      	moveq	r3, #0
 8018bda:	b2db      	uxtb	r3, r3
 8018bdc:	461a      	mov	r2, r3
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	bf0c      	ite	eq
 8018bf0:	2301      	moveq	r3, #1
 8018bf2:	2300      	movne	r3, #0
 8018bf4:	b2db      	uxtb	r3, r3
 8018bf6:	461a      	mov	r2, r3
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	bf14      	ite	ne
 8018c0a:	2301      	movne	r3, #1
 8018c0c:	2300      	moveq	r3, #0
 8018c0e:	b2db      	uxtb	r3, r3
 8018c10:	461a      	mov	r2, r3
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	bf14      	ite	ne
 8018c24:	2301      	movne	r3, #1
 8018c26:	2300      	moveq	r3, #0
 8018c28:	b2db      	uxtb	r3, r3
 8018c2a:	461a      	mov	r2, r3
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8018c48:	683b      	ldr	r3, [r7, #0]
 8018c4a:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	bf14      	ite	ne
 8018c5a:	2301      	movne	r3, #1
 8018c5c:	2300      	moveq	r3, #0
 8018c5e:	b2db      	uxtb	r3, r3
 8018c60:	461a      	mov	r2, r3
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	bf0c      	ite	eq
 8018c74:	2301      	moveq	r3, #1
 8018c76:	2300      	movne	r3, #0
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	461a      	mov	r2, r3
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	bf0c      	ite	eq
 8018c8e:	2301      	moveq	r3, #1
 8018c90:	2300      	movne	r3, #0
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	461a      	mov	r2, r3
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	bf14      	ite	ne
 8018ca8:	2301      	movne	r3, #1
 8018caa:	2300      	moveq	r3, #0
 8018cac:	b2db      	uxtb	r3, r3
 8018cae:	461a      	mov	r2, r3
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	bf14      	ite	ne
 8018cc2:	2301      	movne	r3, #1
 8018cc4:	2300      	moveq	r3, #0
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	461a      	mov	r2, r3
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	bf14      	ite	ne
 8018cdc:	2301      	movne	r3, #1
 8018cde:	2300      	moveq	r3, #0
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	461a      	mov	r2, r3
 8018ce4:	683b      	ldr	r3, [r7, #0]
 8018ce6:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	bf14      	ite	ne
 8018cf6:	2301      	movne	r3, #1
 8018cf8:	2300      	moveq	r3, #0
 8018cfa:	b2db      	uxtb	r3, r3
 8018cfc:	461a      	mov	r2, r3
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8018d0c:	683b      	ldr	r3, [r7, #0]
 8018d0e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	bf14      	ite	ne
 8018d1e:	2301      	movne	r3, #1
 8018d20:	2300      	moveq	r3, #0
 8018d22:	b2db      	uxtb	r3, r3
 8018d24:	461a      	mov	r2, r3
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	685b      	ldr	r3, [r3, #4]
 8018d3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	685b      	ldr	r3, [r3, #4]
 8018d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	bf0c      	ite	eq
 8018d54:	2301      	moveq	r3, #1
 8018d56:	2300      	movne	r3, #0
 8018d58:	b2db      	uxtb	r3, r3
 8018d5a:	461a      	mov	r2, r3
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	bf14      	ite	ne
 8018d70:	2301      	movne	r3, #1
 8018d72:	2300      	moveq	r3, #0
 8018d74:	b2db      	uxtb	r3, r3
 8018d76:	461a      	mov	r2, r3
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	685b      	ldr	r3, [r3, #4]
 8018d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	bf14      	ite	ne
 8018d8c:	2301      	movne	r3, #1
 8018d8e:	2300      	moveq	r3, #0
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	461a      	mov	r2, r3
 8018d94:	683b      	ldr	r3, [r7, #0]
 8018d96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	685b      	ldr	r3, [r3, #4]
 8018da0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	bf14      	ite	ne
 8018da8:	2301      	movne	r3, #1
 8018daa:	2300      	moveq	r3, #0
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	461a      	mov	r2, r3
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	0e5b      	lsrs	r3, r3, #25
 8018dbe:	f003 021f 	and.w	r2, r3, #31
 8018dc2:	683b      	ldr	r3, [r7, #0]
 8018dc4:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	68db      	ldr	r3, [r3, #12]
 8018dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	bf14      	ite	ne
 8018dd4:	2301      	movne	r3, #1
 8018dd6:	2300      	moveq	r3, #0
 8018dd8:	b2db      	uxtb	r3, r3
 8018dda:	461a      	mov	r2, r3
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	68db      	ldr	r3, [r3, #12]
 8018de8:	f003 020f 	and.w	r2, r3, #15
 8018dec:	683b      	ldr	r3, [r7, #0]
 8018dee:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018df6:	f003 0302 	and.w	r3, r3, #2
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	bf14      	ite	ne
 8018dfe:	2301      	movne	r3, #1
 8018e00:	2300      	moveq	r3, #0
 8018e02:	b2db      	uxtb	r3, r3
 8018e04:	461a      	mov	r2, r3
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	bf0c      	ite	eq
 8018e1a:	2301      	moveq	r3, #1
 8018e1c:	2300      	movne	r3, #0
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	461a      	mov	r2, r3
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018e32:	683b      	ldr	r3, [r7, #0]
 8018e34:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e3c:	0c1b      	lsrs	r3, r3, #16
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018e4c:	f003 0301 	and.w	r3, r3, #1
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	bf14      	ite	ne
 8018e54:	2301      	movne	r3, #1
 8018e56:	2300      	moveq	r3, #0
 8018e58:	b2db      	uxtb	r3, r3
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018e6a:	f003 0302 	and.w	r3, r3, #2
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	bf14      	ite	ne
 8018e72:	2301      	movne	r3, #1
 8018e74:	2300      	moveq	r3, #0
 8018e76:	b2db      	uxtb	r3, r3
 8018e78:	461a      	mov	r2, r3
 8018e7a:	683b      	ldr	r3, [r7, #0]
 8018e7c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018e88:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018e98:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8018e9c:	683b      	ldr	r3, [r7, #0]
 8018e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018ea8:	f003 0308 	and.w	r3, r3, #8
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	bf14      	ite	ne
 8018eb0:	2301      	movne	r3, #1
 8018eb2:	2300      	moveq	r3, #0
 8018eb4:	b2db      	uxtb	r3, r3
 8018eb6:	461a      	mov	r2, r3
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018ec6:	f003 0310 	and.w	r3, r3, #16
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	bf14      	ite	ne
 8018ece:	2301      	movne	r3, #1
 8018ed0:	2300      	moveq	r3, #0
 8018ed2:	b2db      	uxtb	r3, r3
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	bf0c      	ite	eq
 8018eec:	2301      	moveq	r3, #1
 8018eee:	2300      	movne	r3, #0
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	461a      	mov	r2, r3
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8018efa:	2300      	movs	r3, #0
        }
 8018efc:	4618      	mov	r0, r3
 8018efe:	370c      	adds	r7, #12
 8018f00:	46bd      	mov	sp, r7
 8018f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f06:	4770      	bx	lr

08018f08 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018f12:	683b      	ldr	r3, [r7, #0]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d101      	bne.n	8018f1c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018f18:	2301      	movs	r3, #1
 8018f1a:	e00a      	b.n	8018f32 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018f20:	2b10      	cmp	r3, #16
 8018f22:	d105      	bne.n	8018f30 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8018f24:	6839      	ldr	r1, [r7, #0]
 8018f26:	6878      	ldr	r0, [r7, #4]
 8018f28:	f000 f808 	bl	8018f3c <ETH_SetMACConfig>

                return HAL_OK;
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	e000      	b.n	8018f32 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8018f30:	2301      	movs	r3, #1
            }
        }
 8018f32:	4618      	mov	r0, r3
 8018f34:	3708      	adds	r7, #8
 8018f36:	46bd      	mov	sp, r7
 8018f38:	bd80      	pop	{r7, pc}
	...

08018f3c <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8018f3c:	b480      	push	{r7}
 8018f3e:	b085      	sub	sp, #20
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
 8018f44:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 8018f4a:	683b      	ldr	r3, [r7, #0]
 8018f4c:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8018f4e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8018f50:	683b      	ldr	r3, [r7, #0]
 8018f52:	791b      	ldrb	r3, [r3, #4]
 8018f54:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8018f56:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018f58:	683b      	ldr	r3, [r7, #0]
 8018f5a:	7b1b      	ldrb	r3, [r3, #12]
 8018f5c:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8018f5e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8018f60:	683b      	ldr	r3, [r7, #0]
 8018f62:	7b5b      	ldrb	r3, [r3, #13]
 8018f64:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018f66:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018f68:	683b      	ldr	r3, [r7, #0]
 8018f6a:	7b9b      	ldrb	r3, [r3, #14]
 8018f6c:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8018f6e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018f70:	683b      	ldr	r3, [r7, #0]
 8018f72:	7bdb      	ldrb	r3, [r3, #15]
 8018f74:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018f76:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8018f78:	683a      	ldr	r2, [r7, #0]
 8018f7a:	7c12      	ldrb	r2, [r2, #16]
 8018f7c:	2a00      	cmp	r2, #0
 8018f7e:	d102      	bne.n	8018f86 <ETH_SetMACConfig+0x4a>
 8018f80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8018f84:	e000      	b.n	8018f88 <ETH_SetMACConfig+0x4c>
 8018f86:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018f88:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8018f8a:	683a      	ldr	r2, [r7, #0]
 8018f8c:	7c52      	ldrb	r2, [r2, #17]
 8018f8e:	2a00      	cmp	r2, #0
 8018f90:	d102      	bne.n	8018f98 <ETH_SetMACConfig+0x5c>
 8018f92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8018f96:	e000      	b.n	8018f9a <ETH_SetMACConfig+0x5e>
 8018f98:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8018f9a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	7c9b      	ldrb	r3, [r3, #18]
 8018fa0:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8018fa2:	431a      	orrs	r2, r3
                          macconf->Speed |
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8018fa8:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8018faa:	683b      	ldr	r3, [r7, #0]
 8018fac:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8018fae:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	7f1b      	ldrb	r3, [r3, #28]
 8018fb4:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8018fb6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	7f5b      	ldrb	r3, [r3, #29]
 8018fbc:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8018fbe:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018fc0:	683a      	ldr	r2, [r7, #0]
 8018fc2:	7f92      	ldrb	r2, [r2, #30]
 8018fc4:	2a00      	cmp	r2, #0
 8018fc6:	d102      	bne.n	8018fce <ETH_SetMACConfig+0x92>
 8018fc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018fcc:	e000      	b.n	8018fd0 <ETH_SetMACConfig+0x94>
 8018fce:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018fd0:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	7fdb      	ldrb	r3, [r3, #31]
 8018fd6:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018fd8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8018fda:	683a      	ldr	r2, [r7, #0]
 8018fdc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8018fe0:	2a00      	cmp	r2, #0
 8018fe2:	d102      	bne.n	8018fea <ETH_SetMACConfig+0xae>
 8018fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018fe8:	e000      	b.n	8018fec <ETH_SetMACConfig+0xb0>
 8018fea:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8018fec:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8018ff2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018ffa:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8018ffc:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019002:	4313      	orrs	r3, r2
 8019004:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	681a      	ldr	r2, [r3, #0]
 801900c:	4b56      	ldr	r3, [pc, #344]	@ (8019168 <ETH_SetMACConfig+0x22c>)
 801900e:	4013      	ands	r3, r2
 8019010:	687a      	ldr	r2, [r7, #4]
 8019012:	6812      	ldr	r2, [r2, #0]
 8019014:	68f9      	ldr	r1, [r7, #12]
 8019016:	430b      	orrs	r3, r1
 8019018:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801901e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019020:	683b      	ldr	r3, [r7, #0]
 8019022:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019026:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019028:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019030:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019032:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801903a:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801903c:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 801903e:	683a      	ldr	r2, [r7, #0]
 8019040:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019044:	2a00      	cmp	r2, #0
 8019046:	d102      	bne.n	801904e <ETH_SetMACConfig+0x112>
 8019048:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801904c:	e000      	b.n	8019050 <ETH_SetMACConfig+0x114>
 801904e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019050:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019056:	4313      	orrs	r3, r2
 8019058:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	685a      	ldr	r2, [r3, #4]
 8019060:	4b42      	ldr	r3, [pc, #264]	@ (801916c <ETH_SetMACConfig+0x230>)
 8019062:	4013      	ands	r3, r2
 8019064:	687a      	ldr	r2, [r7, #4]
 8019066:	6812      	ldr	r2, [r2, #0]
 8019068:	68f9      	ldr	r1, [r7, #12]
 801906a:	430b      	orrs	r3, r1
 801906c:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019074:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801907a:	4313      	orrs	r3, r2
 801907c:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	68da      	ldr	r2, [r3, #12]
 8019084:	4b3a      	ldr	r3, [pc, #232]	@ (8019170 <ETH_SetMACConfig+0x234>)
 8019086:	4013      	ands	r3, r2
 8019088:	687a      	ldr	r2, [r7, #4]
 801908a:	6812      	ldr	r2, [r2, #0]
 801908c:	68f9      	ldr	r1, [r7, #12]
 801908e:	430b      	orrs	r3, r1
 8019090:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019098:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 801909a:	683b      	ldr	r3, [r7, #0]
 801909c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 801909e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80190a0:	683a      	ldr	r2, [r7, #0]
 80190a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80190a6:	2a00      	cmp	r2, #0
 80190a8:	d101      	bne.n	80190ae <ETH_SetMACConfig+0x172>
 80190aa:	2280      	movs	r2, #128	@ 0x80
 80190ac:	e000      	b.n	80190b0 <ETH_SetMACConfig+0x174>
 80190ae:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 80190b0:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80190b6:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80190b8:	4313      	orrs	r3, r2
 80190ba:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80190c2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80190c6:	4013      	ands	r3, r2
 80190c8:	687a      	ldr	r2, [r7, #4]
 80190ca:	6812      	ldr	r2, [r2, #0]
 80190cc:	68f9      	ldr	r1, [r7, #12]
 80190ce:	430b      	orrs	r3, r1
 80190d0:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80190d8:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80190e0:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80190e2:	4313      	orrs	r3, r2
 80190e4:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80190ee:	f023 0103 	bic.w	r1, r3, #3
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	68fa      	ldr	r2, [r7, #12]
 80190f8:	430a      	orrs	r2, r1
 80190fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019106:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801910a:	683b      	ldr	r3, [r7, #0]
 801910c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	430a      	orrs	r2, r1
 8019114:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801911c:	683a      	ldr	r2, [r7, #0]
 801911e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019122:	2a00      	cmp	r2, #0
 8019124:	d101      	bne.n	801912a <ETH_SetMACConfig+0x1ee>
 8019126:	2240      	movs	r2, #64	@ 0x40
 8019128:	e000      	b.n	801912c <ETH_SetMACConfig+0x1f0>
 801912a:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801912c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019134:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019136:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801913e:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8019140:	4313      	orrs	r3, r2
 8019142:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801914c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	68fa      	ldr	r2, [r7, #12]
 8019156:	430a      	orrs	r2, r1
 8019158:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801915c:	bf00      	nop
 801915e:	3714      	adds	r7, #20
 8019160:	46bd      	mov	sp, r7
 8019162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019166:	4770      	bx	lr
 8019168:	00048083 	.word	0x00048083
 801916c:	c0f88000 	.word	0xc0f88000
 8019170:	fffffef0 	.word	0xfffffef0

08019174 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8019174:	b480      	push	{r7}
 8019176:	b085      	sub	sp, #20
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
 801917c:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019186:	681a      	ldr	r2, [r3, #0]
 8019188:	4b38      	ldr	r3, [pc, #224]	@ (801926c <ETH_SetDMAConfig+0xf8>)
 801918a:	4013      	ands	r3, r2
 801918c:	683a      	ldr	r2, [r7, #0]
 801918e:	6811      	ldr	r1, [r2, #0]
 8019190:	687a      	ldr	r2, [r7, #4]
 8019192:	6812      	ldr	r2, [r2, #0]
 8019194:	430b      	orrs	r3, r1
 8019196:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801919a:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	791b      	ldrb	r3, [r3, #4]
 80191a0:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80191a6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	7b1b      	ldrb	r3, [r3, #12]
 80191ac:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80191ae:	4313      	orrs	r3, r2
 80191b0:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191ba:	685a      	ldr	r2, [r3, #4]
 80191bc:	4b2c      	ldr	r3, [pc, #176]	@ (8019270 <ETH_SetDMAConfig+0xfc>)
 80191be:	4013      	ands	r3, r2
 80191c0:	687a      	ldr	r2, [r7, #4]
 80191c2:	6812      	ldr	r2, [r2, #0]
 80191c4:	68f9      	ldr	r1, [r7, #12]
 80191c6:	430b      	orrs	r3, r1
 80191c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80191cc:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	7b5b      	ldrb	r3, [r3, #13]
 80191d2:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80191d8:	4313      	orrs	r3, r2
 80191da:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80191e8:	4b22      	ldr	r3, [pc, #136]	@ (8019274 <ETH_SetDMAConfig+0x100>)
 80191ea:	4013      	ands	r3, r2
 80191ec:	687a      	ldr	r2, [r7, #4]
 80191ee:	6812      	ldr	r2, [r2, #0]
 80191f0:	68f9      	ldr	r1, [r7, #12]
 80191f2:	430b      	orrs	r3, r1
 80191f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80191f8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	7d1b      	ldrb	r3, [r3, #20]
 8019204:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019206:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8019208:	683b      	ldr	r3, [r7, #0]
 801920a:	7f5b      	ldrb	r3, [r3, #29]
 801920c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801920e:	4313      	orrs	r3, r2
 8019210:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801921a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801921e:	4b16      	ldr	r3, [pc, #88]	@ (8019278 <ETH_SetDMAConfig+0x104>)
 8019220:	4013      	ands	r3, r2
 8019222:	687a      	ldr	r2, [r7, #4]
 8019224:	6812      	ldr	r2, [r2, #0]
 8019226:	68f9      	ldr	r1, [r7, #12]
 8019228:	430b      	orrs	r3, r1
 801922a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801922e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019232:	683b      	ldr	r3, [r7, #0]
 8019234:	7f1b      	ldrb	r3, [r3, #28]
 8019236:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801923c:	4313      	orrs	r3, r2
 801923e:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019248:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801924c:	4b0b      	ldr	r3, [pc, #44]	@ (801927c <ETH_SetDMAConfig+0x108>)
 801924e:	4013      	ands	r3, r2
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	6812      	ldr	r2, [r2, #0]
 8019254:	68f9      	ldr	r1, [r7, #12]
 8019256:	430b      	orrs	r3, r1
 8019258:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801925c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 8019260:	bf00      	nop
 8019262:	3714      	adds	r7, #20
 8019264:	46bd      	mov	sp, r7
 8019266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926a:	4770      	bx	lr
 801926c:	ffff87fd 	.word	0xffff87fd
 8019270:	ffff2ffe 	.word	0xffff2ffe
 8019274:	fffec000 	.word	0xfffec000
 8019278:	ffc0efef 	.word	0xffc0efef
 801927c:	7fc0ffff 	.word	0x7fc0ffff

08019280 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 8019280:	b580      	push	{r7, lr}
 8019282:	b0a4      	sub	sp, #144	@ 0x90
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8019288:	2301      	movs	r3, #1
 801928a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801928e:	2300      	movs	r3, #0
 8019290:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8019292:	2300      	movs	r3, #0
 8019294:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8019298:	2300      	movs	r3, #0
 801929a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 801929e:	2301      	movs	r3, #1
 80192a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80192a4:	2301      	movs	r3, #1
 80192a6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 80192aa:	2301      	movs	r3, #1
 80192ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 80192b0:	2300      	movs	r3, #0
 80192b2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80192b6:	2301      	movs	r3, #1
 80192b8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80192bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80192c0:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80192c2:	2300      	movs	r3, #0
 80192c4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80192c8:	2300      	movs	r3, #0
 80192ca:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80192cc:	2300      	movs	r3, #0
 80192ce:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80192d2:	2300      	movs	r3, #0
 80192d4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 80192d8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80192dc:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80192de:	2300      	movs	r3, #0
 80192e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80192e4:	2300      	movs	r3, #0
 80192e6:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 80192e8:	2301      	movs	r3, #1
 80192ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 80192ee:	2300      	movs	r3, #0
 80192f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 80192f4:	2300      	movs	r3, #0
 80192f6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80192fa:	2300      	movs	r3, #0
 80192fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 80192fe:	2300      	movs	r3, #0
 8019300:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8019302:	2300      	movs	r3, #0
 8019304:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8019306:	2300      	movs	r3, #0
 8019308:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801930c:	2300      	movs	r3, #0
 801930e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8019312:	2301      	movs	r3, #1
 8019314:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8019318:	2320      	movs	r3, #32
 801931a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801931e:	2301      	movs	r3, #1
 8019320:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8019324:	2300      	movs	r3, #0
 8019326:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801932a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801932e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8019330:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019334:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8019336:	2300      	movs	r3, #0
 8019338:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801933c:	2302      	movs	r3, #2
 801933e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8019342:	2300      	movs	r3, #0
 8019344:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8019348:	2300      	movs	r3, #0
 801934a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801934e:	2300      	movs	r3, #0
 8019350:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8019354:	2301      	movs	r3, #1
 8019356:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801935a:	2300      	movs	r3, #0
 801935c:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801935e:	2301      	movs	r3, #1
 8019360:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8019364:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019368:	4619      	mov	r1, r3
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f7ff fde6 	bl	8018f3c <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8019370:	2301      	movs	r3, #1
 8019372:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8019374:	2301      	movs	r3, #1
 8019376:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8019378:	2300      	movs	r3, #0
 801937a:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801937c:	2300      	movs	r3, #0
 801937e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 8019382:	2300      	movs	r3, #0
 8019384:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8019386:	2300      	movs	r3, #0
 8019388:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801938a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801938e:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8019390:	2300      	movs	r3, #0
 8019392:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8019394:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8019398:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801939a:	2300      	movs	r3, #0
 801939c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 80193a0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80193a4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 80193a6:	f107 0308 	add.w	r3, r7, #8
 80193aa:	4619      	mov	r1, r3
 80193ac:	6878      	ldr	r0, [r7, #4]
 80193ae:	f7ff fee1 	bl	8019174 <ETH_SetDMAConfig>
        }
 80193b2:	bf00      	nop
 80193b4:	3790      	adds	r7, #144	@ 0x90
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd80      	pop	{r7, pc}
	...

080193bc <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 80193bc:	b580      	push	{r7, lr}
 80193be:	b084      	sub	sp, #16
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80193cc:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80193d4:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 80193d6:	f003 fdf1 	bl	801cfbc <HAL_RCC_GetHCLKFreq>
 80193da:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 80193dc:	68bb      	ldr	r3, [r7, #8]
 80193de:	4a1e      	ldr	r2, [pc, #120]	@ (8019458 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80193e0:	4293      	cmp	r3, r2
 80193e2:	d908      	bls.n	80193f6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80193e4:	68bb      	ldr	r3, [r7, #8]
 80193e6:	4a1d      	ldr	r2, [pc, #116]	@ (801945c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80193e8:	4293      	cmp	r3, r2
 80193ea:	d804      	bhi.n	80193f6 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80193f2:	60fb      	str	r3, [r7, #12]
 80193f4:	e027      	b.n	8019446 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 80193f6:	68bb      	ldr	r3, [r7, #8]
 80193f8:	4a18      	ldr	r2, [pc, #96]	@ (801945c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80193fa:	4293      	cmp	r3, r2
 80193fc:	d908      	bls.n	8019410 <ETH_MAC_MDIO_ClkConfig+0x54>
 80193fe:	68bb      	ldr	r3, [r7, #8]
 8019400:	4a17      	ldr	r2, [pc, #92]	@ (8019460 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019402:	4293      	cmp	r3, r2
 8019404:	d204      	bcs.n	8019410 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801940c:	60fb      	str	r3, [r7, #12]
 801940e:	e01a      	b.n	8019446 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8019410:	68bb      	ldr	r3, [r7, #8]
 8019412:	4a13      	ldr	r2, [pc, #76]	@ (8019460 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019414:	4293      	cmp	r3, r2
 8019416:	d303      	bcc.n	8019420 <ETH_MAC_MDIO_ClkConfig+0x64>
 8019418:	68bb      	ldr	r3, [r7, #8]
 801941a:	4a12      	ldr	r2, [pc, #72]	@ (8019464 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801941c:	4293      	cmp	r3, r2
 801941e:	d911      	bls.n	8019444 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	4a10      	ldr	r2, [pc, #64]	@ (8019464 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019424:	4293      	cmp	r3, r2
 8019426:	d908      	bls.n	801943a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8019428:	68bb      	ldr	r3, [r7, #8]
 801942a:	4a0f      	ldr	r2, [pc, #60]	@ (8019468 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801942c:	4293      	cmp	r3, r2
 801942e:	d804      	bhi.n	801943a <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019436:	60fb      	str	r3, [r7, #12]
 8019438:	e005      	b.n	8019446 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019440:	60fb      	str	r3, [r7, #12]
 8019442:	e000      	b.n	8019446 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8019444:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	68fa      	ldr	r2, [r7, #12]
 801944c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 8019450:	bf00      	nop
 8019452:	3710      	adds	r7, #16
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}
 8019458:	01312cff 	.word	0x01312cff
 801945c:	02160ebf 	.word	0x02160ebf
 8019460:	03938700 	.word	0x03938700
 8019464:	05f5e0ff 	.word	0x05f5e0ff
 8019468:	08f0d17f 	.word	0x08f0d17f

0801946c <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801946c:	b480      	push	{r7}
 801946e:	b085      	sub	sp, #20
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019474:	2300      	movs	r3, #0
 8019476:	60fb      	str	r3, [r7, #12]
 8019478:	e01d      	b.n	80194b6 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	68d9      	ldr	r1, [r3, #12]
 801947e:	68fa      	ldr	r2, [r7, #12]
 8019480:	4613      	mov	r3, r2
 8019482:	005b      	lsls	r3, r3, #1
 8019484:	4413      	add	r3, r2
 8019486:	00db      	lsls	r3, r3, #3
 8019488:	440b      	add	r3, r1
 801948a:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801948c:	68bb      	ldr	r3, [r7, #8]
 801948e:	2200      	movs	r2, #0
 8019490:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019492:	68bb      	ldr	r3, [r7, #8]
 8019494:	2200      	movs	r2, #0
 8019496:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	2200      	movs	r2, #0
 801949c:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	2200      	movs	r2, #0
 80194a2:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 80194a4:	68b9      	ldr	r1, [r7, #8]
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	68fa      	ldr	r2, [r7, #12]
 80194aa:	3206      	adds	r2, #6
 80194ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	3301      	adds	r3, #1
 80194b4:	60fb      	str	r3, [r7, #12]
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	2b03      	cmp	r3, #3
 80194ba:	d9de      	bls.n	801947a <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	2200      	movs	r2, #0
 80194c0:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	2200      	movs	r2, #0
 80194c6:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194d0:	461a      	mov	r2, r3
 80194d2:	2303      	movs	r3, #3
 80194d4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	68da      	ldr	r2, [r3, #12]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194e4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	68da      	ldr	r2, [r3, #12]
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194f4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 80194f8:	bf00      	nop
 80194fa:	3714      	adds	r7, #20
 80194fc:	46bd      	mov	sp, r7
 80194fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019502:	4770      	bx	lr

08019504 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019504:	b480      	push	{r7}
 8019506:	b085      	sub	sp, #20
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801950c:	2300      	movs	r3, #0
 801950e:	60fb      	str	r3, [r7, #12]
 8019510:	e023      	b.n	801955a <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	6919      	ldr	r1, [r3, #16]
 8019516:	68fa      	ldr	r2, [r7, #12]
 8019518:	4613      	mov	r3, r2
 801951a:	005b      	lsls	r3, r3, #1
 801951c:	4413      	add	r3, r2
 801951e:	00db      	lsls	r3, r3, #3
 8019520:	440b      	add	r3, r1
 8019522:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8019524:	68bb      	ldr	r3, [r7, #8]
 8019526:	2200      	movs	r2, #0
 8019528:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801952a:	68bb      	ldr	r3, [r7, #8]
 801952c:	2200      	movs	r2, #0
 801952e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	2200      	movs	r2, #0
 8019534:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8019536:	68bb      	ldr	r3, [r7, #8]
 8019538:	2200      	movs	r2, #0
 801953a:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801953c:	68bb      	ldr	r3, [r7, #8]
 801953e:	2200      	movs	r2, #0
 8019540:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8019542:	68bb      	ldr	r3, [r7, #8]
 8019544:	2200      	movs	r2, #0
 8019546:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8019548:	68b9      	ldr	r1, [r7, #8]
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	68fa      	ldr	r2, [r7, #12]
 801954e:	320c      	adds	r2, #12
 8019550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	3301      	adds	r3, #1
 8019558:	60fb      	str	r3, [r7, #12]
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	2b03      	cmp	r3, #3
 801955e:	d9d8      	bls.n	8019512 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2200      	movs	r2, #0
 8019564:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2200      	movs	r2, #0
 801956a:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2200      	movs	r2, #0
 8019570:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2200      	movs	r2, #0
 8019576:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	2200      	movs	r2, #0
 801957c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019586:	461a      	mov	r2, r3
 8019588:	2303      	movs	r3, #3
 801958a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	691a      	ldr	r2, [r3, #16]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801959a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	691b      	ldr	r3, [r3, #16]
 80195a2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195ae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 80195b2:	bf00      	nop
 80195b4:	3714      	adds	r7, #20
 80195b6:	46bd      	mov	sp, r7
 80195b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195bc:	4770      	bx	lr
	...

080195c0 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b086      	sub	sp, #24
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80195cc:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 80195ce:	e032      	b.n	8019636 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	697a      	ldr	r2, [r7, #20]
 80195d4:	3206      	adds	r2, #6
 80195d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80195da:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 80195dc:	693b      	ldr	r3, [r7, #16]
 80195de:	68db      	ldr	r3, [r3, #12]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	db31      	blt.n	8019648 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 80195e4:	693b      	ldr	r3, [r7, #16]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d02d      	beq.n	801964c <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 80195f0:	68f8      	ldr	r0, [r7, #12]
 80195f2:	f7f0 fbd2 	bl	8009d9a <pxPacketBuffer_to_NetworkBuffer>
 80195f6:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d002      	beq.n	8019604 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80195fe:	68b8      	ldr	r0, [r7, #8]
 8019600:	f7fd faa2 	bl	8016b48 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8019604:	693b      	ldr	r3, [r7, #16]
 8019606:	2200      	movs	r2, #0
 8019608:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801960a:	697b      	ldr	r3, [r7, #20]
 801960c:	3301      	adds	r3, #1
 801960e:	617b      	str	r3, [r7, #20]
 8019610:	697b      	ldr	r3, [r7, #20]
 8019612:	2b03      	cmp	r3, #3
 8019614:	d902      	bls.n	801961c <ETH_Clear_Tx_Descriptors+0x5c>
 8019616:	697b      	ldr	r3, [r7, #20]
 8019618:	3b04      	subs	r3, #4
 801961a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	697a      	ldr	r2, [r7, #20]
 8019620:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8019622:	f3bf 8f4f 	dsb	sy
}
 8019626:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8019628:	4b0b      	ldr	r3, [pc, #44]	@ (8019658 <ETH_Clear_Tx_Descriptors+0x98>)
 801962a:	6818      	ldr	r0, [r3, #0]
 801962c:	2300      	movs	r3, #0
 801962e:	2200      	movs	r2, #0
 8019630:	2100      	movs	r1, #0
 8019632:	f7e9 fcff 	bl	8003034 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019636:	4b08      	ldr	r3, [pc, #32]	@ (8019658 <ETH_Clear_Tx_Descriptors+0x98>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	4618      	mov	r0, r3
 801963c:	f7e9 ffa0 	bl	8003580 <uxQueueMessagesWaiting>
 8019640:	4603      	mov	r3, r0
 8019642:	2b04      	cmp	r3, #4
 8019644:	d1c4      	bne.n	80195d0 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8019646:	e002      	b.n	801964e <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8019648:	bf00      	nop
 801964a:	e000      	b.n	801964e <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801964c:	bf00      	nop
        }
 801964e:	bf00      	nop
 8019650:	3718      	adds	r7, #24
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}
 8019656:	bf00      	nop
 8019658:	200022ac 	.word	0x200022ac

0801965c <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801965c:	b480      	push	{r7}
 801965e:	b08b      	sub	sp, #44	@ 0x2c
 8019660:	af00      	add	r7, sp, #0
 8019662:	60f8      	str	r0, [r7, #12]
 8019664:	60b9      	str	r1, [r7, #8]
 8019666:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	3318      	adds	r3, #24
 801966c:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801966e:	6a3b      	ldr	r3, [r7, #32]
 8019670:	691b      	ldr	r3, [r3, #16]
 8019672:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 8019674:	6a3b      	ldr	r3, [r7, #32]
 8019676:	69fa      	ldr	r2, [r7, #28]
 8019678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801967c:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801967e:	68bb      	ldr	r3, [r7, #8]
 8019680:	689b      	ldr	r3, [r3, #8]
 8019682:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 8019684:	697b      	ldr	r3, [r7, #20]
 8019686:	2200      	movs	r2, #0
 8019688:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801968a:	69bb      	ldr	r3, [r7, #24]
 801968c:	68db      	ldr	r3, [r3, #12]
 801968e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 8019690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019692:	2b00      	cmp	r3, #0
 8019694:	da01      	bge.n	801969a <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 8019696:	2302      	movs	r3, #2
 8019698:	e05c      	b.n	8019754 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801969a:	697b      	ldr	r3, [r7, #20]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	461a      	mov	r2, r3
 80196a0:	69bb      	ldr	r3, [r7, #24]
 80196a2:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80196a4:	69bb      	ldr	r3, [r7, #24]
 80196a6:	689a      	ldr	r2, [r3, #8]
 80196a8:	4b2d      	ldr	r3, [pc, #180]	@ (8019760 <ETH_Prepare_Tx_Descriptors+0x104>)
 80196aa:	4013      	ands	r3, r2
 80196ac:	697a      	ldr	r2, [r7, #20]
 80196ae:	6852      	ldr	r2, [r2, #4]
 80196b0:	431a      	orrs	r2, r3
 80196b2:	69bb      	ldr	r3, [r7, #24]
 80196b4:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80196b6:	69bb      	ldr	r3, [r7, #24]
 80196b8:	2200      	movs	r2, #0
 80196ba:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 80196bc:	69bb      	ldr	r3, [r7, #24]
 80196be:	689a      	ldr	r2, [r3, #8]
 80196c0:	4b28      	ldr	r3, [pc, #160]	@ (8019764 <ETH_Prepare_Tx_Descriptors+0x108>)
 80196c2:	4013      	ands	r3, r2
 80196c4:	69ba      	ldr	r2, [r7, #24]
 80196c6:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 80196c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80196ca:	4b27      	ldr	r3, [pc, #156]	@ (8019768 <ETH_Prepare_Tx_Descriptors+0x10c>)
 80196cc:	4013      	ands	r3, r2
 80196ce:	68ba      	ldr	r2, [r7, #8]
 80196d0:	6852      	ldr	r2, [r2, #4]
 80196d2:	4313      	orrs	r3, r2
 80196d4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 80196d6:	68bb      	ldr	r3, [r7, #8]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	f003 0301 	and.w	r3, r3, #1
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d006      	beq.n	80196f0 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 80196e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80196e8:	68bb      	ldr	r3, [r7, #8]
 80196ea:	695b      	ldr	r3, [r3, #20]
 80196ec:	4313      	orrs	r3, r2
 80196ee:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	f003 0320 	and.w	r3, r3, #32
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d006      	beq.n	801970a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 80196fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019702:	68bb      	ldr	r3, [r7, #8]
 8019704:	691b      	ldr	r3, [r3, #16]
 8019706:	4313      	orrs	r3, r2
 8019708:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801970c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8019710:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8019712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019714:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8019718:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801971c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019720:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d006      	beq.n	8019736 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019728:	69bb      	ldr	r3, [r7, #24]
 801972a:	689b      	ldr	r3, [r3, #8]
 801972c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019730:	69bb      	ldr	r3, [r7, #24]
 8019732:	609a      	str	r2, [r3, #8]
 8019734:	e005      	b.n	8019742 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019736:	69bb      	ldr	r3, [r7, #24]
 8019738:	689b      	ldr	r3, [r3, #8]
 801973a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801973e:	69bb      	ldr	r3, [r7, #24]
 8019740:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8019742:	69bb      	ldr	r3, [r7, #24]
 8019744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019746:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8019748:	69bb      	ldr	r3, [r7, #24]
 801974a:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801974c:	f3bf 8f4f 	dsb	sy
}
 8019750:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8019752:	2300      	movs	r3, #0
        }
 8019754:	4618      	mov	r0, r3
 8019756:	372c      	adds	r7, #44	@ 0x2c
 8019758:	46bd      	mov	sp, r7
 801975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975e:	4770      	bx	lr
 8019760:	ffffc000 	.word	0xffffc000
 8019764:	c000ffff 	.word	0xc000ffff
 8019768:	ffff8000 	.word	0xffff8000

0801976c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b082      	sub	sp, #8
 8019770:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019772:	2003      	movs	r0, #3
 8019774:	f000 f9a0 	bl	8019ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019778:	f003 faa6 	bl	801ccc8 <HAL_RCC_GetSysClockFreq>
 801977c:	4602      	mov	r2, r0
 801977e:	4b15      	ldr	r3, [pc, #84]	@ (80197d4 <HAL_Init+0x68>)
 8019780:	699b      	ldr	r3, [r3, #24]
 8019782:	0a1b      	lsrs	r3, r3, #8
 8019784:	f003 030f 	and.w	r3, r3, #15
 8019788:	4913      	ldr	r1, [pc, #76]	@ (80197d8 <HAL_Init+0x6c>)
 801978a:	5ccb      	ldrb	r3, [r1, r3]
 801978c:	f003 031f 	and.w	r3, r3, #31
 8019790:	fa22 f303 	lsr.w	r3, r2, r3
 8019794:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8019796:	4b0f      	ldr	r3, [pc, #60]	@ (80197d4 <HAL_Init+0x68>)
 8019798:	699b      	ldr	r3, [r3, #24]
 801979a:	f003 030f 	and.w	r3, r3, #15
 801979e:	4a0e      	ldr	r2, [pc, #56]	@ (80197d8 <HAL_Init+0x6c>)
 80197a0:	5cd3      	ldrb	r3, [r2, r3]
 80197a2:	f003 031f 	and.w	r3, r3, #31
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	fa22 f303 	lsr.w	r3, r2, r3
 80197ac:	4a0b      	ldr	r2, [pc, #44]	@ (80197dc <HAL_Init+0x70>)
 80197ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80197b0:	4a0b      	ldr	r2, [pc, #44]	@ (80197e0 <HAL_Init+0x74>)
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80197b6:	200f      	movs	r0, #15
 80197b8:	f000 f814 	bl	80197e4 <HAL_InitTick>
 80197bc:	4603      	mov	r3, r0
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d001      	beq.n	80197c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80197c2:	2301      	movs	r3, #1
 80197c4:	e002      	b.n	80197cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80197c6:	f7e8 f963 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80197ca:	2300      	movs	r3, #0
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3708      	adds	r7, #8
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	58024400 	.word	0x58024400
 80197d8:	08026ee8 	.word	0x08026ee8
 80197dc:	20000004 	.word	0x20000004
 80197e0:	20000000 	.word	0x20000000

080197e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b082      	sub	sp, #8
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80197ec:	4b15      	ldr	r3, [pc, #84]	@ (8019844 <HAL_InitTick+0x60>)
 80197ee:	781b      	ldrb	r3, [r3, #0]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d101      	bne.n	80197f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80197f4:	2301      	movs	r3, #1
 80197f6:	e021      	b.n	801983c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80197f8:	4b13      	ldr	r3, [pc, #76]	@ (8019848 <HAL_InitTick+0x64>)
 80197fa:	681a      	ldr	r2, [r3, #0]
 80197fc:	4b11      	ldr	r3, [pc, #68]	@ (8019844 <HAL_InitTick+0x60>)
 80197fe:	781b      	ldrb	r3, [r3, #0]
 8019800:	4619      	mov	r1, r3
 8019802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019806:	fbb3 f3f1 	udiv	r3, r3, r1
 801980a:	fbb2 f3f3 	udiv	r3, r2, r3
 801980e:	4618      	mov	r0, r3
 8019810:	f000 f985 	bl	8019b1e <HAL_SYSTICK_Config>
 8019814:	4603      	mov	r3, r0
 8019816:	2b00      	cmp	r3, #0
 8019818:	d001      	beq.n	801981e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801981a:	2301      	movs	r3, #1
 801981c:	e00e      	b.n	801983c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	2b0f      	cmp	r3, #15
 8019822:	d80a      	bhi.n	801983a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019824:	2200      	movs	r2, #0
 8019826:	6879      	ldr	r1, [r7, #4]
 8019828:	f04f 30ff 	mov.w	r0, #4294967295
 801982c:	f000 f94f 	bl	8019ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019830:	4a06      	ldr	r2, [pc, #24]	@ (801984c <HAL_InitTick+0x68>)
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019836:	2300      	movs	r3, #0
 8019838:	e000      	b.n	801983c <HAL_InitTick+0x58>
    return HAL_ERROR;
 801983a:	2301      	movs	r3, #1
}
 801983c:	4618      	mov	r0, r3
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}
 8019844:	20000024 	.word	0x20000024
 8019848:	20000000 	.word	0x20000000
 801984c:	20000020 	.word	0x20000020

08019850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019850:	b480      	push	{r7}
 8019852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8019854:	4b06      	ldr	r3, [pc, #24]	@ (8019870 <HAL_IncTick+0x20>)
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	461a      	mov	r2, r3
 801985a:	4b06      	ldr	r3, [pc, #24]	@ (8019874 <HAL_IncTick+0x24>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	4413      	add	r3, r2
 8019860:	4a04      	ldr	r2, [pc, #16]	@ (8019874 <HAL_IncTick+0x24>)
 8019862:	6013      	str	r3, [r2, #0]
}
 8019864:	bf00      	nop
 8019866:	46bd      	mov	sp, r7
 8019868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986c:	4770      	bx	lr
 801986e:	bf00      	nop
 8019870:	20000024 	.word	0x20000024
 8019874:	200023b8 	.word	0x200023b8

08019878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019878:	b480      	push	{r7}
 801987a:	af00      	add	r7, sp, #0
  return uwTick;
 801987c:	4b03      	ldr	r3, [pc, #12]	@ (801988c <HAL_GetTick+0x14>)
 801987e:	681b      	ldr	r3, [r3, #0]
}
 8019880:	4618      	mov	r0, r3
 8019882:	46bd      	mov	sp, r7
 8019884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019888:	4770      	bx	lr
 801988a:	bf00      	nop
 801988c:	200023b8 	.word	0x200023b8

08019890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b084      	sub	sp, #16
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019898:	f7ff ffee 	bl	8019878 <HAL_GetTick>
 801989c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198a8:	d005      	beq.n	80198b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80198aa:	4b0a      	ldr	r3, [pc, #40]	@ (80198d4 <HAL_Delay+0x44>)
 80198ac:	781b      	ldrb	r3, [r3, #0]
 80198ae:	461a      	mov	r2, r3
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	4413      	add	r3, r2
 80198b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80198b6:	bf00      	nop
 80198b8:	f7ff ffde 	bl	8019878 <HAL_GetTick>
 80198bc:	4602      	mov	r2, r0
 80198be:	68bb      	ldr	r3, [r7, #8]
 80198c0:	1ad3      	subs	r3, r2, r3
 80198c2:	68fa      	ldr	r2, [r7, #12]
 80198c4:	429a      	cmp	r2, r3
 80198c6:	d8f7      	bhi.n	80198b8 <HAL_Delay+0x28>
  {
  }
}
 80198c8:	bf00      	nop
 80198ca:	bf00      	nop
 80198cc:	3710      	adds	r7, #16
 80198ce:	46bd      	mov	sp, r7
 80198d0:	bd80      	pop	{r7, pc}
 80198d2:	bf00      	nop
 80198d4:	20000024 	.word	0x20000024

080198d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80198d8:	b480      	push	{r7}
 80198da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80198dc:	4b03      	ldr	r3, [pc, #12]	@ (80198ec <HAL_GetREVID+0x14>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	0c1b      	lsrs	r3, r3, #16
}
 80198e2:	4618      	mov	r0, r3
 80198e4:	46bd      	mov	sp, r7
 80198e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ea:	4770      	bx	lr
 80198ec:	5c001000 	.word	0x5c001000

080198f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80198f0:	b480      	push	{r7}
 80198f2:	b083      	sub	sp, #12
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80198f8:	4b06      	ldr	r3, [pc, #24]	@ (8019914 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80198fa:	685b      	ldr	r3, [r3, #4]
 80198fc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8019900:	4904      	ldr	r1, [pc, #16]	@ (8019914 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	4313      	orrs	r3, r2
 8019906:	604b      	str	r3, [r1, #4]
}
 8019908:	bf00      	nop
 801990a:	370c      	adds	r7, #12
 801990c:	46bd      	mov	sp, r7
 801990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019912:	4770      	bx	lr
 8019914:	58000400 	.word	0x58000400

08019918 <__NVIC_SetPriorityGrouping>:
{
 8019918:	b480      	push	{r7}
 801991a:	b085      	sub	sp, #20
 801991c:	af00      	add	r7, sp, #0
 801991e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	f003 0307 	and.w	r3, r3, #7
 8019926:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019928:	4b0b      	ldr	r3, [pc, #44]	@ (8019958 <__NVIC_SetPriorityGrouping+0x40>)
 801992a:	68db      	ldr	r3, [r3, #12]
 801992c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801992e:	68ba      	ldr	r2, [r7, #8]
 8019930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019934:	4013      	ands	r3, r2
 8019936:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801993c:	68bb      	ldr	r3, [r7, #8]
 801993e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019940:	4b06      	ldr	r3, [pc, #24]	@ (801995c <__NVIC_SetPriorityGrouping+0x44>)
 8019942:	4313      	orrs	r3, r2
 8019944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019946:	4a04      	ldr	r2, [pc, #16]	@ (8019958 <__NVIC_SetPriorityGrouping+0x40>)
 8019948:	68bb      	ldr	r3, [r7, #8]
 801994a:	60d3      	str	r3, [r2, #12]
}
 801994c:	bf00      	nop
 801994e:	3714      	adds	r7, #20
 8019950:	46bd      	mov	sp, r7
 8019952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019956:	4770      	bx	lr
 8019958:	e000ed00 	.word	0xe000ed00
 801995c:	05fa0000 	.word	0x05fa0000

08019960 <__NVIC_GetPriorityGrouping>:
{
 8019960:	b480      	push	{r7}
 8019962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019964:	4b04      	ldr	r3, [pc, #16]	@ (8019978 <__NVIC_GetPriorityGrouping+0x18>)
 8019966:	68db      	ldr	r3, [r3, #12]
 8019968:	0a1b      	lsrs	r3, r3, #8
 801996a:	f003 0307 	and.w	r3, r3, #7
}
 801996e:	4618      	mov	r0, r3
 8019970:	46bd      	mov	sp, r7
 8019972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019976:	4770      	bx	lr
 8019978:	e000ed00 	.word	0xe000ed00

0801997c <__NVIC_EnableIRQ>:
{
 801997c:	b480      	push	{r7}
 801997e:	b083      	sub	sp, #12
 8019980:	af00      	add	r7, sp, #0
 8019982:	4603      	mov	r3, r0
 8019984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801998a:	2b00      	cmp	r3, #0
 801998c:	db0b      	blt.n	80199a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801998e:	88fb      	ldrh	r3, [r7, #6]
 8019990:	f003 021f 	and.w	r2, r3, #31
 8019994:	4907      	ldr	r1, [pc, #28]	@ (80199b4 <__NVIC_EnableIRQ+0x38>)
 8019996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801999a:	095b      	lsrs	r3, r3, #5
 801999c:	2001      	movs	r0, #1
 801999e:	fa00 f202 	lsl.w	r2, r0, r2
 80199a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80199a6:	bf00      	nop
 80199a8:	370c      	adds	r7, #12
 80199aa:	46bd      	mov	sp, r7
 80199ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b0:	4770      	bx	lr
 80199b2:	bf00      	nop
 80199b4:	e000e100 	.word	0xe000e100

080199b8 <__NVIC_SetPriority>:
{
 80199b8:	b480      	push	{r7}
 80199ba:	b083      	sub	sp, #12
 80199bc:	af00      	add	r7, sp, #0
 80199be:	4603      	mov	r3, r0
 80199c0:	6039      	str	r1, [r7, #0]
 80199c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80199c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	db0a      	blt.n	80199e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	b2da      	uxtb	r2, r3
 80199d0:	490c      	ldr	r1, [pc, #48]	@ (8019a04 <__NVIC_SetPriority+0x4c>)
 80199d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80199d6:	0112      	lsls	r2, r2, #4
 80199d8:	b2d2      	uxtb	r2, r2
 80199da:	440b      	add	r3, r1
 80199dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80199e0:	e00a      	b.n	80199f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80199e2:	683b      	ldr	r3, [r7, #0]
 80199e4:	b2da      	uxtb	r2, r3
 80199e6:	4908      	ldr	r1, [pc, #32]	@ (8019a08 <__NVIC_SetPriority+0x50>)
 80199e8:	88fb      	ldrh	r3, [r7, #6]
 80199ea:	f003 030f 	and.w	r3, r3, #15
 80199ee:	3b04      	subs	r3, #4
 80199f0:	0112      	lsls	r2, r2, #4
 80199f2:	b2d2      	uxtb	r2, r2
 80199f4:	440b      	add	r3, r1
 80199f6:	761a      	strb	r2, [r3, #24]
}
 80199f8:	bf00      	nop
 80199fa:	370c      	adds	r7, #12
 80199fc:	46bd      	mov	sp, r7
 80199fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a02:	4770      	bx	lr
 8019a04:	e000e100 	.word	0xe000e100
 8019a08:	e000ed00 	.word	0xe000ed00

08019a0c <NVIC_EncodePriority>:
{
 8019a0c:	b480      	push	{r7}
 8019a0e:	b089      	sub	sp, #36	@ 0x24
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	60f8      	str	r0, [r7, #12]
 8019a14:	60b9      	str	r1, [r7, #8]
 8019a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	f003 0307 	and.w	r3, r3, #7
 8019a1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	f1c3 0307 	rsb	r3, r3, #7
 8019a26:	2b04      	cmp	r3, #4
 8019a28:	bf28      	it	cs
 8019a2a:	2304      	movcs	r3, #4
 8019a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019a2e:	69fb      	ldr	r3, [r7, #28]
 8019a30:	3304      	adds	r3, #4
 8019a32:	2b06      	cmp	r3, #6
 8019a34:	d902      	bls.n	8019a3c <NVIC_EncodePriority+0x30>
 8019a36:	69fb      	ldr	r3, [r7, #28]
 8019a38:	3b03      	subs	r3, #3
 8019a3a:	e000      	b.n	8019a3e <NVIC_EncodePriority+0x32>
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019a40:	f04f 32ff 	mov.w	r2, #4294967295
 8019a44:	69bb      	ldr	r3, [r7, #24]
 8019a46:	fa02 f303 	lsl.w	r3, r2, r3
 8019a4a:	43da      	mvns	r2, r3
 8019a4c:	68bb      	ldr	r3, [r7, #8]
 8019a4e:	401a      	ands	r2, r3
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019a54:	f04f 31ff 	mov.w	r1, #4294967295
 8019a58:	697b      	ldr	r3, [r7, #20]
 8019a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8019a5e:	43d9      	mvns	r1, r3
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019a64:	4313      	orrs	r3, r2
}
 8019a66:	4618      	mov	r0, r3
 8019a68:	3724      	adds	r7, #36	@ 0x24
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a70:	4770      	bx	lr
	...

08019a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b082      	sub	sp, #8
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	3b01      	subs	r3, #1
 8019a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019a84:	d301      	bcc.n	8019a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019a86:	2301      	movs	r3, #1
 8019a88:	e00f      	b.n	8019aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8019ab4 <SysTick_Config+0x40>)
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	3b01      	subs	r3, #1
 8019a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019a92:	210f      	movs	r1, #15
 8019a94:	f04f 30ff 	mov.w	r0, #4294967295
 8019a98:	f7ff ff8e 	bl	80199b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019a9c:	4b05      	ldr	r3, [pc, #20]	@ (8019ab4 <SysTick_Config+0x40>)
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019aa2:	4b04      	ldr	r3, [pc, #16]	@ (8019ab4 <SysTick_Config+0x40>)
 8019aa4:	2207      	movs	r2, #7
 8019aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019aa8:	2300      	movs	r3, #0
}
 8019aaa:	4618      	mov	r0, r3
 8019aac:	3708      	adds	r7, #8
 8019aae:	46bd      	mov	sp, r7
 8019ab0:	bd80      	pop	{r7, pc}
 8019ab2:	bf00      	nop
 8019ab4:	e000e010 	.word	0xe000e010

08019ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019ab8:	b580      	push	{r7, lr}
 8019aba:	b082      	sub	sp, #8
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019ac0:	6878      	ldr	r0, [r7, #4]
 8019ac2:	f7ff ff29 	bl	8019918 <__NVIC_SetPriorityGrouping>
}
 8019ac6:	bf00      	nop
 8019ac8:	3708      	adds	r7, #8
 8019aca:	46bd      	mov	sp, r7
 8019acc:	bd80      	pop	{r7, pc}

08019ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019ace:	b580      	push	{r7, lr}
 8019ad0:	b086      	sub	sp, #24
 8019ad2:	af00      	add	r7, sp, #0
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	60b9      	str	r1, [r7, #8]
 8019ad8:	607a      	str	r2, [r7, #4]
 8019ada:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019adc:	f7ff ff40 	bl	8019960 <__NVIC_GetPriorityGrouping>
 8019ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019ae2:	687a      	ldr	r2, [r7, #4]
 8019ae4:	68b9      	ldr	r1, [r7, #8]
 8019ae6:	6978      	ldr	r0, [r7, #20]
 8019ae8:	f7ff ff90 	bl	8019a0c <NVIC_EncodePriority>
 8019aec:	4602      	mov	r2, r0
 8019aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019af2:	4611      	mov	r1, r2
 8019af4:	4618      	mov	r0, r3
 8019af6:	f7ff ff5f 	bl	80199b8 <__NVIC_SetPriority>
}
 8019afa:	bf00      	nop
 8019afc:	3718      	adds	r7, #24
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}

08019b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019b02:	b580      	push	{r7, lr}
 8019b04:	b082      	sub	sp, #8
 8019b06:	af00      	add	r7, sp, #0
 8019b08:	4603      	mov	r3, r0
 8019b0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b10:	4618      	mov	r0, r3
 8019b12:	f7ff ff33 	bl	801997c <__NVIC_EnableIRQ>
}
 8019b16:	bf00      	nop
 8019b18:	3708      	adds	r7, #8
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	bd80      	pop	{r7, pc}

08019b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019b1e:	b580      	push	{r7, lr}
 8019b20:	b082      	sub	sp, #8
 8019b22:	af00      	add	r7, sp, #0
 8019b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f7ff ffa4 	bl	8019a74 <SysTick_Config>
 8019b2c:	4603      	mov	r3, r0
}
 8019b2e:	4618      	mov	r0, r3
 8019b30:	3708      	adds	r7, #8
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bd80      	pop	{r7, pc}
	...

08019b38 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019b38:	b480      	push	{r7}
 8019b3a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019b3c:	f3bf 8f5f 	dmb	sy
}
 8019b40:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019b42:	4b07      	ldr	r3, [pc, #28]	@ (8019b60 <HAL_MPU_Disable+0x28>)
 8019b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b46:	4a06      	ldr	r2, [pc, #24]	@ (8019b60 <HAL_MPU_Disable+0x28>)
 8019b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019b4c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019b4e:	4b05      	ldr	r3, [pc, #20]	@ (8019b64 <HAL_MPU_Disable+0x2c>)
 8019b50:	2200      	movs	r2, #0
 8019b52:	605a      	str	r2, [r3, #4]
}
 8019b54:	bf00      	nop
 8019b56:	46bd      	mov	sp, r7
 8019b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5c:	4770      	bx	lr
 8019b5e:	bf00      	nop
 8019b60:	e000ed00 	.word	0xe000ed00
 8019b64:	e000ed90 	.word	0xe000ed90

08019b68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8019b68:	b480      	push	{r7}
 8019b6a:	b083      	sub	sp, #12
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019b70:	4a0b      	ldr	r2, [pc, #44]	@ (8019ba0 <HAL_MPU_Enable+0x38>)
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	f043 0301 	orr.w	r3, r3, #1
 8019b78:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8019b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8019ba4 <HAL_MPU_Enable+0x3c>)
 8019b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b7e:	4a09      	ldr	r2, [pc, #36]	@ (8019ba4 <HAL_MPU_Enable+0x3c>)
 8019b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019b84:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8019b86:	f3bf 8f4f 	dsb	sy
}
 8019b8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019b8c:	f3bf 8f6f 	isb	sy
}
 8019b90:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8019b92:	bf00      	nop
 8019b94:	370c      	adds	r7, #12
 8019b96:	46bd      	mov	sp, r7
 8019b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9c:	4770      	bx	lr
 8019b9e:	bf00      	nop
 8019ba0:	e000ed90 	.word	0xe000ed90
 8019ba4:	e000ed00 	.word	0xe000ed00

08019ba8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8019ba8:	b480      	push	{r7}
 8019baa:	b083      	sub	sp, #12
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	785a      	ldrb	r2, [r3, #1]
 8019bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8019c24 <HAL_MPU_ConfigRegion+0x7c>)
 8019bb6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8019c24 <HAL_MPU_ConfigRegion+0x7c>)
 8019bba:	691b      	ldr	r3, [r3, #16]
 8019bbc:	4a19      	ldr	r2, [pc, #100]	@ (8019c24 <HAL_MPU_ConfigRegion+0x7c>)
 8019bbe:	f023 0301 	bic.w	r3, r3, #1
 8019bc2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8019bc4:	4a17      	ldr	r2, [pc, #92]	@ (8019c24 <HAL_MPU_ConfigRegion+0x7c>)
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	685b      	ldr	r3, [r3, #4]
 8019bca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	7b1b      	ldrb	r3, [r3, #12]
 8019bd0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	7adb      	ldrb	r3, [r3, #11]
 8019bd6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019bd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	7a9b      	ldrb	r3, [r3, #10]
 8019bde:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019be0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	7b5b      	ldrb	r3, [r3, #13]
 8019be6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019be8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	7b9b      	ldrb	r3, [r3, #14]
 8019bee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019bf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	7bdb      	ldrb	r3, [r3, #15]
 8019bf6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019bf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	7a5b      	ldrb	r3, [r3, #9]
 8019bfe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019c00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	7a1b      	ldrb	r3, [r3, #8]
 8019c06:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019c08:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019c0a:	687a      	ldr	r2, [r7, #4]
 8019c0c:	7812      	ldrb	r2, [r2, #0]
 8019c0e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019c10:	4a04      	ldr	r2, [pc, #16]	@ (8019c24 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019c12:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019c14:	6113      	str	r3, [r2, #16]
}
 8019c16:	bf00      	nop
 8019c18:	370c      	adds	r7, #12
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c20:	4770      	bx	lr
 8019c22:	bf00      	nop
 8019c24:	e000ed90 	.word	0xe000ed90

08019c28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b086      	sub	sp, #24
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8019c30:	f7ff fe22 	bl	8019878 <HAL_GetTick>
 8019c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d101      	bne.n	8019c40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8019c3c:	2301      	movs	r3, #1
 8019c3e:	e316      	b.n	801a26e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	4a66      	ldr	r2, [pc, #408]	@ (8019de0 <HAL_DMA_Init+0x1b8>)
 8019c46:	4293      	cmp	r3, r2
 8019c48:	d04a      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	4a65      	ldr	r2, [pc, #404]	@ (8019de4 <HAL_DMA_Init+0x1bc>)
 8019c50:	4293      	cmp	r3, r2
 8019c52:	d045      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	4a63      	ldr	r2, [pc, #396]	@ (8019de8 <HAL_DMA_Init+0x1c0>)
 8019c5a:	4293      	cmp	r3, r2
 8019c5c:	d040      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	4a62      	ldr	r2, [pc, #392]	@ (8019dec <HAL_DMA_Init+0x1c4>)
 8019c64:	4293      	cmp	r3, r2
 8019c66:	d03b      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	4a60      	ldr	r2, [pc, #384]	@ (8019df0 <HAL_DMA_Init+0x1c8>)
 8019c6e:	4293      	cmp	r3, r2
 8019c70:	d036      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	4a5f      	ldr	r2, [pc, #380]	@ (8019df4 <HAL_DMA_Init+0x1cc>)
 8019c78:	4293      	cmp	r3, r2
 8019c7a:	d031      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	4a5d      	ldr	r2, [pc, #372]	@ (8019df8 <HAL_DMA_Init+0x1d0>)
 8019c82:	4293      	cmp	r3, r2
 8019c84:	d02c      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8019dfc <HAL_DMA_Init+0x1d4>)
 8019c8c:	4293      	cmp	r3, r2
 8019c8e:	d027      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	4a5a      	ldr	r2, [pc, #360]	@ (8019e00 <HAL_DMA_Init+0x1d8>)
 8019c96:	4293      	cmp	r3, r2
 8019c98:	d022      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	4a59      	ldr	r2, [pc, #356]	@ (8019e04 <HAL_DMA_Init+0x1dc>)
 8019ca0:	4293      	cmp	r3, r2
 8019ca2:	d01d      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	4a57      	ldr	r2, [pc, #348]	@ (8019e08 <HAL_DMA_Init+0x1e0>)
 8019caa:	4293      	cmp	r3, r2
 8019cac:	d018      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	4a56      	ldr	r2, [pc, #344]	@ (8019e0c <HAL_DMA_Init+0x1e4>)
 8019cb4:	4293      	cmp	r3, r2
 8019cb6:	d013      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	4a54      	ldr	r2, [pc, #336]	@ (8019e10 <HAL_DMA_Init+0x1e8>)
 8019cbe:	4293      	cmp	r3, r2
 8019cc0:	d00e      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	4a53      	ldr	r2, [pc, #332]	@ (8019e14 <HAL_DMA_Init+0x1ec>)
 8019cc8:	4293      	cmp	r3, r2
 8019cca:	d009      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	4a51      	ldr	r2, [pc, #324]	@ (8019e18 <HAL_DMA_Init+0x1f0>)
 8019cd2:	4293      	cmp	r3, r2
 8019cd4:	d004      	beq.n	8019ce0 <HAL_DMA_Init+0xb8>
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	4a50      	ldr	r2, [pc, #320]	@ (8019e1c <HAL_DMA_Init+0x1f4>)
 8019cdc:	4293      	cmp	r3, r2
 8019cde:	d101      	bne.n	8019ce4 <HAL_DMA_Init+0xbc>
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	e000      	b.n	8019ce6 <HAL_DMA_Init+0xbe>
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	f000 813b 	beq.w	8019f62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	2202      	movs	r2, #2
 8019cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	4a37      	ldr	r2, [pc, #220]	@ (8019de0 <HAL_DMA_Init+0x1b8>)
 8019d02:	4293      	cmp	r3, r2
 8019d04:	d04a      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	4a36      	ldr	r2, [pc, #216]	@ (8019de4 <HAL_DMA_Init+0x1bc>)
 8019d0c:	4293      	cmp	r3, r2
 8019d0e:	d045      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	4a34      	ldr	r2, [pc, #208]	@ (8019de8 <HAL_DMA_Init+0x1c0>)
 8019d16:	4293      	cmp	r3, r2
 8019d18:	d040      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	4a33      	ldr	r2, [pc, #204]	@ (8019dec <HAL_DMA_Init+0x1c4>)
 8019d20:	4293      	cmp	r3, r2
 8019d22:	d03b      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	4a31      	ldr	r2, [pc, #196]	@ (8019df0 <HAL_DMA_Init+0x1c8>)
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	d036      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	4a30      	ldr	r2, [pc, #192]	@ (8019df4 <HAL_DMA_Init+0x1cc>)
 8019d34:	4293      	cmp	r3, r2
 8019d36:	d031      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8019df8 <HAL_DMA_Init+0x1d0>)
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	d02c      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	4a2d      	ldr	r2, [pc, #180]	@ (8019dfc <HAL_DMA_Init+0x1d4>)
 8019d48:	4293      	cmp	r3, r2
 8019d4a:	d027      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	4a2b      	ldr	r2, [pc, #172]	@ (8019e00 <HAL_DMA_Init+0x1d8>)
 8019d52:	4293      	cmp	r3, r2
 8019d54:	d022      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8019e04 <HAL_DMA_Init+0x1dc>)
 8019d5c:	4293      	cmp	r3, r2
 8019d5e:	d01d      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	4a28      	ldr	r2, [pc, #160]	@ (8019e08 <HAL_DMA_Init+0x1e0>)
 8019d66:	4293      	cmp	r3, r2
 8019d68:	d018      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4a27      	ldr	r2, [pc, #156]	@ (8019e0c <HAL_DMA_Init+0x1e4>)
 8019d70:	4293      	cmp	r3, r2
 8019d72:	d013      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	4a25      	ldr	r2, [pc, #148]	@ (8019e10 <HAL_DMA_Init+0x1e8>)
 8019d7a:	4293      	cmp	r3, r2
 8019d7c:	d00e      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	4a24      	ldr	r2, [pc, #144]	@ (8019e14 <HAL_DMA_Init+0x1ec>)
 8019d84:	4293      	cmp	r3, r2
 8019d86:	d009      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	4a22      	ldr	r2, [pc, #136]	@ (8019e18 <HAL_DMA_Init+0x1f0>)
 8019d8e:	4293      	cmp	r3, r2
 8019d90:	d004      	beq.n	8019d9c <HAL_DMA_Init+0x174>
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4a21      	ldr	r2, [pc, #132]	@ (8019e1c <HAL_DMA_Init+0x1f4>)
 8019d98:	4293      	cmp	r3, r2
 8019d9a:	d108      	bne.n	8019dae <HAL_DMA_Init+0x186>
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	681a      	ldr	r2, [r3, #0]
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	f022 0201 	bic.w	r2, r2, #1
 8019daa:	601a      	str	r2, [r3, #0]
 8019dac:	e007      	b.n	8019dbe <HAL_DMA_Init+0x196>
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	681a      	ldr	r2, [r3, #0]
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f022 0201 	bic.w	r2, r2, #1
 8019dbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019dbe:	e02f      	b.n	8019e20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8019dc0:	f7ff fd5a 	bl	8019878 <HAL_GetTick>
 8019dc4:	4602      	mov	r2, r0
 8019dc6:	693b      	ldr	r3, [r7, #16]
 8019dc8:	1ad3      	subs	r3, r2, r3
 8019dca:	2b05      	cmp	r3, #5
 8019dcc:	d928      	bls.n	8019e20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	2220      	movs	r2, #32
 8019dd2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	2203      	movs	r2, #3
 8019dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8019ddc:	2301      	movs	r3, #1
 8019dde:	e246      	b.n	801a26e <HAL_DMA_Init+0x646>
 8019de0:	40020010 	.word	0x40020010
 8019de4:	40020028 	.word	0x40020028
 8019de8:	40020040 	.word	0x40020040
 8019dec:	40020058 	.word	0x40020058
 8019df0:	40020070 	.word	0x40020070
 8019df4:	40020088 	.word	0x40020088
 8019df8:	400200a0 	.word	0x400200a0
 8019dfc:	400200b8 	.word	0x400200b8
 8019e00:	40020410 	.word	0x40020410
 8019e04:	40020428 	.word	0x40020428
 8019e08:	40020440 	.word	0x40020440
 8019e0c:	40020458 	.word	0x40020458
 8019e10:	40020470 	.word	0x40020470
 8019e14:	40020488 	.word	0x40020488
 8019e18:	400204a0 	.word	0x400204a0
 8019e1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	f003 0301 	and.w	r3, r3, #1
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d1c8      	bne.n	8019dc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8019e36:	697a      	ldr	r2, [r7, #20]
 8019e38:	4b83      	ldr	r3, [pc, #524]	@ (801a048 <HAL_DMA_Init+0x420>)
 8019e3a:	4013      	ands	r3, r2
 8019e3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8019e46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	691b      	ldr	r3, [r3, #16]
 8019e4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019e52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	699b      	ldr	r3, [r3, #24]
 8019e58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019e5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	6a1b      	ldr	r3, [r3, #32]
 8019e64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8019e66:	697a      	ldr	r2, [r7, #20]
 8019e68:	4313      	orrs	r3, r2
 8019e6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e70:	2b04      	cmp	r3, #4
 8019e72:	d107      	bne.n	8019e84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019e7c:	4313      	orrs	r3, r2
 8019e7e:	697a      	ldr	r2, [r7, #20]
 8019e80:	4313      	orrs	r3, r2
 8019e82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8019e84:	4b71      	ldr	r3, [pc, #452]	@ (801a04c <HAL_DMA_Init+0x424>)
 8019e86:	681a      	ldr	r2, [r3, #0]
 8019e88:	4b71      	ldr	r3, [pc, #452]	@ (801a050 <HAL_DMA_Init+0x428>)
 8019e8a:	4013      	ands	r3, r2
 8019e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019e90:	d328      	bcc.n	8019ee4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	685b      	ldr	r3, [r3, #4]
 8019e96:	2b28      	cmp	r3, #40	@ 0x28
 8019e98:	d903      	bls.n	8019ea2 <HAL_DMA_Init+0x27a>
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	685b      	ldr	r3, [r3, #4]
 8019e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ea0:	d917      	bls.n	8019ed2 <HAL_DMA_Init+0x2aa>
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	685b      	ldr	r3, [r3, #4]
 8019ea6:	2b3e      	cmp	r3, #62	@ 0x3e
 8019ea8:	d903      	bls.n	8019eb2 <HAL_DMA_Init+0x28a>
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	2b42      	cmp	r3, #66	@ 0x42
 8019eb0:	d90f      	bls.n	8019ed2 <HAL_DMA_Init+0x2aa>
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	685b      	ldr	r3, [r3, #4]
 8019eb6:	2b46      	cmp	r3, #70	@ 0x46
 8019eb8:	d903      	bls.n	8019ec2 <HAL_DMA_Init+0x29a>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	2b48      	cmp	r3, #72	@ 0x48
 8019ec0:	d907      	bls.n	8019ed2 <HAL_DMA_Init+0x2aa>
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	685b      	ldr	r3, [r3, #4]
 8019ec6:	2b4e      	cmp	r3, #78	@ 0x4e
 8019ec8:	d905      	bls.n	8019ed6 <HAL_DMA_Init+0x2ae>
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	2b52      	cmp	r3, #82	@ 0x52
 8019ed0:	d801      	bhi.n	8019ed6 <HAL_DMA_Init+0x2ae>
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	e000      	b.n	8019ed8 <HAL_DMA_Init+0x2b0>
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d003      	beq.n	8019ee4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8019edc:	697b      	ldr	r3, [r7, #20]
 8019ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019ee2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	697a      	ldr	r2, [r7, #20]
 8019eea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	695b      	ldr	r3, [r3, #20]
 8019ef2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8019ef4:	697b      	ldr	r3, [r7, #20]
 8019ef6:	f023 0307 	bic.w	r3, r3, #7
 8019efa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f00:	697a      	ldr	r2, [r7, #20]
 8019f02:	4313      	orrs	r3, r2
 8019f04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f0a:	2b04      	cmp	r3, #4
 8019f0c:	d117      	bne.n	8019f3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f12:	697a      	ldr	r2, [r7, #20]
 8019f14:	4313      	orrs	r3, r2
 8019f16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d00e      	beq.n	8019f3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8019f20:	6878      	ldr	r0, [r7, #4]
 8019f22:	f001 fbff 	bl	801b724 <DMA_CheckFifoParam>
 8019f26:	4603      	mov	r3, r0
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d008      	beq.n	8019f3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2240      	movs	r2, #64	@ 0x40
 8019f30:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	2201      	movs	r2, #1
 8019f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8019f3a:	2301      	movs	r3, #1
 8019f3c:	e197      	b.n	801a26e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	697a      	ldr	r2, [r7, #20]
 8019f44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	f001 fb3a 	bl	801b5c0 <DMA_CalcBaseAndBitshift>
 8019f4c:	4603      	mov	r3, r0
 8019f4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019f54:	f003 031f 	and.w	r3, r3, #31
 8019f58:	223f      	movs	r2, #63	@ 0x3f
 8019f5a:	409a      	lsls	r2, r3
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	609a      	str	r2, [r3, #8]
 8019f60:	e0cd      	b.n	801a0fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	4a3b      	ldr	r2, [pc, #236]	@ (801a054 <HAL_DMA_Init+0x42c>)
 8019f68:	4293      	cmp	r3, r2
 8019f6a:	d022      	beq.n	8019fb2 <HAL_DMA_Init+0x38a>
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	4a39      	ldr	r2, [pc, #228]	@ (801a058 <HAL_DMA_Init+0x430>)
 8019f72:	4293      	cmp	r3, r2
 8019f74:	d01d      	beq.n	8019fb2 <HAL_DMA_Init+0x38a>
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	4a38      	ldr	r2, [pc, #224]	@ (801a05c <HAL_DMA_Init+0x434>)
 8019f7c:	4293      	cmp	r3, r2
 8019f7e:	d018      	beq.n	8019fb2 <HAL_DMA_Init+0x38a>
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	4a36      	ldr	r2, [pc, #216]	@ (801a060 <HAL_DMA_Init+0x438>)
 8019f86:	4293      	cmp	r3, r2
 8019f88:	d013      	beq.n	8019fb2 <HAL_DMA_Init+0x38a>
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	4a35      	ldr	r2, [pc, #212]	@ (801a064 <HAL_DMA_Init+0x43c>)
 8019f90:	4293      	cmp	r3, r2
 8019f92:	d00e      	beq.n	8019fb2 <HAL_DMA_Init+0x38a>
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	4a33      	ldr	r2, [pc, #204]	@ (801a068 <HAL_DMA_Init+0x440>)
 8019f9a:	4293      	cmp	r3, r2
 8019f9c:	d009      	beq.n	8019fb2 <HAL_DMA_Init+0x38a>
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	4a32      	ldr	r2, [pc, #200]	@ (801a06c <HAL_DMA_Init+0x444>)
 8019fa4:	4293      	cmp	r3, r2
 8019fa6:	d004      	beq.n	8019fb2 <HAL_DMA_Init+0x38a>
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	4a30      	ldr	r2, [pc, #192]	@ (801a070 <HAL_DMA_Init+0x448>)
 8019fae:	4293      	cmp	r3, r2
 8019fb0:	d101      	bne.n	8019fb6 <HAL_DMA_Init+0x38e>
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	e000      	b.n	8019fb8 <HAL_DMA_Init+0x390>
 8019fb6:	2300      	movs	r3, #0
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	f000 8097 	beq.w	801a0ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	4a24      	ldr	r2, [pc, #144]	@ (801a054 <HAL_DMA_Init+0x42c>)
 8019fc4:	4293      	cmp	r3, r2
 8019fc6:	d021      	beq.n	801a00c <HAL_DMA_Init+0x3e4>
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	4a22      	ldr	r2, [pc, #136]	@ (801a058 <HAL_DMA_Init+0x430>)
 8019fce:	4293      	cmp	r3, r2
 8019fd0:	d01c      	beq.n	801a00c <HAL_DMA_Init+0x3e4>
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	4a21      	ldr	r2, [pc, #132]	@ (801a05c <HAL_DMA_Init+0x434>)
 8019fd8:	4293      	cmp	r3, r2
 8019fda:	d017      	beq.n	801a00c <HAL_DMA_Init+0x3e4>
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	4a1f      	ldr	r2, [pc, #124]	@ (801a060 <HAL_DMA_Init+0x438>)
 8019fe2:	4293      	cmp	r3, r2
 8019fe4:	d012      	beq.n	801a00c <HAL_DMA_Init+0x3e4>
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	4a1e      	ldr	r2, [pc, #120]	@ (801a064 <HAL_DMA_Init+0x43c>)
 8019fec:	4293      	cmp	r3, r2
 8019fee:	d00d      	beq.n	801a00c <HAL_DMA_Init+0x3e4>
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	4a1c      	ldr	r2, [pc, #112]	@ (801a068 <HAL_DMA_Init+0x440>)
 8019ff6:	4293      	cmp	r3, r2
 8019ff8:	d008      	beq.n	801a00c <HAL_DMA_Init+0x3e4>
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	4a1b      	ldr	r2, [pc, #108]	@ (801a06c <HAL_DMA_Init+0x444>)
 801a000:	4293      	cmp	r3, r2
 801a002:	d003      	beq.n	801a00c <HAL_DMA_Init+0x3e4>
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	4a19      	ldr	r2, [pc, #100]	@ (801a070 <HAL_DMA_Init+0x448>)
 801a00a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	2202      	movs	r2, #2
 801a010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	2200      	movs	r2, #0
 801a018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801a024:	697a      	ldr	r2, [r7, #20]
 801a026:	4b13      	ldr	r3, [pc, #76]	@ (801a074 <HAL_DMA_Init+0x44c>)
 801a028:	4013      	ands	r3, r2
 801a02a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	689b      	ldr	r3, [r3, #8]
 801a030:	2b40      	cmp	r3, #64	@ 0x40
 801a032:	d021      	beq.n	801a078 <HAL_DMA_Init+0x450>
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	689b      	ldr	r3, [r3, #8]
 801a038:	2b80      	cmp	r3, #128	@ 0x80
 801a03a:	d102      	bne.n	801a042 <HAL_DMA_Init+0x41a>
 801a03c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a040:	e01b      	b.n	801a07a <HAL_DMA_Init+0x452>
 801a042:	2300      	movs	r3, #0
 801a044:	e019      	b.n	801a07a <HAL_DMA_Init+0x452>
 801a046:	bf00      	nop
 801a048:	fe10803f 	.word	0xfe10803f
 801a04c:	5c001000 	.word	0x5c001000
 801a050:	ffff0000 	.word	0xffff0000
 801a054:	58025408 	.word	0x58025408
 801a058:	5802541c 	.word	0x5802541c
 801a05c:	58025430 	.word	0x58025430
 801a060:	58025444 	.word	0x58025444
 801a064:	58025458 	.word	0x58025458
 801a068:	5802546c 	.word	0x5802546c
 801a06c:	58025480 	.word	0x58025480
 801a070:	58025494 	.word	0x58025494
 801a074:	fffe000f 	.word	0xfffe000f
 801a078:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a07a:	687a      	ldr	r2, [r7, #4]
 801a07c:	68d2      	ldr	r2, [r2, #12]
 801a07e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a080:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	691b      	ldr	r3, [r3, #16]
 801a086:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a088:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	695b      	ldr	r3, [r3, #20]
 801a08e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a090:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	699b      	ldr	r3, [r3, #24]
 801a096:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a098:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	69db      	ldr	r3, [r3, #28]
 801a09e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a0a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	6a1b      	ldr	r3, [r3, #32]
 801a0a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a0a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a0aa:	697a      	ldr	r2, [r7, #20]
 801a0ac:	4313      	orrs	r3, r2
 801a0ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	697a      	ldr	r2, [r7, #20]
 801a0b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	461a      	mov	r2, r3
 801a0be:	4b6e      	ldr	r3, [pc, #440]	@ (801a278 <HAL_DMA_Init+0x650>)
 801a0c0:	4413      	add	r3, r2
 801a0c2:	4a6e      	ldr	r2, [pc, #440]	@ (801a27c <HAL_DMA_Init+0x654>)
 801a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 801a0c8:	091b      	lsrs	r3, r3, #4
 801a0ca:	009a      	lsls	r2, r3, #2
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a0d0:	6878      	ldr	r0, [r7, #4]
 801a0d2:	f001 fa75 	bl	801b5c0 <DMA_CalcBaseAndBitshift>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a0de:	f003 031f 	and.w	r3, r3, #31
 801a0e2:	2201      	movs	r2, #1
 801a0e4:	409a      	lsls	r2, r3
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	605a      	str	r2, [r3, #4]
 801a0ea:	e008      	b.n	801a0fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	2240      	movs	r2, #64	@ 0x40
 801a0f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	2203      	movs	r2, #3
 801a0f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	e0b7      	b.n	801a26e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	4a5f      	ldr	r2, [pc, #380]	@ (801a280 <HAL_DMA_Init+0x658>)
 801a104:	4293      	cmp	r3, r2
 801a106:	d072      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	4a5d      	ldr	r2, [pc, #372]	@ (801a284 <HAL_DMA_Init+0x65c>)
 801a10e:	4293      	cmp	r3, r2
 801a110:	d06d      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	4a5c      	ldr	r2, [pc, #368]	@ (801a288 <HAL_DMA_Init+0x660>)
 801a118:	4293      	cmp	r3, r2
 801a11a:	d068      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	4a5a      	ldr	r2, [pc, #360]	@ (801a28c <HAL_DMA_Init+0x664>)
 801a122:	4293      	cmp	r3, r2
 801a124:	d063      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	4a59      	ldr	r2, [pc, #356]	@ (801a290 <HAL_DMA_Init+0x668>)
 801a12c:	4293      	cmp	r3, r2
 801a12e:	d05e      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	4a57      	ldr	r2, [pc, #348]	@ (801a294 <HAL_DMA_Init+0x66c>)
 801a136:	4293      	cmp	r3, r2
 801a138:	d059      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	4a56      	ldr	r2, [pc, #344]	@ (801a298 <HAL_DMA_Init+0x670>)
 801a140:	4293      	cmp	r3, r2
 801a142:	d054      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	4a54      	ldr	r2, [pc, #336]	@ (801a29c <HAL_DMA_Init+0x674>)
 801a14a:	4293      	cmp	r3, r2
 801a14c:	d04f      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	4a53      	ldr	r2, [pc, #332]	@ (801a2a0 <HAL_DMA_Init+0x678>)
 801a154:	4293      	cmp	r3, r2
 801a156:	d04a      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	4a51      	ldr	r2, [pc, #324]	@ (801a2a4 <HAL_DMA_Init+0x67c>)
 801a15e:	4293      	cmp	r3, r2
 801a160:	d045      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	4a50      	ldr	r2, [pc, #320]	@ (801a2a8 <HAL_DMA_Init+0x680>)
 801a168:	4293      	cmp	r3, r2
 801a16a:	d040      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	4a4e      	ldr	r2, [pc, #312]	@ (801a2ac <HAL_DMA_Init+0x684>)
 801a172:	4293      	cmp	r3, r2
 801a174:	d03b      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	4a4d      	ldr	r2, [pc, #308]	@ (801a2b0 <HAL_DMA_Init+0x688>)
 801a17c:	4293      	cmp	r3, r2
 801a17e:	d036      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	4a4b      	ldr	r2, [pc, #300]	@ (801a2b4 <HAL_DMA_Init+0x68c>)
 801a186:	4293      	cmp	r3, r2
 801a188:	d031      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	4a4a      	ldr	r2, [pc, #296]	@ (801a2b8 <HAL_DMA_Init+0x690>)
 801a190:	4293      	cmp	r3, r2
 801a192:	d02c      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	4a48      	ldr	r2, [pc, #288]	@ (801a2bc <HAL_DMA_Init+0x694>)
 801a19a:	4293      	cmp	r3, r2
 801a19c:	d027      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	4a47      	ldr	r2, [pc, #284]	@ (801a2c0 <HAL_DMA_Init+0x698>)
 801a1a4:	4293      	cmp	r3, r2
 801a1a6:	d022      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	4a45      	ldr	r2, [pc, #276]	@ (801a2c4 <HAL_DMA_Init+0x69c>)
 801a1ae:	4293      	cmp	r3, r2
 801a1b0:	d01d      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	4a44      	ldr	r2, [pc, #272]	@ (801a2c8 <HAL_DMA_Init+0x6a0>)
 801a1b8:	4293      	cmp	r3, r2
 801a1ba:	d018      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	4a42      	ldr	r2, [pc, #264]	@ (801a2cc <HAL_DMA_Init+0x6a4>)
 801a1c2:	4293      	cmp	r3, r2
 801a1c4:	d013      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	4a41      	ldr	r2, [pc, #260]	@ (801a2d0 <HAL_DMA_Init+0x6a8>)
 801a1cc:	4293      	cmp	r3, r2
 801a1ce:	d00e      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	4a3f      	ldr	r2, [pc, #252]	@ (801a2d4 <HAL_DMA_Init+0x6ac>)
 801a1d6:	4293      	cmp	r3, r2
 801a1d8:	d009      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	4a3e      	ldr	r2, [pc, #248]	@ (801a2d8 <HAL_DMA_Init+0x6b0>)
 801a1e0:	4293      	cmp	r3, r2
 801a1e2:	d004      	beq.n	801a1ee <HAL_DMA_Init+0x5c6>
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	4a3c      	ldr	r2, [pc, #240]	@ (801a2dc <HAL_DMA_Init+0x6b4>)
 801a1ea:	4293      	cmp	r3, r2
 801a1ec:	d101      	bne.n	801a1f2 <HAL_DMA_Init+0x5ca>
 801a1ee:	2301      	movs	r3, #1
 801a1f0:	e000      	b.n	801a1f4 <HAL_DMA_Init+0x5cc>
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d032      	beq.n	801a25e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a1f8:	6878      	ldr	r0, [r7, #4]
 801a1fa:	f001 fb0f 	bl	801b81c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	689b      	ldr	r3, [r3, #8]
 801a202:	2b80      	cmp	r3, #128	@ 0x80
 801a204:	d102      	bne.n	801a20c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2200      	movs	r2, #0
 801a20a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	685a      	ldr	r2, [r3, #4]
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a214:	b2d2      	uxtb	r2, r2
 801a216:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a21c:	687a      	ldr	r2, [r7, #4]
 801a21e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a220:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d010      	beq.n	801a24c <HAL_DMA_Init+0x624>
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	685b      	ldr	r3, [r3, #4]
 801a22e:	2b08      	cmp	r3, #8
 801a230:	d80c      	bhi.n	801a24c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a232:	6878      	ldr	r0, [r7, #4]
 801a234:	f001 fb8c 	bl	801b950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a23c:	2200      	movs	r2, #0
 801a23e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a244:	687a      	ldr	r2, [r7, #4]
 801a246:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a248:	605a      	str	r2, [r3, #4]
 801a24a:	e008      	b.n	801a25e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2200      	movs	r2, #0
 801a250:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	2200      	movs	r2, #0
 801a256:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	2200      	movs	r2, #0
 801a25c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	2200      	movs	r2, #0
 801a262:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	2201      	movs	r2, #1
 801a268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801a26c:	2300      	movs	r3, #0
}
 801a26e:	4618      	mov	r0, r3
 801a270:	3718      	adds	r7, #24
 801a272:	46bd      	mov	sp, r7
 801a274:	bd80      	pop	{r7, pc}
 801a276:	bf00      	nop
 801a278:	a7fdabf8 	.word	0xa7fdabf8
 801a27c:	cccccccd 	.word	0xcccccccd
 801a280:	40020010 	.word	0x40020010
 801a284:	40020028 	.word	0x40020028
 801a288:	40020040 	.word	0x40020040
 801a28c:	40020058 	.word	0x40020058
 801a290:	40020070 	.word	0x40020070
 801a294:	40020088 	.word	0x40020088
 801a298:	400200a0 	.word	0x400200a0
 801a29c:	400200b8 	.word	0x400200b8
 801a2a0:	40020410 	.word	0x40020410
 801a2a4:	40020428 	.word	0x40020428
 801a2a8:	40020440 	.word	0x40020440
 801a2ac:	40020458 	.word	0x40020458
 801a2b0:	40020470 	.word	0x40020470
 801a2b4:	40020488 	.word	0x40020488
 801a2b8:	400204a0 	.word	0x400204a0
 801a2bc:	400204b8 	.word	0x400204b8
 801a2c0:	58025408 	.word	0x58025408
 801a2c4:	5802541c 	.word	0x5802541c
 801a2c8:	58025430 	.word	0x58025430
 801a2cc:	58025444 	.word	0x58025444
 801a2d0:	58025458 	.word	0x58025458
 801a2d4:	5802546c 	.word	0x5802546c
 801a2d8:	58025480 	.word	0x58025480
 801a2dc:	58025494 	.word	0x58025494

0801a2e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b084      	sub	sp, #16
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d101      	bne.n	801a2f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	e237      	b.n	801a762 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a2f8:	b2db      	uxtb	r3, r3
 801a2fa:	2b02      	cmp	r3, #2
 801a2fc:	d004      	beq.n	801a308 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	2280      	movs	r2, #128	@ 0x80
 801a302:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801a304:	2301      	movs	r3, #1
 801a306:	e22c      	b.n	801a762 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	4a5c      	ldr	r2, [pc, #368]	@ (801a480 <HAL_DMA_Abort_IT+0x1a0>)
 801a30e:	4293      	cmp	r3, r2
 801a310:	d04a      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	4a5b      	ldr	r2, [pc, #364]	@ (801a484 <HAL_DMA_Abort_IT+0x1a4>)
 801a318:	4293      	cmp	r3, r2
 801a31a:	d045      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	4a59      	ldr	r2, [pc, #356]	@ (801a488 <HAL_DMA_Abort_IT+0x1a8>)
 801a322:	4293      	cmp	r3, r2
 801a324:	d040      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	4a58      	ldr	r2, [pc, #352]	@ (801a48c <HAL_DMA_Abort_IT+0x1ac>)
 801a32c:	4293      	cmp	r3, r2
 801a32e:	d03b      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	4a56      	ldr	r2, [pc, #344]	@ (801a490 <HAL_DMA_Abort_IT+0x1b0>)
 801a336:	4293      	cmp	r3, r2
 801a338:	d036      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	4a55      	ldr	r2, [pc, #340]	@ (801a494 <HAL_DMA_Abort_IT+0x1b4>)
 801a340:	4293      	cmp	r3, r2
 801a342:	d031      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	4a53      	ldr	r2, [pc, #332]	@ (801a498 <HAL_DMA_Abort_IT+0x1b8>)
 801a34a:	4293      	cmp	r3, r2
 801a34c:	d02c      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	4a52      	ldr	r2, [pc, #328]	@ (801a49c <HAL_DMA_Abort_IT+0x1bc>)
 801a354:	4293      	cmp	r3, r2
 801a356:	d027      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	4a50      	ldr	r2, [pc, #320]	@ (801a4a0 <HAL_DMA_Abort_IT+0x1c0>)
 801a35e:	4293      	cmp	r3, r2
 801a360:	d022      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	4a4f      	ldr	r2, [pc, #316]	@ (801a4a4 <HAL_DMA_Abort_IT+0x1c4>)
 801a368:	4293      	cmp	r3, r2
 801a36a:	d01d      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	4a4d      	ldr	r2, [pc, #308]	@ (801a4a8 <HAL_DMA_Abort_IT+0x1c8>)
 801a372:	4293      	cmp	r3, r2
 801a374:	d018      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	4a4c      	ldr	r2, [pc, #304]	@ (801a4ac <HAL_DMA_Abort_IT+0x1cc>)
 801a37c:	4293      	cmp	r3, r2
 801a37e:	d013      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	4a4a      	ldr	r2, [pc, #296]	@ (801a4b0 <HAL_DMA_Abort_IT+0x1d0>)
 801a386:	4293      	cmp	r3, r2
 801a388:	d00e      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	4a49      	ldr	r2, [pc, #292]	@ (801a4b4 <HAL_DMA_Abort_IT+0x1d4>)
 801a390:	4293      	cmp	r3, r2
 801a392:	d009      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	4a47      	ldr	r2, [pc, #284]	@ (801a4b8 <HAL_DMA_Abort_IT+0x1d8>)
 801a39a:	4293      	cmp	r3, r2
 801a39c:	d004      	beq.n	801a3a8 <HAL_DMA_Abort_IT+0xc8>
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	4a46      	ldr	r2, [pc, #280]	@ (801a4bc <HAL_DMA_Abort_IT+0x1dc>)
 801a3a4:	4293      	cmp	r3, r2
 801a3a6:	d101      	bne.n	801a3ac <HAL_DMA_Abort_IT+0xcc>
 801a3a8:	2301      	movs	r3, #1
 801a3aa:	e000      	b.n	801a3ae <HAL_DMA_Abort_IT+0xce>
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	f000 8086 	beq.w	801a4c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	2204      	movs	r2, #4
 801a3b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	4a2f      	ldr	r2, [pc, #188]	@ (801a480 <HAL_DMA_Abort_IT+0x1a0>)
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	d04a      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	4a2e      	ldr	r2, [pc, #184]	@ (801a484 <HAL_DMA_Abort_IT+0x1a4>)
 801a3cc:	4293      	cmp	r3, r2
 801a3ce:	d045      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	4a2c      	ldr	r2, [pc, #176]	@ (801a488 <HAL_DMA_Abort_IT+0x1a8>)
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	d040      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	4a2b      	ldr	r2, [pc, #172]	@ (801a48c <HAL_DMA_Abort_IT+0x1ac>)
 801a3e0:	4293      	cmp	r3, r2
 801a3e2:	d03b      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	4a29      	ldr	r2, [pc, #164]	@ (801a490 <HAL_DMA_Abort_IT+0x1b0>)
 801a3ea:	4293      	cmp	r3, r2
 801a3ec:	d036      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	4a28      	ldr	r2, [pc, #160]	@ (801a494 <HAL_DMA_Abort_IT+0x1b4>)
 801a3f4:	4293      	cmp	r3, r2
 801a3f6:	d031      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	4a26      	ldr	r2, [pc, #152]	@ (801a498 <HAL_DMA_Abort_IT+0x1b8>)
 801a3fe:	4293      	cmp	r3, r2
 801a400:	d02c      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	4a25      	ldr	r2, [pc, #148]	@ (801a49c <HAL_DMA_Abort_IT+0x1bc>)
 801a408:	4293      	cmp	r3, r2
 801a40a:	d027      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	4a23      	ldr	r2, [pc, #140]	@ (801a4a0 <HAL_DMA_Abort_IT+0x1c0>)
 801a412:	4293      	cmp	r3, r2
 801a414:	d022      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	4a22      	ldr	r2, [pc, #136]	@ (801a4a4 <HAL_DMA_Abort_IT+0x1c4>)
 801a41c:	4293      	cmp	r3, r2
 801a41e:	d01d      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	4a20      	ldr	r2, [pc, #128]	@ (801a4a8 <HAL_DMA_Abort_IT+0x1c8>)
 801a426:	4293      	cmp	r3, r2
 801a428:	d018      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	4a1f      	ldr	r2, [pc, #124]	@ (801a4ac <HAL_DMA_Abort_IT+0x1cc>)
 801a430:	4293      	cmp	r3, r2
 801a432:	d013      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	4a1d      	ldr	r2, [pc, #116]	@ (801a4b0 <HAL_DMA_Abort_IT+0x1d0>)
 801a43a:	4293      	cmp	r3, r2
 801a43c:	d00e      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	4a1c      	ldr	r2, [pc, #112]	@ (801a4b4 <HAL_DMA_Abort_IT+0x1d4>)
 801a444:	4293      	cmp	r3, r2
 801a446:	d009      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	4a1a      	ldr	r2, [pc, #104]	@ (801a4b8 <HAL_DMA_Abort_IT+0x1d8>)
 801a44e:	4293      	cmp	r3, r2
 801a450:	d004      	beq.n	801a45c <HAL_DMA_Abort_IT+0x17c>
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	4a19      	ldr	r2, [pc, #100]	@ (801a4bc <HAL_DMA_Abort_IT+0x1dc>)
 801a458:	4293      	cmp	r3, r2
 801a45a:	d108      	bne.n	801a46e <HAL_DMA_Abort_IT+0x18e>
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	681a      	ldr	r2, [r3, #0]
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	f022 0201 	bic.w	r2, r2, #1
 801a46a:	601a      	str	r2, [r3, #0]
 801a46c:	e178      	b.n	801a760 <HAL_DMA_Abort_IT+0x480>
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	681a      	ldr	r2, [r3, #0]
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	f022 0201 	bic.w	r2, r2, #1
 801a47c:	601a      	str	r2, [r3, #0]
 801a47e:	e16f      	b.n	801a760 <HAL_DMA_Abort_IT+0x480>
 801a480:	40020010 	.word	0x40020010
 801a484:	40020028 	.word	0x40020028
 801a488:	40020040 	.word	0x40020040
 801a48c:	40020058 	.word	0x40020058
 801a490:	40020070 	.word	0x40020070
 801a494:	40020088 	.word	0x40020088
 801a498:	400200a0 	.word	0x400200a0
 801a49c:	400200b8 	.word	0x400200b8
 801a4a0:	40020410 	.word	0x40020410
 801a4a4:	40020428 	.word	0x40020428
 801a4a8:	40020440 	.word	0x40020440
 801a4ac:	40020458 	.word	0x40020458
 801a4b0:	40020470 	.word	0x40020470
 801a4b4:	40020488 	.word	0x40020488
 801a4b8:	400204a0 	.word	0x400204a0
 801a4bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	681a      	ldr	r2, [r3, #0]
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	f022 020e 	bic.w	r2, r2, #14
 801a4ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	4a6c      	ldr	r2, [pc, #432]	@ (801a688 <HAL_DMA_Abort_IT+0x3a8>)
 801a4d6:	4293      	cmp	r3, r2
 801a4d8:	d04a      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	4a6b      	ldr	r2, [pc, #428]	@ (801a68c <HAL_DMA_Abort_IT+0x3ac>)
 801a4e0:	4293      	cmp	r3, r2
 801a4e2:	d045      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	4a69      	ldr	r2, [pc, #420]	@ (801a690 <HAL_DMA_Abort_IT+0x3b0>)
 801a4ea:	4293      	cmp	r3, r2
 801a4ec:	d040      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	4a68      	ldr	r2, [pc, #416]	@ (801a694 <HAL_DMA_Abort_IT+0x3b4>)
 801a4f4:	4293      	cmp	r3, r2
 801a4f6:	d03b      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	4a66      	ldr	r2, [pc, #408]	@ (801a698 <HAL_DMA_Abort_IT+0x3b8>)
 801a4fe:	4293      	cmp	r3, r2
 801a500:	d036      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	4a65      	ldr	r2, [pc, #404]	@ (801a69c <HAL_DMA_Abort_IT+0x3bc>)
 801a508:	4293      	cmp	r3, r2
 801a50a:	d031      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	4a63      	ldr	r2, [pc, #396]	@ (801a6a0 <HAL_DMA_Abort_IT+0x3c0>)
 801a512:	4293      	cmp	r3, r2
 801a514:	d02c      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	4a62      	ldr	r2, [pc, #392]	@ (801a6a4 <HAL_DMA_Abort_IT+0x3c4>)
 801a51c:	4293      	cmp	r3, r2
 801a51e:	d027      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	4a60      	ldr	r2, [pc, #384]	@ (801a6a8 <HAL_DMA_Abort_IT+0x3c8>)
 801a526:	4293      	cmp	r3, r2
 801a528:	d022      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	4a5f      	ldr	r2, [pc, #380]	@ (801a6ac <HAL_DMA_Abort_IT+0x3cc>)
 801a530:	4293      	cmp	r3, r2
 801a532:	d01d      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	4a5d      	ldr	r2, [pc, #372]	@ (801a6b0 <HAL_DMA_Abort_IT+0x3d0>)
 801a53a:	4293      	cmp	r3, r2
 801a53c:	d018      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	4a5c      	ldr	r2, [pc, #368]	@ (801a6b4 <HAL_DMA_Abort_IT+0x3d4>)
 801a544:	4293      	cmp	r3, r2
 801a546:	d013      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	4a5a      	ldr	r2, [pc, #360]	@ (801a6b8 <HAL_DMA_Abort_IT+0x3d8>)
 801a54e:	4293      	cmp	r3, r2
 801a550:	d00e      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	4a59      	ldr	r2, [pc, #356]	@ (801a6bc <HAL_DMA_Abort_IT+0x3dc>)
 801a558:	4293      	cmp	r3, r2
 801a55a:	d009      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	4a57      	ldr	r2, [pc, #348]	@ (801a6c0 <HAL_DMA_Abort_IT+0x3e0>)
 801a562:	4293      	cmp	r3, r2
 801a564:	d004      	beq.n	801a570 <HAL_DMA_Abort_IT+0x290>
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	4a56      	ldr	r2, [pc, #344]	@ (801a6c4 <HAL_DMA_Abort_IT+0x3e4>)
 801a56c:	4293      	cmp	r3, r2
 801a56e:	d108      	bne.n	801a582 <HAL_DMA_Abort_IT+0x2a2>
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	681a      	ldr	r2, [r3, #0]
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	f022 0201 	bic.w	r2, r2, #1
 801a57e:	601a      	str	r2, [r3, #0]
 801a580:	e007      	b.n	801a592 <HAL_DMA_Abort_IT+0x2b2>
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	681a      	ldr	r2, [r3, #0]
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	f022 0201 	bic.w	r2, r2, #1
 801a590:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	4a3c      	ldr	r2, [pc, #240]	@ (801a688 <HAL_DMA_Abort_IT+0x3a8>)
 801a598:	4293      	cmp	r3, r2
 801a59a:	d072      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	4a3a      	ldr	r2, [pc, #232]	@ (801a68c <HAL_DMA_Abort_IT+0x3ac>)
 801a5a2:	4293      	cmp	r3, r2
 801a5a4:	d06d      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	4a39      	ldr	r2, [pc, #228]	@ (801a690 <HAL_DMA_Abort_IT+0x3b0>)
 801a5ac:	4293      	cmp	r3, r2
 801a5ae:	d068      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	4a37      	ldr	r2, [pc, #220]	@ (801a694 <HAL_DMA_Abort_IT+0x3b4>)
 801a5b6:	4293      	cmp	r3, r2
 801a5b8:	d063      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	4a36      	ldr	r2, [pc, #216]	@ (801a698 <HAL_DMA_Abort_IT+0x3b8>)
 801a5c0:	4293      	cmp	r3, r2
 801a5c2:	d05e      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	4a34      	ldr	r2, [pc, #208]	@ (801a69c <HAL_DMA_Abort_IT+0x3bc>)
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	d059      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	4a33      	ldr	r2, [pc, #204]	@ (801a6a0 <HAL_DMA_Abort_IT+0x3c0>)
 801a5d4:	4293      	cmp	r3, r2
 801a5d6:	d054      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	4a31      	ldr	r2, [pc, #196]	@ (801a6a4 <HAL_DMA_Abort_IT+0x3c4>)
 801a5de:	4293      	cmp	r3, r2
 801a5e0:	d04f      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	4a30      	ldr	r2, [pc, #192]	@ (801a6a8 <HAL_DMA_Abort_IT+0x3c8>)
 801a5e8:	4293      	cmp	r3, r2
 801a5ea:	d04a      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	4a2e      	ldr	r2, [pc, #184]	@ (801a6ac <HAL_DMA_Abort_IT+0x3cc>)
 801a5f2:	4293      	cmp	r3, r2
 801a5f4:	d045      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	4a2d      	ldr	r2, [pc, #180]	@ (801a6b0 <HAL_DMA_Abort_IT+0x3d0>)
 801a5fc:	4293      	cmp	r3, r2
 801a5fe:	d040      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	4a2b      	ldr	r2, [pc, #172]	@ (801a6b4 <HAL_DMA_Abort_IT+0x3d4>)
 801a606:	4293      	cmp	r3, r2
 801a608:	d03b      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	4a2a      	ldr	r2, [pc, #168]	@ (801a6b8 <HAL_DMA_Abort_IT+0x3d8>)
 801a610:	4293      	cmp	r3, r2
 801a612:	d036      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	4a28      	ldr	r2, [pc, #160]	@ (801a6bc <HAL_DMA_Abort_IT+0x3dc>)
 801a61a:	4293      	cmp	r3, r2
 801a61c:	d031      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	4a27      	ldr	r2, [pc, #156]	@ (801a6c0 <HAL_DMA_Abort_IT+0x3e0>)
 801a624:	4293      	cmp	r3, r2
 801a626:	d02c      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	4a25      	ldr	r2, [pc, #148]	@ (801a6c4 <HAL_DMA_Abort_IT+0x3e4>)
 801a62e:	4293      	cmp	r3, r2
 801a630:	d027      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	4a24      	ldr	r2, [pc, #144]	@ (801a6c8 <HAL_DMA_Abort_IT+0x3e8>)
 801a638:	4293      	cmp	r3, r2
 801a63a:	d022      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	4a22      	ldr	r2, [pc, #136]	@ (801a6cc <HAL_DMA_Abort_IT+0x3ec>)
 801a642:	4293      	cmp	r3, r2
 801a644:	d01d      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	4a21      	ldr	r2, [pc, #132]	@ (801a6d0 <HAL_DMA_Abort_IT+0x3f0>)
 801a64c:	4293      	cmp	r3, r2
 801a64e:	d018      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	4a1f      	ldr	r2, [pc, #124]	@ (801a6d4 <HAL_DMA_Abort_IT+0x3f4>)
 801a656:	4293      	cmp	r3, r2
 801a658:	d013      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	4a1e      	ldr	r2, [pc, #120]	@ (801a6d8 <HAL_DMA_Abort_IT+0x3f8>)
 801a660:	4293      	cmp	r3, r2
 801a662:	d00e      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	4a1c      	ldr	r2, [pc, #112]	@ (801a6dc <HAL_DMA_Abort_IT+0x3fc>)
 801a66a:	4293      	cmp	r3, r2
 801a66c:	d009      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	4a1b      	ldr	r2, [pc, #108]	@ (801a6e0 <HAL_DMA_Abort_IT+0x400>)
 801a674:	4293      	cmp	r3, r2
 801a676:	d004      	beq.n	801a682 <HAL_DMA_Abort_IT+0x3a2>
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	4a19      	ldr	r2, [pc, #100]	@ (801a6e4 <HAL_DMA_Abort_IT+0x404>)
 801a67e:	4293      	cmp	r3, r2
 801a680:	d132      	bne.n	801a6e8 <HAL_DMA_Abort_IT+0x408>
 801a682:	2301      	movs	r3, #1
 801a684:	e031      	b.n	801a6ea <HAL_DMA_Abort_IT+0x40a>
 801a686:	bf00      	nop
 801a688:	40020010 	.word	0x40020010
 801a68c:	40020028 	.word	0x40020028
 801a690:	40020040 	.word	0x40020040
 801a694:	40020058 	.word	0x40020058
 801a698:	40020070 	.word	0x40020070
 801a69c:	40020088 	.word	0x40020088
 801a6a0:	400200a0 	.word	0x400200a0
 801a6a4:	400200b8 	.word	0x400200b8
 801a6a8:	40020410 	.word	0x40020410
 801a6ac:	40020428 	.word	0x40020428
 801a6b0:	40020440 	.word	0x40020440
 801a6b4:	40020458 	.word	0x40020458
 801a6b8:	40020470 	.word	0x40020470
 801a6bc:	40020488 	.word	0x40020488
 801a6c0:	400204a0 	.word	0x400204a0
 801a6c4:	400204b8 	.word	0x400204b8
 801a6c8:	58025408 	.word	0x58025408
 801a6cc:	5802541c 	.word	0x5802541c
 801a6d0:	58025430 	.word	0x58025430
 801a6d4:	58025444 	.word	0x58025444
 801a6d8:	58025458 	.word	0x58025458
 801a6dc:	5802546c 	.word	0x5802546c
 801a6e0:	58025480 	.word	0x58025480
 801a6e4:	58025494 	.word	0x58025494
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d028      	beq.n	801a740 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a6f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a6fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a702:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a708:	f003 031f 	and.w	r3, r3, #31
 801a70c:	2201      	movs	r2, #1
 801a70e:	409a      	lsls	r2, r3
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a718:	687a      	ldr	r2, [r7, #4]
 801a71a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a71c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a722:	2b00      	cmp	r3, #0
 801a724:	d00c      	beq.n	801a740 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a72a:	681a      	ldr	r2, [r3, #0]
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a734:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a73e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	2201      	movs	r2, #1
 801a744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	2200      	movs	r2, #0
 801a74c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a754:	2b00      	cmp	r3, #0
 801a756:	d003      	beq.n	801a760 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801a760:	2300      	movs	r3, #0
}
 801a762:	4618      	mov	r0, r3
 801a764:	3710      	adds	r7, #16
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}
 801a76a:	bf00      	nop

0801a76c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b08a      	sub	sp, #40	@ 0x28
 801a770:	af00      	add	r7, sp, #0
 801a772:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801a774:	2300      	movs	r3, #0
 801a776:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801a778:	4b67      	ldr	r3, [pc, #412]	@ (801a918 <HAL_DMA_IRQHandler+0x1ac>)
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	4a67      	ldr	r2, [pc, #412]	@ (801a91c <HAL_DMA_IRQHandler+0x1b0>)
 801a77e:	fba2 2303 	umull	r2, r3, r2, r3
 801a782:	0a9b      	lsrs	r3, r3, #10
 801a784:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a78a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a790:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801a792:	6a3b      	ldr	r3, [r7, #32]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801a798:	69fb      	ldr	r3, [r7, #28]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	4a5f      	ldr	r2, [pc, #380]	@ (801a920 <HAL_DMA_IRQHandler+0x1b4>)
 801a7a4:	4293      	cmp	r3, r2
 801a7a6:	d04a      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	4a5d      	ldr	r2, [pc, #372]	@ (801a924 <HAL_DMA_IRQHandler+0x1b8>)
 801a7ae:	4293      	cmp	r3, r2
 801a7b0:	d045      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	4a5c      	ldr	r2, [pc, #368]	@ (801a928 <HAL_DMA_IRQHandler+0x1bc>)
 801a7b8:	4293      	cmp	r3, r2
 801a7ba:	d040      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	4a5a      	ldr	r2, [pc, #360]	@ (801a92c <HAL_DMA_IRQHandler+0x1c0>)
 801a7c2:	4293      	cmp	r3, r2
 801a7c4:	d03b      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	4a59      	ldr	r2, [pc, #356]	@ (801a930 <HAL_DMA_IRQHandler+0x1c4>)
 801a7cc:	4293      	cmp	r3, r2
 801a7ce:	d036      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	4a57      	ldr	r2, [pc, #348]	@ (801a934 <HAL_DMA_IRQHandler+0x1c8>)
 801a7d6:	4293      	cmp	r3, r2
 801a7d8:	d031      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	4a56      	ldr	r2, [pc, #344]	@ (801a938 <HAL_DMA_IRQHandler+0x1cc>)
 801a7e0:	4293      	cmp	r3, r2
 801a7e2:	d02c      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	4a54      	ldr	r2, [pc, #336]	@ (801a93c <HAL_DMA_IRQHandler+0x1d0>)
 801a7ea:	4293      	cmp	r3, r2
 801a7ec:	d027      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	4a53      	ldr	r2, [pc, #332]	@ (801a940 <HAL_DMA_IRQHandler+0x1d4>)
 801a7f4:	4293      	cmp	r3, r2
 801a7f6:	d022      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	4a51      	ldr	r2, [pc, #324]	@ (801a944 <HAL_DMA_IRQHandler+0x1d8>)
 801a7fe:	4293      	cmp	r3, r2
 801a800:	d01d      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	4a50      	ldr	r2, [pc, #320]	@ (801a948 <HAL_DMA_IRQHandler+0x1dc>)
 801a808:	4293      	cmp	r3, r2
 801a80a:	d018      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	4a4e      	ldr	r2, [pc, #312]	@ (801a94c <HAL_DMA_IRQHandler+0x1e0>)
 801a812:	4293      	cmp	r3, r2
 801a814:	d013      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	4a4d      	ldr	r2, [pc, #308]	@ (801a950 <HAL_DMA_IRQHandler+0x1e4>)
 801a81c:	4293      	cmp	r3, r2
 801a81e:	d00e      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	4a4b      	ldr	r2, [pc, #300]	@ (801a954 <HAL_DMA_IRQHandler+0x1e8>)
 801a826:	4293      	cmp	r3, r2
 801a828:	d009      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	4a4a      	ldr	r2, [pc, #296]	@ (801a958 <HAL_DMA_IRQHandler+0x1ec>)
 801a830:	4293      	cmp	r3, r2
 801a832:	d004      	beq.n	801a83e <HAL_DMA_IRQHandler+0xd2>
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	4a48      	ldr	r2, [pc, #288]	@ (801a95c <HAL_DMA_IRQHandler+0x1f0>)
 801a83a:	4293      	cmp	r3, r2
 801a83c:	d101      	bne.n	801a842 <HAL_DMA_IRQHandler+0xd6>
 801a83e:	2301      	movs	r3, #1
 801a840:	e000      	b.n	801a844 <HAL_DMA_IRQHandler+0xd8>
 801a842:	2300      	movs	r3, #0
 801a844:	2b00      	cmp	r3, #0
 801a846:	f000 842b 	beq.w	801b0a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a84e:	f003 031f 	and.w	r3, r3, #31
 801a852:	2208      	movs	r2, #8
 801a854:	409a      	lsls	r2, r3
 801a856:	69bb      	ldr	r3, [r7, #24]
 801a858:	4013      	ands	r3, r2
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	f000 80a2 	beq.w	801a9a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	4a2e      	ldr	r2, [pc, #184]	@ (801a920 <HAL_DMA_IRQHandler+0x1b4>)
 801a866:	4293      	cmp	r3, r2
 801a868:	d04a      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	4a2d      	ldr	r2, [pc, #180]	@ (801a924 <HAL_DMA_IRQHandler+0x1b8>)
 801a870:	4293      	cmp	r3, r2
 801a872:	d045      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	4a2b      	ldr	r2, [pc, #172]	@ (801a928 <HAL_DMA_IRQHandler+0x1bc>)
 801a87a:	4293      	cmp	r3, r2
 801a87c:	d040      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	4a2a      	ldr	r2, [pc, #168]	@ (801a92c <HAL_DMA_IRQHandler+0x1c0>)
 801a884:	4293      	cmp	r3, r2
 801a886:	d03b      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	4a28      	ldr	r2, [pc, #160]	@ (801a930 <HAL_DMA_IRQHandler+0x1c4>)
 801a88e:	4293      	cmp	r3, r2
 801a890:	d036      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	4a27      	ldr	r2, [pc, #156]	@ (801a934 <HAL_DMA_IRQHandler+0x1c8>)
 801a898:	4293      	cmp	r3, r2
 801a89a:	d031      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	4a25      	ldr	r2, [pc, #148]	@ (801a938 <HAL_DMA_IRQHandler+0x1cc>)
 801a8a2:	4293      	cmp	r3, r2
 801a8a4:	d02c      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	4a24      	ldr	r2, [pc, #144]	@ (801a93c <HAL_DMA_IRQHandler+0x1d0>)
 801a8ac:	4293      	cmp	r3, r2
 801a8ae:	d027      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	4a22      	ldr	r2, [pc, #136]	@ (801a940 <HAL_DMA_IRQHandler+0x1d4>)
 801a8b6:	4293      	cmp	r3, r2
 801a8b8:	d022      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	4a21      	ldr	r2, [pc, #132]	@ (801a944 <HAL_DMA_IRQHandler+0x1d8>)
 801a8c0:	4293      	cmp	r3, r2
 801a8c2:	d01d      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	4a1f      	ldr	r2, [pc, #124]	@ (801a948 <HAL_DMA_IRQHandler+0x1dc>)
 801a8ca:	4293      	cmp	r3, r2
 801a8cc:	d018      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	4a1e      	ldr	r2, [pc, #120]	@ (801a94c <HAL_DMA_IRQHandler+0x1e0>)
 801a8d4:	4293      	cmp	r3, r2
 801a8d6:	d013      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	4a1c      	ldr	r2, [pc, #112]	@ (801a950 <HAL_DMA_IRQHandler+0x1e4>)
 801a8de:	4293      	cmp	r3, r2
 801a8e0:	d00e      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	4a1b      	ldr	r2, [pc, #108]	@ (801a954 <HAL_DMA_IRQHandler+0x1e8>)
 801a8e8:	4293      	cmp	r3, r2
 801a8ea:	d009      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	4a19      	ldr	r2, [pc, #100]	@ (801a958 <HAL_DMA_IRQHandler+0x1ec>)
 801a8f2:	4293      	cmp	r3, r2
 801a8f4:	d004      	beq.n	801a900 <HAL_DMA_IRQHandler+0x194>
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	4a18      	ldr	r2, [pc, #96]	@ (801a95c <HAL_DMA_IRQHandler+0x1f0>)
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	d12f      	bne.n	801a960 <HAL_DMA_IRQHandler+0x1f4>
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	f003 0304 	and.w	r3, r3, #4
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	bf14      	ite	ne
 801a90e:	2301      	movne	r3, #1
 801a910:	2300      	moveq	r3, #0
 801a912:	b2db      	uxtb	r3, r3
 801a914:	e02e      	b.n	801a974 <HAL_DMA_IRQHandler+0x208>
 801a916:	bf00      	nop
 801a918:	20000000 	.word	0x20000000
 801a91c:	1b4e81b5 	.word	0x1b4e81b5
 801a920:	40020010 	.word	0x40020010
 801a924:	40020028 	.word	0x40020028
 801a928:	40020040 	.word	0x40020040
 801a92c:	40020058 	.word	0x40020058
 801a930:	40020070 	.word	0x40020070
 801a934:	40020088 	.word	0x40020088
 801a938:	400200a0 	.word	0x400200a0
 801a93c:	400200b8 	.word	0x400200b8
 801a940:	40020410 	.word	0x40020410
 801a944:	40020428 	.word	0x40020428
 801a948:	40020440 	.word	0x40020440
 801a94c:	40020458 	.word	0x40020458
 801a950:	40020470 	.word	0x40020470
 801a954:	40020488 	.word	0x40020488
 801a958:	400204a0 	.word	0x400204a0
 801a95c:	400204b8 	.word	0x400204b8
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	f003 0308 	and.w	r3, r3, #8
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	bf14      	ite	ne
 801a96e:	2301      	movne	r3, #1
 801a970:	2300      	moveq	r3, #0
 801a972:	b2db      	uxtb	r3, r3
 801a974:	2b00      	cmp	r3, #0
 801a976:	d015      	beq.n	801a9a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	681a      	ldr	r2, [r3, #0]
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	f022 0204 	bic.w	r2, r2, #4
 801a986:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a98c:	f003 031f 	and.w	r3, r3, #31
 801a990:	2208      	movs	r2, #8
 801a992:	409a      	lsls	r2, r3
 801a994:	6a3b      	ldr	r3, [r7, #32]
 801a996:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a99c:	f043 0201 	orr.w	r2, r3, #1
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a9a8:	f003 031f 	and.w	r3, r3, #31
 801a9ac:	69ba      	ldr	r2, [r7, #24]
 801a9ae:	fa22 f303 	lsr.w	r3, r2, r3
 801a9b2:	f003 0301 	and.w	r3, r3, #1
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d06e      	beq.n	801aa98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	4a69      	ldr	r2, [pc, #420]	@ (801ab64 <HAL_DMA_IRQHandler+0x3f8>)
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	d04a      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	4a67      	ldr	r2, [pc, #412]	@ (801ab68 <HAL_DMA_IRQHandler+0x3fc>)
 801a9ca:	4293      	cmp	r3, r2
 801a9cc:	d045      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	4a66      	ldr	r2, [pc, #408]	@ (801ab6c <HAL_DMA_IRQHandler+0x400>)
 801a9d4:	4293      	cmp	r3, r2
 801a9d6:	d040      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4a64      	ldr	r2, [pc, #400]	@ (801ab70 <HAL_DMA_IRQHandler+0x404>)
 801a9de:	4293      	cmp	r3, r2
 801a9e0:	d03b      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	4a63      	ldr	r2, [pc, #396]	@ (801ab74 <HAL_DMA_IRQHandler+0x408>)
 801a9e8:	4293      	cmp	r3, r2
 801a9ea:	d036      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4a61      	ldr	r2, [pc, #388]	@ (801ab78 <HAL_DMA_IRQHandler+0x40c>)
 801a9f2:	4293      	cmp	r3, r2
 801a9f4:	d031      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	4a60      	ldr	r2, [pc, #384]	@ (801ab7c <HAL_DMA_IRQHandler+0x410>)
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	d02c      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4a5e      	ldr	r2, [pc, #376]	@ (801ab80 <HAL_DMA_IRQHandler+0x414>)
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d027      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4a5d      	ldr	r2, [pc, #372]	@ (801ab84 <HAL_DMA_IRQHandler+0x418>)
 801aa10:	4293      	cmp	r3, r2
 801aa12:	d022      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4a5b      	ldr	r2, [pc, #364]	@ (801ab88 <HAL_DMA_IRQHandler+0x41c>)
 801aa1a:	4293      	cmp	r3, r2
 801aa1c:	d01d      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	4a5a      	ldr	r2, [pc, #360]	@ (801ab8c <HAL_DMA_IRQHandler+0x420>)
 801aa24:	4293      	cmp	r3, r2
 801aa26:	d018      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4a58      	ldr	r2, [pc, #352]	@ (801ab90 <HAL_DMA_IRQHandler+0x424>)
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	d013      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	4a57      	ldr	r2, [pc, #348]	@ (801ab94 <HAL_DMA_IRQHandler+0x428>)
 801aa38:	4293      	cmp	r3, r2
 801aa3a:	d00e      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	4a55      	ldr	r2, [pc, #340]	@ (801ab98 <HAL_DMA_IRQHandler+0x42c>)
 801aa42:	4293      	cmp	r3, r2
 801aa44:	d009      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	4a54      	ldr	r2, [pc, #336]	@ (801ab9c <HAL_DMA_IRQHandler+0x430>)
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d004      	beq.n	801aa5a <HAL_DMA_IRQHandler+0x2ee>
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	4a52      	ldr	r2, [pc, #328]	@ (801aba0 <HAL_DMA_IRQHandler+0x434>)
 801aa56:	4293      	cmp	r3, r2
 801aa58:	d10a      	bne.n	801aa70 <HAL_DMA_IRQHandler+0x304>
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	695b      	ldr	r3, [r3, #20]
 801aa60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	bf14      	ite	ne
 801aa68:	2301      	movne	r3, #1
 801aa6a:	2300      	moveq	r3, #0
 801aa6c:	b2db      	uxtb	r3, r3
 801aa6e:	e003      	b.n	801aa78 <HAL_DMA_IRQHandler+0x30c>
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	2300      	movs	r3, #0
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d00d      	beq.n	801aa98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa80:	f003 031f 	and.w	r3, r3, #31
 801aa84:	2201      	movs	r2, #1
 801aa86:	409a      	lsls	r2, r3
 801aa88:	6a3b      	ldr	r3, [r7, #32]
 801aa8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa90:	f043 0202 	orr.w	r2, r3, #2
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa9c:	f003 031f 	and.w	r3, r3, #31
 801aaa0:	2204      	movs	r2, #4
 801aaa2:	409a      	lsls	r2, r3
 801aaa4:	69bb      	ldr	r3, [r7, #24]
 801aaa6:	4013      	ands	r3, r2
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	f000 808f 	beq.w	801abcc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	4a2c      	ldr	r2, [pc, #176]	@ (801ab64 <HAL_DMA_IRQHandler+0x3f8>)
 801aab4:	4293      	cmp	r3, r2
 801aab6:	d04a      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	4a2a      	ldr	r2, [pc, #168]	@ (801ab68 <HAL_DMA_IRQHandler+0x3fc>)
 801aabe:	4293      	cmp	r3, r2
 801aac0:	d045      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	4a29      	ldr	r2, [pc, #164]	@ (801ab6c <HAL_DMA_IRQHandler+0x400>)
 801aac8:	4293      	cmp	r3, r2
 801aaca:	d040      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	4a27      	ldr	r2, [pc, #156]	@ (801ab70 <HAL_DMA_IRQHandler+0x404>)
 801aad2:	4293      	cmp	r3, r2
 801aad4:	d03b      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	4a26      	ldr	r2, [pc, #152]	@ (801ab74 <HAL_DMA_IRQHandler+0x408>)
 801aadc:	4293      	cmp	r3, r2
 801aade:	d036      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	4a24      	ldr	r2, [pc, #144]	@ (801ab78 <HAL_DMA_IRQHandler+0x40c>)
 801aae6:	4293      	cmp	r3, r2
 801aae8:	d031      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	4a23      	ldr	r2, [pc, #140]	@ (801ab7c <HAL_DMA_IRQHandler+0x410>)
 801aaf0:	4293      	cmp	r3, r2
 801aaf2:	d02c      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	4a21      	ldr	r2, [pc, #132]	@ (801ab80 <HAL_DMA_IRQHandler+0x414>)
 801aafa:	4293      	cmp	r3, r2
 801aafc:	d027      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	4a20      	ldr	r2, [pc, #128]	@ (801ab84 <HAL_DMA_IRQHandler+0x418>)
 801ab04:	4293      	cmp	r3, r2
 801ab06:	d022      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	4a1e      	ldr	r2, [pc, #120]	@ (801ab88 <HAL_DMA_IRQHandler+0x41c>)
 801ab0e:	4293      	cmp	r3, r2
 801ab10:	d01d      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	4a1d      	ldr	r2, [pc, #116]	@ (801ab8c <HAL_DMA_IRQHandler+0x420>)
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	d018      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	4a1b      	ldr	r2, [pc, #108]	@ (801ab90 <HAL_DMA_IRQHandler+0x424>)
 801ab22:	4293      	cmp	r3, r2
 801ab24:	d013      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	4a1a      	ldr	r2, [pc, #104]	@ (801ab94 <HAL_DMA_IRQHandler+0x428>)
 801ab2c:	4293      	cmp	r3, r2
 801ab2e:	d00e      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	4a18      	ldr	r2, [pc, #96]	@ (801ab98 <HAL_DMA_IRQHandler+0x42c>)
 801ab36:	4293      	cmp	r3, r2
 801ab38:	d009      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	4a17      	ldr	r2, [pc, #92]	@ (801ab9c <HAL_DMA_IRQHandler+0x430>)
 801ab40:	4293      	cmp	r3, r2
 801ab42:	d004      	beq.n	801ab4e <HAL_DMA_IRQHandler+0x3e2>
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	4a15      	ldr	r2, [pc, #84]	@ (801aba0 <HAL_DMA_IRQHandler+0x434>)
 801ab4a:	4293      	cmp	r3, r2
 801ab4c:	d12a      	bne.n	801aba4 <HAL_DMA_IRQHandler+0x438>
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	f003 0302 	and.w	r3, r3, #2
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	bf14      	ite	ne
 801ab5c:	2301      	movne	r3, #1
 801ab5e:	2300      	moveq	r3, #0
 801ab60:	b2db      	uxtb	r3, r3
 801ab62:	e023      	b.n	801abac <HAL_DMA_IRQHandler+0x440>
 801ab64:	40020010 	.word	0x40020010
 801ab68:	40020028 	.word	0x40020028
 801ab6c:	40020040 	.word	0x40020040
 801ab70:	40020058 	.word	0x40020058
 801ab74:	40020070 	.word	0x40020070
 801ab78:	40020088 	.word	0x40020088
 801ab7c:	400200a0 	.word	0x400200a0
 801ab80:	400200b8 	.word	0x400200b8
 801ab84:	40020410 	.word	0x40020410
 801ab88:	40020428 	.word	0x40020428
 801ab8c:	40020440 	.word	0x40020440
 801ab90:	40020458 	.word	0x40020458
 801ab94:	40020470 	.word	0x40020470
 801ab98:	40020488 	.word	0x40020488
 801ab9c:	400204a0 	.word	0x400204a0
 801aba0:	400204b8 	.word	0x400204b8
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	2300      	movs	r3, #0
 801abac:	2b00      	cmp	r3, #0
 801abae:	d00d      	beq.n	801abcc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801abb4:	f003 031f 	and.w	r3, r3, #31
 801abb8:	2204      	movs	r2, #4
 801abba:	409a      	lsls	r2, r3
 801abbc:	6a3b      	ldr	r3, [r7, #32]
 801abbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801abc4:	f043 0204 	orr.w	r2, r3, #4
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801abd0:	f003 031f 	and.w	r3, r3, #31
 801abd4:	2210      	movs	r2, #16
 801abd6:	409a      	lsls	r2, r3
 801abd8:	69bb      	ldr	r3, [r7, #24]
 801abda:	4013      	ands	r3, r2
 801abdc:	2b00      	cmp	r3, #0
 801abde:	f000 80a6 	beq.w	801ad2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	4a85      	ldr	r2, [pc, #532]	@ (801adfc <HAL_DMA_IRQHandler+0x690>)
 801abe8:	4293      	cmp	r3, r2
 801abea:	d04a      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	4a83      	ldr	r2, [pc, #524]	@ (801ae00 <HAL_DMA_IRQHandler+0x694>)
 801abf2:	4293      	cmp	r3, r2
 801abf4:	d045      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	4a82      	ldr	r2, [pc, #520]	@ (801ae04 <HAL_DMA_IRQHandler+0x698>)
 801abfc:	4293      	cmp	r3, r2
 801abfe:	d040      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	4a80      	ldr	r2, [pc, #512]	@ (801ae08 <HAL_DMA_IRQHandler+0x69c>)
 801ac06:	4293      	cmp	r3, r2
 801ac08:	d03b      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	4a7f      	ldr	r2, [pc, #508]	@ (801ae0c <HAL_DMA_IRQHandler+0x6a0>)
 801ac10:	4293      	cmp	r3, r2
 801ac12:	d036      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	4a7d      	ldr	r2, [pc, #500]	@ (801ae10 <HAL_DMA_IRQHandler+0x6a4>)
 801ac1a:	4293      	cmp	r3, r2
 801ac1c:	d031      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	4a7c      	ldr	r2, [pc, #496]	@ (801ae14 <HAL_DMA_IRQHandler+0x6a8>)
 801ac24:	4293      	cmp	r3, r2
 801ac26:	d02c      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	4a7a      	ldr	r2, [pc, #488]	@ (801ae18 <HAL_DMA_IRQHandler+0x6ac>)
 801ac2e:	4293      	cmp	r3, r2
 801ac30:	d027      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	4a79      	ldr	r2, [pc, #484]	@ (801ae1c <HAL_DMA_IRQHandler+0x6b0>)
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	d022      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4a77      	ldr	r2, [pc, #476]	@ (801ae20 <HAL_DMA_IRQHandler+0x6b4>)
 801ac42:	4293      	cmp	r3, r2
 801ac44:	d01d      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4a76      	ldr	r2, [pc, #472]	@ (801ae24 <HAL_DMA_IRQHandler+0x6b8>)
 801ac4c:	4293      	cmp	r3, r2
 801ac4e:	d018      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4a74      	ldr	r2, [pc, #464]	@ (801ae28 <HAL_DMA_IRQHandler+0x6bc>)
 801ac56:	4293      	cmp	r3, r2
 801ac58:	d013      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	4a73      	ldr	r2, [pc, #460]	@ (801ae2c <HAL_DMA_IRQHandler+0x6c0>)
 801ac60:	4293      	cmp	r3, r2
 801ac62:	d00e      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	4a71      	ldr	r2, [pc, #452]	@ (801ae30 <HAL_DMA_IRQHandler+0x6c4>)
 801ac6a:	4293      	cmp	r3, r2
 801ac6c:	d009      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	4a70      	ldr	r2, [pc, #448]	@ (801ae34 <HAL_DMA_IRQHandler+0x6c8>)
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d004      	beq.n	801ac82 <HAL_DMA_IRQHandler+0x516>
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	4a6e      	ldr	r2, [pc, #440]	@ (801ae38 <HAL_DMA_IRQHandler+0x6cc>)
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d10a      	bne.n	801ac98 <HAL_DMA_IRQHandler+0x52c>
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	f003 0308 	and.w	r3, r3, #8
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	bf14      	ite	ne
 801ac90:	2301      	movne	r3, #1
 801ac92:	2300      	moveq	r3, #0
 801ac94:	b2db      	uxtb	r3, r3
 801ac96:	e009      	b.n	801acac <HAL_DMA_IRQHandler+0x540>
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	f003 0304 	and.w	r3, r3, #4
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	bf14      	ite	ne
 801aca6:	2301      	movne	r3, #1
 801aca8:	2300      	moveq	r3, #0
 801acaa:	b2db      	uxtb	r3, r3
 801acac:	2b00      	cmp	r3, #0
 801acae:	d03e      	beq.n	801ad2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801acb4:	f003 031f 	and.w	r3, r3, #31
 801acb8:	2210      	movs	r2, #16
 801acba:	409a      	lsls	r2, r3
 801acbc:	6a3b      	ldr	r3, [r7, #32]
 801acbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801acca:	2b00      	cmp	r3, #0
 801accc:	d018      	beq.n	801ad00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d108      	bne.n	801acee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d024      	beq.n	801ad2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ace8:	6878      	ldr	r0, [r7, #4]
 801acea:	4798      	blx	r3
 801acec:	e01f      	b.n	801ad2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d01b      	beq.n	801ad2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801acfa:	6878      	ldr	r0, [r7, #4]
 801acfc:	4798      	blx	r3
 801acfe:	e016      	b.n	801ad2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d107      	bne.n	801ad1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	681a      	ldr	r2, [r3, #0]
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	f022 0208 	bic.w	r2, r2, #8
 801ad1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d003      	beq.n	801ad2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ad2a:	6878      	ldr	r0, [r7, #4]
 801ad2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad32:	f003 031f 	and.w	r3, r3, #31
 801ad36:	2220      	movs	r2, #32
 801ad38:	409a      	lsls	r2, r3
 801ad3a:	69bb      	ldr	r3, [r7, #24]
 801ad3c:	4013      	ands	r3, r2
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	f000 8110 	beq.w	801af64 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	4a2c      	ldr	r2, [pc, #176]	@ (801adfc <HAL_DMA_IRQHandler+0x690>)
 801ad4a:	4293      	cmp	r3, r2
 801ad4c:	d04a      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	4a2b      	ldr	r2, [pc, #172]	@ (801ae00 <HAL_DMA_IRQHandler+0x694>)
 801ad54:	4293      	cmp	r3, r2
 801ad56:	d045      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	4a29      	ldr	r2, [pc, #164]	@ (801ae04 <HAL_DMA_IRQHandler+0x698>)
 801ad5e:	4293      	cmp	r3, r2
 801ad60:	d040      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	4a28      	ldr	r2, [pc, #160]	@ (801ae08 <HAL_DMA_IRQHandler+0x69c>)
 801ad68:	4293      	cmp	r3, r2
 801ad6a:	d03b      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	4a26      	ldr	r2, [pc, #152]	@ (801ae0c <HAL_DMA_IRQHandler+0x6a0>)
 801ad72:	4293      	cmp	r3, r2
 801ad74:	d036      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	4a25      	ldr	r2, [pc, #148]	@ (801ae10 <HAL_DMA_IRQHandler+0x6a4>)
 801ad7c:	4293      	cmp	r3, r2
 801ad7e:	d031      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	4a23      	ldr	r2, [pc, #140]	@ (801ae14 <HAL_DMA_IRQHandler+0x6a8>)
 801ad86:	4293      	cmp	r3, r2
 801ad88:	d02c      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	4a22      	ldr	r2, [pc, #136]	@ (801ae18 <HAL_DMA_IRQHandler+0x6ac>)
 801ad90:	4293      	cmp	r3, r2
 801ad92:	d027      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	4a20      	ldr	r2, [pc, #128]	@ (801ae1c <HAL_DMA_IRQHandler+0x6b0>)
 801ad9a:	4293      	cmp	r3, r2
 801ad9c:	d022      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	4a1f      	ldr	r2, [pc, #124]	@ (801ae20 <HAL_DMA_IRQHandler+0x6b4>)
 801ada4:	4293      	cmp	r3, r2
 801ada6:	d01d      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	4a1d      	ldr	r2, [pc, #116]	@ (801ae24 <HAL_DMA_IRQHandler+0x6b8>)
 801adae:	4293      	cmp	r3, r2
 801adb0:	d018      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	4a1c      	ldr	r2, [pc, #112]	@ (801ae28 <HAL_DMA_IRQHandler+0x6bc>)
 801adb8:	4293      	cmp	r3, r2
 801adba:	d013      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	4a1a      	ldr	r2, [pc, #104]	@ (801ae2c <HAL_DMA_IRQHandler+0x6c0>)
 801adc2:	4293      	cmp	r3, r2
 801adc4:	d00e      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	4a19      	ldr	r2, [pc, #100]	@ (801ae30 <HAL_DMA_IRQHandler+0x6c4>)
 801adcc:	4293      	cmp	r3, r2
 801adce:	d009      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	4a17      	ldr	r2, [pc, #92]	@ (801ae34 <HAL_DMA_IRQHandler+0x6c8>)
 801add6:	4293      	cmp	r3, r2
 801add8:	d004      	beq.n	801ade4 <HAL_DMA_IRQHandler+0x678>
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	4a16      	ldr	r2, [pc, #88]	@ (801ae38 <HAL_DMA_IRQHandler+0x6cc>)
 801ade0:	4293      	cmp	r3, r2
 801ade2:	d12b      	bne.n	801ae3c <HAL_DMA_IRQHandler+0x6d0>
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	f003 0310 	and.w	r3, r3, #16
 801adee:	2b00      	cmp	r3, #0
 801adf0:	bf14      	ite	ne
 801adf2:	2301      	movne	r3, #1
 801adf4:	2300      	moveq	r3, #0
 801adf6:	b2db      	uxtb	r3, r3
 801adf8:	e02a      	b.n	801ae50 <HAL_DMA_IRQHandler+0x6e4>
 801adfa:	bf00      	nop
 801adfc:	40020010 	.word	0x40020010
 801ae00:	40020028 	.word	0x40020028
 801ae04:	40020040 	.word	0x40020040
 801ae08:	40020058 	.word	0x40020058
 801ae0c:	40020070 	.word	0x40020070
 801ae10:	40020088 	.word	0x40020088
 801ae14:	400200a0 	.word	0x400200a0
 801ae18:	400200b8 	.word	0x400200b8
 801ae1c:	40020410 	.word	0x40020410
 801ae20:	40020428 	.word	0x40020428
 801ae24:	40020440 	.word	0x40020440
 801ae28:	40020458 	.word	0x40020458
 801ae2c:	40020470 	.word	0x40020470
 801ae30:	40020488 	.word	0x40020488
 801ae34:	400204a0 	.word	0x400204a0
 801ae38:	400204b8 	.word	0x400204b8
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	f003 0302 	and.w	r3, r3, #2
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	bf14      	ite	ne
 801ae4a:	2301      	movne	r3, #1
 801ae4c:	2300      	moveq	r3, #0
 801ae4e:	b2db      	uxtb	r3, r3
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	f000 8087 	beq.w	801af64 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae5a:	f003 031f 	and.w	r3, r3, #31
 801ae5e:	2220      	movs	r2, #32
 801ae60:	409a      	lsls	r2, r3
 801ae62:	6a3b      	ldr	r3, [r7, #32]
 801ae64:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801ae6c:	b2db      	uxtb	r3, r3
 801ae6e:	2b04      	cmp	r3, #4
 801ae70:	d139      	bne.n	801aee6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	681a      	ldr	r2, [r3, #0]
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	f022 0216 	bic.w	r2, r2, #22
 801ae80:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	695a      	ldr	r2, [r3, #20]
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801ae90:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d103      	bne.n	801aea2 <HAL_DMA_IRQHandler+0x736>
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d007      	beq.n	801aeb2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	681a      	ldr	r2, [r3, #0]
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	f022 0208 	bic.w	r2, r2, #8
 801aeb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aeb6:	f003 031f 	and.w	r3, r3, #31
 801aeba:	223f      	movs	r2, #63	@ 0x3f
 801aebc:	409a      	lsls	r2, r3
 801aebe:	6a3b      	ldr	r3, [r7, #32]
 801aec0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	2201      	movs	r2, #1
 801aec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	2200      	movs	r2, #0
 801aece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	f000 834a 	beq.w	801b570 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aee0:	6878      	ldr	r0, [r7, #4]
 801aee2:	4798      	blx	r3
          }
          return;
 801aee4:	e344      	b.n	801b570 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d018      	beq.n	801af26 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d108      	bne.n	801af14 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801af06:	2b00      	cmp	r3, #0
 801af08:	d02c      	beq.n	801af64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801af0e:	6878      	ldr	r0, [r7, #4]
 801af10:	4798      	blx	r3
 801af12:	e027      	b.n	801af64 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d023      	beq.n	801af64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af20:	6878      	ldr	r0, [r7, #4]
 801af22:	4798      	blx	r3
 801af24:	e01e      	b.n	801af64 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801af30:	2b00      	cmp	r3, #0
 801af32:	d10f      	bne.n	801af54 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	681a      	ldr	r2, [r3, #0]
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	f022 0210 	bic.w	r2, r2, #16
 801af42:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	2201      	movs	r2, #1
 801af48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	2200      	movs	r2, #0
 801af50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d003      	beq.n	801af64 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af60:	6878      	ldr	r0, [r7, #4]
 801af62:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801af68:	2b00      	cmp	r3, #0
 801af6a:	f000 8306 	beq.w	801b57a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801af72:	f003 0301 	and.w	r3, r3, #1
 801af76:	2b00      	cmp	r3, #0
 801af78:	f000 8088 	beq.w	801b08c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	2204      	movs	r2, #4
 801af80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	4a7a      	ldr	r2, [pc, #488]	@ (801b174 <HAL_DMA_IRQHandler+0xa08>)
 801af8a:	4293      	cmp	r3, r2
 801af8c:	d04a      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	4a79      	ldr	r2, [pc, #484]	@ (801b178 <HAL_DMA_IRQHandler+0xa0c>)
 801af94:	4293      	cmp	r3, r2
 801af96:	d045      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	4a77      	ldr	r2, [pc, #476]	@ (801b17c <HAL_DMA_IRQHandler+0xa10>)
 801af9e:	4293      	cmp	r3, r2
 801afa0:	d040      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	4a76      	ldr	r2, [pc, #472]	@ (801b180 <HAL_DMA_IRQHandler+0xa14>)
 801afa8:	4293      	cmp	r3, r2
 801afaa:	d03b      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	4a74      	ldr	r2, [pc, #464]	@ (801b184 <HAL_DMA_IRQHandler+0xa18>)
 801afb2:	4293      	cmp	r3, r2
 801afb4:	d036      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	4a73      	ldr	r2, [pc, #460]	@ (801b188 <HAL_DMA_IRQHandler+0xa1c>)
 801afbc:	4293      	cmp	r3, r2
 801afbe:	d031      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	4a71      	ldr	r2, [pc, #452]	@ (801b18c <HAL_DMA_IRQHandler+0xa20>)
 801afc6:	4293      	cmp	r3, r2
 801afc8:	d02c      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	4a70      	ldr	r2, [pc, #448]	@ (801b190 <HAL_DMA_IRQHandler+0xa24>)
 801afd0:	4293      	cmp	r3, r2
 801afd2:	d027      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	4a6e      	ldr	r2, [pc, #440]	@ (801b194 <HAL_DMA_IRQHandler+0xa28>)
 801afda:	4293      	cmp	r3, r2
 801afdc:	d022      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	4a6d      	ldr	r2, [pc, #436]	@ (801b198 <HAL_DMA_IRQHandler+0xa2c>)
 801afe4:	4293      	cmp	r3, r2
 801afe6:	d01d      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	4a6b      	ldr	r2, [pc, #428]	@ (801b19c <HAL_DMA_IRQHandler+0xa30>)
 801afee:	4293      	cmp	r3, r2
 801aff0:	d018      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	4a6a      	ldr	r2, [pc, #424]	@ (801b1a0 <HAL_DMA_IRQHandler+0xa34>)
 801aff8:	4293      	cmp	r3, r2
 801affa:	d013      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	4a68      	ldr	r2, [pc, #416]	@ (801b1a4 <HAL_DMA_IRQHandler+0xa38>)
 801b002:	4293      	cmp	r3, r2
 801b004:	d00e      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	4a67      	ldr	r2, [pc, #412]	@ (801b1a8 <HAL_DMA_IRQHandler+0xa3c>)
 801b00c:	4293      	cmp	r3, r2
 801b00e:	d009      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	4a65      	ldr	r2, [pc, #404]	@ (801b1ac <HAL_DMA_IRQHandler+0xa40>)
 801b016:	4293      	cmp	r3, r2
 801b018:	d004      	beq.n	801b024 <HAL_DMA_IRQHandler+0x8b8>
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	4a64      	ldr	r2, [pc, #400]	@ (801b1b0 <HAL_DMA_IRQHandler+0xa44>)
 801b020:	4293      	cmp	r3, r2
 801b022:	d108      	bne.n	801b036 <HAL_DMA_IRQHandler+0x8ca>
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	681a      	ldr	r2, [r3, #0]
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	f022 0201 	bic.w	r2, r2, #1
 801b032:	601a      	str	r2, [r3, #0]
 801b034:	e007      	b.n	801b046 <HAL_DMA_IRQHandler+0x8da>
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	681a      	ldr	r2, [r3, #0]
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	f022 0201 	bic.w	r2, r2, #1
 801b044:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	3301      	adds	r3, #1
 801b04a:	60fb      	str	r3, [r7, #12]
 801b04c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b04e:	429a      	cmp	r2, r3
 801b050:	d307      	bcc.n	801b062 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	f003 0301 	and.w	r3, r3, #1
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d1f2      	bne.n	801b046 <HAL_DMA_IRQHandler+0x8da>
 801b060:	e000      	b.n	801b064 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801b062:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	f003 0301 	and.w	r3, r3, #1
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d004      	beq.n	801b07c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	2203      	movs	r2, #3
 801b076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801b07a:	e003      	b.n	801b084 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	2201      	movs	r2, #1
 801b080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	2200      	movs	r2, #0
 801b088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b090:	2b00      	cmp	r3, #0
 801b092:	f000 8272 	beq.w	801b57a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b09a:	6878      	ldr	r0, [r7, #4]
 801b09c:	4798      	blx	r3
 801b09e:	e26c      	b.n	801b57a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	4a43      	ldr	r2, [pc, #268]	@ (801b1b4 <HAL_DMA_IRQHandler+0xa48>)
 801b0a6:	4293      	cmp	r3, r2
 801b0a8:	d022      	beq.n	801b0f0 <HAL_DMA_IRQHandler+0x984>
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	4a42      	ldr	r2, [pc, #264]	@ (801b1b8 <HAL_DMA_IRQHandler+0xa4c>)
 801b0b0:	4293      	cmp	r3, r2
 801b0b2:	d01d      	beq.n	801b0f0 <HAL_DMA_IRQHandler+0x984>
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	4a40      	ldr	r2, [pc, #256]	@ (801b1bc <HAL_DMA_IRQHandler+0xa50>)
 801b0ba:	4293      	cmp	r3, r2
 801b0bc:	d018      	beq.n	801b0f0 <HAL_DMA_IRQHandler+0x984>
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	4a3f      	ldr	r2, [pc, #252]	@ (801b1c0 <HAL_DMA_IRQHandler+0xa54>)
 801b0c4:	4293      	cmp	r3, r2
 801b0c6:	d013      	beq.n	801b0f0 <HAL_DMA_IRQHandler+0x984>
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	4a3d      	ldr	r2, [pc, #244]	@ (801b1c4 <HAL_DMA_IRQHandler+0xa58>)
 801b0ce:	4293      	cmp	r3, r2
 801b0d0:	d00e      	beq.n	801b0f0 <HAL_DMA_IRQHandler+0x984>
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	4a3c      	ldr	r2, [pc, #240]	@ (801b1c8 <HAL_DMA_IRQHandler+0xa5c>)
 801b0d8:	4293      	cmp	r3, r2
 801b0da:	d009      	beq.n	801b0f0 <HAL_DMA_IRQHandler+0x984>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	4a3a      	ldr	r2, [pc, #232]	@ (801b1cc <HAL_DMA_IRQHandler+0xa60>)
 801b0e2:	4293      	cmp	r3, r2
 801b0e4:	d004      	beq.n	801b0f0 <HAL_DMA_IRQHandler+0x984>
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	4a39      	ldr	r2, [pc, #228]	@ (801b1d0 <HAL_DMA_IRQHandler+0xa64>)
 801b0ec:	4293      	cmp	r3, r2
 801b0ee:	d101      	bne.n	801b0f4 <HAL_DMA_IRQHandler+0x988>
 801b0f0:	2301      	movs	r3, #1
 801b0f2:	e000      	b.n	801b0f6 <HAL_DMA_IRQHandler+0x98a>
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	f000 823f 	beq.w	801b57a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b108:	f003 031f 	and.w	r3, r3, #31
 801b10c:	2204      	movs	r2, #4
 801b10e:	409a      	lsls	r2, r3
 801b110:	697b      	ldr	r3, [r7, #20]
 801b112:	4013      	ands	r3, r2
 801b114:	2b00      	cmp	r3, #0
 801b116:	f000 80cd 	beq.w	801b2b4 <HAL_DMA_IRQHandler+0xb48>
 801b11a:	693b      	ldr	r3, [r7, #16]
 801b11c:	f003 0304 	and.w	r3, r3, #4
 801b120:	2b00      	cmp	r3, #0
 801b122:	f000 80c7 	beq.w	801b2b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b12a:	f003 031f 	and.w	r3, r3, #31
 801b12e:	2204      	movs	r2, #4
 801b130:	409a      	lsls	r2, r3
 801b132:	69fb      	ldr	r3, [r7, #28]
 801b134:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b136:	693b      	ldr	r3, [r7, #16]
 801b138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d049      	beq.n	801b1d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b140:	693b      	ldr	r3, [r7, #16]
 801b142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b146:	2b00      	cmp	r3, #0
 801b148:	d109      	bne.n	801b15e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b14e:	2b00      	cmp	r3, #0
 801b150:	f000 8210 	beq.w	801b574 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b158:	6878      	ldr	r0, [r7, #4]
 801b15a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b15c:	e20a      	b.n	801b574 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b162:	2b00      	cmp	r3, #0
 801b164:	f000 8206 	beq.w	801b574 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b16c:	6878      	ldr	r0, [r7, #4]
 801b16e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b170:	e200      	b.n	801b574 <HAL_DMA_IRQHandler+0xe08>
 801b172:	bf00      	nop
 801b174:	40020010 	.word	0x40020010
 801b178:	40020028 	.word	0x40020028
 801b17c:	40020040 	.word	0x40020040
 801b180:	40020058 	.word	0x40020058
 801b184:	40020070 	.word	0x40020070
 801b188:	40020088 	.word	0x40020088
 801b18c:	400200a0 	.word	0x400200a0
 801b190:	400200b8 	.word	0x400200b8
 801b194:	40020410 	.word	0x40020410
 801b198:	40020428 	.word	0x40020428
 801b19c:	40020440 	.word	0x40020440
 801b1a0:	40020458 	.word	0x40020458
 801b1a4:	40020470 	.word	0x40020470
 801b1a8:	40020488 	.word	0x40020488
 801b1ac:	400204a0 	.word	0x400204a0
 801b1b0:	400204b8 	.word	0x400204b8
 801b1b4:	58025408 	.word	0x58025408
 801b1b8:	5802541c 	.word	0x5802541c
 801b1bc:	58025430 	.word	0x58025430
 801b1c0:	58025444 	.word	0x58025444
 801b1c4:	58025458 	.word	0x58025458
 801b1c8:	5802546c 	.word	0x5802546c
 801b1cc:	58025480 	.word	0x58025480
 801b1d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b1d4:	693b      	ldr	r3, [r7, #16]
 801b1d6:	f003 0320 	and.w	r3, r3, #32
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d160      	bne.n	801b2a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	4a7f      	ldr	r2, [pc, #508]	@ (801b3e0 <HAL_DMA_IRQHandler+0xc74>)
 801b1e4:	4293      	cmp	r3, r2
 801b1e6:	d04a      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	4a7d      	ldr	r2, [pc, #500]	@ (801b3e4 <HAL_DMA_IRQHandler+0xc78>)
 801b1ee:	4293      	cmp	r3, r2
 801b1f0:	d045      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	4a7c      	ldr	r2, [pc, #496]	@ (801b3e8 <HAL_DMA_IRQHandler+0xc7c>)
 801b1f8:	4293      	cmp	r3, r2
 801b1fa:	d040      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	4a7a      	ldr	r2, [pc, #488]	@ (801b3ec <HAL_DMA_IRQHandler+0xc80>)
 801b202:	4293      	cmp	r3, r2
 801b204:	d03b      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	4a79      	ldr	r2, [pc, #484]	@ (801b3f0 <HAL_DMA_IRQHandler+0xc84>)
 801b20c:	4293      	cmp	r3, r2
 801b20e:	d036      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	4a77      	ldr	r2, [pc, #476]	@ (801b3f4 <HAL_DMA_IRQHandler+0xc88>)
 801b216:	4293      	cmp	r3, r2
 801b218:	d031      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	4a76      	ldr	r2, [pc, #472]	@ (801b3f8 <HAL_DMA_IRQHandler+0xc8c>)
 801b220:	4293      	cmp	r3, r2
 801b222:	d02c      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	4a74      	ldr	r2, [pc, #464]	@ (801b3fc <HAL_DMA_IRQHandler+0xc90>)
 801b22a:	4293      	cmp	r3, r2
 801b22c:	d027      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	4a73      	ldr	r2, [pc, #460]	@ (801b400 <HAL_DMA_IRQHandler+0xc94>)
 801b234:	4293      	cmp	r3, r2
 801b236:	d022      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	4a71      	ldr	r2, [pc, #452]	@ (801b404 <HAL_DMA_IRQHandler+0xc98>)
 801b23e:	4293      	cmp	r3, r2
 801b240:	d01d      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	4a70      	ldr	r2, [pc, #448]	@ (801b408 <HAL_DMA_IRQHandler+0xc9c>)
 801b248:	4293      	cmp	r3, r2
 801b24a:	d018      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	4a6e      	ldr	r2, [pc, #440]	@ (801b40c <HAL_DMA_IRQHandler+0xca0>)
 801b252:	4293      	cmp	r3, r2
 801b254:	d013      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	4a6d      	ldr	r2, [pc, #436]	@ (801b410 <HAL_DMA_IRQHandler+0xca4>)
 801b25c:	4293      	cmp	r3, r2
 801b25e:	d00e      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	4a6b      	ldr	r2, [pc, #428]	@ (801b414 <HAL_DMA_IRQHandler+0xca8>)
 801b266:	4293      	cmp	r3, r2
 801b268:	d009      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4a6a      	ldr	r2, [pc, #424]	@ (801b418 <HAL_DMA_IRQHandler+0xcac>)
 801b270:	4293      	cmp	r3, r2
 801b272:	d004      	beq.n	801b27e <HAL_DMA_IRQHandler+0xb12>
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	4a68      	ldr	r2, [pc, #416]	@ (801b41c <HAL_DMA_IRQHandler+0xcb0>)
 801b27a:	4293      	cmp	r3, r2
 801b27c:	d108      	bne.n	801b290 <HAL_DMA_IRQHandler+0xb24>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	681a      	ldr	r2, [r3, #0]
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	f022 0208 	bic.w	r2, r2, #8
 801b28c:	601a      	str	r2, [r3, #0]
 801b28e:	e007      	b.n	801b2a0 <HAL_DMA_IRQHandler+0xb34>
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	681a      	ldr	r2, [r3, #0]
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	f022 0204 	bic.w	r2, r2, #4
 801b29e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	f000 8165 	beq.w	801b574 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b2ae:	6878      	ldr	r0, [r7, #4]
 801b2b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b2b2:	e15f      	b.n	801b574 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b2b8:	f003 031f 	and.w	r3, r3, #31
 801b2bc:	2202      	movs	r2, #2
 801b2be:	409a      	lsls	r2, r3
 801b2c0:	697b      	ldr	r3, [r7, #20]
 801b2c2:	4013      	ands	r3, r2
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	f000 80c5 	beq.w	801b454 <HAL_DMA_IRQHandler+0xce8>
 801b2ca:	693b      	ldr	r3, [r7, #16]
 801b2cc:	f003 0302 	and.w	r3, r3, #2
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	f000 80bf 	beq.w	801b454 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b2da:	f003 031f 	and.w	r3, r3, #31
 801b2de:	2202      	movs	r2, #2
 801b2e0:	409a      	lsls	r2, r3
 801b2e2:	69fb      	ldr	r3, [r7, #28]
 801b2e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b2e6:	693b      	ldr	r3, [r7, #16]
 801b2e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d018      	beq.n	801b322 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b2f0:	693b      	ldr	r3, [r7, #16]
 801b2f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d109      	bne.n	801b30e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	f000 813a 	beq.w	801b578 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b308:	6878      	ldr	r0, [r7, #4]
 801b30a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b30c:	e134      	b.n	801b578 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b312:	2b00      	cmp	r3, #0
 801b314:	f000 8130 	beq.w	801b578 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b31c:	6878      	ldr	r0, [r7, #4]
 801b31e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b320:	e12a      	b.n	801b578 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b322:	693b      	ldr	r3, [r7, #16]
 801b324:	f003 0320 	and.w	r3, r3, #32
 801b328:	2b00      	cmp	r3, #0
 801b32a:	f040 8089 	bne.w	801b440 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	4a2b      	ldr	r2, [pc, #172]	@ (801b3e0 <HAL_DMA_IRQHandler+0xc74>)
 801b334:	4293      	cmp	r3, r2
 801b336:	d04a      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	4a29      	ldr	r2, [pc, #164]	@ (801b3e4 <HAL_DMA_IRQHandler+0xc78>)
 801b33e:	4293      	cmp	r3, r2
 801b340:	d045      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	4a28      	ldr	r2, [pc, #160]	@ (801b3e8 <HAL_DMA_IRQHandler+0xc7c>)
 801b348:	4293      	cmp	r3, r2
 801b34a:	d040      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4a26      	ldr	r2, [pc, #152]	@ (801b3ec <HAL_DMA_IRQHandler+0xc80>)
 801b352:	4293      	cmp	r3, r2
 801b354:	d03b      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	4a25      	ldr	r2, [pc, #148]	@ (801b3f0 <HAL_DMA_IRQHandler+0xc84>)
 801b35c:	4293      	cmp	r3, r2
 801b35e:	d036      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	4a23      	ldr	r2, [pc, #140]	@ (801b3f4 <HAL_DMA_IRQHandler+0xc88>)
 801b366:	4293      	cmp	r3, r2
 801b368:	d031      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	4a22      	ldr	r2, [pc, #136]	@ (801b3f8 <HAL_DMA_IRQHandler+0xc8c>)
 801b370:	4293      	cmp	r3, r2
 801b372:	d02c      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	4a20      	ldr	r2, [pc, #128]	@ (801b3fc <HAL_DMA_IRQHandler+0xc90>)
 801b37a:	4293      	cmp	r3, r2
 801b37c:	d027      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	4a1f      	ldr	r2, [pc, #124]	@ (801b400 <HAL_DMA_IRQHandler+0xc94>)
 801b384:	4293      	cmp	r3, r2
 801b386:	d022      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	4a1d      	ldr	r2, [pc, #116]	@ (801b404 <HAL_DMA_IRQHandler+0xc98>)
 801b38e:	4293      	cmp	r3, r2
 801b390:	d01d      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	4a1c      	ldr	r2, [pc, #112]	@ (801b408 <HAL_DMA_IRQHandler+0xc9c>)
 801b398:	4293      	cmp	r3, r2
 801b39a:	d018      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	4a1a      	ldr	r2, [pc, #104]	@ (801b40c <HAL_DMA_IRQHandler+0xca0>)
 801b3a2:	4293      	cmp	r3, r2
 801b3a4:	d013      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	4a19      	ldr	r2, [pc, #100]	@ (801b410 <HAL_DMA_IRQHandler+0xca4>)
 801b3ac:	4293      	cmp	r3, r2
 801b3ae:	d00e      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	4a17      	ldr	r2, [pc, #92]	@ (801b414 <HAL_DMA_IRQHandler+0xca8>)
 801b3b6:	4293      	cmp	r3, r2
 801b3b8:	d009      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	4a16      	ldr	r2, [pc, #88]	@ (801b418 <HAL_DMA_IRQHandler+0xcac>)
 801b3c0:	4293      	cmp	r3, r2
 801b3c2:	d004      	beq.n	801b3ce <HAL_DMA_IRQHandler+0xc62>
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	4a14      	ldr	r2, [pc, #80]	@ (801b41c <HAL_DMA_IRQHandler+0xcb0>)
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d128      	bne.n	801b420 <HAL_DMA_IRQHandler+0xcb4>
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	681a      	ldr	r2, [r3, #0]
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	f022 0214 	bic.w	r2, r2, #20
 801b3dc:	601a      	str	r2, [r3, #0]
 801b3de:	e027      	b.n	801b430 <HAL_DMA_IRQHandler+0xcc4>
 801b3e0:	40020010 	.word	0x40020010
 801b3e4:	40020028 	.word	0x40020028
 801b3e8:	40020040 	.word	0x40020040
 801b3ec:	40020058 	.word	0x40020058
 801b3f0:	40020070 	.word	0x40020070
 801b3f4:	40020088 	.word	0x40020088
 801b3f8:	400200a0 	.word	0x400200a0
 801b3fc:	400200b8 	.word	0x400200b8
 801b400:	40020410 	.word	0x40020410
 801b404:	40020428 	.word	0x40020428
 801b408:	40020440 	.word	0x40020440
 801b40c:	40020458 	.word	0x40020458
 801b410:	40020470 	.word	0x40020470
 801b414:	40020488 	.word	0x40020488
 801b418:	400204a0 	.word	0x400204a0
 801b41c:	400204b8 	.word	0x400204b8
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	681a      	ldr	r2, [r3, #0]
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	f022 020a 	bic.w	r2, r2, #10
 801b42e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	2201      	movs	r2, #1
 801b434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2200      	movs	r2, #0
 801b43c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b444:	2b00      	cmp	r3, #0
 801b446:	f000 8097 	beq.w	801b578 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b44e:	6878      	ldr	r0, [r7, #4]
 801b450:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b452:	e091      	b.n	801b578 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b458:	f003 031f 	and.w	r3, r3, #31
 801b45c:	2208      	movs	r2, #8
 801b45e:	409a      	lsls	r2, r3
 801b460:	697b      	ldr	r3, [r7, #20]
 801b462:	4013      	ands	r3, r2
 801b464:	2b00      	cmp	r3, #0
 801b466:	f000 8088 	beq.w	801b57a <HAL_DMA_IRQHandler+0xe0e>
 801b46a:	693b      	ldr	r3, [r7, #16]
 801b46c:	f003 0308 	and.w	r3, r3, #8
 801b470:	2b00      	cmp	r3, #0
 801b472:	f000 8082 	beq.w	801b57a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	4a41      	ldr	r2, [pc, #260]	@ (801b580 <HAL_DMA_IRQHandler+0xe14>)
 801b47c:	4293      	cmp	r3, r2
 801b47e:	d04a      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	4a3f      	ldr	r2, [pc, #252]	@ (801b584 <HAL_DMA_IRQHandler+0xe18>)
 801b486:	4293      	cmp	r3, r2
 801b488:	d045      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	4a3e      	ldr	r2, [pc, #248]	@ (801b588 <HAL_DMA_IRQHandler+0xe1c>)
 801b490:	4293      	cmp	r3, r2
 801b492:	d040      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	4a3c      	ldr	r2, [pc, #240]	@ (801b58c <HAL_DMA_IRQHandler+0xe20>)
 801b49a:	4293      	cmp	r3, r2
 801b49c:	d03b      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	4a3b      	ldr	r2, [pc, #236]	@ (801b590 <HAL_DMA_IRQHandler+0xe24>)
 801b4a4:	4293      	cmp	r3, r2
 801b4a6:	d036      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	4a39      	ldr	r2, [pc, #228]	@ (801b594 <HAL_DMA_IRQHandler+0xe28>)
 801b4ae:	4293      	cmp	r3, r2
 801b4b0:	d031      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	4a38      	ldr	r2, [pc, #224]	@ (801b598 <HAL_DMA_IRQHandler+0xe2c>)
 801b4b8:	4293      	cmp	r3, r2
 801b4ba:	d02c      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	4a36      	ldr	r2, [pc, #216]	@ (801b59c <HAL_DMA_IRQHandler+0xe30>)
 801b4c2:	4293      	cmp	r3, r2
 801b4c4:	d027      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	4a35      	ldr	r2, [pc, #212]	@ (801b5a0 <HAL_DMA_IRQHandler+0xe34>)
 801b4cc:	4293      	cmp	r3, r2
 801b4ce:	d022      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	4a33      	ldr	r2, [pc, #204]	@ (801b5a4 <HAL_DMA_IRQHandler+0xe38>)
 801b4d6:	4293      	cmp	r3, r2
 801b4d8:	d01d      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	4a32      	ldr	r2, [pc, #200]	@ (801b5a8 <HAL_DMA_IRQHandler+0xe3c>)
 801b4e0:	4293      	cmp	r3, r2
 801b4e2:	d018      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	4a30      	ldr	r2, [pc, #192]	@ (801b5ac <HAL_DMA_IRQHandler+0xe40>)
 801b4ea:	4293      	cmp	r3, r2
 801b4ec:	d013      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	4a2f      	ldr	r2, [pc, #188]	@ (801b5b0 <HAL_DMA_IRQHandler+0xe44>)
 801b4f4:	4293      	cmp	r3, r2
 801b4f6:	d00e      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	4a2d      	ldr	r2, [pc, #180]	@ (801b5b4 <HAL_DMA_IRQHandler+0xe48>)
 801b4fe:	4293      	cmp	r3, r2
 801b500:	d009      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	4a2c      	ldr	r2, [pc, #176]	@ (801b5b8 <HAL_DMA_IRQHandler+0xe4c>)
 801b508:	4293      	cmp	r3, r2
 801b50a:	d004      	beq.n	801b516 <HAL_DMA_IRQHandler+0xdaa>
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	4a2a      	ldr	r2, [pc, #168]	@ (801b5bc <HAL_DMA_IRQHandler+0xe50>)
 801b512:	4293      	cmp	r3, r2
 801b514:	d108      	bne.n	801b528 <HAL_DMA_IRQHandler+0xdbc>
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	681a      	ldr	r2, [r3, #0]
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	f022 021c 	bic.w	r2, r2, #28
 801b524:	601a      	str	r2, [r3, #0]
 801b526:	e007      	b.n	801b538 <HAL_DMA_IRQHandler+0xdcc>
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	681a      	ldr	r2, [r3, #0]
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	f022 020e 	bic.w	r2, r2, #14
 801b536:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b53c:	f003 031f 	and.w	r3, r3, #31
 801b540:	2201      	movs	r2, #1
 801b542:	409a      	lsls	r2, r3
 801b544:	69fb      	ldr	r3, [r7, #28]
 801b546:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2201      	movs	r2, #1
 801b54c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	2201      	movs	r2, #1
 801b552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	2200      	movs	r2, #0
 801b55a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b562:	2b00      	cmp	r3, #0
 801b564:	d009      	beq.n	801b57a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b56a:	6878      	ldr	r0, [r7, #4]
 801b56c:	4798      	blx	r3
 801b56e:	e004      	b.n	801b57a <HAL_DMA_IRQHandler+0xe0e>
          return;
 801b570:	bf00      	nop
 801b572:	e002      	b.n	801b57a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b574:	bf00      	nop
 801b576:	e000      	b.n	801b57a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b578:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801b57a:	3728      	adds	r7, #40	@ 0x28
 801b57c:	46bd      	mov	sp, r7
 801b57e:	bd80      	pop	{r7, pc}
 801b580:	40020010 	.word	0x40020010
 801b584:	40020028 	.word	0x40020028
 801b588:	40020040 	.word	0x40020040
 801b58c:	40020058 	.word	0x40020058
 801b590:	40020070 	.word	0x40020070
 801b594:	40020088 	.word	0x40020088
 801b598:	400200a0 	.word	0x400200a0
 801b59c:	400200b8 	.word	0x400200b8
 801b5a0:	40020410 	.word	0x40020410
 801b5a4:	40020428 	.word	0x40020428
 801b5a8:	40020440 	.word	0x40020440
 801b5ac:	40020458 	.word	0x40020458
 801b5b0:	40020470 	.word	0x40020470
 801b5b4:	40020488 	.word	0x40020488
 801b5b8:	400204a0 	.word	0x400204a0
 801b5bc:	400204b8 	.word	0x400204b8

0801b5c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801b5c0:	b480      	push	{r7}
 801b5c2:	b085      	sub	sp, #20
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	4a42      	ldr	r2, [pc, #264]	@ (801b6d8 <DMA_CalcBaseAndBitshift+0x118>)
 801b5ce:	4293      	cmp	r3, r2
 801b5d0:	d04a      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	4a41      	ldr	r2, [pc, #260]	@ (801b6dc <DMA_CalcBaseAndBitshift+0x11c>)
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	d045      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	4a3f      	ldr	r2, [pc, #252]	@ (801b6e0 <DMA_CalcBaseAndBitshift+0x120>)
 801b5e2:	4293      	cmp	r3, r2
 801b5e4:	d040      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	4a3e      	ldr	r2, [pc, #248]	@ (801b6e4 <DMA_CalcBaseAndBitshift+0x124>)
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	d03b      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	4a3c      	ldr	r2, [pc, #240]	@ (801b6e8 <DMA_CalcBaseAndBitshift+0x128>)
 801b5f6:	4293      	cmp	r3, r2
 801b5f8:	d036      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	4a3b      	ldr	r2, [pc, #236]	@ (801b6ec <DMA_CalcBaseAndBitshift+0x12c>)
 801b600:	4293      	cmp	r3, r2
 801b602:	d031      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	4a39      	ldr	r2, [pc, #228]	@ (801b6f0 <DMA_CalcBaseAndBitshift+0x130>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d02c      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	4a38      	ldr	r2, [pc, #224]	@ (801b6f4 <DMA_CalcBaseAndBitshift+0x134>)
 801b614:	4293      	cmp	r3, r2
 801b616:	d027      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	4a36      	ldr	r2, [pc, #216]	@ (801b6f8 <DMA_CalcBaseAndBitshift+0x138>)
 801b61e:	4293      	cmp	r3, r2
 801b620:	d022      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	4a35      	ldr	r2, [pc, #212]	@ (801b6fc <DMA_CalcBaseAndBitshift+0x13c>)
 801b628:	4293      	cmp	r3, r2
 801b62a:	d01d      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	4a33      	ldr	r2, [pc, #204]	@ (801b700 <DMA_CalcBaseAndBitshift+0x140>)
 801b632:	4293      	cmp	r3, r2
 801b634:	d018      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	4a32      	ldr	r2, [pc, #200]	@ (801b704 <DMA_CalcBaseAndBitshift+0x144>)
 801b63c:	4293      	cmp	r3, r2
 801b63e:	d013      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	4a30      	ldr	r2, [pc, #192]	@ (801b708 <DMA_CalcBaseAndBitshift+0x148>)
 801b646:	4293      	cmp	r3, r2
 801b648:	d00e      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	4a2f      	ldr	r2, [pc, #188]	@ (801b70c <DMA_CalcBaseAndBitshift+0x14c>)
 801b650:	4293      	cmp	r3, r2
 801b652:	d009      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	4a2d      	ldr	r2, [pc, #180]	@ (801b710 <DMA_CalcBaseAndBitshift+0x150>)
 801b65a:	4293      	cmp	r3, r2
 801b65c:	d004      	beq.n	801b668 <DMA_CalcBaseAndBitshift+0xa8>
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	4a2c      	ldr	r2, [pc, #176]	@ (801b714 <DMA_CalcBaseAndBitshift+0x154>)
 801b664:	4293      	cmp	r3, r2
 801b666:	d101      	bne.n	801b66c <DMA_CalcBaseAndBitshift+0xac>
 801b668:	2301      	movs	r3, #1
 801b66a:	e000      	b.n	801b66e <DMA_CalcBaseAndBitshift+0xae>
 801b66c:	2300      	movs	r3, #0
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d024      	beq.n	801b6bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	b2db      	uxtb	r3, r3
 801b678:	3b10      	subs	r3, #16
 801b67a:	4a27      	ldr	r2, [pc, #156]	@ (801b718 <DMA_CalcBaseAndBitshift+0x158>)
 801b67c:	fba2 2303 	umull	r2, r3, r2, r3
 801b680:	091b      	lsrs	r3, r3, #4
 801b682:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	f003 0307 	and.w	r3, r3, #7
 801b68a:	4a24      	ldr	r2, [pc, #144]	@ (801b71c <DMA_CalcBaseAndBitshift+0x15c>)
 801b68c:	5cd3      	ldrb	r3, [r2, r3]
 801b68e:	461a      	mov	r2, r3
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	2b03      	cmp	r3, #3
 801b698:	d908      	bls.n	801b6ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	461a      	mov	r2, r3
 801b6a0:	4b1f      	ldr	r3, [pc, #124]	@ (801b720 <DMA_CalcBaseAndBitshift+0x160>)
 801b6a2:	4013      	ands	r3, r2
 801b6a4:	1d1a      	adds	r2, r3, #4
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	659a      	str	r2, [r3, #88]	@ 0x58
 801b6aa:	e00d      	b.n	801b6c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	461a      	mov	r2, r3
 801b6b2:	4b1b      	ldr	r3, [pc, #108]	@ (801b720 <DMA_CalcBaseAndBitshift+0x160>)
 801b6b4:	4013      	ands	r3, r2
 801b6b6:	687a      	ldr	r2, [r7, #4]
 801b6b8:	6593      	str	r3, [r2, #88]	@ 0x58
 801b6ba:	e005      	b.n	801b6c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	3714      	adds	r7, #20
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d6:	4770      	bx	lr
 801b6d8:	40020010 	.word	0x40020010
 801b6dc:	40020028 	.word	0x40020028
 801b6e0:	40020040 	.word	0x40020040
 801b6e4:	40020058 	.word	0x40020058
 801b6e8:	40020070 	.word	0x40020070
 801b6ec:	40020088 	.word	0x40020088
 801b6f0:	400200a0 	.word	0x400200a0
 801b6f4:	400200b8 	.word	0x400200b8
 801b6f8:	40020410 	.word	0x40020410
 801b6fc:	40020428 	.word	0x40020428
 801b700:	40020440 	.word	0x40020440
 801b704:	40020458 	.word	0x40020458
 801b708:	40020470 	.word	0x40020470
 801b70c:	40020488 	.word	0x40020488
 801b710:	400204a0 	.word	0x400204a0
 801b714:	400204b8 	.word	0x400204b8
 801b718:	aaaaaaab 	.word	0xaaaaaaab
 801b71c:	08027024 	.word	0x08027024
 801b720:	fffffc00 	.word	0xfffffc00

0801b724 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801b724:	b480      	push	{r7}
 801b726:	b085      	sub	sp, #20
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b72c:	2300      	movs	r3, #0
 801b72e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	699b      	ldr	r3, [r3, #24]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d120      	bne.n	801b77a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b73c:	2b03      	cmp	r3, #3
 801b73e:	d858      	bhi.n	801b7f2 <DMA_CheckFifoParam+0xce>
 801b740:	a201      	add	r2, pc, #4	@ (adr r2, 801b748 <DMA_CheckFifoParam+0x24>)
 801b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b746:	bf00      	nop
 801b748:	0801b759 	.word	0x0801b759
 801b74c:	0801b76b 	.word	0x0801b76b
 801b750:	0801b759 	.word	0x0801b759
 801b754:	0801b7f3 	.word	0x0801b7f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b75c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b760:	2b00      	cmp	r3, #0
 801b762:	d048      	beq.n	801b7f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801b764:	2301      	movs	r3, #1
 801b766:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b768:	e045      	b.n	801b7f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b76e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b772:	d142      	bne.n	801b7fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801b774:	2301      	movs	r3, #1
 801b776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b778:	e03f      	b.n	801b7fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	699b      	ldr	r3, [r3, #24]
 801b77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b782:	d123      	bne.n	801b7cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b788:	2b03      	cmp	r3, #3
 801b78a:	d838      	bhi.n	801b7fe <DMA_CheckFifoParam+0xda>
 801b78c:	a201      	add	r2, pc, #4	@ (adr r2, 801b794 <DMA_CheckFifoParam+0x70>)
 801b78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b792:	bf00      	nop
 801b794:	0801b7a5 	.word	0x0801b7a5
 801b798:	0801b7ab 	.word	0x0801b7ab
 801b79c:	0801b7a5 	.word	0x0801b7a5
 801b7a0:	0801b7bd 	.word	0x0801b7bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801b7a4:	2301      	movs	r3, #1
 801b7a6:	73fb      	strb	r3, [r7, #15]
        break;
 801b7a8:	e030      	b.n	801b80c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d025      	beq.n	801b802 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801b7b6:	2301      	movs	r3, #1
 801b7b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b7ba:	e022      	b.n	801b802 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b7c4:	d11f      	bne.n	801b806 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801b7c6:	2301      	movs	r3, #1
 801b7c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b7ca:	e01c      	b.n	801b806 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7d0:	2b02      	cmp	r3, #2
 801b7d2:	d902      	bls.n	801b7da <DMA_CheckFifoParam+0xb6>
 801b7d4:	2b03      	cmp	r3, #3
 801b7d6:	d003      	beq.n	801b7e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801b7d8:	e018      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801b7da:	2301      	movs	r3, #1
 801b7dc:	73fb      	strb	r3, [r7, #15]
        break;
 801b7de:	e015      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d00e      	beq.n	801b80a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801b7ec:	2301      	movs	r3, #1
 801b7ee:	73fb      	strb	r3, [r7, #15]
    break;
 801b7f0:	e00b      	b.n	801b80a <DMA_CheckFifoParam+0xe6>
        break;
 801b7f2:	bf00      	nop
 801b7f4:	e00a      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
        break;
 801b7f6:	bf00      	nop
 801b7f8:	e008      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
        break;
 801b7fa:	bf00      	nop
 801b7fc:	e006      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
        break;
 801b7fe:	bf00      	nop
 801b800:	e004      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
        break;
 801b802:	bf00      	nop
 801b804:	e002      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
        break;
 801b806:	bf00      	nop
 801b808:	e000      	b.n	801b80c <DMA_CheckFifoParam+0xe8>
    break;
 801b80a:	bf00      	nop
    }
  }

  return status;
 801b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b80e:	4618      	mov	r0, r3
 801b810:	3714      	adds	r7, #20
 801b812:	46bd      	mov	sp, r7
 801b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b818:	4770      	bx	lr
 801b81a:	bf00      	nop

0801b81c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b81c:	b480      	push	{r7}
 801b81e:	b085      	sub	sp, #20
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	4a38      	ldr	r2, [pc, #224]	@ (801b910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801b830:	4293      	cmp	r3, r2
 801b832:	d022      	beq.n	801b87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	4a36      	ldr	r2, [pc, #216]	@ (801b914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b83a:	4293      	cmp	r3, r2
 801b83c:	d01d      	beq.n	801b87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	681b      	ldr	r3, [r3, #0]
 801b842:	4a35      	ldr	r2, [pc, #212]	@ (801b918 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b844:	4293      	cmp	r3, r2
 801b846:	d018      	beq.n	801b87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	4a33      	ldr	r2, [pc, #204]	@ (801b91c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b84e:	4293      	cmp	r3, r2
 801b850:	d013      	beq.n	801b87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	4a32      	ldr	r2, [pc, #200]	@ (801b920 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b858:	4293      	cmp	r3, r2
 801b85a:	d00e      	beq.n	801b87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	4a30      	ldr	r2, [pc, #192]	@ (801b924 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b862:	4293      	cmp	r3, r2
 801b864:	d009      	beq.n	801b87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	4a2f      	ldr	r2, [pc, #188]	@ (801b928 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b86c:	4293      	cmp	r3, r2
 801b86e:	d004      	beq.n	801b87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	4a2d      	ldr	r2, [pc, #180]	@ (801b92c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b876:	4293      	cmp	r3, r2
 801b878:	d101      	bne.n	801b87e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b87a:	2301      	movs	r3, #1
 801b87c:	e000      	b.n	801b880 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b87e:	2300      	movs	r3, #0
 801b880:	2b00      	cmp	r3, #0
 801b882:	d01a      	beq.n	801b8ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	b2db      	uxtb	r3, r3
 801b88a:	3b08      	subs	r3, #8
 801b88c:	4a28      	ldr	r2, [pc, #160]	@ (801b930 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b88e:	fba2 2303 	umull	r2, r3, r2, r3
 801b892:	091b      	lsrs	r3, r3, #4
 801b894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b896:	68fa      	ldr	r2, [r7, #12]
 801b898:	4b26      	ldr	r3, [pc, #152]	@ (801b934 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b89a:	4413      	add	r3, r2
 801b89c:	009b      	lsls	r3, r3, #2
 801b89e:	461a      	mov	r2, r3
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	4a24      	ldr	r2, [pc, #144]	@ (801b938 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b8a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	f003 031f 	and.w	r3, r3, #31
 801b8b0:	2201      	movs	r2, #1
 801b8b2:	409a      	lsls	r2, r3
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b8b8:	e024      	b.n	801b904 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	b2db      	uxtb	r3, r3
 801b8c0:	3b10      	subs	r3, #16
 801b8c2:	4a1e      	ldr	r2, [pc, #120]	@ (801b93c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b8c4:	fba2 2303 	umull	r2, r3, r2, r3
 801b8c8:	091b      	lsrs	r3, r3, #4
 801b8ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	4a1c      	ldr	r2, [pc, #112]	@ (801b940 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b8d0:	4293      	cmp	r3, r2
 801b8d2:	d806      	bhi.n	801b8e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b8d4:	68bb      	ldr	r3, [r7, #8]
 801b8d6:	4a1b      	ldr	r2, [pc, #108]	@ (801b944 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d902      	bls.n	801b8e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	3308      	adds	r3, #8
 801b8e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b8e2:	68fa      	ldr	r2, [r7, #12]
 801b8e4:	4b18      	ldr	r3, [pc, #96]	@ (801b948 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b8e6:	4413      	add	r3, r2
 801b8e8:	009b      	lsls	r3, r3, #2
 801b8ea:	461a      	mov	r2, r3
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	4a16      	ldr	r2, [pc, #88]	@ (801b94c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b8f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	f003 031f 	and.w	r3, r3, #31
 801b8fc:	2201      	movs	r2, #1
 801b8fe:	409a      	lsls	r2, r3
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b904:	bf00      	nop
 801b906:	3714      	adds	r7, #20
 801b908:	46bd      	mov	sp, r7
 801b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90e:	4770      	bx	lr
 801b910:	58025408 	.word	0x58025408
 801b914:	5802541c 	.word	0x5802541c
 801b918:	58025430 	.word	0x58025430
 801b91c:	58025444 	.word	0x58025444
 801b920:	58025458 	.word	0x58025458
 801b924:	5802546c 	.word	0x5802546c
 801b928:	58025480 	.word	0x58025480
 801b92c:	58025494 	.word	0x58025494
 801b930:	cccccccd 	.word	0xcccccccd
 801b934:	16009600 	.word	0x16009600
 801b938:	58025880 	.word	0x58025880
 801b93c:	aaaaaaab 	.word	0xaaaaaaab
 801b940:	400204b8 	.word	0x400204b8
 801b944:	4002040f 	.word	0x4002040f
 801b948:	10008200 	.word	0x10008200
 801b94c:	40020880 	.word	0x40020880

0801b950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b950:	b480      	push	{r7}
 801b952:	b085      	sub	sp, #20
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	685b      	ldr	r3, [r3, #4]
 801b95c:	b2db      	uxtb	r3, r3
 801b95e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801b960:	68fb      	ldr	r3, [r7, #12]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d04a      	beq.n	801b9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	2b08      	cmp	r3, #8
 801b96a:	d847      	bhi.n	801b9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	4a25      	ldr	r2, [pc, #148]	@ (801ba08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801b972:	4293      	cmp	r3, r2
 801b974:	d022      	beq.n	801b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	4a24      	ldr	r2, [pc, #144]	@ (801ba0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801b97c:	4293      	cmp	r3, r2
 801b97e:	d01d      	beq.n	801b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	4a22      	ldr	r2, [pc, #136]	@ (801ba10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801b986:	4293      	cmp	r3, r2
 801b988:	d018      	beq.n	801b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	4a21      	ldr	r2, [pc, #132]	@ (801ba14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801b990:	4293      	cmp	r3, r2
 801b992:	d013      	beq.n	801b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	4a1f      	ldr	r2, [pc, #124]	@ (801ba18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d00e      	beq.n	801b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	4a1e      	ldr	r2, [pc, #120]	@ (801ba1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801b9a4:	4293      	cmp	r3, r2
 801b9a6:	d009      	beq.n	801b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	4a1c      	ldr	r2, [pc, #112]	@ (801ba20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801b9ae:	4293      	cmp	r3, r2
 801b9b0:	d004      	beq.n	801b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	4a1b      	ldr	r2, [pc, #108]	@ (801ba24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801b9b8:	4293      	cmp	r3, r2
 801b9ba:	d101      	bne.n	801b9c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801b9bc:	2301      	movs	r3, #1
 801b9be:	e000      	b.n	801b9c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d00a      	beq.n	801b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801b9c6:	68fa      	ldr	r2, [r7, #12]
 801b9c8:	4b17      	ldr	r3, [pc, #92]	@ (801ba28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801b9ca:	4413      	add	r3, r2
 801b9cc:	009b      	lsls	r3, r3, #2
 801b9ce:	461a      	mov	r2, r3
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	4a15      	ldr	r2, [pc, #84]	@ (801ba2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801b9d8:	671a      	str	r2, [r3, #112]	@ 0x70
 801b9da:	e009      	b.n	801b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b9dc:	68fa      	ldr	r2, [r7, #12]
 801b9de:	4b14      	ldr	r3, [pc, #80]	@ (801ba30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801b9e0:	4413      	add	r3, r2
 801b9e2:	009b      	lsls	r3, r3, #2
 801b9e4:	461a      	mov	r2, r3
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	4a11      	ldr	r2, [pc, #68]	@ (801ba34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801b9ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	3b01      	subs	r3, #1
 801b9f4:	2201      	movs	r2, #1
 801b9f6:	409a      	lsls	r2, r3
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801b9fc:	bf00      	nop
 801b9fe:	3714      	adds	r7, #20
 801ba00:	46bd      	mov	sp, r7
 801ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba06:	4770      	bx	lr
 801ba08:	58025408 	.word	0x58025408
 801ba0c:	5802541c 	.word	0x5802541c
 801ba10:	58025430 	.word	0x58025430
 801ba14:	58025444 	.word	0x58025444
 801ba18:	58025458 	.word	0x58025458
 801ba1c:	5802546c 	.word	0x5802546c
 801ba20:	58025480 	.word	0x58025480
 801ba24:	58025494 	.word	0x58025494
 801ba28:	1600963f 	.word	0x1600963f
 801ba2c:	58025940 	.word	0x58025940
 801ba30:	1000823f 	.word	0x1000823f
 801ba34:	40020940 	.word	0x40020940

0801ba38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ba38:	b480      	push	{r7}
 801ba3a:	b089      	sub	sp, #36	@ 0x24
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
 801ba40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801ba42:	2300      	movs	r3, #0
 801ba44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801ba46:	4b89      	ldr	r3, [pc, #548]	@ (801bc6c <HAL_GPIO_Init+0x234>)
 801ba48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ba4a:	e194      	b.n	801bd76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801ba4c:	683b      	ldr	r3, [r7, #0]
 801ba4e:	681a      	ldr	r2, [r3, #0]
 801ba50:	2101      	movs	r1, #1
 801ba52:	69fb      	ldr	r3, [r7, #28]
 801ba54:	fa01 f303 	lsl.w	r3, r1, r3
 801ba58:	4013      	ands	r3, r2
 801ba5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801ba5c:	693b      	ldr	r3, [r7, #16]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	f000 8186 	beq.w	801bd70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ba64:	683b      	ldr	r3, [r7, #0]
 801ba66:	685b      	ldr	r3, [r3, #4]
 801ba68:	f003 0303 	and.w	r3, r3, #3
 801ba6c:	2b01      	cmp	r3, #1
 801ba6e:	d005      	beq.n	801ba7c <HAL_GPIO_Init+0x44>
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	685b      	ldr	r3, [r3, #4]
 801ba74:	f003 0303 	and.w	r3, r3, #3
 801ba78:	2b02      	cmp	r3, #2
 801ba7a:	d130      	bne.n	801bade <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	689b      	ldr	r3, [r3, #8]
 801ba80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801ba82:	69fb      	ldr	r3, [r7, #28]
 801ba84:	005b      	lsls	r3, r3, #1
 801ba86:	2203      	movs	r2, #3
 801ba88:	fa02 f303 	lsl.w	r3, r2, r3
 801ba8c:	43db      	mvns	r3, r3
 801ba8e:	69ba      	ldr	r2, [r7, #24]
 801ba90:	4013      	ands	r3, r2
 801ba92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ba94:	683b      	ldr	r3, [r7, #0]
 801ba96:	68da      	ldr	r2, [r3, #12]
 801ba98:	69fb      	ldr	r3, [r7, #28]
 801ba9a:	005b      	lsls	r3, r3, #1
 801ba9c:	fa02 f303 	lsl.w	r3, r2, r3
 801baa0:	69ba      	ldr	r2, [r7, #24]
 801baa2:	4313      	orrs	r3, r2
 801baa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	69ba      	ldr	r2, [r7, #24]
 801baaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	685b      	ldr	r3, [r3, #4]
 801bab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bab2:	2201      	movs	r2, #1
 801bab4:	69fb      	ldr	r3, [r7, #28]
 801bab6:	fa02 f303 	lsl.w	r3, r2, r3
 801baba:	43db      	mvns	r3, r3
 801babc:	69ba      	ldr	r2, [r7, #24]
 801babe:	4013      	ands	r3, r2
 801bac0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bac2:	683b      	ldr	r3, [r7, #0]
 801bac4:	685b      	ldr	r3, [r3, #4]
 801bac6:	091b      	lsrs	r3, r3, #4
 801bac8:	f003 0201 	and.w	r2, r3, #1
 801bacc:	69fb      	ldr	r3, [r7, #28]
 801bace:	fa02 f303 	lsl.w	r3, r2, r3
 801bad2:	69ba      	ldr	r2, [r7, #24]
 801bad4:	4313      	orrs	r3, r2
 801bad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	69ba      	ldr	r2, [r7, #24]
 801badc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bade:	683b      	ldr	r3, [r7, #0]
 801bae0:	685b      	ldr	r3, [r3, #4]
 801bae2:	f003 0303 	and.w	r3, r3, #3
 801bae6:	2b03      	cmp	r3, #3
 801bae8:	d017      	beq.n	801bb1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	68db      	ldr	r3, [r3, #12]
 801baee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801baf0:	69fb      	ldr	r3, [r7, #28]
 801baf2:	005b      	lsls	r3, r3, #1
 801baf4:	2203      	movs	r2, #3
 801baf6:	fa02 f303 	lsl.w	r3, r2, r3
 801bafa:	43db      	mvns	r3, r3
 801bafc:	69ba      	ldr	r2, [r7, #24]
 801bafe:	4013      	ands	r3, r2
 801bb00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bb02:	683b      	ldr	r3, [r7, #0]
 801bb04:	689a      	ldr	r2, [r3, #8]
 801bb06:	69fb      	ldr	r3, [r7, #28]
 801bb08:	005b      	lsls	r3, r3, #1
 801bb0a:	fa02 f303 	lsl.w	r3, r2, r3
 801bb0e:	69ba      	ldr	r2, [r7, #24]
 801bb10:	4313      	orrs	r3, r2
 801bb12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	69ba      	ldr	r2, [r7, #24]
 801bb18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bb1a:	683b      	ldr	r3, [r7, #0]
 801bb1c:	685b      	ldr	r3, [r3, #4]
 801bb1e:	f003 0303 	and.w	r3, r3, #3
 801bb22:	2b02      	cmp	r3, #2
 801bb24:	d123      	bne.n	801bb6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bb26:	69fb      	ldr	r3, [r7, #28]
 801bb28:	08da      	lsrs	r2, r3, #3
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	3208      	adds	r2, #8
 801bb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bb32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bb34:	69fb      	ldr	r3, [r7, #28]
 801bb36:	f003 0307 	and.w	r3, r3, #7
 801bb3a:	009b      	lsls	r3, r3, #2
 801bb3c:	220f      	movs	r2, #15
 801bb3e:	fa02 f303 	lsl.w	r3, r2, r3
 801bb42:	43db      	mvns	r3, r3
 801bb44:	69ba      	ldr	r2, [r7, #24]
 801bb46:	4013      	ands	r3, r2
 801bb48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bb4a:	683b      	ldr	r3, [r7, #0]
 801bb4c:	691a      	ldr	r2, [r3, #16]
 801bb4e:	69fb      	ldr	r3, [r7, #28]
 801bb50:	f003 0307 	and.w	r3, r3, #7
 801bb54:	009b      	lsls	r3, r3, #2
 801bb56:	fa02 f303 	lsl.w	r3, r2, r3
 801bb5a:	69ba      	ldr	r2, [r7, #24]
 801bb5c:	4313      	orrs	r3, r2
 801bb5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801bb60:	69fb      	ldr	r3, [r7, #28]
 801bb62:	08da      	lsrs	r2, r3, #3
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	3208      	adds	r2, #8
 801bb68:	69b9      	ldr	r1, [r7, #24]
 801bb6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bb74:	69fb      	ldr	r3, [r7, #28]
 801bb76:	005b      	lsls	r3, r3, #1
 801bb78:	2203      	movs	r2, #3
 801bb7a:	fa02 f303 	lsl.w	r3, r2, r3
 801bb7e:	43db      	mvns	r3, r3
 801bb80:	69ba      	ldr	r2, [r7, #24]
 801bb82:	4013      	ands	r3, r2
 801bb84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	685b      	ldr	r3, [r3, #4]
 801bb8a:	f003 0203 	and.w	r2, r3, #3
 801bb8e:	69fb      	ldr	r3, [r7, #28]
 801bb90:	005b      	lsls	r3, r3, #1
 801bb92:	fa02 f303 	lsl.w	r3, r2, r3
 801bb96:	69ba      	ldr	r2, [r7, #24]
 801bb98:	4313      	orrs	r3, r2
 801bb9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	69ba      	ldr	r2, [r7, #24]
 801bba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801bba2:	683b      	ldr	r3, [r7, #0]
 801bba4:	685b      	ldr	r3, [r3, #4]
 801bba6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	f000 80e0 	beq.w	801bd70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bbb0:	4b2f      	ldr	r3, [pc, #188]	@ (801bc70 <HAL_GPIO_Init+0x238>)
 801bbb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bbb6:	4a2e      	ldr	r2, [pc, #184]	@ (801bc70 <HAL_GPIO_Init+0x238>)
 801bbb8:	f043 0302 	orr.w	r3, r3, #2
 801bbbc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801bbc0:	4b2b      	ldr	r3, [pc, #172]	@ (801bc70 <HAL_GPIO_Init+0x238>)
 801bbc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bbc6:	f003 0302 	and.w	r3, r3, #2
 801bbca:	60fb      	str	r3, [r7, #12]
 801bbcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bbce:	4a29      	ldr	r2, [pc, #164]	@ (801bc74 <HAL_GPIO_Init+0x23c>)
 801bbd0:	69fb      	ldr	r3, [r7, #28]
 801bbd2:	089b      	lsrs	r3, r3, #2
 801bbd4:	3302      	adds	r3, #2
 801bbd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bbda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bbdc:	69fb      	ldr	r3, [r7, #28]
 801bbde:	f003 0303 	and.w	r3, r3, #3
 801bbe2:	009b      	lsls	r3, r3, #2
 801bbe4:	220f      	movs	r2, #15
 801bbe6:	fa02 f303 	lsl.w	r3, r2, r3
 801bbea:	43db      	mvns	r3, r3
 801bbec:	69ba      	ldr	r2, [r7, #24]
 801bbee:	4013      	ands	r3, r2
 801bbf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	4a20      	ldr	r2, [pc, #128]	@ (801bc78 <HAL_GPIO_Init+0x240>)
 801bbf6:	4293      	cmp	r3, r2
 801bbf8:	d052      	beq.n	801bca0 <HAL_GPIO_Init+0x268>
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	4a1f      	ldr	r2, [pc, #124]	@ (801bc7c <HAL_GPIO_Init+0x244>)
 801bbfe:	4293      	cmp	r3, r2
 801bc00:	d031      	beq.n	801bc66 <HAL_GPIO_Init+0x22e>
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	4a1e      	ldr	r2, [pc, #120]	@ (801bc80 <HAL_GPIO_Init+0x248>)
 801bc06:	4293      	cmp	r3, r2
 801bc08:	d02b      	beq.n	801bc62 <HAL_GPIO_Init+0x22a>
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	4a1d      	ldr	r2, [pc, #116]	@ (801bc84 <HAL_GPIO_Init+0x24c>)
 801bc0e:	4293      	cmp	r3, r2
 801bc10:	d025      	beq.n	801bc5e <HAL_GPIO_Init+0x226>
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	4a1c      	ldr	r2, [pc, #112]	@ (801bc88 <HAL_GPIO_Init+0x250>)
 801bc16:	4293      	cmp	r3, r2
 801bc18:	d01f      	beq.n	801bc5a <HAL_GPIO_Init+0x222>
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	4a1b      	ldr	r2, [pc, #108]	@ (801bc8c <HAL_GPIO_Init+0x254>)
 801bc1e:	4293      	cmp	r3, r2
 801bc20:	d019      	beq.n	801bc56 <HAL_GPIO_Init+0x21e>
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	4a1a      	ldr	r2, [pc, #104]	@ (801bc90 <HAL_GPIO_Init+0x258>)
 801bc26:	4293      	cmp	r3, r2
 801bc28:	d013      	beq.n	801bc52 <HAL_GPIO_Init+0x21a>
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	4a19      	ldr	r2, [pc, #100]	@ (801bc94 <HAL_GPIO_Init+0x25c>)
 801bc2e:	4293      	cmp	r3, r2
 801bc30:	d00d      	beq.n	801bc4e <HAL_GPIO_Init+0x216>
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	4a18      	ldr	r2, [pc, #96]	@ (801bc98 <HAL_GPIO_Init+0x260>)
 801bc36:	4293      	cmp	r3, r2
 801bc38:	d007      	beq.n	801bc4a <HAL_GPIO_Init+0x212>
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	4a17      	ldr	r2, [pc, #92]	@ (801bc9c <HAL_GPIO_Init+0x264>)
 801bc3e:	4293      	cmp	r3, r2
 801bc40:	d101      	bne.n	801bc46 <HAL_GPIO_Init+0x20e>
 801bc42:	2309      	movs	r3, #9
 801bc44:	e02d      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc46:	230a      	movs	r3, #10
 801bc48:	e02b      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc4a:	2308      	movs	r3, #8
 801bc4c:	e029      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc4e:	2307      	movs	r3, #7
 801bc50:	e027      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc52:	2306      	movs	r3, #6
 801bc54:	e025      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc56:	2305      	movs	r3, #5
 801bc58:	e023      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc5a:	2304      	movs	r3, #4
 801bc5c:	e021      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc5e:	2303      	movs	r3, #3
 801bc60:	e01f      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc62:	2302      	movs	r3, #2
 801bc64:	e01d      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc66:	2301      	movs	r3, #1
 801bc68:	e01b      	b.n	801bca2 <HAL_GPIO_Init+0x26a>
 801bc6a:	bf00      	nop
 801bc6c:	58000080 	.word	0x58000080
 801bc70:	58024400 	.word	0x58024400
 801bc74:	58000400 	.word	0x58000400
 801bc78:	58020000 	.word	0x58020000
 801bc7c:	58020400 	.word	0x58020400
 801bc80:	58020800 	.word	0x58020800
 801bc84:	58020c00 	.word	0x58020c00
 801bc88:	58021000 	.word	0x58021000
 801bc8c:	58021400 	.word	0x58021400
 801bc90:	58021800 	.word	0x58021800
 801bc94:	58021c00 	.word	0x58021c00
 801bc98:	58022000 	.word	0x58022000
 801bc9c:	58022400 	.word	0x58022400
 801bca0:	2300      	movs	r3, #0
 801bca2:	69fa      	ldr	r2, [r7, #28]
 801bca4:	f002 0203 	and.w	r2, r2, #3
 801bca8:	0092      	lsls	r2, r2, #2
 801bcaa:	4093      	lsls	r3, r2
 801bcac:	69ba      	ldr	r2, [r7, #24]
 801bcae:	4313      	orrs	r3, r2
 801bcb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bcb2:	4938      	ldr	r1, [pc, #224]	@ (801bd94 <HAL_GPIO_Init+0x35c>)
 801bcb4:	69fb      	ldr	r3, [r7, #28]
 801bcb6:	089b      	lsrs	r3, r3, #2
 801bcb8:	3302      	adds	r3, #2
 801bcba:	69ba      	ldr	r2, [r7, #24]
 801bcbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bcc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bcc8:	693b      	ldr	r3, [r7, #16]
 801bcca:	43db      	mvns	r3, r3
 801bccc:	69ba      	ldr	r2, [r7, #24]
 801bcce:	4013      	ands	r3, r2
 801bcd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bcd2:	683b      	ldr	r3, [r7, #0]
 801bcd4:	685b      	ldr	r3, [r3, #4]
 801bcd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d003      	beq.n	801bce6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801bcde:	69ba      	ldr	r2, [r7, #24]
 801bce0:	693b      	ldr	r3, [r7, #16]
 801bce2:	4313      	orrs	r3, r2
 801bce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801bce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801bcea:	69bb      	ldr	r3, [r7, #24]
 801bcec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801bcee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bcf2:	685b      	ldr	r3, [r3, #4]
 801bcf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bcf6:	693b      	ldr	r3, [r7, #16]
 801bcf8:	43db      	mvns	r3, r3
 801bcfa:	69ba      	ldr	r2, [r7, #24]
 801bcfc:	4013      	ands	r3, r2
 801bcfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801bd00:	683b      	ldr	r3, [r7, #0]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d003      	beq.n	801bd14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801bd0c:	69ba      	ldr	r2, [r7, #24]
 801bd0e:	693b      	ldr	r3, [r7, #16]
 801bd10:	4313      	orrs	r3, r2
 801bd12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801bd14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801bd18:	69bb      	ldr	r3, [r7, #24]
 801bd1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	685b      	ldr	r3, [r3, #4]
 801bd20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	43db      	mvns	r3, r3
 801bd26:	69ba      	ldr	r2, [r7, #24]
 801bd28:	4013      	ands	r3, r2
 801bd2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801bd2c:	683b      	ldr	r3, [r7, #0]
 801bd2e:	685b      	ldr	r3, [r3, #4]
 801bd30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d003      	beq.n	801bd40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801bd38:	69ba      	ldr	r2, [r7, #24]
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	4313      	orrs	r3, r2
 801bd3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	69ba      	ldr	r2, [r7, #24]
 801bd44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801bd46:	697b      	ldr	r3, [r7, #20]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bd4c:	693b      	ldr	r3, [r7, #16]
 801bd4e:	43db      	mvns	r3, r3
 801bd50:	69ba      	ldr	r2, [r7, #24]
 801bd52:	4013      	ands	r3, r2
 801bd54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801bd56:	683b      	ldr	r3, [r7, #0]
 801bd58:	685b      	ldr	r3, [r3, #4]
 801bd5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d003      	beq.n	801bd6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801bd62:	69ba      	ldr	r2, [r7, #24]
 801bd64:	693b      	ldr	r3, [r7, #16]
 801bd66:	4313      	orrs	r3, r2
 801bd68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801bd6a:	697b      	ldr	r3, [r7, #20]
 801bd6c:	69ba      	ldr	r2, [r7, #24]
 801bd6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801bd70:	69fb      	ldr	r3, [r7, #28]
 801bd72:	3301      	adds	r3, #1
 801bd74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801bd76:	683b      	ldr	r3, [r7, #0]
 801bd78:	681a      	ldr	r2, [r3, #0]
 801bd7a:	69fb      	ldr	r3, [r7, #28]
 801bd7c:	fa22 f303 	lsr.w	r3, r2, r3
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	f47f ae63 	bne.w	801ba4c <HAL_GPIO_Init+0x14>
  }
}
 801bd86:	bf00      	nop
 801bd88:	bf00      	nop
 801bd8a:	3724      	adds	r7, #36	@ 0x24
 801bd8c:	46bd      	mov	sp, r7
 801bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd92:	4770      	bx	lr
 801bd94:	58000400 	.word	0x58000400

0801bd98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bd98:	b480      	push	{r7}
 801bd9a:	b083      	sub	sp, #12
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
 801bda0:	460b      	mov	r3, r1
 801bda2:	807b      	strh	r3, [r7, #2]
 801bda4:	4613      	mov	r3, r2
 801bda6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801bda8:	787b      	ldrb	r3, [r7, #1]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d003      	beq.n	801bdb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801bdae:	887a      	ldrh	r2, [r7, #2]
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801bdb4:	e003      	b.n	801bdbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801bdb6:	887b      	ldrh	r3, [r7, #2]
 801bdb8:	041a      	lsls	r2, r3, #16
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	619a      	str	r2, [r3, #24]
}
 801bdbe:	bf00      	nop
 801bdc0:	370c      	adds	r7, #12
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc8:	4770      	bx	lr
	...

0801bdcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b082      	sub	sp, #8
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d101      	bne.n	801bdde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801bdda:	2301      	movs	r3, #1
 801bddc:	e08b      	b.n	801bef6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bde4:	b2db      	uxtb	r3, r3
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d106      	bne.n	801bdf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	2200      	movs	r2, #0
 801bdee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801bdf2:	6878      	ldr	r0, [r7, #4]
 801bdf4:	f7e5 ff42 	bl	8001c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	2224      	movs	r2, #36	@ 0x24
 801bdfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	681a      	ldr	r2, [r3, #0]
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	f022 0201 	bic.w	r2, r2, #1
 801be0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	685a      	ldr	r2, [r3, #4]
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801be1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	689a      	ldr	r2, [r3, #8]
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801be2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	68db      	ldr	r3, [r3, #12]
 801be32:	2b01      	cmp	r3, #1
 801be34:	d107      	bne.n	801be46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	689a      	ldr	r2, [r3, #8]
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801be42:	609a      	str	r2, [r3, #8]
 801be44:	e006      	b.n	801be54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	689a      	ldr	r2, [r3, #8]
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801be52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	68db      	ldr	r3, [r3, #12]
 801be58:	2b02      	cmp	r3, #2
 801be5a:	d108      	bne.n	801be6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	685a      	ldr	r2, [r3, #4]
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801be6a:	605a      	str	r2, [r3, #4]
 801be6c:	e007      	b.n	801be7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	685a      	ldr	r2, [r3, #4]
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801be7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	6859      	ldr	r1, [r3, #4]
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	681a      	ldr	r2, [r3, #0]
 801be88:	4b1d      	ldr	r3, [pc, #116]	@ (801bf00 <HAL_I2C_Init+0x134>)
 801be8a:	430b      	orrs	r3, r1
 801be8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	68da      	ldr	r2, [r3, #12]
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801be9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	691a      	ldr	r2, [r3, #16]
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	695b      	ldr	r3, [r3, #20]
 801bea6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	699b      	ldr	r3, [r3, #24]
 801beae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	430a      	orrs	r2, r1
 801beb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	69d9      	ldr	r1, [r3, #28]
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	6a1a      	ldr	r2, [r3, #32]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	430a      	orrs	r2, r1
 801bec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	681a      	ldr	r2, [r3, #0]
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	f042 0201 	orr.w	r2, r2, #1
 801bed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	2200      	movs	r2, #0
 801bedc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	2220      	movs	r2, #32
 801bee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	2200      	movs	r2, #0
 801beea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	2200      	movs	r2, #0
 801bef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801bef4:	2300      	movs	r3, #0
}
 801bef6:	4618      	mov	r0, r3
 801bef8:	3708      	adds	r7, #8
 801befa:	46bd      	mov	sp, r7
 801befc:	bd80      	pop	{r7, pc}
 801befe:	bf00      	nop
 801bf00:	02008000 	.word	0x02008000

0801bf04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801bf04:	b480      	push	{r7}
 801bf06:	b083      	sub	sp, #12
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
 801bf0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bf14:	b2db      	uxtb	r3, r3
 801bf16:	2b20      	cmp	r3, #32
 801bf18:	d138      	bne.n	801bf8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bf20:	2b01      	cmp	r3, #1
 801bf22:	d101      	bne.n	801bf28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801bf24:	2302      	movs	r3, #2
 801bf26:	e032      	b.n	801bf8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	2201      	movs	r2, #1
 801bf2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	2224      	movs	r2, #36	@ 0x24
 801bf34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	681a      	ldr	r2, [r3, #0]
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	f022 0201 	bic.w	r2, r2, #1
 801bf46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	681a      	ldr	r2, [r3, #0]
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801bf56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	6819      	ldr	r1, [r3, #0]
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	683a      	ldr	r2, [r7, #0]
 801bf64:	430a      	orrs	r2, r1
 801bf66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	f042 0201 	orr.w	r2, r2, #1
 801bf76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	2220      	movs	r2, #32
 801bf7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	2200      	movs	r2, #0
 801bf84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801bf88:	2300      	movs	r3, #0
 801bf8a:	e000      	b.n	801bf8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801bf8c:	2302      	movs	r3, #2
  }
}
 801bf8e:	4618      	mov	r0, r3
 801bf90:	370c      	adds	r7, #12
 801bf92:	46bd      	mov	sp, r7
 801bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf98:	4770      	bx	lr

0801bf9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801bf9a:	b480      	push	{r7}
 801bf9c:	b085      	sub	sp, #20
 801bf9e:	af00      	add	r7, sp, #0
 801bfa0:	6078      	str	r0, [r7, #4]
 801bfa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bfaa:	b2db      	uxtb	r3, r3
 801bfac:	2b20      	cmp	r3, #32
 801bfae:	d139      	bne.n	801c024 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bfb6:	2b01      	cmp	r3, #1
 801bfb8:	d101      	bne.n	801bfbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801bfba:	2302      	movs	r3, #2
 801bfbc:	e033      	b.n	801c026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	2201      	movs	r2, #1
 801bfc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	2224      	movs	r2, #36	@ 0x24
 801bfca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	681a      	ldr	r2, [r3, #0]
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	f022 0201 	bic.w	r2, r2, #1
 801bfdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801bfec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801bfee:	683b      	ldr	r3, [r7, #0]
 801bff0:	021b      	lsls	r3, r3, #8
 801bff2:	68fa      	ldr	r2, [r7, #12]
 801bff4:	4313      	orrs	r3, r2
 801bff6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	68fa      	ldr	r2, [r7, #12]
 801bffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	681a      	ldr	r2, [r3, #0]
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	f042 0201 	orr.w	r2, r2, #1
 801c00e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	2220      	movs	r2, #32
 801c014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	2200      	movs	r2, #0
 801c01c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c020:	2300      	movs	r3, #0
 801c022:	e000      	b.n	801c026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c024:	2302      	movs	r3, #2
  }
}
 801c026:	4618      	mov	r0, r3
 801c028:	3714      	adds	r7, #20
 801c02a:	46bd      	mov	sp, r7
 801c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c030:	4770      	bx	lr
	...

0801c034 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b084      	sub	sp, #16
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801c03c:	4b19      	ldr	r3, [pc, #100]	@ (801c0a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c03e:	68db      	ldr	r3, [r3, #12]
 801c040:	f003 0304 	and.w	r3, r3, #4
 801c044:	2b04      	cmp	r3, #4
 801c046:	d00a      	beq.n	801c05e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c048:	4b16      	ldr	r3, [pc, #88]	@ (801c0a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c04a:	68db      	ldr	r3, [r3, #12]
 801c04c:	f003 0307 	and.w	r3, r3, #7
 801c050:	687a      	ldr	r2, [r7, #4]
 801c052:	429a      	cmp	r2, r3
 801c054:	d001      	beq.n	801c05a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c056:	2301      	movs	r3, #1
 801c058:	e01f      	b.n	801c09a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c05a:	2300      	movs	r3, #0
 801c05c:	e01d      	b.n	801c09a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c05e:	4b11      	ldr	r3, [pc, #68]	@ (801c0a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c060:	68db      	ldr	r3, [r3, #12]
 801c062:	f023 0207 	bic.w	r2, r3, #7
 801c066:	490f      	ldr	r1, [pc, #60]	@ (801c0a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	4313      	orrs	r3, r2
 801c06c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c06e:	f7fd fc03 	bl	8019878 <HAL_GetTick>
 801c072:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c074:	e009      	b.n	801c08a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c076:	f7fd fbff 	bl	8019878 <HAL_GetTick>
 801c07a:	4602      	mov	r2, r0
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	1ad3      	subs	r3, r2, r3
 801c080:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c084:	d901      	bls.n	801c08a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c086:	2301      	movs	r3, #1
 801c088:	e007      	b.n	801c09a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c08a:	4b06      	ldr	r3, [pc, #24]	@ (801c0a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c08c:	685b      	ldr	r3, [r3, #4]
 801c08e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c096:	d1ee      	bne.n	801c076 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c098:	2300      	movs	r3, #0
}
 801c09a:	4618      	mov	r0, r3
 801c09c:	3710      	adds	r7, #16
 801c09e:	46bd      	mov	sp, r7
 801c0a0:	bd80      	pop	{r7, pc}
 801c0a2:	bf00      	nop
 801c0a4:	58024800 	.word	0x58024800

0801c0a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b08c      	sub	sp, #48	@ 0x30
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d102      	bne.n	801c0bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c0b6:	2301      	movs	r3, #1
 801c0b8:	f000 bc48 	b.w	801c94c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	f003 0301 	and.w	r3, r3, #1
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	f000 8088 	beq.w	801c1da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c0ca:	4b99      	ldr	r3, [pc, #612]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c0cc:	691b      	ldr	r3, [r3, #16]
 801c0ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c0d4:	4b96      	ldr	r3, [pc, #600]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0dc:	2b10      	cmp	r3, #16
 801c0de:	d007      	beq.n	801c0f0 <HAL_RCC_OscConfig+0x48>
 801c0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0e2:	2b18      	cmp	r3, #24
 801c0e4:	d111      	bne.n	801c10a <HAL_RCC_OscConfig+0x62>
 801c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0e8:	f003 0303 	and.w	r3, r3, #3
 801c0ec:	2b02      	cmp	r3, #2
 801c0ee:	d10c      	bne.n	801c10a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c0f0:	4b8f      	ldr	r3, [pc, #572]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d06d      	beq.n	801c1d8 <HAL_RCC_OscConfig+0x130>
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	685b      	ldr	r3, [r3, #4]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d169      	bne.n	801c1d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c104:	2301      	movs	r3, #1
 801c106:	f000 bc21 	b.w	801c94c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	685b      	ldr	r3, [r3, #4]
 801c10e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c112:	d106      	bne.n	801c122 <HAL_RCC_OscConfig+0x7a>
 801c114:	4b86      	ldr	r3, [pc, #536]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	4a85      	ldr	r2, [pc, #532]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c11a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c11e:	6013      	str	r3, [r2, #0]
 801c120:	e02e      	b.n	801c180 <HAL_RCC_OscConfig+0xd8>
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	685b      	ldr	r3, [r3, #4]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d10c      	bne.n	801c144 <HAL_RCC_OscConfig+0x9c>
 801c12a:	4b81      	ldr	r3, [pc, #516]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	4a80      	ldr	r2, [pc, #512]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c134:	6013      	str	r3, [r2, #0]
 801c136:	4b7e      	ldr	r3, [pc, #504]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	4a7d      	ldr	r2, [pc, #500]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c13c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c140:	6013      	str	r3, [r2, #0]
 801c142:	e01d      	b.n	801c180 <HAL_RCC_OscConfig+0xd8>
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	685b      	ldr	r3, [r3, #4]
 801c148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c14c:	d10c      	bne.n	801c168 <HAL_RCC_OscConfig+0xc0>
 801c14e:	4b78      	ldr	r3, [pc, #480]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	4a77      	ldr	r2, [pc, #476]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c158:	6013      	str	r3, [r2, #0]
 801c15a:	4b75      	ldr	r3, [pc, #468]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	4a74      	ldr	r2, [pc, #464]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c164:	6013      	str	r3, [r2, #0]
 801c166:	e00b      	b.n	801c180 <HAL_RCC_OscConfig+0xd8>
 801c168:	4b71      	ldr	r3, [pc, #452]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	4a70      	ldr	r2, [pc, #448]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c16e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c172:	6013      	str	r3, [r2, #0]
 801c174:	4b6e      	ldr	r3, [pc, #440]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	4a6d      	ldr	r2, [pc, #436]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c17a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c17e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	685b      	ldr	r3, [r3, #4]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d013      	beq.n	801c1b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c188:	f7fd fb76 	bl	8019878 <HAL_GetTick>
 801c18c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c18e:	e008      	b.n	801c1a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c190:	f7fd fb72 	bl	8019878 <HAL_GetTick>
 801c194:	4602      	mov	r2, r0
 801c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c198:	1ad3      	subs	r3, r2, r3
 801c19a:	2b64      	cmp	r3, #100	@ 0x64
 801c19c:	d901      	bls.n	801c1a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c19e:	2303      	movs	r3, #3
 801c1a0:	e3d4      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c1a2:	4b63      	ldr	r3, [pc, #396]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d0f0      	beq.n	801c190 <HAL_RCC_OscConfig+0xe8>
 801c1ae:	e014      	b.n	801c1da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1b0:	f7fd fb62 	bl	8019878 <HAL_GetTick>
 801c1b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c1b6:	e008      	b.n	801c1ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c1b8:	f7fd fb5e 	bl	8019878 <HAL_GetTick>
 801c1bc:	4602      	mov	r2, r0
 801c1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1c0:	1ad3      	subs	r3, r2, r3
 801c1c2:	2b64      	cmp	r3, #100	@ 0x64
 801c1c4:	d901      	bls.n	801c1ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c1c6:	2303      	movs	r3, #3
 801c1c8:	e3c0      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c1ca:	4b59      	ldr	r3, [pc, #356]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d1f0      	bne.n	801c1b8 <HAL_RCC_OscConfig+0x110>
 801c1d6:	e000      	b.n	801c1da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c1d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	f003 0302 	and.w	r3, r3, #2
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	f000 80ca 	beq.w	801c37c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c1e8:	4b51      	ldr	r3, [pc, #324]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c1ea:	691b      	ldr	r3, [r3, #16]
 801c1ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c1f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c1f2:	4b4f      	ldr	r3, [pc, #316]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c1f8:	6a3b      	ldr	r3, [r7, #32]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d007      	beq.n	801c20e <HAL_RCC_OscConfig+0x166>
 801c1fe:	6a3b      	ldr	r3, [r7, #32]
 801c200:	2b18      	cmp	r3, #24
 801c202:	d156      	bne.n	801c2b2 <HAL_RCC_OscConfig+0x20a>
 801c204:	69fb      	ldr	r3, [r7, #28]
 801c206:	f003 0303 	and.w	r3, r3, #3
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d151      	bne.n	801c2b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c20e:	4b48      	ldr	r3, [pc, #288]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	f003 0304 	and.w	r3, r3, #4
 801c216:	2b00      	cmp	r3, #0
 801c218:	d005      	beq.n	801c226 <HAL_RCC_OscConfig+0x17e>
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	68db      	ldr	r3, [r3, #12]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d101      	bne.n	801c226 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c222:	2301      	movs	r3, #1
 801c224:	e392      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c226:	4b42      	ldr	r3, [pc, #264]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	f023 0219 	bic.w	r2, r3, #25
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	68db      	ldr	r3, [r3, #12]
 801c232:	493f      	ldr	r1, [pc, #252]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c234:	4313      	orrs	r3, r2
 801c236:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c238:	f7fd fb1e 	bl	8019878 <HAL_GetTick>
 801c23c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c23e:	e008      	b.n	801c252 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c240:	f7fd fb1a 	bl	8019878 <HAL_GetTick>
 801c244:	4602      	mov	r2, r0
 801c246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c248:	1ad3      	subs	r3, r2, r3
 801c24a:	2b02      	cmp	r3, #2
 801c24c:	d901      	bls.n	801c252 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c24e:	2303      	movs	r3, #3
 801c250:	e37c      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c252:	4b37      	ldr	r3, [pc, #220]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	f003 0304 	and.w	r3, r3, #4
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d0f0      	beq.n	801c240 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c25e:	f7fd fb3b 	bl	80198d8 <HAL_GetREVID>
 801c262:	4603      	mov	r3, r0
 801c264:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c268:	4293      	cmp	r3, r2
 801c26a:	d817      	bhi.n	801c29c <HAL_RCC_OscConfig+0x1f4>
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	691b      	ldr	r3, [r3, #16]
 801c270:	2b40      	cmp	r3, #64	@ 0x40
 801c272:	d108      	bne.n	801c286 <HAL_RCC_OscConfig+0x1de>
 801c274:	4b2e      	ldr	r3, [pc, #184]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c276:	685b      	ldr	r3, [r3, #4]
 801c278:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c27c:	4a2c      	ldr	r2, [pc, #176]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c27e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c282:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c284:	e07a      	b.n	801c37c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c286:	4b2a      	ldr	r3, [pc, #168]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c288:	685b      	ldr	r3, [r3, #4]
 801c28a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	691b      	ldr	r3, [r3, #16]
 801c292:	031b      	lsls	r3, r3, #12
 801c294:	4926      	ldr	r1, [pc, #152]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c296:	4313      	orrs	r3, r2
 801c298:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c29a:	e06f      	b.n	801c37c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c29c:	4b24      	ldr	r3, [pc, #144]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c29e:	685b      	ldr	r3, [r3, #4]
 801c2a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	691b      	ldr	r3, [r3, #16]
 801c2a8:	061b      	lsls	r3, r3, #24
 801c2aa:	4921      	ldr	r1, [pc, #132]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c2ac:	4313      	orrs	r3, r2
 801c2ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c2b0:	e064      	b.n	801c37c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	68db      	ldr	r3, [r3, #12]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d047      	beq.n	801c34a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c2ba:	4b1d      	ldr	r3, [pc, #116]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	f023 0219 	bic.w	r2, r3, #25
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	68db      	ldr	r3, [r3, #12]
 801c2c6:	491a      	ldr	r1, [pc, #104]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c2c8:	4313      	orrs	r3, r2
 801c2ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2cc:	f7fd fad4 	bl	8019878 <HAL_GetTick>
 801c2d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c2d2:	e008      	b.n	801c2e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c2d4:	f7fd fad0 	bl	8019878 <HAL_GetTick>
 801c2d8:	4602      	mov	r2, r0
 801c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2dc:	1ad3      	subs	r3, r2, r3
 801c2de:	2b02      	cmp	r3, #2
 801c2e0:	d901      	bls.n	801c2e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c2e2:	2303      	movs	r3, #3
 801c2e4:	e332      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c2e6:	4b12      	ldr	r3, [pc, #72]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	f003 0304 	and.w	r3, r3, #4
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d0f0      	beq.n	801c2d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c2f2:	f7fd faf1 	bl	80198d8 <HAL_GetREVID>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c2fc:	4293      	cmp	r3, r2
 801c2fe:	d819      	bhi.n	801c334 <HAL_RCC_OscConfig+0x28c>
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	691b      	ldr	r3, [r3, #16]
 801c304:	2b40      	cmp	r3, #64	@ 0x40
 801c306:	d108      	bne.n	801c31a <HAL_RCC_OscConfig+0x272>
 801c308:	4b09      	ldr	r3, [pc, #36]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c30a:	685b      	ldr	r3, [r3, #4]
 801c30c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c310:	4a07      	ldr	r2, [pc, #28]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c316:	6053      	str	r3, [r2, #4]
 801c318:	e030      	b.n	801c37c <HAL_RCC_OscConfig+0x2d4>
 801c31a:	4b05      	ldr	r3, [pc, #20]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c31c:	685b      	ldr	r3, [r3, #4]
 801c31e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	691b      	ldr	r3, [r3, #16]
 801c326:	031b      	lsls	r3, r3, #12
 801c328:	4901      	ldr	r1, [pc, #4]	@ (801c330 <HAL_RCC_OscConfig+0x288>)
 801c32a:	4313      	orrs	r3, r2
 801c32c:	604b      	str	r3, [r1, #4]
 801c32e:	e025      	b.n	801c37c <HAL_RCC_OscConfig+0x2d4>
 801c330:	58024400 	.word	0x58024400
 801c334:	4b9a      	ldr	r3, [pc, #616]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c336:	685b      	ldr	r3, [r3, #4]
 801c338:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	691b      	ldr	r3, [r3, #16]
 801c340:	061b      	lsls	r3, r3, #24
 801c342:	4997      	ldr	r1, [pc, #604]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c344:	4313      	orrs	r3, r2
 801c346:	604b      	str	r3, [r1, #4]
 801c348:	e018      	b.n	801c37c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c34a:	4b95      	ldr	r3, [pc, #596]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	4a94      	ldr	r2, [pc, #592]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c350:	f023 0301 	bic.w	r3, r3, #1
 801c354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c356:	f7fd fa8f 	bl	8019878 <HAL_GetTick>
 801c35a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c35c:	e008      	b.n	801c370 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c35e:	f7fd fa8b 	bl	8019878 <HAL_GetTick>
 801c362:	4602      	mov	r2, r0
 801c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c366:	1ad3      	subs	r3, r2, r3
 801c368:	2b02      	cmp	r3, #2
 801c36a:	d901      	bls.n	801c370 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c36c:	2303      	movs	r3, #3
 801c36e:	e2ed      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c370:	4b8b      	ldr	r3, [pc, #556]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	f003 0304 	and.w	r3, r3, #4
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d1f0      	bne.n	801c35e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	f003 0310 	and.w	r3, r3, #16
 801c384:	2b00      	cmp	r3, #0
 801c386:	f000 80a9 	beq.w	801c4dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c38a:	4b85      	ldr	r3, [pc, #532]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c38c:	691b      	ldr	r3, [r3, #16]
 801c38e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c392:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c394:	4b82      	ldr	r3, [pc, #520]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c398:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c39a:	69bb      	ldr	r3, [r7, #24]
 801c39c:	2b08      	cmp	r3, #8
 801c39e:	d007      	beq.n	801c3b0 <HAL_RCC_OscConfig+0x308>
 801c3a0:	69bb      	ldr	r3, [r7, #24]
 801c3a2:	2b18      	cmp	r3, #24
 801c3a4:	d13a      	bne.n	801c41c <HAL_RCC_OscConfig+0x374>
 801c3a6:	697b      	ldr	r3, [r7, #20]
 801c3a8:	f003 0303 	and.w	r3, r3, #3
 801c3ac:	2b01      	cmp	r3, #1
 801c3ae:	d135      	bne.n	801c41c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c3b0:	4b7b      	ldr	r3, [pc, #492]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d005      	beq.n	801c3c8 <HAL_RCC_OscConfig+0x320>
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	69db      	ldr	r3, [r3, #28]
 801c3c0:	2b80      	cmp	r3, #128	@ 0x80
 801c3c2:	d001      	beq.n	801c3c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c3c4:	2301      	movs	r3, #1
 801c3c6:	e2c1      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c3c8:	f7fd fa86 	bl	80198d8 <HAL_GetREVID>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c3d2:	4293      	cmp	r3, r2
 801c3d4:	d817      	bhi.n	801c406 <HAL_RCC_OscConfig+0x35e>
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	6a1b      	ldr	r3, [r3, #32]
 801c3da:	2b20      	cmp	r3, #32
 801c3dc:	d108      	bne.n	801c3f0 <HAL_RCC_OscConfig+0x348>
 801c3de:	4b70      	ldr	r3, [pc, #448]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c3e0:	685b      	ldr	r3, [r3, #4]
 801c3e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c3e6:	4a6e      	ldr	r2, [pc, #440]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c3e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c3ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c3ee:	e075      	b.n	801c4dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c3f0:	4b6b      	ldr	r3, [pc, #428]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c3f2:	685b      	ldr	r3, [r3, #4]
 801c3f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	6a1b      	ldr	r3, [r3, #32]
 801c3fc:	069b      	lsls	r3, r3, #26
 801c3fe:	4968      	ldr	r1, [pc, #416]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c400:	4313      	orrs	r3, r2
 801c402:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c404:	e06a      	b.n	801c4dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c406:	4b66      	ldr	r3, [pc, #408]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c408:	68db      	ldr	r3, [r3, #12]
 801c40a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	6a1b      	ldr	r3, [r3, #32]
 801c412:	061b      	lsls	r3, r3, #24
 801c414:	4962      	ldr	r1, [pc, #392]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c416:	4313      	orrs	r3, r2
 801c418:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c41a:	e05f      	b.n	801c4dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	69db      	ldr	r3, [r3, #28]
 801c420:	2b00      	cmp	r3, #0
 801c422:	d042      	beq.n	801c4aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c424:	4b5e      	ldr	r3, [pc, #376]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	4a5d      	ldr	r2, [pc, #372]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c42e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c430:	f7fd fa22 	bl	8019878 <HAL_GetTick>
 801c434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c436:	e008      	b.n	801c44a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c438:	f7fd fa1e 	bl	8019878 <HAL_GetTick>
 801c43c:	4602      	mov	r2, r0
 801c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c440:	1ad3      	subs	r3, r2, r3
 801c442:	2b02      	cmp	r3, #2
 801c444:	d901      	bls.n	801c44a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c446:	2303      	movs	r3, #3
 801c448:	e280      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c44a:	4b55      	ldr	r3, [pc, #340]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c452:	2b00      	cmp	r3, #0
 801c454:	d0f0      	beq.n	801c438 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c456:	f7fd fa3f 	bl	80198d8 <HAL_GetREVID>
 801c45a:	4603      	mov	r3, r0
 801c45c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c460:	4293      	cmp	r3, r2
 801c462:	d817      	bhi.n	801c494 <HAL_RCC_OscConfig+0x3ec>
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	6a1b      	ldr	r3, [r3, #32]
 801c468:	2b20      	cmp	r3, #32
 801c46a:	d108      	bne.n	801c47e <HAL_RCC_OscConfig+0x3d6>
 801c46c:	4b4c      	ldr	r3, [pc, #304]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c46e:	685b      	ldr	r3, [r3, #4]
 801c470:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c474:	4a4a      	ldr	r2, [pc, #296]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c476:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c47a:	6053      	str	r3, [r2, #4]
 801c47c:	e02e      	b.n	801c4dc <HAL_RCC_OscConfig+0x434>
 801c47e:	4b48      	ldr	r3, [pc, #288]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c480:	685b      	ldr	r3, [r3, #4]
 801c482:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	6a1b      	ldr	r3, [r3, #32]
 801c48a:	069b      	lsls	r3, r3, #26
 801c48c:	4944      	ldr	r1, [pc, #272]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c48e:	4313      	orrs	r3, r2
 801c490:	604b      	str	r3, [r1, #4]
 801c492:	e023      	b.n	801c4dc <HAL_RCC_OscConfig+0x434>
 801c494:	4b42      	ldr	r3, [pc, #264]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c496:	68db      	ldr	r3, [r3, #12]
 801c498:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	6a1b      	ldr	r3, [r3, #32]
 801c4a0:	061b      	lsls	r3, r3, #24
 801c4a2:	493f      	ldr	r1, [pc, #252]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4a4:	4313      	orrs	r3, r2
 801c4a6:	60cb      	str	r3, [r1, #12]
 801c4a8:	e018      	b.n	801c4dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c4aa:	4b3d      	ldr	r3, [pc, #244]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	4a3c      	ldr	r2, [pc, #240]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c4b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4b6:	f7fd f9df 	bl	8019878 <HAL_GetTick>
 801c4ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c4bc:	e008      	b.n	801c4d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c4be:	f7fd f9db 	bl	8019878 <HAL_GetTick>
 801c4c2:	4602      	mov	r2, r0
 801c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c6:	1ad3      	subs	r3, r2, r3
 801c4c8:	2b02      	cmp	r3, #2
 801c4ca:	d901      	bls.n	801c4d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c4cc:	2303      	movs	r3, #3
 801c4ce:	e23d      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c4d0:	4b33      	ldr	r3, [pc, #204]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d1f0      	bne.n	801c4be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	f003 0308 	and.w	r3, r3, #8
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d036      	beq.n	801c556 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	695b      	ldr	r3, [r3, #20]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d019      	beq.n	801c524 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c4f0:	4b2b      	ldr	r3, [pc, #172]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c4f4:	4a2a      	ldr	r2, [pc, #168]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4f6:	f043 0301 	orr.w	r3, r3, #1
 801c4fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c4fc:	f7fd f9bc 	bl	8019878 <HAL_GetTick>
 801c500:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c502:	e008      	b.n	801c516 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c504:	f7fd f9b8 	bl	8019878 <HAL_GetTick>
 801c508:	4602      	mov	r2, r0
 801c50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c50c:	1ad3      	subs	r3, r2, r3
 801c50e:	2b02      	cmp	r3, #2
 801c510:	d901      	bls.n	801c516 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c512:	2303      	movs	r3, #3
 801c514:	e21a      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c516:	4b22      	ldr	r3, [pc, #136]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c51a:	f003 0302 	and.w	r3, r3, #2
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d0f0      	beq.n	801c504 <HAL_RCC_OscConfig+0x45c>
 801c522:	e018      	b.n	801c556 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c524:	4b1e      	ldr	r3, [pc, #120]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c528:	4a1d      	ldr	r2, [pc, #116]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c52a:	f023 0301 	bic.w	r3, r3, #1
 801c52e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c530:	f7fd f9a2 	bl	8019878 <HAL_GetTick>
 801c534:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c536:	e008      	b.n	801c54a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c538:	f7fd f99e 	bl	8019878 <HAL_GetTick>
 801c53c:	4602      	mov	r2, r0
 801c53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c540:	1ad3      	subs	r3, r2, r3
 801c542:	2b02      	cmp	r3, #2
 801c544:	d901      	bls.n	801c54a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801c546:	2303      	movs	r3, #3
 801c548:	e200      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c54a:	4b15      	ldr	r3, [pc, #84]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c54c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c54e:	f003 0302 	and.w	r3, r3, #2
 801c552:	2b00      	cmp	r3, #0
 801c554:	d1f0      	bne.n	801c538 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	f003 0320 	and.w	r3, r3, #32
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d039      	beq.n	801c5d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	699b      	ldr	r3, [r3, #24]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d01c      	beq.n	801c5a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c56a:	4b0d      	ldr	r3, [pc, #52]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	4a0c      	ldr	r2, [pc, #48]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801c574:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c576:	f7fd f97f 	bl	8019878 <HAL_GetTick>
 801c57a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c57c:	e008      	b.n	801c590 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c57e:	f7fd f97b 	bl	8019878 <HAL_GetTick>
 801c582:	4602      	mov	r2, r0
 801c584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c586:	1ad3      	subs	r3, r2, r3
 801c588:	2b02      	cmp	r3, #2
 801c58a:	d901      	bls.n	801c590 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801c58c:	2303      	movs	r3, #3
 801c58e:	e1dd      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c590:	4b03      	ldr	r3, [pc, #12]	@ (801c5a0 <HAL_RCC_OscConfig+0x4f8>)
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d0f0      	beq.n	801c57e <HAL_RCC_OscConfig+0x4d6>
 801c59c:	e01b      	b.n	801c5d6 <HAL_RCC_OscConfig+0x52e>
 801c59e:	bf00      	nop
 801c5a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c5a4:	4b9b      	ldr	r3, [pc, #620]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	4a9a      	ldr	r2, [pc, #616]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c5aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c5ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c5b0:	f7fd f962 	bl	8019878 <HAL_GetTick>
 801c5b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c5b6:	e008      	b.n	801c5ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c5b8:	f7fd f95e 	bl	8019878 <HAL_GetTick>
 801c5bc:	4602      	mov	r2, r0
 801c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5c0:	1ad3      	subs	r3, r2, r3
 801c5c2:	2b02      	cmp	r3, #2
 801c5c4:	d901      	bls.n	801c5ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801c5c6:	2303      	movs	r3, #3
 801c5c8:	e1c0      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c5ca:	4b92      	ldr	r3, [pc, #584]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d1f0      	bne.n	801c5b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	f003 0304 	and.w	r3, r3, #4
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	f000 8081 	beq.w	801c6e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c5e4:	4b8c      	ldr	r3, [pc, #560]	@ (801c818 <HAL_RCC_OscConfig+0x770>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	4a8b      	ldr	r2, [pc, #556]	@ (801c818 <HAL_RCC_OscConfig+0x770>)
 801c5ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c5ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c5f0:	f7fd f942 	bl	8019878 <HAL_GetTick>
 801c5f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c5f6:	e008      	b.n	801c60a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c5f8:	f7fd f93e 	bl	8019878 <HAL_GetTick>
 801c5fc:	4602      	mov	r2, r0
 801c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c600:	1ad3      	subs	r3, r2, r3
 801c602:	2b64      	cmp	r3, #100	@ 0x64
 801c604:	d901      	bls.n	801c60a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c606:	2303      	movs	r3, #3
 801c608:	e1a0      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c60a:	4b83      	ldr	r3, [pc, #524]	@ (801c818 <HAL_RCC_OscConfig+0x770>)
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c612:	2b00      	cmp	r3, #0
 801c614:	d0f0      	beq.n	801c5f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	689b      	ldr	r3, [r3, #8]
 801c61a:	2b01      	cmp	r3, #1
 801c61c:	d106      	bne.n	801c62c <HAL_RCC_OscConfig+0x584>
 801c61e:	4b7d      	ldr	r3, [pc, #500]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c622:	4a7c      	ldr	r2, [pc, #496]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c624:	f043 0301 	orr.w	r3, r3, #1
 801c628:	6713      	str	r3, [r2, #112]	@ 0x70
 801c62a:	e02d      	b.n	801c688 <HAL_RCC_OscConfig+0x5e0>
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	689b      	ldr	r3, [r3, #8]
 801c630:	2b00      	cmp	r3, #0
 801c632:	d10c      	bne.n	801c64e <HAL_RCC_OscConfig+0x5a6>
 801c634:	4b77      	ldr	r3, [pc, #476]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c638:	4a76      	ldr	r2, [pc, #472]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c63a:	f023 0301 	bic.w	r3, r3, #1
 801c63e:	6713      	str	r3, [r2, #112]	@ 0x70
 801c640:	4b74      	ldr	r3, [pc, #464]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c644:	4a73      	ldr	r2, [pc, #460]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c646:	f023 0304 	bic.w	r3, r3, #4
 801c64a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c64c:	e01c      	b.n	801c688 <HAL_RCC_OscConfig+0x5e0>
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	689b      	ldr	r3, [r3, #8]
 801c652:	2b05      	cmp	r3, #5
 801c654:	d10c      	bne.n	801c670 <HAL_RCC_OscConfig+0x5c8>
 801c656:	4b6f      	ldr	r3, [pc, #444]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c65a:	4a6e      	ldr	r2, [pc, #440]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c65c:	f043 0304 	orr.w	r3, r3, #4
 801c660:	6713      	str	r3, [r2, #112]	@ 0x70
 801c662:	4b6c      	ldr	r3, [pc, #432]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c666:	4a6b      	ldr	r2, [pc, #428]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c668:	f043 0301 	orr.w	r3, r3, #1
 801c66c:	6713      	str	r3, [r2, #112]	@ 0x70
 801c66e:	e00b      	b.n	801c688 <HAL_RCC_OscConfig+0x5e0>
 801c670:	4b68      	ldr	r3, [pc, #416]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c674:	4a67      	ldr	r2, [pc, #412]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c676:	f023 0301 	bic.w	r3, r3, #1
 801c67a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c67c:	4b65      	ldr	r3, [pc, #404]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c67e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c680:	4a64      	ldr	r2, [pc, #400]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c682:	f023 0304 	bic.w	r3, r3, #4
 801c686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	689b      	ldr	r3, [r3, #8]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d015      	beq.n	801c6bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c690:	f7fd f8f2 	bl	8019878 <HAL_GetTick>
 801c694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c696:	e00a      	b.n	801c6ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c698:	f7fd f8ee 	bl	8019878 <HAL_GetTick>
 801c69c:	4602      	mov	r2, r0
 801c69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6a0:	1ad3      	subs	r3, r2, r3
 801c6a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c6a6:	4293      	cmp	r3, r2
 801c6a8:	d901      	bls.n	801c6ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c6aa:	2303      	movs	r3, #3
 801c6ac:	e14e      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c6ae:	4b59      	ldr	r3, [pc, #356]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c6b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c6b2:	f003 0302 	and.w	r3, r3, #2
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d0ee      	beq.n	801c698 <HAL_RCC_OscConfig+0x5f0>
 801c6ba:	e014      	b.n	801c6e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c6bc:	f7fd f8dc 	bl	8019878 <HAL_GetTick>
 801c6c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c6c2:	e00a      	b.n	801c6da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c6c4:	f7fd f8d8 	bl	8019878 <HAL_GetTick>
 801c6c8:	4602      	mov	r2, r0
 801c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6cc:	1ad3      	subs	r3, r2, r3
 801c6ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c6d2:	4293      	cmp	r3, r2
 801c6d4:	d901      	bls.n	801c6da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801c6d6:	2303      	movs	r3, #3
 801c6d8:	e138      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c6da:	4b4e      	ldr	r3, [pc, #312]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c6de:	f003 0302 	and.w	r3, r3, #2
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d1ee      	bne.n	801c6c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	f000 812d 	beq.w	801c94a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c6f0:	4b48      	ldr	r3, [pc, #288]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c6f2:	691b      	ldr	r3, [r3, #16]
 801c6f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c6f8:	2b18      	cmp	r3, #24
 801c6fa:	f000 80bd 	beq.w	801c878 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c702:	2b02      	cmp	r3, #2
 801c704:	f040 809e 	bne.w	801c844 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c708:	4b42      	ldr	r3, [pc, #264]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	4a41      	ldr	r2, [pc, #260]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c70e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c714:	f7fd f8b0 	bl	8019878 <HAL_GetTick>
 801c718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c71a:	e008      	b.n	801c72e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c71c:	f7fd f8ac 	bl	8019878 <HAL_GetTick>
 801c720:	4602      	mov	r2, r0
 801c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c724:	1ad3      	subs	r3, r2, r3
 801c726:	2b02      	cmp	r3, #2
 801c728:	d901      	bls.n	801c72e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801c72a:	2303      	movs	r3, #3
 801c72c:	e10e      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c72e:	4b39      	ldr	r3, [pc, #228]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c736:	2b00      	cmp	r3, #0
 801c738:	d1f0      	bne.n	801c71c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c73a:	4b36      	ldr	r3, [pc, #216]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c73c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c73e:	4b37      	ldr	r3, [pc, #220]	@ (801c81c <HAL_RCC_OscConfig+0x774>)
 801c740:	4013      	ands	r3, r2
 801c742:	687a      	ldr	r2, [r7, #4]
 801c744:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801c746:	687a      	ldr	r2, [r7, #4]
 801c748:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801c74a:	0112      	lsls	r2, r2, #4
 801c74c:	430a      	orrs	r2, r1
 801c74e:	4931      	ldr	r1, [pc, #196]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c750:	4313      	orrs	r3, r2
 801c752:	628b      	str	r3, [r1, #40]	@ 0x28
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c758:	3b01      	subs	r3, #1
 801c75a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c762:	3b01      	subs	r3, #1
 801c764:	025b      	lsls	r3, r3, #9
 801c766:	b29b      	uxth	r3, r3
 801c768:	431a      	orrs	r2, r3
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c76e:	3b01      	subs	r3, #1
 801c770:	041b      	lsls	r3, r3, #16
 801c772:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801c776:	431a      	orrs	r2, r3
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c77c:	3b01      	subs	r3, #1
 801c77e:	061b      	lsls	r3, r3, #24
 801c780:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801c784:	4923      	ldr	r1, [pc, #140]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c786:	4313      	orrs	r3, r2
 801c788:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c78a:	4b22      	ldr	r3, [pc, #136]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c78e:	4a21      	ldr	r2, [pc, #132]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c790:	f023 0301 	bic.w	r3, r3, #1
 801c794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c796:	4b1f      	ldr	r3, [pc, #124]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c79a:	4b21      	ldr	r3, [pc, #132]	@ (801c820 <HAL_RCC_OscConfig+0x778>)
 801c79c:	4013      	ands	r3, r2
 801c79e:	687a      	ldr	r2, [r7, #4]
 801c7a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c7a2:	00d2      	lsls	r2, r2, #3
 801c7a4:	491b      	ldr	r1, [pc, #108]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7a6:	4313      	orrs	r3, r2
 801c7a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c7aa:	4b1a      	ldr	r3, [pc, #104]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7ae:	f023 020c 	bic.w	r2, r3, #12
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c7b6:	4917      	ldr	r1, [pc, #92]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7b8:	4313      	orrs	r3, r2
 801c7ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c7bc:	4b15      	ldr	r3, [pc, #84]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7c0:	f023 0202 	bic.w	r2, r3, #2
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c7c8:	4912      	ldr	r1, [pc, #72]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7ca:	4313      	orrs	r3, r2
 801c7cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c7ce:	4b11      	ldr	r3, [pc, #68]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7d2:	4a10      	ldr	r2, [pc, #64]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c7d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c7da:	4b0e      	ldr	r3, [pc, #56]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7de:	4a0d      	ldr	r2, [pc, #52]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c7e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c7e6:	4b0b      	ldr	r3, [pc, #44]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7ea:	4a0a      	ldr	r2, [pc, #40]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c7f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801c7f2:	4b08      	ldr	r3, [pc, #32]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7f6:	4a07      	ldr	r2, [pc, #28]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c7f8:	f043 0301 	orr.w	r3, r3, #1
 801c7fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c7fe:	4b05      	ldr	r3, [pc, #20]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	4a04      	ldr	r2, [pc, #16]	@ (801c814 <HAL_RCC_OscConfig+0x76c>)
 801c804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c80a:	f7fd f835 	bl	8019878 <HAL_GetTick>
 801c80e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c810:	e011      	b.n	801c836 <HAL_RCC_OscConfig+0x78e>
 801c812:	bf00      	nop
 801c814:	58024400 	.word	0x58024400
 801c818:	58024800 	.word	0x58024800
 801c81c:	fffffc0c 	.word	0xfffffc0c
 801c820:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c824:	f7fd f828 	bl	8019878 <HAL_GetTick>
 801c828:	4602      	mov	r2, r0
 801c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c82c:	1ad3      	subs	r3, r2, r3
 801c82e:	2b02      	cmp	r3, #2
 801c830:	d901      	bls.n	801c836 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801c832:	2303      	movs	r3, #3
 801c834:	e08a      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c836:	4b47      	ldr	r3, [pc, #284]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d0f0      	beq.n	801c824 <HAL_RCC_OscConfig+0x77c>
 801c842:	e082      	b.n	801c94a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c844:	4b43      	ldr	r3, [pc, #268]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	4a42      	ldr	r2, [pc, #264]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c84a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c84e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c850:	f7fd f812 	bl	8019878 <HAL_GetTick>
 801c854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c856:	e008      	b.n	801c86a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c858:	f7fd f80e 	bl	8019878 <HAL_GetTick>
 801c85c:	4602      	mov	r2, r0
 801c85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c860:	1ad3      	subs	r3, r2, r3
 801c862:	2b02      	cmp	r3, #2
 801c864:	d901      	bls.n	801c86a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801c866:	2303      	movs	r3, #3
 801c868:	e070      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c86a:	4b3a      	ldr	r3, [pc, #232]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c872:	2b00      	cmp	r3, #0
 801c874:	d1f0      	bne.n	801c858 <HAL_RCC_OscConfig+0x7b0>
 801c876:	e068      	b.n	801c94a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c878:	4b36      	ldr	r3, [pc, #216]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c87c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c87e:	4b35      	ldr	r3, [pc, #212]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c882:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c888:	2b01      	cmp	r3, #1
 801c88a:	d031      	beq.n	801c8f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c88c:	693b      	ldr	r3, [r7, #16]
 801c88e:	f003 0203 	and.w	r2, r3, #3
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c896:	429a      	cmp	r2, r3
 801c898:	d12a      	bne.n	801c8f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c89a:	693b      	ldr	r3, [r7, #16]
 801c89c:	091b      	lsrs	r3, r3, #4
 801c89e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	d122      	bne.n	801c8f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c8b6:	429a      	cmp	r2, r3
 801c8b8:	d11a      	bne.n	801c8f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	0a5b      	lsrs	r3, r3, #9
 801c8be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c8c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c8c8:	429a      	cmp	r2, r3
 801c8ca:	d111      	bne.n	801c8f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	0c1b      	lsrs	r3, r3, #16
 801c8d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c8d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c8da:	429a      	cmp	r2, r3
 801c8dc:	d108      	bne.n	801c8f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	0e1b      	lsrs	r3, r3, #24
 801c8e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c8ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c8ec:	429a      	cmp	r2, r3
 801c8ee:	d001      	beq.n	801c8f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801c8f0:	2301      	movs	r3, #1
 801c8f2:	e02b      	b.n	801c94c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c8f4:	4b17      	ldr	r3, [pc, #92]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c8f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c8f8:	08db      	lsrs	r3, r3, #3
 801c8fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c8fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c904:	693a      	ldr	r2, [r7, #16]
 801c906:	429a      	cmp	r2, r3
 801c908:	d01f      	beq.n	801c94a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801c90a:	4b12      	ldr	r3, [pc, #72]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c90c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c90e:	4a11      	ldr	r2, [pc, #68]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c910:	f023 0301 	bic.w	r3, r3, #1
 801c914:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c916:	f7fc ffaf 	bl	8019878 <HAL_GetTick>
 801c91a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801c91c:	bf00      	nop
 801c91e:	f7fc ffab 	bl	8019878 <HAL_GetTick>
 801c922:	4602      	mov	r2, r0
 801c924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c926:	4293      	cmp	r3, r2
 801c928:	d0f9      	beq.n	801c91e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c92a:	4b0a      	ldr	r3, [pc, #40]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c92c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c92e:	4b0a      	ldr	r3, [pc, #40]	@ (801c958 <HAL_RCC_OscConfig+0x8b0>)
 801c930:	4013      	ands	r3, r2
 801c932:	687a      	ldr	r2, [r7, #4]
 801c934:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c936:	00d2      	lsls	r2, r2, #3
 801c938:	4906      	ldr	r1, [pc, #24]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c93a:	4313      	orrs	r3, r2
 801c93c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801c93e:	4b05      	ldr	r3, [pc, #20]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c942:	4a04      	ldr	r2, [pc, #16]	@ (801c954 <HAL_RCC_OscConfig+0x8ac>)
 801c944:	f043 0301 	orr.w	r3, r3, #1
 801c948:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801c94a:	2300      	movs	r3, #0
}
 801c94c:	4618      	mov	r0, r3
 801c94e:	3730      	adds	r7, #48	@ 0x30
 801c950:	46bd      	mov	sp, r7
 801c952:	bd80      	pop	{r7, pc}
 801c954:	58024400 	.word	0x58024400
 801c958:	ffff0007 	.word	0xffff0007

0801c95c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b086      	sub	sp, #24
 801c960:	af00      	add	r7, sp, #0
 801c962:	6078      	str	r0, [r7, #4]
 801c964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d101      	bne.n	801c970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c96c:	2301      	movs	r3, #1
 801c96e:	e19c      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c970:	4b8a      	ldr	r3, [pc, #552]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	f003 030f 	and.w	r3, r3, #15
 801c978:	683a      	ldr	r2, [r7, #0]
 801c97a:	429a      	cmp	r2, r3
 801c97c:	d910      	bls.n	801c9a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c97e:	4b87      	ldr	r3, [pc, #540]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	f023 020f 	bic.w	r2, r3, #15
 801c986:	4985      	ldr	r1, [pc, #532]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801c988:	683b      	ldr	r3, [r7, #0]
 801c98a:	4313      	orrs	r3, r2
 801c98c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c98e:	4b83      	ldr	r3, [pc, #524]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	f003 030f 	and.w	r3, r3, #15
 801c996:	683a      	ldr	r2, [r7, #0]
 801c998:	429a      	cmp	r2, r3
 801c99a:	d001      	beq.n	801c9a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c99c:	2301      	movs	r3, #1
 801c99e:	e184      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	f003 0304 	and.w	r3, r3, #4
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d010      	beq.n	801c9ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	691a      	ldr	r2, [r3, #16]
 801c9b0:	4b7b      	ldr	r3, [pc, #492]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801c9b2:	699b      	ldr	r3, [r3, #24]
 801c9b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c9b8:	429a      	cmp	r2, r3
 801c9ba:	d908      	bls.n	801c9ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c9bc:	4b78      	ldr	r3, [pc, #480]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801c9be:	699b      	ldr	r3, [r3, #24]
 801c9c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	691b      	ldr	r3, [r3, #16]
 801c9c8:	4975      	ldr	r1, [pc, #468]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801c9ca:	4313      	orrs	r3, r2
 801c9cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	f003 0308 	and.w	r3, r3, #8
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d010      	beq.n	801c9fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	695a      	ldr	r2, [r3, #20]
 801c9de:	4b70      	ldr	r3, [pc, #448]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801c9e0:	69db      	ldr	r3, [r3, #28]
 801c9e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	d908      	bls.n	801c9fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c9ea:	4b6d      	ldr	r3, [pc, #436]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801c9ec:	69db      	ldr	r3, [r3, #28]
 801c9ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	695b      	ldr	r3, [r3, #20]
 801c9f6:	496a      	ldr	r1, [pc, #424]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801c9f8:	4313      	orrs	r3, r2
 801c9fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	f003 0310 	and.w	r3, r3, #16
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d010      	beq.n	801ca2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	699a      	ldr	r2, [r3, #24]
 801ca0c:	4b64      	ldr	r3, [pc, #400]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca0e:	69db      	ldr	r3, [r3, #28]
 801ca10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ca14:	429a      	cmp	r2, r3
 801ca16:	d908      	bls.n	801ca2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801ca18:	4b61      	ldr	r3, [pc, #388]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca1a:	69db      	ldr	r3, [r3, #28]
 801ca1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	699b      	ldr	r3, [r3, #24]
 801ca24:	495e      	ldr	r1, [pc, #376]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca26:	4313      	orrs	r3, r2
 801ca28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	f003 0320 	and.w	r3, r3, #32
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d010      	beq.n	801ca58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	69da      	ldr	r2, [r3, #28]
 801ca3a:	4b59      	ldr	r3, [pc, #356]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca3c:	6a1b      	ldr	r3, [r3, #32]
 801ca3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ca42:	429a      	cmp	r2, r3
 801ca44:	d908      	bls.n	801ca58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801ca46:	4b56      	ldr	r3, [pc, #344]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca48:	6a1b      	ldr	r3, [r3, #32]
 801ca4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	69db      	ldr	r3, [r3, #28]
 801ca52:	4953      	ldr	r1, [pc, #332]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca54:	4313      	orrs	r3, r2
 801ca56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	f003 0302 	and.w	r3, r3, #2
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d010      	beq.n	801ca86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	68da      	ldr	r2, [r3, #12]
 801ca68:	4b4d      	ldr	r3, [pc, #308]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca6a:	699b      	ldr	r3, [r3, #24]
 801ca6c:	f003 030f 	and.w	r3, r3, #15
 801ca70:	429a      	cmp	r2, r3
 801ca72:	d908      	bls.n	801ca86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ca74:	4b4a      	ldr	r3, [pc, #296]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca76:	699b      	ldr	r3, [r3, #24]
 801ca78:	f023 020f 	bic.w	r2, r3, #15
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	68db      	ldr	r3, [r3, #12]
 801ca80:	4947      	ldr	r1, [pc, #284]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca82:	4313      	orrs	r3, r2
 801ca84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	f003 0301 	and.w	r3, r3, #1
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d055      	beq.n	801cb3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801ca92:	4b43      	ldr	r3, [pc, #268]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801ca94:	699b      	ldr	r3, [r3, #24]
 801ca96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	689b      	ldr	r3, [r3, #8]
 801ca9e:	4940      	ldr	r1, [pc, #256]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801caa0:	4313      	orrs	r3, r2
 801caa2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	685b      	ldr	r3, [r3, #4]
 801caa8:	2b02      	cmp	r3, #2
 801caaa:	d107      	bne.n	801cabc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801caac:	4b3c      	ldr	r3, [pc, #240]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d121      	bne.n	801cafc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cab8:	2301      	movs	r3, #1
 801caba:	e0f6      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	685b      	ldr	r3, [r3, #4]
 801cac0:	2b03      	cmp	r3, #3
 801cac2:	d107      	bne.n	801cad4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cac4:	4b36      	ldr	r3, [pc, #216]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d115      	bne.n	801cafc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cad0:	2301      	movs	r3, #1
 801cad2:	e0ea      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	685b      	ldr	r3, [r3, #4]
 801cad8:	2b01      	cmp	r3, #1
 801cada:	d107      	bne.n	801caec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cadc:	4b30      	ldr	r3, [pc, #192]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d109      	bne.n	801cafc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cae8:	2301      	movs	r3, #1
 801caea:	e0de      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801caec:	4b2c      	ldr	r3, [pc, #176]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	f003 0304 	and.w	r3, r3, #4
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d101      	bne.n	801cafc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801caf8:	2301      	movs	r3, #1
 801cafa:	e0d6      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801cafc:	4b28      	ldr	r3, [pc, #160]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cafe:	691b      	ldr	r3, [r3, #16]
 801cb00:	f023 0207 	bic.w	r2, r3, #7
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	685b      	ldr	r3, [r3, #4]
 801cb08:	4925      	ldr	r1, [pc, #148]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cb0a:	4313      	orrs	r3, r2
 801cb0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cb0e:	f7fc feb3 	bl	8019878 <HAL_GetTick>
 801cb12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cb14:	e00a      	b.n	801cb2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cb16:	f7fc feaf 	bl	8019878 <HAL_GetTick>
 801cb1a:	4602      	mov	r2, r0
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	1ad3      	subs	r3, r2, r3
 801cb20:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cb24:	4293      	cmp	r3, r2
 801cb26:	d901      	bls.n	801cb2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801cb28:	2303      	movs	r3, #3
 801cb2a:	e0be      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cb2c:	4b1c      	ldr	r3, [pc, #112]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cb2e:	691b      	ldr	r3, [r3, #16]
 801cb30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	685b      	ldr	r3, [r3, #4]
 801cb38:	00db      	lsls	r3, r3, #3
 801cb3a:	429a      	cmp	r2, r3
 801cb3c:	d1eb      	bne.n	801cb16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	f003 0302 	and.w	r3, r3, #2
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d010      	beq.n	801cb6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	68da      	ldr	r2, [r3, #12]
 801cb4e:	4b14      	ldr	r3, [pc, #80]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cb50:	699b      	ldr	r3, [r3, #24]
 801cb52:	f003 030f 	and.w	r3, r3, #15
 801cb56:	429a      	cmp	r2, r3
 801cb58:	d208      	bcs.n	801cb6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cb5a:	4b11      	ldr	r3, [pc, #68]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cb5c:	699b      	ldr	r3, [r3, #24]
 801cb5e:	f023 020f 	bic.w	r2, r3, #15
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	68db      	ldr	r3, [r3, #12]
 801cb66:	490e      	ldr	r1, [pc, #56]	@ (801cba0 <HAL_RCC_ClockConfig+0x244>)
 801cb68:	4313      	orrs	r3, r2
 801cb6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cb6c:	4b0b      	ldr	r3, [pc, #44]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	f003 030f 	and.w	r3, r3, #15
 801cb74:	683a      	ldr	r2, [r7, #0]
 801cb76:	429a      	cmp	r2, r3
 801cb78:	d214      	bcs.n	801cba4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cb7a:	4b08      	ldr	r3, [pc, #32]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	f023 020f 	bic.w	r2, r3, #15
 801cb82:	4906      	ldr	r1, [pc, #24]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801cb84:	683b      	ldr	r3, [r7, #0]
 801cb86:	4313      	orrs	r3, r2
 801cb88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cb8a:	4b04      	ldr	r3, [pc, #16]	@ (801cb9c <HAL_RCC_ClockConfig+0x240>)
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	f003 030f 	and.w	r3, r3, #15
 801cb92:	683a      	ldr	r2, [r7, #0]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d005      	beq.n	801cba4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801cb98:	2301      	movs	r3, #1
 801cb9a:	e086      	b.n	801ccaa <HAL_RCC_ClockConfig+0x34e>
 801cb9c:	52002000 	.word	0x52002000
 801cba0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	f003 0304 	and.w	r3, r3, #4
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d010      	beq.n	801cbd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	691a      	ldr	r2, [r3, #16]
 801cbb4:	4b3f      	ldr	r3, [pc, #252]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cbb6:	699b      	ldr	r3, [r3, #24]
 801cbb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	d208      	bcs.n	801cbd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cbc0:	4b3c      	ldr	r3, [pc, #240]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cbc2:	699b      	ldr	r3, [r3, #24]
 801cbc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	691b      	ldr	r3, [r3, #16]
 801cbcc:	4939      	ldr	r1, [pc, #228]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cbce:	4313      	orrs	r3, r2
 801cbd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	f003 0308 	and.w	r3, r3, #8
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d010      	beq.n	801cc00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	695a      	ldr	r2, [r3, #20]
 801cbe2:	4b34      	ldr	r3, [pc, #208]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cbe4:	69db      	ldr	r3, [r3, #28]
 801cbe6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cbea:	429a      	cmp	r2, r3
 801cbec:	d208      	bcs.n	801cc00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801cbee:	4b31      	ldr	r3, [pc, #196]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cbf0:	69db      	ldr	r3, [r3, #28]
 801cbf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	695b      	ldr	r3, [r3, #20]
 801cbfa:	492e      	ldr	r1, [pc, #184]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cbfc:	4313      	orrs	r3, r2
 801cbfe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	f003 0310 	and.w	r3, r3, #16
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d010      	beq.n	801cc2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	699a      	ldr	r2, [r3, #24]
 801cc10:	4b28      	ldr	r3, [pc, #160]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc12:	69db      	ldr	r3, [r3, #28]
 801cc14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cc18:	429a      	cmp	r2, r3
 801cc1a:	d208      	bcs.n	801cc2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cc1c:	4b25      	ldr	r3, [pc, #148]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc1e:	69db      	ldr	r3, [r3, #28]
 801cc20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	699b      	ldr	r3, [r3, #24]
 801cc28:	4922      	ldr	r1, [pc, #136]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc2a:	4313      	orrs	r3, r2
 801cc2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	f003 0320 	and.w	r3, r3, #32
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d010      	beq.n	801cc5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	69da      	ldr	r2, [r3, #28]
 801cc3e:	4b1d      	ldr	r3, [pc, #116]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc40:	6a1b      	ldr	r3, [r3, #32]
 801cc42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cc46:	429a      	cmp	r2, r3
 801cc48:	d208      	bcs.n	801cc5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cc4a:	4b1a      	ldr	r3, [pc, #104]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc4c:	6a1b      	ldr	r3, [r3, #32]
 801cc4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	69db      	ldr	r3, [r3, #28]
 801cc56:	4917      	ldr	r1, [pc, #92]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc58:	4313      	orrs	r3, r2
 801cc5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801cc5c:	f000 f834 	bl	801ccc8 <HAL_RCC_GetSysClockFreq>
 801cc60:	4602      	mov	r2, r0
 801cc62:	4b14      	ldr	r3, [pc, #80]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc64:	699b      	ldr	r3, [r3, #24]
 801cc66:	0a1b      	lsrs	r3, r3, #8
 801cc68:	f003 030f 	and.w	r3, r3, #15
 801cc6c:	4912      	ldr	r1, [pc, #72]	@ (801ccb8 <HAL_RCC_ClockConfig+0x35c>)
 801cc6e:	5ccb      	ldrb	r3, [r1, r3]
 801cc70:	f003 031f 	and.w	r3, r3, #31
 801cc74:	fa22 f303 	lsr.w	r3, r2, r3
 801cc78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cc7a:	4b0e      	ldr	r3, [pc, #56]	@ (801ccb4 <HAL_RCC_ClockConfig+0x358>)
 801cc7c:	699b      	ldr	r3, [r3, #24]
 801cc7e:	f003 030f 	and.w	r3, r3, #15
 801cc82:	4a0d      	ldr	r2, [pc, #52]	@ (801ccb8 <HAL_RCC_ClockConfig+0x35c>)
 801cc84:	5cd3      	ldrb	r3, [r2, r3]
 801cc86:	f003 031f 	and.w	r3, r3, #31
 801cc8a:	693a      	ldr	r2, [r7, #16]
 801cc8c:	fa22 f303 	lsr.w	r3, r2, r3
 801cc90:	4a0a      	ldr	r2, [pc, #40]	@ (801ccbc <HAL_RCC_ClockConfig+0x360>)
 801cc92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801cc94:	4a0a      	ldr	r2, [pc, #40]	@ (801ccc0 <HAL_RCC_ClockConfig+0x364>)
 801cc96:	693b      	ldr	r3, [r7, #16]
 801cc98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801cc9a:	4b0a      	ldr	r3, [pc, #40]	@ (801ccc4 <HAL_RCC_ClockConfig+0x368>)
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	4618      	mov	r0, r3
 801cca0:	f7fc fda0 	bl	80197e4 <HAL_InitTick>
 801cca4:	4603      	mov	r3, r0
 801cca6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801cca8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccaa:	4618      	mov	r0, r3
 801ccac:	3718      	adds	r7, #24
 801ccae:	46bd      	mov	sp, r7
 801ccb0:	bd80      	pop	{r7, pc}
 801ccb2:	bf00      	nop
 801ccb4:	58024400 	.word	0x58024400
 801ccb8:	08026ee8 	.word	0x08026ee8
 801ccbc:	20000004 	.word	0x20000004
 801ccc0:	20000000 	.word	0x20000000
 801ccc4:	20000020 	.word	0x20000020

0801ccc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ccc8:	b480      	push	{r7}
 801ccca:	b089      	sub	sp, #36	@ 0x24
 801cccc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ccce:	4bb3      	ldr	r3, [pc, #716]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ccd0:	691b      	ldr	r3, [r3, #16]
 801ccd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ccd6:	2b18      	cmp	r3, #24
 801ccd8:	f200 8155 	bhi.w	801cf86 <HAL_RCC_GetSysClockFreq+0x2be>
 801ccdc:	a201      	add	r2, pc, #4	@ (adr r2, 801cce4 <HAL_RCC_GetSysClockFreq+0x1c>)
 801ccde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cce2:	bf00      	nop
 801cce4:	0801cd49 	.word	0x0801cd49
 801cce8:	0801cf87 	.word	0x0801cf87
 801ccec:	0801cf87 	.word	0x0801cf87
 801ccf0:	0801cf87 	.word	0x0801cf87
 801ccf4:	0801cf87 	.word	0x0801cf87
 801ccf8:	0801cf87 	.word	0x0801cf87
 801ccfc:	0801cf87 	.word	0x0801cf87
 801cd00:	0801cf87 	.word	0x0801cf87
 801cd04:	0801cd6f 	.word	0x0801cd6f
 801cd08:	0801cf87 	.word	0x0801cf87
 801cd0c:	0801cf87 	.word	0x0801cf87
 801cd10:	0801cf87 	.word	0x0801cf87
 801cd14:	0801cf87 	.word	0x0801cf87
 801cd18:	0801cf87 	.word	0x0801cf87
 801cd1c:	0801cf87 	.word	0x0801cf87
 801cd20:	0801cf87 	.word	0x0801cf87
 801cd24:	0801cd75 	.word	0x0801cd75
 801cd28:	0801cf87 	.word	0x0801cf87
 801cd2c:	0801cf87 	.word	0x0801cf87
 801cd30:	0801cf87 	.word	0x0801cf87
 801cd34:	0801cf87 	.word	0x0801cf87
 801cd38:	0801cf87 	.word	0x0801cf87
 801cd3c:	0801cf87 	.word	0x0801cf87
 801cd40:	0801cf87 	.word	0x0801cf87
 801cd44:	0801cd7b 	.word	0x0801cd7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cd48:	4b94      	ldr	r3, [pc, #592]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	f003 0320 	and.w	r3, r3, #32
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d009      	beq.n	801cd68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cd54:	4b91      	ldr	r3, [pc, #580]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd56:	681b      	ldr	r3, [r3, #0]
 801cd58:	08db      	lsrs	r3, r3, #3
 801cd5a:	f003 0303 	and.w	r3, r3, #3
 801cd5e:	4a90      	ldr	r2, [pc, #576]	@ (801cfa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cd60:	fa22 f303 	lsr.w	r3, r2, r3
 801cd64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801cd66:	e111      	b.n	801cf8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801cd68:	4b8d      	ldr	r3, [pc, #564]	@ (801cfa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cd6a:	61bb      	str	r3, [r7, #24]
      break;
 801cd6c:	e10e      	b.n	801cf8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801cd6e:	4b8d      	ldr	r3, [pc, #564]	@ (801cfa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801cd70:	61bb      	str	r3, [r7, #24]
      break;
 801cd72:	e10b      	b.n	801cf8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801cd74:	4b8c      	ldr	r3, [pc, #560]	@ (801cfa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801cd76:	61bb      	str	r3, [r7, #24]
      break;
 801cd78:	e108      	b.n	801cf8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801cd7a:	4b88      	ldr	r3, [pc, #544]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd7e:	f003 0303 	and.w	r3, r3, #3
 801cd82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801cd84:	4b85      	ldr	r3, [pc, #532]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd88:	091b      	lsrs	r3, r3, #4
 801cd8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cd8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801cd90:	4b82      	ldr	r3, [pc, #520]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd94:	f003 0301 	and.w	r3, r3, #1
 801cd98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801cd9a:	4b80      	ldr	r3, [pc, #512]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cd9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cd9e:	08db      	lsrs	r3, r3, #3
 801cda0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cda4:	68fa      	ldr	r2, [r7, #12]
 801cda6:	fb02 f303 	mul.w	r3, r2, r3
 801cdaa:	ee07 3a90 	vmov	s15, r3
 801cdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cdb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	f000 80e1 	beq.w	801cf80 <HAL_RCC_GetSysClockFreq+0x2b8>
 801cdbe:	697b      	ldr	r3, [r7, #20]
 801cdc0:	2b02      	cmp	r3, #2
 801cdc2:	f000 8083 	beq.w	801cecc <HAL_RCC_GetSysClockFreq+0x204>
 801cdc6:	697b      	ldr	r3, [r7, #20]
 801cdc8:	2b02      	cmp	r3, #2
 801cdca:	f200 80a1 	bhi.w	801cf10 <HAL_RCC_GetSysClockFreq+0x248>
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d003      	beq.n	801cddc <HAL_RCC_GetSysClockFreq+0x114>
 801cdd4:	697b      	ldr	r3, [r7, #20]
 801cdd6:	2b01      	cmp	r3, #1
 801cdd8:	d056      	beq.n	801ce88 <HAL_RCC_GetSysClockFreq+0x1c0>
 801cdda:	e099      	b.n	801cf10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cddc:	4b6f      	ldr	r3, [pc, #444]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	f003 0320 	and.w	r3, r3, #32
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d02d      	beq.n	801ce44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cde8:	4b6c      	ldr	r3, [pc, #432]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	08db      	lsrs	r3, r3, #3
 801cdee:	f003 0303 	and.w	r3, r3, #3
 801cdf2:	4a6b      	ldr	r2, [pc, #428]	@ (801cfa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cdf4:	fa22 f303 	lsr.w	r3, r2, r3
 801cdf8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	ee07 3a90 	vmov	s15, r3
 801ce00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce04:	693b      	ldr	r3, [r7, #16]
 801ce06:	ee07 3a90 	vmov	s15, r3
 801ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ce12:	4b62      	ldr	r3, [pc, #392]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce1a:	ee07 3a90 	vmov	s15, r3
 801ce1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce22:	ed97 6a02 	vldr	s12, [r7, #8]
 801ce26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801cfac <HAL_RCC_GetSysClockFreq+0x2e4>
 801ce2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ce2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ce36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ce3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801ce42:	e087      	b.n	801cf54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ce44:	693b      	ldr	r3, [r7, #16]
 801ce46:	ee07 3a90 	vmov	s15, r3
 801ce4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801cfb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 801ce52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ce56:	4b51      	ldr	r3, [pc, #324]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce5e:	ee07 3a90 	vmov	s15, r3
 801ce62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce66:	ed97 6a02 	vldr	s12, [r7, #8]
 801ce6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801cfac <HAL_RCC_GetSysClockFreq+0x2e4>
 801ce6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ce72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ce7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ce82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ce86:	e065      	b.n	801cf54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ce88:	693b      	ldr	r3, [r7, #16]
 801ce8a:	ee07 3a90 	vmov	s15, r3
 801ce8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801cfb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801ce96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ce9a:	4b40      	ldr	r3, [pc, #256]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cea2:	ee07 3a90 	vmov	s15, r3
 801cea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ceaa:	ed97 6a02 	vldr	s12, [r7, #8]
 801ceae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801cfac <HAL_RCC_GetSysClockFreq+0x2e4>
 801ceb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ceb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ceba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ceca:	e043      	b.n	801cf54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cecc:	693b      	ldr	r3, [r7, #16]
 801cece:	ee07 3a90 	vmov	s15, r3
 801ced2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ced6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801cfb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 801ceda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cede:	4b2f      	ldr	r3, [pc, #188]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cee6:	ee07 3a90 	vmov	s15, r3
 801ceea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ceee:	ed97 6a02 	vldr	s12, [r7, #8]
 801cef2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801cfac <HAL_RCC_GetSysClockFreq+0x2e4>
 801cef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cefa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cefe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cf0e:	e021      	b.n	801cf54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cf10:	693b      	ldr	r3, [r7, #16]
 801cf12:	ee07 3a90 	vmov	s15, r3
 801cf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801cfb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801cf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cf22:	4b1e      	ldr	r3, [pc, #120]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf2a:	ee07 3a90 	vmov	s15, r3
 801cf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf32:	ed97 6a02 	vldr	s12, [r7, #8]
 801cf36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801cfac <HAL_RCC_GetSysClockFreq+0x2e4>
 801cf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cf42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cf52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801cf54:	4b11      	ldr	r3, [pc, #68]	@ (801cf9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf58:	0a5b      	lsrs	r3, r3, #9
 801cf5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cf5e:	3301      	adds	r3, #1
 801cf60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801cf62:	683b      	ldr	r3, [r7, #0]
 801cf64:	ee07 3a90 	vmov	s15, r3
 801cf68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801cf6c:	edd7 6a07 	vldr	s13, [r7, #28]
 801cf70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cf74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cf78:	ee17 3a90 	vmov	r3, s15
 801cf7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801cf7e:	e005      	b.n	801cf8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801cf80:	2300      	movs	r3, #0
 801cf82:	61bb      	str	r3, [r7, #24]
      break;
 801cf84:	e002      	b.n	801cf8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801cf86:	4b07      	ldr	r3, [pc, #28]	@ (801cfa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801cf88:	61bb      	str	r3, [r7, #24]
      break;
 801cf8a:	bf00      	nop
  }

  return sysclockfreq;
 801cf8c:	69bb      	ldr	r3, [r7, #24]
}
 801cf8e:	4618      	mov	r0, r3
 801cf90:	3724      	adds	r7, #36	@ 0x24
 801cf92:	46bd      	mov	sp, r7
 801cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf98:	4770      	bx	lr
 801cf9a:	bf00      	nop
 801cf9c:	58024400 	.word	0x58024400
 801cfa0:	03d09000 	.word	0x03d09000
 801cfa4:	003d0900 	.word	0x003d0900
 801cfa8:	017d7840 	.word	0x017d7840
 801cfac:	46000000 	.word	0x46000000
 801cfb0:	4c742400 	.word	0x4c742400
 801cfb4:	4a742400 	.word	0x4a742400
 801cfb8:	4bbebc20 	.word	0x4bbebc20

0801cfbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cfbc:	b580      	push	{r7, lr}
 801cfbe:	b082      	sub	sp, #8
 801cfc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801cfc2:	f7ff fe81 	bl	801ccc8 <HAL_RCC_GetSysClockFreq>
 801cfc6:	4602      	mov	r2, r0
 801cfc8:	4b10      	ldr	r3, [pc, #64]	@ (801d00c <HAL_RCC_GetHCLKFreq+0x50>)
 801cfca:	699b      	ldr	r3, [r3, #24]
 801cfcc:	0a1b      	lsrs	r3, r3, #8
 801cfce:	f003 030f 	and.w	r3, r3, #15
 801cfd2:	490f      	ldr	r1, [pc, #60]	@ (801d010 <HAL_RCC_GetHCLKFreq+0x54>)
 801cfd4:	5ccb      	ldrb	r3, [r1, r3]
 801cfd6:	f003 031f 	and.w	r3, r3, #31
 801cfda:	fa22 f303 	lsr.w	r3, r2, r3
 801cfde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cfe0:	4b0a      	ldr	r3, [pc, #40]	@ (801d00c <HAL_RCC_GetHCLKFreq+0x50>)
 801cfe2:	699b      	ldr	r3, [r3, #24]
 801cfe4:	f003 030f 	and.w	r3, r3, #15
 801cfe8:	4a09      	ldr	r2, [pc, #36]	@ (801d010 <HAL_RCC_GetHCLKFreq+0x54>)
 801cfea:	5cd3      	ldrb	r3, [r2, r3]
 801cfec:	f003 031f 	and.w	r3, r3, #31
 801cff0:	687a      	ldr	r2, [r7, #4]
 801cff2:	fa22 f303 	lsr.w	r3, r2, r3
 801cff6:	4a07      	ldr	r2, [pc, #28]	@ (801d014 <HAL_RCC_GetHCLKFreq+0x58>)
 801cff8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801cffa:	4a07      	ldr	r2, [pc, #28]	@ (801d018 <HAL_RCC_GetHCLKFreq+0x5c>)
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d000:	4b04      	ldr	r3, [pc, #16]	@ (801d014 <HAL_RCC_GetHCLKFreq+0x58>)
 801d002:	681b      	ldr	r3, [r3, #0]
}
 801d004:	4618      	mov	r0, r3
 801d006:	3708      	adds	r7, #8
 801d008:	46bd      	mov	sp, r7
 801d00a:	bd80      	pop	{r7, pc}
 801d00c:	58024400 	.word	0x58024400
 801d010:	08026ee8 	.word	0x08026ee8
 801d014:	20000004 	.word	0x20000004
 801d018:	20000000 	.word	0x20000000

0801d01c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d020:	f7ff ffcc 	bl	801cfbc <HAL_RCC_GetHCLKFreq>
 801d024:	4602      	mov	r2, r0
 801d026:	4b06      	ldr	r3, [pc, #24]	@ (801d040 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d028:	69db      	ldr	r3, [r3, #28]
 801d02a:	091b      	lsrs	r3, r3, #4
 801d02c:	f003 0307 	and.w	r3, r3, #7
 801d030:	4904      	ldr	r1, [pc, #16]	@ (801d044 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d032:	5ccb      	ldrb	r3, [r1, r3]
 801d034:	f003 031f 	and.w	r3, r3, #31
 801d038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d03c:	4618      	mov	r0, r3
 801d03e:	bd80      	pop	{r7, pc}
 801d040:	58024400 	.word	0x58024400
 801d044:	08026ee8 	.word	0x08026ee8

0801d048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d04c:	f7ff ffb6 	bl	801cfbc <HAL_RCC_GetHCLKFreq>
 801d050:	4602      	mov	r2, r0
 801d052:	4b06      	ldr	r3, [pc, #24]	@ (801d06c <HAL_RCC_GetPCLK2Freq+0x24>)
 801d054:	69db      	ldr	r3, [r3, #28]
 801d056:	0a1b      	lsrs	r3, r3, #8
 801d058:	f003 0307 	and.w	r3, r3, #7
 801d05c:	4904      	ldr	r1, [pc, #16]	@ (801d070 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d05e:	5ccb      	ldrb	r3, [r1, r3]
 801d060:	f003 031f 	and.w	r3, r3, #31
 801d064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d068:	4618      	mov	r0, r3
 801d06a:	bd80      	pop	{r7, pc}
 801d06c:	58024400 	.word	0x58024400
 801d070:	08026ee8 	.word	0x08026ee8

0801d074 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d078:	b0ca      	sub	sp, #296	@ 0x128
 801d07a:	af00      	add	r7, sp, #0
 801d07c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d080:	2300      	movs	r3, #0
 801d082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d086:	2300      	movs	r3, #0
 801d088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d094:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d098:	2500      	movs	r5, #0
 801d09a:	ea54 0305 	orrs.w	r3, r4, r5
 801d09e:	d049      	beq.n	801d134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d0a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d0aa:	d02f      	beq.n	801d10c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d0ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d0b0:	d828      	bhi.n	801d104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d0b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d0b6:	d01a      	beq.n	801d0ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d0b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d0bc:	d822      	bhi.n	801d104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d003      	beq.n	801d0ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d0c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d0c6:	d007      	beq.n	801d0d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d0c8:	e01c      	b.n	801d104 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d0ca:	4bb8      	ldr	r3, [pc, #736]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0ce:	4ab7      	ldr	r2, [pc, #732]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d0d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d0d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d0d6:	e01a      	b.n	801d10e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0dc:	3308      	adds	r3, #8
 801d0de:	2102      	movs	r1, #2
 801d0e0:	4618      	mov	r0, r3
 801d0e2:	f001 fc8f 	bl	801ea04 <RCCEx_PLL2_Config>
 801d0e6:	4603      	mov	r3, r0
 801d0e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d0ec:	e00f      	b.n	801d10e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0f2:	3328      	adds	r3, #40	@ 0x28
 801d0f4:	2102      	movs	r1, #2
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f001 fd36 	bl	801eb68 <RCCEx_PLL3_Config>
 801d0fc:	4603      	mov	r3, r0
 801d0fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d102:	e004      	b.n	801d10e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d104:	2301      	movs	r3, #1
 801d106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d10a:	e000      	b.n	801d10e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d10e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d112:	2b00      	cmp	r3, #0
 801d114:	d10a      	bne.n	801d12c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d116:	4ba5      	ldr	r3, [pc, #660]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d11a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d124:	4aa1      	ldr	r2, [pc, #644]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d126:	430b      	orrs	r3, r1
 801d128:	6513      	str	r3, [r2, #80]	@ 0x50
 801d12a:	e003      	b.n	801d134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d12c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d140:	f04f 0900 	mov.w	r9, #0
 801d144:	ea58 0309 	orrs.w	r3, r8, r9
 801d148:	d047      	beq.n	801d1da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d14e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d150:	2b04      	cmp	r3, #4
 801d152:	d82a      	bhi.n	801d1aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d154:	a201      	add	r2, pc, #4	@ (adr r2, 801d15c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d15a:	bf00      	nop
 801d15c:	0801d171 	.word	0x0801d171
 801d160:	0801d17f 	.word	0x0801d17f
 801d164:	0801d195 	.word	0x0801d195
 801d168:	0801d1b3 	.word	0x0801d1b3
 801d16c:	0801d1b3 	.word	0x0801d1b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d170:	4b8e      	ldr	r3, [pc, #568]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d174:	4a8d      	ldr	r2, [pc, #564]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d17a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d17c:	e01a      	b.n	801d1b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d182:	3308      	adds	r3, #8
 801d184:	2100      	movs	r1, #0
 801d186:	4618      	mov	r0, r3
 801d188:	f001 fc3c 	bl	801ea04 <RCCEx_PLL2_Config>
 801d18c:	4603      	mov	r3, r0
 801d18e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d192:	e00f      	b.n	801d1b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d198:	3328      	adds	r3, #40	@ 0x28
 801d19a:	2100      	movs	r1, #0
 801d19c:	4618      	mov	r0, r3
 801d19e:	f001 fce3 	bl	801eb68 <RCCEx_PLL3_Config>
 801d1a2:	4603      	mov	r3, r0
 801d1a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d1a8:	e004      	b.n	801d1b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d1aa:	2301      	movs	r3, #1
 801d1ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d1b0:	e000      	b.n	801d1b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d1b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d10a      	bne.n	801d1d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d1bc:	4b7b      	ldr	r3, [pc, #492]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d1c0:	f023 0107 	bic.w	r1, r3, #7
 801d1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d1ca:	4a78      	ldr	r2, [pc, #480]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d1cc:	430b      	orrs	r3, r1
 801d1ce:	6513      	str	r3, [r2, #80]	@ 0x50
 801d1d0:	e003      	b.n	801d1da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d1e6:	f04f 0b00 	mov.w	fp, #0
 801d1ea:	ea5a 030b 	orrs.w	r3, sl, fp
 801d1ee:	d04c      	beq.n	801d28a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d1f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d1fa:	d030      	beq.n	801d25e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d1fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d200:	d829      	bhi.n	801d256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d202:	2bc0      	cmp	r3, #192	@ 0xc0
 801d204:	d02d      	beq.n	801d262 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d206:	2bc0      	cmp	r3, #192	@ 0xc0
 801d208:	d825      	bhi.n	801d256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d20a:	2b80      	cmp	r3, #128	@ 0x80
 801d20c:	d018      	beq.n	801d240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d20e:	2b80      	cmp	r3, #128	@ 0x80
 801d210:	d821      	bhi.n	801d256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d212:	2b00      	cmp	r3, #0
 801d214:	d002      	beq.n	801d21c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d216:	2b40      	cmp	r3, #64	@ 0x40
 801d218:	d007      	beq.n	801d22a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d21a:	e01c      	b.n	801d256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d21c:	4b63      	ldr	r3, [pc, #396]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d220:	4a62      	ldr	r2, [pc, #392]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d228:	e01c      	b.n	801d264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d22e:	3308      	adds	r3, #8
 801d230:	2100      	movs	r1, #0
 801d232:	4618      	mov	r0, r3
 801d234:	f001 fbe6 	bl	801ea04 <RCCEx_PLL2_Config>
 801d238:	4603      	mov	r3, r0
 801d23a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d23e:	e011      	b.n	801d264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d244:	3328      	adds	r3, #40	@ 0x28
 801d246:	2100      	movs	r1, #0
 801d248:	4618      	mov	r0, r3
 801d24a:	f001 fc8d 	bl	801eb68 <RCCEx_PLL3_Config>
 801d24e:	4603      	mov	r3, r0
 801d250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d254:	e006      	b.n	801d264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d256:	2301      	movs	r3, #1
 801d258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d25c:	e002      	b.n	801d264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d25e:	bf00      	nop
 801d260:	e000      	b.n	801d264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d262:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d10a      	bne.n	801d282 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d26c:	4b4f      	ldr	r3, [pc, #316]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d26e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d270:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d27a:	4a4c      	ldr	r2, [pc, #304]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d27c:	430b      	orrs	r3, r1
 801d27e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d280:	e003      	b.n	801d28a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d292:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d296:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d29a:	2300      	movs	r3, #0
 801d29c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d2a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d2a4:	460b      	mov	r3, r1
 801d2a6:	4313      	orrs	r3, r2
 801d2a8:	d053      	beq.n	801d352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d2b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d2b6:	d035      	beq.n	801d324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d2b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d2bc:	d82e      	bhi.n	801d31c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d2be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d2c2:	d031      	beq.n	801d328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d2c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d2c8:	d828      	bhi.n	801d31c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d2ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d2ce:	d01a      	beq.n	801d306 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d2d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d2d4:	d822      	bhi.n	801d31c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d003      	beq.n	801d2e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d2da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d2de:	d007      	beq.n	801d2f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d2e0:	e01c      	b.n	801d31c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d2e2:	4b32      	ldr	r3, [pc, #200]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d2e6:	4a31      	ldr	r2, [pc, #196]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d2e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d2ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d2ee:	e01c      	b.n	801d32a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2f4:	3308      	adds	r3, #8
 801d2f6:	2100      	movs	r1, #0
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	f001 fb83 	bl	801ea04 <RCCEx_PLL2_Config>
 801d2fe:	4603      	mov	r3, r0
 801d300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d304:	e011      	b.n	801d32a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d30a:	3328      	adds	r3, #40	@ 0x28
 801d30c:	2100      	movs	r1, #0
 801d30e:	4618      	mov	r0, r3
 801d310:	f001 fc2a 	bl	801eb68 <RCCEx_PLL3_Config>
 801d314:	4603      	mov	r3, r0
 801d316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d31a:	e006      	b.n	801d32a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d31c:	2301      	movs	r3, #1
 801d31e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d322:	e002      	b.n	801d32a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d324:	bf00      	nop
 801d326:	e000      	b.n	801d32a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d328:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d32a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d10b      	bne.n	801d34a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d332:	4b1e      	ldr	r3, [pc, #120]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d336:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d33e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d342:	4a1a      	ldr	r2, [pc, #104]	@ (801d3ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d344:	430b      	orrs	r3, r1
 801d346:	6593      	str	r3, [r2, #88]	@ 0x58
 801d348:	e003      	b.n	801d352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d34a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d34e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d35a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d35e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d362:	2300      	movs	r3, #0
 801d364:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d368:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d36c:	460b      	mov	r3, r1
 801d36e:	4313      	orrs	r3, r2
 801d370:	d056      	beq.n	801d420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d376:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d37a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d37e:	d038      	beq.n	801d3f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d384:	d831      	bhi.n	801d3ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d38a:	d034      	beq.n	801d3f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d38c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d390:	d82b      	bhi.n	801d3ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d396:	d01d      	beq.n	801d3d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d39c:	d825      	bhi.n	801d3ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d006      	beq.n	801d3b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d3a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d3a6:	d00a      	beq.n	801d3be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d3a8:	e01f      	b.n	801d3ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d3aa:	bf00      	nop
 801d3ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d3b0:	4ba2      	ldr	r3, [pc, #648]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3b4:	4aa1      	ldr	r2, [pc, #644]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d3b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d3ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d3bc:	e01c      	b.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3c2:	3308      	adds	r3, #8
 801d3c4:	2100      	movs	r1, #0
 801d3c6:	4618      	mov	r0, r3
 801d3c8:	f001 fb1c 	bl	801ea04 <RCCEx_PLL2_Config>
 801d3cc:	4603      	mov	r3, r0
 801d3ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d3d2:	e011      	b.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3d8:	3328      	adds	r3, #40	@ 0x28
 801d3da:	2100      	movs	r1, #0
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f001 fbc3 	bl	801eb68 <RCCEx_PLL3_Config>
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d3e8:	e006      	b.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d3ea:	2301      	movs	r3, #1
 801d3ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d3f0:	e002      	b.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d3f2:	bf00      	nop
 801d3f4:	e000      	b.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d3f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d3f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d10b      	bne.n	801d418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d400:	4b8e      	ldr	r3, [pc, #568]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d404:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d40c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d410:	4a8a      	ldr	r2, [pc, #552]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d412:	430b      	orrs	r3, r1
 801d414:	6593      	str	r3, [r2, #88]	@ 0x58
 801d416:	e003      	b.n	801d420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d41c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d428:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d42c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d430:	2300      	movs	r3, #0
 801d432:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d436:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d43a:	460b      	mov	r3, r1
 801d43c:	4313      	orrs	r3, r2
 801d43e:	d03a      	beq.n	801d4b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d446:	2b30      	cmp	r3, #48	@ 0x30
 801d448:	d01f      	beq.n	801d48a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d44a:	2b30      	cmp	r3, #48	@ 0x30
 801d44c:	d819      	bhi.n	801d482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d44e:	2b20      	cmp	r3, #32
 801d450:	d00c      	beq.n	801d46c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d452:	2b20      	cmp	r3, #32
 801d454:	d815      	bhi.n	801d482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d456:	2b00      	cmp	r3, #0
 801d458:	d019      	beq.n	801d48e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d45a:	2b10      	cmp	r3, #16
 801d45c:	d111      	bne.n	801d482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d45e:	4b77      	ldr	r3, [pc, #476]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d462:	4a76      	ldr	r2, [pc, #472]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d46a:	e011      	b.n	801d490 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d470:	3308      	adds	r3, #8
 801d472:	2102      	movs	r1, #2
 801d474:	4618      	mov	r0, r3
 801d476:	f001 fac5 	bl	801ea04 <RCCEx_PLL2_Config>
 801d47a:	4603      	mov	r3, r0
 801d47c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d480:	e006      	b.n	801d490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d482:	2301      	movs	r3, #1
 801d484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d488:	e002      	b.n	801d490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d48a:	bf00      	nop
 801d48c:	e000      	b.n	801d490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d48e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d494:	2b00      	cmp	r3, #0
 801d496:	d10a      	bne.n	801d4ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d498:	4b68      	ldr	r3, [pc, #416]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d49a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d49c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d4a6:	4a65      	ldr	r2, [pc, #404]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d4a8:	430b      	orrs	r3, r1
 801d4aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d4ac:	e003      	b.n	801d4b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d4c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d4c6:	2300      	movs	r3, #0
 801d4c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d4cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d4d0:	460b      	mov	r3, r1
 801d4d2:	4313      	orrs	r3, r2
 801d4d4:	d051      	beq.n	801d57a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d4dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d4e0:	d035      	beq.n	801d54e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d4e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d4e6:	d82e      	bhi.n	801d546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d4e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d4ec:	d031      	beq.n	801d552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d4ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d4f2:	d828      	bhi.n	801d546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d4f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d4f8:	d01a      	beq.n	801d530 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d4fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d4fe:	d822      	bhi.n	801d546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d500:	2b00      	cmp	r3, #0
 801d502:	d003      	beq.n	801d50c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d508:	d007      	beq.n	801d51a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d50a:	e01c      	b.n	801d546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d50c:	4b4b      	ldr	r3, [pc, #300]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d510:	4a4a      	ldr	r2, [pc, #296]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d518:	e01c      	b.n	801d554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d51e:	3308      	adds	r3, #8
 801d520:	2100      	movs	r1, #0
 801d522:	4618      	mov	r0, r3
 801d524:	f001 fa6e 	bl	801ea04 <RCCEx_PLL2_Config>
 801d528:	4603      	mov	r3, r0
 801d52a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d52e:	e011      	b.n	801d554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d534:	3328      	adds	r3, #40	@ 0x28
 801d536:	2100      	movs	r1, #0
 801d538:	4618      	mov	r0, r3
 801d53a:	f001 fb15 	bl	801eb68 <RCCEx_PLL3_Config>
 801d53e:	4603      	mov	r3, r0
 801d540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d544:	e006      	b.n	801d554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d546:	2301      	movs	r3, #1
 801d548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d54c:	e002      	b.n	801d554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d54e:	bf00      	nop
 801d550:	e000      	b.n	801d554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d552:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d10a      	bne.n	801d572 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801d55c:	4b37      	ldr	r3, [pc, #220]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d55e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d560:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801d564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d56a:	4a34      	ldr	r2, [pc, #208]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d56c:	430b      	orrs	r3, r1
 801d56e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d570:	e003      	b.n	801d57a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d582:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801d586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d58a:	2300      	movs	r3, #0
 801d58c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801d590:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801d594:	460b      	mov	r3, r1
 801d596:	4313      	orrs	r3, r2
 801d598:	d056      	beq.n	801d648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801d59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d59e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d5a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d5a4:	d033      	beq.n	801d60e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d5a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d5aa:	d82c      	bhi.n	801d606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d5b0:	d02f      	beq.n	801d612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d5b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d5b6:	d826      	bhi.n	801d606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d5bc:	d02b      	beq.n	801d616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d5be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d5c2:	d820      	bhi.n	801d606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d5c8:	d012      	beq.n	801d5f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d5ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d5ce:	d81a      	bhi.n	801d606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d022      	beq.n	801d61a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d5d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d5d8:	d115      	bne.n	801d606 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5de:	3308      	adds	r3, #8
 801d5e0:	2101      	movs	r1, #1
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	f001 fa0e 	bl	801ea04 <RCCEx_PLL2_Config>
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d5ee:	e015      	b.n	801d61c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5f4:	3328      	adds	r3, #40	@ 0x28
 801d5f6:	2101      	movs	r1, #1
 801d5f8:	4618      	mov	r0, r3
 801d5fa:	f001 fab5 	bl	801eb68 <RCCEx_PLL3_Config>
 801d5fe:	4603      	mov	r3, r0
 801d600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d604:	e00a      	b.n	801d61c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d606:	2301      	movs	r3, #1
 801d608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d60c:	e006      	b.n	801d61c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d60e:	bf00      	nop
 801d610:	e004      	b.n	801d61c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d612:	bf00      	nop
 801d614:	e002      	b.n	801d61c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d616:	bf00      	nop
 801d618:	e000      	b.n	801d61c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d61a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d61c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d620:	2b00      	cmp	r3, #0
 801d622:	d10d      	bne.n	801d640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d624:	4b05      	ldr	r3, [pc, #20]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d628:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d632:	4a02      	ldr	r2, [pc, #8]	@ (801d63c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d634:	430b      	orrs	r3, r1
 801d636:	6513      	str	r3, [r2, #80]	@ 0x50
 801d638:	e006      	b.n	801d648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801d63a:	bf00      	nop
 801d63c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d650:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801d654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801d658:	2300      	movs	r3, #0
 801d65a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801d65e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801d662:	460b      	mov	r3, r1
 801d664:	4313      	orrs	r3, r2
 801d666:	d055      	beq.n	801d714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801d668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d66c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d674:	d033      	beq.n	801d6de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801d676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d67a:	d82c      	bhi.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d67c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d680:	d02f      	beq.n	801d6e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801d682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d686:	d826      	bhi.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d688:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d68c:	d02b      	beq.n	801d6e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801d68e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d692:	d820      	bhi.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d698:	d012      	beq.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d69a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d69e:	d81a      	bhi.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d022      	beq.n	801d6ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d6a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d6a8:	d115      	bne.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6ae:	3308      	adds	r3, #8
 801d6b0:	2101      	movs	r1, #1
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f001 f9a6 	bl	801ea04 <RCCEx_PLL2_Config>
 801d6b8:	4603      	mov	r3, r0
 801d6ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d6be:	e015      	b.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6c4:	3328      	adds	r3, #40	@ 0x28
 801d6c6:	2101      	movs	r1, #1
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	f001 fa4d 	bl	801eb68 <RCCEx_PLL3_Config>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d6d4:	e00a      	b.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801d6d6:	2301      	movs	r3, #1
 801d6d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d6dc:	e006      	b.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d6de:	bf00      	nop
 801d6e0:	e004      	b.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d6e2:	bf00      	nop
 801d6e4:	e002      	b.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d6e6:	bf00      	nop
 801d6e8:	e000      	b.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d6ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d6ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	d10b      	bne.n	801d70c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801d6f4:	4ba3      	ldr	r3, [pc, #652]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d6f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d6f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d704:	4a9f      	ldr	r2, [pc, #636]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d706:	430b      	orrs	r3, r1
 801d708:	6593      	str	r3, [r2, #88]	@ 0x58
 801d70a:	e003      	b.n	801d714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d70c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d71c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801d720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801d724:	2300      	movs	r3, #0
 801d726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801d72a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801d72e:	460b      	mov	r3, r1
 801d730:	4313      	orrs	r3, r2
 801d732:	d037      	beq.n	801d7a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801d734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d73a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d73e:	d00e      	beq.n	801d75e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801d740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d744:	d816      	bhi.n	801d774 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801d746:	2b00      	cmp	r3, #0
 801d748:	d018      	beq.n	801d77c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801d74a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d74e:	d111      	bne.n	801d774 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d750:	4b8c      	ldr	r3, [pc, #560]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d754:	4a8b      	ldr	r2, [pc, #556]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d75a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d75c:	e00f      	b.n	801d77e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d762:	3308      	adds	r3, #8
 801d764:	2101      	movs	r1, #1
 801d766:	4618      	mov	r0, r3
 801d768:	f001 f94c 	bl	801ea04 <RCCEx_PLL2_Config>
 801d76c:	4603      	mov	r3, r0
 801d76e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d772:	e004      	b.n	801d77e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d774:	2301      	movs	r3, #1
 801d776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d77a:	e000      	b.n	801d77e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801d77c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d77e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d782:	2b00      	cmp	r3, #0
 801d784:	d10a      	bne.n	801d79c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d786:	4b7f      	ldr	r3, [pc, #508]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d78a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d794:	4a7b      	ldr	r2, [pc, #492]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d796:	430b      	orrs	r3, r1
 801d798:	6513      	str	r3, [r2, #80]	@ 0x50
 801d79a:	e003      	b.n	801d7a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d79c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801d7b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801d7ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801d7be:	460b      	mov	r3, r1
 801d7c0:	4313      	orrs	r3, r2
 801d7c2:	d039      	beq.n	801d838 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801d7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d7ca:	2b03      	cmp	r3, #3
 801d7cc:	d81c      	bhi.n	801d808 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801d7ce:	a201      	add	r2, pc, #4	@ (adr r2, 801d7d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801d7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7d4:	0801d811 	.word	0x0801d811
 801d7d8:	0801d7e5 	.word	0x0801d7e5
 801d7dc:	0801d7f3 	.word	0x0801d7f3
 801d7e0:	0801d811 	.word	0x0801d811
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d7e4:	4b67      	ldr	r3, [pc, #412]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7e8:	4a66      	ldr	r2, [pc, #408]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d7ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d7ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d7f0:	e00f      	b.n	801d812 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7f6:	3308      	adds	r3, #8
 801d7f8:	2102      	movs	r1, #2
 801d7fa:	4618      	mov	r0, r3
 801d7fc:	f001 f902 	bl	801ea04 <RCCEx_PLL2_Config>
 801d800:	4603      	mov	r3, r0
 801d802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d806:	e004      	b.n	801d812 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d808:	2301      	movs	r3, #1
 801d80a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d80e:	e000      	b.n	801d812 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801d810:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d816:	2b00      	cmp	r3, #0
 801d818:	d10a      	bne.n	801d830 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d81a:	4b5a      	ldr	r3, [pc, #360]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d81c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d81e:	f023 0103 	bic.w	r1, r3, #3
 801d822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d828:	4a56      	ldr	r2, [pc, #344]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d82a:	430b      	orrs	r3, r1
 801d82c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d82e:	e003      	b.n	801d838 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d840:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801d844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d848:	2300      	movs	r3, #0
 801d84a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801d84e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801d852:	460b      	mov	r3, r1
 801d854:	4313      	orrs	r3, r2
 801d856:	f000 809f 	beq.w	801d998 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d85a:	4b4b      	ldr	r3, [pc, #300]	@ (801d988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	4a4a      	ldr	r2, [pc, #296]	@ (801d988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d866:	f7fc f807 	bl	8019878 <HAL_GetTick>
 801d86a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d86e:	e00b      	b.n	801d888 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d870:	f7fc f802 	bl	8019878 <HAL_GetTick>
 801d874:	4602      	mov	r2, r0
 801d876:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d87a:	1ad3      	subs	r3, r2, r3
 801d87c:	2b64      	cmp	r3, #100	@ 0x64
 801d87e:	d903      	bls.n	801d888 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801d880:	2303      	movs	r3, #3
 801d882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d886:	e005      	b.n	801d894 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d888:	4b3f      	ldr	r3, [pc, #252]	@ (801d988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d890:	2b00      	cmp	r3, #0
 801d892:	d0ed      	beq.n	801d870 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801d894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d179      	bne.n	801d990 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d89c:	4b39      	ldr	r3, [pc, #228]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d89e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801d8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d8a8:	4053      	eors	r3, r2
 801d8aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d015      	beq.n	801d8de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d8b2:	4b34      	ldr	r3, [pc, #208]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d8ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d8be:	4b31      	ldr	r3, [pc, #196]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8c2:	4a30      	ldr	r2, [pc, #192]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d8c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d8ca:	4b2e      	ldr	r3, [pc, #184]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d8ce:	4a2d      	ldr	r2, [pc, #180]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d8d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801d8d6:	4a2b      	ldr	r2, [pc, #172]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801d8dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d8e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d8ea:	d118      	bne.n	801d91e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d8ec:	f7fb ffc4 	bl	8019878 <HAL_GetTick>
 801d8f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d8f4:	e00d      	b.n	801d912 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d8f6:	f7fb ffbf 	bl	8019878 <HAL_GetTick>
 801d8fa:	4602      	mov	r2, r0
 801d8fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d900:	1ad2      	subs	r2, r2, r3
 801d902:	f241 3388 	movw	r3, #5000	@ 0x1388
 801d906:	429a      	cmp	r2, r3
 801d908:	d903      	bls.n	801d912 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801d90a:	2303      	movs	r3, #3
 801d90c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801d910:	e005      	b.n	801d91e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d912:	4b1c      	ldr	r3, [pc, #112]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d916:	f003 0302 	and.w	r3, r3, #2
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d0eb      	beq.n	801d8f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801d91e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d922:	2b00      	cmp	r3, #0
 801d924:	d129      	bne.n	801d97a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d92a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d92e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d936:	d10e      	bne.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801d938:	4b12      	ldr	r3, [pc, #72]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d93a:	691b      	ldr	r3, [r3, #16]
 801d93c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801d940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d948:	091a      	lsrs	r2, r3, #4
 801d94a:	4b10      	ldr	r3, [pc, #64]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801d94c:	4013      	ands	r3, r2
 801d94e:	4a0d      	ldr	r2, [pc, #52]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d950:	430b      	orrs	r3, r1
 801d952:	6113      	str	r3, [r2, #16]
 801d954:	e005      	b.n	801d962 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801d956:	4b0b      	ldr	r3, [pc, #44]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d958:	691b      	ldr	r3, [r3, #16]
 801d95a:	4a0a      	ldr	r2, [pc, #40]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d95c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d960:	6113      	str	r3, [r2, #16]
 801d962:	4b08      	ldr	r3, [pc, #32]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d964:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801d966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d96a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d96e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d972:	4a04      	ldr	r2, [pc, #16]	@ (801d984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d974:	430b      	orrs	r3, r1
 801d976:	6713      	str	r3, [r2, #112]	@ 0x70
 801d978:	e00e      	b.n	801d998 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d97a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d97e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801d982:	e009      	b.n	801d998 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801d984:	58024400 	.word	0x58024400
 801d988:	58024800 	.word	0x58024800
 801d98c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9a0:	f002 0301 	and.w	r3, r2, #1
 801d9a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801d9a8:	2300      	movs	r3, #0
 801d9aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801d9ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801d9b2:	460b      	mov	r3, r1
 801d9b4:	4313      	orrs	r3, r2
 801d9b6:	f000 8089 	beq.w	801dacc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801d9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d9c0:	2b28      	cmp	r3, #40	@ 0x28
 801d9c2:	d86b      	bhi.n	801da9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801d9c4:	a201      	add	r2, pc, #4	@ (adr r2, 801d9cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d9ca:	bf00      	nop
 801d9cc:	0801daa5 	.word	0x0801daa5
 801d9d0:	0801da9d 	.word	0x0801da9d
 801d9d4:	0801da9d 	.word	0x0801da9d
 801d9d8:	0801da9d 	.word	0x0801da9d
 801d9dc:	0801da9d 	.word	0x0801da9d
 801d9e0:	0801da9d 	.word	0x0801da9d
 801d9e4:	0801da9d 	.word	0x0801da9d
 801d9e8:	0801da9d 	.word	0x0801da9d
 801d9ec:	0801da71 	.word	0x0801da71
 801d9f0:	0801da9d 	.word	0x0801da9d
 801d9f4:	0801da9d 	.word	0x0801da9d
 801d9f8:	0801da9d 	.word	0x0801da9d
 801d9fc:	0801da9d 	.word	0x0801da9d
 801da00:	0801da9d 	.word	0x0801da9d
 801da04:	0801da9d 	.word	0x0801da9d
 801da08:	0801da9d 	.word	0x0801da9d
 801da0c:	0801da87 	.word	0x0801da87
 801da10:	0801da9d 	.word	0x0801da9d
 801da14:	0801da9d 	.word	0x0801da9d
 801da18:	0801da9d 	.word	0x0801da9d
 801da1c:	0801da9d 	.word	0x0801da9d
 801da20:	0801da9d 	.word	0x0801da9d
 801da24:	0801da9d 	.word	0x0801da9d
 801da28:	0801da9d 	.word	0x0801da9d
 801da2c:	0801daa5 	.word	0x0801daa5
 801da30:	0801da9d 	.word	0x0801da9d
 801da34:	0801da9d 	.word	0x0801da9d
 801da38:	0801da9d 	.word	0x0801da9d
 801da3c:	0801da9d 	.word	0x0801da9d
 801da40:	0801da9d 	.word	0x0801da9d
 801da44:	0801da9d 	.word	0x0801da9d
 801da48:	0801da9d 	.word	0x0801da9d
 801da4c:	0801daa5 	.word	0x0801daa5
 801da50:	0801da9d 	.word	0x0801da9d
 801da54:	0801da9d 	.word	0x0801da9d
 801da58:	0801da9d 	.word	0x0801da9d
 801da5c:	0801da9d 	.word	0x0801da9d
 801da60:	0801da9d 	.word	0x0801da9d
 801da64:	0801da9d 	.word	0x0801da9d
 801da68:	0801da9d 	.word	0x0801da9d
 801da6c:	0801daa5 	.word	0x0801daa5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801da70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da74:	3308      	adds	r3, #8
 801da76:	2101      	movs	r1, #1
 801da78:	4618      	mov	r0, r3
 801da7a:	f000 ffc3 	bl	801ea04 <RCCEx_PLL2_Config>
 801da7e:	4603      	mov	r3, r0
 801da80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801da84:	e00f      	b.n	801daa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801da86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da8a:	3328      	adds	r3, #40	@ 0x28
 801da8c:	2101      	movs	r1, #1
 801da8e:	4618      	mov	r0, r3
 801da90:	f001 f86a 	bl	801eb68 <RCCEx_PLL3_Config>
 801da94:	4603      	mov	r3, r0
 801da96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801da9a:	e004      	b.n	801daa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801da9c:	2301      	movs	r3, #1
 801da9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801daa2:	e000      	b.n	801daa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801daa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801daa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d10a      	bne.n	801dac4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801daae:	4bbf      	ldr	r3, [pc, #764]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dab2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801dab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dabc:	4abb      	ldr	r2, [pc, #748]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dabe:	430b      	orrs	r3, r1
 801dac0:	6553      	str	r3, [r2, #84]	@ 0x54
 801dac2:	e003      	b.n	801dacc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801dacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dad4:	f002 0302 	and.w	r3, r2, #2
 801dad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801dadc:	2300      	movs	r3, #0
 801dade:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801dae2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801dae6:	460b      	mov	r3, r1
 801dae8:	4313      	orrs	r3, r2
 801daea:	d041      	beq.n	801db70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801daec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801daf2:	2b05      	cmp	r3, #5
 801daf4:	d824      	bhi.n	801db40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801daf6:	a201      	add	r2, pc, #4	@ (adr r2, 801dafc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801daf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dafc:	0801db49 	.word	0x0801db49
 801db00:	0801db15 	.word	0x0801db15
 801db04:	0801db2b 	.word	0x0801db2b
 801db08:	0801db49 	.word	0x0801db49
 801db0c:	0801db49 	.word	0x0801db49
 801db10:	0801db49 	.word	0x0801db49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801db14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db18:	3308      	adds	r3, #8
 801db1a:	2101      	movs	r1, #1
 801db1c:	4618      	mov	r0, r3
 801db1e:	f000 ff71 	bl	801ea04 <RCCEx_PLL2_Config>
 801db22:	4603      	mov	r3, r0
 801db24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801db28:	e00f      	b.n	801db4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801db2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db2e:	3328      	adds	r3, #40	@ 0x28
 801db30:	2101      	movs	r1, #1
 801db32:	4618      	mov	r0, r3
 801db34:	f001 f818 	bl	801eb68 <RCCEx_PLL3_Config>
 801db38:	4603      	mov	r3, r0
 801db3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801db3e:	e004      	b.n	801db4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801db40:	2301      	movs	r3, #1
 801db42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801db46:	e000      	b.n	801db4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801db48:	bf00      	nop
    }

    if (ret == HAL_OK)
 801db4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d10a      	bne.n	801db68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801db52:	4b96      	ldr	r3, [pc, #600]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801db54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db56:	f023 0107 	bic.w	r1, r3, #7
 801db5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801db60:	4a92      	ldr	r2, [pc, #584]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801db62:	430b      	orrs	r3, r1
 801db64:	6553      	str	r3, [r2, #84]	@ 0x54
 801db66:	e003      	b.n	801db70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801db70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db78:	f002 0304 	and.w	r3, r2, #4
 801db7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801db80:	2300      	movs	r3, #0
 801db82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801db86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801db8a:	460b      	mov	r3, r1
 801db8c:	4313      	orrs	r3, r2
 801db8e:	d044      	beq.n	801dc1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801db90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801db98:	2b05      	cmp	r3, #5
 801db9a:	d825      	bhi.n	801dbe8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801db9c:	a201      	add	r2, pc, #4	@ (adr r2, 801dba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801db9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dba2:	bf00      	nop
 801dba4:	0801dbf1 	.word	0x0801dbf1
 801dba8:	0801dbbd 	.word	0x0801dbbd
 801dbac:	0801dbd3 	.word	0x0801dbd3
 801dbb0:	0801dbf1 	.word	0x0801dbf1
 801dbb4:	0801dbf1 	.word	0x0801dbf1
 801dbb8:	0801dbf1 	.word	0x0801dbf1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dbbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbc0:	3308      	adds	r3, #8
 801dbc2:	2101      	movs	r1, #1
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f000 ff1d 	bl	801ea04 <RCCEx_PLL2_Config>
 801dbca:	4603      	mov	r3, r0
 801dbcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801dbd0:	e00f      	b.n	801dbf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbd6:	3328      	adds	r3, #40	@ 0x28
 801dbd8:	2101      	movs	r1, #1
 801dbda:	4618      	mov	r0, r3
 801dbdc:	f000 ffc4 	bl	801eb68 <RCCEx_PLL3_Config>
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801dbe6:	e004      	b.n	801dbf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dbe8:	2301      	movs	r3, #1
 801dbea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dbee:	e000      	b.n	801dbf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801dbf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dbf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d10b      	bne.n	801dc12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801dbfa:	4b6c      	ldr	r3, [pc, #432]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dbfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dbfe:	f023 0107 	bic.w	r1, r3, #7
 801dc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dc0a:	4a68      	ldr	r2, [pc, #416]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dc0c:	430b      	orrs	r3, r1
 801dc0e:	6593      	str	r3, [r2, #88]	@ 0x58
 801dc10:	e003      	b.n	801dc1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801dc1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc22:	f002 0320 	and.w	r3, r2, #32
 801dc26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801dc30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801dc34:	460b      	mov	r3, r1
 801dc36:	4313      	orrs	r3, r2
 801dc38:	d055      	beq.n	801dce6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801dc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dc42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dc46:	d033      	beq.n	801dcb0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801dc48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dc4c:	d82c      	bhi.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dc52:	d02f      	beq.n	801dcb4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801dc54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dc58:	d826      	bhi.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dc5e:	d02b      	beq.n	801dcb8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801dc60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dc64:	d820      	bhi.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dc6a:	d012      	beq.n	801dc92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801dc6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dc70:	d81a      	bhi.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d022      	beq.n	801dcbc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801dc76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dc7a:	d115      	bne.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dc7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc80:	3308      	adds	r3, #8
 801dc82:	2100      	movs	r1, #0
 801dc84:	4618      	mov	r0, r3
 801dc86:	f000 febd 	bl	801ea04 <RCCEx_PLL2_Config>
 801dc8a:	4603      	mov	r3, r0
 801dc8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dc90:	e015      	b.n	801dcbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc96:	3328      	adds	r3, #40	@ 0x28
 801dc98:	2102      	movs	r1, #2
 801dc9a:	4618      	mov	r0, r3
 801dc9c:	f000 ff64 	bl	801eb68 <RCCEx_PLL3_Config>
 801dca0:	4603      	mov	r3, r0
 801dca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dca6:	e00a      	b.n	801dcbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dca8:	2301      	movs	r3, #1
 801dcaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dcae:	e006      	b.n	801dcbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcb0:	bf00      	nop
 801dcb2:	e004      	b.n	801dcbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcb4:	bf00      	nop
 801dcb6:	e002      	b.n	801dcbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcb8:	bf00      	nop
 801dcba:	e000      	b.n	801dcbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801dcbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dcbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d10b      	bne.n	801dcde <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801dcc6:	4b39      	ldr	r3, [pc, #228]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dcc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dcca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801dcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dcd6:	4a35      	ldr	r2, [pc, #212]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dcd8:	430b      	orrs	r3, r1
 801dcda:	6553      	str	r3, [r2, #84]	@ 0x54
 801dcdc:	e003      	b.n	801dce6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dcde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801dce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801dcf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801dcfc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801dd00:	460b      	mov	r3, r1
 801dd02:	4313      	orrs	r3, r2
 801dd04:	d058      	beq.n	801ddb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801dd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801dd0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801dd12:	d033      	beq.n	801dd7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801dd14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801dd18:	d82c      	bhi.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dd1e:	d02f      	beq.n	801dd80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801dd20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dd24:	d826      	bhi.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801dd2a:	d02b      	beq.n	801dd84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801dd2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801dd30:	d820      	bhi.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801dd36:	d012      	beq.n	801dd5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801dd38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801dd3c:	d81a      	bhi.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d022      	beq.n	801dd88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801dd42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801dd46:	d115      	bne.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd4c:	3308      	adds	r3, #8
 801dd4e:	2100      	movs	r1, #0
 801dd50:	4618      	mov	r0, r3
 801dd52:	f000 fe57 	bl	801ea04 <RCCEx_PLL2_Config>
 801dd56:	4603      	mov	r3, r0
 801dd58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801dd5c:	e015      	b.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dd5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd62:	3328      	adds	r3, #40	@ 0x28
 801dd64:	2102      	movs	r1, #2
 801dd66:	4618      	mov	r0, r3
 801dd68:	f000 fefe 	bl	801eb68 <RCCEx_PLL3_Config>
 801dd6c:	4603      	mov	r3, r0
 801dd6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801dd72:	e00a      	b.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dd74:	2301      	movs	r3, #1
 801dd76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd7a:	e006      	b.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dd7c:	bf00      	nop
 801dd7e:	e004      	b.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dd80:	bf00      	nop
 801dd82:	e002      	b.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dd84:	bf00      	nop
 801dd86:	e000      	b.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dd88:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d10e      	bne.n	801ddb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801dd92:	4b06      	ldr	r3, [pc, #24]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dd94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dd96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801dd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801dda2:	4a02      	ldr	r2, [pc, #8]	@ (801ddac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dda4:	430b      	orrs	r3, r1
 801dda6:	6593      	str	r3, [r2, #88]	@ 0x58
 801dda8:	e006      	b.n	801ddb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801ddaa:	bf00      	nop
 801ddac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ddb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801ddc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ddc8:	2300      	movs	r3, #0
 801ddca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ddce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ddd2:	460b      	mov	r3, r1
 801ddd4:	4313      	orrs	r3, r2
 801ddd6:	d055      	beq.n	801de84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ddd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801dde0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801dde4:	d033      	beq.n	801de4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801dde6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801ddea:	d82c      	bhi.n	801de46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ddec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ddf0:	d02f      	beq.n	801de52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801ddf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ddf6:	d826      	bhi.n	801de46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ddf8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ddfc:	d02b      	beq.n	801de56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801ddfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801de02:	d820      	bhi.n	801de46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801de04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801de08:	d012      	beq.n	801de30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801de0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801de0e:	d81a      	bhi.n	801de46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801de10:	2b00      	cmp	r3, #0
 801de12:	d022      	beq.n	801de5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801de14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801de18:	d115      	bne.n	801de46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801de1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de1e:	3308      	adds	r3, #8
 801de20:	2100      	movs	r1, #0
 801de22:	4618      	mov	r0, r3
 801de24:	f000 fdee 	bl	801ea04 <RCCEx_PLL2_Config>
 801de28:	4603      	mov	r3, r0
 801de2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801de2e:	e015      	b.n	801de5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801de30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de34:	3328      	adds	r3, #40	@ 0x28
 801de36:	2102      	movs	r1, #2
 801de38:	4618      	mov	r0, r3
 801de3a:	f000 fe95 	bl	801eb68 <RCCEx_PLL3_Config>
 801de3e:	4603      	mov	r3, r0
 801de40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801de44:	e00a      	b.n	801de5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801de46:	2301      	movs	r3, #1
 801de48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de4c:	e006      	b.n	801de5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de4e:	bf00      	nop
 801de50:	e004      	b.n	801de5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de52:	bf00      	nop
 801de54:	e002      	b.n	801de5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de56:	bf00      	nop
 801de58:	e000      	b.n	801de5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801de5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de60:	2b00      	cmp	r3, #0
 801de62:	d10b      	bne.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801de64:	4ba1      	ldr	r3, [pc, #644]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801de66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801de68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801de6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801de74:	4a9d      	ldr	r2, [pc, #628]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801de76:	430b      	orrs	r3, r1
 801de78:	6593      	str	r3, [r2, #88]	@ 0x58
 801de7a:	e003      	b.n	801de84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801de84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de8c:	f002 0308 	and.w	r3, r2, #8
 801de90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801de94:	2300      	movs	r3, #0
 801de96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801de9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801de9e:	460b      	mov	r3, r1
 801dea0:	4313      	orrs	r3, r2
 801dea2:	d01e      	beq.n	801dee2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801dea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801deac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801deb0:	d10c      	bne.n	801decc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801deb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801deb6:	3328      	adds	r3, #40	@ 0x28
 801deb8:	2102      	movs	r1, #2
 801deba:	4618      	mov	r0, r3
 801debc:	f000 fe54 	bl	801eb68 <RCCEx_PLL3_Config>
 801dec0:	4603      	mov	r3, r0
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d002      	beq.n	801decc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801dec6:	2301      	movs	r3, #1
 801dec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801decc:	4b87      	ldr	r3, [pc, #540]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ded0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ded4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ded8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801dedc:	4a83      	ldr	r2, [pc, #524]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dede:	430b      	orrs	r3, r1
 801dee0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801dee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deea:	f002 0310 	and.w	r3, r2, #16
 801deee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801def2:	2300      	movs	r3, #0
 801def4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801def8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801defc:	460b      	mov	r3, r1
 801defe:	4313      	orrs	r3, r2
 801df00:	d01e      	beq.n	801df40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801df02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801df0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801df0e:	d10c      	bne.n	801df2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801df10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df14:	3328      	adds	r3, #40	@ 0x28
 801df16:	2102      	movs	r1, #2
 801df18:	4618      	mov	r0, r3
 801df1a:	f000 fe25 	bl	801eb68 <RCCEx_PLL3_Config>
 801df1e:	4603      	mov	r3, r0
 801df20:	2b00      	cmp	r3, #0
 801df22:	d002      	beq.n	801df2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801df24:	2301      	movs	r3, #1
 801df26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801df2a:	4b70      	ldr	r3, [pc, #448]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801df2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801df32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801df3a:	4a6c      	ldr	r2, [pc, #432]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801df3c:	430b      	orrs	r3, r1
 801df3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801df40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801df4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801df50:	2300      	movs	r3, #0
 801df52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801df56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801df5a:	460b      	mov	r3, r1
 801df5c:	4313      	orrs	r3, r2
 801df5e:	d03e      	beq.n	801dfde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801df60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801df68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801df6c:	d022      	beq.n	801dfb4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801df6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801df72:	d81b      	bhi.n	801dfac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801df74:	2b00      	cmp	r3, #0
 801df76:	d003      	beq.n	801df80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801df78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801df7c:	d00b      	beq.n	801df96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801df7e:	e015      	b.n	801dfac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801df80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df84:	3308      	adds	r3, #8
 801df86:	2100      	movs	r1, #0
 801df88:	4618      	mov	r0, r3
 801df8a:	f000 fd3b 	bl	801ea04 <RCCEx_PLL2_Config>
 801df8e:	4603      	mov	r3, r0
 801df90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801df94:	e00f      	b.n	801dfb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801df96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df9a:	3328      	adds	r3, #40	@ 0x28
 801df9c:	2102      	movs	r1, #2
 801df9e:	4618      	mov	r0, r3
 801dfa0:	f000 fde2 	bl	801eb68 <RCCEx_PLL3_Config>
 801dfa4:	4603      	mov	r3, r0
 801dfa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801dfaa:	e004      	b.n	801dfb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dfac:	2301      	movs	r3, #1
 801dfae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dfb2:	e000      	b.n	801dfb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801dfb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d10b      	bne.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801dfbe:	4b4b      	ldr	r3, [pc, #300]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dfc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dfc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801dfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801dfce:	4a47      	ldr	r2, [pc, #284]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dfd0:	430b      	orrs	r3, r1
 801dfd2:	6593      	str	r3, [r2, #88]	@ 0x58
 801dfd4:	e003      	b.n	801dfde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dfd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801dfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfe6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801dfea:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dfec:	2300      	movs	r3, #0
 801dfee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dff0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801dff4:	460b      	mov	r3, r1
 801dff6:	4313      	orrs	r3, r2
 801dff8:	d03b      	beq.n	801e072 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801dffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e002:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e006:	d01f      	beq.n	801e048 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e008:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e00c:	d818      	bhi.n	801e040 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e00e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e012:	d003      	beq.n	801e01c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e018:	d007      	beq.n	801e02a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e01a:	e011      	b.n	801e040 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e01c:	4b33      	ldr	r3, [pc, #204]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e020:	4a32      	ldr	r2, [pc, #200]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e028:	e00f      	b.n	801e04a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e02e:	3328      	adds	r3, #40	@ 0x28
 801e030:	2101      	movs	r1, #1
 801e032:	4618      	mov	r0, r3
 801e034:	f000 fd98 	bl	801eb68 <RCCEx_PLL3_Config>
 801e038:	4603      	mov	r3, r0
 801e03a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e03e:	e004      	b.n	801e04a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e040:	2301      	movs	r3, #1
 801e042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e046:	e000      	b.n	801e04a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e048:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e04a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d10b      	bne.n	801e06a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e052:	4b26      	ldr	r3, [pc, #152]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e056:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e062:	4a22      	ldr	r2, [pc, #136]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e064:	430b      	orrs	r3, r1
 801e066:	6553      	str	r3, [r2, #84]	@ 0x54
 801e068:	e003      	b.n	801e072 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e06a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e06e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e07a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e07e:	673b      	str	r3, [r7, #112]	@ 0x70
 801e080:	2300      	movs	r3, #0
 801e082:	677b      	str	r3, [r7, #116]	@ 0x74
 801e084:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e088:	460b      	mov	r3, r1
 801e08a:	4313      	orrs	r3, r2
 801e08c:	d034      	beq.n	801e0f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e094:	2b00      	cmp	r3, #0
 801e096:	d003      	beq.n	801e0a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e09c:	d007      	beq.n	801e0ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e09e:	e011      	b.n	801e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e0a0:	4b12      	ldr	r3, [pc, #72]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0a4:	4a11      	ldr	r2, [pc, #68]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e0aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e0ac:	e00e      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0b2:	3308      	adds	r3, #8
 801e0b4:	2102      	movs	r1, #2
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	f000 fca4 	bl	801ea04 <RCCEx_PLL2_Config>
 801e0bc:	4603      	mov	r3, r0
 801e0be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e0c2:	e003      	b.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e0c4:	2301      	movs	r3, #1
 801e0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d10d      	bne.n	801e0f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e0d4:	4b05      	ldr	r3, [pc, #20]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e0d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e0e2:	4a02      	ldr	r2, [pc, #8]	@ (801e0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0e4:	430b      	orrs	r3, r1
 801e0e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e0e8:	e006      	b.n	801e0f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e0ea:	bf00      	nop
 801e0ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e100:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e104:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e106:	2300      	movs	r3, #0
 801e108:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e10a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e10e:	460b      	mov	r3, r1
 801e110:	4313      	orrs	r3, r2
 801e112:	d00c      	beq.n	801e12e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e118:	3328      	adds	r3, #40	@ 0x28
 801e11a:	2102      	movs	r1, #2
 801e11c:	4618      	mov	r0, r3
 801e11e:	f000 fd23 	bl	801eb68 <RCCEx_PLL3_Config>
 801e122:	4603      	mov	r3, r0
 801e124:	2b00      	cmp	r3, #0
 801e126:	d002      	beq.n	801e12e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e128:	2301      	movs	r3, #1
 801e12a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e136:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e13a:	663b      	str	r3, [r7, #96]	@ 0x60
 801e13c:	2300      	movs	r3, #0
 801e13e:	667b      	str	r3, [r7, #100]	@ 0x64
 801e140:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e144:	460b      	mov	r3, r1
 801e146:	4313      	orrs	r3, r2
 801e148:	d038      	beq.n	801e1bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e156:	d018      	beq.n	801e18a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e15c:	d811      	bhi.n	801e182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e15e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e162:	d014      	beq.n	801e18e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e168:	d80b      	bhi.n	801e182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d011      	beq.n	801e192 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e172:	d106      	bne.n	801e182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e174:	4bc3      	ldr	r3, [pc, #780]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e178:	4ac2      	ldr	r2, [pc, #776]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e17e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e180:	e008      	b.n	801e194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e182:	2301      	movs	r3, #1
 801e184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e188:	e004      	b.n	801e194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e18a:	bf00      	nop
 801e18c:	e002      	b.n	801e194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e18e:	bf00      	nop
 801e190:	e000      	b.n	801e194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e192:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d10b      	bne.n	801e1b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e19c:	4bb9      	ldr	r3, [pc, #740]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e1a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e1ac:	4ab5      	ldr	r2, [pc, #724]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e1ae:	430b      	orrs	r3, r1
 801e1b0:	6553      	str	r3, [r2, #84]	@ 0x54
 801e1b2:	e003      	b.n	801e1bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e1c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e1ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e1d2:	460b      	mov	r3, r1
 801e1d4:	4313      	orrs	r3, r2
 801e1d6:	d009      	beq.n	801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e1d8:	4baa      	ldr	r3, [pc, #680]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e1da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e1dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e1e6:	4aa7      	ldr	r2, [pc, #668]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e1e8:	430b      	orrs	r3, r1
 801e1ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e1f8:	653b      	str	r3, [r7, #80]	@ 0x50
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	657b      	str	r3, [r7, #84]	@ 0x54
 801e1fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e202:	460b      	mov	r3, r1
 801e204:	4313      	orrs	r3, r2
 801e206:	d00a      	beq.n	801e21e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e208:	4b9e      	ldr	r3, [pc, #632]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e20a:	691b      	ldr	r3, [r3, #16]
 801e20c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e214:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e218:	4a9a      	ldr	r2, [pc, #616]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e21a:	430b      	orrs	r3, r1
 801e21c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e226:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e22a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e22c:	2300      	movs	r3, #0
 801e22e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e230:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e234:	460b      	mov	r3, r1
 801e236:	4313      	orrs	r3, r2
 801e238:	d009      	beq.n	801e24e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e23a:	4b92      	ldr	r3, [pc, #584]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e23e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e248:	4a8e      	ldr	r2, [pc, #568]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e24a:	430b      	orrs	r3, r1
 801e24c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e256:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e25a:	643b      	str	r3, [r7, #64]	@ 0x40
 801e25c:	2300      	movs	r3, #0
 801e25e:	647b      	str	r3, [r7, #68]	@ 0x44
 801e260:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e264:	460b      	mov	r3, r1
 801e266:	4313      	orrs	r3, r2
 801e268:	d00e      	beq.n	801e288 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e26a:	4b86      	ldr	r3, [pc, #536]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e26c:	691b      	ldr	r3, [r3, #16]
 801e26e:	4a85      	ldr	r2, [pc, #532]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e270:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e274:	6113      	str	r3, [r2, #16]
 801e276:	4b83      	ldr	r3, [pc, #524]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e278:	6919      	ldr	r1, [r3, #16]
 801e27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e27e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e282:	4a80      	ldr	r2, [pc, #512]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e284:	430b      	orrs	r3, r1
 801e286:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e290:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e294:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e296:	2300      	movs	r3, #0
 801e298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e29a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e29e:	460b      	mov	r3, r1
 801e2a0:	4313      	orrs	r3, r2
 801e2a2:	d009      	beq.n	801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e2a4:	4b77      	ldr	r3, [pc, #476]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2b2:	4a74      	ldr	r2, [pc, #464]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2b4:	430b      	orrs	r3, r1
 801e2b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e2c4:	633b      	str	r3, [r7, #48]	@ 0x30
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 801e2ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e2ce:	460b      	mov	r3, r1
 801e2d0:	4313      	orrs	r3, r2
 801e2d2:	d00a      	beq.n	801e2ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e2d4:	4b6b      	ldr	r3, [pc, #428]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e2e4:	4a67      	ldr	r2, [pc, #412]	@ (801e484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2e6:	430b      	orrs	r3, r1
 801e2e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f2:	2100      	movs	r1, #0
 801e2f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e2f6:	f003 0301 	and.w	r3, r3, #1
 801e2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e2fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e300:	460b      	mov	r3, r1
 801e302:	4313      	orrs	r3, r2
 801e304:	d011      	beq.n	801e32a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e30a:	3308      	adds	r3, #8
 801e30c:	2100      	movs	r1, #0
 801e30e:	4618      	mov	r0, r3
 801e310:	f000 fb78 	bl	801ea04 <RCCEx_PLL2_Config>
 801e314:	4603      	mov	r3, r0
 801e316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e31a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d003      	beq.n	801e32a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e332:	2100      	movs	r1, #0
 801e334:	6239      	str	r1, [r7, #32]
 801e336:	f003 0302 	and.w	r3, r3, #2
 801e33a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e33c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e340:	460b      	mov	r3, r1
 801e342:	4313      	orrs	r3, r2
 801e344:	d011      	beq.n	801e36a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e34a:	3308      	adds	r3, #8
 801e34c:	2101      	movs	r1, #1
 801e34e:	4618      	mov	r0, r3
 801e350:	f000 fb58 	bl	801ea04 <RCCEx_PLL2_Config>
 801e354:	4603      	mov	r3, r0
 801e356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e35a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d003      	beq.n	801e36a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e372:	2100      	movs	r1, #0
 801e374:	61b9      	str	r1, [r7, #24]
 801e376:	f003 0304 	and.w	r3, r3, #4
 801e37a:	61fb      	str	r3, [r7, #28]
 801e37c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e380:	460b      	mov	r3, r1
 801e382:	4313      	orrs	r3, r2
 801e384:	d011      	beq.n	801e3aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e38a:	3308      	adds	r3, #8
 801e38c:	2102      	movs	r1, #2
 801e38e:	4618      	mov	r0, r3
 801e390:	f000 fb38 	bl	801ea04 <RCCEx_PLL2_Config>
 801e394:	4603      	mov	r3, r0
 801e396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e39a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d003      	beq.n	801e3aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3b2:	2100      	movs	r1, #0
 801e3b4:	6139      	str	r1, [r7, #16]
 801e3b6:	f003 0308 	and.w	r3, r3, #8
 801e3ba:	617b      	str	r3, [r7, #20]
 801e3bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e3c0:	460b      	mov	r3, r1
 801e3c2:	4313      	orrs	r3, r2
 801e3c4:	d011      	beq.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ca:	3328      	adds	r3, #40	@ 0x28
 801e3cc:	2100      	movs	r1, #0
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	f000 fbca 	bl	801eb68 <RCCEx_PLL3_Config>
 801e3d4:	4603      	mov	r3, r0
 801e3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e3da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d003      	beq.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e3e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3f2:	2100      	movs	r1, #0
 801e3f4:	60b9      	str	r1, [r7, #8]
 801e3f6:	f003 0310 	and.w	r3, r3, #16
 801e3fa:	60fb      	str	r3, [r7, #12]
 801e3fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e400:	460b      	mov	r3, r1
 801e402:	4313      	orrs	r3, r2
 801e404:	d011      	beq.n	801e42a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e40a:	3328      	adds	r3, #40	@ 0x28
 801e40c:	2101      	movs	r1, #1
 801e40e:	4618      	mov	r0, r3
 801e410:	f000 fbaa 	bl	801eb68 <RCCEx_PLL3_Config>
 801e414:	4603      	mov	r3, r0
 801e416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e41a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d003      	beq.n	801e42a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e432:	2100      	movs	r1, #0
 801e434:	6039      	str	r1, [r7, #0]
 801e436:	f003 0320 	and.w	r3, r3, #32
 801e43a:	607b      	str	r3, [r7, #4]
 801e43c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e440:	460b      	mov	r3, r1
 801e442:	4313      	orrs	r3, r2
 801e444:	d011      	beq.n	801e46a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44a:	3328      	adds	r3, #40	@ 0x28
 801e44c:	2102      	movs	r1, #2
 801e44e:	4618      	mov	r0, r3
 801e450:	f000 fb8a 	bl	801eb68 <RCCEx_PLL3_Config>
 801e454:	4603      	mov	r3, r0
 801e456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e45a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d003      	beq.n	801e46a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e46a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e46e:	2b00      	cmp	r3, #0
 801e470:	d101      	bne.n	801e476 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e472:	2300      	movs	r3, #0
 801e474:	e000      	b.n	801e478 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e476:	2301      	movs	r3, #1
}
 801e478:	4618      	mov	r0, r3
 801e47a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e47e:	46bd      	mov	sp, r7
 801e480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e484:	58024400 	.word	0x58024400

0801e488 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e488:	b580      	push	{r7, lr}
 801e48a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e48c:	f7fe fd96 	bl	801cfbc <HAL_RCC_GetHCLKFreq>
 801e490:	4602      	mov	r2, r0
 801e492:	4b06      	ldr	r3, [pc, #24]	@ (801e4ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e494:	6a1b      	ldr	r3, [r3, #32]
 801e496:	091b      	lsrs	r3, r3, #4
 801e498:	f003 0307 	and.w	r3, r3, #7
 801e49c:	4904      	ldr	r1, [pc, #16]	@ (801e4b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e49e:	5ccb      	ldrb	r3, [r1, r3]
 801e4a0:	f003 031f 	and.w	r3, r3, #31
 801e4a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	bd80      	pop	{r7, pc}
 801e4ac:	58024400 	.word	0x58024400
 801e4b0:	08026ee8 	.word	0x08026ee8

0801e4b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e4b4:	b480      	push	{r7}
 801e4b6:	b089      	sub	sp, #36	@ 0x24
 801e4b8:	af00      	add	r7, sp, #0
 801e4ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e4bc:	4ba1      	ldr	r3, [pc, #644]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4c0:	f003 0303 	and.w	r3, r3, #3
 801e4c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e4c6:	4b9f      	ldr	r3, [pc, #636]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4ca:	0b1b      	lsrs	r3, r3, #12
 801e4cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e4d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e4d2:	4b9c      	ldr	r3, [pc, #624]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4d6:	091b      	lsrs	r3, r3, #4
 801e4d8:	f003 0301 	and.w	r3, r3, #1
 801e4dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e4de:	4b99      	ldr	r3, [pc, #612]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e4e2:	08db      	lsrs	r3, r3, #3
 801e4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e4e8:	693a      	ldr	r2, [r7, #16]
 801e4ea:	fb02 f303 	mul.w	r3, r2, r3
 801e4ee:	ee07 3a90 	vmov	s15, r3
 801e4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e4f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e4fa:	697b      	ldr	r3, [r7, #20]
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	f000 8111 	beq.w	801e724 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e502:	69bb      	ldr	r3, [r7, #24]
 801e504:	2b02      	cmp	r3, #2
 801e506:	f000 8083 	beq.w	801e610 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e50a:	69bb      	ldr	r3, [r7, #24]
 801e50c:	2b02      	cmp	r3, #2
 801e50e:	f200 80a1 	bhi.w	801e654 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e512:	69bb      	ldr	r3, [r7, #24]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d003      	beq.n	801e520 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e518:	69bb      	ldr	r3, [r7, #24]
 801e51a:	2b01      	cmp	r3, #1
 801e51c:	d056      	beq.n	801e5cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e51e:	e099      	b.n	801e654 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e520:	4b88      	ldr	r3, [pc, #544]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	f003 0320 	and.w	r3, r3, #32
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d02d      	beq.n	801e588 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e52c:	4b85      	ldr	r3, [pc, #532]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	08db      	lsrs	r3, r3, #3
 801e532:	f003 0303 	and.w	r3, r3, #3
 801e536:	4a84      	ldr	r2, [pc, #528]	@ (801e748 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e538:	fa22 f303 	lsr.w	r3, r2, r3
 801e53c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e53e:	68bb      	ldr	r3, [r7, #8]
 801e540:	ee07 3a90 	vmov	s15, r3
 801e544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e548:	697b      	ldr	r3, [r7, #20]
 801e54a:	ee07 3a90 	vmov	s15, r3
 801e54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e556:	4b7b      	ldr	r3, [pc, #492]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e55e:	ee07 3a90 	vmov	s15, r3
 801e562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e566:	ed97 6a03 	vldr	s12, [r7, #12]
 801e56a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801e74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e586:	e087      	b.n	801e698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e588:	697b      	ldr	r3, [r7, #20]
 801e58a:	ee07 3a90 	vmov	s15, r3
 801e58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e592:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801e750 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e59a:	4b6a      	ldr	r3, [pc, #424]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e5a2:	ee07 3a90 	vmov	s15, r3
 801e5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 801e5ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801e74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e5ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e5ca:	e065      	b.n	801e698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e5cc:	697b      	ldr	r3, [r7, #20]
 801e5ce:	ee07 3a90 	vmov	s15, r3
 801e5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801e754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e5de:	4b59      	ldr	r3, [pc, #356]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e5e6:	ee07 3a90 	vmov	s15, r3
 801e5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 801e5f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801e74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e606:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e60e:	e043      	b.n	801e698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e610:	697b      	ldr	r3, [r7, #20]
 801e612:	ee07 3a90 	vmov	s15, r3
 801e616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e61a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801e758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e622:	4b48      	ldr	r3, [pc, #288]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e62a:	ee07 3a90 	vmov	s15, r3
 801e62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e632:	ed97 6a03 	vldr	s12, [r7, #12]
 801e636:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801e74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e652:	e021      	b.n	801e698 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e654:	697b      	ldr	r3, [r7, #20]
 801e656:	ee07 3a90 	vmov	s15, r3
 801e65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e65e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e666:	4b37      	ldr	r3, [pc, #220]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e66e:	ee07 3a90 	vmov	s15, r3
 801e672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e676:	ed97 6a03 	vldr	s12, [r7, #12]
 801e67a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801e74c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e696:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801e698:	4b2a      	ldr	r3, [pc, #168]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e69a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e69c:	0a5b      	lsrs	r3, r3, #9
 801e69e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6a2:	ee07 3a90 	vmov	s15, r3
 801e6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e6aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e6ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e6b2:	edd7 6a07 	vldr	s13, [r7, #28]
 801e6b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e6ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e6be:	ee17 2a90 	vmov	r2, s15
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801e6c6:	4b1f      	ldr	r3, [pc, #124]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e6ca:	0c1b      	lsrs	r3, r3, #16
 801e6cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6d0:	ee07 3a90 	vmov	s15, r3
 801e6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e6d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e6dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e6e0:	edd7 6a07 	vldr	s13, [r7, #28]
 801e6e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e6e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e6ec:	ee17 2a90 	vmov	r2, s15
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801e6f4:	4b13      	ldr	r3, [pc, #76]	@ (801e744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e6f8:	0e1b      	lsrs	r3, r3, #24
 801e6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6fe:	ee07 3a90 	vmov	s15, r3
 801e702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e70a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e70e:	edd7 6a07 	vldr	s13, [r7, #28]
 801e712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e71a:	ee17 2a90 	vmov	r2, s15
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801e722:	e008      	b.n	801e736 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	2200      	movs	r2, #0
 801e728:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	2200      	movs	r2, #0
 801e72e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	2200      	movs	r2, #0
 801e734:	609a      	str	r2, [r3, #8]
}
 801e736:	bf00      	nop
 801e738:	3724      	adds	r7, #36	@ 0x24
 801e73a:	46bd      	mov	sp, r7
 801e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e740:	4770      	bx	lr
 801e742:	bf00      	nop
 801e744:	58024400 	.word	0x58024400
 801e748:	03d09000 	.word	0x03d09000
 801e74c:	46000000 	.word	0x46000000
 801e750:	4c742400 	.word	0x4c742400
 801e754:	4a742400 	.word	0x4a742400
 801e758:	4bbebc20 	.word	0x4bbebc20

0801e75c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801e75c:	b480      	push	{r7}
 801e75e:	b089      	sub	sp, #36	@ 0x24
 801e760:	af00      	add	r7, sp, #0
 801e762:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e764:	4ba1      	ldr	r3, [pc, #644]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e768:	f003 0303 	and.w	r3, r3, #3
 801e76c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801e76e:	4b9f      	ldr	r3, [pc, #636]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e772:	0d1b      	lsrs	r3, r3, #20
 801e774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e778:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801e77a:	4b9c      	ldr	r3, [pc, #624]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e77e:	0a1b      	lsrs	r3, r3, #8
 801e780:	f003 0301 	and.w	r3, r3, #1
 801e784:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801e786:	4b99      	ldr	r3, [pc, #612]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e78a:	08db      	lsrs	r3, r3, #3
 801e78c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e790:	693a      	ldr	r2, [r7, #16]
 801e792:	fb02 f303 	mul.w	r3, r2, r3
 801e796:	ee07 3a90 	vmov	s15, r3
 801e79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e79e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801e7a2:	697b      	ldr	r3, [r7, #20]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	f000 8111 	beq.w	801e9cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801e7aa:	69bb      	ldr	r3, [r7, #24]
 801e7ac:	2b02      	cmp	r3, #2
 801e7ae:	f000 8083 	beq.w	801e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801e7b2:	69bb      	ldr	r3, [r7, #24]
 801e7b4:	2b02      	cmp	r3, #2
 801e7b6:	f200 80a1 	bhi.w	801e8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801e7ba:	69bb      	ldr	r3, [r7, #24]
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d003      	beq.n	801e7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801e7c0:	69bb      	ldr	r3, [r7, #24]
 801e7c2:	2b01      	cmp	r3, #1
 801e7c4:	d056      	beq.n	801e874 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801e7c6:	e099      	b.n	801e8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e7c8:	4b88      	ldr	r3, [pc, #544]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e7ca:	681b      	ldr	r3, [r3, #0]
 801e7cc:	f003 0320 	and.w	r3, r3, #32
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	d02d      	beq.n	801e830 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e7d4:	4b85      	ldr	r3, [pc, #532]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	08db      	lsrs	r3, r3, #3
 801e7da:	f003 0303 	and.w	r3, r3, #3
 801e7de:	4a84      	ldr	r2, [pc, #528]	@ (801e9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801e7e0:	fa22 f303 	lsr.w	r3, r2, r3
 801e7e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e7e6:	68bb      	ldr	r3, [r7, #8]
 801e7e8:	ee07 3a90 	vmov	s15, r3
 801e7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e7f0:	697b      	ldr	r3, [r7, #20]
 801e7f2:	ee07 3a90 	vmov	s15, r3
 801e7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e7fe:	4b7b      	ldr	r3, [pc, #492]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e806:	ee07 3a90 	vmov	s15, r3
 801e80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e80e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e812:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801e9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e81e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e826:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e82a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e82e:	e087      	b.n	801e940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e830:	697b      	ldr	r3, [r7, #20]
 801e832:	ee07 3a90 	vmov	s15, r3
 801e836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e83a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801e9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801e83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e842:	4b6a      	ldr	r3, [pc, #424]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e84a:	ee07 3a90 	vmov	s15, r3
 801e84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e852:	ed97 6a03 	vldr	s12, [r7, #12]
 801e856:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801e9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e872:	e065      	b.n	801e940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e874:	697b      	ldr	r3, [r7, #20]
 801e876:	ee07 3a90 	vmov	s15, r3
 801e87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e87e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801e9fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e886:	4b59      	ldr	r3, [pc, #356]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e88e:	ee07 3a90 	vmov	s15, r3
 801e892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e896:	ed97 6a03 	vldr	s12, [r7, #12]
 801e89a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801e9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e8a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e8b6:	e043      	b.n	801e940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e8b8:	697b      	ldr	r3, [r7, #20]
 801e8ba:	ee07 3a90 	vmov	s15, r3
 801e8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ea00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801e8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e8ca:	4b48      	ldr	r3, [pc, #288]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e8d2:	ee07 3a90 	vmov	s15, r3
 801e8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e8da:	ed97 6a03 	vldr	s12, [r7, #12]
 801e8de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801e9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e8ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e8f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e8fa:	e021      	b.n	801e940 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e8fc:	697b      	ldr	r3, [r7, #20]
 801e8fe:	ee07 3a90 	vmov	s15, r3
 801e902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e906:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e9fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e90e:	4b37      	ldr	r3, [pc, #220]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e916:	ee07 3a90 	vmov	s15, r3
 801e91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e91e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e922:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801e9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e92a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e92e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e936:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e93a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e93e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801e940:	4b2a      	ldr	r3, [pc, #168]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e944:	0a5b      	lsrs	r3, r3, #9
 801e946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e94a:	ee07 3a90 	vmov	s15, r3
 801e94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e956:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e95a:	edd7 6a07 	vldr	s13, [r7, #28]
 801e95e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e966:	ee17 2a90 	vmov	r2, s15
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801e96e:	4b1f      	ldr	r3, [pc, #124]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e972:	0c1b      	lsrs	r3, r3, #16
 801e974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e978:	ee07 3a90 	vmov	s15, r3
 801e97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e980:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e984:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e988:	edd7 6a07 	vldr	s13, [r7, #28]
 801e98c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e994:	ee17 2a90 	vmov	r2, s15
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801e99c:	4b13      	ldr	r3, [pc, #76]	@ (801e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e99e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e9a0:	0e1b      	lsrs	r3, r3, #24
 801e9a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e9a6:	ee07 3a90 	vmov	s15, r3
 801e9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e9b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e9b6:	edd7 6a07 	vldr	s13, [r7, #28]
 801e9ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e9c2:	ee17 2a90 	vmov	r2, s15
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801e9ca:	e008      	b.n	801e9de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801e9d2:	687b      	ldr	r3, [r7, #4]
 801e9d4:	2200      	movs	r2, #0
 801e9d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	2200      	movs	r2, #0
 801e9dc:	609a      	str	r2, [r3, #8]
}
 801e9de:	bf00      	nop
 801e9e0:	3724      	adds	r7, #36	@ 0x24
 801e9e2:	46bd      	mov	sp, r7
 801e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e8:	4770      	bx	lr
 801e9ea:	bf00      	nop
 801e9ec:	58024400 	.word	0x58024400
 801e9f0:	03d09000 	.word	0x03d09000
 801e9f4:	46000000 	.word	0x46000000
 801e9f8:	4c742400 	.word	0x4c742400
 801e9fc:	4a742400 	.word	0x4a742400
 801ea00:	4bbebc20 	.word	0x4bbebc20

0801ea04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801ea04:	b580      	push	{r7, lr}
 801ea06:	b084      	sub	sp, #16
 801ea08:	af00      	add	r7, sp, #0
 801ea0a:	6078      	str	r0, [r7, #4]
 801ea0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ea0e:	2300      	movs	r3, #0
 801ea10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ea12:	4b53      	ldr	r3, [pc, #332]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ea14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea16:	f003 0303 	and.w	r3, r3, #3
 801ea1a:	2b03      	cmp	r3, #3
 801ea1c:	d101      	bne.n	801ea22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801ea1e:	2301      	movs	r3, #1
 801ea20:	e099      	b.n	801eb56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801ea22:	4b4f      	ldr	r3, [pc, #316]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	4a4e      	ldr	r2, [pc, #312]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ea28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801ea2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ea2e:	f7fa ff23 	bl	8019878 <HAL_GetTick>
 801ea32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ea34:	e008      	b.n	801ea48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801ea36:	f7fa ff1f 	bl	8019878 <HAL_GetTick>
 801ea3a:	4602      	mov	r2, r0
 801ea3c:	68bb      	ldr	r3, [r7, #8]
 801ea3e:	1ad3      	subs	r3, r2, r3
 801ea40:	2b02      	cmp	r3, #2
 801ea42:	d901      	bls.n	801ea48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ea44:	2303      	movs	r3, #3
 801ea46:	e086      	b.n	801eb56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ea48:	4b45      	ldr	r3, [pc, #276]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d1f0      	bne.n	801ea36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801ea54:	4b42      	ldr	r3, [pc, #264]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ea56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	031b      	lsls	r3, r3, #12
 801ea62:	493f      	ldr	r1, [pc, #252]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ea64:	4313      	orrs	r3, r2
 801ea66:	628b      	str	r3, [r1, #40]	@ 0x28
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	685b      	ldr	r3, [r3, #4]
 801ea6c:	3b01      	subs	r3, #1
 801ea6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	689b      	ldr	r3, [r3, #8]
 801ea76:	3b01      	subs	r3, #1
 801ea78:	025b      	lsls	r3, r3, #9
 801ea7a:	b29b      	uxth	r3, r3
 801ea7c:	431a      	orrs	r2, r3
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	68db      	ldr	r3, [r3, #12]
 801ea82:	3b01      	subs	r3, #1
 801ea84:	041b      	lsls	r3, r3, #16
 801ea86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801ea8a:	431a      	orrs	r2, r3
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	691b      	ldr	r3, [r3, #16]
 801ea90:	3b01      	subs	r3, #1
 801ea92:	061b      	lsls	r3, r3, #24
 801ea94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ea98:	4931      	ldr	r1, [pc, #196]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ea9a:	4313      	orrs	r3, r2
 801ea9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801ea9e:	4b30      	ldr	r3, [pc, #192]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eaa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	695b      	ldr	r3, [r3, #20]
 801eaaa:	492d      	ldr	r1, [pc, #180]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eaac:	4313      	orrs	r3, r2
 801eaae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801eab0:	4b2b      	ldr	r3, [pc, #172]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eab4:	f023 0220 	bic.w	r2, r3, #32
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	699b      	ldr	r3, [r3, #24]
 801eabc:	4928      	ldr	r1, [pc, #160]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eabe:	4313      	orrs	r3, r2
 801eac0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801eac2:	4b27      	ldr	r3, [pc, #156]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eac6:	4a26      	ldr	r2, [pc, #152]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eac8:	f023 0310 	bic.w	r3, r3, #16
 801eacc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801eace:	4b24      	ldr	r3, [pc, #144]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801ead0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ead2:	4b24      	ldr	r3, [pc, #144]	@ (801eb64 <RCCEx_PLL2_Config+0x160>)
 801ead4:	4013      	ands	r3, r2
 801ead6:	687a      	ldr	r2, [r7, #4]
 801ead8:	69d2      	ldr	r2, [r2, #28]
 801eada:	00d2      	lsls	r2, r2, #3
 801eadc:	4920      	ldr	r1, [pc, #128]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eade:	4313      	orrs	r3, r2
 801eae0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801eae2:	4b1f      	ldr	r3, [pc, #124]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eae6:	4a1e      	ldr	r2, [pc, #120]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eae8:	f043 0310 	orr.w	r3, r3, #16
 801eaec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801eaee:	683b      	ldr	r3, [r7, #0]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d106      	bne.n	801eb02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801eaf4:	4b1a      	ldr	r3, [pc, #104]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eaf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eaf8:	4a19      	ldr	r2, [pc, #100]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eafa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801eafe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801eb00:	e00f      	b.n	801eb22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801eb02:	683b      	ldr	r3, [r7, #0]
 801eb04:	2b01      	cmp	r3, #1
 801eb06:	d106      	bne.n	801eb16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801eb08:	4b15      	ldr	r3, [pc, #84]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb0c:	4a14      	ldr	r2, [pc, #80]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eb0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eb12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801eb14:	e005      	b.n	801eb22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801eb16:	4b12      	ldr	r3, [pc, #72]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb1a:	4a11      	ldr	r2, [pc, #68]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eb1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801eb20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801eb22:	4b0f      	ldr	r3, [pc, #60]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eb24:	681b      	ldr	r3, [r3, #0]
 801eb26:	4a0e      	ldr	r2, [pc, #56]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eb28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801eb2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eb2e:	f7fa fea3 	bl	8019878 <HAL_GetTick>
 801eb32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801eb34:	e008      	b.n	801eb48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801eb36:	f7fa fe9f 	bl	8019878 <HAL_GetTick>
 801eb3a:	4602      	mov	r2, r0
 801eb3c:	68bb      	ldr	r3, [r7, #8]
 801eb3e:	1ad3      	subs	r3, r2, r3
 801eb40:	2b02      	cmp	r3, #2
 801eb42:	d901      	bls.n	801eb48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801eb44:	2303      	movs	r3, #3
 801eb46:	e006      	b.n	801eb56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801eb48:	4b05      	ldr	r3, [pc, #20]	@ (801eb60 <RCCEx_PLL2_Config+0x15c>)
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	d0f0      	beq.n	801eb36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801eb54:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb56:	4618      	mov	r0, r3
 801eb58:	3710      	adds	r7, #16
 801eb5a:	46bd      	mov	sp, r7
 801eb5c:	bd80      	pop	{r7, pc}
 801eb5e:	bf00      	nop
 801eb60:	58024400 	.word	0x58024400
 801eb64:	ffff0007 	.word	0xffff0007

0801eb68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801eb68:	b580      	push	{r7, lr}
 801eb6a:	b084      	sub	sp, #16
 801eb6c:	af00      	add	r7, sp, #0
 801eb6e:	6078      	str	r0, [r7, #4]
 801eb70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801eb72:	2300      	movs	r3, #0
 801eb74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801eb76:	4b53      	ldr	r3, [pc, #332]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801eb78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb7a:	f003 0303 	and.w	r3, r3, #3
 801eb7e:	2b03      	cmp	r3, #3
 801eb80:	d101      	bne.n	801eb86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801eb82:	2301      	movs	r3, #1
 801eb84:	e099      	b.n	801ecba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801eb86:	4b4f      	ldr	r3, [pc, #316]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801eb88:	681b      	ldr	r3, [r3, #0]
 801eb8a:	4a4e      	ldr	r2, [pc, #312]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801eb8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801eb90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eb92:	f7fa fe71 	bl	8019878 <HAL_GetTick>
 801eb96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801eb98:	e008      	b.n	801ebac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801eb9a:	f7fa fe6d 	bl	8019878 <HAL_GetTick>
 801eb9e:	4602      	mov	r2, r0
 801eba0:	68bb      	ldr	r3, [r7, #8]
 801eba2:	1ad3      	subs	r3, r2, r3
 801eba4:	2b02      	cmp	r3, #2
 801eba6:	d901      	bls.n	801ebac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801eba8:	2303      	movs	r3, #3
 801ebaa:	e086      	b.n	801ecba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ebac:	4b45      	ldr	r3, [pc, #276]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d1f0      	bne.n	801eb9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801ebb8:	4b42      	ldr	r3, [pc, #264]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ebba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebbc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	681b      	ldr	r3, [r3, #0]
 801ebc4:	051b      	lsls	r3, r3, #20
 801ebc6:	493f      	ldr	r1, [pc, #252]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ebc8:	4313      	orrs	r3, r2
 801ebca:	628b      	str	r3, [r1, #40]	@ 0x28
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	685b      	ldr	r3, [r3, #4]
 801ebd0:	3b01      	subs	r3, #1
 801ebd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	689b      	ldr	r3, [r3, #8]
 801ebda:	3b01      	subs	r3, #1
 801ebdc:	025b      	lsls	r3, r3, #9
 801ebde:	b29b      	uxth	r3, r3
 801ebe0:	431a      	orrs	r2, r3
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	68db      	ldr	r3, [r3, #12]
 801ebe6:	3b01      	subs	r3, #1
 801ebe8:	041b      	lsls	r3, r3, #16
 801ebea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801ebee:	431a      	orrs	r2, r3
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	691b      	ldr	r3, [r3, #16]
 801ebf4:	3b01      	subs	r3, #1
 801ebf6:	061b      	lsls	r3, r3, #24
 801ebf8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ebfc:	4931      	ldr	r1, [pc, #196]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ebfe:	4313      	orrs	r3, r2
 801ec00:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801ec02:	4b30      	ldr	r3, [pc, #192]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	695b      	ldr	r3, [r3, #20]
 801ec0e:	492d      	ldr	r1, [pc, #180]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec10:	4313      	orrs	r3, r2
 801ec12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801ec14:	4b2b      	ldr	r3, [pc, #172]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	699b      	ldr	r3, [r3, #24]
 801ec20:	4928      	ldr	r1, [pc, #160]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec22:	4313      	orrs	r3, r2
 801ec24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801ec26:	4b27      	ldr	r3, [pc, #156]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec2a:	4a26      	ldr	r2, [pc, #152]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ec30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801ec32:	4b24      	ldr	r3, [pc, #144]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ec36:	4b24      	ldr	r3, [pc, #144]	@ (801ecc8 <RCCEx_PLL3_Config+0x160>)
 801ec38:	4013      	ands	r3, r2
 801ec3a:	687a      	ldr	r2, [r7, #4]
 801ec3c:	69d2      	ldr	r2, [r2, #28]
 801ec3e:	00d2      	lsls	r2, r2, #3
 801ec40:	4920      	ldr	r1, [pc, #128]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec42:	4313      	orrs	r3, r2
 801ec44:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801ec46:	4b1f      	ldr	r3, [pc, #124]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec4a:	4a1e      	ldr	r2, [pc, #120]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ec50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801ec52:	683b      	ldr	r3, [r7, #0]
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d106      	bne.n	801ec66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801ec58:	4b1a      	ldr	r3, [pc, #104]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec5c:	4a19      	ldr	r2, [pc, #100]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801ec62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ec64:	e00f      	b.n	801ec86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	2b01      	cmp	r3, #1
 801ec6a:	d106      	bne.n	801ec7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801ec6c:	4b15      	ldr	r3, [pc, #84]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec70:	4a14      	ldr	r2, [pc, #80]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801ec76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ec78:	e005      	b.n	801ec86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801ec7a:	4b12      	ldr	r3, [pc, #72]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec7e:	4a11      	ldr	r2, [pc, #68]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ec84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801ec86:	4b0f      	ldr	r3, [pc, #60]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	4a0e      	ldr	r2, [pc, #56]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ec8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801ec90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ec92:	f7fa fdf1 	bl	8019878 <HAL_GetTick>
 801ec96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801ec98:	e008      	b.n	801ecac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ec9a:	f7fa fded 	bl	8019878 <HAL_GetTick>
 801ec9e:	4602      	mov	r2, r0
 801eca0:	68bb      	ldr	r3, [r7, #8]
 801eca2:	1ad3      	subs	r3, r2, r3
 801eca4:	2b02      	cmp	r3, #2
 801eca6:	d901      	bls.n	801ecac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801eca8:	2303      	movs	r3, #3
 801ecaa:	e006      	b.n	801ecba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801ecac:	4b05      	ldr	r3, [pc, #20]	@ (801ecc4 <RCCEx_PLL3_Config+0x15c>)
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	d0f0      	beq.n	801ec9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801ecb8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ecba:	4618      	mov	r0, r3
 801ecbc:	3710      	adds	r7, #16
 801ecbe:	46bd      	mov	sp, r7
 801ecc0:	bd80      	pop	{r7, pc}
 801ecc2:	bf00      	nop
 801ecc4:	58024400 	.word	0x58024400
 801ecc8:	ffff0007 	.word	0xffff0007

0801eccc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b084      	sub	sp, #16
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d101      	bne.n	801ecde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801ecda:	2301      	movs	r3, #1
 801ecdc:	e10f      	b.n	801eefe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	2200      	movs	r2, #0
 801ece2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	4a87      	ldr	r2, [pc, #540]	@ (801ef08 <HAL_SPI_Init+0x23c>)
 801ecea:	4293      	cmp	r3, r2
 801ecec:	d00f      	beq.n	801ed0e <HAL_SPI_Init+0x42>
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	681b      	ldr	r3, [r3, #0]
 801ecf2:	4a86      	ldr	r2, [pc, #536]	@ (801ef0c <HAL_SPI_Init+0x240>)
 801ecf4:	4293      	cmp	r3, r2
 801ecf6:	d00a      	beq.n	801ed0e <HAL_SPI_Init+0x42>
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	4a84      	ldr	r2, [pc, #528]	@ (801ef10 <HAL_SPI_Init+0x244>)
 801ecfe:	4293      	cmp	r3, r2
 801ed00:	d005      	beq.n	801ed0e <HAL_SPI_Init+0x42>
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	68db      	ldr	r3, [r3, #12]
 801ed06:	2b0f      	cmp	r3, #15
 801ed08:	d901      	bls.n	801ed0e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801ed0a:	2301      	movs	r3, #1
 801ed0c:	e0f7      	b.n	801eefe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801ed0e:	6878      	ldr	r0, [r7, #4]
 801ed10:	f000 fbba 	bl	801f488 <SPI_GetPacketSize>
 801ed14:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	4a7b      	ldr	r2, [pc, #492]	@ (801ef08 <HAL_SPI_Init+0x23c>)
 801ed1c:	4293      	cmp	r3, r2
 801ed1e:	d00c      	beq.n	801ed3a <HAL_SPI_Init+0x6e>
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	4a79      	ldr	r2, [pc, #484]	@ (801ef0c <HAL_SPI_Init+0x240>)
 801ed26:	4293      	cmp	r3, r2
 801ed28:	d007      	beq.n	801ed3a <HAL_SPI_Init+0x6e>
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	4a78      	ldr	r2, [pc, #480]	@ (801ef10 <HAL_SPI_Init+0x244>)
 801ed30:	4293      	cmp	r3, r2
 801ed32:	d002      	beq.n	801ed3a <HAL_SPI_Init+0x6e>
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	2b08      	cmp	r3, #8
 801ed38:	d811      	bhi.n	801ed5e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801ed3e:	4a72      	ldr	r2, [pc, #456]	@ (801ef08 <HAL_SPI_Init+0x23c>)
 801ed40:	4293      	cmp	r3, r2
 801ed42:	d009      	beq.n	801ed58 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	4a70      	ldr	r2, [pc, #448]	@ (801ef0c <HAL_SPI_Init+0x240>)
 801ed4a:	4293      	cmp	r3, r2
 801ed4c:	d004      	beq.n	801ed58 <HAL_SPI_Init+0x8c>
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	4a6f      	ldr	r2, [pc, #444]	@ (801ef10 <HAL_SPI_Init+0x244>)
 801ed54:	4293      	cmp	r3, r2
 801ed56:	d104      	bne.n	801ed62 <HAL_SPI_Init+0x96>
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	2b10      	cmp	r3, #16
 801ed5c:	d901      	bls.n	801ed62 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801ed5e:	2301      	movs	r3, #1
 801ed60:	e0cd      	b.n	801eefe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801ed68:	b2db      	uxtb	r3, r3
 801ed6a:	2b00      	cmp	r3, #0
 801ed6c:	d106      	bne.n	801ed7c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	2200      	movs	r2, #0
 801ed72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801ed76:	6878      	ldr	r0, [r7, #4]
 801ed78:	f7e2 ffea 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	2202      	movs	r2, #2
 801ed80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	681a      	ldr	r2, [r3, #0]
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	f022 0201 	bic.w	r2, r2, #1
 801ed92:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	681b      	ldr	r3, [r3, #0]
 801ed98:	689b      	ldr	r3, [r3, #8]
 801ed9a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801ed9e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	699b      	ldr	r3, [r3, #24]
 801eda4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801eda8:	d119      	bne.n	801edde <HAL_SPI_Init+0x112>
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	685b      	ldr	r3, [r3, #4]
 801edae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801edb2:	d103      	bne.n	801edbc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d008      	beq.n	801edce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d10c      	bne.n	801edde <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801edc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801edcc:	d107      	bne.n	801edde <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	681a      	ldr	r2, [r3, #0]
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801eddc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	685b      	ldr	r3, [r3, #4]
 801ede2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d00f      	beq.n	801ee0a <HAL_SPI_Init+0x13e>
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	68db      	ldr	r3, [r3, #12]
 801edee:	2b06      	cmp	r3, #6
 801edf0:	d90b      	bls.n	801ee0a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	681b      	ldr	r3, [r3, #0]
 801edf8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	430a      	orrs	r2, r1
 801ee06:	601a      	str	r2, [r3, #0]
 801ee08:	e007      	b.n	801ee1a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	681a      	ldr	r2, [r3, #0]
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ee18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	69da      	ldr	r2, [r3, #28]
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee22:	431a      	orrs	r2, r3
 801ee24:	68bb      	ldr	r3, [r7, #8]
 801ee26:	431a      	orrs	r2, r3
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ee2c:	ea42 0103 	orr.w	r1, r2, r3
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	68da      	ldr	r2, [r3, #12]
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	681b      	ldr	r3, [r3, #0]
 801ee38:	430a      	orrs	r2, r1
 801ee3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ee44:	431a      	orrs	r2, r3
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee4a:	431a      	orrs	r2, r3
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	699b      	ldr	r3, [r3, #24]
 801ee50:	431a      	orrs	r2, r3
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	691b      	ldr	r3, [r3, #16]
 801ee56:	431a      	orrs	r2, r3
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	695b      	ldr	r3, [r3, #20]
 801ee5c:	431a      	orrs	r2, r3
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	6a1b      	ldr	r3, [r3, #32]
 801ee62:	431a      	orrs	r2, r3
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	685b      	ldr	r3, [r3, #4]
 801ee68:	431a      	orrs	r2, r3
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ee6e:	431a      	orrs	r2, r3
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	689b      	ldr	r3, [r3, #8]
 801ee74:	431a      	orrs	r2, r3
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ee7a:	ea42 0103 	orr.w	r1, r2, r3
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	430a      	orrs	r2, r1
 801ee88:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	685b      	ldr	r3, [r3, #4]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d113      	bne.n	801eeba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	681b      	ldr	r3, [r3, #0]
 801ee96:	689b      	ldr	r3, [r3, #8]
 801ee98:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801eea4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	689b      	ldr	r3, [r3, #8]
 801eeac:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801eeb8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	f022 0201 	bic.w	r2, r2, #1
 801eec8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	685b      	ldr	r3, [r3, #4]
 801eece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d00a      	beq.n	801eeec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	68db      	ldr	r3, [r3, #12]
 801eedc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	681b      	ldr	r3, [r3, #0]
 801eee8:	430a      	orrs	r2, r1
 801eeea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	2200      	movs	r2, #0
 801eef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	2201      	movs	r2, #1
 801eef8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801eefc:	2300      	movs	r3, #0
}
 801eefe:	4618      	mov	r0, r3
 801ef00:	3710      	adds	r7, #16
 801ef02:	46bd      	mov	sp, r7
 801ef04:	bd80      	pop	{r7, pc}
 801ef06:	bf00      	nop
 801ef08:	40013000 	.word	0x40013000
 801ef0c:	40003800 	.word	0x40003800
 801ef10:	40003c00 	.word	0x40003c00

0801ef14 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801ef14:	b580      	push	{r7, lr}
 801ef16:	b08a      	sub	sp, #40	@ 0x28
 801ef18:	af00      	add	r7, sp, #0
 801ef1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	691b      	ldr	r3, [r3, #16]
 801ef22:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	695b      	ldr	r3, [r3, #20]
 801ef2a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801ef2c:	6a3a      	ldr	r2, [r7, #32]
 801ef2e:	69fb      	ldr	r3, [r7, #28]
 801ef30:	4013      	ands	r3, r2
 801ef32:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	689b      	ldr	r3, [r3, #8]
 801ef3a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801ef3c:	2300      	movs	r3, #0
 801ef3e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801ef46:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	3330      	adds	r3, #48	@ 0x30
 801ef4e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801ef50:	69fb      	ldr	r3, [r7, #28]
 801ef52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d010      	beq.n	801ef7c <HAL_SPI_IRQHandler+0x68>
 801ef5a:	6a3b      	ldr	r3, [r7, #32]
 801ef5c:	f003 0308 	and.w	r3, r3, #8
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d00b      	beq.n	801ef7c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	681b      	ldr	r3, [r3, #0]
 801ef68:	699a      	ldr	r2, [r3, #24]
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ef72:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801ef74:	6878      	ldr	r0, [r7, #4]
 801ef76:	f000 f9c3 	bl	801f300 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801ef7a:	e192      	b.n	801f2a2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801ef7c:	69bb      	ldr	r3, [r7, #24]
 801ef7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d113      	bne.n	801efae <HAL_SPI_IRQHandler+0x9a>
 801ef86:	69bb      	ldr	r3, [r7, #24]
 801ef88:	f003 0320 	and.w	r3, r3, #32
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d10e      	bne.n	801efae <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801ef90:	69bb      	ldr	r3, [r7, #24]
 801ef92:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d009      	beq.n	801efae <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef9e:	6878      	ldr	r0, [r7, #4]
 801efa0:	4798      	blx	r3
    hspi->RxISR(hspi);
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efa6:	6878      	ldr	r0, [r7, #4]
 801efa8:	4798      	blx	r3
    handled = 1UL;
 801efaa:	2301      	movs	r3, #1
 801efac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801efae:	69bb      	ldr	r3, [r7, #24]
 801efb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d10f      	bne.n	801efd8 <HAL_SPI_IRQHandler+0xc4>
 801efb8:	69bb      	ldr	r3, [r7, #24]
 801efba:	f003 0301 	and.w	r3, r3, #1
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d00a      	beq.n	801efd8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801efc2:	69bb      	ldr	r3, [r7, #24]
 801efc4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801efc8:	2b00      	cmp	r3, #0
 801efca:	d105      	bne.n	801efd8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efd0:	6878      	ldr	r0, [r7, #4]
 801efd2:	4798      	blx	r3
    handled = 1UL;
 801efd4:	2301      	movs	r3, #1
 801efd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801efd8:	69bb      	ldr	r3, [r7, #24]
 801efda:	f003 0320 	and.w	r3, r3, #32
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d10f      	bne.n	801f002 <HAL_SPI_IRQHandler+0xee>
 801efe2:	69bb      	ldr	r3, [r7, #24]
 801efe4:	f003 0302 	and.w	r3, r3, #2
 801efe8:	2b00      	cmp	r3, #0
 801efea:	d00a      	beq.n	801f002 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801efec:	69bb      	ldr	r3, [r7, #24]
 801efee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d105      	bne.n	801f002 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801effa:	6878      	ldr	r0, [r7, #4]
 801effc:	4798      	blx	r3
    handled = 1UL;
 801effe:	2301      	movs	r3, #1
 801f000:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801f002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f004:	2b00      	cmp	r3, #0
 801f006:	f040 8147 	bne.w	801f298 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801f00a:	69bb      	ldr	r3, [r7, #24]
 801f00c:	f003 0308 	and.w	r3, r3, #8
 801f010:	2b00      	cmp	r3, #0
 801f012:	f000 808b 	beq.w	801f12c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	699a      	ldr	r2, [r3, #24]
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	f042 0208 	orr.w	r2, r2, #8
 801f024:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	699a      	ldr	r2, [r3, #24]
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	f042 0210 	orr.w	r2, r2, #16
 801f034:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	699a      	ldr	r2, [r3, #24]
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f044:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	691a      	ldr	r2, [r3, #16]
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	f022 0208 	bic.w	r2, r2, #8
 801f054:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	689b      	ldr	r3, [r3, #8]
 801f05c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f060:	2b00      	cmp	r3, #0
 801f062:	d13d      	bne.n	801f0e0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801f064:	e036      	b.n	801f0d4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	68db      	ldr	r3, [r3, #12]
 801f06a:	2b0f      	cmp	r3, #15
 801f06c:	d90b      	bls.n	801f086 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	681a      	ldr	r2, [r3, #0]
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f076:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801f078:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f07e:	1d1a      	adds	r2, r3, #4
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	665a      	str	r2, [r3, #100]	@ 0x64
 801f084:	e01d      	b.n	801f0c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	68db      	ldr	r3, [r3, #12]
 801f08a:	2b07      	cmp	r3, #7
 801f08c:	d90b      	bls.n	801f0a6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f092:	68fa      	ldr	r2, [r7, #12]
 801f094:	8812      	ldrh	r2, [r2, #0]
 801f096:	b292      	uxth	r2, r2
 801f098:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f09e:	1c9a      	adds	r2, r3, #2
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	665a      	str	r2, [r3, #100]	@ 0x64
 801f0a4:	e00d      	b.n	801f0c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	681b      	ldr	r3, [r3, #0]
 801f0aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f0b2:	7812      	ldrb	r2, [r2, #0]
 801f0b4:	b2d2      	uxtb	r2, r2
 801f0b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f0bc:	1c5a      	adds	r2, r3, #1
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f0c8:	b29b      	uxth	r3, r3
 801f0ca:	3b01      	subs	r3, #1
 801f0cc:	b29a      	uxth	r2, r3
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f0da:	b29b      	uxth	r3, r3
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d1c2      	bne.n	801f066 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801f0e0:	6878      	ldr	r0, [r7, #4]
 801f0e2:	f000 f931 	bl	801f348 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	2201      	movs	r2, #1
 801f0ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d003      	beq.n	801f100 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801f0f8:	6878      	ldr	r0, [r7, #4]
 801f0fa:	f000 f8f7 	bl	801f2ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801f0fe:	e0d0      	b.n	801f2a2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801f100:	7cfb      	ldrb	r3, [r7, #19]
 801f102:	2b05      	cmp	r3, #5
 801f104:	d103      	bne.n	801f10e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801f106:	6878      	ldr	r0, [r7, #4]
 801f108:	f000 f8e6 	bl	801f2d8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801f10c:	e0c6      	b.n	801f29c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801f10e:	7cfb      	ldrb	r3, [r7, #19]
 801f110:	2b04      	cmp	r3, #4
 801f112:	d103      	bne.n	801f11c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801f114:	6878      	ldr	r0, [r7, #4]
 801f116:	f000 f8d5 	bl	801f2c4 <HAL_SPI_RxCpltCallback>
    return;
 801f11a:	e0bf      	b.n	801f29c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801f11c:	7cfb      	ldrb	r3, [r7, #19]
 801f11e:	2b03      	cmp	r3, #3
 801f120:	f040 80bc 	bne.w	801f29c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801f124:	6878      	ldr	r0, [r7, #4]
 801f126:	f000 f8c3 	bl	801f2b0 <HAL_SPI_TxCpltCallback>
    return;
 801f12a:	e0b7      	b.n	801f29c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801f12c:	69bb      	ldr	r3, [r7, #24]
 801f12e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801f132:	2b00      	cmp	r3, #0
 801f134:	f000 80b5 	beq.w	801f2a2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801f138:	69bb      	ldr	r3, [r7, #24]
 801f13a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f13e:	2b00      	cmp	r3, #0
 801f140:	d00f      	beq.n	801f162 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f148:	f043 0204 	orr.w	r2, r3, #4
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	699a      	ldr	r2, [r3, #24]
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f160:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801f162:	69bb      	ldr	r3, [r7, #24]
 801f164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d00f      	beq.n	801f18c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f172:	f043 0201 	orr.w	r2, r3, #1
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	699a      	ldr	r2, [r3, #24]
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f18a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801f18c:	69bb      	ldr	r3, [r7, #24]
 801f18e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f192:	2b00      	cmp	r3, #0
 801f194:	d00f      	beq.n	801f1b6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f19c:	f043 0208 	orr.w	r2, r3, #8
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	681b      	ldr	r3, [r3, #0]
 801f1aa:	699a      	ldr	r2, [r3, #24]
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f1b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801f1b6:	69bb      	ldr	r3, [r7, #24]
 801f1b8:	f003 0320 	and.w	r3, r3, #32
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	d00f      	beq.n	801f1e0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f1c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	699a      	ldr	r2, [r3, #24]
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	f042 0220 	orr.w	r2, r2, #32
 801f1de:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d05a      	beq.n	801f2a0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	681a      	ldr	r2, [r3, #0]
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	f022 0201 	bic.w	r2, r2, #1
 801f1f8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	681b      	ldr	r3, [r3, #0]
 801f1fe:	6919      	ldr	r1, [r3, #16]
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	681a      	ldr	r2, [r3, #0]
 801f204:	4b28      	ldr	r3, [pc, #160]	@ (801f2a8 <HAL_SPI_IRQHandler+0x394>)
 801f206:	400b      	ands	r3, r1
 801f208:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f20a:	697b      	ldr	r3, [r7, #20]
 801f20c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f210:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801f214:	d138      	bne.n	801f288 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	689a      	ldr	r2, [r3, #8]
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f224:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d013      	beq.n	801f256 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f232:	4a1e      	ldr	r2, [pc, #120]	@ (801f2ac <HAL_SPI_IRQHandler+0x398>)
 801f234:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f23a:	4618      	mov	r0, r3
 801f23c:	f7fb f850 	bl	801a2e0 <HAL_DMA_Abort_IT>
 801f240:	4603      	mov	r3, r0
 801f242:	2b00      	cmp	r3, #0
 801f244:	d007      	beq.n	801f256 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f24c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d020      	beq.n	801f2a0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f262:	4a12      	ldr	r2, [pc, #72]	@ (801f2ac <HAL_SPI_IRQHandler+0x398>)
 801f264:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f26a:	4618      	mov	r0, r3
 801f26c:	f7fb f838 	bl	801a2e0 <HAL_DMA_Abort_IT>
 801f270:	4603      	mov	r3, r0
 801f272:	2b00      	cmp	r3, #0
 801f274:	d014      	beq.n	801f2a0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f27c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801f286:	e00b      	b.n	801f2a0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	2201      	movs	r2, #1
 801f28c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801f290:	6878      	ldr	r0, [r7, #4]
 801f292:	f000 f82b 	bl	801f2ec <HAL_SPI_ErrorCallback>
    return;
 801f296:	e003      	b.n	801f2a0 <HAL_SPI_IRQHandler+0x38c>
    return;
 801f298:	bf00      	nop
 801f29a:	e002      	b.n	801f2a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f29c:	bf00      	nop
 801f29e:	e000      	b.n	801f2a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f2a0:	bf00      	nop
  }
}
 801f2a2:	3728      	adds	r7, #40	@ 0x28
 801f2a4:	46bd      	mov	sp, r7
 801f2a6:	bd80      	pop	{r7, pc}
 801f2a8:	fffffc94 	.word	0xfffffc94
 801f2ac:	0801f315 	.word	0x0801f315

0801f2b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f2b0:	b480      	push	{r7}
 801f2b2:	b083      	sub	sp, #12
 801f2b4:	af00      	add	r7, sp, #0
 801f2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801f2b8:	bf00      	nop
 801f2ba:	370c      	adds	r7, #12
 801f2bc:	46bd      	mov	sp, r7
 801f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2c2:	4770      	bx	lr

0801f2c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f2c4:	b480      	push	{r7}
 801f2c6:	b083      	sub	sp, #12
 801f2c8:	af00      	add	r7, sp, #0
 801f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801f2cc:	bf00      	nop
 801f2ce:	370c      	adds	r7, #12
 801f2d0:	46bd      	mov	sp, r7
 801f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2d6:	4770      	bx	lr

0801f2d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f2d8:	b480      	push	{r7}
 801f2da:	b083      	sub	sp, #12
 801f2dc:	af00      	add	r7, sp, #0
 801f2de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801f2e0:	bf00      	nop
 801f2e2:	370c      	adds	r7, #12
 801f2e4:	46bd      	mov	sp, r7
 801f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ea:	4770      	bx	lr

0801f2ec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f2ec:	b480      	push	{r7}
 801f2ee:	b083      	sub	sp, #12
 801f2f0:	af00      	add	r7, sp, #0
 801f2f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801f2f4:	bf00      	nop
 801f2f6:	370c      	adds	r7, #12
 801f2f8:	46bd      	mov	sp, r7
 801f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2fe:	4770      	bx	lr

0801f300 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f300:	b480      	push	{r7}
 801f302:	b083      	sub	sp, #12
 801f304:	af00      	add	r7, sp, #0
 801f306:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801f308:	bf00      	nop
 801f30a:	370c      	adds	r7, #12
 801f30c:	46bd      	mov	sp, r7
 801f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f312:	4770      	bx	lr

0801f314 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f314:	b580      	push	{r7, lr}
 801f316:	b084      	sub	sp, #16
 801f318:	af00      	add	r7, sp, #0
 801f31a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f320:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	2200      	movs	r2, #0
 801f326:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801f32a:	68fb      	ldr	r3, [r7, #12]
 801f32c:	2200      	movs	r2, #0
 801f32e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801f332:	68fb      	ldr	r3, [r7, #12]
 801f334:	2201      	movs	r2, #1
 801f336:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801f33a:	68f8      	ldr	r0, [r7, #12]
 801f33c:	f7ff ffd6 	bl	801f2ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801f340:	bf00      	nop
 801f342:	3710      	adds	r7, #16
 801f344:	46bd      	mov	sp, r7
 801f346:	bd80      	pop	{r7, pc}

0801f348 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801f348:	b480      	push	{r7}
 801f34a:	b085      	sub	sp, #20
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	695b      	ldr	r3, [r3, #20]
 801f356:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	699a      	ldr	r2, [r3, #24]
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	f042 0208 	orr.w	r2, r2, #8
 801f366:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	681b      	ldr	r3, [r3, #0]
 801f36c:	699a      	ldr	r2, [r3, #24]
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	f042 0210 	orr.w	r2, r2, #16
 801f376:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	681a      	ldr	r2, [r3, #0]
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	f022 0201 	bic.w	r2, r2, #1
 801f386:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	6919      	ldr	r1, [r3, #16]
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	681a      	ldr	r2, [r3, #0]
 801f392:	4b3c      	ldr	r3, [pc, #240]	@ (801f484 <SPI_CloseTransfer+0x13c>)
 801f394:	400b      	ands	r3, r1
 801f396:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	689a      	ldr	r2, [r3, #8]
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f3a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f3ae:	b2db      	uxtb	r3, r3
 801f3b0:	2b04      	cmp	r3, #4
 801f3b2:	d014      	beq.n	801f3de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	f003 0320 	and.w	r3, r3, #32
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d00f      	beq.n	801f3de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f3c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	699a      	ldr	r2, [r3, #24]
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	f042 0220 	orr.w	r2, r2, #32
 801f3dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f3e4:	b2db      	uxtb	r3, r3
 801f3e6:	2b03      	cmp	r3, #3
 801f3e8:	d014      	beq.n	801f414 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801f3ea:	68fb      	ldr	r3, [r7, #12]
 801f3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	d00f      	beq.n	801f414 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f3fa:	f043 0204 	orr.w	r2, r3, #4
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	699a      	ldr	r2, [r3, #24]
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f412:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	d00f      	beq.n	801f43e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f424:	f043 0201 	orr.w	r2, r3, #1
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	681b      	ldr	r3, [r3, #0]
 801f432:	699a      	ldr	r2, [r3, #24]
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f43c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f444:	2b00      	cmp	r3, #0
 801f446:	d00f      	beq.n	801f468 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f44e:	f043 0208 	orr.w	r2, r3, #8
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	699a      	ldr	r2, [r3, #24]
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f466:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	2200      	movs	r2, #0
 801f46c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	2200      	movs	r2, #0
 801f474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801f478:	bf00      	nop
 801f47a:	3714      	adds	r7, #20
 801f47c:	46bd      	mov	sp, r7
 801f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f482:	4770      	bx	lr
 801f484:	fffffc90 	.word	0xfffffc90

0801f488 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801f488:	b480      	push	{r7}
 801f48a:	b085      	sub	sp, #20
 801f48c:	af00      	add	r7, sp, #0
 801f48e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f494:	095b      	lsrs	r3, r3, #5
 801f496:	3301      	adds	r3, #1
 801f498:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	68db      	ldr	r3, [r3, #12]
 801f49e:	3301      	adds	r3, #1
 801f4a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801f4a2:	68bb      	ldr	r3, [r7, #8]
 801f4a4:	3307      	adds	r3, #7
 801f4a6:	08db      	lsrs	r3, r3, #3
 801f4a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801f4aa:	68bb      	ldr	r3, [r7, #8]
 801f4ac:	68fa      	ldr	r2, [r7, #12]
 801f4ae:	fb02 f303 	mul.w	r3, r2, r3
}
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	3714      	adds	r7, #20
 801f4b6:	46bd      	mov	sp, r7
 801f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4bc:	4770      	bx	lr

0801f4be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f4be:	b580      	push	{r7, lr}
 801f4c0:	b082      	sub	sp, #8
 801f4c2:	af00      	add	r7, sp, #0
 801f4c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d101      	bne.n	801f4d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f4cc:	2301      	movs	r3, #1
 801f4ce:	e049      	b.n	801f564 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f4d6:	b2db      	uxtb	r3, r3
 801f4d8:	2b00      	cmp	r3, #0
 801f4da:	d106      	bne.n	801f4ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	2200      	movs	r2, #0
 801f4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f4e4:	6878      	ldr	r0, [r7, #4]
 801f4e6:	f7e2 fdc5 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	2202      	movs	r2, #2
 801f4ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	681a      	ldr	r2, [r3, #0]
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	3304      	adds	r3, #4
 801f4fa:	4619      	mov	r1, r3
 801f4fc:	4610      	mov	r0, r2
 801f4fe:	f000 fb1b 	bl	801fb38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	2201      	movs	r2, #1
 801f506:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	2201      	movs	r2, #1
 801f50e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	2201      	movs	r2, #1
 801f516:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	2201      	movs	r2, #1
 801f51e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	2201      	movs	r2, #1
 801f526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	2201      	movs	r2, #1
 801f52e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f532:	687b      	ldr	r3, [r7, #4]
 801f534:	2201      	movs	r2, #1
 801f536:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	2201      	movs	r2, #1
 801f53e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	2201      	movs	r2, #1
 801f546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	2201      	movs	r2, #1
 801f54e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	2201      	movs	r2, #1
 801f556:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	2201      	movs	r2, #1
 801f55e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f562:	2300      	movs	r3, #0
}
 801f564:	4618      	mov	r0, r3
 801f566:	3708      	adds	r7, #8
 801f568:	46bd      	mov	sp, r7
 801f56a:	bd80      	pop	{r7, pc}

0801f56c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f56c:	b480      	push	{r7}
 801f56e:	b085      	sub	sp, #20
 801f570:	af00      	add	r7, sp, #0
 801f572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f57a:	b2db      	uxtb	r3, r3
 801f57c:	2b01      	cmp	r3, #1
 801f57e:	d001      	beq.n	801f584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f580:	2301      	movs	r3, #1
 801f582:	e054      	b.n	801f62e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	2202      	movs	r2, #2
 801f588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	68da      	ldr	r2, [r3, #12]
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	681b      	ldr	r3, [r3, #0]
 801f596:	f042 0201 	orr.w	r2, r2, #1
 801f59a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	4a26      	ldr	r2, [pc, #152]	@ (801f63c <HAL_TIM_Base_Start_IT+0xd0>)
 801f5a2:	4293      	cmp	r3, r2
 801f5a4:	d022      	beq.n	801f5ec <HAL_TIM_Base_Start_IT+0x80>
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f5ae:	d01d      	beq.n	801f5ec <HAL_TIM_Base_Start_IT+0x80>
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	681b      	ldr	r3, [r3, #0]
 801f5b4:	4a22      	ldr	r2, [pc, #136]	@ (801f640 <HAL_TIM_Base_Start_IT+0xd4>)
 801f5b6:	4293      	cmp	r3, r2
 801f5b8:	d018      	beq.n	801f5ec <HAL_TIM_Base_Start_IT+0x80>
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	4a21      	ldr	r2, [pc, #132]	@ (801f644 <HAL_TIM_Base_Start_IT+0xd8>)
 801f5c0:	4293      	cmp	r3, r2
 801f5c2:	d013      	beq.n	801f5ec <HAL_TIM_Base_Start_IT+0x80>
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	681b      	ldr	r3, [r3, #0]
 801f5c8:	4a1f      	ldr	r2, [pc, #124]	@ (801f648 <HAL_TIM_Base_Start_IT+0xdc>)
 801f5ca:	4293      	cmp	r3, r2
 801f5cc:	d00e      	beq.n	801f5ec <HAL_TIM_Base_Start_IT+0x80>
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	681b      	ldr	r3, [r3, #0]
 801f5d2:	4a1e      	ldr	r2, [pc, #120]	@ (801f64c <HAL_TIM_Base_Start_IT+0xe0>)
 801f5d4:	4293      	cmp	r3, r2
 801f5d6:	d009      	beq.n	801f5ec <HAL_TIM_Base_Start_IT+0x80>
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	4a1c      	ldr	r2, [pc, #112]	@ (801f650 <HAL_TIM_Base_Start_IT+0xe4>)
 801f5de:	4293      	cmp	r3, r2
 801f5e0:	d004      	beq.n	801f5ec <HAL_TIM_Base_Start_IT+0x80>
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	4a1b      	ldr	r2, [pc, #108]	@ (801f654 <HAL_TIM_Base_Start_IT+0xe8>)
 801f5e8:	4293      	cmp	r3, r2
 801f5ea:	d115      	bne.n	801f618 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	689a      	ldr	r2, [r3, #8]
 801f5f2:	4b19      	ldr	r3, [pc, #100]	@ (801f658 <HAL_TIM_Base_Start_IT+0xec>)
 801f5f4:	4013      	ands	r3, r2
 801f5f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f5f8:	68fb      	ldr	r3, [r7, #12]
 801f5fa:	2b06      	cmp	r3, #6
 801f5fc:	d015      	beq.n	801f62a <HAL_TIM_Base_Start_IT+0xbe>
 801f5fe:	68fb      	ldr	r3, [r7, #12]
 801f600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f604:	d011      	beq.n	801f62a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	681a      	ldr	r2, [r3, #0]
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	f042 0201 	orr.w	r2, r2, #1
 801f614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f616:	e008      	b.n	801f62a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	681a      	ldr	r2, [r3, #0]
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	f042 0201 	orr.w	r2, r2, #1
 801f626:	601a      	str	r2, [r3, #0]
 801f628:	e000      	b.n	801f62c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f62a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f62c:	2300      	movs	r3, #0
}
 801f62e:	4618      	mov	r0, r3
 801f630:	3714      	adds	r7, #20
 801f632:	46bd      	mov	sp, r7
 801f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f638:	4770      	bx	lr
 801f63a:	bf00      	nop
 801f63c:	40010000 	.word	0x40010000
 801f640:	40000400 	.word	0x40000400
 801f644:	40000800 	.word	0x40000800
 801f648:	40000c00 	.word	0x40000c00
 801f64c:	40010400 	.word	0x40010400
 801f650:	40001800 	.word	0x40001800
 801f654:	40014000 	.word	0x40014000
 801f658:	00010007 	.word	0x00010007

0801f65c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801f65c:	b580      	push	{r7, lr}
 801f65e:	b082      	sub	sp, #8
 801f660:	af00      	add	r7, sp, #0
 801f662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	2b00      	cmp	r3, #0
 801f668:	d101      	bne.n	801f66e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801f66a:	2301      	movs	r3, #1
 801f66c:	e049      	b.n	801f702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f66e:	687b      	ldr	r3, [r7, #4]
 801f670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f674:	b2db      	uxtb	r3, r3
 801f676:	2b00      	cmp	r3, #0
 801f678:	d106      	bne.n	801f688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	2200      	movs	r2, #0
 801f67e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801f682:	6878      	ldr	r0, [r7, #4]
 801f684:	f000 f841 	bl	801f70a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	2202      	movs	r2, #2
 801f68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	681a      	ldr	r2, [r3, #0]
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	3304      	adds	r3, #4
 801f698:	4619      	mov	r1, r3
 801f69a:	4610      	mov	r0, r2
 801f69c:	f000 fa4c 	bl	801fb38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	2201      	movs	r2, #1
 801f6a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	2201      	movs	r2, #1
 801f6ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	2201      	movs	r2, #1
 801f6b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	2201      	movs	r2, #1
 801f6bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	2201      	movs	r2, #1
 801f6c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	2201      	movs	r2, #1
 801f6cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	2201      	movs	r2, #1
 801f6d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	2201      	movs	r2, #1
 801f6dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	2201      	movs	r2, #1
 801f6e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	2201      	movs	r2, #1
 801f6ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	2201      	movs	r2, #1
 801f6f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	2201      	movs	r2, #1
 801f6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f700:	2300      	movs	r3, #0
}
 801f702:	4618      	mov	r0, r3
 801f704:	3708      	adds	r7, #8
 801f706:	46bd      	mov	sp, r7
 801f708:	bd80      	pop	{r7, pc}

0801f70a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801f70a:	b480      	push	{r7}
 801f70c:	b083      	sub	sp, #12
 801f70e:	af00      	add	r7, sp, #0
 801f710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801f712:	bf00      	nop
 801f714:	370c      	adds	r7, #12
 801f716:	46bd      	mov	sp, r7
 801f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f71c:	4770      	bx	lr
	...

0801f720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f720:	b580      	push	{r7, lr}
 801f722:	b086      	sub	sp, #24
 801f724:	af00      	add	r7, sp, #0
 801f726:	60f8      	str	r0, [r7, #12]
 801f728:	60b9      	str	r1, [r7, #8]
 801f72a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f72c:	2300      	movs	r3, #0
 801f72e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f730:	68fb      	ldr	r3, [r7, #12]
 801f732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f736:	2b01      	cmp	r3, #1
 801f738:	d101      	bne.n	801f73e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f73a:	2302      	movs	r3, #2
 801f73c:	e0ff      	b.n	801f93e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	2201      	movs	r2, #1
 801f742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	2b14      	cmp	r3, #20
 801f74a:	f200 80f0 	bhi.w	801f92e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f74e:	a201      	add	r2, pc, #4	@ (adr r2, 801f754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f754:	0801f7a9 	.word	0x0801f7a9
 801f758:	0801f92f 	.word	0x0801f92f
 801f75c:	0801f92f 	.word	0x0801f92f
 801f760:	0801f92f 	.word	0x0801f92f
 801f764:	0801f7e9 	.word	0x0801f7e9
 801f768:	0801f92f 	.word	0x0801f92f
 801f76c:	0801f92f 	.word	0x0801f92f
 801f770:	0801f92f 	.word	0x0801f92f
 801f774:	0801f82b 	.word	0x0801f82b
 801f778:	0801f92f 	.word	0x0801f92f
 801f77c:	0801f92f 	.word	0x0801f92f
 801f780:	0801f92f 	.word	0x0801f92f
 801f784:	0801f86b 	.word	0x0801f86b
 801f788:	0801f92f 	.word	0x0801f92f
 801f78c:	0801f92f 	.word	0x0801f92f
 801f790:	0801f92f 	.word	0x0801f92f
 801f794:	0801f8ad 	.word	0x0801f8ad
 801f798:	0801f92f 	.word	0x0801f92f
 801f79c:	0801f92f 	.word	0x0801f92f
 801f7a0:	0801f92f 	.word	0x0801f92f
 801f7a4:	0801f8ed 	.word	0x0801f8ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f7a8:	68fb      	ldr	r3, [r7, #12]
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	68b9      	ldr	r1, [r7, #8]
 801f7ae:	4618      	mov	r0, r3
 801f7b0:	f000 fa68 	bl	801fc84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f7b4:	68fb      	ldr	r3, [r7, #12]
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	699a      	ldr	r2, [r3, #24]
 801f7ba:	68fb      	ldr	r3, [r7, #12]
 801f7bc:	681b      	ldr	r3, [r3, #0]
 801f7be:	f042 0208 	orr.w	r2, r2, #8
 801f7c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f7c4:	68fb      	ldr	r3, [r7, #12]
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	699a      	ldr	r2, [r3, #24]
 801f7ca:	68fb      	ldr	r3, [r7, #12]
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	f022 0204 	bic.w	r2, r2, #4
 801f7d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f7d4:	68fb      	ldr	r3, [r7, #12]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	6999      	ldr	r1, [r3, #24]
 801f7da:	68bb      	ldr	r3, [r7, #8]
 801f7dc:	691a      	ldr	r2, [r3, #16]
 801f7de:	68fb      	ldr	r3, [r7, #12]
 801f7e0:	681b      	ldr	r3, [r3, #0]
 801f7e2:	430a      	orrs	r2, r1
 801f7e4:	619a      	str	r2, [r3, #24]
      break;
 801f7e6:	e0a5      	b.n	801f934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f7e8:	68fb      	ldr	r3, [r7, #12]
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	68b9      	ldr	r1, [r7, #8]
 801f7ee:	4618      	mov	r0, r3
 801f7f0:	f000 fad8 	bl	801fda4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f7f4:	68fb      	ldr	r3, [r7, #12]
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	699a      	ldr	r2, [r3, #24]
 801f7fa:	68fb      	ldr	r3, [r7, #12]
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f804:	68fb      	ldr	r3, [r7, #12]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	699a      	ldr	r2, [r3, #24]
 801f80a:	68fb      	ldr	r3, [r7, #12]
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f814:	68fb      	ldr	r3, [r7, #12]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	6999      	ldr	r1, [r3, #24]
 801f81a:	68bb      	ldr	r3, [r7, #8]
 801f81c:	691b      	ldr	r3, [r3, #16]
 801f81e:	021a      	lsls	r2, r3, #8
 801f820:	68fb      	ldr	r3, [r7, #12]
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	430a      	orrs	r2, r1
 801f826:	619a      	str	r2, [r3, #24]
      break;
 801f828:	e084      	b.n	801f934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	68b9      	ldr	r1, [r7, #8]
 801f830:	4618      	mov	r0, r3
 801f832:	f000 fb41 	bl	801feb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f836:	68fb      	ldr	r3, [r7, #12]
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	69da      	ldr	r2, [r3, #28]
 801f83c:	68fb      	ldr	r3, [r7, #12]
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	f042 0208 	orr.w	r2, r2, #8
 801f844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	69da      	ldr	r2, [r3, #28]
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	f022 0204 	bic.w	r2, r2, #4
 801f854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f856:	68fb      	ldr	r3, [r7, #12]
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	69d9      	ldr	r1, [r3, #28]
 801f85c:	68bb      	ldr	r3, [r7, #8]
 801f85e:	691a      	ldr	r2, [r3, #16]
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	430a      	orrs	r2, r1
 801f866:	61da      	str	r2, [r3, #28]
      break;
 801f868:	e064      	b.n	801f934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	681b      	ldr	r3, [r3, #0]
 801f86e:	68b9      	ldr	r1, [r7, #8]
 801f870:	4618      	mov	r0, r3
 801f872:	f000 fba9 	bl	801ffc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	69da      	ldr	r2, [r3, #28]
 801f87c:	68fb      	ldr	r3, [r7, #12]
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f886:	68fb      	ldr	r3, [r7, #12]
 801f888:	681b      	ldr	r3, [r3, #0]
 801f88a:	69da      	ldr	r2, [r3, #28]
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	69d9      	ldr	r1, [r3, #28]
 801f89c:	68bb      	ldr	r3, [r7, #8]
 801f89e:	691b      	ldr	r3, [r3, #16]
 801f8a0:	021a      	lsls	r2, r3, #8
 801f8a2:	68fb      	ldr	r3, [r7, #12]
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	430a      	orrs	r2, r1
 801f8a8:	61da      	str	r2, [r3, #28]
      break;
 801f8aa:	e043      	b.n	801f934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f8ac:	68fb      	ldr	r3, [r7, #12]
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	68b9      	ldr	r1, [r7, #8]
 801f8b2:	4618      	mov	r0, r3
 801f8b4:	f000 fbf2 	bl	802009c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f8b8:	68fb      	ldr	r3, [r7, #12]
 801f8ba:	681b      	ldr	r3, [r3, #0]
 801f8bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	f042 0208 	orr.w	r2, r2, #8
 801f8c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	f022 0204 	bic.w	r2, r2, #4
 801f8d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f8d8:	68fb      	ldr	r3, [r7, #12]
 801f8da:	681b      	ldr	r3, [r3, #0]
 801f8dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801f8de:	68bb      	ldr	r3, [r7, #8]
 801f8e0:	691a      	ldr	r2, [r3, #16]
 801f8e2:	68fb      	ldr	r3, [r7, #12]
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	430a      	orrs	r2, r1
 801f8e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801f8ea:	e023      	b.n	801f934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	68b9      	ldr	r1, [r7, #8]
 801f8f2:	4618      	mov	r0, r3
 801f8f4:	f000 fc36 	bl	8020164 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f8f8:	68fb      	ldr	r3, [r7, #12]
 801f8fa:	681b      	ldr	r3, [r3, #0]
 801f8fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f8fe:	68fb      	ldr	r3, [r7, #12]
 801f900:	681b      	ldr	r3, [r3, #0]
 801f902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f906:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f908:	68fb      	ldr	r3, [r7, #12]
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f916:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801f91e:	68bb      	ldr	r3, [r7, #8]
 801f920:	691b      	ldr	r3, [r3, #16]
 801f922:	021a      	lsls	r2, r3, #8
 801f924:	68fb      	ldr	r3, [r7, #12]
 801f926:	681b      	ldr	r3, [r3, #0]
 801f928:	430a      	orrs	r2, r1
 801f92a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801f92c:	e002      	b.n	801f934 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f92e:	2301      	movs	r3, #1
 801f930:	75fb      	strb	r3, [r7, #23]
      break;
 801f932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	2200      	movs	r2, #0
 801f938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801f93c:	7dfb      	ldrb	r3, [r7, #23]
}
 801f93e:	4618      	mov	r0, r3
 801f940:	3718      	adds	r7, #24
 801f942:	46bd      	mov	sp, r7
 801f944:	bd80      	pop	{r7, pc}
 801f946:	bf00      	nop

0801f948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f948:	b580      	push	{r7, lr}
 801f94a:	b084      	sub	sp, #16
 801f94c:	af00      	add	r7, sp, #0
 801f94e:	6078      	str	r0, [r7, #4]
 801f950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f952:	2300      	movs	r3, #0
 801f954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f95c:	2b01      	cmp	r3, #1
 801f95e:	d101      	bne.n	801f964 <HAL_TIM_ConfigClockSource+0x1c>
 801f960:	2302      	movs	r3, #2
 801f962:	e0dc      	b.n	801fb1e <HAL_TIM_ConfigClockSource+0x1d6>
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	2201      	movs	r2, #1
 801f968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	2202      	movs	r2, #2
 801f970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	689b      	ldr	r3, [r3, #8]
 801f97a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f97c:	68ba      	ldr	r2, [r7, #8]
 801f97e:	4b6a      	ldr	r3, [pc, #424]	@ (801fb28 <HAL_TIM_ConfigClockSource+0x1e0>)
 801f980:	4013      	ands	r3, r2
 801f982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f984:	68bb      	ldr	r3, [r7, #8]
 801f986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801f98a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f98c:	687b      	ldr	r3, [r7, #4]
 801f98e:	681b      	ldr	r3, [r3, #0]
 801f990:	68ba      	ldr	r2, [r7, #8]
 801f992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f994:	683b      	ldr	r3, [r7, #0]
 801f996:	681b      	ldr	r3, [r3, #0]
 801f998:	4a64      	ldr	r2, [pc, #400]	@ (801fb2c <HAL_TIM_ConfigClockSource+0x1e4>)
 801f99a:	4293      	cmp	r3, r2
 801f99c:	f000 80a9 	beq.w	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9a0:	4a62      	ldr	r2, [pc, #392]	@ (801fb2c <HAL_TIM_ConfigClockSource+0x1e4>)
 801f9a2:	4293      	cmp	r3, r2
 801f9a4:	f200 80ae 	bhi.w	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9a8:	4a61      	ldr	r2, [pc, #388]	@ (801fb30 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f9aa:	4293      	cmp	r3, r2
 801f9ac:	f000 80a1 	beq.w	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9b0:	4a5f      	ldr	r2, [pc, #380]	@ (801fb30 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f9b2:	4293      	cmp	r3, r2
 801f9b4:	f200 80a6 	bhi.w	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9b8:	4a5e      	ldr	r2, [pc, #376]	@ (801fb34 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f9ba:	4293      	cmp	r3, r2
 801f9bc:	f000 8099 	beq.w	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9c0:	4a5c      	ldr	r2, [pc, #368]	@ (801fb34 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f9c2:	4293      	cmp	r3, r2
 801f9c4:	f200 809e 	bhi.w	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801f9cc:	f000 8091 	beq.w	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801f9d4:	f200 8096 	bhi.w	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f9dc:	f000 8089 	beq.w	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801f9e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f9e4:	f200 808e 	bhi.w	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801f9ec:	d03e      	beq.n	801fa6c <HAL_TIM_ConfigClockSource+0x124>
 801f9ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801f9f2:	f200 8087 	bhi.w	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801f9f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f9fa:	f000 8086 	beq.w	801fb0a <HAL_TIM_ConfigClockSource+0x1c2>
 801f9fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fa02:	d87f      	bhi.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa04:	2b70      	cmp	r3, #112	@ 0x70
 801fa06:	d01a      	beq.n	801fa3e <HAL_TIM_ConfigClockSource+0xf6>
 801fa08:	2b70      	cmp	r3, #112	@ 0x70
 801fa0a:	d87b      	bhi.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa0c:	2b60      	cmp	r3, #96	@ 0x60
 801fa0e:	d050      	beq.n	801fab2 <HAL_TIM_ConfigClockSource+0x16a>
 801fa10:	2b60      	cmp	r3, #96	@ 0x60
 801fa12:	d877      	bhi.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa14:	2b50      	cmp	r3, #80	@ 0x50
 801fa16:	d03c      	beq.n	801fa92 <HAL_TIM_ConfigClockSource+0x14a>
 801fa18:	2b50      	cmp	r3, #80	@ 0x50
 801fa1a:	d873      	bhi.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa1c:	2b40      	cmp	r3, #64	@ 0x40
 801fa1e:	d058      	beq.n	801fad2 <HAL_TIM_ConfigClockSource+0x18a>
 801fa20:	2b40      	cmp	r3, #64	@ 0x40
 801fa22:	d86f      	bhi.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa24:	2b30      	cmp	r3, #48	@ 0x30
 801fa26:	d064      	beq.n	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa28:	2b30      	cmp	r3, #48	@ 0x30
 801fa2a:	d86b      	bhi.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa2c:	2b20      	cmp	r3, #32
 801fa2e:	d060      	beq.n	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa30:	2b20      	cmp	r3, #32
 801fa32:	d867      	bhi.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d05c      	beq.n	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa38:	2b10      	cmp	r3, #16
 801fa3a:	d05a      	beq.n	801faf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fa3c:	e062      	b.n	801fb04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fa42:	683b      	ldr	r3, [r7, #0]
 801fa44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fa46:	683b      	ldr	r3, [r7, #0]
 801fa48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fa4a:	683b      	ldr	r3, [r7, #0]
 801fa4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fa4e:	f000 fc6d 	bl	802032c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	689b      	ldr	r3, [r3, #8]
 801fa58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801fa5a:	68bb      	ldr	r3, [r7, #8]
 801fa5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801fa60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	68ba      	ldr	r2, [r7, #8]
 801fa68:	609a      	str	r2, [r3, #8]
      break;
 801fa6a:	e04f      	b.n	801fb0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fa70:	683b      	ldr	r3, [r7, #0]
 801fa72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fa74:	683b      	ldr	r3, [r7, #0]
 801fa76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fa78:	683b      	ldr	r3, [r7, #0]
 801fa7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fa7c:	f000 fc56 	bl	802032c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	689a      	ldr	r2, [r3, #8]
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801fa8e:	609a      	str	r2, [r3, #8]
      break;
 801fa90:	e03c      	b.n	801fb0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fa92:	687b      	ldr	r3, [r7, #4]
 801fa94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fa96:	683b      	ldr	r3, [r7, #0]
 801fa98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fa9a:	683b      	ldr	r3, [r7, #0]
 801fa9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fa9e:	461a      	mov	r2, r3
 801faa0:	f000 fbc6 	bl	8020230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	2150      	movs	r1, #80	@ 0x50
 801faaa:	4618      	mov	r0, r3
 801faac:	f000 fc20 	bl	80202f0 <TIM_ITRx_SetConfig>
      break;
 801fab0:	e02c      	b.n	801fb0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fab6:	683b      	ldr	r3, [r7, #0]
 801fab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801faba:	683b      	ldr	r3, [r7, #0]
 801fabc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801fabe:	461a      	mov	r2, r3
 801fac0:	f000 fbe5 	bl	802028e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	2160      	movs	r1, #96	@ 0x60
 801faca:	4618      	mov	r0, r3
 801facc:	f000 fc10 	bl	80202f0 <TIM_ITRx_SetConfig>
      break;
 801fad0:	e01c      	b.n	801fb0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fad6:	683b      	ldr	r3, [r7, #0]
 801fad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fada:	683b      	ldr	r3, [r7, #0]
 801fadc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fade:	461a      	mov	r2, r3
 801fae0:	f000 fba6 	bl	8020230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	2140      	movs	r1, #64	@ 0x40
 801faea:	4618      	mov	r0, r3
 801faec:	f000 fc00 	bl	80202f0 <TIM_ITRx_SetConfig>
      break;
 801faf0:	e00c      	b.n	801fb0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	681a      	ldr	r2, [r3, #0]
 801faf6:	683b      	ldr	r3, [r7, #0]
 801faf8:	681b      	ldr	r3, [r3, #0]
 801fafa:	4619      	mov	r1, r3
 801fafc:	4610      	mov	r0, r2
 801fafe:	f000 fbf7 	bl	80202f0 <TIM_ITRx_SetConfig>
      break;
 801fb02:	e003      	b.n	801fb0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801fb04:	2301      	movs	r3, #1
 801fb06:	73fb      	strb	r3, [r7, #15]
      break;
 801fb08:	e000      	b.n	801fb0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801fb0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	2201      	movs	r2, #1
 801fb10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801fb14:	687b      	ldr	r3, [r7, #4]
 801fb16:	2200      	movs	r2, #0
 801fb18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801fb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801fb1e:	4618      	mov	r0, r3
 801fb20:	3710      	adds	r7, #16
 801fb22:	46bd      	mov	sp, r7
 801fb24:	bd80      	pop	{r7, pc}
 801fb26:	bf00      	nop
 801fb28:	ffceff88 	.word	0xffceff88
 801fb2c:	00100040 	.word	0x00100040
 801fb30:	00100030 	.word	0x00100030
 801fb34:	00100020 	.word	0x00100020

0801fb38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801fb38:	b480      	push	{r7}
 801fb3a:	b085      	sub	sp, #20
 801fb3c:	af00      	add	r7, sp, #0
 801fb3e:	6078      	str	r0, [r7, #4]
 801fb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	4a46      	ldr	r2, [pc, #280]	@ (801fc64 <TIM_Base_SetConfig+0x12c>)
 801fb4c:	4293      	cmp	r3, r2
 801fb4e:	d013      	beq.n	801fb78 <TIM_Base_SetConfig+0x40>
 801fb50:	687b      	ldr	r3, [r7, #4]
 801fb52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fb56:	d00f      	beq.n	801fb78 <TIM_Base_SetConfig+0x40>
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	4a43      	ldr	r2, [pc, #268]	@ (801fc68 <TIM_Base_SetConfig+0x130>)
 801fb5c:	4293      	cmp	r3, r2
 801fb5e:	d00b      	beq.n	801fb78 <TIM_Base_SetConfig+0x40>
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	4a42      	ldr	r2, [pc, #264]	@ (801fc6c <TIM_Base_SetConfig+0x134>)
 801fb64:	4293      	cmp	r3, r2
 801fb66:	d007      	beq.n	801fb78 <TIM_Base_SetConfig+0x40>
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	4a41      	ldr	r2, [pc, #260]	@ (801fc70 <TIM_Base_SetConfig+0x138>)
 801fb6c:	4293      	cmp	r3, r2
 801fb6e:	d003      	beq.n	801fb78 <TIM_Base_SetConfig+0x40>
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	4a40      	ldr	r2, [pc, #256]	@ (801fc74 <TIM_Base_SetConfig+0x13c>)
 801fb74:	4293      	cmp	r3, r2
 801fb76:	d108      	bne.n	801fb8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801fb78:	68fb      	ldr	r3, [r7, #12]
 801fb7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801fb7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801fb80:	683b      	ldr	r3, [r7, #0]
 801fb82:	685b      	ldr	r3, [r3, #4]
 801fb84:	68fa      	ldr	r2, [r7, #12]
 801fb86:	4313      	orrs	r3, r2
 801fb88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	4a35      	ldr	r2, [pc, #212]	@ (801fc64 <TIM_Base_SetConfig+0x12c>)
 801fb8e:	4293      	cmp	r3, r2
 801fb90:	d01f      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fb98:	d01b      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	4a32      	ldr	r2, [pc, #200]	@ (801fc68 <TIM_Base_SetConfig+0x130>)
 801fb9e:	4293      	cmp	r3, r2
 801fba0:	d017      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	4a31      	ldr	r2, [pc, #196]	@ (801fc6c <TIM_Base_SetConfig+0x134>)
 801fba6:	4293      	cmp	r3, r2
 801fba8:	d013      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	4a30      	ldr	r2, [pc, #192]	@ (801fc70 <TIM_Base_SetConfig+0x138>)
 801fbae:	4293      	cmp	r3, r2
 801fbb0:	d00f      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	4a2f      	ldr	r2, [pc, #188]	@ (801fc74 <TIM_Base_SetConfig+0x13c>)
 801fbb6:	4293      	cmp	r3, r2
 801fbb8:	d00b      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	4a2e      	ldr	r2, [pc, #184]	@ (801fc78 <TIM_Base_SetConfig+0x140>)
 801fbbe:	4293      	cmp	r3, r2
 801fbc0:	d007      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	4a2d      	ldr	r2, [pc, #180]	@ (801fc7c <TIM_Base_SetConfig+0x144>)
 801fbc6:	4293      	cmp	r3, r2
 801fbc8:	d003      	beq.n	801fbd2 <TIM_Base_SetConfig+0x9a>
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	4a2c      	ldr	r2, [pc, #176]	@ (801fc80 <TIM_Base_SetConfig+0x148>)
 801fbce:	4293      	cmp	r3, r2
 801fbd0:	d108      	bne.n	801fbe4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801fbd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801fbda:	683b      	ldr	r3, [r7, #0]
 801fbdc:	68db      	ldr	r3, [r3, #12]
 801fbde:	68fa      	ldr	r2, [r7, #12]
 801fbe0:	4313      	orrs	r3, r2
 801fbe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801fbe4:	68fb      	ldr	r3, [r7, #12]
 801fbe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801fbea:	683b      	ldr	r3, [r7, #0]
 801fbec:	695b      	ldr	r3, [r3, #20]
 801fbee:	4313      	orrs	r3, r2
 801fbf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	68fa      	ldr	r2, [r7, #12]
 801fbf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801fbf8:	683b      	ldr	r3, [r7, #0]
 801fbfa:	689a      	ldr	r2, [r3, #8]
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801fc00:	683b      	ldr	r3, [r7, #0]
 801fc02:	681a      	ldr	r2, [r3, #0]
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	4a16      	ldr	r2, [pc, #88]	@ (801fc64 <TIM_Base_SetConfig+0x12c>)
 801fc0c:	4293      	cmp	r3, r2
 801fc0e:	d00f      	beq.n	801fc30 <TIM_Base_SetConfig+0xf8>
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	4a18      	ldr	r2, [pc, #96]	@ (801fc74 <TIM_Base_SetConfig+0x13c>)
 801fc14:	4293      	cmp	r3, r2
 801fc16:	d00b      	beq.n	801fc30 <TIM_Base_SetConfig+0xf8>
 801fc18:	687b      	ldr	r3, [r7, #4]
 801fc1a:	4a17      	ldr	r2, [pc, #92]	@ (801fc78 <TIM_Base_SetConfig+0x140>)
 801fc1c:	4293      	cmp	r3, r2
 801fc1e:	d007      	beq.n	801fc30 <TIM_Base_SetConfig+0xf8>
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	4a16      	ldr	r2, [pc, #88]	@ (801fc7c <TIM_Base_SetConfig+0x144>)
 801fc24:	4293      	cmp	r3, r2
 801fc26:	d003      	beq.n	801fc30 <TIM_Base_SetConfig+0xf8>
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	4a15      	ldr	r2, [pc, #84]	@ (801fc80 <TIM_Base_SetConfig+0x148>)
 801fc2c:	4293      	cmp	r3, r2
 801fc2e:	d103      	bne.n	801fc38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801fc30:	683b      	ldr	r3, [r7, #0]
 801fc32:	691a      	ldr	r2, [r3, #16]
 801fc34:	687b      	ldr	r3, [r7, #4]
 801fc36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	2201      	movs	r2, #1
 801fc3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	691b      	ldr	r3, [r3, #16]
 801fc42:	f003 0301 	and.w	r3, r3, #1
 801fc46:	2b01      	cmp	r3, #1
 801fc48:	d105      	bne.n	801fc56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	691b      	ldr	r3, [r3, #16]
 801fc4e:	f023 0201 	bic.w	r2, r3, #1
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	611a      	str	r2, [r3, #16]
  }
}
 801fc56:	bf00      	nop
 801fc58:	3714      	adds	r7, #20
 801fc5a:	46bd      	mov	sp, r7
 801fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc60:	4770      	bx	lr
 801fc62:	bf00      	nop
 801fc64:	40010000 	.word	0x40010000
 801fc68:	40000400 	.word	0x40000400
 801fc6c:	40000800 	.word	0x40000800
 801fc70:	40000c00 	.word	0x40000c00
 801fc74:	40010400 	.word	0x40010400
 801fc78:	40014000 	.word	0x40014000
 801fc7c:	40014400 	.word	0x40014400
 801fc80:	40014800 	.word	0x40014800

0801fc84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fc84:	b480      	push	{r7}
 801fc86:	b087      	sub	sp, #28
 801fc88:	af00      	add	r7, sp, #0
 801fc8a:	6078      	str	r0, [r7, #4]
 801fc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fc8e:	687b      	ldr	r3, [r7, #4]
 801fc90:	6a1b      	ldr	r3, [r3, #32]
 801fc92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	6a1b      	ldr	r3, [r3, #32]
 801fc98:	f023 0201 	bic.w	r2, r3, #1
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	685b      	ldr	r3, [r3, #4]
 801fca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	699b      	ldr	r3, [r3, #24]
 801fcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801fcac:	68fa      	ldr	r2, [r7, #12]
 801fcae:	4b37      	ldr	r3, [pc, #220]	@ (801fd8c <TIM_OC1_SetConfig+0x108>)
 801fcb0:	4013      	ands	r3, r2
 801fcb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	f023 0303 	bic.w	r3, r3, #3
 801fcba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fcbc:	683b      	ldr	r3, [r7, #0]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	68fa      	ldr	r2, [r7, #12]
 801fcc2:	4313      	orrs	r3, r2
 801fcc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801fcc6:	697b      	ldr	r3, [r7, #20]
 801fcc8:	f023 0302 	bic.w	r3, r3, #2
 801fccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801fcce:	683b      	ldr	r3, [r7, #0]
 801fcd0:	689b      	ldr	r3, [r3, #8]
 801fcd2:	697a      	ldr	r2, [r7, #20]
 801fcd4:	4313      	orrs	r3, r2
 801fcd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	4a2d      	ldr	r2, [pc, #180]	@ (801fd90 <TIM_OC1_SetConfig+0x10c>)
 801fcdc:	4293      	cmp	r3, r2
 801fcde:	d00f      	beq.n	801fd00 <TIM_OC1_SetConfig+0x7c>
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	4a2c      	ldr	r2, [pc, #176]	@ (801fd94 <TIM_OC1_SetConfig+0x110>)
 801fce4:	4293      	cmp	r3, r2
 801fce6:	d00b      	beq.n	801fd00 <TIM_OC1_SetConfig+0x7c>
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	4a2b      	ldr	r2, [pc, #172]	@ (801fd98 <TIM_OC1_SetConfig+0x114>)
 801fcec:	4293      	cmp	r3, r2
 801fcee:	d007      	beq.n	801fd00 <TIM_OC1_SetConfig+0x7c>
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	4a2a      	ldr	r2, [pc, #168]	@ (801fd9c <TIM_OC1_SetConfig+0x118>)
 801fcf4:	4293      	cmp	r3, r2
 801fcf6:	d003      	beq.n	801fd00 <TIM_OC1_SetConfig+0x7c>
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	4a29      	ldr	r2, [pc, #164]	@ (801fda0 <TIM_OC1_SetConfig+0x11c>)
 801fcfc:	4293      	cmp	r3, r2
 801fcfe:	d10c      	bne.n	801fd1a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801fd00:	697b      	ldr	r3, [r7, #20]
 801fd02:	f023 0308 	bic.w	r3, r3, #8
 801fd06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801fd08:	683b      	ldr	r3, [r7, #0]
 801fd0a:	68db      	ldr	r3, [r3, #12]
 801fd0c:	697a      	ldr	r2, [r7, #20]
 801fd0e:	4313      	orrs	r3, r2
 801fd10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801fd12:	697b      	ldr	r3, [r7, #20]
 801fd14:	f023 0304 	bic.w	r3, r3, #4
 801fd18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	4a1c      	ldr	r2, [pc, #112]	@ (801fd90 <TIM_OC1_SetConfig+0x10c>)
 801fd1e:	4293      	cmp	r3, r2
 801fd20:	d00f      	beq.n	801fd42 <TIM_OC1_SetConfig+0xbe>
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	4a1b      	ldr	r2, [pc, #108]	@ (801fd94 <TIM_OC1_SetConfig+0x110>)
 801fd26:	4293      	cmp	r3, r2
 801fd28:	d00b      	beq.n	801fd42 <TIM_OC1_SetConfig+0xbe>
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	4a1a      	ldr	r2, [pc, #104]	@ (801fd98 <TIM_OC1_SetConfig+0x114>)
 801fd2e:	4293      	cmp	r3, r2
 801fd30:	d007      	beq.n	801fd42 <TIM_OC1_SetConfig+0xbe>
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	4a19      	ldr	r2, [pc, #100]	@ (801fd9c <TIM_OC1_SetConfig+0x118>)
 801fd36:	4293      	cmp	r3, r2
 801fd38:	d003      	beq.n	801fd42 <TIM_OC1_SetConfig+0xbe>
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	4a18      	ldr	r2, [pc, #96]	@ (801fda0 <TIM_OC1_SetConfig+0x11c>)
 801fd3e:	4293      	cmp	r3, r2
 801fd40:	d111      	bne.n	801fd66 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801fd42:	693b      	ldr	r3, [r7, #16]
 801fd44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fd48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801fd4a:	693b      	ldr	r3, [r7, #16]
 801fd4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801fd50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801fd52:	683b      	ldr	r3, [r7, #0]
 801fd54:	695b      	ldr	r3, [r3, #20]
 801fd56:	693a      	ldr	r2, [r7, #16]
 801fd58:	4313      	orrs	r3, r2
 801fd5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801fd5c:	683b      	ldr	r3, [r7, #0]
 801fd5e:	699b      	ldr	r3, [r3, #24]
 801fd60:	693a      	ldr	r2, [r7, #16]
 801fd62:	4313      	orrs	r3, r2
 801fd64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	693a      	ldr	r2, [r7, #16]
 801fd6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	68fa      	ldr	r2, [r7, #12]
 801fd70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801fd72:	683b      	ldr	r3, [r7, #0]
 801fd74:	685a      	ldr	r2, [r3, #4]
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	697a      	ldr	r2, [r7, #20]
 801fd7e:	621a      	str	r2, [r3, #32]
}
 801fd80:	bf00      	nop
 801fd82:	371c      	adds	r7, #28
 801fd84:	46bd      	mov	sp, r7
 801fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd8a:	4770      	bx	lr
 801fd8c:	fffeff8f 	.word	0xfffeff8f
 801fd90:	40010000 	.word	0x40010000
 801fd94:	40010400 	.word	0x40010400
 801fd98:	40014000 	.word	0x40014000
 801fd9c:	40014400 	.word	0x40014400
 801fda0:	40014800 	.word	0x40014800

0801fda4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fda4:	b480      	push	{r7}
 801fda6:	b087      	sub	sp, #28
 801fda8:	af00      	add	r7, sp, #0
 801fdaa:	6078      	str	r0, [r7, #4]
 801fdac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	6a1b      	ldr	r3, [r3, #32]
 801fdb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	6a1b      	ldr	r3, [r3, #32]
 801fdb8:	f023 0210 	bic.w	r2, r3, #16
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	685b      	ldr	r3, [r3, #4]
 801fdc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	699b      	ldr	r3, [r3, #24]
 801fdca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801fdcc:	68fa      	ldr	r2, [r7, #12]
 801fdce:	4b34      	ldr	r3, [pc, #208]	@ (801fea0 <TIM_OC2_SetConfig+0xfc>)
 801fdd0:	4013      	ands	r3, r2
 801fdd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801fdda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fddc:	683b      	ldr	r3, [r7, #0]
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	021b      	lsls	r3, r3, #8
 801fde2:	68fa      	ldr	r2, [r7, #12]
 801fde4:	4313      	orrs	r3, r2
 801fde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fde8:	697b      	ldr	r3, [r7, #20]
 801fdea:	f023 0320 	bic.w	r3, r3, #32
 801fdee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fdf0:	683b      	ldr	r3, [r7, #0]
 801fdf2:	689b      	ldr	r3, [r3, #8]
 801fdf4:	011b      	lsls	r3, r3, #4
 801fdf6:	697a      	ldr	r2, [r7, #20]
 801fdf8:	4313      	orrs	r3, r2
 801fdfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	4a29      	ldr	r2, [pc, #164]	@ (801fea4 <TIM_OC2_SetConfig+0x100>)
 801fe00:	4293      	cmp	r3, r2
 801fe02:	d003      	beq.n	801fe0c <TIM_OC2_SetConfig+0x68>
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	4a28      	ldr	r2, [pc, #160]	@ (801fea8 <TIM_OC2_SetConfig+0x104>)
 801fe08:	4293      	cmp	r3, r2
 801fe0a:	d10d      	bne.n	801fe28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801fe0c:	697b      	ldr	r3, [r7, #20]
 801fe0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801fe12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801fe14:	683b      	ldr	r3, [r7, #0]
 801fe16:	68db      	ldr	r3, [r3, #12]
 801fe18:	011b      	lsls	r3, r3, #4
 801fe1a:	697a      	ldr	r2, [r7, #20]
 801fe1c:	4313      	orrs	r3, r2
 801fe1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801fe20:	697b      	ldr	r3, [r7, #20]
 801fe22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801fe26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	4a1e      	ldr	r2, [pc, #120]	@ (801fea4 <TIM_OC2_SetConfig+0x100>)
 801fe2c:	4293      	cmp	r3, r2
 801fe2e:	d00f      	beq.n	801fe50 <TIM_OC2_SetConfig+0xac>
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	4a1d      	ldr	r2, [pc, #116]	@ (801fea8 <TIM_OC2_SetConfig+0x104>)
 801fe34:	4293      	cmp	r3, r2
 801fe36:	d00b      	beq.n	801fe50 <TIM_OC2_SetConfig+0xac>
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	4a1c      	ldr	r2, [pc, #112]	@ (801feac <TIM_OC2_SetConfig+0x108>)
 801fe3c:	4293      	cmp	r3, r2
 801fe3e:	d007      	beq.n	801fe50 <TIM_OC2_SetConfig+0xac>
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	4a1b      	ldr	r2, [pc, #108]	@ (801feb0 <TIM_OC2_SetConfig+0x10c>)
 801fe44:	4293      	cmp	r3, r2
 801fe46:	d003      	beq.n	801fe50 <TIM_OC2_SetConfig+0xac>
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	4a1a      	ldr	r2, [pc, #104]	@ (801feb4 <TIM_OC2_SetConfig+0x110>)
 801fe4c:	4293      	cmp	r3, r2
 801fe4e:	d113      	bne.n	801fe78 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801fe50:	693b      	ldr	r3, [r7, #16]
 801fe52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801fe56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801fe58:	693b      	ldr	r3, [r7, #16]
 801fe5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801fe5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801fe60:	683b      	ldr	r3, [r7, #0]
 801fe62:	695b      	ldr	r3, [r3, #20]
 801fe64:	009b      	lsls	r3, r3, #2
 801fe66:	693a      	ldr	r2, [r7, #16]
 801fe68:	4313      	orrs	r3, r2
 801fe6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801fe6c:	683b      	ldr	r3, [r7, #0]
 801fe6e:	699b      	ldr	r3, [r3, #24]
 801fe70:	009b      	lsls	r3, r3, #2
 801fe72:	693a      	ldr	r2, [r7, #16]
 801fe74:	4313      	orrs	r3, r2
 801fe76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	693a      	ldr	r2, [r7, #16]
 801fe7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	68fa      	ldr	r2, [r7, #12]
 801fe82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801fe84:	683b      	ldr	r3, [r7, #0]
 801fe86:	685a      	ldr	r2, [r3, #4]
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	697a      	ldr	r2, [r7, #20]
 801fe90:	621a      	str	r2, [r3, #32]
}
 801fe92:	bf00      	nop
 801fe94:	371c      	adds	r7, #28
 801fe96:	46bd      	mov	sp, r7
 801fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe9c:	4770      	bx	lr
 801fe9e:	bf00      	nop
 801fea0:	feff8fff 	.word	0xfeff8fff
 801fea4:	40010000 	.word	0x40010000
 801fea8:	40010400 	.word	0x40010400
 801feac:	40014000 	.word	0x40014000
 801feb0:	40014400 	.word	0x40014400
 801feb4:	40014800 	.word	0x40014800

0801feb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801feb8:	b480      	push	{r7}
 801feba:	b087      	sub	sp, #28
 801febc:	af00      	add	r7, sp, #0
 801febe:	6078      	str	r0, [r7, #4]
 801fec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	6a1b      	ldr	r3, [r3, #32]
 801fec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	6a1b      	ldr	r3, [r3, #32]
 801fecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	685b      	ldr	r3, [r3, #4]
 801fed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	69db      	ldr	r3, [r3, #28]
 801fede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801fee0:	68fa      	ldr	r2, [r7, #12]
 801fee2:	4b33      	ldr	r3, [pc, #204]	@ (801ffb0 <TIM_OC3_SetConfig+0xf8>)
 801fee4:	4013      	ands	r3, r2
 801fee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801fee8:	68fb      	ldr	r3, [r7, #12]
 801feea:	f023 0303 	bic.w	r3, r3, #3
 801feee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fef0:	683b      	ldr	r3, [r7, #0]
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	68fa      	ldr	r2, [r7, #12]
 801fef6:	4313      	orrs	r3, r2
 801fef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801ff00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ff02:	683b      	ldr	r3, [r7, #0]
 801ff04:	689b      	ldr	r3, [r3, #8]
 801ff06:	021b      	lsls	r3, r3, #8
 801ff08:	697a      	ldr	r2, [r7, #20]
 801ff0a:	4313      	orrs	r3, r2
 801ff0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	4a28      	ldr	r2, [pc, #160]	@ (801ffb4 <TIM_OC3_SetConfig+0xfc>)
 801ff12:	4293      	cmp	r3, r2
 801ff14:	d003      	beq.n	801ff1e <TIM_OC3_SetConfig+0x66>
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	4a27      	ldr	r2, [pc, #156]	@ (801ffb8 <TIM_OC3_SetConfig+0x100>)
 801ff1a:	4293      	cmp	r3, r2
 801ff1c:	d10d      	bne.n	801ff3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ff1e:	697b      	ldr	r3, [r7, #20]
 801ff20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ff24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ff26:	683b      	ldr	r3, [r7, #0]
 801ff28:	68db      	ldr	r3, [r3, #12]
 801ff2a:	021b      	lsls	r3, r3, #8
 801ff2c:	697a      	ldr	r2, [r7, #20]
 801ff2e:	4313      	orrs	r3, r2
 801ff30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ff32:	697b      	ldr	r3, [r7, #20]
 801ff34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801ff38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	4a1d      	ldr	r2, [pc, #116]	@ (801ffb4 <TIM_OC3_SetConfig+0xfc>)
 801ff3e:	4293      	cmp	r3, r2
 801ff40:	d00f      	beq.n	801ff62 <TIM_OC3_SetConfig+0xaa>
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	4a1c      	ldr	r2, [pc, #112]	@ (801ffb8 <TIM_OC3_SetConfig+0x100>)
 801ff46:	4293      	cmp	r3, r2
 801ff48:	d00b      	beq.n	801ff62 <TIM_OC3_SetConfig+0xaa>
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	4a1b      	ldr	r2, [pc, #108]	@ (801ffbc <TIM_OC3_SetConfig+0x104>)
 801ff4e:	4293      	cmp	r3, r2
 801ff50:	d007      	beq.n	801ff62 <TIM_OC3_SetConfig+0xaa>
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	4a1a      	ldr	r2, [pc, #104]	@ (801ffc0 <TIM_OC3_SetConfig+0x108>)
 801ff56:	4293      	cmp	r3, r2
 801ff58:	d003      	beq.n	801ff62 <TIM_OC3_SetConfig+0xaa>
 801ff5a:	687b      	ldr	r3, [r7, #4]
 801ff5c:	4a19      	ldr	r2, [pc, #100]	@ (801ffc4 <TIM_OC3_SetConfig+0x10c>)
 801ff5e:	4293      	cmp	r3, r2
 801ff60:	d113      	bne.n	801ff8a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ff62:	693b      	ldr	r3, [r7, #16]
 801ff64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ff68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ff6a:	693b      	ldr	r3, [r7, #16]
 801ff6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ff70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ff72:	683b      	ldr	r3, [r7, #0]
 801ff74:	695b      	ldr	r3, [r3, #20]
 801ff76:	011b      	lsls	r3, r3, #4
 801ff78:	693a      	ldr	r2, [r7, #16]
 801ff7a:	4313      	orrs	r3, r2
 801ff7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ff7e:	683b      	ldr	r3, [r7, #0]
 801ff80:	699b      	ldr	r3, [r3, #24]
 801ff82:	011b      	lsls	r3, r3, #4
 801ff84:	693a      	ldr	r2, [r7, #16]
 801ff86:	4313      	orrs	r3, r2
 801ff88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	693a      	ldr	r2, [r7, #16]
 801ff8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	68fa      	ldr	r2, [r7, #12]
 801ff94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ff96:	683b      	ldr	r3, [r7, #0]
 801ff98:	685a      	ldr	r2, [r3, #4]
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	697a      	ldr	r2, [r7, #20]
 801ffa2:	621a      	str	r2, [r3, #32]
}
 801ffa4:	bf00      	nop
 801ffa6:	371c      	adds	r7, #28
 801ffa8:	46bd      	mov	sp, r7
 801ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffae:	4770      	bx	lr
 801ffb0:	fffeff8f 	.word	0xfffeff8f
 801ffb4:	40010000 	.word	0x40010000
 801ffb8:	40010400 	.word	0x40010400
 801ffbc:	40014000 	.word	0x40014000
 801ffc0:	40014400 	.word	0x40014400
 801ffc4:	40014800 	.word	0x40014800

0801ffc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ffc8:	b480      	push	{r7}
 801ffca:	b087      	sub	sp, #28
 801ffcc:	af00      	add	r7, sp, #0
 801ffce:	6078      	str	r0, [r7, #4]
 801ffd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	6a1b      	ldr	r3, [r3, #32]
 801ffd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	6a1b      	ldr	r3, [r3, #32]
 801ffdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	685b      	ldr	r3, [r3, #4]
 801ffe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	69db      	ldr	r3, [r3, #28]
 801ffee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801fff0:	68fa      	ldr	r2, [r7, #12]
 801fff2:	4b24      	ldr	r3, [pc, #144]	@ (8020084 <TIM_OC4_SetConfig+0xbc>)
 801fff4:	4013      	ands	r3, r2
 801fff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801fff8:	68fb      	ldr	r3, [r7, #12]
 801fffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801fffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020000:	683b      	ldr	r3, [r7, #0]
 8020002:	681b      	ldr	r3, [r3, #0]
 8020004:	021b      	lsls	r3, r3, #8
 8020006:	68fa      	ldr	r2, [r7, #12]
 8020008:	4313      	orrs	r3, r2
 802000a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802000c:	693b      	ldr	r3, [r7, #16]
 802000e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020014:	683b      	ldr	r3, [r7, #0]
 8020016:	689b      	ldr	r3, [r3, #8]
 8020018:	031b      	lsls	r3, r3, #12
 802001a:	693a      	ldr	r2, [r7, #16]
 802001c:	4313      	orrs	r3, r2
 802001e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	4a19      	ldr	r2, [pc, #100]	@ (8020088 <TIM_OC4_SetConfig+0xc0>)
 8020024:	4293      	cmp	r3, r2
 8020026:	d00f      	beq.n	8020048 <TIM_OC4_SetConfig+0x80>
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	4a18      	ldr	r2, [pc, #96]	@ (802008c <TIM_OC4_SetConfig+0xc4>)
 802002c:	4293      	cmp	r3, r2
 802002e:	d00b      	beq.n	8020048 <TIM_OC4_SetConfig+0x80>
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	4a17      	ldr	r2, [pc, #92]	@ (8020090 <TIM_OC4_SetConfig+0xc8>)
 8020034:	4293      	cmp	r3, r2
 8020036:	d007      	beq.n	8020048 <TIM_OC4_SetConfig+0x80>
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	4a16      	ldr	r2, [pc, #88]	@ (8020094 <TIM_OC4_SetConfig+0xcc>)
 802003c:	4293      	cmp	r3, r2
 802003e:	d003      	beq.n	8020048 <TIM_OC4_SetConfig+0x80>
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	4a15      	ldr	r2, [pc, #84]	@ (8020098 <TIM_OC4_SetConfig+0xd0>)
 8020044:	4293      	cmp	r3, r2
 8020046:	d109      	bne.n	802005c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020048:	697b      	ldr	r3, [r7, #20]
 802004a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 802004e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020050:	683b      	ldr	r3, [r7, #0]
 8020052:	695b      	ldr	r3, [r3, #20]
 8020054:	019b      	lsls	r3, r3, #6
 8020056:	697a      	ldr	r2, [r7, #20]
 8020058:	4313      	orrs	r3, r2
 802005a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	697a      	ldr	r2, [r7, #20]
 8020060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	68fa      	ldr	r2, [r7, #12]
 8020066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020068:	683b      	ldr	r3, [r7, #0]
 802006a:	685a      	ldr	r2, [r3, #4]
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	693a      	ldr	r2, [r7, #16]
 8020074:	621a      	str	r2, [r3, #32]
}
 8020076:	bf00      	nop
 8020078:	371c      	adds	r7, #28
 802007a:	46bd      	mov	sp, r7
 802007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020080:	4770      	bx	lr
 8020082:	bf00      	nop
 8020084:	feff8fff 	.word	0xfeff8fff
 8020088:	40010000 	.word	0x40010000
 802008c:	40010400 	.word	0x40010400
 8020090:	40014000 	.word	0x40014000
 8020094:	40014400 	.word	0x40014400
 8020098:	40014800 	.word	0x40014800

0802009c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 802009c:	b480      	push	{r7}
 802009e:	b087      	sub	sp, #28
 80200a0:	af00      	add	r7, sp, #0
 80200a2:	6078      	str	r0, [r7, #4]
 80200a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	6a1b      	ldr	r3, [r3, #32]
 80200aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	6a1b      	ldr	r3, [r3, #32]
 80200b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	685b      	ldr	r3, [r3, #4]
 80200bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80200c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80200c4:	68fa      	ldr	r2, [r7, #12]
 80200c6:	4b21      	ldr	r3, [pc, #132]	@ (802014c <TIM_OC5_SetConfig+0xb0>)
 80200c8:	4013      	ands	r3, r2
 80200ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80200cc:	683b      	ldr	r3, [r7, #0]
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	68fa      	ldr	r2, [r7, #12]
 80200d2:	4313      	orrs	r3, r2
 80200d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80200d6:	693b      	ldr	r3, [r7, #16]
 80200d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80200dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80200de:	683b      	ldr	r3, [r7, #0]
 80200e0:	689b      	ldr	r3, [r3, #8]
 80200e2:	041b      	lsls	r3, r3, #16
 80200e4:	693a      	ldr	r2, [r7, #16]
 80200e6:	4313      	orrs	r3, r2
 80200e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	4a18      	ldr	r2, [pc, #96]	@ (8020150 <TIM_OC5_SetConfig+0xb4>)
 80200ee:	4293      	cmp	r3, r2
 80200f0:	d00f      	beq.n	8020112 <TIM_OC5_SetConfig+0x76>
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	4a17      	ldr	r2, [pc, #92]	@ (8020154 <TIM_OC5_SetConfig+0xb8>)
 80200f6:	4293      	cmp	r3, r2
 80200f8:	d00b      	beq.n	8020112 <TIM_OC5_SetConfig+0x76>
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	4a16      	ldr	r2, [pc, #88]	@ (8020158 <TIM_OC5_SetConfig+0xbc>)
 80200fe:	4293      	cmp	r3, r2
 8020100:	d007      	beq.n	8020112 <TIM_OC5_SetConfig+0x76>
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	4a15      	ldr	r2, [pc, #84]	@ (802015c <TIM_OC5_SetConfig+0xc0>)
 8020106:	4293      	cmp	r3, r2
 8020108:	d003      	beq.n	8020112 <TIM_OC5_SetConfig+0x76>
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	4a14      	ldr	r2, [pc, #80]	@ (8020160 <TIM_OC5_SetConfig+0xc4>)
 802010e:	4293      	cmp	r3, r2
 8020110:	d109      	bne.n	8020126 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020112:	697b      	ldr	r3, [r7, #20]
 8020114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 802011a:	683b      	ldr	r3, [r7, #0]
 802011c:	695b      	ldr	r3, [r3, #20]
 802011e:	021b      	lsls	r3, r3, #8
 8020120:	697a      	ldr	r2, [r7, #20]
 8020122:	4313      	orrs	r3, r2
 8020124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	697a      	ldr	r2, [r7, #20]
 802012a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	68fa      	ldr	r2, [r7, #12]
 8020130:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020132:	683b      	ldr	r3, [r7, #0]
 8020134:	685a      	ldr	r2, [r3, #4]
 8020136:	687b      	ldr	r3, [r7, #4]
 8020138:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	693a      	ldr	r2, [r7, #16]
 802013e:	621a      	str	r2, [r3, #32]
}
 8020140:	bf00      	nop
 8020142:	371c      	adds	r7, #28
 8020144:	46bd      	mov	sp, r7
 8020146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802014a:	4770      	bx	lr
 802014c:	fffeff8f 	.word	0xfffeff8f
 8020150:	40010000 	.word	0x40010000
 8020154:	40010400 	.word	0x40010400
 8020158:	40014000 	.word	0x40014000
 802015c:	40014400 	.word	0x40014400
 8020160:	40014800 	.word	0x40014800

08020164 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020164:	b480      	push	{r7}
 8020166:	b087      	sub	sp, #28
 8020168:	af00      	add	r7, sp, #0
 802016a:	6078      	str	r0, [r7, #4]
 802016c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802016e:	687b      	ldr	r3, [r7, #4]
 8020170:	6a1b      	ldr	r3, [r3, #32]
 8020172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	6a1b      	ldr	r3, [r3, #32]
 8020178:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	685b      	ldr	r3, [r3, #4]
 8020184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020186:	687b      	ldr	r3, [r7, #4]
 8020188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802018a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 802018c:	68fa      	ldr	r2, [r7, #12]
 802018e:	4b22      	ldr	r3, [pc, #136]	@ (8020218 <TIM_OC6_SetConfig+0xb4>)
 8020190:	4013      	ands	r3, r2
 8020192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020194:	683b      	ldr	r3, [r7, #0]
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	021b      	lsls	r3, r3, #8
 802019a:	68fa      	ldr	r2, [r7, #12]
 802019c:	4313      	orrs	r3, r2
 802019e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80201a0:	693b      	ldr	r3, [r7, #16]
 80201a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80201a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80201a8:	683b      	ldr	r3, [r7, #0]
 80201aa:	689b      	ldr	r3, [r3, #8]
 80201ac:	051b      	lsls	r3, r3, #20
 80201ae:	693a      	ldr	r2, [r7, #16]
 80201b0:	4313      	orrs	r3, r2
 80201b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	4a19      	ldr	r2, [pc, #100]	@ (802021c <TIM_OC6_SetConfig+0xb8>)
 80201b8:	4293      	cmp	r3, r2
 80201ba:	d00f      	beq.n	80201dc <TIM_OC6_SetConfig+0x78>
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	4a18      	ldr	r2, [pc, #96]	@ (8020220 <TIM_OC6_SetConfig+0xbc>)
 80201c0:	4293      	cmp	r3, r2
 80201c2:	d00b      	beq.n	80201dc <TIM_OC6_SetConfig+0x78>
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	4a17      	ldr	r2, [pc, #92]	@ (8020224 <TIM_OC6_SetConfig+0xc0>)
 80201c8:	4293      	cmp	r3, r2
 80201ca:	d007      	beq.n	80201dc <TIM_OC6_SetConfig+0x78>
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	4a16      	ldr	r2, [pc, #88]	@ (8020228 <TIM_OC6_SetConfig+0xc4>)
 80201d0:	4293      	cmp	r3, r2
 80201d2:	d003      	beq.n	80201dc <TIM_OC6_SetConfig+0x78>
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	4a15      	ldr	r2, [pc, #84]	@ (802022c <TIM_OC6_SetConfig+0xc8>)
 80201d8:	4293      	cmp	r3, r2
 80201da:	d109      	bne.n	80201f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80201dc:	697b      	ldr	r3, [r7, #20]
 80201de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80201e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80201e4:	683b      	ldr	r3, [r7, #0]
 80201e6:	695b      	ldr	r3, [r3, #20]
 80201e8:	029b      	lsls	r3, r3, #10
 80201ea:	697a      	ldr	r2, [r7, #20]
 80201ec:	4313      	orrs	r3, r2
 80201ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	697a      	ldr	r2, [r7, #20]
 80201f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	68fa      	ldr	r2, [r7, #12]
 80201fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80201fc:	683b      	ldr	r3, [r7, #0]
 80201fe:	685a      	ldr	r2, [r3, #4]
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	693a      	ldr	r2, [r7, #16]
 8020208:	621a      	str	r2, [r3, #32]
}
 802020a:	bf00      	nop
 802020c:	371c      	adds	r7, #28
 802020e:	46bd      	mov	sp, r7
 8020210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020214:	4770      	bx	lr
 8020216:	bf00      	nop
 8020218:	feff8fff 	.word	0xfeff8fff
 802021c:	40010000 	.word	0x40010000
 8020220:	40010400 	.word	0x40010400
 8020224:	40014000 	.word	0x40014000
 8020228:	40014400 	.word	0x40014400
 802022c:	40014800 	.word	0x40014800

08020230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020230:	b480      	push	{r7}
 8020232:	b087      	sub	sp, #28
 8020234:	af00      	add	r7, sp, #0
 8020236:	60f8      	str	r0, [r7, #12]
 8020238:	60b9      	str	r1, [r7, #8]
 802023a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802023c:	68fb      	ldr	r3, [r7, #12]
 802023e:	6a1b      	ldr	r3, [r3, #32]
 8020240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020242:	68fb      	ldr	r3, [r7, #12]
 8020244:	6a1b      	ldr	r3, [r3, #32]
 8020246:	f023 0201 	bic.w	r2, r3, #1
 802024a:	68fb      	ldr	r3, [r7, #12]
 802024c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802024e:	68fb      	ldr	r3, [r7, #12]
 8020250:	699b      	ldr	r3, [r3, #24]
 8020252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020254:	693b      	ldr	r3, [r7, #16]
 8020256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802025a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	011b      	lsls	r3, r3, #4
 8020260:	693a      	ldr	r2, [r7, #16]
 8020262:	4313      	orrs	r3, r2
 8020264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020266:	697b      	ldr	r3, [r7, #20]
 8020268:	f023 030a 	bic.w	r3, r3, #10
 802026c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802026e:	697a      	ldr	r2, [r7, #20]
 8020270:	68bb      	ldr	r3, [r7, #8]
 8020272:	4313      	orrs	r3, r2
 8020274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	693a      	ldr	r2, [r7, #16]
 802027a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	697a      	ldr	r2, [r7, #20]
 8020280:	621a      	str	r2, [r3, #32]
}
 8020282:	bf00      	nop
 8020284:	371c      	adds	r7, #28
 8020286:	46bd      	mov	sp, r7
 8020288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802028c:	4770      	bx	lr

0802028e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802028e:	b480      	push	{r7}
 8020290:	b087      	sub	sp, #28
 8020292:	af00      	add	r7, sp, #0
 8020294:	60f8      	str	r0, [r7, #12]
 8020296:	60b9      	str	r1, [r7, #8]
 8020298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 802029a:	68fb      	ldr	r3, [r7, #12]
 802029c:	6a1b      	ldr	r3, [r3, #32]
 802029e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80202a0:	68fb      	ldr	r3, [r7, #12]
 80202a2:	6a1b      	ldr	r3, [r3, #32]
 80202a4:	f023 0210 	bic.w	r2, r3, #16
 80202a8:	68fb      	ldr	r3, [r7, #12]
 80202aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80202ac:	68fb      	ldr	r3, [r7, #12]
 80202ae:	699b      	ldr	r3, [r3, #24]
 80202b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80202b2:	693b      	ldr	r3, [r7, #16]
 80202b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80202b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	031b      	lsls	r3, r3, #12
 80202be:	693a      	ldr	r2, [r7, #16]
 80202c0:	4313      	orrs	r3, r2
 80202c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80202c4:	697b      	ldr	r3, [r7, #20]
 80202c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80202ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80202cc:	68bb      	ldr	r3, [r7, #8]
 80202ce:	011b      	lsls	r3, r3, #4
 80202d0:	697a      	ldr	r2, [r7, #20]
 80202d2:	4313      	orrs	r3, r2
 80202d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80202d6:	68fb      	ldr	r3, [r7, #12]
 80202d8:	693a      	ldr	r2, [r7, #16]
 80202da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80202dc:	68fb      	ldr	r3, [r7, #12]
 80202de:	697a      	ldr	r2, [r7, #20]
 80202e0:	621a      	str	r2, [r3, #32]
}
 80202e2:	bf00      	nop
 80202e4:	371c      	adds	r7, #28
 80202e6:	46bd      	mov	sp, r7
 80202e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ec:	4770      	bx	lr
	...

080202f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80202f0:	b480      	push	{r7}
 80202f2:	b085      	sub	sp, #20
 80202f4:	af00      	add	r7, sp, #0
 80202f6:	6078      	str	r0, [r7, #4]
 80202f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	689b      	ldr	r3, [r3, #8]
 80202fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020300:	68fa      	ldr	r2, [r7, #12]
 8020302:	4b09      	ldr	r3, [pc, #36]	@ (8020328 <TIM_ITRx_SetConfig+0x38>)
 8020304:	4013      	ands	r3, r2
 8020306:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020308:	683a      	ldr	r2, [r7, #0]
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	4313      	orrs	r3, r2
 802030e:	f043 0307 	orr.w	r3, r3, #7
 8020312:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	68fa      	ldr	r2, [r7, #12]
 8020318:	609a      	str	r2, [r3, #8]
}
 802031a:	bf00      	nop
 802031c:	3714      	adds	r7, #20
 802031e:	46bd      	mov	sp, r7
 8020320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020324:	4770      	bx	lr
 8020326:	bf00      	nop
 8020328:	ffcfff8f 	.word	0xffcfff8f

0802032c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802032c:	b480      	push	{r7}
 802032e:	b087      	sub	sp, #28
 8020330:	af00      	add	r7, sp, #0
 8020332:	60f8      	str	r0, [r7, #12]
 8020334:	60b9      	str	r1, [r7, #8]
 8020336:	607a      	str	r2, [r7, #4]
 8020338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	689b      	ldr	r3, [r3, #8]
 802033e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020340:	697b      	ldr	r3, [r7, #20]
 8020342:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020348:	683b      	ldr	r3, [r7, #0]
 802034a:	021a      	lsls	r2, r3, #8
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	431a      	orrs	r2, r3
 8020350:	68bb      	ldr	r3, [r7, #8]
 8020352:	4313      	orrs	r3, r2
 8020354:	697a      	ldr	r2, [r7, #20]
 8020356:	4313      	orrs	r3, r2
 8020358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802035a:	68fb      	ldr	r3, [r7, #12]
 802035c:	697a      	ldr	r2, [r7, #20]
 802035e:	609a      	str	r2, [r3, #8]
}
 8020360:	bf00      	nop
 8020362:	371c      	adds	r7, #28
 8020364:	46bd      	mov	sp, r7
 8020366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802036a:	4770      	bx	lr

0802036c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802036c:	b480      	push	{r7}
 802036e:	b085      	sub	sp, #20
 8020370:	af00      	add	r7, sp, #0
 8020372:	6078      	str	r0, [r7, #4]
 8020374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802037c:	2b01      	cmp	r3, #1
 802037e:	d101      	bne.n	8020384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020380:	2302      	movs	r3, #2
 8020382:	e06d      	b.n	8020460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	2201      	movs	r2, #1
 8020388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	2202      	movs	r2, #2
 8020390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	685b      	ldr	r3, [r3, #4]
 802039a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	681b      	ldr	r3, [r3, #0]
 80203a0:	689b      	ldr	r3, [r3, #8]
 80203a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	4a30      	ldr	r2, [pc, #192]	@ (802046c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80203aa:	4293      	cmp	r3, r2
 80203ac:	d004      	beq.n	80203b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	4a2f      	ldr	r2, [pc, #188]	@ (8020470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80203b4:	4293      	cmp	r3, r2
 80203b6:	d108      	bne.n	80203ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80203be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80203c0:	683b      	ldr	r3, [r7, #0]
 80203c2:	685b      	ldr	r3, [r3, #4]
 80203c4:	68fa      	ldr	r2, [r7, #12]
 80203c6:	4313      	orrs	r3, r2
 80203c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80203ca:	68fb      	ldr	r3, [r7, #12]
 80203cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80203d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80203d2:	683b      	ldr	r3, [r7, #0]
 80203d4:	681b      	ldr	r3, [r3, #0]
 80203d6:	68fa      	ldr	r2, [r7, #12]
 80203d8:	4313      	orrs	r3, r2
 80203da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80203dc:	687b      	ldr	r3, [r7, #4]
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	68fa      	ldr	r2, [r7, #12]
 80203e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	681b      	ldr	r3, [r3, #0]
 80203e8:	4a20      	ldr	r2, [pc, #128]	@ (802046c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80203ea:	4293      	cmp	r3, r2
 80203ec:	d022      	beq.n	8020434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80203f6:	d01d      	beq.n	8020434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	681b      	ldr	r3, [r3, #0]
 80203fc:	4a1d      	ldr	r2, [pc, #116]	@ (8020474 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80203fe:	4293      	cmp	r3, r2
 8020400:	d018      	beq.n	8020434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	4a1c      	ldr	r2, [pc, #112]	@ (8020478 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020408:	4293      	cmp	r3, r2
 802040a:	d013      	beq.n	8020434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	4a1a      	ldr	r2, [pc, #104]	@ (802047c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8020412:	4293      	cmp	r3, r2
 8020414:	d00e      	beq.n	8020434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	4a15      	ldr	r2, [pc, #84]	@ (8020470 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802041c:	4293      	cmp	r3, r2
 802041e:	d009      	beq.n	8020434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	4a16      	ldr	r2, [pc, #88]	@ (8020480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020426:	4293      	cmp	r3, r2
 8020428:	d004      	beq.n	8020434 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	4a15      	ldr	r2, [pc, #84]	@ (8020484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020430:	4293      	cmp	r3, r2
 8020432:	d10c      	bne.n	802044e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020434:	68bb      	ldr	r3, [r7, #8]
 8020436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802043a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802043c:	683b      	ldr	r3, [r7, #0]
 802043e:	689b      	ldr	r3, [r3, #8]
 8020440:	68ba      	ldr	r2, [r7, #8]
 8020442:	4313      	orrs	r3, r2
 8020444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	68ba      	ldr	r2, [r7, #8]
 802044c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	2201      	movs	r2, #1
 8020452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	2200      	movs	r2, #0
 802045a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802045e:	2300      	movs	r3, #0
}
 8020460:	4618      	mov	r0, r3
 8020462:	3714      	adds	r7, #20
 8020464:	46bd      	mov	sp, r7
 8020466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802046a:	4770      	bx	lr
 802046c:	40010000 	.word	0x40010000
 8020470:	40010400 	.word	0x40010400
 8020474:	40000400 	.word	0x40000400
 8020478:	40000800 	.word	0x40000800
 802047c:	40000c00 	.word	0x40000c00
 8020480:	40001800 	.word	0x40001800
 8020484:	40014000 	.word	0x40014000

08020488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020488:	b580      	push	{r7, lr}
 802048a:	b082      	sub	sp, #8
 802048c:	af00      	add	r7, sp, #0
 802048e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	2b00      	cmp	r3, #0
 8020494:	d101      	bne.n	802049a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020496:	2301      	movs	r3, #1
 8020498:	e042      	b.n	8020520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	d106      	bne.n	80204b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	2200      	movs	r2, #0
 80204a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80204ac:	6878      	ldr	r0, [r7, #4]
 80204ae:	f7e1 ff4b 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	2224      	movs	r2, #36	@ 0x24
 80204b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	681b      	ldr	r3, [r3, #0]
 80204be:	681a      	ldr	r2, [r3, #0]
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	f022 0201 	bic.w	r2, r2, #1
 80204c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d002      	beq.n	80204d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80204d2:	6878      	ldr	r0, [r7, #4]
 80204d4:	f000 fd90 	bl	8020ff8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80204d8:	6878      	ldr	r0, [r7, #4]
 80204da:	f000 f825 	bl	8020528 <UART_SetConfig>
 80204de:	4603      	mov	r3, r0
 80204e0:	2b01      	cmp	r3, #1
 80204e2:	d101      	bne.n	80204e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80204e4:	2301      	movs	r3, #1
 80204e6:	e01b      	b.n	8020520 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	681b      	ldr	r3, [r3, #0]
 80204ec:	685a      	ldr	r2, [r3, #4]
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80204f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	689a      	ldr	r2, [r3, #8]
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	681b      	ldr	r3, [r3, #0]
 8020502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8020506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	681a      	ldr	r2, [r3, #0]
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	681b      	ldr	r3, [r3, #0]
 8020512:	f042 0201 	orr.w	r2, r2, #1
 8020516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020518:	6878      	ldr	r0, [r7, #4]
 802051a:	f000 fe0f 	bl	802113c <UART_CheckIdleState>
 802051e:	4603      	mov	r3, r0
}
 8020520:	4618      	mov	r0, r3
 8020522:	3708      	adds	r7, #8
 8020524:	46bd      	mov	sp, r7
 8020526:	bd80      	pop	{r7, pc}

08020528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8020528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802052c:	b092      	sub	sp, #72	@ 0x48
 802052e:	af00      	add	r7, sp, #0
 8020530:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020532:	2300      	movs	r3, #0
 8020534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020538:	697b      	ldr	r3, [r7, #20]
 802053a:	689a      	ldr	r2, [r3, #8]
 802053c:	697b      	ldr	r3, [r7, #20]
 802053e:	691b      	ldr	r3, [r3, #16]
 8020540:	431a      	orrs	r2, r3
 8020542:	697b      	ldr	r3, [r7, #20]
 8020544:	695b      	ldr	r3, [r3, #20]
 8020546:	431a      	orrs	r2, r3
 8020548:	697b      	ldr	r3, [r7, #20]
 802054a:	69db      	ldr	r3, [r3, #28]
 802054c:	4313      	orrs	r3, r2
 802054e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8020550:	697b      	ldr	r3, [r7, #20]
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	681a      	ldr	r2, [r3, #0]
 8020556:	4bbe      	ldr	r3, [pc, #760]	@ (8020850 <UART_SetConfig+0x328>)
 8020558:	4013      	ands	r3, r2
 802055a:	697a      	ldr	r2, [r7, #20]
 802055c:	6812      	ldr	r2, [r2, #0]
 802055e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020560:	430b      	orrs	r3, r1
 8020562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020564:	697b      	ldr	r3, [r7, #20]
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	685b      	ldr	r3, [r3, #4]
 802056a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802056e:	697b      	ldr	r3, [r7, #20]
 8020570:	68da      	ldr	r2, [r3, #12]
 8020572:	697b      	ldr	r3, [r7, #20]
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	430a      	orrs	r2, r1
 8020578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802057a:	697b      	ldr	r3, [r7, #20]
 802057c:	699b      	ldr	r3, [r3, #24]
 802057e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8020580:	697b      	ldr	r3, [r7, #20]
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	4ab3      	ldr	r2, [pc, #716]	@ (8020854 <UART_SetConfig+0x32c>)
 8020586:	4293      	cmp	r3, r2
 8020588:	d004      	beq.n	8020594 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802058a:	697b      	ldr	r3, [r7, #20]
 802058c:	6a1b      	ldr	r3, [r3, #32]
 802058e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020590:	4313      	orrs	r3, r2
 8020592:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8020594:	697b      	ldr	r3, [r7, #20]
 8020596:	681b      	ldr	r3, [r3, #0]
 8020598:	689a      	ldr	r2, [r3, #8]
 802059a:	4baf      	ldr	r3, [pc, #700]	@ (8020858 <UART_SetConfig+0x330>)
 802059c:	4013      	ands	r3, r2
 802059e:	697a      	ldr	r2, [r7, #20]
 80205a0:	6812      	ldr	r2, [r2, #0]
 80205a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80205a4:	430b      	orrs	r3, r1
 80205a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80205a8:	697b      	ldr	r3, [r7, #20]
 80205aa:	681b      	ldr	r3, [r3, #0]
 80205ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80205ae:	f023 010f 	bic.w	r1, r3, #15
 80205b2:	697b      	ldr	r3, [r7, #20]
 80205b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80205b6:	697b      	ldr	r3, [r7, #20]
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	430a      	orrs	r2, r1
 80205bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80205be:	697b      	ldr	r3, [r7, #20]
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	4aa6      	ldr	r2, [pc, #664]	@ (802085c <UART_SetConfig+0x334>)
 80205c4:	4293      	cmp	r3, r2
 80205c6:	d177      	bne.n	80206b8 <UART_SetConfig+0x190>
 80205c8:	4ba5      	ldr	r3, [pc, #660]	@ (8020860 <UART_SetConfig+0x338>)
 80205ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80205cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80205d0:	2b28      	cmp	r3, #40	@ 0x28
 80205d2:	d86d      	bhi.n	80206b0 <UART_SetConfig+0x188>
 80205d4:	a201      	add	r2, pc, #4	@ (adr r2, 80205dc <UART_SetConfig+0xb4>)
 80205d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205da:	bf00      	nop
 80205dc:	08020681 	.word	0x08020681
 80205e0:	080206b1 	.word	0x080206b1
 80205e4:	080206b1 	.word	0x080206b1
 80205e8:	080206b1 	.word	0x080206b1
 80205ec:	080206b1 	.word	0x080206b1
 80205f0:	080206b1 	.word	0x080206b1
 80205f4:	080206b1 	.word	0x080206b1
 80205f8:	080206b1 	.word	0x080206b1
 80205fc:	08020689 	.word	0x08020689
 8020600:	080206b1 	.word	0x080206b1
 8020604:	080206b1 	.word	0x080206b1
 8020608:	080206b1 	.word	0x080206b1
 802060c:	080206b1 	.word	0x080206b1
 8020610:	080206b1 	.word	0x080206b1
 8020614:	080206b1 	.word	0x080206b1
 8020618:	080206b1 	.word	0x080206b1
 802061c:	08020691 	.word	0x08020691
 8020620:	080206b1 	.word	0x080206b1
 8020624:	080206b1 	.word	0x080206b1
 8020628:	080206b1 	.word	0x080206b1
 802062c:	080206b1 	.word	0x080206b1
 8020630:	080206b1 	.word	0x080206b1
 8020634:	080206b1 	.word	0x080206b1
 8020638:	080206b1 	.word	0x080206b1
 802063c:	08020699 	.word	0x08020699
 8020640:	080206b1 	.word	0x080206b1
 8020644:	080206b1 	.word	0x080206b1
 8020648:	080206b1 	.word	0x080206b1
 802064c:	080206b1 	.word	0x080206b1
 8020650:	080206b1 	.word	0x080206b1
 8020654:	080206b1 	.word	0x080206b1
 8020658:	080206b1 	.word	0x080206b1
 802065c:	080206a1 	.word	0x080206a1
 8020660:	080206b1 	.word	0x080206b1
 8020664:	080206b1 	.word	0x080206b1
 8020668:	080206b1 	.word	0x080206b1
 802066c:	080206b1 	.word	0x080206b1
 8020670:	080206b1 	.word	0x080206b1
 8020674:	080206b1 	.word	0x080206b1
 8020678:	080206b1 	.word	0x080206b1
 802067c:	080206a9 	.word	0x080206a9
 8020680:	2301      	movs	r3, #1
 8020682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020686:	e222      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020688:	2304      	movs	r3, #4
 802068a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802068e:	e21e      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020690:	2308      	movs	r3, #8
 8020692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020696:	e21a      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020698:	2310      	movs	r3, #16
 802069a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802069e:	e216      	b.n	8020ace <UART_SetConfig+0x5a6>
 80206a0:	2320      	movs	r3, #32
 80206a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206a6:	e212      	b.n	8020ace <UART_SetConfig+0x5a6>
 80206a8:	2340      	movs	r3, #64	@ 0x40
 80206aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206ae:	e20e      	b.n	8020ace <UART_SetConfig+0x5a6>
 80206b0:	2380      	movs	r3, #128	@ 0x80
 80206b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206b6:	e20a      	b.n	8020ace <UART_SetConfig+0x5a6>
 80206b8:	697b      	ldr	r3, [r7, #20]
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	4a69      	ldr	r2, [pc, #420]	@ (8020864 <UART_SetConfig+0x33c>)
 80206be:	4293      	cmp	r3, r2
 80206c0:	d130      	bne.n	8020724 <UART_SetConfig+0x1fc>
 80206c2:	4b67      	ldr	r3, [pc, #412]	@ (8020860 <UART_SetConfig+0x338>)
 80206c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80206c6:	f003 0307 	and.w	r3, r3, #7
 80206ca:	2b05      	cmp	r3, #5
 80206cc:	d826      	bhi.n	802071c <UART_SetConfig+0x1f4>
 80206ce:	a201      	add	r2, pc, #4	@ (adr r2, 80206d4 <UART_SetConfig+0x1ac>)
 80206d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80206d4:	080206ed 	.word	0x080206ed
 80206d8:	080206f5 	.word	0x080206f5
 80206dc:	080206fd 	.word	0x080206fd
 80206e0:	08020705 	.word	0x08020705
 80206e4:	0802070d 	.word	0x0802070d
 80206e8:	08020715 	.word	0x08020715
 80206ec:	2300      	movs	r3, #0
 80206ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206f2:	e1ec      	b.n	8020ace <UART_SetConfig+0x5a6>
 80206f4:	2304      	movs	r3, #4
 80206f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80206fa:	e1e8      	b.n	8020ace <UART_SetConfig+0x5a6>
 80206fc:	2308      	movs	r3, #8
 80206fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020702:	e1e4      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020704:	2310      	movs	r3, #16
 8020706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802070a:	e1e0      	b.n	8020ace <UART_SetConfig+0x5a6>
 802070c:	2320      	movs	r3, #32
 802070e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020712:	e1dc      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020714:	2340      	movs	r3, #64	@ 0x40
 8020716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802071a:	e1d8      	b.n	8020ace <UART_SetConfig+0x5a6>
 802071c:	2380      	movs	r3, #128	@ 0x80
 802071e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020722:	e1d4      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020724:	697b      	ldr	r3, [r7, #20]
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	4a4f      	ldr	r2, [pc, #316]	@ (8020868 <UART_SetConfig+0x340>)
 802072a:	4293      	cmp	r3, r2
 802072c:	d130      	bne.n	8020790 <UART_SetConfig+0x268>
 802072e:	4b4c      	ldr	r3, [pc, #304]	@ (8020860 <UART_SetConfig+0x338>)
 8020730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020732:	f003 0307 	and.w	r3, r3, #7
 8020736:	2b05      	cmp	r3, #5
 8020738:	d826      	bhi.n	8020788 <UART_SetConfig+0x260>
 802073a:	a201      	add	r2, pc, #4	@ (adr r2, 8020740 <UART_SetConfig+0x218>)
 802073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020740:	08020759 	.word	0x08020759
 8020744:	08020761 	.word	0x08020761
 8020748:	08020769 	.word	0x08020769
 802074c:	08020771 	.word	0x08020771
 8020750:	08020779 	.word	0x08020779
 8020754:	08020781 	.word	0x08020781
 8020758:	2300      	movs	r3, #0
 802075a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802075e:	e1b6      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020760:	2304      	movs	r3, #4
 8020762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020766:	e1b2      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020768:	2308      	movs	r3, #8
 802076a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802076e:	e1ae      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020770:	2310      	movs	r3, #16
 8020772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020776:	e1aa      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020778:	2320      	movs	r3, #32
 802077a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802077e:	e1a6      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020780:	2340      	movs	r3, #64	@ 0x40
 8020782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020786:	e1a2      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020788:	2380      	movs	r3, #128	@ 0x80
 802078a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802078e:	e19e      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020790:	697b      	ldr	r3, [r7, #20]
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	4a35      	ldr	r2, [pc, #212]	@ (802086c <UART_SetConfig+0x344>)
 8020796:	4293      	cmp	r3, r2
 8020798:	d130      	bne.n	80207fc <UART_SetConfig+0x2d4>
 802079a:	4b31      	ldr	r3, [pc, #196]	@ (8020860 <UART_SetConfig+0x338>)
 802079c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802079e:	f003 0307 	and.w	r3, r3, #7
 80207a2:	2b05      	cmp	r3, #5
 80207a4:	d826      	bhi.n	80207f4 <UART_SetConfig+0x2cc>
 80207a6:	a201      	add	r2, pc, #4	@ (adr r2, 80207ac <UART_SetConfig+0x284>)
 80207a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80207ac:	080207c5 	.word	0x080207c5
 80207b0:	080207cd 	.word	0x080207cd
 80207b4:	080207d5 	.word	0x080207d5
 80207b8:	080207dd 	.word	0x080207dd
 80207bc:	080207e5 	.word	0x080207e5
 80207c0:	080207ed 	.word	0x080207ed
 80207c4:	2300      	movs	r3, #0
 80207c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207ca:	e180      	b.n	8020ace <UART_SetConfig+0x5a6>
 80207cc:	2304      	movs	r3, #4
 80207ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207d2:	e17c      	b.n	8020ace <UART_SetConfig+0x5a6>
 80207d4:	2308      	movs	r3, #8
 80207d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207da:	e178      	b.n	8020ace <UART_SetConfig+0x5a6>
 80207dc:	2310      	movs	r3, #16
 80207de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207e2:	e174      	b.n	8020ace <UART_SetConfig+0x5a6>
 80207e4:	2320      	movs	r3, #32
 80207e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207ea:	e170      	b.n	8020ace <UART_SetConfig+0x5a6>
 80207ec:	2340      	movs	r3, #64	@ 0x40
 80207ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207f2:	e16c      	b.n	8020ace <UART_SetConfig+0x5a6>
 80207f4:	2380      	movs	r3, #128	@ 0x80
 80207f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207fa:	e168      	b.n	8020ace <UART_SetConfig+0x5a6>
 80207fc:	697b      	ldr	r3, [r7, #20]
 80207fe:	681b      	ldr	r3, [r3, #0]
 8020800:	4a1b      	ldr	r2, [pc, #108]	@ (8020870 <UART_SetConfig+0x348>)
 8020802:	4293      	cmp	r3, r2
 8020804:	d142      	bne.n	802088c <UART_SetConfig+0x364>
 8020806:	4b16      	ldr	r3, [pc, #88]	@ (8020860 <UART_SetConfig+0x338>)
 8020808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802080a:	f003 0307 	and.w	r3, r3, #7
 802080e:	2b05      	cmp	r3, #5
 8020810:	d838      	bhi.n	8020884 <UART_SetConfig+0x35c>
 8020812:	a201      	add	r2, pc, #4	@ (adr r2, 8020818 <UART_SetConfig+0x2f0>)
 8020814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020818:	08020831 	.word	0x08020831
 802081c:	08020839 	.word	0x08020839
 8020820:	08020841 	.word	0x08020841
 8020824:	08020849 	.word	0x08020849
 8020828:	08020875 	.word	0x08020875
 802082c:	0802087d 	.word	0x0802087d
 8020830:	2300      	movs	r3, #0
 8020832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020836:	e14a      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020838:	2304      	movs	r3, #4
 802083a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802083e:	e146      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020840:	2308      	movs	r3, #8
 8020842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020846:	e142      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020848:	2310      	movs	r3, #16
 802084a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802084e:	e13e      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020850:	cfff69f3 	.word	0xcfff69f3
 8020854:	58000c00 	.word	0x58000c00
 8020858:	11fff4ff 	.word	0x11fff4ff
 802085c:	40011000 	.word	0x40011000
 8020860:	58024400 	.word	0x58024400
 8020864:	40004400 	.word	0x40004400
 8020868:	40004800 	.word	0x40004800
 802086c:	40004c00 	.word	0x40004c00
 8020870:	40005000 	.word	0x40005000
 8020874:	2320      	movs	r3, #32
 8020876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802087a:	e128      	b.n	8020ace <UART_SetConfig+0x5a6>
 802087c:	2340      	movs	r3, #64	@ 0x40
 802087e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020882:	e124      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020884:	2380      	movs	r3, #128	@ 0x80
 8020886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802088a:	e120      	b.n	8020ace <UART_SetConfig+0x5a6>
 802088c:	697b      	ldr	r3, [r7, #20]
 802088e:	681b      	ldr	r3, [r3, #0]
 8020890:	4acb      	ldr	r2, [pc, #812]	@ (8020bc0 <UART_SetConfig+0x698>)
 8020892:	4293      	cmp	r3, r2
 8020894:	d176      	bne.n	8020984 <UART_SetConfig+0x45c>
 8020896:	4bcb      	ldr	r3, [pc, #812]	@ (8020bc4 <UART_SetConfig+0x69c>)
 8020898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802089a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802089e:	2b28      	cmp	r3, #40	@ 0x28
 80208a0:	d86c      	bhi.n	802097c <UART_SetConfig+0x454>
 80208a2:	a201      	add	r2, pc, #4	@ (adr r2, 80208a8 <UART_SetConfig+0x380>)
 80208a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208a8:	0802094d 	.word	0x0802094d
 80208ac:	0802097d 	.word	0x0802097d
 80208b0:	0802097d 	.word	0x0802097d
 80208b4:	0802097d 	.word	0x0802097d
 80208b8:	0802097d 	.word	0x0802097d
 80208bc:	0802097d 	.word	0x0802097d
 80208c0:	0802097d 	.word	0x0802097d
 80208c4:	0802097d 	.word	0x0802097d
 80208c8:	08020955 	.word	0x08020955
 80208cc:	0802097d 	.word	0x0802097d
 80208d0:	0802097d 	.word	0x0802097d
 80208d4:	0802097d 	.word	0x0802097d
 80208d8:	0802097d 	.word	0x0802097d
 80208dc:	0802097d 	.word	0x0802097d
 80208e0:	0802097d 	.word	0x0802097d
 80208e4:	0802097d 	.word	0x0802097d
 80208e8:	0802095d 	.word	0x0802095d
 80208ec:	0802097d 	.word	0x0802097d
 80208f0:	0802097d 	.word	0x0802097d
 80208f4:	0802097d 	.word	0x0802097d
 80208f8:	0802097d 	.word	0x0802097d
 80208fc:	0802097d 	.word	0x0802097d
 8020900:	0802097d 	.word	0x0802097d
 8020904:	0802097d 	.word	0x0802097d
 8020908:	08020965 	.word	0x08020965
 802090c:	0802097d 	.word	0x0802097d
 8020910:	0802097d 	.word	0x0802097d
 8020914:	0802097d 	.word	0x0802097d
 8020918:	0802097d 	.word	0x0802097d
 802091c:	0802097d 	.word	0x0802097d
 8020920:	0802097d 	.word	0x0802097d
 8020924:	0802097d 	.word	0x0802097d
 8020928:	0802096d 	.word	0x0802096d
 802092c:	0802097d 	.word	0x0802097d
 8020930:	0802097d 	.word	0x0802097d
 8020934:	0802097d 	.word	0x0802097d
 8020938:	0802097d 	.word	0x0802097d
 802093c:	0802097d 	.word	0x0802097d
 8020940:	0802097d 	.word	0x0802097d
 8020944:	0802097d 	.word	0x0802097d
 8020948:	08020975 	.word	0x08020975
 802094c:	2301      	movs	r3, #1
 802094e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020952:	e0bc      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020954:	2304      	movs	r3, #4
 8020956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802095a:	e0b8      	b.n	8020ace <UART_SetConfig+0x5a6>
 802095c:	2308      	movs	r3, #8
 802095e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020962:	e0b4      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020964:	2310      	movs	r3, #16
 8020966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802096a:	e0b0      	b.n	8020ace <UART_SetConfig+0x5a6>
 802096c:	2320      	movs	r3, #32
 802096e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020972:	e0ac      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020974:	2340      	movs	r3, #64	@ 0x40
 8020976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802097a:	e0a8      	b.n	8020ace <UART_SetConfig+0x5a6>
 802097c:	2380      	movs	r3, #128	@ 0x80
 802097e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020982:	e0a4      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020984:	697b      	ldr	r3, [r7, #20]
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	4a8f      	ldr	r2, [pc, #572]	@ (8020bc8 <UART_SetConfig+0x6a0>)
 802098a:	4293      	cmp	r3, r2
 802098c:	d130      	bne.n	80209f0 <UART_SetConfig+0x4c8>
 802098e:	4b8d      	ldr	r3, [pc, #564]	@ (8020bc4 <UART_SetConfig+0x69c>)
 8020990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020992:	f003 0307 	and.w	r3, r3, #7
 8020996:	2b05      	cmp	r3, #5
 8020998:	d826      	bhi.n	80209e8 <UART_SetConfig+0x4c0>
 802099a:	a201      	add	r2, pc, #4	@ (adr r2, 80209a0 <UART_SetConfig+0x478>)
 802099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209a0:	080209b9 	.word	0x080209b9
 80209a4:	080209c1 	.word	0x080209c1
 80209a8:	080209c9 	.word	0x080209c9
 80209ac:	080209d1 	.word	0x080209d1
 80209b0:	080209d9 	.word	0x080209d9
 80209b4:	080209e1 	.word	0x080209e1
 80209b8:	2300      	movs	r3, #0
 80209ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209be:	e086      	b.n	8020ace <UART_SetConfig+0x5a6>
 80209c0:	2304      	movs	r3, #4
 80209c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209c6:	e082      	b.n	8020ace <UART_SetConfig+0x5a6>
 80209c8:	2308      	movs	r3, #8
 80209ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209ce:	e07e      	b.n	8020ace <UART_SetConfig+0x5a6>
 80209d0:	2310      	movs	r3, #16
 80209d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209d6:	e07a      	b.n	8020ace <UART_SetConfig+0x5a6>
 80209d8:	2320      	movs	r3, #32
 80209da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209de:	e076      	b.n	8020ace <UART_SetConfig+0x5a6>
 80209e0:	2340      	movs	r3, #64	@ 0x40
 80209e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209e6:	e072      	b.n	8020ace <UART_SetConfig+0x5a6>
 80209e8:	2380      	movs	r3, #128	@ 0x80
 80209ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209ee:	e06e      	b.n	8020ace <UART_SetConfig+0x5a6>
 80209f0:	697b      	ldr	r3, [r7, #20]
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	4a75      	ldr	r2, [pc, #468]	@ (8020bcc <UART_SetConfig+0x6a4>)
 80209f6:	4293      	cmp	r3, r2
 80209f8:	d130      	bne.n	8020a5c <UART_SetConfig+0x534>
 80209fa:	4b72      	ldr	r3, [pc, #456]	@ (8020bc4 <UART_SetConfig+0x69c>)
 80209fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80209fe:	f003 0307 	and.w	r3, r3, #7
 8020a02:	2b05      	cmp	r3, #5
 8020a04:	d826      	bhi.n	8020a54 <UART_SetConfig+0x52c>
 8020a06:	a201      	add	r2, pc, #4	@ (adr r2, 8020a0c <UART_SetConfig+0x4e4>)
 8020a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a0c:	08020a25 	.word	0x08020a25
 8020a10:	08020a2d 	.word	0x08020a2d
 8020a14:	08020a35 	.word	0x08020a35
 8020a18:	08020a3d 	.word	0x08020a3d
 8020a1c:	08020a45 	.word	0x08020a45
 8020a20:	08020a4d 	.word	0x08020a4d
 8020a24:	2300      	movs	r3, #0
 8020a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a2a:	e050      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a2c:	2304      	movs	r3, #4
 8020a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a32:	e04c      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a34:	2308      	movs	r3, #8
 8020a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a3a:	e048      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a3c:	2310      	movs	r3, #16
 8020a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a42:	e044      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a44:	2320      	movs	r3, #32
 8020a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a4a:	e040      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a4c:	2340      	movs	r3, #64	@ 0x40
 8020a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a52:	e03c      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a54:	2380      	movs	r3, #128	@ 0x80
 8020a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a5a:	e038      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a5c:	697b      	ldr	r3, [r7, #20]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	4a5b      	ldr	r2, [pc, #364]	@ (8020bd0 <UART_SetConfig+0x6a8>)
 8020a62:	4293      	cmp	r3, r2
 8020a64:	d130      	bne.n	8020ac8 <UART_SetConfig+0x5a0>
 8020a66:	4b57      	ldr	r3, [pc, #348]	@ (8020bc4 <UART_SetConfig+0x69c>)
 8020a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020a6a:	f003 0307 	and.w	r3, r3, #7
 8020a6e:	2b05      	cmp	r3, #5
 8020a70:	d826      	bhi.n	8020ac0 <UART_SetConfig+0x598>
 8020a72:	a201      	add	r2, pc, #4	@ (adr r2, 8020a78 <UART_SetConfig+0x550>)
 8020a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a78:	08020a91 	.word	0x08020a91
 8020a7c:	08020a99 	.word	0x08020a99
 8020a80:	08020aa1 	.word	0x08020aa1
 8020a84:	08020aa9 	.word	0x08020aa9
 8020a88:	08020ab1 	.word	0x08020ab1
 8020a8c:	08020ab9 	.word	0x08020ab9
 8020a90:	2302      	movs	r3, #2
 8020a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a96:	e01a      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020a98:	2304      	movs	r3, #4
 8020a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a9e:	e016      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020aa0:	2308      	movs	r3, #8
 8020aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020aa6:	e012      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020aa8:	2310      	movs	r3, #16
 8020aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020aae:	e00e      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020ab0:	2320      	movs	r3, #32
 8020ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ab6:	e00a      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020ab8:	2340      	movs	r3, #64	@ 0x40
 8020aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020abe:	e006      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020ac0:	2380      	movs	r3, #128	@ 0x80
 8020ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ac6:	e002      	b.n	8020ace <UART_SetConfig+0x5a6>
 8020ac8:	2380      	movs	r3, #128	@ 0x80
 8020aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8020ace:	697b      	ldr	r3, [r7, #20]
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	4a3f      	ldr	r2, [pc, #252]	@ (8020bd0 <UART_SetConfig+0x6a8>)
 8020ad4:	4293      	cmp	r3, r2
 8020ad6:	f040 80f8 	bne.w	8020cca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8020ada:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020ade:	2b20      	cmp	r3, #32
 8020ae0:	dc46      	bgt.n	8020b70 <UART_SetConfig+0x648>
 8020ae2:	2b02      	cmp	r3, #2
 8020ae4:	f2c0 8082 	blt.w	8020bec <UART_SetConfig+0x6c4>
 8020ae8:	3b02      	subs	r3, #2
 8020aea:	2b1e      	cmp	r3, #30
 8020aec:	d87e      	bhi.n	8020bec <UART_SetConfig+0x6c4>
 8020aee:	a201      	add	r2, pc, #4	@ (adr r2, 8020af4 <UART_SetConfig+0x5cc>)
 8020af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020af4:	08020b77 	.word	0x08020b77
 8020af8:	08020bed 	.word	0x08020bed
 8020afc:	08020b7f 	.word	0x08020b7f
 8020b00:	08020bed 	.word	0x08020bed
 8020b04:	08020bed 	.word	0x08020bed
 8020b08:	08020bed 	.word	0x08020bed
 8020b0c:	08020b8f 	.word	0x08020b8f
 8020b10:	08020bed 	.word	0x08020bed
 8020b14:	08020bed 	.word	0x08020bed
 8020b18:	08020bed 	.word	0x08020bed
 8020b1c:	08020bed 	.word	0x08020bed
 8020b20:	08020bed 	.word	0x08020bed
 8020b24:	08020bed 	.word	0x08020bed
 8020b28:	08020bed 	.word	0x08020bed
 8020b2c:	08020b9f 	.word	0x08020b9f
 8020b30:	08020bed 	.word	0x08020bed
 8020b34:	08020bed 	.word	0x08020bed
 8020b38:	08020bed 	.word	0x08020bed
 8020b3c:	08020bed 	.word	0x08020bed
 8020b40:	08020bed 	.word	0x08020bed
 8020b44:	08020bed 	.word	0x08020bed
 8020b48:	08020bed 	.word	0x08020bed
 8020b4c:	08020bed 	.word	0x08020bed
 8020b50:	08020bed 	.word	0x08020bed
 8020b54:	08020bed 	.word	0x08020bed
 8020b58:	08020bed 	.word	0x08020bed
 8020b5c:	08020bed 	.word	0x08020bed
 8020b60:	08020bed 	.word	0x08020bed
 8020b64:	08020bed 	.word	0x08020bed
 8020b68:	08020bed 	.word	0x08020bed
 8020b6c:	08020bdf 	.word	0x08020bdf
 8020b70:	2b40      	cmp	r3, #64	@ 0x40
 8020b72:	d037      	beq.n	8020be4 <UART_SetConfig+0x6bc>
 8020b74:	e03a      	b.n	8020bec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8020b76:	f7fd fc87 	bl	801e488 <HAL_RCCEx_GetD3PCLK1Freq>
 8020b7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020b7c:	e03c      	b.n	8020bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020b82:	4618      	mov	r0, r3
 8020b84:	f7fd fc96 	bl	801e4b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020b8c:	e034      	b.n	8020bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020b8e:	f107 0318 	add.w	r3, r7, #24
 8020b92:	4618      	mov	r0, r3
 8020b94:	f7fd fde2 	bl	801e75c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020b98:	69fb      	ldr	r3, [r7, #28]
 8020b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020b9c:	e02c      	b.n	8020bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020b9e:	4b09      	ldr	r3, [pc, #36]	@ (8020bc4 <UART_SetConfig+0x69c>)
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	f003 0320 	and.w	r3, r3, #32
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	d016      	beq.n	8020bd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020baa:	4b06      	ldr	r3, [pc, #24]	@ (8020bc4 <UART_SetConfig+0x69c>)
 8020bac:	681b      	ldr	r3, [r3, #0]
 8020bae:	08db      	lsrs	r3, r3, #3
 8020bb0:	f003 0303 	and.w	r3, r3, #3
 8020bb4:	4a07      	ldr	r2, [pc, #28]	@ (8020bd4 <UART_SetConfig+0x6ac>)
 8020bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8020bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020bbc:	e01c      	b.n	8020bf8 <UART_SetConfig+0x6d0>
 8020bbe:	bf00      	nop
 8020bc0:	40011400 	.word	0x40011400
 8020bc4:	58024400 	.word	0x58024400
 8020bc8:	40007800 	.word	0x40007800
 8020bcc:	40007c00 	.word	0x40007c00
 8020bd0:	58000c00 	.word	0x58000c00
 8020bd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8020bd8:	4b9d      	ldr	r3, [pc, #628]	@ (8020e50 <UART_SetConfig+0x928>)
 8020bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020bdc:	e00c      	b.n	8020bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020bde:	4b9d      	ldr	r3, [pc, #628]	@ (8020e54 <UART_SetConfig+0x92c>)
 8020be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020be2:	e009      	b.n	8020bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020be4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020bea:	e005      	b.n	8020bf8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8020bec:	2300      	movs	r3, #0
 8020bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020bf0:	2301      	movs	r3, #1
 8020bf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020bf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	f000 81de 	beq.w	8020fbc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8020c00:	697b      	ldr	r3, [r7, #20]
 8020c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c04:	4a94      	ldr	r2, [pc, #592]	@ (8020e58 <UART_SetConfig+0x930>)
 8020c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020c0a:	461a      	mov	r2, r3
 8020c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8020c12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020c14:	697b      	ldr	r3, [r7, #20]
 8020c16:	685a      	ldr	r2, [r3, #4]
 8020c18:	4613      	mov	r3, r2
 8020c1a:	005b      	lsls	r3, r3, #1
 8020c1c:	4413      	add	r3, r2
 8020c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020c20:	429a      	cmp	r2, r3
 8020c22:	d305      	bcc.n	8020c30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8020c24:	697b      	ldr	r3, [r7, #20]
 8020c26:	685b      	ldr	r3, [r3, #4]
 8020c28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020c2c:	429a      	cmp	r2, r3
 8020c2e:	d903      	bls.n	8020c38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8020c30:	2301      	movs	r3, #1
 8020c32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020c36:	e1c1      	b.n	8020fbc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020c3a:	2200      	movs	r2, #0
 8020c3c:	60bb      	str	r3, [r7, #8]
 8020c3e:	60fa      	str	r2, [r7, #12]
 8020c40:	697b      	ldr	r3, [r7, #20]
 8020c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c44:	4a84      	ldr	r2, [pc, #528]	@ (8020e58 <UART_SetConfig+0x930>)
 8020c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020c4a:	b29b      	uxth	r3, r3
 8020c4c:	2200      	movs	r2, #0
 8020c4e:	603b      	str	r3, [r7, #0]
 8020c50:	607a      	str	r2, [r7, #4]
 8020c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020c56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020c5a:	f7df fba9 	bl	80003b0 <__aeabi_uldivmod>
 8020c5e:	4602      	mov	r2, r0
 8020c60:	460b      	mov	r3, r1
 8020c62:	4610      	mov	r0, r2
 8020c64:	4619      	mov	r1, r3
 8020c66:	f04f 0200 	mov.w	r2, #0
 8020c6a:	f04f 0300 	mov.w	r3, #0
 8020c6e:	020b      	lsls	r3, r1, #8
 8020c70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8020c74:	0202      	lsls	r2, r0, #8
 8020c76:	6979      	ldr	r1, [r7, #20]
 8020c78:	6849      	ldr	r1, [r1, #4]
 8020c7a:	0849      	lsrs	r1, r1, #1
 8020c7c:	2000      	movs	r0, #0
 8020c7e:	460c      	mov	r4, r1
 8020c80:	4605      	mov	r5, r0
 8020c82:	eb12 0804 	adds.w	r8, r2, r4
 8020c86:	eb43 0905 	adc.w	r9, r3, r5
 8020c8a:	697b      	ldr	r3, [r7, #20]
 8020c8c:	685b      	ldr	r3, [r3, #4]
 8020c8e:	2200      	movs	r2, #0
 8020c90:	469a      	mov	sl, r3
 8020c92:	4693      	mov	fp, r2
 8020c94:	4652      	mov	r2, sl
 8020c96:	465b      	mov	r3, fp
 8020c98:	4640      	mov	r0, r8
 8020c9a:	4649      	mov	r1, r9
 8020c9c:	f7df fb88 	bl	80003b0 <__aeabi_uldivmod>
 8020ca0:	4602      	mov	r2, r0
 8020ca2:	460b      	mov	r3, r1
 8020ca4:	4613      	mov	r3, r2
 8020ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8020ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020cae:	d308      	bcc.n	8020cc2 <UART_SetConfig+0x79a>
 8020cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020cb6:	d204      	bcs.n	8020cc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8020cb8:	697b      	ldr	r3, [r7, #20]
 8020cba:	681b      	ldr	r3, [r3, #0]
 8020cbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020cbe:	60da      	str	r2, [r3, #12]
 8020cc0:	e17c      	b.n	8020fbc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8020cc2:	2301      	movs	r3, #1
 8020cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020cc8:	e178      	b.n	8020fbc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020cca:	697b      	ldr	r3, [r7, #20]
 8020ccc:	69db      	ldr	r3, [r3, #28]
 8020cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020cd2:	f040 80c5 	bne.w	8020e60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8020cd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020cda:	2b20      	cmp	r3, #32
 8020cdc:	dc48      	bgt.n	8020d70 <UART_SetConfig+0x848>
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	db7b      	blt.n	8020dda <UART_SetConfig+0x8b2>
 8020ce2:	2b20      	cmp	r3, #32
 8020ce4:	d879      	bhi.n	8020dda <UART_SetConfig+0x8b2>
 8020ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8020cec <UART_SetConfig+0x7c4>)
 8020ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020cec:	08020d77 	.word	0x08020d77
 8020cf0:	08020d7f 	.word	0x08020d7f
 8020cf4:	08020ddb 	.word	0x08020ddb
 8020cf8:	08020ddb 	.word	0x08020ddb
 8020cfc:	08020d87 	.word	0x08020d87
 8020d00:	08020ddb 	.word	0x08020ddb
 8020d04:	08020ddb 	.word	0x08020ddb
 8020d08:	08020ddb 	.word	0x08020ddb
 8020d0c:	08020d97 	.word	0x08020d97
 8020d10:	08020ddb 	.word	0x08020ddb
 8020d14:	08020ddb 	.word	0x08020ddb
 8020d18:	08020ddb 	.word	0x08020ddb
 8020d1c:	08020ddb 	.word	0x08020ddb
 8020d20:	08020ddb 	.word	0x08020ddb
 8020d24:	08020ddb 	.word	0x08020ddb
 8020d28:	08020ddb 	.word	0x08020ddb
 8020d2c:	08020da7 	.word	0x08020da7
 8020d30:	08020ddb 	.word	0x08020ddb
 8020d34:	08020ddb 	.word	0x08020ddb
 8020d38:	08020ddb 	.word	0x08020ddb
 8020d3c:	08020ddb 	.word	0x08020ddb
 8020d40:	08020ddb 	.word	0x08020ddb
 8020d44:	08020ddb 	.word	0x08020ddb
 8020d48:	08020ddb 	.word	0x08020ddb
 8020d4c:	08020ddb 	.word	0x08020ddb
 8020d50:	08020ddb 	.word	0x08020ddb
 8020d54:	08020ddb 	.word	0x08020ddb
 8020d58:	08020ddb 	.word	0x08020ddb
 8020d5c:	08020ddb 	.word	0x08020ddb
 8020d60:	08020ddb 	.word	0x08020ddb
 8020d64:	08020ddb 	.word	0x08020ddb
 8020d68:	08020ddb 	.word	0x08020ddb
 8020d6c:	08020dcd 	.word	0x08020dcd
 8020d70:	2b40      	cmp	r3, #64	@ 0x40
 8020d72:	d02e      	beq.n	8020dd2 <UART_SetConfig+0x8aa>
 8020d74:	e031      	b.n	8020dda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020d76:	f7fc f951 	bl	801d01c <HAL_RCC_GetPCLK1Freq>
 8020d7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020d7c:	e033      	b.n	8020de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020d7e:	f7fc f963 	bl	801d048 <HAL_RCC_GetPCLK2Freq>
 8020d82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020d84:	e02f      	b.n	8020de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020d8a:	4618      	mov	r0, r3
 8020d8c:	f7fd fb92 	bl	801e4b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020d94:	e027      	b.n	8020de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020d96:	f107 0318 	add.w	r3, r7, #24
 8020d9a:	4618      	mov	r0, r3
 8020d9c:	f7fd fcde 	bl	801e75c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020da0:	69fb      	ldr	r3, [r7, #28]
 8020da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020da4:	e01f      	b.n	8020de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020da6:	4b2d      	ldr	r3, [pc, #180]	@ (8020e5c <UART_SetConfig+0x934>)
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	f003 0320 	and.w	r3, r3, #32
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	d009      	beq.n	8020dc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020db2:	4b2a      	ldr	r3, [pc, #168]	@ (8020e5c <UART_SetConfig+0x934>)
 8020db4:	681b      	ldr	r3, [r3, #0]
 8020db6:	08db      	lsrs	r3, r3, #3
 8020db8:	f003 0303 	and.w	r3, r3, #3
 8020dbc:	4a24      	ldr	r2, [pc, #144]	@ (8020e50 <UART_SetConfig+0x928>)
 8020dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8020dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020dc4:	e00f      	b.n	8020de6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8020dc6:	4b22      	ldr	r3, [pc, #136]	@ (8020e50 <UART_SetConfig+0x928>)
 8020dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020dca:	e00c      	b.n	8020de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020dcc:	4b21      	ldr	r3, [pc, #132]	@ (8020e54 <UART_SetConfig+0x92c>)
 8020dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020dd0:	e009      	b.n	8020de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020dd8:	e005      	b.n	8020de6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8020dda:	2300      	movs	r3, #0
 8020ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020dde:	2301      	movs	r3, #1
 8020de0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	f000 80e7 	beq.w	8020fbc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020dee:	697b      	ldr	r3, [r7, #20]
 8020df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020df2:	4a19      	ldr	r2, [pc, #100]	@ (8020e58 <UART_SetConfig+0x930>)
 8020df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020df8:	461a      	mov	r2, r3
 8020dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8020e00:	005a      	lsls	r2, r3, #1
 8020e02:	697b      	ldr	r3, [r7, #20]
 8020e04:	685b      	ldr	r3, [r3, #4]
 8020e06:	085b      	lsrs	r3, r3, #1
 8020e08:	441a      	add	r2, r3
 8020e0a:	697b      	ldr	r3, [r7, #20]
 8020e0c:	685b      	ldr	r3, [r3, #4]
 8020e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020e12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e16:	2b0f      	cmp	r3, #15
 8020e18:	d916      	bls.n	8020e48 <UART_SetConfig+0x920>
 8020e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020e20:	d212      	bcs.n	8020e48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e24:	b29b      	uxth	r3, r3
 8020e26:	f023 030f 	bic.w	r3, r3, #15
 8020e2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e2e:	085b      	lsrs	r3, r3, #1
 8020e30:	b29b      	uxth	r3, r3
 8020e32:	f003 0307 	and.w	r3, r3, #7
 8020e36:	b29a      	uxth	r2, r3
 8020e38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8020e3a:	4313      	orrs	r3, r2
 8020e3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8020e3e:	697b      	ldr	r3, [r7, #20]
 8020e40:	681b      	ldr	r3, [r3, #0]
 8020e42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020e44:	60da      	str	r2, [r3, #12]
 8020e46:	e0b9      	b.n	8020fbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020e48:	2301      	movs	r3, #1
 8020e4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020e4e:	e0b5      	b.n	8020fbc <UART_SetConfig+0xa94>
 8020e50:	03d09000 	.word	0x03d09000
 8020e54:	003d0900 	.word	0x003d0900
 8020e58:	0802702c 	.word	0x0802702c
 8020e5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8020e60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020e64:	2b20      	cmp	r3, #32
 8020e66:	dc49      	bgt.n	8020efc <UART_SetConfig+0x9d4>
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	db7c      	blt.n	8020f66 <UART_SetConfig+0xa3e>
 8020e6c:	2b20      	cmp	r3, #32
 8020e6e:	d87a      	bhi.n	8020f66 <UART_SetConfig+0xa3e>
 8020e70:	a201      	add	r2, pc, #4	@ (adr r2, 8020e78 <UART_SetConfig+0x950>)
 8020e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e76:	bf00      	nop
 8020e78:	08020f03 	.word	0x08020f03
 8020e7c:	08020f0b 	.word	0x08020f0b
 8020e80:	08020f67 	.word	0x08020f67
 8020e84:	08020f67 	.word	0x08020f67
 8020e88:	08020f13 	.word	0x08020f13
 8020e8c:	08020f67 	.word	0x08020f67
 8020e90:	08020f67 	.word	0x08020f67
 8020e94:	08020f67 	.word	0x08020f67
 8020e98:	08020f23 	.word	0x08020f23
 8020e9c:	08020f67 	.word	0x08020f67
 8020ea0:	08020f67 	.word	0x08020f67
 8020ea4:	08020f67 	.word	0x08020f67
 8020ea8:	08020f67 	.word	0x08020f67
 8020eac:	08020f67 	.word	0x08020f67
 8020eb0:	08020f67 	.word	0x08020f67
 8020eb4:	08020f67 	.word	0x08020f67
 8020eb8:	08020f33 	.word	0x08020f33
 8020ebc:	08020f67 	.word	0x08020f67
 8020ec0:	08020f67 	.word	0x08020f67
 8020ec4:	08020f67 	.word	0x08020f67
 8020ec8:	08020f67 	.word	0x08020f67
 8020ecc:	08020f67 	.word	0x08020f67
 8020ed0:	08020f67 	.word	0x08020f67
 8020ed4:	08020f67 	.word	0x08020f67
 8020ed8:	08020f67 	.word	0x08020f67
 8020edc:	08020f67 	.word	0x08020f67
 8020ee0:	08020f67 	.word	0x08020f67
 8020ee4:	08020f67 	.word	0x08020f67
 8020ee8:	08020f67 	.word	0x08020f67
 8020eec:	08020f67 	.word	0x08020f67
 8020ef0:	08020f67 	.word	0x08020f67
 8020ef4:	08020f67 	.word	0x08020f67
 8020ef8:	08020f59 	.word	0x08020f59
 8020efc:	2b40      	cmp	r3, #64	@ 0x40
 8020efe:	d02e      	beq.n	8020f5e <UART_SetConfig+0xa36>
 8020f00:	e031      	b.n	8020f66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020f02:	f7fc f88b 	bl	801d01c <HAL_RCC_GetPCLK1Freq>
 8020f06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020f08:	e033      	b.n	8020f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020f0a:	f7fc f89d 	bl	801d048 <HAL_RCC_GetPCLK2Freq>
 8020f0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020f10:	e02f      	b.n	8020f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020f16:	4618      	mov	r0, r3
 8020f18:	f7fd facc 	bl	801e4b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f20:	e027      	b.n	8020f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020f22:	f107 0318 	add.w	r3, r7, #24
 8020f26:	4618      	mov	r0, r3
 8020f28:	f7fd fc18 	bl	801e75c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020f2c:	69fb      	ldr	r3, [r7, #28]
 8020f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f30:	e01f      	b.n	8020f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020f32:	4b2d      	ldr	r3, [pc, #180]	@ (8020fe8 <UART_SetConfig+0xac0>)
 8020f34:	681b      	ldr	r3, [r3, #0]
 8020f36:	f003 0320 	and.w	r3, r3, #32
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d009      	beq.n	8020f52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8020fe8 <UART_SetConfig+0xac0>)
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	08db      	lsrs	r3, r3, #3
 8020f44:	f003 0303 	and.w	r3, r3, #3
 8020f48:	4a28      	ldr	r2, [pc, #160]	@ (8020fec <UART_SetConfig+0xac4>)
 8020f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8020f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020f50:	e00f      	b.n	8020f72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8020f52:	4b26      	ldr	r3, [pc, #152]	@ (8020fec <UART_SetConfig+0xac4>)
 8020f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f56:	e00c      	b.n	8020f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020f58:	4b25      	ldr	r3, [pc, #148]	@ (8020ff0 <UART_SetConfig+0xac8>)
 8020f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f5c:	e009      	b.n	8020f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f64:	e005      	b.n	8020f72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8020f66:	2300      	movs	r3, #0
 8020f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020f6a:	2301      	movs	r3, #1
 8020f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020f70:	bf00      	nop
    }

    if (pclk != 0U)
 8020f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d021      	beq.n	8020fbc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020f78:	697b      	ldr	r3, [r7, #20]
 8020f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8020ff4 <UART_SetConfig+0xacc>)
 8020f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020f82:	461a      	mov	r2, r3
 8020f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020f86:	fbb3 f2f2 	udiv	r2, r3, r2
 8020f8a:	697b      	ldr	r3, [r7, #20]
 8020f8c:	685b      	ldr	r3, [r3, #4]
 8020f8e:	085b      	lsrs	r3, r3, #1
 8020f90:	441a      	add	r2, r3
 8020f92:	697b      	ldr	r3, [r7, #20]
 8020f94:	685b      	ldr	r3, [r3, #4]
 8020f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8020f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020f9e:	2b0f      	cmp	r3, #15
 8020fa0:	d909      	bls.n	8020fb6 <UART_SetConfig+0xa8e>
 8020fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020fa8:	d205      	bcs.n	8020fb6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8020faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020fac:	b29a      	uxth	r2, r3
 8020fae:	697b      	ldr	r3, [r7, #20]
 8020fb0:	681b      	ldr	r3, [r3, #0]
 8020fb2:	60da      	str	r2, [r3, #12]
 8020fb4:	e002      	b.n	8020fbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020fb6:	2301      	movs	r3, #1
 8020fb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8020fbc:	697b      	ldr	r3, [r7, #20]
 8020fbe:	2201      	movs	r2, #1
 8020fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8020fc4:	697b      	ldr	r3, [r7, #20]
 8020fc6:	2201      	movs	r2, #1
 8020fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020fcc:	697b      	ldr	r3, [r7, #20]
 8020fce:	2200      	movs	r2, #0
 8020fd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8020fd2:	697b      	ldr	r3, [r7, #20]
 8020fd4:	2200      	movs	r2, #0
 8020fd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8020fd8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8020fdc:	4618      	mov	r0, r3
 8020fde:	3748      	adds	r7, #72	@ 0x48
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020fe6:	bf00      	nop
 8020fe8:	58024400 	.word	0x58024400
 8020fec:	03d09000 	.word	0x03d09000
 8020ff0:	003d0900 	.word	0x003d0900
 8020ff4:	0802702c 	.word	0x0802702c

08020ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020ff8:	b480      	push	{r7}
 8020ffa:	b083      	sub	sp, #12
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021004:	f003 0308 	and.w	r3, r3, #8
 8021008:	2b00      	cmp	r3, #0
 802100a:	d00a      	beq.n	8021022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	681b      	ldr	r3, [r3, #0]
 8021010:	685b      	ldr	r3, [r3, #4]
 8021012:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802101a:	687b      	ldr	r3, [r7, #4]
 802101c:	681b      	ldr	r3, [r3, #0]
 802101e:	430a      	orrs	r2, r1
 8021020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021022:	687b      	ldr	r3, [r7, #4]
 8021024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021026:	f003 0301 	and.w	r3, r3, #1
 802102a:	2b00      	cmp	r3, #0
 802102c:	d00a      	beq.n	8021044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	681b      	ldr	r3, [r3, #0]
 8021032:	685b      	ldr	r3, [r3, #4]
 8021034:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	681b      	ldr	r3, [r3, #0]
 8021040:	430a      	orrs	r2, r1
 8021042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021048:	f003 0302 	and.w	r3, r3, #2
 802104c:	2b00      	cmp	r3, #0
 802104e:	d00a      	beq.n	8021066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	685b      	ldr	r3, [r3, #4]
 8021056:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	430a      	orrs	r2, r1
 8021064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802106a:	f003 0304 	and.w	r3, r3, #4
 802106e:	2b00      	cmp	r3, #0
 8021070:	d00a      	beq.n	8021088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	681b      	ldr	r3, [r3, #0]
 8021076:	685b      	ldr	r3, [r3, #4]
 8021078:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 802107c:	687b      	ldr	r3, [r7, #4]
 802107e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	430a      	orrs	r2, r1
 8021086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802108c:	f003 0310 	and.w	r3, r3, #16
 8021090:	2b00      	cmp	r3, #0
 8021092:	d00a      	beq.n	80210aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021094:	687b      	ldr	r3, [r7, #4]
 8021096:	681b      	ldr	r3, [r3, #0]
 8021098:	689b      	ldr	r3, [r3, #8]
 802109a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	681b      	ldr	r3, [r3, #0]
 80210a6:	430a      	orrs	r2, r1
 80210a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210ae:	f003 0320 	and.w	r3, r3, #32
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d00a      	beq.n	80210cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80210b6:	687b      	ldr	r3, [r7, #4]
 80210b8:	681b      	ldr	r3, [r3, #0]
 80210ba:	689b      	ldr	r3, [r3, #8]
 80210bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80210c4:	687b      	ldr	r3, [r7, #4]
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	430a      	orrs	r2, r1
 80210ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	d01a      	beq.n	802110e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	681b      	ldr	r3, [r3, #0]
 80210dc:	685b      	ldr	r3, [r3, #4]
 80210de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80210e2:	687b      	ldr	r3, [r7, #4]
 80210e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	430a      	orrs	r2, r1
 80210ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80210f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80210f6:	d10a      	bne.n	802110e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	685b      	ldr	r3, [r3, #4]
 80210fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	681b      	ldr	r3, [r3, #0]
 802110a:	430a      	orrs	r2, r1
 802110c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021116:	2b00      	cmp	r3, #0
 8021118:	d00a      	beq.n	8021130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	685b      	ldr	r3, [r3, #4]
 8021120:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	430a      	orrs	r2, r1
 802112e:	605a      	str	r2, [r3, #4]
  }
}
 8021130:	bf00      	nop
 8021132:	370c      	adds	r7, #12
 8021134:	46bd      	mov	sp, r7
 8021136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802113a:	4770      	bx	lr

0802113c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802113c:	b580      	push	{r7, lr}
 802113e:	b098      	sub	sp, #96	@ 0x60
 8021140:	af02      	add	r7, sp, #8
 8021142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	2200      	movs	r2, #0
 8021148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802114c:	f7f8 fb94 	bl	8019878 <HAL_GetTick>
 8021150:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	681b      	ldr	r3, [r3, #0]
 8021156:	681b      	ldr	r3, [r3, #0]
 8021158:	f003 0308 	and.w	r3, r3, #8
 802115c:	2b08      	cmp	r3, #8
 802115e:	d12f      	bne.n	80211c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021160:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021164:	9300      	str	r3, [sp, #0]
 8021166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021168:	2200      	movs	r2, #0
 802116a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802116e:	6878      	ldr	r0, [r7, #4]
 8021170:	f000 f88e 	bl	8021290 <UART_WaitOnFlagUntilTimeout>
 8021174:	4603      	mov	r3, r0
 8021176:	2b00      	cmp	r3, #0
 8021178:	d022      	beq.n	80211c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	681b      	ldr	r3, [r3, #0]
 802117e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021182:	e853 3f00 	ldrex	r3, [r3]
 8021186:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8021188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802118a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802118e:	653b      	str	r3, [r7, #80]	@ 0x50
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	461a      	mov	r2, r3
 8021196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021198:	647b      	str	r3, [r7, #68]	@ 0x44
 802119a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802119c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802119e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80211a0:	e841 2300 	strex	r3, r2, [r1]
 80211a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80211a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d1e6      	bne.n	802117a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	2220      	movs	r2, #32
 80211b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	2200      	movs	r2, #0
 80211b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80211bc:	2303      	movs	r3, #3
 80211be:	e063      	b.n	8021288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	f003 0304 	and.w	r3, r3, #4
 80211ca:	2b04      	cmp	r3, #4
 80211cc:	d149      	bne.n	8021262 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80211ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80211d2:	9300      	str	r3, [sp, #0]
 80211d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80211d6:	2200      	movs	r2, #0
 80211d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80211dc:	6878      	ldr	r0, [r7, #4]
 80211de:	f000 f857 	bl	8021290 <UART_WaitOnFlagUntilTimeout>
 80211e2:	4603      	mov	r3, r0
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d03c      	beq.n	8021262 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80211ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80211f0:	e853 3f00 	ldrex	r3, [r3]
 80211f4:	623b      	str	r3, [r7, #32]
   return(result);
 80211f6:	6a3b      	ldr	r3, [r7, #32]
 80211f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80211fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	681b      	ldr	r3, [r3, #0]
 8021202:	461a      	mov	r2, r3
 8021204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021206:	633b      	str	r3, [r7, #48]	@ 0x30
 8021208:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802120a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802120c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802120e:	e841 2300 	strex	r3, r2, [r1]
 8021212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021216:	2b00      	cmp	r3, #0
 8021218:	d1e6      	bne.n	80211e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	3308      	adds	r3, #8
 8021220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021222:	693b      	ldr	r3, [r7, #16]
 8021224:	e853 3f00 	ldrex	r3, [r3]
 8021228:	60fb      	str	r3, [r7, #12]
   return(result);
 802122a:	68fb      	ldr	r3, [r7, #12]
 802122c:	f023 0301 	bic.w	r3, r3, #1
 8021230:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	681b      	ldr	r3, [r3, #0]
 8021236:	3308      	adds	r3, #8
 8021238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802123a:	61fa      	str	r2, [r7, #28]
 802123c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802123e:	69b9      	ldr	r1, [r7, #24]
 8021240:	69fa      	ldr	r2, [r7, #28]
 8021242:	e841 2300 	strex	r3, r2, [r1]
 8021246:	617b      	str	r3, [r7, #20]
   return(result);
 8021248:	697b      	ldr	r3, [r7, #20]
 802124a:	2b00      	cmp	r3, #0
 802124c:	d1e5      	bne.n	802121a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	2220      	movs	r2, #32
 8021252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	2200      	movs	r2, #0
 802125a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802125e:	2303      	movs	r3, #3
 8021260:	e012      	b.n	8021288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	2220      	movs	r2, #32
 8021266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	2220      	movs	r2, #32
 802126e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	2200      	movs	r2, #0
 8021276:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	2200      	movs	r2, #0
 802127c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	2200      	movs	r2, #0
 8021282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021286:	2300      	movs	r3, #0
}
 8021288:	4618      	mov	r0, r3
 802128a:	3758      	adds	r7, #88	@ 0x58
 802128c:	46bd      	mov	sp, r7
 802128e:	bd80      	pop	{r7, pc}

08021290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8021290:	b580      	push	{r7, lr}
 8021292:	b084      	sub	sp, #16
 8021294:	af00      	add	r7, sp, #0
 8021296:	60f8      	str	r0, [r7, #12]
 8021298:	60b9      	str	r1, [r7, #8]
 802129a:	603b      	str	r3, [r7, #0]
 802129c:	4613      	mov	r3, r2
 802129e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80212a0:	e04f      	b.n	8021342 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80212a2:	69bb      	ldr	r3, [r7, #24]
 80212a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212a8:	d04b      	beq.n	8021342 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80212aa:	f7f8 fae5 	bl	8019878 <HAL_GetTick>
 80212ae:	4602      	mov	r2, r0
 80212b0:	683b      	ldr	r3, [r7, #0]
 80212b2:	1ad3      	subs	r3, r2, r3
 80212b4:	69ba      	ldr	r2, [r7, #24]
 80212b6:	429a      	cmp	r2, r3
 80212b8:	d302      	bcc.n	80212c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80212ba:	69bb      	ldr	r3, [r7, #24]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d101      	bne.n	80212c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80212c0:	2303      	movs	r3, #3
 80212c2:	e04e      	b.n	8021362 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80212c4:	68fb      	ldr	r3, [r7, #12]
 80212c6:	681b      	ldr	r3, [r3, #0]
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	f003 0304 	and.w	r3, r3, #4
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d037      	beq.n	8021342 <UART_WaitOnFlagUntilTimeout+0xb2>
 80212d2:	68bb      	ldr	r3, [r7, #8]
 80212d4:	2b80      	cmp	r3, #128	@ 0x80
 80212d6:	d034      	beq.n	8021342 <UART_WaitOnFlagUntilTimeout+0xb2>
 80212d8:	68bb      	ldr	r3, [r7, #8]
 80212da:	2b40      	cmp	r3, #64	@ 0x40
 80212dc:	d031      	beq.n	8021342 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80212de:	68fb      	ldr	r3, [r7, #12]
 80212e0:	681b      	ldr	r3, [r3, #0]
 80212e2:	69db      	ldr	r3, [r3, #28]
 80212e4:	f003 0308 	and.w	r3, r3, #8
 80212e8:	2b08      	cmp	r3, #8
 80212ea:	d110      	bne.n	802130e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	2208      	movs	r2, #8
 80212f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80212f4:	68f8      	ldr	r0, [r7, #12]
 80212f6:	f000 f839 	bl	802136c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80212fa:	68fb      	ldr	r3, [r7, #12]
 80212fc:	2208      	movs	r2, #8
 80212fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021302:	68fb      	ldr	r3, [r7, #12]
 8021304:	2200      	movs	r2, #0
 8021306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802130a:	2301      	movs	r3, #1
 802130c:	e029      	b.n	8021362 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802130e:	68fb      	ldr	r3, [r7, #12]
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	69db      	ldr	r3, [r3, #28]
 8021314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802131c:	d111      	bne.n	8021342 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	681b      	ldr	r3, [r3, #0]
 8021322:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021328:	68f8      	ldr	r0, [r7, #12]
 802132a:	f000 f81f 	bl	802136c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	2220      	movs	r2, #32
 8021332:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021336:	68fb      	ldr	r3, [r7, #12]
 8021338:	2200      	movs	r2, #0
 802133a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802133e:	2303      	movs	r3, #3
 8021340:	e00f      	b.n	8021362 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021342:	68fb      	ldr	r3, [r7, #12]
 8021344:	681b      	ldr	r3, [r3, #0]
 8021346:	69da      	ldr	r2, [r3, #28]
 8021348:	68bb      	ldr	r3, [r7, #8]
 802134a:	4013      	ands	r3, r2
 802134c:	68ba      	ldr	r2, [r7, #8]
 802134e:	429a      	cmp	r2, r3
 8021350:	bf0c      	ite	eq
 8021352:	2301      	moveq	r3, #1
 8021354:	2300      	movne	r3, #0
 8021356:	b2db      	uxtb	r3, r3
 8021358:	461a      	mov	r2, r3
 802135a:	79fb      	ldrb	r3, [r7, #7]
 802135c:	429a      	cmp	r2, r3
 802135e:	d0a0      	beq.n	80212a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021360:	2300      	movs	r3, #0
}
 8021362:	4618      	mov	r0, r3
 8021364:	3710      	adds	r7, #16
 8021366:	46bd      	mov	sp, r7
 8021368:	bd80      	pop	{r7, pc}
	...

0802136c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802136c:	b480      	push	{r7}
 802136e:	b095      	sub	sp, #84	@ 0x54
 8021370:	af00      	add	r7, sp, #0
 8021372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802137a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802137c:	e853 3f00 	ldrex	r3, [r3]
 8021380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8021382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	461a      	mov	r2, r3
 8021390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021392:	643b      	str	r3, [r7, #64]	@ 0x40
 8021394:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802139a:	e841 2300 	strex	r3, r2, [r1]
 802139e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80213a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d1e6      	bne.n	8021374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	681b      	ldr	r3, [r3, #0]
 80213aa:	3308      	adds	r3, #8
 80213ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213ae:	6a3b      	ldr	r3, [r7, #32]
 80213b0:	e853 3f00 	ldrex	r3, [r3]
 80213b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80213b6:	69fa      	ldr	r2, [r7, #28]
 80213b8:	4b1e      	ldr	r3, [pc, #120]	@ (8021434 <UART_EndRxTransfer+0xc8>)
 80213ba:	4013      	ands	r3, r2
 80213bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80213be:	687b      	ldr	r3, [r7, #4]
 80213c0:	681b      	ldr	r3, [r3, #0]
 80213c2:	3308      	adds	r3, #8
 80213c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80213c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80213c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80213cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80213ce:	e841 2300 	strex	r3, r2, [r1]
 80213d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80213d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d1e5      	bne.n	80213a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80213da:	687b      	ldr	r3, [r7, #4]
 80213dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80213de:	2b01      	cmp	r3, #1
 80213e0:	d118      	bne.n	8021414 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213e8:	68fb      	ldr	r3, [r7, #12]
 80213ea:	e853 3f00 	ldrex	r3, [r3]
 80213ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80213f0:	68bb      	ldr	r3, [r7, #8]
 80213f2:	f023 0310 	bic.w	r3, r3, #16
 80213f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	461a      	mov	r2, r3
 80213fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021400:	61bb      	str	r3, [r7, #24]
 8021402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021404:	6979      	ldr	r1, [r7, #20]
 8021406:	69ba      	ldr	r2, [r7, #24]
 8021408:	e841 2300 	strex	r3, r2, [r1]
 802140c:	613b      	str	r3, [r7, #16]
   return(result);
 802140e:	693b      	ldr	r3, [r7, #16]
 8021410:	2b00      	cmp	r3, #0
 8021412:	d1e6      	bne.n	80213e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	2220      	movs	r2, #32
 8021418:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	2200      	movs	r2, #0
 8021420:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	2200      	movs	r2, #0
 8021426:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8021428:	bf00      	nop
 802142a:	3754      	adds	r7, #84	@ 0x54
 802142c:	46bd      	mov	sp, r7
 802142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021432:	4770      	bx	lr
 8021434:	effffffe 	.word	0xeffffffe

08021438 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021438:	b480      	push	{r7}
 802143a:	b085      	sub	sp, #20
 802143c:	af00      	add	r7, sp, #0
 802143e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021446:	2b01      	cmp	r3, #1
 8021448:	d101      	bne.n	802144e <HAL_UARTEx_DisableFifoMode+0x16>
 802144a:	2302      	movs	r3, #2
 802144c:	e027      	b.n	802149e <HAL_UARTEx_DisableFifoMode+0x66>
 802144e:	687b      	ldr	r3, [r7, #4]
 8021450:	2201      	movs	r2, #1
 8021452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	2224      	movs	r2, #36	@ 0x24
 802145a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	681b      	ldr	r3, [r3, #0]
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	681a      	ldr	r2, [r3, #0]
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	681b      	ldr	r3, [r3, #0]
 8021470:	f022 0201 	bic.w	r2, r2, #1
 8021474:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8021476:	68fb      	ldr	r3, [r7, #12]
 8021478:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 802147c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	2200      	movs	r2, #0
 8021482:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	68fa      	ldr	r2, [r7, #12]
 802148a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	2220      	movs	r2, #32
 8021490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	2200      	movs	r2, #0
 8021498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802149c:	2300      	movs	r3, #0
}
 802149e:	4618      	mov	r0, r3
 80214a0:	3714      	adds	r7, #20
 80214a2:	46bd      	mov	sp, r7
 80214a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214a8:	4770      	bx	lr

080214aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80214aa:	b580      	push	{r7, lr}
 80214ac:	b084      	sub	sp, #16
 80214ae:	af00      	add	r7, sp, #0
 80214b0:	6078      	str	r0, [r7, #4]
 80214b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80214ba:	2b01      	cmp	r3, #1
 80214bc:	d101      	bne.n	80214c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80214be:	2302      	movs	r3, #2
 80214c0:	e02d      	b.n	802151e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	2201      	movs	r2, #1
 80214c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	2224      	movs	r2, #36	@ 0x24
 80214ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	681b      	ldr	r3, [r3, #0]
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	681b      	ldr	r3, [r3, #0]
 80214de:	681a      	ldr	r2, [r3, #0]
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	f022 0201 	bic.w	r2, r2, #1
 80214e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	689b      	ldr	r3, [r3, #8]
 80214f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	681b      	ldr	r3, [r3, #0]
 80214f8:	683a      	ldr	r2, [r7, #0]
 80214fa:	430a      	orrs	r2, r1
 80214fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80214fe:	6878      	ldr	r0, [r7, #4]
 8021500:	f000 f850 	bl	80215a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	68fa      	ldr	r2, [r7, #12]
 802150a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	2220      	movs	r2, #32
 8021510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	2200      	movs	r2, #0
 8021518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802151c:	2300      	movs	r3, #0
}
 802151e:	4618      	mov	r0, r3
 8021520:	3710      	adds	r7, #16
 8021522:	46bd      	mov	sp, r7
 8021524:	bd80      	pop	{r7, pc}

08021526 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021526:	b580      	push	{r7, lr}
 8021528:	b084      	sub	sp, #16
 802152a:	af00      	add	r7, sp, #0
 802152c:	6078      	str	r0, [r7, #4]
 802152e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021536:	2b01      	cmp	r3, #1
 8021538:	d101      	bne.n	802153e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802153a:	2302      	movs	r3, #2
 802153c:	e02d      	b.n	802159a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	2201      	movs	r2, #1
 8021542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	2224      	movs	r2, #36	@ 0x24
 802154a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	681b      	ldr	r3, [r3, #0]
 8021554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	681a      	ldr	r2, [r3, #0]
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	f022 0201 	bic.w	r2, r2, #1
 8021564:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	689b      	ldr	r3, [r3, #8]
 802156c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	683a      	ldr	r2, [r7, #0]
 8021576:	430a      	orrs	r2, r1
 8021578:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802157a:	6878      	ldr	r0, [r7, #4]
 802157c:	f000 f812 	bl	80215a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	68fa      	ldr	r2, [r7, #12]
 8021586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	2220      	movs	r2, #32
 802158c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	2200      	movs	r2, #0
 8021594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021598:	2300      	movs	r3, #0
}
 802159a:	4618      	mov	r0, r3
 802159c:	3710      	adds	r7, #16
 802159e:	46bd      	mov	sp, r7
 80215a0:	bd80      	pop	{r7, pc}
	...

080215a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80215a4:	b480      	push	{r7}
 80215a6:	b085      	sub	sp, #20
 80215a8:	af00      	add	r7, sp, #0
 80215aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d108      	bne.n	80215c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	2201      	movs	r2, #1
 80215b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	2201      	movs	r2, #1
 80215c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80215c4:	e031      	b.n	802162a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80215c6:	2310      	movs	r3, #16
 80215c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80215ca:	2310      	movs	r3, #16
 80215cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	689b      	ldr	r3, [r3, #8]
 80215d4:	0e5b      	lsrs	r3, r3, #25
 80215d6:	b2db      	uxtb	r3, r3
 80215d8:	f003 0307 	and.w	r3, r3, #7
 80215dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	681b      	ldr	r3, [r3, #0]
 80215e2:	689b      	ldr	r3, [r3, #8]
 80215e4:	0f5b      	lsrs	r3, r3, #29
 80215e6:	b2db      	uxtb	r3, r3
 80215e8:	f003 0307 	and.w	r3, r3, #7
 80215ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80215ee:	7bbb      	ldrb	r3, [r7, #14]
 80215f0:	7b3a      	ldrb	r2, [r7, #12]
 80215f2:	4911      	ldr	r1, [pc, #68]	@ (8021638 <UARTEx_SetNbDataToProcess+0x94>)
 80215f4:	5c8a      	ldrb	r2, [r1, r2]
 80215f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80215fa:	7b3a      	ldrb	r2, [r7, #12]
 80215fc:	490f      	ldr	r1, [pc, #60]	@ (802163c <UARTEx_SetNbDataToProcess+0x98>)
 80215fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021600:	fb93 f3f2 	sdiv	r3, r3, r2
 8021604:	b29a      	uxth	r2, r3
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802160c:	7bfb      	ldrb	r3, [r7, #15]
 802160e:	7b7a      	ldrb	r2, [r7, #13]
 8021610:	4909      	ldr	r1, [pc, #36]	@ (8021638 <UARTEx_SetNbDataToProcess+0x94>)
 8021612:	5c8a      	ldrb	r2, [r1, r2]
 8021614:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8021618:	7b7a      	ldrb	r2, [r7, #13]
 802161a:	4908      	ldr	r1, [pc, #32]	@ (802163c <UARTEx_SetNbDataToProcess+0x98>)
 802161c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802161e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021622:	b29a      	uxth	r2, r3
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802162a:	bf00      	nop
 802162c:	3714      	adds	r7, #20
 802162e:	46bd      	mov	sp, r7
 8021630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021634:	4770      	bx	lr
 8021636:	bf00      	nop
 8021638:	08027044 	.word	0x08027044
 802163c:	0802704c 	.word	0x0802704c

08021640 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8021640:	b580      	push	{r7, lr}
 8021642:	b082      	sub	sp, #8
 8021644:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8021646:	4b15      	ldr	r3, [pc, #84]	@ (802169c <prvInitialiseLogging+0x5c>)
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	2b00      	cmp	r3, #0
 802164c:	d120      	bne.n	8021690 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802164e:	f7e3 f9df 	bl	8004a10 <xTaskGetSchedulerState>
 8021652:	4603      	mov	r3, r0
 8021654:	2b02      	cmp	r3, #2
 8021656:	d11b      	bne.n	8021690 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021658:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 802165c:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 802165e:	6878      	ldr	r0, [r7, #4]
 8021660:	f7e4 fb38 	bl	8005cd4 <pvPortMalloc>
 8021664:	4603      	mov	r3, r0
 8021666:	4a0e      	ldr	r2, [pc, #56]	@ (80216a0 <prvInitialiseLogging+0x60>)
 8021668:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 802166a:	4b0d      	ldr	r3, [pc, #52]	@ (80216a0 <prvInitialiseLogging+0x60>)
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	2b00      	cmp	r3, #0
 8021670:	d00e      	beq.n	8021690 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8021672:	4b0b      	ldr	r3, [pc, #44]	@ (80216a0 <prvInitialiseLogging+0x60>)
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	687a      	ldr	r2, [r7, #4]
 8021678:	2100      	movs	r1, #0
 802167a:	4618      	mov	r0, r3
 802167c:	f000 fc35 	bl	8021eea <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021680:	4b07      	ldr	r3, [pc, #28]	@ (80216a0 <prvInitialiseLogging+0x60>)
 8021682:	681b      	ldr	r3, [r3, #0]
 8021684:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8021688:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 802168a:	4b04      	ldr	r3, [pc, #16]	@ (802169c <prvInitialiseLogging+0x5c>)
 802168c:	2201      	movs	r2, #1
 802168e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8021690:	4b02      	ldr	r3, [pc, #8]	@ (802169c <prvInitialiseLogging+0x5c>)
 8021692:	681b      	ldr	r3, [r3, #0]
}
 8021694:	4618      	mov	r0, r3
 8021696:	3708      	adds	r7, #8
 8021698:	46bd      	mov	sp, r7
 802169a:	bd80      	pop	{r7, pc}
 802169c:	200024a0 	.word	0x200024a0
 80216a0:	20002490 	.word	0x20002490

080216a4 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 80216a4:	b580      	push	{r7, lr}
 80216a6:	b086      	sub	sp, #24
 80216a8:	af02      	add	r7, sp, #8
 80216aa:	6078      	str	r0, [r7, #4]
 80216ac:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 80216ae:	2300      	movs	r3, #0
 80216b0:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 80216b2:	4b24      	ldr	r3, [pc, #144]	@ (8021744 <prvGetMessageFromStreamBuffer+0xa0>)
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	2b00      	cmp	r3, #0
 80216b8:	d03f      	beq.n	802173a <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 80216ba:	4b22      	ldr	r3, [pc, #136]	@ (8021744 <prvGetMessageFromStreamBuffer+0xa0>)
 80216bc:	681b      	ldr	r3, [r3, #0]
 80216be:	4618      	mov	r0, r3
 80216c0:	f7ee fe19 	bl	80102f6 <uxStreamBufferGetSize>
 80216c4:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 80216c6:	68fb      	ldr	r3, [r7, #12]
 80216c8:	2b04      	cmp	r3, #4
 80216ca:	d936      	bls.n	802173a <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 80216cc:	f7e2 fb82 	bl	8003dd4 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 80216d0:	4b1c      	ldr	r3, [pc, #112]	@ (8021744 <prvGetMessageFromStreamBuffer+0xa0>)
 80216d2:	6818      	ldr	r0, [r3, #0]
 80216d4:	f107 0208 	add.w	r2, r7, #8
 80216d8:	2300      	movs	r3, #0
 80216da:	9300      	str	r3, [sp, #0]
 80216dc:	2304      	movs	r3, #4
 80216de:	2100      	movs	r1, #0
 80216e0:	f7ee ff27 	bl	8010532 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 80216e4:	68bb      	ldr	r3, [r7, #8]
 80216e6:	683a      	ldr	r2, [r7, #0]
 80216e8:	429a      	cmp	r2, r3
 80216ea:	d216      	bcs.n	802171a <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 80216ec:	4b15      	ldr	r3, [pc, #84]	@ (8021744 <prvGetMessageFromStreamBuffer+0xa0>)
 80216ee:	6818      	ldr	r0, [r3, #0]
 80216f0:	68bb      	ldr	r3, [r7, #8]
 80216f2:	2200      	movs	r2, #0
 80216f4:	9200      	str	r2, [sp, #0]
 80216f6:	4a14      	ldr	r2, [pc, #80]	@ (8021748 <prvGetMessageFromStreamBuffer+0xa4>)
 80216f8:	2100      	movs	r1, #0
 80216fa:	f7ee ff1a 	bl	8010532 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 80216fe:	683a      	ldr	r2, [r7, #0]
 8021700:	4911      	ldr	r1, [pc, #68]	@ (8021748 <prvGetMessageFromStreamBuffer+0xa4>)
 8021702:	6878      	ldr	r0, [r7, #4]
 8021704:	f000 fae4 	bl	8021cd0 <memcpy>
					xMessageLength = xBufferLength;
 8021708:	683b      	ldr	r3, [r7, #0]
 802170a:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 802170c:	683b      	ldr	r3, [r7, #0]
 802170e:	3b01      	subs	r3, #1
 8021710:	687a      	ldr	r2, [r7, #4]
 8021712:	4413      	add	r3, r2
 8021714:	2200      	movs	r2, #0
 8021716:	701a      	strb	r2, [r3, #0]
 8021718:	e00d      	b.n	8021736 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 802171a:	4b0a      	ldr	r3, [pc, #40]	@ (8021744 <prvGetMessageFromStreamBuffer+0xa0>)
 802171c:	6818      	ldr	r0, [r3, #0]
 802171e:	68bb      	ldr	r3, [r7, #8]
 8021720:	2200      	movs	r2, #0
 8021722:	9200      	str	r2, [sp, #0]
 8021724:	687a      	ldr	r2, [r7, #4]
 8021726:	2100      	movs	r1, #0
 8021728:	f7ee ff03 	bl	8010532 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 802172c:	68bb      	ldr	r3, [r7, #8]
 802172e:	687a      	ldr	r2, [r7, #4]
 8021730:	4413      	add	r3, r2
 8021732:	2200      	movs	r2, #0
 8021734:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8021736:	f7e2 fb5b 	bl	8003df0 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 802173a:	68bb      	ldr	r3, [r7, #8]
}
 802173c:	4618      	mov	r0, r3
 802173e:	3710      	adds	r7, #16
 8021740:	46bd      	mov	sp, r7
 8021742:	bd80      	pop	{r7, pc}
 8021744:	20002490 	.word	0x20002490
 8021748:	200023c8 	.word	0x200023c8

0802174c <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 802174c:	b580      	push	{r7, lr}
 802174e:	b08e      	sub	sp, #56	@ 0x38
 8021750:	af04      	add	r7, sp, #16
 8021752:	6078      	str	r0, [r7, #4]
 8021754:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8021756:	4b49      	ldr	r3, [pc, #292]	@ (802187c <prvBufferFormattedString+0x130>)
 8021758:	681b      	ldr	r3, [r3, #0]
 802175a:	2b00      	cmp	r3, #0
 802175c:	d104      	bne.n	8021768 <prvBufferFormattedString+0x1c>
 802175e:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8021762:	4847      	ldr	r0, [pc, #284]	@ (8021880 <prvBufferFormattedString+0x134>)
 8021764:	f7df ff78 	bl	8001658 <vAssertCalled>

	vTaskSuspendAll();
 8021768:	f7e2 fb34 	bl	8003dd4 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 802176c:	f000 fa2a 	bl	8021bc4 <ullGetHighResolutionTime>
 8021770:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8021774:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021778:	4a42      	ldr	r2, [pc, #264]	@ (8021884 <prvBufferFormattedString+0x138>)
 802177a:	f04f 0300 	mov.w	r3, #0
 802177e:	f7de fe17 	bl	80003b0 <__aeabi_uldivmod>
 8021782:	4602      	mov	r2, r0
 8021784:	460b      	mov	r3, r1
 8021786:	4613      	mov	r3, r2
 8021788:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 802178a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802178e:	4a3d      	ldr	r2, [pc, #244]	@ (8021884 <prvBufferFormattedString+0x138>)
 8021790:	f04f 0300 	mov.w	r3, #0
 8021794:	f7de fe0c 	bl	80003b0 <__aeabi_uldivmod>
 8021798:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 802179c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80217a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80217a4:	f04f 0300 	mov.w	r3, #0
 80217a8:	f7de fe02 	bl	80003b0 <__aeabi_uldivmod>
 80217ac:	4602      	mov	r2, r0
 80217ae:	460b      	mov	r3, r1
 80217b0:	4613      	mov	r3, r2
 80217b2:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 80217b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80217b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80217bc:	f04f 0300 	mov.w	r3, #0
 80217c0:	f7de fdf6 	bl	80003b0 <__aeabi_uldivmod>
 80217c4:	4613      	mov	r3, r2
 80217c6:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 80217c8:	2000      	movs	r0, #0
 80217ca:	f7e2 fc25 	bl	8004018 <pcTaskGetName>
 80217ce:	4603      	mov	r3, r0
 80217d0:	9302      	str	r3, [sp, #8]
 80217d2:	697b      	ldr	r3, [r7, #20]
 80217d4:	9301      	str	r3, [sp, #4]
 80217d6:	69bb      	ldr	r3, [r7, #24]
 80217d8:	9300      	str	r3, [sp, #0]
 80217da:	69fb      	ldr	r3, [r7, #28]
 80217dc:	4a2a      	ldr	r2, [pc, #168]	@ (8021888 <prvBufferFormattedString+0x13c>)
 80217de:	21c8      	movs	r1, #200	@ 0xc8
 80217e0:	482a      	ldr	r0, [pc, #168]	@ (802188c <prvBufferFormattedString+0x140>)
 80217e2:	f001 f885 	bl	80228f0 <snprintf>
 80217e6:	4603      	mov	r3, r0
 80217e8:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 80217ea:	68fb      	ldr	r3, [r7, #12]
 80217ec:	4a27      	ldr	r2, [pc, #156]	@ (802188c <prvBufferFormattedString+0x140>)
 80217ee:	1898      	adds	r0, r3, r2
 80217f0:	68fb      	ldr	r3, [r7, #12]
 80217f2:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80217f6:	683b      	ldr	r3, [r7, #0]
 80217f8:	687a      	ldr	r2, [r7, #4]
 80217fa:	f001 f85d 	bl	80228b8 <vsnprintf>
 80217fe:	4603      	mov	r3, r0
 8021800:	461a      	mov	r2, r3
 8021802:	68fb      	ldr	r3, [r7, #12]
 8021804:	4413      	add	r3, r2
 8021806:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8021808:	4b1c      	ldr	r3, [pc, #112]	@ (802187c <prvBufferFormattedString+0x130>)
 802180a:	681b      	ldr	r3, [r3, #0]
 802180c:	4618      	mov	r0, r3
 802180e:	f7ee fd50 	bl	80102b2 <uxStreamBufferGetSpace>
 8021812:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8021814:	68fb      	ldr	r3, [r7, #12]
 8021816:	3304      	adds	r3, #4
 8021818:	693a      	ldr	r2, [r7, #16]
 802181a:	429a      	cmp	r2, r3
 802181c:	d90e      	bls.n	802183c <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 802181e:	4b17      	ldr	r3, [pc, #92]	@ (802187c <prvBufferFormattedString+0x130>)
 8021820:	6818      	ldr	r0, [r3, #0]
 8021822:	f107 020c 	add.w	r2, r7, #12
 8021826:	2304      	movs	r3, #4
 8021828:	2100      	movs	r1, #0
 802182a:	f7ee fe02 	bl	8010432 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 802182e:	4b13      	ldr	r3, [pc, #76]	@ (802187c <prvBufferFormattedString+0x130>)
 8021830:	6818      	ldr	r0, [r3, #0]
 8021832:	68fb      	ldr	r3, [r7, #12]
 8021834:	4a15      	ldr	r2, [pc, #84]	@ (802188c <prvBufferFormattedString+0x140>)
 8021836:	2100      	movs	r1, #0
 8021838:	f7ee fdfb 	bl	8010432 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 802183c:	f7e2 fad8 	bl	8003df0 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 8021840:	4b13      	ldr	r3, [pc, #76]	@ (8021890 <prvBufferFormattedString+0x144>)
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d10a      	bne.n	802185e <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8021848:	68fb      	ldr	r3, [r7, #12]
 802184a:	4619      	mov	r1, r3
 802184c:	480f      	ldr	r0, [pc, #60]	@ (802188c <prvBufferFormattedString+0x140>)
 802184e:	f000 f85b 	bl	8021908 <vUDPLoggingHook>
		uxSkipCount++;
 8021852:	4b10      	ldr	r3, [pc, #64]	@ (8021894 <prvBufferFormattedString+0x148>)
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	3301      	adds	r3, #1
 8021858:	4a0e      	ldr	r2, [pc, #56]	@ (8021894 <prvBufferFormattedString+0x148>)
 802185a:	6013      	str	r3, [r2, #0]
 802185c:	e008      	b.n	8021870 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802185e:	4b0c      	ldr	r3, [pc, #48]	@ (8021890 <prvBufferFormattedString+0x144>)
 8021860:	6818      	ldr	r0, [r3, #0]
 8021862:	2300      	movs	r3, #0
 8021864:	9300      	str	r3, [sp, #0]
 8021866:	2302      	movs	r3, #2
 8021868:	2200      	movs	r2, #0
 802186a:	2100      	movs	r1, #0
 802186c:	f7e3 fc16 	bl	800509c <xTaskGenericNotify>
	}

	return xLength;
 8021870:	68fb      	ldr	r3, [r7, #12]
}
 8021872:	4618      	mov	r0, r3
 8021874:	3728      	adds	r7, #40	@ 0x28
 8021876:	46bd      	mov	sp, r7
 8021878:	bd80      	pop	{r7, pc}
 802187a:	bf00      	nop
 802187c:	20002490 	.word	0x20002490
 8021880:	08026e38 	.word	0x08026e38
 8021884:	000f4240 	.word	0x000f4240
 8021888:	08026e60 	.word	0x08026e60
 802188c:	200023c8 	.word	0x200023c8
 8021890:	20002494 	.word	0x20002494
 8021894:	20002498 	.word	0x20002498

08021898 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8021898:	b40f      	push	{r0, r1, r2, r3}
 802189a:	b580      	push	{r7, lr}
 802189c:	b082      	sub	sp, #8
 802189e:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 80218a0:	f7ff fece 	bl	8021640 <prvInitialiseLogging>
 80218a4:	4603      	mov	r3, r0
 80218a6:	2b00      	cmp	r3, #0
 80218a8:	d008      	beq.n	80218bc <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 80218aa:	f107 0314 	add.w	r3, r7, #20
 80218ae:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 80218b0:	6839      	ldr	r1, [r7, #0]
 80218b2:	6938      	ldr	r0, [r7, #16]
 80218b4:	f7ff ff4a 	bl	802174c <prvBufferFormattedString>
 80218b8:	6078      	str	r0, [r7, #4]
 80218ba:	e001      	b.n	80218c0 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 80218bc:	2300      	movs	r3, #0
 80218be:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 80218c0:	687b      	ldr	r3, [r7, #4]
}
 80218c2:	4618      	mov	r0, r3
 80218c4:	3708      	adds	r7, #8
 80218c6:	46bd      	mov	sp, r7
 80218c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80218cc:	b004      	add	sp, #16
 80218ce:	4770      	bx	lr

080218d0 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 80218d0:	b580      	push	{r7, lr}
 80218d2:	b082      	sub	sp, #8
 80218d4:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 80218d6:	4b08      	ldr	r3, [pc, #32]	@ (80218f8 <vUDPLoggingTaskCreate+0x28>)
 80218d8:	9301      	str	r3, [sp, #4]
 80218da:	2302      	movs	r3, #2
 80218dc:	9300      	str	r3, [sp, #0]
 80218de:	2300      	movs	r3, #0
 80218e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80218e4:	4905      	ldr	r1, [pc, #20]	@ (80218fc <vUDPLoggingTaskCreate+0x2c>)
 80218e6:	4806      	ldr	r0, [pc, #24]	@ (8021900 <vUDPLoggingTaskCreate+0x30>)
 80218e8:	f7e2 f87c 	bl	80039e4 <xTaskCreate>
 80218ec:	4603      	mov	r3, r0
 80218ee:	4a05      	ldr	r2, [pc, #20]	@ (8021904 <vUDPLoggingTaskCreate+0x34>)
 80218f0:	6013      	str	r3, [r2, #0]
}
 80218f2:	bf00      	nop
 80218f4:	46bd      	mov	sp, r7
 80218f6:	bd80      	pop	{r7, pc}
 80218f8:	20002494 	.word	0x20002494
 80218fc:	08026e78 	.word	0x08026e78
 8021900:	08021921 	.word	0x08021921
 8021904:	2000249c 	.word	0x2000249c

08021908 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8021908:	b480      	push	{r7}
 802190a:	b083      	sub	sp, #12
 802190c:	af00      	add	r7, sp, #0
 802190e:	6078      	str	r0, [r7, #4]
 8021910:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8021912:	bf00      	nop
 8021914:	370c      	adds	r7, #12
 8021916:	46bd      	mov	sp, r7
 8021918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802191c:	4770      	bx	lr
	...

08021920 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8021920:	b580      	push	{r7, lr}
 8021922:	b098      	sub	sp, #96	@ 0x60
 8021924:	af02      	add	r7, sp, #8
 8021926:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8021928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802192c:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 802192e:	2000      	movs	r0, #0
 8021930:	f7eb fa92 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 8021934:	6538      	str	r0, [r7, #80]	@ 0x50
 8021936:	e01c      	b.n	8021972 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8021938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802193a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 802193e:	f003 0310 	and.w	r3, r3, #16
 8021942:	b2db      	uxtb	r3, r3
 8021944:	2b00      	cmp	r3, #0
 8021946:	d00f      	beq.n	8021968 <prvLoggingTask+0x48>
 8021948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802194a:	2b00      	cmp	r3, #0
 802194c:	d009      	beq.n	8021962 <prvLoggingTask+0x42>
 802194e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021950:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021954:	f003 0304 	and.w	r3, r3, #4
 8021958:	b2db      	uxtb	r3, r3
 802195a:	2b00      	cmp	r3, #0
 802195c:	d101      	bne.n	8021962 <prvLoggingTask+0x42>
 802195e:	2301      	movs	r3, #1
 8021960:	e000      	b.n	8021964 <prvLoggingTask+0x44>
 8021962:	2300      	movs	r3, #0
 8021964:	2b00      	cmp	r3, #0
 8021966:	d108      	bne.n	802197a <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8021968:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802196a:	2000      	movs	r0, #0
 802196c:	f7eb fa96 	bl	800ce9c <FreeRTOS_NextEndPoint>
 8021970:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8021972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021974:	2b00      	cmp	r3, #0
 8021976:	d1df      	bne.n	8021938 <prvLoggingTask+0x18>
 8021978:	e000      	b.n	802197c <prvLoggingTask+0x5c>
				{
					break;
 802197a:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 802197c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802197e:	2b00      	cmp	r3, #0
 8021980:	d000      	beq.n	8021984 <prvLoggingTask+0x64>
			{
				break;
 8021982:	e004      	b.n	802198e <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8021984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8021988:	f7e2 f96c 	bl	8003c64 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 802198c:	e7cf      	b.n	802192e <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 802198e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8021990:	f7e2 f968 	bl	8003c64 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8021994:	2211      	movs	r2, #17
 8021996:	2102      	movs	r1, #2
 8021998:	2002      	movs	r0, #2
 802199a:	f7eb ffd9 	bl	800d950 <FreeRTOS_socket>
 802199e:	4603      	mov	r3, r0
 80219a0:	4a4c      	ldr	r2, [pc, #304]	@ (8021ad4 <prvLoggingTask+0x1b4>)
 80219a2:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 80219a4:	4b4b      	ldr	r3, [pc, #300]	@ (8021ad4 <prvLoggingTask+0x1b4>)
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80219ac:	d0ef      	beq.n	802198e <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 80219ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d104      	bne.n	80219be <prvLoggingTask+0x9e>
 80219b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80219b8:	4847      	ldr	r0, [pc, #284]	@ (8021ad8 <prvLoggingTask+0x1b8>)
 80219ba:	f7df fe4d 	bl	8001658 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 80219be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80219c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d104      	bne.n	80219d2 <prvLoggingTask+0xb2>
 80219c8:	f240 11df 	movw	r1, #479	@ 0x1df
 80219cc:	4842      	ldr	r0, [pc, #264]	@ (8021ad8 <prvLoggingTask+0x1b8>)
 80219ce:	f7df fe43 	bl	8001658 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 80219d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80219d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80219d8:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 80219da:	f246 2309 	movw	r3, #25097	@ 0x6209
 80219de:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 80219e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 80219e6:	4b3b      	ldr	r3, [pc, #236]	@ (8021ad4 <prvLoggingTask+0x1b4>)
 80219e8:	681b      	ldr	r3, [r3, #0]
 80219ea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80219ee:	2218      	movs	r2, #24
 80219f0:	4618      	mov	r0, r3
 80219f2:	f7ec f99d 	bl	800dd30 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 80219f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80219f8:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 80219fa:	4b36      	ldr	r3, [pc, #216]	@ (8021ad4 <prvLoggingTask+0x1b4>)
 80219fc:	6818      	ldr	r0, [r3, #0]
 80219fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021a02:	2204      	movs	r2, #4
 8021a04:	9200      	str	r2, [sp, #0]
 8021a06:	2201      	movs	r2, #1
 8021a08:	2100      	movs	r1, #0
 8021a0a:	f7ec ff5b 	bl	800e8c4 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021a10:	2101      	movs	r1, #1
 8021a12:	2000      	movs	r0, #0
 8021a14:	f7e3 fa36 	bl	8004e84 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8021a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021a1a:	691b      	ldr	r3, [r3, #16]
 8021a1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8021a1e:	4798      	blx	r3
 8021a20:	4603      	mov	r3, r0
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d0f3      	beq.n	8021a0e <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021a26:	2300      	movs	r3, #0
 8021a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8021a2a:	e04c      	b.n	8021ac6 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8021a2c:	21c8      	movs	r1, #200	@ 0xc8
 8021a2e:	482b      	ldr	r0, [pc, #172]	@ (8021adc <prvLoggingTask+0x1bc>)
 8021a30:	f7ff fe38 	bl	80216a4 <prvGetMessageFromStreamBuffer>
 8021a34:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8021a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d048      	beq.n	8021ace <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021a3c:	2000      	movs	r0, #0
 8021a3e:	f7eb fa0b 	bl	800ce58 <FreeRTOS_FirstEndPoint>
 8021a42:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8021a44:	e02a      	b.n	8021a9c <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8021a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d022      	beq.n	8021a92 <prvLoggingTask+0x172>
 8021a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a4e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021a52:	f003 0304 	and.w	r3, r3, #4
 8021a56:	b2db      	uxtb	r3, r3
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d11a      	bne.n	8021a92 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8021a5c:	2318      	movs	r3, #24
 8021a5e:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8021a60:	2302      	movs	r3, #2
 8021a62:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8021a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a66:	681a      	ldr	r2, [r3, #0]
 8021a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a6a:	685b      	ldr	r3, [r3, #4]
 8021a6c:	43db      	mvns	r3, r3
 8021a6e:	4313      	orrs	r3, r2
 8021a70:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8021a72:	f246 3309 	movw	r3, #25353	@ 0x6309
 8021a76:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8021a78:	4b16      	ldr	r3, [pc, #88]	@ (8021ad4 <prvLoggingTask+0x1b4>)
 8021a7a:	6818      	ldr	r0, [r3, #0]
 8021a7c:	2318      	movs	r3, #24
 8021a7e:	9301      	str	r3, [sp, #4]
 8021a80:	f107 030c 	add.w	r3, r7, #12
 8021a84:	9300      	str	r3, [sp, #0]
 8021a86:	2300      	movs	r3, #0
 8021a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021a8a:	4914      	ldr	r1, [pc, #80]	@ (8021adc <prvLoggingTask+0x1bc>)
 8021a8c:	f7ec f8e0 	bl	800dc50 <FreeRTOS_sendto>
							}
							break;
 8021a90:	e007      	b.n	8021aa2 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8021a92:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8021a94:	2000      	movs	r0, #0
 8021a96:	f7eb fa01 	bl	800ce9c <FreeRTOS_NextEndPoint>
 8021a9a:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8021a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d1d1      	bne.n	8021a46 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8021aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8021ae0 <prvLoggingTask+0x1c0>)
 8021aa4:	681b      	ldr	r3, [r3, #0]
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d005      	beq.n	8021ab6 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8021aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8021ae0 <prvLoggingTask+0x1c0>)
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	3b01      	subs	r3, #1
 8021ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8021ae0 <prvLoggingTask+0x1c0>)
 8021ab2:	6013      	str	r3, [r2, #0]
 8021ab4:	e004      	b.n	8021ac0 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8021ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021ab8:	4619      	mov	r1, r3
 8021aba:	4808      	ldr	r0, [pc, #32]	@ (8021adc <prvLoggingTask+0x1bc>)
 8021abc:	f7ff ff24 	bl	8021908 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021ac2:	3301      	adds	r3, #1
 8021ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8021ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021ac8:	2b13      	cmp	r3, #19
 8021aca:	ddaf      	ble.n	8021a2c <prvLoggingTask+0x10c>
 8021acc:	e79f      	b.n	8021a0e <prvLoggingTask+0xee>
					break;
 8021ace:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021ad0:	e79d      	b.n	8021a0e <prvLoggingTask+0xee>
 8021ad2:	bf00      	nop
 8021ad4:	20000028 	.word	0x20000028
 8021ad8:	08026e38 	.word	0x08026e38
 8021adc:	200024a4 	.word	0x200024a4
 8021ae0:	20002498 	.word	0x20002498

08021ae4 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8021ae4:	b480      	push	{r7}
 8021ae6:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8021ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8021b1c <TIM2_IRQHandler+0x38>)
 8021aea:	681b      	ldr	r3, [r3, #0]
 8021aec:	691b      	ldr	r3, [r3, #16]
 8021aee:	4a0c      	ldr	r2, [pc, #48]	@ (8021b20 <TIM2_IRQHandler+0x3c>)
 8021af0:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8021af2:	4b0b      	ldr	r3, [pc, #44]	@ (8021b20 <TIM2_IRQHandler+0x3c>)
 8021af4:	681b      	ldr	r3, [r3, #0]
 8021af6:	f003 0301 	and.w	r3, r3, #1
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d009      	beq.n	8021b12 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8021afe:	4b07      	ldr	r3, [pc, #28]	@ (8021b1c <TIM2_IRQHandler+0x38>)
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	f06f 0201 	mvn.w	r2, #1
 8021b06:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8021b08:	4b06      	ldr	r3, [pc, #24]	@ (8021b24 <TIM2_IRQHandler+0x40>)
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	3301      	adds	r3, #1
 8021b0e:	4a05      	ldr	r2, [pc, #20]	@ (8021b24 <TIM2_IRQHandler+0x40>)
 8021b10:	6013      	str	r3, [r2, #0]
	}
}
 8021b12:	bf00      	nop
 8021b14:	46bd      	mov	sp, r7
 8021b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b1a:	4770      	bx	lr
 8021b1c:	200003cc 	.word	0x200003cc
 8021b20:	20002570 	.word	0x20002570
 8021b24:	2000256c 	.word	0x2000256c

08021b28 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8021b28:	b580      	push	{r7, lr}
 8021b2a:	b082      	sub	sp, #8
 8021b2c:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8021b2e:	4b20      	ldr	r3, [pc, #128]	@ (8021bb0 <vStartHighResolutionTimer+0x88>)
 8021b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021b34:	4a1e      	ldr	r2, [pc, #120]	@ (8021bb0 <vStartHighResolutionTimer+0x88>)
 8021b36:	f043 0301 	orr.w	r3, r3, #1
 8021b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8021b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8021bb0 <vStartHighResolutionTimer+0x88>)
 8021b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021b44:	f003 0301 	and.w	r3, r3, #1
 8021b48:	607b      	str	r3, [r7, #4]
 8021b4a:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8021b4c:	4b19      	ldr	r3, [pc, #100]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8021b52:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8021b54:	23c8      	movs	r3, #200	@ 0xc8
 8021b56:	3b01      	subs	r3, #1
 8021b58:	4a16      	ldr	r2, [pc, #88]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b5a:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8021b5c:	4b15      	ldr	r3, [pc, #84]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b5e:	2200      	movs	r2, #0
 8021b60:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8021b62:	4b15      	ldr	r3, [pc, #84]	@ (8021bb8 <vStartHighResolutionTimer+0x90>)
 8021b64:	3b01      	subs	r3, #1
 8021b66:	4a13      	ldr	r2, [pc, #76]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b68:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8021b6a:	4b12      	ldr	r3, [pc, #72]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b6c:	2200      	movs	r2, #0
 8021b6e:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8021b70:	4b10      	ldr	r3, [pc, #64]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b72:	2200      	movs	r2, #0
 8021b74:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8021b76:	4b0f      	ldr	r3, [pc, #60]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b78:	2201      	movs	r2, #1
 8021b7a:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8021b7c:	2200      	movs	r2, #0
 8021b7e:	2105      	movs	r1, #5
 8021b80:	201c      	movs	r0, #28
 8021b82:	f7f7 ffa4 	bl	8019ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8021b86:	201c      	movs	r0, #28
 8021b88:	f7f7 ffbb 	bl	8019b02 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8021b8c:	4809      	ldr	r0, [pc, #36]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b8e:	f7fd fc96 	bl	801f4be <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8021b92:	4808      	ldr	r0, [pc, #32]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b94:	f7fd fcea 	bl	801f56c <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8021b98:	4b06      	ldr	r3, [pc, #24]	@ (8021bb4 <vStartHighResolutionTimer+0x8c>)
 8021b9a:	681b      	ldr	r3, [r3, #0]
 8021b9c:	691b      	ldr	r3, [r3, #16]
 8021b9e:	4a07      	ldr	r2, [pc, #28]	@ (8021bbc <vStartHighResolutionTimer+0x94>)
 8021ba0:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8021ba2:	4b07      	ldr	r3, [pc, #28]	@ (8021bc0 <vStartHighResolutionTimer+0x98>)
 8021ba4:	2200      	movs	r2, #0
 8021ba6:	601a      	str	r2, [r3, #0]
}
 8021ba8:	bf00      	nop
 8021baa:	3708      	adds	r7, #8
 8021bac:	46bd      	mov	sp, r7
 8021bae:	bd80      	pop	{r7, pc}
 8021bb0:	58024400 	.word	0x58024400
 8021bb4:	200003cc 	.word	0x200003cc
 8021bb8:	00989680 	.word	0x00989680
 8021bbc:	20002570 	.word	0x20002570
 8021bc0:	2000256c 	.word	0x2000256c

08021bc4 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8021bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021bc8:	b08e      	sub	sp, #56	@ 0x38
 8021bca:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8021bcc:	493d      	ldr	r1, [pc, #244]	@ (8021cc4 <ullGetHighResolutionTime+0x100>)
 8021bce:	6809      	ldr	r1, [r1, #0]
 8021bd0:	2900      	cmp	r1, #0
 8021bd2:	d132      	bne.n	8021c3a <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8021bd4:	f7e2 fa10 	bl	8003ff8 <xTaskGetTickCount>
 8021bd8:	4603      	mov	r3, r0
 8021bda:	2200      	movs	r2, #0
 8021bdc:	469a      	mov	sl, r3
 8021bde:	4693      	mov	fp, r2
 8021be0:	4652      	mov	r2, sl
 8021be2:	465b      	mov	r3, fp
 8021be4:	f04f 0000 	mov.w	r0, #0
 8021be8:	f04f 0100 	mov.w	r1, #0
 8021bec:	0159      	lsls	r1, r3, #5
 8021bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021bf2:	0150      	lsls	r0, r2, #5
 8021bf4:	4602      	mov	r2, r0
 8021bf6:	460b      	mov	r3, r1
 8021bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8021bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8021c00:	f04f 0200 	mov.w	r2, #0
 8021c04:	f04f 0300 	mov.w	r3, #0
 8021c08:	00ab      	lsls	r3, r5, #2
 8021c0a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8021c0e:	00a2      	lsls	r2, r4, #2
 8021c10:	4614      	mov	r4, r2
 8021c12:	461d      	mov	r5, r3
 8021c14:	eb14 080a 	adds.w	r8, r4, sl
 8021c18:	eb45 090b 	adc.w	r9, r5, fp
 8021c1c:	f04f 0200 	mov.w	r2, #0
 8021c20:	f04f 0300 	mov.w	r3, #0
 8021c24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021c28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021c2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021c30:	4690      	mov	r8, r2
 8021c32:	4699      	mov	r9, r3
 8021c34:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8021c38:	e03c      	b.n	8021cb4 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021c3a:	4922      	ldr	r1, [pc, #136]	@ (8021cc4 <ullGetHighResolutionTime+0x100>)
 8021c3c:	6809      	ldr	r1, [r1, #0]
 8021c3e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021c40:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8021c42:	4921      	ldr	r1, [pc, #132]	@ (8021cc8 <ullGetHighResolutionTime+0x104>)
 8021c44:	6809      	ldr	r1, [r1, #0]
 8021c46:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8021c48:	491e      	ldr	r1, [pc, #120]	@ (8021cc4 <ullGetHighResolutionTime+0x100>)
 8021c4a:	6809      	ldr	r1, [r1, #0]
 8021c4c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021c4e:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8021c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021c52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021c54:	4288      	cmp	r0, r1
 8021c56:	d200      	bcs.n	8021c5a <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021c58:	e7ef      	b.n	8021c3a <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8021c5a:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8021c5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021c5e:	2000      	movs	r0, #0
 8021c60:	61b9      	str	r1, [r7, #24]
 8021c62:	61f8      	str	r0, [r7, #28]
 8021c64:	4819      	ldr	r0, [pc, #100]	@ (8021ccc <ullGetHighResolutionTime+0x108>)
 8021c66:	2100      	movs	r1, #0
 8021c68:	6138      	str	r0, [r7, #16]
 8021c6a:	6179      	str	r1, [r7, #20]
 8021c6c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8021c70:	4649      	mov	r1, r9
 8021c72:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021c76:	4650      	mov	r0, sl
 8021c78:	fb00 f001 	mul.w	r0, r0, r1
 8021c7c:	4659      	mov	r1, fp
 8021c7e:	4644      	mov	r4, r8
 8021c80:	fb04 f101 	mul.w	r1, r4, r1
 8021c84:	4401      	add	r1, r0
 8021c86:	4640      	mov	r0, r8
 8021c88:	4654      	mov	r4, sl
 8021c8a:	fba0 2304 	umull	r2, r3, r0, r4
 8021c8e:	4419      	add	r1, r3
 8021c90:	460b      	mov	r3, r1
 8021c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021c94:	2000      	movs	r0, #0
 8021c96:	60b9      	str	r1, [r7, #8]
 8021c98:	60f8      	str	r0, [r7, #12]
 8021c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8021c9e:	4621      	mov	r1, r4
 8021ca0:	1851      	adds	r1, r2, r1
 8021ca2:	6039      	str	r1, [r7, #0]
 8021ca4:	4629      	mov	r1, r5
 8021ca6:	eb43 0101 	adc.w	r1, r3, r1
 8021caa:	6079      	str	r1, [r7, #4]
 8021cac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021cb0:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8021cb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8021cb8:	4610      	mov	r0, r2
 8021cba:	4619      	mov	r1, r3
 8021cbc:	3738      	adds	r7, #56	@ 0x38
 8021cbe:	46bd      	mov	sp, r7
 8021cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021cc4:	200003cc 	.word	0x200003cc
 8021cc8:	2000256c 	.word	0x2000256c
 8021ccc:	00989680 	.word	0x00989680

08021cd0 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8021cd0:	b480      	push	{r7}
 8021cd2:	b08d      	sub	sp, #52	@ 0x34
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	60f8      	str	r0, [r7, #12]
 8021cd8:	60b9      	str	r1, [r7, #8]
 8021cda:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8021ce0:	68bb      	ldr	r3, [r7, #8]
 8021ce2:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8021ce4:	697a      	ldr	r2, [r7, #20]
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	4413      	add	r3, r2
 8021cea:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8021cec:	69ba      	ldr	r2, [r7, #24]
 8021cee:	697b      	ldr	r3, [r7, #20]
 8021cf0:	4053      	eors	r3, r2
 8021cf2:	f003 0303 	and.w	r3, r3, #3
 8021cf6:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8021cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021cfa:	f003 0301 	and.w	r3, r3, #1
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	f040 80a1 	bne.w	8021e46 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8021d04:	697b      	ldr	r3, [r7, #20]
 8021d06:	f003 0301 	and.w	r3, r3, #1
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d00b      	beq.n	8021d26 <memcpy+0x56>
 8021d0e:	697a      	ldr	r2, [r7, #20]
 8021d10:	693b      	ldr	r3, [r7, #16]
 8021d12:	429a      	cmp	r2, r3
 8021d14:	d207      	bcs.n	8021d26 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8021d16:	697a      	ldr	r2, [r7, #20]
 8021d18:	1c53      	adds	r3, r2, #1
 8021d1a:	617b      	str	r3, [r7, #20]
 8021d1c:	69bb      	ldr	r3, [r7, #24]
 8021d1e:	1c59      	adds	r1, r3, #1
 8021d20:	61b9      	str	r1, [r7, #24]
 8021d22:	7812      	ldrb	r2, [r2, #0]
 8021d24:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8021d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d28:	f003 0302 	and.w	r3, r3, #2
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d01f      	beq.n	8021d70 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8021d30:	693b      	ldr	r3, [r7, #16]
 8021d32:	f003 0301 	and.w	r3, r3, #1
 8021d36:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8021d38:	693b      	ldr	r3, [r7, #16]
 8021d3a:	f023 0301 	bic.w	r3, r3, #1
 8021d3e:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021d40:	e00a      	b.n	8021d58 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8021d42:	697a      	ldr	r2, [r7, #20]
 8021d44:	1c93      	adds	r3, r2, #2
 8021d46:	617b      	str	r3, [r7, #20]
 8021d48:	69bb      	ldr	r3, [r7, #24]
 8021d4a:	1c99      	adds	r1, r3, #2
 8021d4c:	61b9      	str	r1, [r7, #24]
 8021d4e:	8812      	ldrh	r2, [r2, #0]
 8021d50:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	3b02      	subs	r3, #2
 8021d56:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021d58:	697a      	ldr	r2, [r7, #20]
 8021d5a:	693b      	ldr	r3, [r7, #16]
 8021d5c:	429a      	cmp	r2, r3
 8021d5e:	d202      	bcs.n	8021d66 <memcpy+0x96>
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	d1ed      	bne.n	8021d42 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8021d66:	693a      	ldr	r2, [r7, #16]
 8021d68:	69fb      	ldr	r3, [r7, #28]
 8021d6a:	4313      	orrs	r3, r2
 8021d6c:	613b      	str	r3, [r7, #16]
 8021d6e:	e0ae      	b.n	8021ece <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8021d70:	697b      	ldr	r3, [r7, #20]
 8021d72:	f003 0302 	and.w	r3, r3, #2
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d00c      	beq.n	8021d94 <memcpy+0xc4>
 8021d7a:	697a      	ldr	r2, [r7, #20]
 8021d7c:	693b      	ldr	r3, [r7, #16]
 8021d7e:	3b01      	subs	r3, #1
 8021d80:	429a      	cmp	r2, r3
 8021d82:	d207      	bcs.n	8021d94 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8021d84:	697a      	ldr	r2, [r7, #20]
 8021d86:	1c93      	adds	r3, r2, #2
 8021d88:	617b      	str	r3, [r7, #20]
 8021d8a:	69bb      	ldr	r3, [r7, #24]
 8021d8c:	1c99      	adds	r1, r3, #2
 8021d8e:	61b9      	str	r1, [r7, #24]
 8021d90:	8812      	ldrh	r2, [r2, #0]
 8021d92:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8021d94:	693b      	ldr	r3, [r7, #16]
 8021d96:	f003 0303 	and.w	r3, r3, #3
 8021d9a:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8021d9c:	693b      	ldr	r3, [r7, #16]
 8021d9e:	f023 0303 	bic.w	r3, r3, #3
 8021da2:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8021da4:	693a      	ldr	r2, [r7, #16]
 8021da6:	697b      	ldr	r3, [r7, #20]
 8021da8:	1ad3      	subs	r3, r2, r3
 8021daa:	109b      	asrs	r3, r3, #2
 8021dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8021dae:	e02f      	b.n	8021e10 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8021db0:	697a      	ldr	r2, [r7, #20]
 8021db2:	69bb      	ldr	r3, [r7, #24]
 8021db4:	6812      	ldr	r2, [r2, #0]
 8021db6:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8021db8:	697a      	ldr	r2, [r7, #20]
 8021dba:	69bb      	ldr	r3, [r7, #24]
 8021dbc:	3304      	adds	r3, #4
 8021dbe:	6852      	ldr	r2, [r2, #4]
 8021dc0:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8021dc2:	697a      	ldr	r2, [r7, #20]
 8021dc4:	69bb      	ldr	r3, [r7, #24]
 8021dc6:	3308      	adds	r3, #8
 8021dc8:	6892      	ldr	r2, [r2, #8]
 8021dca:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8021dcc:	697a      	ldr	r2, [r7, #20]
 8021dce:	69bb      	ldr	r3, [r7, #24]
 8021dd0:	330c      	adds	r3, #12
 8021dd2:	68d2      	ldr	r2, [r2, #12]
 8021dd4:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8021dd6:	697a      	ldr	r2, [r7, #20]
 8021dd8:	69bb      	ldr	r3, [r7, #24]
 8021dda:	3310      	adds	r3, #16
 8021ddc:	6912      	ldr	r2, [r2, #16]
 8021dde:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8021de0:	697a      	ldr	r2, [r7, #20]
 8021de2:	69bb      	ldr	r3, [r7, #24]
 8021de4:	3314      	adds	r3, #20
 8021de6:	6952      	ldr	r2, [r2, #20]
 8021de8:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8021dea:	697a      	ldr	r2, [r7, #20]
 8021dec:	69bb      	ldr	r3, [r7, #24]
 8021dee:	3318      	adds	r3, #24
 8021df0:	6992      	ldr	r2, [r2, #24]
 8021df2:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8021df4:	697a      	ldr	r2, [r7, #20]
 8021df6:	69bb      	ldr	r3, [r7, #24]
 8021df8:	331c      	adds	r3, #28
 8021dfa:	69d2      	ldr	r2, [r2, #28]
 8021dfc:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8021dfe:	69bb      	ldr	r3, [r7, #24]
 8021e00:	3320      	adds	r3, #32
 8021e02:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8021e04:	697b      	ldr	r3, [r7, #20]
 8021e06:	3320      	adds	r3, #32
 8021e08:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8021e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e0c:	3b08      	subs	r3, #8
 8021e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8021e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e12:	2b08      	cmp	r3, #8
 8021e14:	dccc      	bgt.n	8021db0 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8021e16:	e00a      	b.n	8021e2e <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8021e18:	697a      	ldr	r2, [r7, #20]
 8021e1a:	1d13      	adds	r3, r2, #4
 8021e1c:	617b      	str	r3, [r7, #20]
 8021e1e:	69bb      	ldr	r3, [r7, #24]
 8021e20:	1d19      	adds	r1, r3, #4
 8021e22:	61b9      	str	r1, [r7, #24]
 8021e24:	6812      	ldr	r2, [r2, #0]
 8021e26:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	3b04      	subs	r3, #4
 8021e2c:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8021e2e:	697a      	ldr	r2, [r7, #20]
 8021e30:	693b      	ldr	r3, [r7, #16]
 8021e32:	429a      	cmp	r2, r3
 8021e34:	d202      	bcs.n	8021e3c <memcpy+0x16c>
 8021e36:	687b      	ldr	r3, [r7, #4]
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	d1ed      	bne.n	8021e18 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8021e3c:	693a      	ldr	r2, [r7, #16]
 8021e3e:	6a3b      	ldr	r3, [r7, #32]
 8021e40:	4313      	orrs	r3, r2
 8021e42:	613b      	str	r3, [r7, #16]
 8021e44:	e043      	b.n	8021ece <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8021e46:	693a      	ldr	r2, [r7, #16]
 8021e48:	697b      	ldr	r3, [r7, #20]
 8021e4a:	1ad3      	subs	r3, r2, r3
 8021e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021e4e:	e02f      	b.n	8021eb0 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8021e50:	697a      	ldr	r2, [r7, #20]
 8021e52:	69bb      	ldr	r3, [r7, #24]
 8021e54:	7812      	ldrb	r2, [r2, #0]
 8021e56:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8021e58:	697a      	ldr	r2, [r7, #20]
 8021e5a:	69bb      	ldr	r3, [r7, #24]
 8021e5c:	3301      	adds	r3, #1
 8021e5e:	7852      	ldrb	r2, [r2, #1]
 8021e60:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8021e62:	697a      	ldr	r2, [r7, #20]
 8021e64:	69bb      	ldr	r3, [r7, #24]
 8021e66:	3302      	adds	r3, #2
 8021e68:	7892      	ldrb	r2, [r2, #2]
 8021e6a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8021e6c:	697a      	ldr	r2, [r7, #20]
 8021e6e:	69bb      	ldr	r3, [r7, #24]
 8021e70:	3303      	adds	r3, #3
 8021e72:	78d2      	ldrb	r2, [r2, #3]
 8021e74:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8021e76:	697a      	ldr	r2, [r7, #20]
 8021e78:	69bb      	ldr	r3, [r7, #24]
 8021e7a:	3304      	adds	r3, #4
 8021e7c:	7912      	ldrb	r2, [r2, #4]
 8021e7e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8021e80:	697a      	ldr	r2, [r7, #20]
 8021e82:	69bb      	ldr	r3, [r7, #24]
 8021e84:	3305      	adds	r3, #5
 8021e86:	7952      	ldrb	r2, [r2, #5]
 8021e88:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8021e8a:	697a      	ldr	r2, [r7, #20]
 8021e8c:	69bb      	ldr	r3, [r7, #24]
 8021e8e:	3306      	adds	r3, #6
 8021e90:	7992      	ldrb	r2, [r2, #6]
 8021e92:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8021e94:	697a      	ldr	r2, [r7, #20]
 8021e96:	69bb      	ldr	r3, [r7, #24]
 8021e98:	3307      	adds	r3, #7
 8021e9a:	79d2      	ldrb	r2, [r2, #7]
 8021e9c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8021e9e:	69bb      	ldr	r3, [r7, #24]
 8021ea0:	3308      	adds	r3, #8
 8021ea2:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8021ea4:	697b      	ldr	r3, [r7, #20]
 8021ea6:	3308      	adds	r3, #8
 8021ea8:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8021eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021eac:	3b08      	subs	r3, #8
 8021eae:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021eb2:	2b08      	cmp	r3, #8
 8021eb4:	dccc      	bgt.n	8021e50 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8021eb6:	e00a      	b.n	8021ece <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8021eb8:	697a      	ldr	r2, [r7, #20]
 8021eba:	1c53      	adds	r3, r2, #1
 8021ebc:	617b      	str	r3, [r7, #20]
 8021ebe:	69bb      	ldr	r3, [r7, #24]
 8021ec0:	1c59      	adds	r1, r3, #1
 8021ec2:	61b9      	str	r1, [r7, #24]
 8021ec4:	7812      	ldrb	r2, [r2, #0]
 8021ec6:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8021ec8:	687b      	ldr	r3, [r7, #4]
 8021eca:	3b01      	subs	r3, #1
 8021ecc:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8021ece:	697a      	ldr	r2, [r7, #20]
 8021ed0:	693b      	ldr	r3, [r7, #16]
 8021ed2:	429a      	cmp	r2, r3
 8021ed4:	d202      	bcs.n	8021edc <memcpy+0x20c>
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	d1ed      	bne.n	8021eb8 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8021edc:	68fb      	ldr	r3, [r7, #12]
}
 8021ede:	4618      	mov	r0, r3
 8021ee0:	3734      	adds	r7, #52	@ 0x34
 8021ee2:	46bd      	mov	sp, r7
 8021ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee8:	4770      	bx	lr

08021eea <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8021eea:	b480      	push	{r7}
 8021eec:	b08b      	sub	sp, #44	@ 0x2c
 8021eee:	af00      	add	r7, sp, #0
 8021ef0:	60f8      	str	r0, [r7, #12]
 8021ef2:	60b9      	str	r1, [r7, #8]
 8021ef4:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8021ef6:	68fb      	ldr	r3, [r7, #12]
 8021ef8:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8021efa:	697a      	ldr	r2, [r7, #20]
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	4413      	add	r3, r2
 8021f00:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8021f02:	687b      	ldr	r3, [r7, #4]
 8021f04:	2b07      	cmp	r3, #7
 8021f06:	d97b      	bls.n	8022000 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8021f08:	68bb      	ldr	r3, [r7, #8]
 8021f0a:	b2db      	uxtb	r3, r3
 8021f0c:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8021f0e:	69fb      	ldr	r3, [r7, #28]
 8021f10:	021a      	lsls	r2, r3, #8
 8021f12:	69fb      	ldr	r3, [r7, #28]
 8021f14:	041b      	lsls	r3, r3, #16
 8021f16:	431a      	orrs	r2, r3
 8021f18:	69fb      	ldr	r3, [r7, #28]
 8021f1a:	061b      	lsls	r3, r3, #24
 8021f1c:	4313      	orrs	r3, r2
 8021f1e:	69fa      	ldr	r2, [r7, #28]
 8021f20:	4313      	orrs	r3, r2
 8021f22:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8021f24:	697b      	ldr	r3, [r7, #20]
 8021f26:	f003 0303 	and.w	r3, r3, #3
 8021f2a:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8021f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d010      	beq.n	8021f54 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8021f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f34:	f1c3 0304 	rsb	r3, r3, #4
 8021f38:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8021f3a:	e006      	b.n	8021f4a <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8021f3c:	697b      	ldr	r3, [r7, #20]
 8021f3e:	68ba      	ldr	r2, [r7, #8]
 8021f40:	b2d2      	uxtb	r2, r2
 8021f42:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8021f44:	697b      	ldr	r3, [r7, #20]
 8021f46:	3301      	adds	r3, #1
 8021f48:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8021f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f4c:	1e5a      	subs	r2, r3, #1
 8021f4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d1f3      	bne.n	8021f3c <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8021f54:	693b      	ldr	r3, [r7, #16]
 8021f56:	f003 0303 	and.w	r3, r3, #3
 8021f5a:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8021f5c:	693b      	ldr	r3, [r7, #16]
 8021f5e:	f023 0303 	bic.w	r3, r3, #3
 8021f62:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8021f64:	693a      	ldr	r2, [r7, #16]
 8021f66:	697b      	ldr	r3, [r7, #20]
 8021f68:	1ad3      	subs	r3, r2, r3
 8021f6a:	109b      	asrs	r3, r3, #2
 8021f6c:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8021f6e:	e024      	b.n	8021fba <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8021f70:	697b      	ldr	r3, [r7, #20]
 8021f72:	69fa      	ldr	r2, [r7, #28]
 8021f74:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8021f76:	697b      	ldr	r3, [r7, #20]
 8021f78:	3304      	adds	r3, #4
 8021f7a:	69fa      	ldr	r2, [r7, #28]
 8021f7c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8021f7e:	697b      	ldr	r3, [r7, #20]
 8021f80:	3308      	adds	r3, #8
 8021f82:	69fa      	ldr	r2, [r7, #28]
 8021f84:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8021f86:	697b      	ldr	r3, [r7, #20]
 8021f88:	330c      	adds	r3, #12
 8021f8a:	69fa      	ldr	r2, [r7, #28]
 8021f8c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8021f8e:	697b      	ldr	r3, [r7, #20]
 8021f90:	3310      	adds	r3, #16
 8021f92:	69fa      	ldr	r2, [r7, #28]
 8021f94:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8021f96:	697b      	ldr	r3, [r7, #20]
 8021f98:	3314      	adds	r3, #20
 8021f9a:	69fa      	ldr	r2, [r7, #28]
 8021f9c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8021f9e:	697b      	ldr	r3, [r7, #20]
 8021fa0:	3318      	adds	r3, #24
 8021fa2:	69fa      	ldr	r2, [r7, #28]
 8021fa4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8021fa6:	697b      	ldr	r3, [r7, #20]
 8021fa8:	331c      	adds	r3, #28
 8021faa:	69fa      	ldr	r2, [r7, #28]
 8021fac:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8021fae:	697b      	ldr	r3, [r7, #20]
 8021fb0:	3320      	adds	r3, #32
 8021fb2:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8021fb4:	6a3b      	ldr	r3, [r7, #32]
 8021fb6:	3b08      	subs	r3, #8
 8021fb8:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8021fba:	6a3b      	ldr	r3, [r7, #32]
 8021fbc:	2b08      	cmp	r3, #8
 8021fbe:	dcd7      	bgt.n	8021f70 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8021fc0:	e008      	b.n	8021fd4 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8021fc2:	697b      	ldr	r3, [r7, #20]
 8021fc4:	69fa      	ldr	r2, [r7, #28]
 8021fc6:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8021fc8:	697b      	ldr	r3, [r7, #20]
 8021fca:	3304      	adds	r3, #4
 8021fcc:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8021fce:	687b      	ldr	r3, [r7, #4]
 8021fd0:	3304      	adds	r3, #4
 8021fd2:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8021fd4:	697a      	ldr	r2, [r7, #20]
 8021fd6:	693b      	ldr	r3, [r7, #16]
 8021fd8:	429a      	cmp	r2, r3
 8021fda:	d202      	bcs.n	8021fe2 <memset+0xf8>
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d1ef      	bne.n	8021fc2 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8021fe2:	693a      	ldr	r2, [r7, #16]
 8021fe4:	69bb      	ldr	r3, [r7, #24]
 8021fe6:	4313      	orrs	r3, r2
 8021fe8:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8021fea:	e009      	b.n	8022000 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 8021fec:	697b      	ldr	r3, [r7, #20]
 8021fee:	68ba      	ldr	r2, [r7, #8]
 8021ff0:	b2d2      	uxtb	r2, r2
 8021ff2:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8021ff4:	697b      	ldr	r3, [r7, #20]
 8021ff6:	3301      	adds	r3, #1
 8021ff8:	617b      	str	r3, [r7, #20]
			ulBytes++;
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	3301      	adds	r3, #1
 8021ffe:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022000:	697a      	ldr	r2, [r7, #20]
 8022002:	693b      	ldr	r3, [r7, #16]
 8022004:	429a      	cmp	r2, r3
 8022006:	d202      	bcs.n	802200e <memset+0x124>
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	2b00      	cmp	r3, #0
 802200c:	d1ee      	bne.n	8021fec <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 802200e:	68fb      	ldr	r3, [r7, #12]
}
 8022010:	4618      	mov	r0, r3
 8022012:	372c      	adds	r7, #44	@ 0x2c
 8022014:	46bd      	mov	sp, r7
 8022016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802201a:	4770      	bx	lr

0802201c <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 802201c:	b480      	push	{r7}
 802201e:	b083      	sub	sp, #12
 8022020:	af00      	add	r7, sp, #0
 8022022:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022024:	2303      	movs	r3, #3
}
 8022026:	4618      	mov	r0, r3
 8022028:	370c      	adds	r7, #12
 802202a:	46bd      	mov	sp, r7
 802202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022030:	4770      	bx	lr

08022032 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022032:	b480      	push	{r7}
 8022034:	b083      	sub	sp, #12
 8022036:	af00      	add	r7, sp, #0
 8022038:	4603      	mov	r3, r0
 802203a:	6039      	str	r1, [r7, #0]
 802203c:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 802203e:	bf00      	nop
 8022040:	370c      	adds	r7, #12
 8022042:	46bd      	mov	sp, r7
 8022044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022048:	4770      	bx	lr

0802204a <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 802204a:	b580      	push	{r7, lr}
 802204c:	b084      	sub	sp, #16
 802204e:	af00      	add	r7, sp, #0
 8022050:	60f8      	str	r0, [r7, #12]
 8022052:	60b9      	str	r1, [r7, #8]
 8022054:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022056:	68fb      	ldr	r3, [r7, #12]
 8022058:	68ba      	ldr	r2, [r7, #8]
 802205a:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 802205c:	68fb      	ldr	r3, [r7, #12]
 802205e:	68ba      	ldr	r2, [r7, #8]
 8022060:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	1e5a      	subs	r2, r3, #1
 8022066:	68fb      	ldr	r3, [r7, #12]
 8022068:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 802206a:	68fb      	ldr	r3, [r7, #12]
 802206c:	2200      	movs	r2, #0
 802206e:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	3310      	adds	r3, #16
 8022074:	2210      	movs	r2, #16
 8022076:	2100      	movs	r1, #0
 8022078:	4618      	mov	r0, r3
 802207a:	f7ff ff36 	bl	8021eea <memset>
}
 802207e:	bf00      	nop
 8022080:	3710      	adds	r7, #16
 8022082:	46bd      	mov	sp, r7
 8022084:	bd80      	pop	{r7, pc}

08022086 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8022086:	b580      	push	{r7, lr}
 8022088:	b082      	sub	sp, #8
 802208a:	af00      	add	r7, sp, #0
 802208c:	6078      	str	r0, [r7, #4]
 802208e:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	681b      	ldr	r3, [r3, #0]
 8022094:	2b00      	cmp	r3, #0
 8022096:	d10d      	bne.n	80220b4 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022098:	683b      	ldr	r3, [r7, #0]
 802209a:	b2db      	uxtb	r3, r3
 802209c:	2214      	movs	r2, #20
 802209e:	4611      	mov	r1, r2
 80220a0:	4618      	mov	r0, r3
 80220a2:	f7ff ffc6 	bl	8022032 <vOutputChar>
		apStr->curLen++;
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	68db      	ldr	r3, [r3, #12]
 80220aa:	1c5a      	adds	r2, r3, #1
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80220b0:	2301      	movs	r3, #1
 80220b2:	e022      	b.n	80220fa <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 80220b4:	687b      	ldr	r3, [r7, #4]
 80220b6:	681a      	ldr	r2, [r3, #0]
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	689b      	ldr	r3, [r3, #8]
 80220bc:	429a      	cmp	r2, r3
 80220be:	d20e      	bcs.n	80220de <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	681b      	ldr	r3, [r3, #0]
 80220c4:	1c59      	adds	r1, r3, #1
 80220c6:	687a      	ldr	r2, [r7, #4]
 80220c8:	6011      	str	r1, [r2, #0]
 80220ca:	683a      	ldr	r2, [r7, #0]
 80220cc:	b2d2      	uxtb	r2, r2
 80220ce:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	68db      	ldr	r3, [r3, #12]
 80220d4:	1c5a      	adds	r2, r3, #1
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80220da:	2301      	movs	r3, #1
 80220dc:	e00d      	b.n	80220fa <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	681a      	ldr	r2, [r3, #0]
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	689b      	ldr	r3, [r3, #8]
 80220e6:	429a      	cmp	r2, r3
 80220e8:	d106      	bne.n	80220f8 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	681b      	ldr	r3, [r3, #0]
 80220ee:	1c59      	adds	r1, r3, #1
 80220f0:	687a      	ldr	r2, [r7, #4]
 80220f2:	6011      	str	r1, [r2, #0]
 80220f4:	2200      	movs	r2, #0
 80220f6:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80220f8:	2300      	movs	r3, #0
}
 80220fa:	4618      	mov	r0, r3
 80220fc:	3708      	adds	r7, #8
 80220fe:	46bd      	mov	sp, r7
 8022100:	bd80      	pop	{r7, pc}

08022102 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8022102:	b580      	push	{r7, lr}
 8022104:	b082      	sub	sp, #8
 8022106:	af00      	add	r7, sp, #0
 8022108:	6078      	str	r0, [r7, #4]
 802210a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	681b      	ldr	r3, [r3, #0]
 8022110:	2b00      	cmp	r3, #0
 8022112:	d112      	bne.n	802213a <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022114:	683b      	ldr	r3, [r7, #0]
 8022116:	b2db      	uxtb	r3, r3
 8022118:	2214      	movs	r2, #20
 802211a:	4611      	mov	r1, r2
 802211c:	4618      	mov	r0, r3
 802211e:	f7ff ff88 	bl	8022032 <vOutputChar>
		if( c == 0 )
 8022122:	683b      	ldr	r3, [r7, #0]
 8022124:	2b00      	cmp	r3, #0
 8022126:	d101      	bne.n	802212c <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8022128:	2300      	movs	r3, #0
 802212a:	e02e      	b.n	802218a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	68db      	ldr	r3, [r3, #12]
 8022130:	1c5a      	adds	r2, r3, #1
 8022132:	687b      	ldr	r3, [r7, #4]
 8022134:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022136:	2301      	movs	r3, #1
 8022138:	e027      	b.n	802218a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	681a      	ldr	r2, [r3, #0]
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	689b      	ldr	r3, [r3, #8]
 8022142:	429a      	cmp	r2, r3
 8022144:	d213      	bcs.n	802216e <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	681b      	ldr	r3, [r3, #0]
 802214a:	1c59      	adds	r1, r3, #1
 802214c:	687a      	ldr	r2, [r7, #4]
 802214e:	6011      	str	r1, [r2, #0]
 8022150:	683a      	ldr	r2, [r7, #0]
 8022152:	b2d2      	uxtb	r2, r2
 8022154:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8022156:	683b      	ldr	r3, [r7, #0]
 8022158:	2b00      	cmp	r3, #0
 802215a:	d101      	bne.n	8022160 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 802215c:	2300      	movs	r3, #0
 802215e:	e014      	b.n	802218a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	68db      	ldr	r3, [r3, #12]
 8022164:	1c5a      	adds	r2, r3, #1
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802216a:	2301      	movs	r3, #1
 802216c:	e00d      	b.n	802218a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	681a      	ldr	r2, [r3, #0]
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	689b      	ldr	r3, [r3, #8]
 8022176:	429a      	cmp	r2, r3
 8022178:	d106      	bne.n	8022188 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	1c59      	adds	r1, r3, #1
 8022180:	687a      	ldr	r2, [r7, #4]
 8022182:	6011      	str	r1, [r2, #0]
 8022184:	2200      	movs	r2, #0
 8022186:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022188:	2300      	movs	r3, #0
}
 802218a:	4618      	mov	r0, r3
 802218c:	3708      	adds	r7, #8
 802218e:	46bd      	mov	sp, r7
 8022190:	bd80      	pop	{r7, pc}
	...

08022194 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8022194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022196:	b085      	sub	sp, #20
 8022198:	af00      	add	r7, sp, #0
 802219a:	6078      	str	r0, [r7, #4]
 802219c:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 802219e:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 80221a0:	683b      	ldr	r3, [r7, #0]
 80221a2:	4618      	mov	r0, r3
 80221a4:	f7ff ff3a 	bl	802201c <xApplicationMemoryPermissions>
 80221a8:	4603      	mov	r3, r0
 80221aa:	2b00      	cmp	r3, #0
 80221ac:	d101      	bne.n	80221b2 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 80221ae:	4b4c      	ldr	r3, [pc, #304]	@ (80222e0 <prints+0x14c>)
 80221b0:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 80221b2:	687b      	ldr	r3, [r7, #4]
 80221b4:	695b      	ldr	r3, [r3, #20]
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	dd1b      	ble.n	80221f2 <prints+0x5e>
	{
		register int count = 0;
 80221ba:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 80221bc:	683d      	ldr	r5, [r7, #0]
 80221be:	e001      	b.n	80221c4 <prints+0x30>
		{
			++count;
 80221c0:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 80221c2:	3501      	adds	r5, #1
 80221c4:	782b      	ldrb	r3, [r5, #0]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d1fa      	bne.n	80221c0 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	695b      	ldr	r3, [r3, #20]
 80221ce:	429c      	cmp	r4, r3
 80221d0:	db03      	blt.n	80221da <prints+0x46>
		{
			apBuf->flags.width = 0;
 80221d2:	687b      	ldr	r3, [r7, #4]
 80221d4:	2200      	movs	r2, #0
 80221d6:	615a      	str	r2, [r3, #20]
 80221d8:	e004      	b.n	80221e4 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 80221da:	687b      	ldr	r3, [r7, #4]
 80221dc:	695b      	ldr	r3, [r3, #20]
 80221de:	1b1a      	subs	r2, r3, r4
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	7f1b      	ldrb	r3, [r3, #28]
 80221e8:	f003 0302 	and.w	r3, r3, #2
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d000      	beq.n	80221f2 <prints+0x5e>
		{
			padchar = '0';
 80221f0:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	7f1b      	ldrb	r3, [r3, #28]
 80221f6:	f003 0301 	and.w	r3, r3, #1
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d112      	bne.n	8022224 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80221fe:	e00d      	b.n	802221c <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8022200:	4631      	mov	r1, r6
 8022202:	6878      	ldr	r0, [r7, #4]
 8022204:	f7ff ff3f 	bl	8022086 <strbuf_printchar>
 8022208:	4603      	mov	r3, r0
 802220a:	2b00      	cmp	r3, #0
 802220c:	d101      	bne.n	8022212 <prints+0x7e>
			{
				return pdFALSE;
 802220e:	2300      	movs	r3, #0
 8022210:	e062      	b.n	80222d8 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022212:	687b      	ldr	r3, [r7, #4]
 8022214:	695b      	ldr	r3, [r3, #20]
 8022216:	1e5a      	subs	r2, r3, #1
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	615a      	str	r2, [r3, #20]
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	695b      	ldr	r3, [r3, #20]
 8022220:	2b00      	cmp	r3, #0
 8022222:	dced      	bgt.n	8022200 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	7f9b      	ldrb	r3, [r3, #30]
 8022228:	f003 0302 	and.w	r3, r3, #2
 802222c:	b2db      	uxtb	r3, r3
 802222e:	2b00      	cmp	r3, #0
 8022230:	d036      	beq.n	80222a0 <prints+0x10c>
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	7f1b      	ldrb	r3, [r3, #28]
 8022236:	2b01      	cmp	r3, #1
 8022238:	d132      	bne.n	80222a0 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 802223a:	6838      	ldr	r0, [r7, #0]
 802223c:	f7de f85a 	bl	80002f4 <strlen>
 8022240:	4603      	mov	r3, r0
 8022242:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	699b      	ldr	r3, [r3, #24]
 8022248:	68ba      	ldr	r2, [r7, #8]
 802224a:	429a      	cmp	r2, r3
 802224c:	da28      	bge.n	80222a0 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 802224e:	687b      	ldr	r3, [r7, #4]
 8022250:	699a      	ldr	r2, [r3, #24]
 8022252:	68bb      	ldr	r3, [r7, #8]
 8022254:	1ad3      	subs	r3, r2, r3
 8022256:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8022258:	e00b      	b.n	8022272 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 802225a:	2130      	movs	r1, #48	@ 0x30
 802225c:	6878      	ldr	r0, [r7, #4]
 802225e:	f7ff ff12 	bl	8022086 <strbuf_printchar>
 8022262:	4603      	mov	r3, r0
 8022264:	2b00      	cmp	r3, #0
 8022266:	d101      	bne.n	802226c <prints+0xd8>
				{
					return pdFALSE;
 8022268:	2300      	movs	r3, #0
 802226a:	e035      	b.n	80222d8 <prints+0x144>
			for( ; i; i-- )
 802226c:	68fb      	ldr	r3, [r7, #12]
 802226e:	3b01      	subs	r3, #1
 8022270:	60fb      	str	r3, [r7, #12]
 8022272:	68fb      	ldr	r3, [r7, #12]
 8022274:	2b00      	cmp	r3, #0
 8022276:	d1f0      	bne.n	802225a <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8022278:	e012      	b.n	80222a0 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 802227a:	683b      	ldr	r3, [r7, #0]
 802227c:	781b      	ldrb	r3, [r3, #0]
 802227e:	4619      	mov	r1, r3
 8022280:	6878      	ldr	r0, [r7, #4]
 8022282:	f7ff ff00 	bl	8022086 <strbuf_printchar>
 8022286:	4603      	mov	r3, r0
 8022288:	2b00      	cmp	r3, #0
 802228a:	d101      	bne.n	8022290 <prints+0xfc>
		{
			return pdFALSE;
 802228c:	2300      	movs	r3, #0
 802228e:	e023      	b.n	80222d8 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8022290:	683b      	ldr	r3, [r7, #0]
 8022292:	3301      	adds	r3, #1
 8022294:	603b      	str	r3, [r7, #0]
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	699b      	ldr	r3, [r3, #24]
 802229a:	1e5a      	subs	r2, r3, #1
 802229c:	687b      	ldr	r3, [r7, #4]
 802229e:	619a      	str	r2, [r3, #24]
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	699b      	ldr	r3, [r3, #24]
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	d012      	beq.n	80222ce <prints+0x13a>
 80222a8:	683b      	ldr	r3, [r7, #0]
 80222aa:	781b      	ldrb	r3, [r3, #0]
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d1e4      	bne.n	802227a <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80222b0:	e00d      	b.n	80222ce <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 80222b2:	4631      	mov	r1, r6
 80222b4:	6878      	ldr	r0, [r7, #4]
 80222b6:	f7ff fee6 	bl	8022086 <strbuf_printchar>
 80222ba:	4603      	mov	r3, r0
 80222bc:	2b00      	cmp	r3, #0
 80222be:	d101      	bne.n	80222c4 <prints+0x130>
		{
			return pdFALSE;
 80222c0:	2300      	movs	r3, #0
 80222c2:	e009      	b.n	80222d8 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	695b      	ldr	r3, [r3, #20]
 80222c8:	1e5a      	subs	r2, r3, #1
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	615a      	str	r2, [r3, #20]
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	695b      	ldr	r3, [r3, #20]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	dced      	bgt.n	80222b2 <prints+0x11e>
		}
	}

	return pdTRUE;
 80222d6:	2301      	movs	r3, #1
}
 80222d8:	4618      	mov	r0, r3
 80222da:	3714      	adds	r7, #20
 80222dc:	46bd      	mov	sp, r7
 80222de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222e0:	08026e80 	.word	0x08026e80

080222e4 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 80222e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80222e8:	b087      	sub	sp, #28
 80222ea:	af00      	add	r7, sp, #0
 80222ec:	6078      	str	r0, [r7, #4]
 80222ee:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 80222f0:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 80222f4:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	691b      	ldr	r3, [r3, #16]
 80222fa:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80222fc:	687a      	ldr	r2, [r7, #4]
 80222fe:	7f93      	ldrb	r3, [r2, #30]
 8022300:	f043 0302 	orr.w	r3, r3, #2
 8022304:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8022306:	683b      	ldr	r3, [r7, #0]
 8022308:	2b00      	cmp	r3, #0
 802230a:	d10b      	bne.n	8022324 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 802230c:	2330      	movs	r3, #48	@ 0x30
 802230e:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8022310:	2300      	movs	r3, #0
 8022312:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8022314:	f107 030c 	add.w	r3, r7, #12
 8022318:	4619      	mov	r1, r3
 802231a:	6878      	ldr	r0, [r7, #4]
 802231c:	f7ff ff3a 	bl	8022194 <prints>
 8022320:	4603      	mov	r3, r0
 8022322:	e067      	b.n	80223f4 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	7f9b      	ldrb	r3, [r3, #30]
 8022328:	f003 0301 	and.w	r3, r3, #1
 802232c:	b2db      	uxtb	r3, r3
 802232e:	2b00      	cmp	r3, #0
 8022330:	d009      	beq.n	8022346 <printi+0x62>
 8022332:	2e0a      	cmp	r6, #10
 8022334:	d107      	bne.n	8022346 <printi+0x62>
 8022336:	683b      	ldr	r3, [r7, #0]
 8022338:	2b00      	cmp	r3, #0
 802233a:	da04      	bge.n	8022346 <printi+0x62>
	{
		neg = 1;
 802233c:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8022340:	683b      	ldr	r3, [r7, #0]
 8022342:	425b      	negs	r3, r3
 8022344:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8022346:	f107 040c 	add.w	r4, r7, #12
 802234a:	340b      	adds	r4, #11

	*s = '\0';
 802234c:	2300      	movs	r3, #0
 802234e:	7023      	strb	r3, [r4, #0]
	switch( base )
 8022350:	2e10      	cmp	r6, #16
 8022352:	d017      	beq.n	8022384 <printi+0xa0>
 8022354:	2e10      	cmp	r6, #16
 8022356:	d829      	bhi.n	80223ac <printi+0xc8>
 8022358:	2e08      	cmp	r6, #8
 802235a:	d024      	beq.n	80223a6 <printi+0xc2>
 802235c:	2e0a      	cmp	r6, #10
 802235e:	d022      	beq.n	80223a6 <printi+0xc2>
 8022360:	e024      	b.n	80223ac <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 8022362:	462b      	mov	r3, r5
 8022364:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8022368:	f1b8 0f09 	cmp.w	r8, #9
 802236c:	dd03      	ble.n	8022376 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	7f5b      	ldrb	r3, [r3, #29]
 8022372:	3b3a      	subs	r3, #58	@ 0x3a
 8022374:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 8022376:	fa5f f388 	uxtb.w	r3, r8
 802237a:	3c01      	subs	r4, #1
 802237c:	3330      	adds	r3, #48	@ 0x30
 802237e:	b2db      	uxtb	r3, r3
 8022380:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 8022382:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8022384:	2d00      	cmp	r5, #0
 8022386:	d1ec      	bne.n	8022362 <printi+0x7e>
		}
		break;
 8022388:	e010      	b.n	80223ac <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 802238a:	fbb5 f3f6 	udiv	r3, r5, r6
 802238e:	fb06 f303 	mul.w	r3, r6, r3
 8022392:	1aeb      	subs	r3, r5, r3
 8022394:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 8022396:	fa5f f388 	uxtb.w	r3, r8
 802239a:	3c01      	subs	r4, #1
 802239c:	3330      	adds	r3, #48	@ 0x30
 802239e:	b2db      	uxtb	r3, r3
 80223a0:	7023      	strb	r3, [r4, #0]
			u /= base;
 80223a2:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 80223a6:	2d00      	cmp	r5, #0
 80223a8:	d1ef      	bne.n	802238a <printi+0xa6>
		}
		break;
 80223aa:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80223ac:	f1b9 0f00 	cmp.w	r9, #0
 80223b0:	d01b      	beq.n	80223ea <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	695b      	ldr	r3, [r3, #20]
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d014      	beq.n	80223e4 <printi+0x100>
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	7f1b      	ldrb	r3, [r3, #28]
 80223be:	f003 0302 	and.w	r3, r3, #2
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d00e      	beq.n	80223e4 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 80223c6:	212d      	movs	r1, #45	@ 0x2d
 80223c8:	6878      	ldr	r0, [r7, #4]
 80223ca:	f7ff fe5c 	bl	8022086 <strbuf_printchar>
 80223ce:	4603      	mov	r3, r0
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d101      	bne.n	80223d8 <printi+0xf4>
			{
				return pdFALSE;
 80223d4:	2300      	movs	r3, #0
 80223d6:	e00d      	b.n	80223f4 <printi+0x110>
			}
			--apBuf->flags.width;
 80223d8:	687b      	ldr	r3, [r7, #4]
 80223da:	695b      	ldr	r3, [r3, #20]
 80223dc:	1e5a      	subs	r2, r3, #1
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	615a      	str	r2, [r3, #20]
 80223e2:	e002      	b.n	80223ea <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 80223e4:	3c01      	subs	r4, #1
 80223e6:	232d      	movs	r3, #45	@ 0x2d
 80223e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 80223ea:	4621      	mov	r1, r4
 80223ec:	6878      	ldr	r0, [r7, #4]
 80223ee:	f7ff fed1 	bl	8022194 <prints>
 80223f2:	4603      	mov	r3, r0
}
 80223f4:	4618      	mov	r0, r3
 80223f6:	371c      	adds	r7, #28
 80223f8:	46bd      	mov	sp, r7
 80223fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08022400 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8022400:	b590      	push	{r4, r7, lr}
 8022402:	b089      	sub	sp, #36	@ 0x24
 8022404:	af02      	add	r7, sp, #8
 8022406:	6078      	str	r0, [r7, #4]
 8022408:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 802240a:	683b      	ldr	r3, [r7, #0]
 802240c:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 802240e:	683b      	ldr	r3, [r7, #0]
 8022410:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8022412:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8022414:	683b      	ldr	r3, [r7, #0]
 8022416:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8022418:	b2db      	uxtb	r3, r3
 802241a:	683a      	ldr	r2, [r7, #0]
 802241c:	b2d2      	uxtb	r2, r2
 802241e:	f107 0008 	add.w	r0, r7, #8
 8022422:	9201      	str	r2, [sp, #4]
 8022424:	9300      	str	r3, [sp, #0]
 8022426:	4623      	mov	r3, r4
 8022428:	460a      	mov	r2, r1
 802242a:	4909      	ldr	r1, [pc, #36]	@ (8022450 <printIp+0x50>)
 802242c:	f000 fa81 	bl	8022932 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8022430:	687a      	ldr	r2, [r7, #4]
 8022432:	7f93      	ldrb	r3, [r2, #30]
 8022434:	f043 0302 	orr.w	r3, r3, #2
 8022438:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 802243a:	f107 0308 	add.w	r3, r7, #8
 802243e:	4619      	mov	r1, r3
 8022440:	6878      	ldr	r0, [r7, #4]
 8022442:	f7ff fea7 	bl	8022194 <prints>

	return pdTRUE;
 8022446:	2301      	movs	r3, #1
}
 8022448:	4618      	mov	r0, r3
 802244a:	371c      	adds	r7, #28
 802244c:	46bd      	mov	sp, r7
 802244e:	bd90      	pop	{r4, r7, pc}
 8022450:	08026e88 	.word	0x08026e88

08022454 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8022454:	b480      	push	{r7}
 8022456:	b083      	sub	sp, #12
 8022458:	af00      	add	r7, sp, #0
 802245a:	4603      	mov	r3, r0
 802245c:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 802245e:	4a0b      	ldr	r2, [pc, #44]	@ (802248c <usNetToHost+0x38>)
 8022460:	4b0b      	ldr	r3, [pc, #44]	@ (8022490 <usNetToHost+0x3c>)
 8022462:	429a      	cmp	r2, r3
 8022464:	d101      	bne.n	802246a <usNetToHost+0x16>
	{
		return usValue;
 8022466:	88fb      	ldrh	r3, [r7, #6]
 8022468:	e009      	b.n	802247e <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 802246a:	88fb      	ldrh	r3, [r7, #6]
 802246c:	021b      	lsls	r3, r3, #8
 802246e:	b21a      	sxth	r2, r3
 8022470:	88fb      	ldrh	r3, [r7, #6]
 8022472:	0a1b      	lsrs	r3, r3, #8
 8022474:	b29b      	uxth	r3, r3
 8022476:	b21b      	sxth	r3, r3
 8022478:	4313      	orrs	r3, r2
 802247a:	b21b      	sxth	r3, r3
 802247c:	b29b      	uxth	r3, r3
	}
}
 802247e:	4618      	mov	r0, r3
 8022480:	370c      	adds	r7, #12
 8022482:	46bd      	mov	sp, r7
 8022484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022488:	4770      	bx	lr
 802248a:	bf00      	nop
 802248c:	03020100 	.word	0x03020100
 8022490:	00010203 	.word	0x00010203

08022494 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8022494:	b580      	push	{r7, lr}
 8022496:	b088      	sub	sp, #32
 8022498:	af00      	add	r7, sp, #0
 802249a:	6078      	str	r0, [r7, #4]
 802249c:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 802249e:	f04f 33ff 	mov.w	r3, #4294967295
 80224a2:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 80224a4:	2300      	movs	r3, #0
 80224a6:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 80224a8:	2300      	movs	r3, #0
 80224aa:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80224ac:	2300      	movs	r3, #0
 80224ae:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80224b0:	2300      	movs	r3, #0
 80224b2:	61fb      	str	r3, [r7, #28]
 80224b4:	e026      	b.n	8022504 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 80224b6:	69fb      	ldr	r3, [r7, #28]
 80224b8:	005b      	lsls	r3, r3, #1
 80224ba:	683a      	ldr	r2, [r7, #0]
 80224bc:	4413      	add	r3, r2
 80224be:	881b      	ldrh	r3, [r3, #0]
 80224c0:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80224c2:	897b      	ldrh	r3, [r7, #10]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	d107      	bne.n	80224d8 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 80224c8:	68fb      	ldr	r3, [r7, #12]
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	d101      	bne.n	80224d2 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 80224ce:	69fb      	ldr	r3, [r7, #28]
 80224d0:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 80224d2:	68fb      	ldr	r3, [r7, #12]
 80224d4:	3301      	adds	r3, #1
 80224d6:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 80224d8:	897b      	ldrh	r3, [r7, #10]
 80224da:	2b00      	cmp	r3, #0
 80224dc:	d102      	bne.n	80224e4 <printIPv6+0x50>
 80224de:	69fb      	ldr	r3, [r7, #28]
 80224e0:	2b07      	cmp	r3, #7
 80224e2:	d10c      	bne.n	80224fe <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 80224e4:	68fb      	ldr	r3, [r7, #12]
 80224e6:	2b01      	cmp	r3, #1
 80224e8:	dd07      	ble.n	80224fa <printIPv6+0x66>
 80224ea:	697a      	ldr	r2, [r7, #20]
 80224ec:	68fb      	ldr	r3, [r7, #12]
 80224ee:	429a      	cmp	r2, r3
 80224f0:	da03      	bge.n	80224fa <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 80224f2:	68fb      	ldr	r3, [r7, #12]
 80224f4:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 80224f6:	693b      	ldr	r3, [r7, #16]
 80224f8:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 80224fa:	2300      	movs	r3, #0
 80224fc:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80224fe:	69fb      	ldr	r3, [r7, #28]
 8022500:	3301      	adds	r3, #1
 8022502:	61fb      	str	r3, [r7, #28]
 8022504:	69fb      	ldr	r3, [r7, #28]
 8022506:	2b07      	cmp	r3, #7
 8022508:	ddd5      	ble.n	80224b6 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	2210      	movs	r2, #16
 802250e:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	2261      	movs	r2, #97	@ 0x61
 8022514:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022516:	2300      	movs	r3, #0
 8022518:	61fb      	str	r3, [r7, #28]
 802251a:	e02b      	b.n	8022574 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 802251c:	69fa      	ldr	r2, [r7, #28]
 802251e:	69bb      	ldr	r3, [r7, #24]
 8022520:	429a      	cmp	r2, r3
 8022522:	d110      	bne.n	8022546 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8022524:	697b      	ldr	r3, [r7, #20]
 8022526:	3b01      	subs	r3, #1
 8022528:	69fa      	ldr	r2, [r7, #28]
 802252a:	4413      	add	r3, r2
 802252c:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 802252e:	213a      	movs	r1, #58	@ 0x3a
 8022530:	6878      	ldr	r0, [r7, #4]
 8022532:	f7ff fda8 	bl	8022086 <strbuf_printchar>
			if( iIndex == 7 )
 8022536:	69fb      	ldr	r3, [r7, #28]
 8022538:	2b07      	cmp	r3, #7
 802253a:	d118      	bne.n	802256e <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 802253c:	213a      	movs	r1, #58	@ 0x3a
 802253e:	6878      	ldr	r0, [r7, #4]
 8022540:	f7ff fda1 	bl	8022086 <strbuf_printchar>
 8022544:	e013      	b.n	802256e <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8022546:	69fb      	ldr	r3, [r7, #28]
 8022548:	2b00      	cmp	r3, #0
 802254a:	dd03      	ble.n	8022554 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 802254c:	213a      	movs	r1, #58	@ 0x3a
 802254e:	6878      	ldr	r0, [r7, #4]
 8022550:	f7ff fd99 	bl	8022086 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8022554:	69fb      	ldr	r3, [r7, #28]
 8022556:	005b      	lsls	r3, r3, #1
 8022558:	683a      	ldr	r2, [r7, #0]
 802255a:	4413      	add	r3, r2
 802255c:	881b      	ldrh	r3, [r3, #0]
 802255e:	4618      	mov	r0, r3
 8022560:	f7ff ff78 	bl	8022454 <usNetToHost>
 8022564:	4603      	mov	r3, r0
 8022566:	4619      	mov	r1, r3
 8022568:	6878      	ldr	r0, [r7, #4]
 802256a:	f7ff febb 	bl	80222e4 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802256e:	69fb      	ldr	r3, [r7, #28]
 8022570:	3301      	adds	r3, #1
 8022572:	61fb      	str	r3, [r7, #28]
 8022574:	69fb      	ldr	r3, [r7, #28]
 8022576:	2b07      	cmp	r3, #7
 8022578:	ddd0      	ble.n	802251c <printIPv6+0x88>
		}
	}

	return pdTRUE;
 802257a:	2301      	movs	r3, #1
}
 802257c:	4618      	mov	r0, r3
 802257e:	3720      	adds	r7, #32
 8022580:	46bd      	mov	sp, r7
 8022582:	bd80      	pop	{r7, pc}

08022584 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8022584:	b590      	push	{r4, r7, lr}
 8022586:	b087      	sub	sp, #28
 8022588:	af00      	add	r7, sp, #0
 802258a:	60f8      	str	r0, [r7, #12]
 802258c:	60b9      	str	r1, [r7, #8]
 802258e:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8022590:	68bb      	ldr	r3, [r7, #8]
 8022592:	1c5a      	adds	r2, r3, #1
 8022594:	60ba      	str	r2, [r7, #8]
 8022596:	781b      	ldrb	r3, [r3, #0]
 8022598:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 802259a:	697b      	ldr	r3, [r7, #20]
 802259c:	2b25      	cmp	r3, #37	@ 0x25
 802259e:	d00f      	beq.n	80225c0 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 80225a0:	6979      	ldr	r1, [r7, #20]
 80225a2:	68f8      	ldr	r0, [r7, #12]
 80225a4:	f7ff fdad 	bl	8022102 <strbuf_printchar_inline>
 80225a8:	4603      	mov	r3, r0
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	f000 817e 	beq.w	80228ac <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 80225b0:	68bb      	ldr	r3, [r7, #8]
 80225b2:	1c5a      	adds	r2, r3, #1
 80225b4:	60ba      	str	r2, [r7, #8]
 80225b6:	781b      	ldrb	r3, [r3, #0]
 80225b8:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80225ba:	697b      	ldr	r3, [r7, #20]
 80225bc:	2b25      	cmp	r3, #37	@ 0x25
 80225be:	d1ef      	bne.n	80225a0 <tiny_print+0x1c>
		}
		ch = *( format++ );
 80225c0:	68bb      	ldr	r3, [r7, #8]
 80225c2:	1c5a      	adds	r2, r3, #1
 80225c4:	60ba      	str	r2, [r7, #8]
 80225c6:	781b      	ldrb	r3, [r3, #0]
 80225c8:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 80225ca:	697b      	ldr	r3, [r7, #20]
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	f000 8165 	beq.w	802289c <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 80225d2:	697b      	ldr	r3, [r7, #20]
 80225d4:	2b25      	cmp	r3, #37	@ 0x25
 80225d6:	d108      	bne.n	80225ea <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 80225d8:	6979      	ldr	r1, [r7, #20]
 80225da:	68f8      	ldr	r0, [r7, #12]
 80225dc:	f7ff fd53 	bl	8022086 <strbuf_printchar>
 80225e0:	4603      	mov	r3, r0
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	f040 814e 	bne.w	8022884 <tiny_print+0x300>
			{
				return;
 80225e8:	e161      	b.n	80228ae <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	3310      	adds	r3, #16
 80225ee:	2210      	movs	r2, #16
 80225f0:	2100      	movs	r1, #0
 80225f2:	4618      	mov	r0, r3
 80225f4:	f7ff fc79 	bl	8021eea <memset>

		if( ch == '-' )
 80225f8:	697b      	ldr	r3, [r7, #20]
 80225fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80225fc:	d114      	bne.n	8022628 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80225fe:	68bb      	ldr	r3, [r7, #8]
 8022600:	1c5a      	adds	r2, r3, #1
 8022602:	60ba      	str	r2, [r7, #8]
 8022604:	781b      	ldrb	r3, [r3, #0]
 8022606:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8022608:	68fb      	ldr	r3, [r7, #12]
 802260a:	2201      	movs	r2, #1
 802260c:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 802260e:	e00b      	b.n	8022628 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022610:	68bb      	ldr	r3, [r7, #8]
 8022612:	1c5a      	adds	r2, r3, #1
 8022614:	60ba      	str	r2, [r7, #8]
 8022616:	781b      	ldrb	r3, [r3, #0]
 8022618:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 802261a:	68fb      	ldr	r3, [r7, #12]
 802261c:	7f1b      	ldrb	r3, [r3, #28]
 802261e:	f043 0302 	orr.w	r3, r3, #2
 8022622:	b2da      	uxtb	r2, r3
 8022624:	68fb      	ldr	r3, [r7, #12]
 8022626:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8022628:	697b      	ldr	r3, [r7, #20]
 802262a:	2b30      	cmp	r3, #48	@ 0x30
 802262c:	d0f0      	beq.n	8022610 <tiny_print+0x8c>
		}
		if( ch == '*' )
 802262e:	697b      	ldr	r3, [r7, #20]
 8022630:	2b2a      	cmp	r3, #42	@ 0x2a
 8022632:	d120      	bne.n	8022676 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8022634:	68bb      	ldr	r3, [r7, #8]
 8022636:	1c5a      	adds	r2, r3, #1
 8022638:	60ba      	str	r2, [r7, #8]
 802263a:	781b      	ldrb	r3, [r3, #0]
 802263c:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	1d1a      	adds	r2, r3, #4
 8022642:	607a      	str	r2, [r7, #4]
 8022644:	681a      	ldr	r2, [r3, #0]
 8022646:	68fb      	ldr	r3, [r7, #12]
 8022648:	615a      	str	r2, [r3, #20]
 802264a:	e01a      	b.n	8022682 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 802264c:	68fb      	ldr	r3, [r7, #12]
 802264e:	695a      	ldr	r2, [r3, #20]
 8022650:	4613      	mov	r3, r2
 8022652:	009b      	lsls	r3, r3, #2
 8022654:	4413      	add	r3, r2
 8022656:	005b      	lsls	r3, r3, #1
 8022658:	461a      	mov	r2, r3
 802265a:	68fb      	ldr	r3, [r7, #12]
 802265c:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 802265e:	68fb      	ldr	r3, [r7, #12]
 8022660:	695a      	ldr	r2, [r3, #20]
 8022662:	697b      	ldr	r3, [r7, #20]
 8022664:	3b30      	subs	r3, #48	@ 0x30
 8022666:	441a      	add	r2, r3
 8022668:	68fb      	ldr	r3, [r7, #12]
 802266a:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 802266c:	68bb      	ldr	r3, [r7, #8]
 802266e:	1c5a      	adds	r2, r3, #1
 8022670:	60ba      	str	r2, [r7, #8]
 8022672:	781b      	ldrb	r3, [r3, #0]
 8022674:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8022676:	697b      	ldr	r3, [r7, #20]
 8022678:	2b2f      	cmp	r3, #47	@ 0x2f
 802267a:	dd02      	ble.n	8022682 <tiny_print+0xfe>
 802267c:	697b      	ldr	r3, [r7, #20]
 802267e:	2b39      	cmp	r3, #57	@ 0x39
 8022680:	dde4      	ble.n	802264c <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8022682:	697b      	ldr	r3, [r7, #20]
 8022684:	2b2e      	cmp	r3, #46	@ 0x2e
 8022686:	d12e      	bne.n	80226e6 <tiny_print+0x162>
		{
			ch = *( format++ );
 8022688:	68bb      	ldr	r3, [r7, #8]
 802268a:	1c5a      	adds	r2, r3, #1
 802268c:	60ba      	str	r2, [r7, #8]
 802268e:	781b      	ldrb	r3, [r3, #0]
 8022690:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8022692:	697b      	ldr	r3, [r7, #20]
 8022694:	2b2a      	cmp	r3, #42	@ 0x2a
 8022696:	d120      	bne.n	80226da <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	1d1a      	adds	r2, r3, #4
 802269c:	607a      	str	r2, [r7, #4]
 802269e:	681a      	ldr	r2, [r3, #0]
 80226a0:	68fb      	ldr	r3, [r7, #12]
 80226a2:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 80226a4:	68bb      	ldr	r3, [r7, #8]
 80226a6:	1c5a      	adds	r2, r3, #1
 80226a8:	60ba      	str	r2, [r7, #8]
 80226aa:	781b      	ldrb	r3, [r3, #0]
 80226ac:	617b      	str	r3, [r7, #20]
 80226ae:	e01a      	b.n	80226e6 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 80226b0:	68fb      	ldr	r3, [r7, #12]
 80226b2:	699a      	ldr	r2, [r3, #24]
 80226b4:	4613      	mov	r3, r2
 80226b6:	009b      	lsls	r3, r3, #2
 80226b8:	4413      	add	r3, r2
 80226ba:	005b      	lsls	r3, r3, #1
 80226bc:	461a      	mov	r2, r3
 80226be:	68fb      	ldr	r3, [r7, #12]
 80226c0:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 80226c2:	68fb      	ldr	r3, [r7, #12]
 80226c4:	699a      	ldr	r2, [r3, #24]
 80226c6:	697b      	ldr	r3, [r7, #20]
 80226c8:	3b30      	subs	r3, #48	@ 0x30
 80226ca:	441a      	add	r2, r3
 80226cc:	68fb      	ldr	r3, [r7, #12]
 80226ce:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 80226d0:	68bb      	ldr	r3, [r7, #8]
 80226d2:	1c5a      	adds	r2, r3, #1
 80226d4:	60ba      	str	r2, [r7, #8]
 80226d6:	781b      	ldrb	r3, [r3, #0]
 80226d8:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 80226da:	697b      	ldr	r3, [r7, #20]
 80226dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80226de:	dd02      	ble.n	80226e6 <tiny_print+0x162>
 80226e0:	697b      	ldr	r3, [r7, #20]
 80226e2:	2b39      	cmp	r3, #57	@ 0x39
 80226e4:	dde4      	ble.n	80226b0 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 80226e6:	68fb      	ldr	r3, [r7, #12]
 80226e8:	699b      	ldr	r3, [r3, #24]
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d104      	bne.n	80226f8 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 80226ee:	68fb      	ldr	r3, [r7, #12]
 80226f0:	699b      	ldr	r3, [r3, #24]
 80226f2:	1e5a      	subs	r2, r3, #1
 80226f4:	68fb      	ldr	r3, [r7, #12]
 80226f6:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 80226f8:	697b      	ldr	r3, [r7, #20]
 80226fa:	2b70      	cmp	r3, #112	@ 0x70
 80226fc:	d118      	bne.n	8022730 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 80226fe:	68bb      	ldr	r3, [r7, #8]
 8022700:	781b      	ldrb	r3, [r3, #0]
 8022702:	2b69      	cmp	r3, #105	@ 0x69
 8022704:	d114      	bne.n	8022730 <tiny_print+0x1ac>
 8022706:	68bb      	ldr	r3, [r7, #8]
 8022708:	3301      	adds	r3, #1
 802270a:	781b      	ldrb	r3, [r3, #0]
 802270c:	2b70      	cmp	r3, #112	@ 0x70
 802270e:	d10f      	bne.n	8022730 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8022710:	68bb      	ldr	r3, [r7, #8]
 8022712:	3302      	adds	r3, #2
 8022714:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	1d1a      	adds	r2, r3, #4
 802271a:	607a      	str	r2, [r7, #4]
 802271c:	681b      	ldr	r3, [r3, #0]
 802271e:	4619      	mov	r1, r3
 8022720:	68f8      	ldr	r0, [r7, #12]
 8022722:	f7ff feb7 	bl	8022494 <printIPv6>
 8022726:	4603      	mov	r3, r0
 8022728:	2b00      	cmp	r3, #0
 802272a:	f040 80ad 	bne.w	8022888 <tiny_print+0x304>
				{
					break;
 802272e:	e0b8      	b.n	80228a2 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8022730:	697b      	ldr	r3, [r7, #20]
 8022732:	2b73      	cmp	r3, #115	@ 0x73
 8022734:	d112      	bne.n	802275c <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	1d1a      	adds	r2, r3, #4
 802273a:	607a      	str	r2, [r7, #4]
 802273c:	681b      	ldr	r3, [r3, #0]
 802273e:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8022740:	2c00      	cmp	r4, #0
 8022742:	d001      	beq.n	8022748 <tiny_print+0x1c4>
 8022744:	4623      	mov	r3, r4
 8022746:	e000      	b.n	802274a <tiny_print+0x1c6>
 8022748:	4b5a      	ldr	r3, [pc, #360]	@ (80228b4 <tiny_print+0x330>)
 802274a:	4619      	mov	r1, r3
 802274c:	68f8      	ldr	r0, [r7, #12]
 802274e:	f7ff fd21 	bl	8022194 <prints>
 8022752:	4603      	mov	r3, r0
 8022754:	2b00      	cmp	r3, #0
 8022756:	f040 8099 	bne.w	802288c <tiny_print+0x308>
			{
				break;
 802275a:	e0a2      	b.n	80228a2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 802275c:	697b      	ldr	r3, [r7, #20]
 802275e:	2b63      	cmp	r3, #99	@ 0x63
 8022760:	d10f      	bne.n	8022782 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8022762:	687b      	ldr	r3, [r7, #4]
 8022764:	1d1a      	adds	r2, r3, #4
 8022766:	607a      	str	r2, [r7, #4]
 8022768:	681b      	ldr	r3, [r3, #0]
 802276a:	b2db      	uxtb	r3, r3
 802276c:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802276e:	7c3b      	ldrb	r3, [r7, #16]
 8022770:	4619      	mov	r1, r3
 8022772:	68f8      	ldr	r0, [r7, #12]
 8022774:	f7ff fc87 	bl	8022086 <strbuf_printchar>
 8022778:	4603      	mov	r3, r0
 802277a:	2b00      	cmp	r3, #0
 802277c:	f040 8088 	bne.w	8022890 <tiny_print+0x30c>
			{
				return;
 8022780:	e095      	b.n	80228ae <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8022782:	697b      	ldr	r3, [r7, #20]
 8022784:	2b6c      	cmp	r3, #108	@ 0x6c
 8022786:	d109      	bne.n	802279c <tiny_print+0x218>
		{
			ch = *( format++ );
 8022788:	68bb      	ldr	r3, [r7, #8]
 802278a:	1c5a      	adds	r2, r3, #1
 802278c:	60ba      	str	r2, [r7, #8]
 802278e:	781b      	ldrb	r3, [r3, #0]
 8022790:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8022792:	68fa      	ldr	r2, [r7, #12]
 8022794:	7f93      	ldrb	r3, [r2, #30]
 8022796:	f043 0304 	orr.w	r3, r3, #4
 802279a:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 802279c:	697b      	ldr	r3, [r7, #20]
 802279e:	2b4c      	cmp	r3, #76	@ 0x4c
 80227a0:	d109      	bne.n	80227b6 <tiny_print+0x232>
		{
			ch = *( format++ );
 80227a2:	68bb      	ldr	r3, [r7, #8]
 80227a4:	1c5a      	adds	r2, r3, #1
 80227a6:	60ba      	str	r2, [r7, #8]
 80227a8:	781b      	ldrb	r3, [r3, #0]
 80227aa:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 80227ac:	68fa      	ldr	r2, [r7, #12]
 80227ae:	7f93      	ldrb	r3, [r2, #30]
 80227b0:	f043 0308 	orr.w	r3, r3, #8
 80227b4:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 80227b6:	68fb      	ldr	r3, [r7, #12]
 80227b8:	220a      	movs	r2, #10
 80227ba:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 80227bc:	68fb      	ldr	r3, [r7, #12]
 80227be:	2261      	movs	r2, #97	@ 0x61
 80227c0:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 80227c2:	697b      	ldr	r3, [r7, #20]
 80227c4:	2b64      	cmp	r3, #100	@ 0x64
 80227c6:	d002      	beq.n	80227ce <tiny_print+0x24a>
 80227c8:	697b      	ldr	r3, [r7, #20]
 80227ca:	2b75      	cmp	r3, #117	@ 0x75
 80227cc:	d116      	bne.n	80227fc <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 80227ce:	697b      	ldr	r3, [r7, #20]
 80227d0:	2b64      	cmp	r3, #100	@ 0x64
 80227d2:	bf0c      	ite	eq
 80227d4:	2301      	moveq	r3, #1
 80227d6:	2300      	movne	r3, #0
 80227d8:	b2d9      	uxtb	r1, r3
 80227da:	68fa      	ldr	r2, [r7, #12]
 80227dc:	7f93      	ldrb	r3, [r2, #30]
 80227de:	f361 0300 	bfi	r3, r1, #0, #1
 80227e2:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	1d1a      	adds	r2, r3, #4
 80227e8:	607a      	str	r2, [r7, #4]
 80227ea:	681b      	ldr	r3, [r3, #0]
 80227ec:	4619      	mov	r1, r3
 80227ee:	68f8      	ldr	r0, [r7, #12]
 80227f0:	f7ff fd78 	bl	80222e4 <printi>
 80227f4:	4603      	mov	r3, r0
 80227f6:	2b00      	cmp	r3, #0
 80227f8:	d14c      	bne.n	8022894 <tiny_print+0x310>
			{
				break;
 80227fa:	e052      	b.n	80228a2 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 80227fc:	68fb      	ldr	r3, [r7, #12]
 80227fe:	2210      	movs	r2, #16
 8022800:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8022802:	697b      	ldr	r3, [r7, #20]
 8022804:	2b78      	cmp	r3, #120	@ 0x78
 8022806:	d117      	bne.n	8022838 <tiny_print+0x2b4>
 8022808:	68bb      	ldr	r3, [r7, #8]
 802280a:	781b      	ldrb	r3, [r3, #0]
 802280c:	2b69      	cmp	r3, #105	@ 0x69
 802280e:	d113      	bne.n	8022838 <tiny_print+0x2b4>
 8022810:	68bb      	ldr	r3, [r7, #8]
 8022812:	3301      	adds	r3, #1
 8022814:	781b      	ldrb	r3, [r3, #0]
 8022816:	2b70      	cmp	r3, #112	@ 0x70
 8022818:	d10e      	bne.n	8022838 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 802281a:	68bb      	ldr	r3, [r7, #8]
 802281c:	3302      	adds	r3, #2
 802281e:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	1d1a      	adds	r2, r3, #4
 8022824:	607a      	str	r2, [r7, #4]
 8022826:	681b      	ldr	r3, [r3, #0]
 8022828:	4619      	mov	r1, r3
 802282a:	68f8      	ldr	r0, [r7, #12]
 802282c:	f7ff fde8 	bl	8022400 <printIp>
 8022830:	4603      	mov	r3, r0
 8022832:	2b00      	cmp	r3, #0
 8022834:	d130      	bne.n	8022898 <tiny_print+0x314>
			{
				break;
 8022836:	e034      	b.n	80228a2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8022838:	697b      	ldr	r3, [r7, #20]
 802283a:	2b78      	cmp	r3, #120	@ 0x78
 802283c:	d009      	beq.n	8022852 <tiny_print+0x2ce>
 802283e:	697b      	ldr	r3, [r7, #20]
 8022840:	2b58      	cmp	r3, #88	@ 0x58
 8022842:	d006      	beq.n	8022852 <tiny_print+0x2ce>
 8022844:	697b      	ldr	r3, [r7, #20]
 8022846:	2b70      	cmp	r3, #112	@ 0x70
 8022848:	d003      	beq.n	8022852 <tiny_print+0x2ce>
 802284a:	697b      	ldr	r3, [r7, #20]
 802284c:	2b6f      	cmp	r3, #111	@ 0x6f
 802284e:	f47f ae9f 	bne.w	8022590 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8022852:	697b      	ldr	r3, [r7, #20]
 8022854:	2b58      	cmp	r3, #88	@ 0x58
 8022856:	d103      	bne.n	8022860 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	2241      	movs	r2, #65	@ 0x41
 802285c:	775a      	strb	r2, [r3, #29]
 802285e:	e005      	b.n	802286c <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8022860:	697b      	ldr	r3, [r7, #20]
 8022862:	2b6f      	cmp	r3, #111	@ 0x6f
 8022864:	d102      	bne.n	802286c <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8022866:	68fb      	ldr	r3, [r7, #12]
 8022868:	2208      	movs	r2, #8
 802286a:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	1d1a      	adds	r2, r3, #4
 8022870:	607a      	str	r2, [r7, #4]
 8022872:	681b      	ldr	r3, [r3, #0]
 8022874:	4619      	mov	r1, r3
 8022876:	68f8      	ldr	r0, [r7, #12]
 8022878:	f7ff fd34 	bl	80222e4 <printi>
 802287c:	4603      	mov	r3, r0
 802287e:	2b00      	cmp	r3, #0
 8022880:	d00e      	beq.n	80228a0 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8022882:	e00a      	b.n	802289a <tiny_print+0x316>
			continue;
 8022884:	bf00      	nop
 8022886:	e683      	b.n	8022590 <tiny_print+0xc>
				continue;
 8022888:	bf00      	nop
 802288a:	e681      	b.n	8022590 <tiny_print+0xc>
			continue;
 802288c:	bf00      	nop
 802288e:	e67f      	b.n	8022590 <tiny_print+0xc>
			continue;
 8022890:	bf00      	nop
 8022892:	e67d      	b.n	8022590 <tiny_print+0xc>
			continue;
 8022894:	bf00      	nop
 8022896:	e67b      	b.n	8022590 <tiny_print+0xc>
			continue;
 8022898:	bf00      	nop
	{
 802289a:	e679      	b.n	8022590 <tiny_print+0xc>
			break;
 802289c:	bf00      	nop
 802289e:	e000      	b.n	80228a2 <tiny_print+0x31e>
				break;
 80228a0:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 80228a2:	2100      	movs	r1, #0
 80228a4:	68f8      	ldr	r0, [r7, #12]
 80228a6:	f7ff fbee 	bl	8022086 <strbuf_printchar>
 80228aa:	e000      	b.n	80228ae <tiny_print+0x32a>
					return;
 80228ac:	bf00      	nop
}
 80228ae:	371c      	adds	r7, #28
 80228b0:	46bd      	mov	sp, r7
 80228b2:	bd90      	pop	{r4, r7, pc}
 80228b4:	08026e94 	.word	0x08026e94

080228b8 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 80228b8:	b580      	push	{r7, lr}
 80228ba:	b08c      	sub	sp, #48	@ 0x30
 80228bc:	af00      	add	r7, sp, #0
 80228be:	60f8      	str	r0, [r7, #12]
 80228c0:	60b9      	str	r1, [r7, #8]
 80228c2:	607a      	str	r2, [r7, #4]
 80228c4:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80228c6:	68fa      	ldr	r2, [r7, #12]
 80228c8:	68bb      	ldr	r3, [r7, #8]
 80228ca:	441a      	add	r2, r3
 80228cc:	f107 0310 	add.w	r3, r7, #16
 80228d0:	68f9      	ldr	r1, [r7, #12]
 80228d2:	4618      	mov	r0, r3
 80228d4:	f7ff fbb9 	bl	802204a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80228d8:	f107 0310 	add.w	r3, r7, #16
 80228dc:	683a      	ldr	r2, [r7, #0]
 80228de:	6879      	ldr	r1, [r7, #4]
 80228e0:	4618      	mov	r0, r3
 80228e2:	f7ff fe4f 	bl	8022584 <tiny_print>

	return strBuf.curLen;
 80228e6:	69fb      	ldr	r3, [r7, #28]
}
 80228e8:	4618      	mov	r0, r3
 80228ea:	3730      	adds	r7, #48	@ 0x30
 80228ec:	46bd      	mov	sp, r7
 80228ee:	bd80      	pop	{r7, pc}

080228f0 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 80228f0:	b40c      	push	{r2, r3}
 80228f2:	b580      	push	{r7, lr}
 80228f4:	b08c      	sub	sp, #48	@ 0x30
 80228f6:	af00      	add	r7, sp, #0
 80228f8:	6078      	str	r0, [r7, #4]
 80228fa:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 80228fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8022900:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8022902:	687a      	ldr	r2, [r7, #4]
 8022904:	683b      	ldr	r3, [r7, #0]
 8022906:	441a      	add	r2, r3
 8022908:	f107 030c 	add.w	r3, r7, #12
 802290c:	6879      	ldr	r1, [r7, #4]
 802290e:	4618      	mov	r0, r3
 8022910:	f7ff fb9b 	bl	802204a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022914:	f107 030c 	add.w	r3, r7, #12
 8022918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802291a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 802291c:	4618      	mov	r0, r3
 802291e:	f7ff fe31 	bl	8022584 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022922:	69bb      	ldr	r3, [r7, #24]
}
 8022924:	4618      	mov	r0, r3
 8022926:	3730      	adds	r7, #48	@ 0x30
 8022928:	46bd      	mov	sp, r7
 802292a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802292e:	b002      	add	sp, #8
 8022930:	4770      	bx	lr

08022932 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8022932:	b40e      	push	{r1, r2, r3}
 8022934:	b580      	push	{r7, lr}
 8022936:	b08d      	sub	sp, #52	@ 0x34
 8022938:	af00      	add	r7, sp, #0
 802293a:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 802293c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8022940:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8022942:	687b      	ldr	r3, [r7, #4]
 8022944:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8022948:	f107 030c 	add.w	r3, r7, #12
 802294c:	6879      	ldr	r1, [r7, #4]
 802294e:	4618      	mov	r0, r3
 8022950:	f7ff fb7b 	bl	802204a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022954:	f107 030c 	add.w	r3, r7, #12
 8022958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802295a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802295c:	4618      	mov	r0, r3
 802295e:	f7ff fe11 	bl	8022584 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022962:	69bb      	ldr	r3, [r7, #24]
}
 8022964:	4618      	mov	r0, r3
 8022966:	3734      	adds	r7, #52	@ 0x34
 8022968:	46bd      	mov	sp, r7
 802296a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802296e:	b003      	add	sp, #12
 8022970:	4770      	bx	lr
	...

08022974 <rand>:
 8022974:	4b16      	ldr	r3, [pc, #88]	@ (80229d0 <rand+0x5c>)
 8022976:	b510      	push	{r4, lr}
 8022978:	681c      	ldr	r4, [r3, #0]
 802297a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802297c:	b9b3      	cbnz	r3, 80229ac <rand+0x38>
 802297e:	2018      	movs	r0, #24
 8022980:	f000 fa70 	bl	8022e64 <malloc>
 8022984:	4602      	mov	r2, r0
 8022986:	6320      	str	r0, [r4, #48]	@ 0x30
 8022988:	b920      	cbnz	r0, 8022994 <rand+0x20>
 802298a:	4b12      	ldr	r3, [pc, #72]	@ (80229d4 <rand+0x60>)
 802298c:	4812      	ldr	r0, [pc, #72]	@ (80229d8 <rand+0x64>)
 802298e:	2152      	movs	r1, #82	@ 0x52
 8022990:	f000 fa00 	bl	8022d94 <__assert_func>
 8022994:	4911      	ldr	r1, [pc, #68]	@ (80229dc <rand+0x68>)
 8022996:	4b12      	ldr	r3, [pc, #72]	@ (80229e0 <rand+0x6c>)
 8022998:	e9c0 1300 	strd	r1, r3, [r0]
 802299c:	4b11      	ldr	r3, [pc, #68]	@ (80229e4 <rand+0x70>)
 802299e:	6083      	str	r3, [r0, #8]
 80229a0:	230b      	movs	r3, #11
 80229a2:	8183      	strh	r3, [r0, #12]
 80229a4:	2100      	movs	r1, #0
 80229a6:	2001      	movs	r0, #1
 80229a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80229ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80229ae:	480e      	ldr	r0, [pc, #56]	@ (80229e8 <rand+0x74>)
 80229b0:	690b      	ldr	r3, [r1, #16]
 80229b2:	694c      	ldr	r4, [r1, #20]
 80229b4:	4a0d      	ldr	r2, [pc, #52]	@ (80229ec <rand+0x78>)
 80229b6:	4358      	muls	r0, r3
 80229b8:	fb02 0004 	mla	r0, r2, r4, r0
 80229bc:	fba3 3202 	umull	r3, r2, r3, r2
 80229c0:	3301      	adds	r3, #1
 80229c2:	eb40 0002 	adc.w	r0, r0, r2
 80229c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80229ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80229ce:	bd10      	pop	{r4, pc}
 80229d0:	20000038 	.word	0x20000038
 80229d4:	08027054 	.word	0x08027054
 80229d8:	0802706b 	.word	0x0802706b
 80229dc:	abcd330e 	.word	0xabcd330e
 80229e0:	e66d1234 	.word	0xe66d1234
 80229e4:	0005deec 	.word	0x0005deec
 80229e8:	5851f42d 	.word	0x5851f42d
 80229ec:	4c957f2d 	.word	0x4c957f2d

080229f0 <std>:
 80229f0:	2300      	movs	r3, #0
 80229f2:	b510      	push	{r4, lr}
 80229f4:	4604      	mov	r4, r0
 80229f6:	e9c0 3300 	strd	r3, r3, [r0]
 80229fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80229fe:	6083      	str	r3, [r0, #8]
 8022a00:	8181      	strh	r1, [r0, #12]
 8022a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8022a04:	81c2      	strh	r2, [r0, #14]
 8022a06:	6183      	str	r3, [r0, #24]
 8022a08:	4619      	mov	r1, r3
 8022a0a:	2208      	movs	r2, #8
 8022a0c:	305c      	adds	r0, #92	@ 0x5c
 8022a0e:	f7ff fa6c 	bl	8021eea <memset>
 8022a12:	4b0d      	ldr	r3, [pc, #52]	@ (8022a48 <std+0x58>)
 8022a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8022a16:	4b0d      	ldr	r3, [pc, #52]	@ (8022a4c <std+0x5c>)
 8022a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8022a50 <std+0x60>)
 8022a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8022a54 <std+0x64>)
 8022a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8022a22:	4b0d      	ldr	r3, [pc, #52]	@ (8022a58 <std+0x68>)
 8022a24:	6224      	str	r4, [r4, #32]
 8022a26:	429c      	cmp	r4, r3
 8022a28:	d006      	beq.n	8022a38 <std+0x48>
 8022a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022a2e:	4294      	cmp	r4, r2
 8022a30:	d002      	beq.n	8022a38 <std+0x48>
 8022a32:	33d0      	adds	r3, #208	@ 0xd0
 8022a34:	429c      	cmp	r4, r3
 8022a36:	d105      	bne.n	8022a44 <std+0x54>
 8022a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a40:	f000 b9a4 	b.w	8022d8c <__retarget_lock_init_recursive>
 8022a44:	bd10      	pop	{r4, pc}
 8022a46:	bf00      	nop
 8022a48:	08022b75 	.word	0x08022b75
 8022a4c:	08022b97 	.word	0x08022b97
 8022a50:	08022bcf 	.word	0x08022bcf
 8022a54:	08022bf3 	.word	0x08022bf3
 8022a58:	20002574 	.word	0x20002574

08022a5c <stdio_exit_handler>:
 8022a5c:	4a02      	ldr	r2, [pc, #8]	@ (8022a68 <stdio_exit_handler+0xc>)
 8022a5e:	4903      	ldr	r1, [pc, #12]	@ (8022a6c <stdio_exit_handler+0x10>)
 8022a60:	4803      	ldr	r0, [pc, #12]	@ (8022a70 <stdio_exit_handler+0x14>)
 8022a62:	f000 b869 	b.w	8022b38 <_fwalk_sglue>
 8022a66:	bf00      	nop
 8022a68:	2000002c 	.word	0x2000002c
 8022a6c:	080230d9 	.word	0x080230d9
 8022a70:	2000003c 	.word	0x2000003c

08022a74 <cleanup_stdio>:
 8022a74:	6841      	ldr	r1, [r0, #4]
 8022a76:	4b0c      	ldr	r3, [pc, #48]	@ (8022aa8 <cleanup_stdio+0x34>)
 8022a78:	4299      	cmp	r1, r3
 8022a7a:	b510      	push	{r4, lr}
 8022a7c:	4604      	mov	r4, r0
 8022a7e:	d001      	beq.n	8022a84 <cleanup_stdio+0x10>
 8022a80:	f000 fb2a 	bl	80230d8 <_fflush_r>
 8022a84:	68a1      	ldr	r1, [r4, #8]
 8022a86:	4b09      	ldr	r3, [pc, #36]	@ (8022aac <cleanup_stdio+0x38>)
 8022a88:	4299      	cmp	r1, r3
 8022a8a:	d002      	beq.n	8022a92 <cleanup_stdio+0x1e>
 8022a8c:	4620      	mov	r0, r4
 8022a8e:	f000 fb23 	bl	80230d8 <_fflush_r>
 8022a92:	68e1      	ldr	r1, [r4, #12]
 8022a94:	4b06      	ldr	r3, [pc, #24]	@ (8022ab0 <cleanup_stdio+0x3c>)
 8022a96:	4299      	cmp	r1, r3
 8022a98:	d004      	beq.n	8022aa4 <cleanup_stdio+0x30>
 8022a9a:	4620      	mov	r0, r4
 8022a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022aa0:	f000 bb1a 	b.w	80230d8 <_fflush_r>
 8022aa4:	bd10      	pop	{r4, pc}
 8022aa6:	bf00      	nop
 8022aa8:	20002574 	.word	0x20002574
 8022aac:	200025dc 	.word	0x200025dc
 8022ab0:	20002644 	.word	0x20002644

08022ab4 <global_stdio_init.part.0>:
 8022ab4:	b510      	push	{r4, lr}
 8022ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8022ae4 <global_stdio_init.part.0+0x30>)
 8022ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8022ae8 <global_stdio_init.part.0+0x34>)
 8022aba:	4a0c      	ldr	r2, [pc, #48]	@ (8022aec <global_stdio_init.part.0+0x38>)
 8022abc:	601a      	str	r2, [r3, #0]
 8022abe:	4620      	mov	r0, r4
 8022ac0:	2200      	movs	r2, #0
 8022ac2:	2104      	movs	r1, #4
 8022ac4:	f7ff ff94 	bl	80229f0 <std>
 8022ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022acc:	2201      	movs	r2, #1
 8022ace:	2109      	movs	r1, #9
 8022ad0:	f7ff ff8e 	bl	80229f0 <std>
 8022ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022ad8:	2202      	movs	r2, #2
 8022ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ade:	2112      	movs	r1, #18
 8022ae0:	f7ff bf86 	b.w	80229f0 <std>
 8022ae4:	200026ac 	.word	0x200026ac
 8022ae8:	20002574 	.word	0x20002574
 8022aec:	08022a5d 	.word	0x08022a5d

08022af0 <__sfp_lock_acquire>:
 8022af0:	4801      	ldr	r0, [pc, #4]	@ (8022af8 <__sfp_lock_acquire+0x8>)
 8022af2:	f000 b94c 	b.w	8022d8e <__retarget_lock_acquire_recursive>
 8022af6:	bf00      	nop
 8022af8:	200026b5 	.word	0x200026b5

08022afc <__sfp_lock_release>:
 8022afc:	4801      	ldr	r0, [pc, #4]	@ (8022b04 <__sfp_lock_release+0x8>)
 8022afe:	f000 b947 	b.w	8022d90 <__retarget_lock_release_recursive>
 8022b02:	bf00      	nop
 8022b04:	200026b5 	.word	0x200026b5

08022b08 <__sinit>:
 8022b08:	b510      	push	{r4, lr}
 8022b0a:	4604      	mov	r4, r0
 8022b0c:	f7ff fff0 	bl	8022af0 <__sfp_lock_acquire>
 8022b10:	6a23      	ldr	r3, [r4, #32]
 8022b12:	b11b      	cbz	r3, 8022b1c <__sinit+0x14>
 8022b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b18:	f7ff bff0 	b.w	8022afc <__sfp_lock_release>
 8022b1c:	4b04      	ldr	r3, [pc, #16]	@ (8022b30 <__sinit+0x28>)
 8022b1e:	6223      	str	r3, [r4, #32]
 8022b20:	4b04      	ldr	r3, [pc, #16]	@ (8022b34 <__sinit+0x2c>)
 8022b22:	681b      	ldr	r3, [r3, #0]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d1f5      	bne.n	8022b14 <__sinit+0xc>
 8022b28:	f7ff ffc4 	bl	8022ab4 <global_stdio_init.part.0>
 8022b2c:	e7f2      	b.n	8022b14 <__sinit+0xc>
 8022b2e:	bf00      	nop
 8022b30:	08022a75 	.word	0x08022a75
 8022b34:	200026ac 	.word	0x200026ac

08022b38 <_fwalk_sglue>:
 8022b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b3c:	4607      	mov	r7, r0
 8022b3e:	4688      	mov	r8, r1
 8022b40:	4614      	mov	r4, r2
 8022b42:	2600      	movs	r6, #0
 8022b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022b48:	f1b9 0901 	subs.w	r9, r9, #1
 8022b4c:	d505      	bpl.n	8022b5a <_fwalk_sglue+0x22>
 8022b4e:	6824      	ldr	r4, [r4, #0]
 8022b50:	2c00      	cmp	r4, #0
 8022b52:	d1f7      	bne.n	8022b44 <_fwalk_sglue+0xc>
 8022b54:	4630      	mov	r0, r6
 8022b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b5a:	89ab      	ldrh	r3, [r5, #12]
 8022b5c:	2b01      	cmp	r3, #1
 8022b5e:	d907      	bls.n	8022b70 <_fwalk_sglue+0x38>
 8022b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022b64:	3301      	adds	r3, #1
 8022b66:	d003      	beq.n	8022b70 <_fwalk_sglue+0x38>
 8022b68:	4629      	mov	r1, r5
 8022b6a:	4638      	mov	r0, r7
 8022b6c:	47c0      	blx	r8
 8022b6e:	4306      	orrs	r6, r0
 8022b70:	3568      	adds	r5, #104	@ 0x68
 8022b72:	e7e9      	b.n	8022b48 <_fwalk_sglue+0x10>

08022b74 <__sread>:
 8022b74:	b510      	push	{r4, lr}
 8022b76:	460c      	mov	r4, r1
 8022b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022b7c:	f000 f8b8 	bl	8022cf0 <_read_r>
 8022b80:	2800      	cmp	r0, #0
 8022b82:	bfab      	itete	ge
 8022b84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022b86:	89a3      	ldrhlt	r3, [r4, #12]
 8022b88:	181b      	addge	r3, r3, r0
 8022b8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022b8e:	bfac      	ite	ge
 8022b90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022b92:	81a3      	strhlt	r3, [r4, #12]
 8022b94:	bd10      	pop	{r4, pc}

08022b96 <__swrite>:
 8022b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b9a:	461f      	mov	r7, r3
 8022b9c:	898b      	ldrh	r3, [r1, #12]
 8022b9e:	05db      	lsls	r3, r3, #23
 8022ba0:	4605      	mov	r5, r0
 8022ba2:	460c      	mov	r4, r1
 8022ba4:	4616      	mov	r6, r2
 8022ba6:	d505      	bpl.n	8022bb4 <__swrite+0x1e>
 8022ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022bac:	2302      	movs	r3, #2
 8022bae:	2200      	movs	r2, #0
 8022bb0:	f000 f88c 	bl	8022ccc <_lseek_r>
 8022bb4:	89a3      	ldrh	r3, [r4, #12]
 8022bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022bba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022bbe:	81a3      	strh	r3, [r4, #12]
 8022bc0:	4632      	mov	r2, r6
 8022bc2:	463b      	mov	r3, r7
 8022bc4:	4628      	mov	r0, r5
 8022bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022bca:	f000 b8a3 	b.w	8022d14 <_write_r>

08022bce <__sseek>:
 8022bce:	b510      	push	{r4, lr}
 8022bd0:	460c      	mov	r4, r1
 8022bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022bd6:	f000 f879 	bl	8022ccc <_lseek_r>
 8022bda:	1c43      	adds	r3, r0, #1
 8022bdc:	89a3      	ldrh	r3, [r4, #12]
 8022bde:	bf15      	itete	ne
 8022be0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022be2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022be6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022bea:	81a3      	strheq	r3, [r4, #12]
 8022bec:	bf18      	it	ne
 8022bee:	81a3      	strhne	r3, [r4, #12]
 8022bf0:	bd10      	pop	{r4, pc}

08022bf2 <__sclose>:
 8022bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022bf6:	f000 b859 	b.w	8022cac <_close_r>

08022bfa <memcmp>:
 8022bfa:	b510      	push	{r4, lr}
 8022bfc:	3901      	subs	r1, #1
 8022bfe:	4402      	add	r2, r0
 8022c00:	4290      	cmp	r0, r2
 8022c02:	d101      	bne.n	8022c08 <memcmp+0xe>
 8022c04:	2000      	movs	r0, #0
 8022c06:	e005      	b.n	8022c14 <memcmp+0x1a>
 8022c08:	7803      	ldrb	r3, [r0, #0]
 8022c0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022c0e:	42a3      	cmp	r3, r4
 8022c10:	d001      	beq.n	8022c16 <memcmp+0x1c>
 8022c12:	1b18      	subs	r0, r3, r4
 8022c14:	bd10      	pop	{r4, pc}
 8022c16:	3001      	adds	r0, #1
 8022c18:	e7f2      	b.n	8022c00 <memcmp+0x6>

08022c1a <memmove>:
 8022c1a:	4288      	cmp	r0, r1
 8022c1c:	b510      	push	{r4, lr}
 8022c1e:	eb01 0402 	add.w	r4, r1, r2
 8022c22:	d902      	bls.n	8022c2a <memmove+0x10>
 8022c24:	4284      	cmp	r4, r0
 8022c26:	4623      	mov	r3, r4
 8022c28:	d807      	bhi.n	8022c3a <memmove+0x20>
 8022c2a:	1e43      	subs	r3, r0, #1
 8022c2c:	42a1      	cmp	r1, r4
 8022c2e:	d008      	beq.n	8022c42 <memmove+0x28>
 8022c30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022c38:	e7f8      	b.n	8022c2c <memmove+0x12>
 8022c3a:	4402      	add	r2, r0
 8022c3c:	4601      	mov	r1, r0
 8022c3e:	428a      	cmp	r2, r1
 8022c40:	d100      	bne.n	8022c44 <memmove+0x2a>
 8022c42:	bd10      	pop	{r4, pc}
 8022c44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022c48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022c4c:	e7f7      	b.n	8022c3e <memmove+0x24>
	...

08022c50 <strcasecmp>:
 8022c50:	b530      	push	{r4, r5, lr}
 8022c52:	4d0b      	ldr	r5, [pc, #44]	@ (8022c80 <strcasecmp+0x30>)
 8022c54:	4604      	mov	r4, r0
 8022c56:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022c5a:	5cea      	ldrb	r2, [r5, r3]
 8022c5c:	f002 0203 	and.w	r2, r2, #3
 8022c60:	2a01      	cmp	r2, #1
 8022c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c66:	5ca8      	ldrb	r0, [r5, r2]
 8022c68:	f000 0003 	and.w	r0, r0, #3
 8022c6c:	bf08      	it	eq
 8022c6e:	3320      	addeq	r3, #32
 8022c70:	2801      	cmp	r0, #1
 8022c72:	bf08      	it	eq
 8022c74:	3220      	addeq	r2, #32
 8022c76:	1a98      	subs	r0, r3, r2
 8022c78:	d101      	bne.n	8022c7e <strcasecmp+0x2e>
 8022c7a:	2a00      	cmp	r2, #0
 8022c7c:	d1eb      	bne.n	8022c56 <strcasecmp+0x6>
 8022c7e:	bd30      	pop	{r4, r5, pc}
 8022c80:	08027100 	.word	0x08027100

08022c84 <strncpy>:
 8022c84:	b510      	push	{r4, lr}
 8022c86:	3901      	subs	r1, #1
 8022c88:	4603      	mov	r3, r0
 8022c8a:	b132      	cbz	r2, 8022c9a <strncpy+0x16>
 8022c8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022c90:	f803 4b01 	strb.w	r4, [r3], #1
 8022c94:	3a01      	subs	r2, #1
 8022c96:	2c00      	cmp	r4, #0
 8022c98:	d1f7      	bne.n	8022c8a <strncpy+0x6>
 8022c9a:	441a      	add	r2, r3
 8022c9c:	2100      	movs	r1, #0
 8022c9e:	4293      	cmp	r3, r2
 8022ca0:	d100      	bne.n	8022ca4 <strncpy+0x20>
 8022ca2:	bd10      	pop	{r4, pc}
 8022ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8022ca8:	e7f9      	b.n	8022c9e <strncpy+0x1a>
	...

08022cac <_close_r>:
 8022cac:	b538      	push	{r3, r4, r5, lr}
 8022cae:	4d06      	ldr	r5, [pc, #24]	@ (8022cc8 <_close_r+0x1c>)
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	4604      	mov	r4, r0
 8022cb4:	4608      	mov	r0, r1
 8022cb6:	602b      	str	r3, [r5, #0]
 8022cb8:	f7df fcb8 	bl	800262c <_close>
 8022cbc:	1c43      	adds	r3, r0, #1
 8022cbe:	d102      	bne.n	8022cc6 <_close_r+0x1a>
 8022cc0:	682b      	ldr	r3, [r5, #0]
 8022cc2:	b103      	cbz	r3, 8022cc6 <_close_r+0x1a>
 8022cc4:	6023      	str	r3, [r4, #0]
 8022cc6:	bd38      	pop	{r3, r4, r5, pc}
 8022cc8:	200026b0 	.word	0x200026b0

08022ccc <_lseek_r>:
 8022ccc:	b538      	push	{r3, r4, r5, lr}
 8022cce:	4d07      	ldr	r5, [pc, #28]	@ (8022cec <_lseek_r+0x20>)
 8022cd0:	4604      	mov	r4, r0
 8022cd2:	4608      	mov	r0, r1
 8022cd4:	4611      	mov	r1, r2
 8022cd6:	2200      	movs	r2, #0
 8022cd8:	602a      	str	r2, [r5, #0]
 8022cda:	461a      	mov	r2, r3
 8022cdc:	f7df fccd 	bl	800267a <_lseek>
 8022ce0:	1c43      	adds	r3, r0, #1
 8022ce2:	d102      	bne.n	8022cea <_lseek_r+0x1e>
 8022ce4:	682b      	ldr	r3, [r5, #0]
 8022ce6:	b103      	cbz	r3, 8022cea <_lseek_r+0x1e>
 8022ce8:	6023      	str	r3, [r4, #0]
 8022cea:	bd38      	pop	{r3, r4, r5, pc}
 8022cec:	200026b0 	.word	0x200026b0

08022cf0 <_read_r>:
 8022cf0:	b538      	push	{r3, r4, r5, lr}
 8022cf2:	4d07      	ldr	r5, [pc, #28]	@ (8022d10 <_read_r+0x20>)
 8022cf4:	4604      	mov	r4, r0
 8022cf6:	4608      	mov	r0, r1
 8022cf8:	4611      	mov	r1, r2
 8022cfa:	2200      	movs	r2, #0
 8022cfc:	602a      	str	r2, [r5, #0]
 8022cfe:	461a      	mov	r2, r3
 8022d00:	f7df fc5b 	bl	80025ba <_read>
 8022d04:	1c43      	adds	r3, r0, #1
 8022d06:	d102      	bne.n	8022d0e <_read_r+0x1e>
 8022d08:	682b      	ldr	r3, [r5, #0]
 8022d0a:	b103      	cbz	r3, 8022d0e <_read_r+0x1e>
 8022d0c:	6023      	str	r3, [r4, #0]
 8022d0e:	bd38      	pop	{r3, r4, r5, pc}
 8022d10:	200026b0 	.word	0x200026b0

08022d14 <_write_r>:
 8022d14:	b538      	push	{r3, r4, r5, lr}
 8022d16:	4d07      	ldr	r5, [pc, #28]	@ (8022d34 <_write_r+0x20>)
 8022d18:	4604      	mov	r4, r0
 8022d1a:	4608      	mov	r0, r1
 8022d1c:	4611      	mov	r1, r2
 8022d1e:	2200      	movs	r2, #0
 8022d20:	602a      	str	r2, [r5, #0]
 8022d22:	461a      	mov	r2, r3
 8022d24:	f7df fc66 	bl	80025f4 <_write>
 8022d28:	1c43      	adds	r3, r0, #1
 8022d2a:	d102      	bne.n	8022d32 <_write_r+0x1e>
 8022d2c:	682b      	ldr	r3, [r5, #0]
 8022d2e:	b103      	cbz	r3, 8022d32 <_write_r+0x1e>
 8022d30:	6023      	str	r3, [r4, #0]
 8022d32:	bd38      	pop	{r3, r4, r5, pc}
 8022d34:	200026b0 	.word	0x200026b0

08022d38 <__errno>:
 8022d38:	4b01      	ldr	r3, [pc, #4]	@ (8022d40 <__errno+0x8>)
 8022d3a:	6818      	ldr	r0, [r3, #0]
 8022d3c:	4770      	bx	lr
 8022d3e:	bf00      	nop
 8022d40:	20000038 	.word	0x20000038

08022d44 <__libc_init_array>:
 8022d44:	b570      	push	{r4, r5, r6, lr}
 8022d46:	4d0d      	ldr	r5, [pc, #52]	@ (8022d7c <__libc_init_array+0x38>)
 8022d48:	4c0d      	ldr	r4, [pc, #52]	@ (8022d80 <__libc_init_array+0x3c>)
 8022d4a:	1b64      	subs	r4, r4, r5
 8022d4c:	10a4      	asrs	r4, r4, #2
 8022d4e:	2600      	movs	r6, #0
 8022d50:	42a6      	cmp	r6, r4
 8022d52:	d109      	bne.n	8022d68 <__libc_init_array+0x24>
 8022d54:	4d0b      	ldr	r5, [pc, #44]	@ (8022d84 <__libc_init_array+0x40>)
 8022d56:	4c0c      	ldr	r4, [pc, #48]	@ (8022d88 <__libc_init_array+0x44>)
 8022d58:	f000 fe3a 	bl	80239d0 <_init>
 8022d5c:	1b64      	subs	r4, r4, r5
 8022d5e:	10a4      	asrs	r4, r4, #2
 8022d60:	2600      	movs	r6, #0
 8022d62:	42a6      	cmp	r6, r4
 8022d64:	d105      	bne.n	8022d72 <__libc_init_array+0x2e>
 8022d66:	bd70      	pop	{r4, r5, r6, pc}
 8022d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d6c:	4798      	blx	r3
 8022d6e:	3601      	adds	r6, #1
 8022d70:	e7ee      	b.n	8022d50 <__libc_init_array+0xc>
 8022d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d76:	4798      	blx	r3
 8022d78:	3601      	adds	r6, #1
 8022d7a:	e7f2      	b.n	8022d62 <__libc_init_array+0x1e>
 8022d7c:	0802723c 	.word	0x0802723c
 8022d80:	0802723c 	.word	0x0802723c
 8022d84:	0802723c 	.word	0x0802723c
 8022d88:	08027240 	.word	0x08027240

08022d8c <__retarget_lock_init_recursive>:
 8022d8c:	4770      	bx	lr

08022d8e <__retarget_lock_acquire_recursive>:
 8022d8e:	4770      	bx	lr

08022d90 <__retarget_lock_release_recursive>:
 8022d90:	4770      	bx	lr
	...

08022d94 <__assert_func>:
 8022d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d96:	4614      	mov	r4, r2
 8022d98:	461a      	mov	r2, r3
 8022d9a:	4b09      	ldr	r3, [pc, #36]	@ (8022dc0 <__assert_func+0x2c>)
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	4605      	mov	r5, r0
 8022da0:	68d8      	ldr	r0, [r3, #12]
 8022da2:	b954      	cbnz	r4, 8022dba <__assert_func+0x26>
 8022da4:	4b07      	ldr	r3, [pc, #28]	@ (8022dc4 <__assert_func+0x30>)
 8022da6:	461c      	mov	r4, r3
 8022da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022dac:	9100      	str	r1, [sp, #0]
 8022dae:	462b      	mov	r3, r5
 8022db0:	4905      	ldr	r1, [pc, #20]	@ (8022dc8 <__assert_func+0x34>)
 8022db2:	f000 f9b9 	bl	8023128 <fiprintf>
 8022db6:	f000 f9d9 	bl	802316c <abort>
 8022dba:	4b04      	ldr	r3, [pc, #16]	@ (8022dcc <__assert_func+0x38>)
 8022dbc:	e7f4      	b.n	8022da8 <__assert_func+0x14>
 8022dbe:	bf00      	nop
 8022dc0:	20000038 	.word	0x20000038
 8022dc4:	080270fe 	.word	0x080270fe
 8022dc8:	080270d0 	.word	0x080270d0
 8022dcc:	080270c3 	.word	0x080270c3

08022dd0 <_free_r>:
 8022dd0:	b538      	push	{r3, r4, r5, lr}
 8022dd2:	4605      	mov	r5, r0
 8022dd4:	2900      	cmp	r1, #0
 8022dd6:	d041      	beq.n	8022e5c <_free_r+0x8c>
 8022dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022ddc:	1f0c      	subs	r4, r1, #4
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	bfb8      	it	lt
 8022de2:	18e4      	addlt	r4, r4, r3
 8022de4:	f000 f8e8 	bl	8022fb8 <__malloc_lock>
 8022de8:	4a1d      	ldr	r2, [pc, #116]	@ (8022e60 <_free_r+0x90>)
 8022dea:	6813      	ldr	r3, [r2, #0]
 8022dec:	b933      	cbnz	r3, 8022dfc <_free_r+0x2c>
 8022dee:	6063      	str	r3, [r4, #4]
 8022df0:	6014      	str	r4, [r2, #0]
 8022df2:	4628      	mov	r0, r5
 8022df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022df8:	f000 b8e4 	b.w	8022fc4 <__malloc_unlock>
 8022dfc:	42a3      	cmp	r3, r4
 8022dfe:	d908      	bls.n	8022e12 <_free_r+0x42>
 8022e00:	6820      	ldr	r0, [r4, #0]
 8022e02:	1821      	adds	r1, r4, r0
 8022e04:	428b      	cmp	r3, r1
 8022e06:	bf01      	itttt	eq
 8022e08:	6819      	ldreq	r1, [r3, #0]
 8022e0a:	685b      	ldreq	r3, [r3, #4]
 8022e0c:	1809      	addeq	r1, r1, r0
 8022e0e:	6021      	streq	r1, [r4, #0]
 8022e10:	e7ed      	b.n	8022dee <_free_r+0x1e>
 8022e12:	461a      	mov	r2, r3
 8022e14:	685b      	ldr	r3, [r3, #4]
 8022e16:	b10b      	cbz	r3, 8022e1c <_free_r+0x4c>
 8022e18:	42a3      	cmp	r3, r4
 8022e1a:	d9fa      	bls.n	8022e12 <_free_r+0x42>
 8022e1c:	6811      	ldr	r1, [r2, #0]
 8022e1e:	1850      	adds	r0, r2, r1
 8022e20:	42a0      	cmp	r0, r4
 8022e22:	d10b      	bne.n	8022e3c <_free_r+0x6c>
 8022e24:	6820      	ldr	r0, [r4, #0]
 8022e26:	4401      	add	r1, r0
 8022e28:	1850      	adds	r0, r2, r1
 8022e2a:	4283      	cmp	r3, r0
 8022e2c:	6011      	str	r1, [r2, #0]
 8022e2e:	d1e0      	bne.n	8022df2 <_free_r+0x22>
 8022e30:	6818      	ldr	r0, [r3, #0]
 8022e32:	685b      	ldr	r3, [r3, #4]
 8022e34:	6053      	str	r3, [r2, #4]
 8022e36:	4408      	add	r0, r1
 8022e38:	6010      	str	r0, [r2, #0]
 8022e3a:	e7da      	b.n	8022df2 <_free_r+0x22>
 8022e3c:	d902      	bls.n	8022e44 <_free_r+0x74>
 8022e3e:	230c      	movs	r3, #12
 8022e40:	602b      	str	r3, [r5, #0]
 8022e42:	e7d6      	b.n	8022df2 <_free_r+0x22>
 8022e44:	6820      	ldr	r0, [r4, #0]
 8022e46:	1821      	adds	r1, r4, r0
 8022e48:	428b      	cmp	r3, r1
 8022e4a:	bf04      	itt	eq
 8022e4c:	6819      	ldreq	r1, [r3, #0]
 8022e4e:	685b      	ldreq	r3, [r3, #4]
 8022e50:	6063      	str	r3, [r4, #4]
 8022e52:	bf04      	itt	eq
 8022e54:	1809      	addeq	r1, r1, r0
 8022e56:	6021      	streq	r1, [r4, #0]
 8022e58:	6054      	str	r4, [r2, #4]
 8022e5a:	e7ca      	b.n	8022df2 <_free_r+0x22>
 8022e5c:	bd38      	pop	{r3, r4, r5, pc}
 8022e5e:	bf00      	nop
 8022e60:	200026bc 	.word	0x200026bc

08022e64 <malloc>:
 8022e64:	4b02      	ldr	r3, [pc, #8]	@ (8022e70 <malloc+0xc>)
 8022e66:	4601      	mov	r1, r0
 8022e68:	6818      	ldr	r0, [r3, #0]
 8022e6a:	f000 b825 	b.w	8022eb8 <_malloc_r>
 8022e6e:	bf00      	nop
 8022e70:	20000038 	.word	0x20000038

08022e74 <sbrk_aligned>:
 8022e74:	b570      	push	{r4, r5, r6, lr}
 8022e76:	4e0f      	ldr	r6, [pc, #60]	@ (8022eb4 <sbrk_aligned+0x40>)
 8022e78:	460c      	mov	r4, r1
 8022e7a:	6831      	ldr	r1, [r6, #0]
 8022e7c:	4605      	mov	r5, r0
 8022e7e:	b911      	cbnz	r1, 8022e86 <sbrk_aligned+0x12>
 8022e80:	f000 f964 	bl	802314c <_sbrk_r>
 8022e84:	6030      	str	r0, [r6, #0]
 8022e86:	4621      	mov	r1, r4
 8022e88:	4628      	mov	r0, r5
 8022e8a:	f000 f95f 	bl	802314c <_sbrk_r>
 8022e8e:	1c43      	adds	r3, r0, #1
 8022e90:	d103      	bne.n	8022e9a <sbrk_aligned+0x26>
 8022e92:	f04f 34ff 	mov.w	r4, #4294967295
 8022e96:	4620      	mov	r0, r4
 8022e98:	bd70      	pop	{r4, r5, r6, pc}
 8022e9a:	1cc4      	adds	r4, r0, #3
 8022e9c:	f024 0403 	bic.w	r4, r4, #3
 8022ea0:	42a0      	cmp	r0, r4
 8022ea2:	d0f8      	beq.n	8022e96 <sbrk_aligned+0x22>
 8022ea4:	1a21      	subs	r1, r4, r0
 8022ea6:	4628      	mov	r0, r5
 8022ea8:	f000 f950 	bl	802314c <_sbrk_r>
 8022eac:	3001      	adds	r0, #1
 8022eae:	d1f2      	bne.n	8022e96 <sbrk_aligned+0x22>
 8022eb0:	e7ef      	b.n	8022e92 <sbrk_aligned+0x1e>
 8022eb2:	bf00      	nop
 8022eb4:	200026b8 	.word	0x200026b8

08022eb8 <_malloc_r>:
 8022eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ebc:	1ccd      	adds	r5, r1, #3
 8022ebe:	f025 0503 	bic.w	r5, r5, #3
 8022ec2:	3508      	adds	r5, #8
 8022ec4:	2d0c      	cmp	r5, #12
 8022ec6:	bf38      	it	cc
 8022ec8:	250c      	movcc	r5, #12
 8022eca:	2d00      	cmp	r5, #0
 8022ecc:	4606      	mov	r6, r0
 8022ece:	db01      	blt.n	8022ed4 <_malloc_r+0x1c>
 8022ed0:	42a9      	cmp	r1, r5
 8022ed2:	d904      	bls.n	8022ede <_malloc_r+0x26>
 8022ed4:	230c      	movs	r3, #12
 8022ed6:	6033      	str	r3, [r6, #0]
 8022ed8:	2000      	movs	r0, #0
 8022eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022ede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022fb4 <_malloc_r+0xfc>
 8022ee2:	f000 f869 	bl	8022fb8 <__malloc_lock>
 8022ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8022eea:	461c      	mov	r4, r3
 8022eec:	bb44      	cbnz	r4, 8022f40 <_malloc_r+0x88>
 8022eee:	4629      	mov	r1, r5
 8022ef0:	4630      	mov	r0, r6
 8022ef2:	f7ff ffbf 	bl	8022e74 <sbrk_aligned>
 8022ef6:	1c43      	adds	r3, r0, #1
 8022ef8:	4604      	mov	r4, r0
 8022efa:	d158      	bne.n	8022fae <_malloc_r+0xf6>
 8022efc:	f8d8 4000 	ldr.w	r4, [r8]
 8022f00:	4627      	mov	r7, r4
 8022f02:	2f00      	cmp	r7, #0
 8022f04:	d143      	bne.n	8022f8e <_malloc_r+0xd6>
 8022f06:	2c00      	cmp	r4, #0
 8022f08:	d04b      	beq.n	8022fa2 <_malloc_r+0xea>
 8022f0a:	6823      	ldr	r3, [r4, #0]
 8022f0c:	4639      	mov	r1, r7
 8022f0e:	4630      	mov	r0, r6
 8022f10:	eb04 0903 	add.w	r9, r4, r3
 8022f14:	f000 f91a 	bl	802314c <_sbrk_r>
 8022f18:	4581      	cmp	r9, r0
 8022f1a:	d142      	bne.n	8022fa2 <_malloc_r+0xea>
 8022f1c:	6821      	ldr	r1, [r4, #0]
 8022f1e:	1a6d      	subs	r5, r5, r1
 8022f20:	4629      	mov	r1, r5
 8022f22:	4630      	mov	r0, r6
 8022f24:	f7ff ffa6 	bl	8022e74 <sbrk_aligned>
 8022f28:	3001      	adds	r0, #1
 8022f2a:	d03a      	beq.n	8022fa2 <_malloc_r+0xea>
 8022f2c:	6823      	ldr	r3, [r4, #0]
 8022f2e:	442b      	add	r3, r5
 8022f30:	6023      	str	r3, [r4, #0]
 8022f32:	f8d8 3000 	ldr.w	r3, [r8]
 8022f36:	685a      	ldr	r2, [r3, #4]
 8022f38:	bb62      	cbnz	r2, 8022f94 <_malloc_r+0xdc>
 8022f3a:	f8c8 7000 	str.w	r7, [r8]
 8022f3e:	e00f      	b.n	8022f60 <_malloc_r+0xa8>
 8022f40:	6822      	ldr	r2, [r4, #0]
 8022f42:	1b52      	subs	r2, r2, r5
 8022f44:	d420      	bmi.n	8022f88 <_malloc_r+0xd0>
 8022f46:	2a0b      	cmp	r2, #11
 8022f48:	d917      	bls.n	8022f7a <_malloc_r+0xc2>
 8022f4a:	1961      	adds	r1, r4, r5
 8022f4c:	42a3      	cmp	r3, r4
 8022f4e:	6025      	str	r5, [r4, #0]
 8022f50:	bf18      	it	ne
 8022f52:	6059      	strne	r1, [r3, #4]
 8022f54:	6863      	ldr	r3, [r4, #4]
 8022f56:	bf08      	it	eq
 8022f58:	f8c8 1000 	streq.w	r1, [r8]
 8022f5c:	5162      	str	r2, [r4, r5]
 8022f5e:	604b      	str	r3, [r1, #4]
 8022f60:	4630      	mov	r0, r6
 8022f62:	f000 f82f 	bl	8022fc4 <__malloc_unlock>
 8022f66:	f104 000b 	add.w	r0, r4, #11
 8022f6a:	1d23      	adds	r3, r4, #4
 8022f6c:	f020 0007 	bic.w	r0, r0, #7
 8022f70:	1ac2      	subs	r2, r0, r3
 8022f72:	bf1c      	itt	ne
 8022f74:	1a1b      	subne	r3, r3, r0
 8022f76:	50a3      	strne	r3, [r4, r2]
 8022f78:	e7af      	b.n	8022eda <_malloc_r+0x22>
 8022f7a:	6862      	ldr	r2, [r4, #4]
 8022f7c:	42a3      	cmp	r3, r4
 8022f7e:	bf0c      	ite	eq
 8022f80:	f8c8 2000 	streq.w	r2, [r8]
 8022f84:	605a      	strne	r2, [r3, #4]
 8022f86:	e7eb      	b.n	8022f60 <_malloc_r+0xa8>
 8022f88:	4623      	mov	r3, r4
 8022f8a:	6864      	ldr	r4, [r4, #4]
 8022f8c:	e7ae      	b.n	8022eec <_malloc_r+0x34>
 8022f8e:	463c      	mov	r4, r7
 8022f90:	687f      	ldr	r7, [r7, #4]
 8022f92:	e7b6      	b.n	8022f02 <_malloc_r+0x4a>
 8022f94:	461a      	mov	r2, r3
 8022f96:	685b      	ldr	r3, [r3, #4]
 8022f98:	42a3      	cmp	r3, r4
 8022f9a:	d1fb      	bne.n	8022f94 <_malloc_r+0xdc>
 8022f9c:	2300      	movs	r3, #0
 8022f9e:	6053      	str	r3, [r2, #4]
 8022fa0:	e7de      	b.n	8022f60 <_malloc_r+0xa8>
 8022fa2:	230c      	movs	r3, #12
 8022fa4:	6033      	str	r3, [r6, #0]
 8022fa6:	4630      	mov	r0, r6
 8022fa8:	f000 f80c 	bl	8022fc4 <__malloc_unlock>
 8022fac:	e794      	b.n	8022ed8 <_malloc_r+0x20>
 8022fae:	6005      	str	r5, [r0, #0]
 8022fb0:	e7d6      	b.n	8022f60 <_malloc_r+0xa8>
 8022fb2:	bf00      	nop
 8022fb4:	200026bc 	.word	0x200026bc

08022fb8 <__malloc_lock>:
 8022fb8:	4801      	ldr	r0, [pc, #4]	@ (8022fc0 <__malloc_lock+0x8>)
 8022fba:	f7ff bee8 	b.w	8022d8e <__retarget_lock_acquire_recursive>
 8022fbe:	bf00      	nop
 8022fc0:	200026b4 	.word	0x200026b4

08022fc4 <__malloc_unlock>:
 8022fc4:	4801      	ldr	r0, [pc, #4]	@ (8022fcc <__malloc_unlock+0x8>)
 8022fc6:	f7ff bee3 	b.w	8022d90 <__retarget_lock_release_recursive>
 8022fca:	bf00      	nop
 8022fcc:	200026b4 	.word	0x200026b4

08022fd0 <__sflush_r>:
 8022fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022fd8:	0716      	lsls	r6, r2, #28
 8022fda:	4605      	mov	r5, r0
 8022fdc:	460c      	mov	r4, r1
 8022fde:	d454      	bmi.n	802308a <__sflush_r+0xba>
 8022fe0:	684b      	ldr	r3, [r1, #4]
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	dc02      	bgt.n	8022fec <__sflush_r+0x1c>
 8022fe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022fe8:	2b00      	cmp	r3, #0
 8022fea:	dd48      	ble.n	802307e <__sflush_r+0xae>
 8022fec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022fee:	2e00      	cmp	r6, #0
 8022ff0:	d045      	beq.n	802307e <__sflush_r+0xae>
 8022ff2:	2300      	movs	r3, #0
 8022ff4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022ff8:	682f      	ldr	r7, [r5, #0]
 8022ffa:	6a21      	ldr	r1, [r4, #32]
 8022ffc:	602b      	str	r3, [r5, #0]
 8022ffe:	d030      	beq.n	8023062 <__sflush_r+0x92>
 8023000:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023002:	89a3      	ldrh	r3, [r4, #12]
 8023004:	0759      	lsls	r1, r3, #29
 8023006:	d505      	bpl.n	8023014 <__sflush_r+0x44>
 8023008:	6863      	ldr	r3, [r4, #4]
 802300a:	1ad2      	subs	r2, r2, r3
 802300c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802300e:	b10b      	cbz	r3, 8023014 <__sflush_r+0x44>
 8023010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023012:	1ad2      	subs	r2, r2, r3
 8023014:	2300      	movs	r3, #0
 8023016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023018:	6a21      	ldr	r1, [r4, #32]
 802301a:	4628      	mov	r0, r5
 802301c:	47b0      	blx	r6
 802301e:	1c43      	adds	r3, r0, #1
 8023020:	89a3      	ldrh	r3, [r4, #12]
 8023022:	d106      	bne.n	8023032 <__sflush_r+0x62>
 8023024:	6829      	ldr	r1, [r5, #0]
 8023026:	291d      	cmp	r1, #29
 8023028:	d82b      	bhi.n	8023082 <__sflush_r+0xb2>
 802302a:	4a2a      	ldr	r2, [pc, #168]	@ (80230d4 <__sflush_r+0x104>)
 802302c:	410a      	asrs	r2, r1
 802302e:	07d6      	lsls	r6, r2, #31
 8023030:	d427      	bmi.n	8023082 <__sflush_r+0xb2>
 8023032:	2200      	movs	r2, #0
 8023034:	6062      	str	r2, [r4, #4]
 8023036:	04d9      	lsls	r1, r3, #19
 8023038:	6922      	ldr	r2, [r4, #16]
 802303a:	6022      	str	r2, [r4, #0]
 802303c:	d504      	bpl.n	8023048 <__sflush_r+0x78>
 802303e:	1c42      	adds	r2, r0, #1
 8023040:	d101      	bne.n	8023046 <__sflush_r+0x76>
 8023042:	682b      	ldr	r3, [r5, #0]
 8023044:	b903      	cbnz	r3, 8023048 <__sflush_r+0x78>
 8023046:	6560      	str	r0, [r4, #84]	@ 0x54
 8023048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802304a:	602f      	str	r7, [r5, #0]
 802304c:	b1b9      	cbz	r1, 802307e <__sflush_r+0xae>
 802304e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023052:	4299      	cmp	r1, r3
 8023054:	d002      	beq.n	802305c <__sflush_r+0x8c>
 8023056:	4628      	mov	r0, r5
 8023058:	f7ff feba 	bl	8022dd0 <_free_r>
 802305c:	2300      	movs	r3, #0
 802305e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023060:	e00d      	b.n	802307e <__sflush_r+0xae>
 8023062:	2301      	movs	r3, #1
 8023064:	4628      	mov	r0, r5
 8023066:	47b0      	blx	r6
 8023068:	4602      	mov	r2, r0
 802306a:	1c50      	adds	r0, r2, #1
 802306c:	d1c9      	bne.n	8023002 <__sflush_r+0x32>
 802306e:	682b      	ldr	r3, [r5, #0]
 8023070:	2b00      	cmp	r3, #0
 8023072:	d0c6      	beq.n	8023002 <__sflush_r+0x32>
 8023074:	2b1d      	cmp	r3, #29
 8023076:	d001      	beq.n	802307c <__sflush_r+0xac>
 8023078:	2b16      	cmp	r3, #22
 802307a:	d11e      	bne.n	80230ba <__sflush_r+0xea>
 802307c:	602f      	str	r7, [r5, #0]
 802307e:	2000      	movs	r0, #0
 8023080:	e022      	b.n	80230c8 <__sflush_r+0xf8>
 8023082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023086:	b21b      	sxth	r3, r3
 8023088:	e01b      	b.n	80230c2 <__sflush_r+0xf2>
 802308a:	690f      	ldr	r7, [r1, #16]
 802308c:	2f00      	cmp	r7, #0
 802308e:	d0f6      	beq.n	802307e <__sflush_r+0xae>
 8023090:	0793      	lsls	r3, r2, #30
 8023092:	680e      	ldr	r6, [r1, #0]
 8023094:	bf08      	it	eq
 8023096:	694b      	ldreq	r3, [r1, #20]
 8023098:	600f      	str	r7, [r1, #0]
 802309a:	bf18      	it	ne
 802309c:	2300      	movne	r3, #0
 802309e:	eba6 0807 	sub.w	r8, r6, r7
 80230a2:	608b      	str	r3, [r1, #8]
 80230a4:	f1b8 0f00 	cmp.w	r8, #0
 80230a8:	dde9      	ble.n	802307e <__sflush_r+0xae>
 80230aa:	6a21      	ldr	r1, [r4, #32]
 80230ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80230ae:	4643      	mov	r3, r8
 80230b0:	463a      	mov	r2, r7
 80230b2:	4628      	mov	r0, r5
 80230b4:	47b0      	blx	r6
 80230b6:	2800      	cmp	r0, #0
 80230b8:	dc08      	bgt.n	80230cc <__sflush_r+0xfc>
 80230ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80230be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80230c2:	81a3      	strh	r3, [r4, #12]
 80230c4:	f04f 30ff 	mov.w	r0, #4294967295
 80230c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80230cc:	4407      	add	r7, r0
 80230ce:	eba8 0800 	sub.w	r8, r8, r0
 80230d2:	e7e7      	b.n	80230a4 <__sflush_r+0xd4>
 80230d4:	dfbffffe 	.word	0xdfbffffe

080230d8 <_fflush_r>:
 80230d8:	b538      	push	{r3, r4, r5, lr}
 80230da:	690b      	ldr	r3, [r1, #16]
 80230dc:	4605      	mov	r5, r0
 80230de:	460c      	mov	r4, r1
 80230e0:	b913      	cbnz	r3, 80230e8 <_fflush_r+0x10>
 80230e2:	2500      	movs	r5, #0
 80230e4:	4628      	mov	r0, r5
 80230e6:	bd38      	pop	{r3, r4, r5, pc}
 80230e8:	b118      	cbz	r0, 80230f2 <_fflush_r+0x1a>
 80230ea:	6a03      	ldr	r3, [r0, #32]
 80230ec:	b90b      	cbnz	r3, 80230f2 <_fflush_r+0x1a>
 80230ee:	f7ff fd0b 	bl	8022b08 <__sinit>
 80230f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80230f6:	2b00      	cmp	r3, #0
 80230f8:	d0f3      	beq.n	80230e2 <_fflush_r+0xa>
 80230fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80230fc:	07d0      	lsls	r0, r2, #31
 80230fe:	d404      	bmi.n	802310a <_fflush_r+0x32>
 8023100:	0599      	lsls	r1, r3, #22
 8023102:	d402      	bmi.n	802310a <_fflush_r+0x32>
 8023104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023106:	f7ff fe42 	bl	8022d8e <__retarget_lock_acquire_recursive>
 802310a:	4628      	mov	r0, r5
 802310c:	4621      	mov	r1, r4
 802310e:	f7ff ff5f 	bl	8022fd0 <__sflush_r>
 8023112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023114:	07da      	lsls	r2, r3, #31
 8023116:	4605      	mov	r5, r0
 8023118:	d4e4      	bmi.n	80230e4 <_fflush_r+0xc>
 802311a:	89a3      	ldrh	r3, [r4, #12]
 802311c:	059b      	lsls	r3, r3, #22
 802311e:	d4e1      	bmi.n	80230e4 <_fflush_r+0xc>
 8023120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023122:	f7ff fe35 	bl	8022d90 <__retarget_lock_release_recursive>
 8023126:	e7dd      	b.n	80230e4 <_fflush_r+0xc>

08023128 <fiprintf>:
 8023128:	b40e      	push	{r1, r2, r3}
 802312a:	b503      	push	{r0, r1, lr}
 802312c:	4601      	mov	r1, r0
 802312e:	ab03      	add	r3, sp, #12
 8023130:	4805      	ldr	r0, [pc, #20]	@ (8023148 <fiprintf+0x20>)
 8023132:	f853 2b04 	ldr.w	r2, [r3], #4
 8023136:	6800      	ldr	r0, [r0, #0]
 8023138:	9301      	str	r3, [sp, #4]
 802313a:	f000 f847 	bl	80231cc <_vfiprintf_r>
 802313e:	b002      	add	sp, #8
 8023140:	f85d eb04 	ldr.w	lr, [sp], #4
 8023144:	b003      	add	sp, #12
 8023146:	4770      	bx	lr
 8023148:	20000038 	.word	0x20000038

0802314c <_sbrk_r>:
 802314c:	b538      	push	{r3, r4, r5, lr}
 802314e:	4d06      	ldr	r5, [pc, #24]	@ (8023168 <_sbrk_r+0x1c>)
 8023150:	2300      	movs	r3, #0
 8023152:	4604      	mov	r4, r0
 8023154:	4608      	mov	r0, r1
 8023156:	602b      	str	r3, [r5, #0]
 8023158:	f7df fa9c 	bl	8002694 <_sbrk>
 802315c:	1c43      	adds	r3, r0, #1
 802315e:	d102      	bne.n	8023166 <_sbrk_r+0x1a>
 8023160:	682b      	ldr	r3, [r5, #0]
 8023162:	b103      	cbz	r3, 8023166 <_sbrk_r+0x1a>
 8023164:	6023      	str	r3, [r4, #0]
 8023166:	bd38      	pop	{r3, r4, r5, pc}
 8023168:	200026b0 	.word	0x200026b0

0802316c <abort>:
 802316c:	b508      	push	{r3, lr}
 802316e:	2006      	movs	r0, #6
 8023170:	f000 fb8e 	bl	8023890 <raise>
 8023174:	2001      	movs	r0, #1
 8023176:	f7df fa15 	bl	80025a4 <_exit>

0802317a <__sfputc_r>:
 802317a:	6893      	ldr	r3, [r2, #8]
 802317c:	3b01      	subs	r3, #1
 802317e:	2b00      	cmp	r3, #0
 8023180:	b410      	push	{r4}
 8023182:	6093      	str	r3, [r2, #8]
 8023184:	da08      	bge.n	8023198 <__sfputc_r+0x1e>
 8023186:	6994      	ldr	r4, [r2, #24]
 8023188:	42a3      	cmp	r3, r4
 802318a:	db01      	blt.n	8023190 <__sfputc_r+0x16>
 802318c:	290a      	cmp	r1, #10
 802318e:	d103      	bne.n	8023198 <__sfputc_r+0x1e>
 8023190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023194:	f000 bac0 	b.w	8023718 <__swbuf_r>
 8023198:	6813      	ldr	r3, [r2, #0]
 802319a:	1c58      	adds	r0, r3, #1
 802319c:	6010      	str	r0, [r2, #0]
 802319e:	7019      	strb	r1, [r3, #0]
 80231a0:	4608      	mov	r0, r1
 80231a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231a6:	4770      	bx	lr

080231a8 <__sfputs_r>:
 80231a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231aa:	4606      	mov	r6, r0
 80231ac:	460f      	mov	r7, r1
 80231ae:	4614      	mov	r4, r2
 80231b0:	18d5      	adds	r5, r2, r3
 80231b2:	42ac      	cmp	r4, r5
 80231b4:	d101      	bne.n	80231ba <__sfputs_r+0x12>
 80231b6:	2000      	movs	r0, #0
 80231b8:	e007      	b.n	80231ca <__sfputs_r+0x22>
 80231ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231be:	463a      	mov	r2, r7
 80231c0:	4630      	mov	r0, r6
 80231c2:	f7ff ffda 	bl	802317a <__sfputc_r>
 80231c6:	1c43      	adds	r3, r0, #1
 80231c8:	d1f3      	bne.n	80231b2 <__sfputs_r+0xa>
 80231ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080231cc <_vfiprintf_r>:
 80231cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231d0:	460d      	mov	r5, r1
 80231d2:	b09d      	sub	sp, #116	@ 0x74
 80231d4:	4614      	mov	r4, r2
 80231d6:	4698      	mov	r8, r3
 80231d8:	4606      	mov	r6, r0
 80231da:	b118      	cbz	r0, 80231e4 <_vfiprintf_r+0x18>
 80231dc:	6a03      	ldr	r3, [r0, #32]
 80231de:	b90b      	cbnz	r3, 80231e4 <_vfiprintf_r+0x18>
 80231e0:	f7ff fc92 	bl	8022b08 <__sinit>
 80231e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80231e6:	07d9      	lsls	r1, r3, #31
 80231e8:	d405      	bmi.n	80231f6 <_vfiprintf_r+0x2a>
 80231ea:	89ab      	ldrh	r3, [r5, #12]
 80231ec:	059a      	lsls	r2, r3, #22
 80231ee:	d402      	bmi.n	80231f6 <_vfiprintf_r+0x2a>
 80231f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80231f2:	f7ff fdcc 	bl	8022d8e <__retarget_lock_acquire_recursive>
 80231f6:	89ab      	ldrh	r3, [r5, #12]
 80231f8:	071b      	lsls	r3, r3, #28
 80231fa:	d501      	bpl.n	8023200 <_vfiprintf_r+0x34>
 80231fc:	692b      	ldr	r3, [r5, #16]
 80231fe:	b99b      	cbnz	r3, 8023228 <_vfiprintf_r+0x5c>
 8023200:	4629      	mov	r1, r5
 8023202:	4630      	mov	r0, r6
 8023204:	f000 fac6 	bl	8023794 <__swsetup_r>
 8023208:	b170      	cbz	r0, 8023228 <_vfiprintf_r+0x5c>
 802320a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802320c:	07dc      	lsls	r4, r3, #31
 802320e:	d504      	bpl.n	802321a <_vfiprintf_r+0x4e>
 8023210:	f04f 30ff 	mov.w	r0, #4294967295
 8023214:	b01d      	add	sp, #116	@ 0x74
 8023216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802321a:	89ab      	ldrh	r3, [r5, #12]
 802321c:	0598      	lsls	r0, r3, #22
 802321e:	d4f7      	bmi.n	8023210 <_vfiprintf_r+0x44>
 8023220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023222:	f7ff fdb5 	bl	8022d90 <__retarget_lock_release_recursive>
 8023226:	e7f3      	b.n	8023210 <_vfiprintf_r+0x44>
 8023228:	2300      	movs	r3, #0
 802322a:	9309      	str	r3, [sp, #36]	@ 0x24
 802322c:	2320      	movs	r3, #32
 802322e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023232:	f8cd 800c 	str.w	r8, [sp, #12]
 8023236:	2330      	movs	r3, #48	@ 0x30
 8023238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80233e8 <_vfiprintf_r+0x21c>
 802323c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023240:	f04f 0901 	mov.w	r9, #1
 8023244:	4623      	mov	r3, r4
 8023246:	469a      	mov	sl, r3
 8023248:	f813 2b01 	ldrb.w	r2, [r3], #1
 802324c:	b10a      	cbz	r2, 8023252 <_vfiprintf_r+0x86>
 802324e:	2a25      	cmp	r2, #37	@ 0x25
 8023250:	d1f9      	bne.n	8023246 <_vfiprintf_r+0x7a>
 8023252:	ebba 0b04 	subs.w	fp, sl, r4
 8023256:	d00b      	beq.n	8023270 <_vfiprintf_r+0xa4>
 8023258:	465b      	mov	r3, fp
 802325a:	4622      	mov	r2, r4
 802325c:	4629      	mov	r1, r5
 802325e:	4630      	mov	r0, r6
 8023260:	f7ff ffa2 	bl	80231a8 <__sfputs_r>
 8023264:	3001      	adds	r0, #1
 8023266:	f000 80a7 	beq.w	80233b8 <_vfiprintf_r+0x1ec>
 802326a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802326c:	445a      	add	r2, fp
 802326e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023270:	f89a 3000 	ldrb.w	r3, [sl]
 8023274:	2b00      	cmp	r3, #0
 8023276:	f000 809f 	beq.w	80233b8 <_vfiprintf_r+0x1ec>
 802327a:	2300      	movs	r3, #0
 802327c:	f04f 32ff 	mov.w	r2, #4294967295
 8023280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023284:	f10a 0a01 	add.w	sl, sl, #1
 8023288:	9304      	str	r3, [sp, #16]
 802328a:	9307      	str	r3, [sp, #28]
 802328c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023290:	931a      	str	r3, [sp, #104]	@ 0x68
 8023292:	4654      	mov	r4, sl
 8023294:	2205      	movs	r2, #5
 8023296:	f814 1b01 	ldrb.w	r1, [r4], #1
 802329a:	4853      	ldr	r0, [pc, #332]	@ (80233e8 <_vfiprintf_r+0x21c>)
 802329c:	f7dd f838 	bl	8000310 <memchr>
 80232a0:	9a04      	ldr	r2, [sp, #16]
 80232a2:	b9d8      	cbnz	r0, 80232dc <_vfiprintf_r+0x110>
 80232a4:	06d1      	lsls	r1, r2, #27
 80232a6:	bf44      	itt	mi
 80232a8:	2320      	movmi	r3, #32
 80232aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80232ae:	0713      	lsls	r3, r2, #28
 80232b0:	bf44      	itt	mi
 80232b2:	232b      	movmi	r3, #43	@ 0x2b
 80232b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80232b8:	f89a 3000 	ldrb.w	r3, [sl]
 80232bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80232be:	d015      	beq.n	80232ec <_vfiprintf_r+0x120>
 80232c0:	9a07      	ldr	r2, [sp, #28]
 80232c2:	4654      	mov	r4, sl
 80232c4:	2000      	movs	r0, #0
 80232c6:	f04f 0c0a 	mov.w	ip, #10
 80232ca:	4621      	mov	r1, r4
 80232cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80232d0:	3b30      	subs	r3, #48	@ 0x30
 80232d2:	2b09      	cmp	r3, #9
 80232d4:	d94b      	bls.n	802336e <_vfiprintf_r+0x1a2>
 80232d6:	b1b0      	cbz	r0, 8023306 <_vfiprintf_r+0x13a>
 80232d8:	9207      	str	r2, [sp, #28]
 80232da:	e014      	b.n	8023306 <_vfiprintf_r+0x13a>
 80232dc:	eba0 0308 	sub.w	r3, r0, r8
 80232e0:	fa09 f303 	lsl.w	r3, r9, r3
 80232e4:	4313      	orrs	r3, r2
 80232e6:	9304      	str	r3, [sp, #16]
 80232e8:	46a2      	mov	sl, r4
 80232ea:	e7d2      	b.n	8023292 <_vfiprintf_r+0xc6>
 80232ec:	9b03      	ldr	r3, [sp, #12]
 80232ee:	1d19      	adds	r1, r3, #4
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	9103      	str	r1, [sp, #12]
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	bfbb      	ittet	lt
 80232f8:	425b      	neglt	r3, r3
 80232fa:	f042 0202 	orrlt.w	r2, r2, #2
 80232fe:	9307      	strge	r3, [sp, #28]
 8023300:	9307      	strlt	r3, [sp, #28]
 8023302:	bfb8      	it	lt
 8023304:	9204      	strlt	r2, [sp, #16]
 8023306:	7823      	ldrb	r3, [r4, #0]
 8023308:	2b2e      	cmp	r3, #46	@ 0x2e
 802330a:	d10a      	bne.n	8023322 <_vfiprintf_r+0x156>
 802330c:	7863      	ldrb	r3, [r4, #1]
 802330e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023310:	d132      	bne.n	8023378 <_vfiprintf_r+0x1ac>
 8023312:	9b03      	ldr	r3, [sp, #12]
 8023314:	1d1a      	adds	r2, r3, #4
 8023316:	681b      	ldr	r3, [r3, #0]
 8023318:	9203      	str	r2, [sp, #12]
 802331a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802331e:	3402      	adds	r4, #2
 8023320:	9305      	str	r3, [sp, #20]
 8023322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80233f8 <_vfiprintf_r+0x22c>
 8023326:	7821      	ldrb	r1, [r4, #0]
 8023328:	2203      	movs	r2, #3
 802332a:	4650      	mov	r0, sl
 802332c:	f7dc fff0 	bl	8000310 <memchr>
 8023330:	b138      	cbz	r0, 8023342 <_vfiprintf_r+0x176>
 8023332:	9b04      	ldr	r3, [sp, #16]
 8023334:	eba0 000a 	sub.w	r0, r0, sl
 8023338:	2240      	movs	r2, #64	@ 0x40
 802333a:	4082      	lsls	r2, r0
 802333c:	4313      	orrs	r3, r2
 802333e:	3401      	adds	r4, #1
 8023340:	9304      	str	r3, [sp, #16]
 8023342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023346:	4829      	ldr	r0, [pc, #164]	@ (80233ec <_vfiprintf_r+0x220>)
 8023348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802334c:	2206      	movs	r2, #6
 802334e:	f7dc ffdf 	bl	8000310 <memchr>
 8023352:	2800      	cmp	r0, #0
 8023354:	d03f      	beq.n	80233d6 <_vfiprintf_r+0x20a>
 8023356:	4b26      	ldr	r3, [pc, #152]	@ (80233f0 <_vfiprintf_r+0x224>)
 8023358:	bb1b      	cbnz	r3, 80233a2 <_vfiprintf_r+0x1d6>
 802335a:	9b03      	ldr	r3, [sp, #12]
 802335c:	3307      	adds	r3, #7
 802335e:	f023 0307 	bic.w	r3, r3, #7
 8023362:	3308      	adds	r3, #8
 8023364:	9303      	str	r3, [sp, #12]
 8023366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023368:	443b      	add	r3, r7
 802336a:	9309      	str	r3, [sp, #36]	@ 0x24
 802336c:	e76a      	b.n	8023244 <_vfiprintf_r+0x78>
 802336e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023372:	460c      	mov	r4, r1
 8023374:	2001      	movs	r0, #1
 8023376:	e7a8      	b.n	80232ca <_vfiprintf_r+0xfe>
 8023378:	2300      	movs	r3, #0
 802337a:	3401      	adds	r4, #1
 802337c:	9305      	str	r3, [sp, #20]
 802337e:	4619      	mov	r1, r3
 8023380:	f04f 0c0a 	mov.w	ip, #10
 8023384:	4620      	mov	r0, r4
 8023386:	f810 2b01 	ldrb.w	r2, [r0], #1
 802338a:	3a30      	subs	r2, #48	@ 0x30
 802338c:	2a09      	cmp	r2, #9
 802338e:	d903      	bls.n	8023398 <_vfiprintf_r+0x1cc>
 8023390:	2b00      	cmp	r3, #0
 8023392:	d0c6      	beq.n	8023322 <_vfiprintf_r+0x156>
 8023394:	9105      	str	r1, [sp, #20]
 8023396:	e7c4      	b.n	8023322 <_vfiprintf_r+0x156>
 8023398:	fb0c 2101 	mla	r1, ip, r1, r2
 802339c:	4604      	mov	r4, r0
 802339e:	2301      	movs	r3, #1
 80233a0:	e7f0      	b.n	8023384 <_vfiprintf_r+0x1b8>
 80233a2:	ab03      	add	r3, sp, #12
 80233a4:	9300      	str	r3, [sp, #0]
 80233a6:	462a      	mov	r2, r5
 80233a8:	4b12      	ldr	r3, [pc, #72]	@ (80233f4 <_vfiprintf_r+0x228>)
 80233aa:	a904      	add	r1, sp, #16
 80233ac:	4630      	mov	r0, r6
 80233ae:	f3af 8000 	nop.w
 80233b2:	4607      	mov	r7, r0
 80233b4:	1c78      	adds	r0, r7, #1
 80233b6:	d1d6      	bne.n	8023366 <_vfiprintf_r+0x19a>
 80233b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80233ba:	07d9      	lsls	r1, r3, #31
 80233bc:	d405      	bmi.n	80233ca <_vfiprintf_r+0x1fe>
 80233be:	89ab      	ldrh	r3, [r5, #12]
 80233c0:	059a      	lsls	r2, r3, #22
 80233c2:	d402      	bmi.n	80233ca <_vfiprintf_r+0x1fe>
 80233c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80233c6:	f7ff fce3 	bl	8022d90 <__retarget_lock_release_recursive>
 80233ca:	89ab      	ldrh	r3, [r5, #12]
 80233cc:	065b      	lsls	r3, r3, #25
 80233ce:	f53f af1f 	bmi.w	8023210 <_vfiprintf_r+0x44>
 80233d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80233d4:	e71e      	b.n	8023214 <_vfiprintf_r+0x48>
 80233d6:	ab03      	add	r3, sp, #12
 80233d8:	9300      	str	r3, [sp, #0]
 80233da:	462a      	mov	r2, r5
 80233dc:	4b05      	ldr	r3, [pc, #20]	@ (80233f4 <_vfiprintf_r+0x228>)
 80233de:	a904      	add	r1, sp, #16
 80233e0:	4630      	mov	r0, r6
 80233e2:	f000 f879 	bl	80234d8 <_printf_i>
 80233e6:	e7e4      	b.n	80233b2 <_vfiprintf_r+0x1e6>
 80233e8:	08027200 	.word	0x08027200
 80233ec:	0802720a 	.word	0x0802720a
 80233f0:	00000000 	.word	0x00000000
 80233f4:	080231a9 	.word	0x080231a9
 80233f8:	08027206 	.word	0x08027206

080233fc <_printf_common>:
 80233fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023400:	4616      	mov	r6, r2
 8023402:	4698      	mov	r8, r3
 8023404:	688a      	ldr	r2, [r1, #8]
 8023406:	690b      	ldr	r3, [r1, #16]
 8023408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802340c:	4293      	cmp	r3, r2
 802340e:	bfb8      	it	lt
 8023410:	4613      	movlt	r3, r2
 8023412:	6033      	str	r3, [r6, #0]
 8023414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023418:	4607      	mov	r7, r0
 802341a:	460c      	mov	r4, r1
 802341c:	b10a      	cbz	r2, 8023422 <_printf_common+0x26>
 802341e:	3301      	adds	r3, #1
 8023420:	6033      	str	r3, [r6, #0]
 8023422:	6823      	ldr	r3, [r4, #0]
 8023424:	0699      	lsls	r1, r3, #26
 8023426:	bf42      	ittt	mi
 8023428:	6833      	ldrmi	r3, [r6, #0]
 802342a:	3302      	addmi	r3, #2
 802342c:	6033      	strmi	r3, [r6, #0]
 802342e:	6825      	ldr	r5, [r4, #0]
 8023430:	f015 0506 	ands.w	r5, r5, #6
 8023434:	d106      	bne.n	8023444 <_printf_common+0x48>
 8023436:	f104 0a19 	add.w	sl, r4, #25
 802343a:	68e3      	ldr	r3, [r4, #12]
 802343c:	6832      	ldr	r2, [r6, #0]
 802343e:	1a9b      	subs	r3, r3, r2
 8023440:	42ab      	cmp	r3, r5
 8023442:	dc26      	bgt.n	8023492 <_printf_common+0x96>
 8023444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023448:	6822      	ldr	r2, [r4, #0]
 802344a:	3b00      	subs	r3, #0
 802344c:	bf18      	it	ne
 802344e:	2301      	movne	r3, #1
 8023450:	0692      	lsls	r2, r2, #26
 8023452:	d42b      	bmi.n	80234ac <_printf_common+0xb0>
 8023454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023458:	4641      	mov	r1, r8
 802345a:	4638      	mov	r0, r7
 802345c:	47c8      	blx	r9
 802345e:	3001      	adds	r0, #1
 8023460:	d01e      	beq.n	80234a0 <_printf_common+0xa4>
 8023462:	6823      	ldr	r3, [r4, #0]
 8023464:	6922      	ldr	r2, [r4, #16]
 8023466:	f003 0306 	and.w	r3, r3, #6
 802346a:	2b04      	cmp	r3, #4
 802346c:	bf02      	ittt	eq
 802346e:	68e5      	ldreq	r5, [r4, #12]
 8023470:	6833      	ldreq	r3, [r6, #0]
 8023472:	1aed      	subeq	r5, r5, r3
 8023474:	68a3      	ldr	r3, [r4, #8]
 8023476:	bf0c      	ite	eq
 8023478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802347c:	2500      	movne	r5, #0
 802347e:	4293      	cmp	r3, r2
 8023480:	bfc4      	itt	gt
 8023482:	1a9b      	subgt	r3, r3, r2
 8023484:	18ed      	addgt	r5, r5, r3
 8023486:	2600      	movs	r6, #0
 8023488:	341a      	adds	r4, #26
 802348a:	42b5      	cmp	r5, r6
 802348c:	d11a      	bne.n	80234c4 <_printf_common+0xc8>
 802348e:	2000      	movs	r0, #0
 8023490:	e008      	b.n	80234a4 <_printf_common+0xa8>
 8023492:	2301      	movs	r3, #1
 8023494:	4652      	mov	r2, sl
 8023496:	4641      	mov	r1, r8
 8023498:	4638      	mov	r0, r7
 802349a:	47c8      	blx	r9
 802349c:	3001      	adds	r0, #1
 802349e:	d103      	bne.n	80234a8 <_printf_common+0xac>
 80234a0:	f04f 30ff 	mov.w	r0, #4294967295
 80234a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234a8:	3501      	adds	r5, #1
 80234aa:	e7c6      	b.n	802343a <_printf_common+0x3e>
 80234ac:	18e1      	adds	r1, r4, r3
 80234ae:	1c5a      	adds	r2, r3, #1
 80234b0:	2030      	movs	r0, #48	@ 0x30
 80234b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80234b6:	4422      	add	r2, r4
 80234b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80234bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80234c0:	3302      	adds	r3, #2
 80234c2:	e7c7      	b.n	8023454 <_printf_common+0x58>
 80234c4:	2301      	movs	r3, #1
 80234c6:	4622      	mov	r2, r4
 80234c8:	4641      	mov	r1, r8
 80234ca:	4638      	mov	r0, r7
 80234cc:	47c8      	blx	r9
 80234ce:	3001      	adds	r0, #1
 80234d0:	d0e6      	beq.n	80234a0 <_printf_common+0xa4>
 80234d2:	3601      	adds	r6, #1
 80234d4:	e7d9      	b.n	802348a <_printf_common+0x8e>
	...

080234d8 <_printf_i>:
 80234d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80234dc:	7e0f      	ldrb	r7, [r1, #24]
 80234de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80234e0:	2f78      	cmp	r7, #120	@ 0x78
 80234e2:	4691      	mov	r9, r2
 80234e4:	4680      	mov	r8, r0
 80234e6:	460c      	mov	r4, r1
 80234e8:	469a      	mov	sl, r3
 80234ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80234ee:	d807      	bhi.n	8023500 <_printf_i+0x28>
 80234f0:	2f62      	cmp	r7, #98	@ 0x62
 80234f2:	d80a      	bhi.n	802350a <_printf_i+0x32>
 80234f4:	2f00      	cmp	r7, #0
 80234f6:	f000 80d2 	beq.w	802369e <_printf_i+0x1c6>
 80234fa:	2f58      	cmp	r7, #88	@ 0x58
 80234fc:	f000 80b9 	beq.w	8023672 <_printf_i+0x19a>
 8023500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023508:	e03a      	b.n	8023580 <_printf_i+0xa8>
 802350a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802350e:	2b15      	cmp	r3, #21
 8023510:	d8f6      	bhi.n	8023500 <_printf_i+0x28>
 8023512:	a101      	add	r1, pc, #4	@ (adr r1, 8023518 <_printf_i+0x40>)
 8023514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023518:	08023571 	.word	0x08023571
 802351c:	08023585 	.word	0x08023585
 8023520:	08023501 	.word	0x08023501
 8023524:	08023501 	.word	0x08023501
 8023528:	08023501 	.word	0x08023501
 802352c:	08023501 	.word	0x08023501
 8023530:	08023585 	.word	0x08023585
 8023534:	08023501 	.word	0x08023501
 8023538:	08023501 	.word	0x08023501
 802353c:	08023501 	.word	0x08023501
 8023540:	08023501 	.word	0x08023501
 8023544:	08023685 	.word	0x08023685
 8023548:	080235af 	.word	0x080235af
 802354c:	0802363f 	.word	0x0802363f
 8023550:	08023501 	.word	0x08023501
 8023554:	08023501 	.word	0x08023501
 8023558:	080236a7 	.word	0x080236a7
 802355c:	08023501 	.word	0x08023501
 8023560:	080235af 	.word	0x080235af
 8023564:	08023501 	.word	0x08023501
 8023568:	08023501 	.word	0x08023501
 802356c:	08023647 	.word	0x08023647
 8023570:	6833      	ldr	r3, [r6, #0]
 8023572:	1d1a      	adds	r2, r3, #4
 8023574:	681b      	ldr	r3, [r3, #0]
 8023576:	6032      	str	r2, [r6, #0]
 8023578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802357c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023580:	2301      	movs	r3, #1
 8023582:	e09d      	b.n	80236c0 <_printf_i+0x1e8>
 8023584:	6833      	ldr	r3, [r6, #0]
 8023586:	6820      	ldr	r0, [r4, #0]
 8023588:	1d19      	adds	r1, r3, #4
 802358a:	6031      	str	r1, [r6, #0]
 802358c:	0606      	lsls	r6, r0, #24
 802358e:	d501      	bpl.n	8023594 <_printf_i+0xbc>
 8023590:	681d      	ldr	r5, [r3, #0]
 8023592:	e003      	b.n	802359c <_printf_i+0xc4>
 8023594:	0645      	lsls	r5, r0, #25
 8023596:	d5fb      	bpl.n	8023590 <_printf_i+0xb8>
 8023598:	f9b3 5000 	ldrsh.w	r5, [r3]
 802359c:	2d00      	cmp	r5, #0
 802359e:	da03      	bge.n	80235a8 <_printf_i+0xd0>
 80235a0:	232d      	movs	r3, #45	@ 0x2d
 80235a2:	426d      	negs	r5, r5
 80235a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80235a8:	4859      	ldr	r0, [pc, #356]	@ (8023710 <_printf_i+0x238>)
 80235aa:	230a      	movs	r3, #10
 80235ac:	e011      	b.n	80235d2 <_printf_i+0xfa>
 80235ae:	6821      	ldr	r1, [r4, #0]
 80235b0:	6833      	ldr	r3, [r6, #0]
 80235b2:	0608      	lsls	r0, r1, #24
 80235b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80235b8:	d402      	bmi.n	80235c0 <_printf_i+0xe8>
 80235ba:	0649      	lsls	r1, r1, #25
 80235bc:	bf48      	it	mi
 80235be:	b2ad      	uxthmi	r5, r5
 80235c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80235c2:	4853      	ldr	r0, [pc, #332]	@ (8023710 <_printf_i+0x238>)
 80235c4:	6033      	str	r3, [r6, #0]
 80235c6:	bf14      	ite	ne
 80235c8:	230a      	movne	r3, #10
 80235ca:	2308      	moveq	r3, #8
 80235cc:	2100      	movs	r1, #0
 80235ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80235d2:	6866      	ldr	r6, [r4, #4]
 80235d4:	60a6      	str	r6, [r4, #8]
 80235d6:	2e00      	cmp	r6, #0
 80235d8:	bfa2      	ittt	ge
 80235da:	6821      	ldrge	r1, [r4, #0]
 80235dc:	f021 0104 	bicge.w	r1, r1, #4
 80235e0:	6021      	strge	r1, [r4, #0]
 80235e2:	b90d      	cbnz	r5, 80235e8 <_printf_i+0x110>
 80235e4:	2e00      	cmp	r6, #0
 80235e6:	d04b      	beq.n	8023680 <_printf_i+0x1a8>
 80235e8:	4616      	mov	r6, r2
 80235ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80235ee:	fb03 5711 	mls	r7, r3, r1, r5
 80235f2:	5dc7      	ldrb	r7, [r0, r7]
 80235f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80235f8:	462f      	mov	r7, r5
 80235fa:	42bb      	cmp	r3, r7
 80235fc:	460d      	mov	r5, r1
 80235fe:	d9f4      	bls.n	80235ea <_printf_i+0x112>
 8023600:	2b08      	cmp	r3, #8
 8023602:	d10b      	bne.n	802361c <_printf_i+0x144>
 8023604:	6823      	ldr	r3, [r4, #0]
 8023606:	07df      	lsls	r7, r3, #31
 8023608:	d508      	bpl.n	802361c <_printf_i+0x144>
 802360a:	6923      	ldr	r3, [r4, #16]
 802360c:	6861      	ldr	r1, [r4, #4]
 802360e:	4299      	cmp	r1, r3
 8023610:	bfde      	ittt	le
 8023612:	2330      	movle	r3, #48	@ 0x30
 8023614:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023618:	f106 36ff 	addle.w	r6, r6, #4294967295
 802361c:	1b92      	subs	r2, r2, r6
 802361e:	6122      	str	r2, [r4, #16]
 8023620:	f8cd a000 	str.w	sl, [sp]
 8023624:	464b      	mov	r3, r9
 8023626:	aa03      	add	r2, sp, #12
 8023628:	4621      	mov	r1, r4
 802362a:	4640      	mov	r0, r8
 802362c:	f7ff fee6 	bl	80233fc <_printf_common>
 8023630:	3001      	adds	r0, #1
 8023632:	d14a      	bne.n	80236ca <_printf_i+0x1f2>
 8023634:	f04f 30ff 	mov.w	r0, #4294967295
 8023638:	b004      	add	sp, #16
 802363a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802363e:	6823      	ldr	r3, [r4, #0]
 8023640:	f043 0320 	orr.w	r3, r3, #32
 8023644:	6023      	str	r3, [r4, #0]
 8023646:	4833      	ldr	r0, [pc, #204]	@ (8023714 <_printf_i+0x23c>)
 8023648:	2778      	movs	r7, #120	@ 0x78
 802364a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802364e:	6823      	ldr	r3, [r4, #0]
 8023650:	6831      	ldr	r1, [r6, #0]
 8023652:	061f      	lsls	r7, r3, #24
 8023654:	f851 5b04 	ldr.w	r5, [r1], #4
 8023658:	d402      	bmi.n	8023660 <_printf_i+0x188>
 802365a:	065f      	lsls	r7, r3, #25
 802365c:	bf48      	it	mi
 802365e:	b2ad      	uxthmi	r5, r5
 8023660:	6031      	str	r1, [r6, #0]
 8023662:	07d9      	lsls	r1, r3, #31
 8023664:	bf44      	itt	mi
 8023666:	f043 0320 	orrmi.w	r3, r3, #32
 802366a:	6023      	strmi	r3, [r4, #0]
 802366c:	b11d      	cbz	r5, 8023676 <_printf_i+0x19e>
 802366e:	2310      	movs	r3, #16
 8023670:	e7ac      	b.n	80235cc <_printf_i+0xf4>
 8023672:	4827      	ldr	r0, [pc, #156]	@ (8023710 <_printf_i+0x238>)
 8023674:	e7e9      	b.n	802364a <_printf_i+0x172>
 8023676:	6823      	ldr	r3, [r4, #0]
 8023678:	f023 0320 	bic.w	r3, r3, #32
 802367c:	6023      	str	r3, [r4, #0]
 802367e:	e7f6      	b.n	802366e <_printf_i+0x196>
 8023680:	4616      	mov	r6, r2
 8023682:	e7bd      	b.n	8023600 <_printf_i+0x128>
 8023684:	6833      	ldr	r3, [r6, #0]
 8023686:	6825      	ldr	r5, [r4, #0]
 8023688:	6961      	ldr	r1, [r4, #20]
 802368a:	1d18      	adds	r0, r3, #4
 802368c:	6030      	str	r0, [r6, #0]
 802368e:	062e      	lsls	r6, r5, #24
 8023690:	681b      	ldr	r3, [r3, #0]
 8023692:	d501      	bpl.n	8023698 <_printf_i+0x1c0>
 8023694:	6019      	str	r1, [r3, #0]
 8023696:	e002      	b.n	802369e <_printf_i+0x1c6>
 8023698:	0668      	lsls	r0, r5, #25
 802369a:	d5fb      	bpl.n	8023694 <_printf_i+0x1bc>
 802369c:	8019      	strh	r1, [r3, #0]
 802369e:	2300      	movs	r3, #0
 80236a0:	6123      	str	r3, [r4, #16]
 80236a2:	4616      	mov	r6, r2
 80236a4:	e7bc      	b.n	8023620 <_printf_i+0x148>
 80236a6:	6833      	ldr	r3, [r6, #0]
 80236a8:	1d1a      	adds	r2, r3, #4
 80236aa:	6032      	str	r2, [r6, #0]
 80236ac:	681e      	ldr	r6, [r3, #0]
 80236ae:	6862      	ldr	r2, [r4, #4]
 80236b0:	2100      	movs	r1, #0
 80236b2:	4630      	mov	r0, r6
 80236b4:	f7dc fe2c 	bl	8000310 <memchr>
 80236b8:	b108      	cbz	r0, 80236be <_printf_i+0x1e6>
 80236ba:	1b80      	subs	r0, r0, r6
 80236bc:	6060      	str	r0, [r4, #4]
 80236be:	6863      	ldr	r3, [r4, #4]
 80236c0:	6123      	str	r3, [r4, #16]
 80236c2:	2300      	movs	r3, #0
 80236c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236c8:	e7aa      	b.n	8023620 <_printf_i+0x148>
 80236ca:	6923      	ldr	r3, [r4, #16]
 80236cc:	4632      	mov	r2, r6
 80236ce:	4649      	mov	r1, r9
 80236d0:	4640      	mov	r0, r8
 80236d2:	47d0      	blx	sl
 80236d4:	3001      	adds	r0, #1
 80236d6:	d0ad      	beq.n	8023634 <_printf_i+0x15c>
 80236d8:	6823      	ldr	r3, [r4, #0]
 80236da:	079b      	lsls	r3, r3, #30
 80236dc:	d413      	bmi.n	8023706 <_printf_i+0x22e>
 80236de:	68e0      	ldr	r0, [r4, #12]
 80236e0:	9b03      	ldr	r3, [sp, #12]
 80236e2:	4298      	cmp	r0, r3
 80236e4:	bfb8      	it	lt
 80236e6:	4618      	movlt	r0, r3
 80236e8:	e7a6      	b.n	8023638 <_printf_i+0x160>
 80236ea:	2301      	movs	r3, #1
 80236ec:	4632      	mov	r2, r6
 80236ee:	4649      	mov	r1, r9
 80236f0:	4640      	mov	r0, r8
 80236f2:	47d0      	blx	sl
 80236f4:	3001      	adds	r0, #1
 80236f6:	d09d      	beq.n	8023634 <_printf_i+0x15c>
 80236f8:	3501      	adds	r5, #1
 80236fa:	68e3      	ldr	r3, [r4, #12]
 80236fc:	9903      	ldr	r1, [sp, #12]
 80236fe:	1a5b      	subs	r3, r3, r1
 8023700:	42ab      	cmp	r3, r5
 8023702:	dcf2      	bgt.n	80236ea <_printf_i+0x212>
 8023704:	e7eb      	b.n	80236de <_printf_i+0x206>
 8023706:	2500      	movs	r5, #0
 8023708:	f104 0619 	add.w	r6, r4, #25
 802370c:	e7f5      	b.n	80236fa <_printf_i+0x222>
 802370e:	bf00      	nop
 8023710:	08027211 	.word	0x08027211
 8023714:	08027222 	.word	0x08027222

08023718 <__swbuf_r>:
 8023718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802371a:	460e      	mov	r6, r1
 802371c:	4614      	mov	r4, r2
 802371e:	4605      	mov	r5, r0
 8023720:	b118      	cbz	r0, 802372a <__swbuf_r+0x12>
 8023722:	6a03      	ldr	r3, [r0, #32]
 8023724:	b90b      	cbnz	r3, 802372a <__swbuf_r+0x12>
 8023726:	f7ff f9ef 	bl	8022b08 <__sinit>
 802372a:	69a3      	ldr	r3, [r4, #24]
 802372c:	60a3      	str	r3, [r4, #8]
 802372e:	89a3      	ldrh	r3, [r4, #12]
 8023730:	071a      	lsls	r2, r3, #28
 8023732:	d501      	bpl.n	8023738 <__swbuf_r+0x20>
 8023734:	6923      	ldr	r3, [r4, #16]
 8023736:	b943      	cbnz	r3, 802374a <__swbuf_r+0x32>
 8023738:	4621      	mov	r1, r4
 802373a:	4628      	mov	r0, r5
 802373c:	f000 f82a 	bl	8023794 <__swsetup_r>
 8023740:	b118      	cbz	r0, 802374a <__swbuf_r+0x32>
 8023742:	f04f 37ff 	mov.w	r7, #4294967295
 8023746:	4638      	mov	r0, r7
 8023748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802374a:	6823      	ldr	r3, [r4, #0]
 802374c:	6922      	ldr	r2, [r4, #16]
 802374e:	1a98      	subs	r0, r3, r2
 8023750:	6963      	ldr	r3, [r4, #20]
 8023752:	b2f6      	uxtb	r6, r6
 8023754:	4283      	cmp	r3, r0
 8023756:	4637      	mov	r7, r6
 8023758:	dc05      	bgt.n	8023766 <__swbuf_r+0x4e>
 802375a:	4621      	mov	r1, r4
 802375c:	4628      	mov	r0, r5
 802375e:	f7ff fcbb 	bl	80230d8 <_fflush_r>
 8023762:	2800      	cmp	r0, #0
 8023764:	d1ed      	bne.n	8023742 <__swbuf_r+0x2a>
 8023766:	68a3      	ldr	r3, [r4, #8]
 8023768:	3b01      	subs	r3, #1
 802376a:	60a3      	str	r3, [r4, #8]
 802376c:	6823      	ldr	r3, [r4, #0]
 802376e:	1c5a      	adds	r2, r3, #1
 8023770:	6022      	str	r2, [r4, #0]
 8023772:	701e      	strb	r6, [r3, #0]
 8023774:	6962      	ldr	r2, [r4, #20]
 8023776:	1c43      	adds	r3, r0, #1
 8023778:	429a      	cmp	r2, r3
 802377a:	d004      	beq.n	8023786 <__swbuf_r+0x6e>
 802377c:	89a3      	ldrh	r3, [r4, #12]
 802377e:	07db      	lsls	r3, r3, #31
 8023780:	d5e1      	bpl.n	8023746 <__swbuf_r+0x2e>
 8023782:	2e0a      	cmp	r6, #10
 8023784:	d1df      	bne.n	8023746 <__swbuf_r+0x2e>
 8023786:	4621      	mov	r1, r4
 8023788:	4628      	mov	r0, r5
 802378a:	f7ff fca5 	bl	80230d8 <_fflush_r>
 802378e:	2800      	cmp	r0, #0
 8023790:	d0d9      	beq.n	8023746 <__swbuf_r+0x2e>
 8023792:	e7d6      	b.n	8023742 <__swbuf_r+0x2a>

08023794 <__swsetup_r>:
 8023794:	b538      	push	{r3, r4, r5, lr}
 8023796:	4b29      	ldr	r3, [pc, #164]	@ (802383c <__swsetup_r+0xa8>)
 8023798:	4605      	mov	r5, r0
 802379a:	6818      	ldr	r0, [r3, #0]
 802379c:	460c      	mov	r4, r1
 802379e:	b118      	cbz	r0, 80237a8 <__swsetup_r+0x14>
 80237a0:	6a03      	ldr	r3, [r0, #32]
 80237a2:	b90b      	cbnz	r3, 80237a8 <__swsetup_r+0x14>
 80237a4:	f7ff f9b0 	bl	8022b08 <__sinit>
 80237a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80237ac:	0719      	lsls	r1, r3, #28
 80237ae:	d422      	bmi.n	80237f6 <__swsetup_r+0x62>
 80237b0:	06da      	lsls	r2, r3, #27
 80237b2:	d407      	bmi.n	80237c4 <__swsetup_r+0x30>
 80237b4:	2209      	movs	r2, #9
 80237b6:	602a      	str	r2, [r5, #0]
 80237b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80237bc:	81a3      	strh	r3, [r4, #12]
 80237be:	f04f 30ff 	mov.w	r0, #4294967295
 80237c2:	e033      	b.n	802382c <__swsetup_r+0x98>
 80237c4:	0758      	lsls	r0, r3, #29
 80237c6:	d512      	bpl.n	80237ee <__swsetup_r+0x5a>
 80237c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80237ca:	b141      	cbz	r1, 80237de <__swsetup_r+0x4a>
 80237cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80237d0:	4299      	cmp	r1, r3
 80237d2:	d002      	beq.n	80237da <__swsetup_r+0x46>
 80237d4:	4628      	mov	r0, r5
 80237d6:	f7ff fafb 	bl	8022dd0 <_free_r>
 80237da:	2300      	movs	r3, #0
 80237dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80237de:	89a3      	ldrh	r3, [r4, #12]
 80237e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80237e4:	81a3      	strh	r3, [r4, #12]
 80237e6:	2300      	movs	r3, #0
 80237e8:	6063      	str	r3, [r4, #4]
 80237ea:	6923      	ldr	r3, [r4, #16]
 80237ec:	6023      	str	r3, [r4, #0]
 80237ee:	89a3      	ldrh	r3, [r4, #12]
 80237f0:	f043 0308 	orr.w	r3, r3, #8
 80237f4:	81a3      	strh	r3, [r4, #12]
 80237f6:	6923      	ldr	r3, [r4, #16]
 80237f8:	b94b      	cbnz	r3, 802380e <__swsetup_r+0x7a>
 80237fa:	89a3      	ldrh	r3, [r4, #12]
 80237fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023804:	d003      	beq.n	802380e <__swsetup_r+0x7a>
 8023806:	4621      	mov	r1, r4
 8023808:	4628      	mov	r0, r5
 802380a:	f000 f883 	bl	8023914 <__smakebuf_r>
 802380e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023812:	f013 0201 	ands.w	r2, r3, #1
 8023816:	d00a      	beq.n	802382e <__swsetup_r+0x9a>
 8023818:	2200      	movs	r2, #0
 802381a:	60a2      	str	r2, [r4, #8]
 802381c:	6962      	ldr	r2, [r4, #20]
 802381e:	4252      	negs	r2, r2
 8023820:	61a2      	str	r2, [r4, #24]
 8023822:	6922      	ldr	r2, [r4, #16]
 8023824:	b942      	cbnz	r2, 8023838 <__swsetup_r+0xa4>
 8023826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802382a:	d1c5      	bne.n	80237b8 <__swsetup_r+0x24>
 802382c:	bd38      	pop	{r3, r4, r5, pc}
 802382e:	0799      	lsls	r1, r3, #30
 8023830:	bf58      	it	pl
 8023832:	6962      	ldrpl	r2, [r4, #20]
 8023834:	60a2      	str	r2, [r4, #8]
 8023836:	e7f4      	b.n	8023822 <__swsetup_r+0x8e>
 8023838:	2000      	movs	r0, #0
 802383a:	e7f7      	b.n	802382c <__swsetup_r+0x98>
 802383c:	20000038 	.word	0x20000038

08023840 <_raise_r>:
 8023840:	291f      	cmp	r1, #31
 8023842:	b538      	push	{r3, r4, r5, lr}
 8023844:	4605      	mov	r5, r0
 8023846:	460c      	mov	r4, r1
 8023848:	d904      	bls.n	8023854 <_raise_r+0x14>
 802384a:	2316      	movs	r3, #22
 802384c:	6003      	str	r3, [r0, #0]
 802384e:	f04f 30ff 	mov.w	r0, #4294967295
 8023852:	bd38      	pop	{r3, r4, r5, pc}
 8023854:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023856:	b112      	cbz	r2, 802385e <_raise_r+0x1e>
 8023858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802385c:	b94b      	cbnz	r3, 8023872 <_raise_r+0x32>
 802385e:	4628      	mov	r0, r5
 8023860:	f000 f830 	bl	80238c4 <_getpid_r>
 8023864:	4622      	mov	r2, r4
 8023866:	4601      	mov	r1, r0
 8023868:	4628      	mov	r0, r5
 802386a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802386e:	f000 b817 	b.w	80238a0 <_kill_r>
 8023872:	2b01      	cmp	r3, #1
 8023874:	d00a      	beq.n	802388c <_raise_r+0x4c>
 8023876:	1c59      	adds	r1, r3, #1
 8023878:	d103      	bne.n	8023882 <_raise_r+0x42>
 802387a:	2316      	movs	r3, #22
 802387c:	6003      	str	r3, [r0, #0]
 802387e:	2001      	movs	r0, #1
 8023880:	e7e7      	b.n	8023852 <_raise_r+0x12>
 8023882:	2100      	movs	r1, #0
 8023884:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023888:	4620      	mov	r0, r4
 802388a:	4798      	blx	r3
 802388c:	2000      	movs	r0, #0
 802388e:	e7e0      	b.n	8023852 <_raise_r+0x12>

08023890 <raise>:
 8023890:	4b02      	ldr	r3, [pc, #8]	@ (802389c <raise+0xc>)
 8023892:	4601      	mov	r1, r0
 8023894:	6818      	ldr	r0, [r3, #0]
 8023896:	f7ff bfd3 	b.w	8023840 <_raise_r>
 802389a:	bf00      	nop
 802389c:	20000038 	.word	0x20000038

080238a0 <_kill_r>:
 80238a0:	b538      	push	{r3, r4, r5, lr}
 80238a2:	4d07      	ldr	r5, [pc, #28]	@ (80238c0 <_kill_r+0x20>)
 80238a4:	2300      	movs	r3, #0
 80238a6:	4604      	mov	r4, r0
 80238a8:	4608      	mov	r0, r1
 80238aa:	4611      	mov	r1, r2
 80238ac:	602b      	str	r3, [r5, #0]
 80238ae:	f7de fe69 	bl	8002584 <_kill>
 80238b2:	1c43      	adds	r3, r0, #1
 80238b4:	d102      	bne.n	80238bc <_kill_r+0x1c>
 80238b6:	682b      	ldr	r3, [r5, #0]
 80238b8:	b103      	cbz	r3, 80238bc <_kill_r+0x1c>
 80238ba:	6023      	str	r3, [r4, #0]
 80238bc:	bd38      	pop	{r3, r4, r5, pc}
 80238be:	bf00      	nop
 80238c0:	200026b0 	.word	0x200026b0

080238c4 <_getpid_r>:
 80238c4:	f7de be56 	b.w	8002574 <_getpid>

080238c8 <__swhatbuf_r>:
 80238c8:	b570      	push	{r4, r5, r6, lr}
 80238ca:	460c      	mov	r4, r1
 80238cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238d0:	2900      	cmp	r1, #0
 80238d2:	b096      	sub	sp, #88	@ 0x58
 80238d4:	4615      	mov	r5, r2
 80238d6:	461e      	mov	r6, r3
 80238d8:	da0d      	bge.n	80238f6 <__swhatbuf_r+0x2e>
 80238da:	89a3      	ldrh	r3, [r4, #12]
 80238dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80238e0:	f04f 0100 	mov.w	r1, #0
 80238e4:	bf14      	ite	ne
 80238e6:	2340      	movne	r3, #64	@ 0x40
 80238e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80238ec:	2000      	movs	r0, #0
 80238ee:	6031      	str	r1, [r6, #0]
 80238f0:	602b      	str	r3, [r5, #0]
 80238f2:	b016      	add	sp, #88	@ 0x58
 80238f4:	bd70      	pop	{r4, r5, r6, pc}
 80238f6:	466a      	mov	r2, sp
 80238f8:	f000 f848 	bl	802398c <_fstat_r>
 80238fc:	2800      	cmp	r0, #0
 80238fe:	dbec      	blt.n	80238da <__swhatbuf_r+0x12>
 8023900:	9901      	ldr	r1, [sp, #4]
 8023902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802390a:	4259      	negs	r1, r3
 802390c:	4159      	adcs	r1, r3
 802390e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023912:	e7eb      	b.n	80238ec <__swhatbuf_r+0x24>

08023914 <__smakebuf_r>:
 8023914:	898b      	ldrh	r3, [r1, #12]
 8023916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023918:	079d      	lsls	r5, r3, #30
 802391a:	4606      	mov	r6, r0
 802391c:	460c      	mov	r4, r1
 802391e:	d507      	bpl.n	8023930 <__smakebuf_r+0x1c>
 8023920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023924:	6023      	str	r3, [r4, #0]
 8023926:	6123      	str	r3, [r4, #16]
 8023928:	2301      	movs	r3, #1
 802392a:	6163      	str	r3, [r4, #20]
 802392c:	b003      	add	sp, #12
 802392e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023930:	ab01      	add	r3, sp, #4
 8023932:	466a      	mov	r2, sp
 8023934:	f7ff ffc8 	bl	80238c8 <__swhatbuf_r>
 8023938:	9f00      	ldr	r7, [sp, #0]
 802393a:	4605      	mov	r5, r0
 802393c:	4639      	mov	r1, r7
 802393e:	4630      	mov	r0, r6
 8023940:	f7ff faba 	bl	8022eb8 <_malloc_r>
 8023944:	b948      	cbnz	r0, 802395a <__smakebuf_r+0x46>
 8023946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802394a:	059a      	lsls	r2, r3, #22
 802394c:	d4ee      	bmi.n	802392c <__smakebuf_r+0x18>
 802394e:	f023 0303 	bic.w	r3, r3, #3
 8023952:	f043 0302 	orr.w	r3, r3, #2
 8023956:	81a3      	strh	r3, [r4, #12]
 8023958:	e7e2      	b.n	8023920 <__smakebuf_r+0xc>
 802395a:	89a3      	ldrh	r3, [r4, #12]
 802395c:	6020      	str	r0, [r4, #0]
 802395e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023962:	81a3      	strh	r3, [r4, #12]
 8023964:	9b01      	ldr	r3, [sp, #4]
 8023966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802396a:	b15b      	cbz	r3, 8023984 <__smakebuf_r+0x70>
 802396c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023970:	4630      	mov	r0, r6
 8023972:	f000 f81d 	bl	80239b0 <_isatty_r>
 8023976:	b128      	cbz	r0, 8023984 <__smakebuf_r+0x70>
 8023978:	89a3      	ldrh	r3, [r4, #12]
 802397a:	f023 0303 	bic.w	r3, r3, #3
 802397e:	f043 0301 	orr.w	r3, r3, #1
 8023982:	81a3      	strh	r3, [r4, #12]
 8023984:	89a3      	ldrh	r3, [r4, #12]
 8023986:	431d      	orrs	r5, r3
 8023988:	81a5      	strh	r5, [r4, #12]
 802398a:	e7cf      	b.n	802392c <__smakebuf_r+0x18>

0802398c <_fstat_r>:
 802398c:	b538      	push	{r3, r4, r5, lr}
 802398e:	4d07      	ldr	r5, [pc, #28]	@ (80239ac <_fstat_r+0x20>)
 8023990:	2300      	movs	r3, #0
 8023992:	4604      	mov	r4, r0
 8023994:	4608      	mov	r0, r1
 8023996:	4611      	mov	r1, r2
 8023998:	602b      	str	r3, [r5, #0]
 802399a:	f7de fe53 	bl	8002644 <_fstat>
 802399e:	1c43      	adds	r3, r0, #1
 80239a0:	d102      	bne.n	80239a8 <_fstat_r+0x1c>
 80239a2:	682b      	ldr	r3, [r5, #0]
 80239a4:	b103      	cbz	r3, 80239a8 <_fstat_r+0x1c>
 80239a6:	6023      	str	r3, [r4, #0]
 80239a8:	bd38      	pop	{r3, r4, r5, pc}
 80239aa:	bf00      	nop
 80239ac:	200026b0 	.word	0x200026b0

080239b0 <_isatty_r>:
 80239b0:	b538      	push	{r3, r4, r5, lr}
 80239b2:	4d06      	ldr	r5, [pc, #24]	@ (80239cc <_isatty_r+0x1c>)
 80239b4:	2300      	movs	r3, #0
 80239b6:	4604      	mov	r4, r0
 80239b8:	4608      	mov	r0, r1
 80239ba:	602b      	str	r3, [r5, #0]
 80239bc:	f7de fe52 	bl	8002664 <_isatty>
 80239c0:	1c43      	adds	r3, r0, #1
 80239c2:	d102      	bne.n	80239ca <_isatty_r+0x1a>
 80239c4:	682b      	ldr	r3, [r5, #0]
 80239c6:	b103      	cbz	r3, 80239ca <_isatty_r+0x1a>
 80239c8:	6023      	str	r3, [r4, #0]
 80239ca:	bd38      	pop	{r3, r4, r5, pc}
 80239cc:	200026b0 	.word	0x200026b0

080239d0 <_init>:
 80239d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239d2:	bf00      	nop
 80239d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239d6:	bc08      	pop	{r3}
 80239d8:	469e      	mov	lr, r3
 80239da:	4770      	bx	lr

080239dc <_fini>:
 80239dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239de:	bf00      	nop
 80239e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239e2:	bc08      	pop	{r3}
 80239e4:	469e      	mov	lr, r3
 80239e6:	4770      	bx	lr
