
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023a98  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003860  08023d38  08023d38  00024d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027598  08027598  00028598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080275a0  080275a0  000285a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080275a4  080275a4  000285a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  080275a8  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000263c  20000088  08027630  00029088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200026c4  08027630  000296c4  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002cc8  08027630  00029cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    0003000c  30000000  30000000  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cc000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d4000  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006318a  00000000  00000000  000d402e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c01b  00000000  00000000  001371b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003178  00000000  00000000  001431d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027a4  00000000  00000000  00146350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f64c  00000000  00000000  00148af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005c86a  00000000  00000000  00198140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191e4d  00000000  00000000  001f49aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  003867f7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d744  00000000  00000000  0038683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00393f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023d20 	.word	0x08023d20

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08023d20 	.word	0x08023d20

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fb25 	bl	8001cf4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 f9a1 	bl	8019abc <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba6      	ldr	r3, [pc, #664]	@ (8000a14 <main+0x374>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a4      	ldr	r0, [pc, #656]	@ (8000a18 <main+0x378>)
 8000788:	f021 fd57 	bl	802223a <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a2      	ldr	r0, [pc, #648]	@ (8000a1c <main+0x37c>)
 8000794:	f021 fd51 	bl	802223a <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a0      	ldr	r0, [pc, #640]	@ (8000a20 <main+0x380>)
 80007a0:	f021 fd4b 	bl	802223a <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	489e      	ldr	r0, [pc, #632]	@ (8000a24 <main+0x384>)
 80007ac:	f021 fd45 	bl	802223a <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fb07 	bl	8000dc8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fbb3 	bl	8000f24 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f000 ffb7 	bl	8001730 <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f021 fb59 	bl	8021e78 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fedb 	bl	8001580 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 fe91 	bl	80014f0 <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 fe43 	bl	8001458 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fc17 	bl	8001004 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fc6d 	bl	80010b4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fcc1 	bl	8001160 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fd15 	bl	800120c <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fd65 	bl	80012b0 <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fbcd 	bl	8000f84 <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fdaf 	bl	800134c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007ee:	4b8e      	ldr	r3, [pc, #568]	@ (8000a28 <main+0x388>)
 80007f0:	4a8e      	ldr	r2, [pc, #568]	@ (8000a2c <main+0x38c>)
 80007f2:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000a28 <main+0x388>)
 80007f6:	4a8e      	ldr	r2, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f8:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fa:	4b8b      	ldr	r3, [pc, #556]	@ (8000a28 <main+0x388>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 8000806:	4b88      	ldr	r3, [pc, #544]	@ (8000a28 <main+0x388>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a87      	ldr	r2, [pc, #540]	@ (8000a28 <main+0x388>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000812:	4b88      	ldr	r3, [pc, #544]	@ (8000a34 <main+0x394>)
 8000814:	4a88      	ldr	r2, [pc, #544]	@ (8000a38 <main+0x398>)
 8000816:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 8000818:	4b86      	ldr	r3, [pc, #536]	@ (8000a34 <main+0x394>)
 800081a:	4a85      	ldr	r2, [pc, #532]	@ (8000a30 <main+0x390>)
 800081c:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 800081e:	4b85      	ldr	r3, [pc, #532]	@ (8000a34 <main+0x394>)
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082a:	4b82      	ldr	r3, [pc, #520]	@ (8000a34 <main+0x394>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a81      	ldr	r2, [pc, #516]	@ (8000a34 <main+0x394>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF00FF;
 8000836:	4b80      	ldr	r3, [pc, #512]	@ (8000a38 <main+0x398>)
 8000838:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 800083c:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF000F;
 800083e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a2c <main+0x38c>)
 8000840:	4a7e      	ldr	r2, [pc, #504]	@ (8000a3c <main+0x39c>)
 8000842:	601a      	str	r2, [r3, #0]
  //TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 8000844:	4b7e      	ldr	r3, [pc, #504]	@ (8000a40 <main+0x3a0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a7d      	ldr	r2, [pc, #500]	@ (8000a40 <main+0x3a0>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000850:	4b7b      	ldr	r3, [pc, #492]	@ (8000a40 <main+0x3a0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a7a      	ldr	r2, [pc, #488]	@ (8000a40 <main+0x3a0>)
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 800085c:	4b78      	ldr	r3, [pc, #480]	@ (8000a40 <main+0x3a0>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a77      	ldr	r2, [pc, #476]	@ (8000a40 <main+0x3a0>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 8000868:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <main+0x3a0>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a74      	ldr	r2, [pc, #464]	@ (8000a40 <main+0x3a0>)
 800086e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000872:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000874:	4b72      	ldr	r3, [pc, #456]	@ (8000a40 <main+0x3a0>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4a71      	ldr	r2, [pc, #452]	@ (8000a40 <main+0x3a0>)
 800087a:	f043 0311 	orr.w	r3, r3, #17
 800087e:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000880:	4b6f      	ldr	r3, [pc, #444]	@ (8000a40 <main+0x3a0>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a6e      	ldr	r2, [pc, #440]	@ (8000a40 <main+0x3a0>)
 8000886:	f043 0303 	orr.w	r3, r3, #3
 800088a:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 800088c:	4b6c      	ldr	r3, [pc, #432]	@ (8000a40 <main+0x3a0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a6b      	ldr	r2, [pc, #428]	@ (8000a40 <main+0x3a0>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800089e:	4869      	ldr	r0, [pc, #420]	@ (8000a44 <main+0x3a4>)
 80008a0:	f01b fc22 	bl	801c0e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008aa:	4866      	ldr	r0, [pc, #408]	@ (8000a44 <main+0x3a4>)
 80008ac:	f01b fc1c 	bl	801c0e8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b0:	2032      	movs	r0, #50	@ 0x32
 80008b2:	f019 f995 	bl	8019be0 <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008bc:	4861      	ldr	r0, [pc, #388]	@ (8000a44 <main+0x3a4>)
 80008be:	f01b fc13 	bl	801c0e8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c2:	2032      	movs	r0, #50	@ 0x32
 80008c4:	f019 f98c 	bl	8019be0 <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a48 <main+0x3a8>)
 80008ca:	4a60      	ldr	r2, [pc, #384]	@ (8000a4c <main+0x3ac>)
 80008cc:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008ce:	bf00      	nop
 80008d0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a48 <main+0x3a8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0312 	and.w	r3, r3, #18
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f9      	beq.n	80008d0 <main+0x230>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008dc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a48 <main+0x3a8>)
 80008de:	2239      	movs	r2, #57	@ 0x39
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e2:	bf00      	nop
 80008e4:	4b58      	ldr	r3, [pc, #352]	@ (8000a48 <main+0x3a8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <main+0x244>
  I2C4->TXDR = 0; //MSB
 80008f0:	4b55      	ldr	r3, [pc, #340]	@ (8000a48 <main+0x3a8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008f6:	bf00      	nop
 80008f8:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <main+0x3a8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f9      	beq.n	80008f8 <main+0x258>
  I2C4->TXDR = 4; //LSB
 8000904:	4b50      	ldr	r3, [pc, #320]	@ (8000a48 <main+0x3a8>)
 8000906:	2204      	movs	r2, #4
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 800090a:	bf00      	nop
 800090c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a48 <main+0x3a8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f9      	beq.n	800090c <main+0x26c>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 8000918:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <main+0x3a8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d005      	beq.n	8000930 <main+0x290>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000924:	4b48      	ldr	r3, [pc, #288]	@ (8000a48 <main+0x3a8>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a47      	ldr	r2, [pc, #284]	@ (8000a48 <main+0x3a8>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 8000930:	4b47      	ldr	r3, [pc, #284]	@ (8000a50 <main+0x3b0>)
 8000932:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <main+0x378>)
 8000934:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 8000936:	4b46      	ldr	r3, [pc, #280]	@ (8000a50 <main+0x3b0>)
 8000938:	4a38      	ldr	r2, [pc, #224]	@ (8000a1c <main+0x37c>)
 800093a:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 800093c:	4b44      	ldr	r3, [pc, #272]	@ (8000a50 <main+0x3b0>)
 800093e:	4a45      	ldr	r2, [pc, #276]	@ (8000a54 <main+0x3b4>)
 8000940:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 8000942:	4b43      	ldr	r3, [pc, #268]	@ (8000a50 <main+0x3b0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a42      	ldr	r2, [pc, #264]	@ (8000a50 <main+0x3b0>)
 8000948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800094c:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <main+0x3b0>)
 8000950:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000954:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x3b0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a50 <main+0x3b0>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000962:	f3bf 8f4f 	dsb	sy
}
 8000966:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000968:	4b39      	ldr	r3, [pc, #228]	@ (8000a50 <main+0x3b0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a38      	ldr	r2, [pc, #224]	@ (8000a50 <main+0x3b0>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <main+0x3b8>)
 8000976:	4a2a      	ldr	r2, [pc, #168]	@ (8000a20 <main+0x380>)
 8000978:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800097a:	4b37      	ldr	r3, [pc, #220]	@ (8000a58 <main+0x3b8>)
 800097c:	4a29      	ldr	r2, [pc, #164]	@ (8000a24 <main+0x384>)
 800097e:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <main+0x3b8>)
 8000982:	4a36      	ldr	r2, [pc, #216]	@ (8000a5c <main+0x3bc>)
 8000984:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 8000986:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <main+0x3b8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <main+0x3b8>)
 800098c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000990:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <main+0x3b8>)
 8000994:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000998:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <main+0x3b8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <main+0x3b8>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a6:	f3bf 8f4f 	dsb	sy
}
 80009aa:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <main+0x3b8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a29      	ldr	r2, [pc, #164]	@ (8000a58 <main+0x3b8>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <main+0x3c0>)
 80009ba:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <main+0x374>)
 80009bc:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <main+0x3c0>)
 80009c0:	4a28      	ldr	r2, [pc, #160]	@ (8000a64 <main+0x3c4>)
 80009c2:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <main+0x3c0>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <main+0x3c0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <main+0x3c0>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <main+0x3c8>)
 80009de:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <main+0x374>)
 80009e0:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <main+0x3c8>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <main+0x3cc>)
 80009e6:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <main+0x3c8>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ee:	f3bf 8f4f 	dsb	sy
}
 80009f2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <main+0x3c8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <main+0x3c8>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR2 = 0; //reinitialize tsize
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <main+0x3d0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <main+0x3d0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <main+0x3d0>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e02f      	b.n	8000a74 <main+0x3d4>
 8000a14:	30000000 	.word	0x30000000
 8000a18:	30000004 	.word	0x30000004
 8000a1c:	30010004 	.word	0x30010004
 8000a20:	30020004 	.word	0x30020004
 8000a24:	30028004 	.word	0x30028004
 8000a28:	40020070 	.word	0x40020070
 8000a2c:	30030004 	.word	0x30030004
 8000a30:	58020c18 	.word	0x58020c18
 8000a34:	40020088 	.word	0x40020088
 8000a38:	30030008 	.word	0x30030008
 8000a3c:	00ff000f 	.word	0x00ff000f
 8000a40:	40000800 	.word	0x40000800
 8000a44:	58020c00 	.word	0x58020c00
 8000a48:	58001c00 	.word	0x58001c00
 8000a4c:	02032018 	.word	0x02032018
 8000a50:	40020010 	.word	0x40020010
 8000a54:	40013030 	.word	0x40013030
 8000a58:	40020028 	.word	0x40020028
 8000a5c:	40003830 	.word	0x40003830
 8000a60:	40020040 	.word	0x40020040
 8000a64:	40013020 	.word	0x40013020
 8000a68:	40020058 	.word	0x40020058
 8000a6c:	40003820 	.word	0x40003820
 8000a70:	40013000 	.word	0x40013000
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000a74:	4ba3      	ldr	r3, [pc, #652]	@ (8000d04 <main+0x664>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4aa2      	ldr	r2, [pc, #648]	@ (8000d04 <main+0x664>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a86:	48a0      	ldr	r0, [pc, #640]	@ (8000d08 <main+0x668>)
 8000a88:	f01b fb2e 	bl	801c0e8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	@ 0x64
 8000a8e:	f019 f8a7 	bl	8019be0 <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a98:	489b      	ldr	r0, [pc, #620]	@ (8000d08 <main+0x668>)
 8000a9a:	f01b fb25 	bl	801c0e8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	@ 0x64
 8000aa0:	f019 f89e 	bl	8019be0 <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000aa4:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000aa8:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000aaa:	7a7b      	ldrb	r3, [r7, #9]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	7a3a      	ldrb	r2, [r7, #8]
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	4b94      	ldr	r3, [pc, #592]	@ (8000d04 <main+0x664>)
 8000ab4:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ab6:	bf00      	nop
 8000ab8:	4b92      	ldr	r3, [pc, #584]	@ (8000d04 <main+0x664>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <main+0x418>
  spi_data[1]++;
 8000ac4:	7a7b      	ldrb	r3, [r7, #9]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; //sync control mode
 8000acc:	2310      	movs	r3, #16
 8000ace:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ad0:	7a7b      	ldrb	r3, [r7, #9]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	7a3a      	ldrb	r2, [r7, #8]
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	4b8a      	ldr	r3, [pc, #552]	@ (8000d04 <main+0x664>)
 8000ada:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000adc:	bf00      	nop
 8000ade:	4b89      	ldr	r3, [pc, #548]	@ (8000d04 <main+0x664>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f9      	beq.n	8000ade <main+0x43e>
  spi_data[1]++;
 8000aea:	7a7b      	ldrb	r3, [r7, #9]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000af2:	2309      	movs	r3, #9
 8000af4:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000af6:	7a7b      	ldrb	r3, [r7, #9]
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	7a3a      	ldrb	r2, [r7, #8]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	4b81      	ldr	r3, [pc, #516]	@ (8000d04 <main+0x664>)
 8000b00:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b02:	bf00      	nop
 8000b04:	4b7f      	ldr	r3, [pc, #508]	@ (8000d04 <main+0x664>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f9      	beq.n	8000b04 <main+0x464>
  spi_data[1]++;
 8000b10:	7a7b      	ldrb	r3, [r7, #9]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b10000000; //external clock
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	7a3a      	ldrb	r2, [r7, #8]
 8000b22:	431a      	orrs	r2, r3
 8000b24:	4b77      	ldr	r3, [pc, #476]	@ (8000d04 <main+0x664>)
 8000b26:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b28:	bf00      	nop
 8000b2a:	4b76      	ldr	r3, [pc, #472]	@ (8000d04 <main+0x664>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <main+0x48a>
  spi_data[1]=0x80+0x03; //start conversion
 8000b36:	2383      	movs	r3, #131	@ 0x83
 8000b38:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b00000010;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b3e:	7a7b      	ldrb	r3, [r7, #9]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	7a3a      	ldrb	r2, [r7, #8]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4b6f      	ldr	r3, [pc, #444]	@ (8000d04 <main+0x664>)
 8000b48:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b4a:	bf00      	nop
 8000b4c:	4b6d      	ldr	r3, [pc, #436]	@ (8000d04 <main+0x664>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <main+0x4ac>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b58:	4b6a      	ldr	r3, [pc, #424]	@ (8000d04 <main+0x664>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a69      	ldr	r2, [pc, #420]	@ (8000d04 <main+0x664>)
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

  //GADC Setup
  SPI2->CR2 = 0; //reinitialize tsize
 8000b64:	4b69      	ldr	r3, [pc, #420]	@ (8000d0c <main+0x66c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; //use 32 bit mode for config
 8000b6a:	4b68      	ldr	r3, [pc, #416]	@ (8000d0c <main+0x66c>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4a67      	ldr	r2, [pc, #412]	@ (8000d0c <main+0x66c>)
 8000b70:	f043 031f 	orr.w	r3, r3, #31
 8000b74:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b76:	4b65      	ldr	r3, [pc, #404]	@ (8000d0c <main+0x66c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a64      	ldr	r2, [pc, #400]	@ (8000d0c <main+0x66c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000b82:	4b62      	ldr	r3, [pc, #392]	@ (8000d0c <main+0x66c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a61      	ldr	r2, [pc, #388]	@ (8000d0c <main+0x66c>)
 8000b88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8c:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b94:	485e      	ldr	r0, [pc, #376]	@ (8000d10 <main+0x670>)
 8000b96:	f01b faa7 	bl	801c0e8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b9a:	2064      	movs	r0, #100	@ 0x64
 8000b9c:	f019 f820 	bl	8019be0 <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba6:	485a      	ldr	r0, [pc, #360]	@ (8000d10 <main+0x670>)
 8000ba8:	f01b fa9e 	bl	801c0e8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bac:	2064      	movs	r0, #100	@ 0x64
 8000bae:	f019 f817 	bl	8019be0 <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1<<5) | (1<<4)}; //disable alarms
 8000bb2:	4b58      	ldr	r3, [pc, #352]	@ (8000d14 <main+0x674>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	041b      	lsls	r3, r3, #16
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	4b52      	ldr	r3, [pc, #328]	@ (8000d0c <main+0x66c>)
 8000bc2:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000bc4:	bf00      	nop
 8000bc6:	4b51      	ldr	r3, [pc, #324]	@ (8000d0c <main+0x66c>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f9      	beq.n	8000bc6 <main+0x526>
  ucGADCSPIData[0] = 0b1101000000010100; //14h
 8000bd2:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000bd6:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10; //range select +-1.5x VREF
 8000bd8:	2302      	movs	r3, #2
 8000bda:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	041b      	lsls	r3, r3, #16
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	431a      	orrs	r2, r3
 8000be4:	4b49      	ldr	r3, [pc, #292]	@ (8000d0c <main+0x66c>)
 8000be6:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){};
 8000be8:	bf00      	nop
 8000bea:	4b48      	ldr	r3, [pc, #288]	@ (8000d0c <main+0x66c>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f9      	beq.n	8000bea <main+0x54a>
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000bf6:	4b45      	ldr	r3, [pc, #276]	@ (8000d0c <main+0x66c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a44      	ldr	r2, [pc, #272]	@ (8000d0c <main+0x66c>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c02:	4b42      	ldr	r3, [pc, #264]	@ (8000d0c <main+0x66c>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	4a41      	ldr	r2, [pc, #260]	@ (8000d0c <main+0x66c>)
 8000c08:	f023 031f 	bic.w	r3, r3, #31
 8000c0c:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; //switch back to 16 bit transfers
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d0c <main+0x66c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	4a3e      	ldr	r2, [pc, #248]	@ (8000d0c <main+0x66c>)
 8000c14:	f043 030f 	orr.w	r3, r3, #15
 8000c18:	6093      	str	r3, [r2, #8]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	483e      	ldr	r0, [pc, #248]	@ (8000d18 <main+0x678>)
 8000c20:	f01b fa62 	bl	801c0e8 <HAL_GPIO_WritePin>

  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000c24:	4b37      	ldr	r3, [pc, #220]	@ (8000d04 <main+0x664>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c2a:	4b36      	ldr	r3, [pc, #216]	@ (8000d04 <main+0x664>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4a35      	ldr	r2, [pc, #212]	@ (8000d04 <main+0x664>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000c36:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <main+0x664>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <main+0x664>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000c42:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <main+0x664>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a2f      	ldr	r2, [pc, #188]	@ (8000d04 <main+0x664>)
 8000c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4c:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CR2 = 0; //reinitialize tsize
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <main+0x66c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <main+0x66c>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	4a2c      	ldr	r2, [pc, #176]	@ (8000d0c <main+0x66c>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5e:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <main+0x66c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a29      	ldr	r2, [pc, #164]	@ (8000d0c <main+0x66c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <main+0x66c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a26      	ldr	r2, [pc, #152]	@ (8000d0c <main+0x66c>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c76:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000c78:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <main+0x67c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <main+0x67c>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <main+0x67c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <main+0x67c>)
 8000c8a:	f023 0302 	bic.w	r3, r3, #2
 8000c8e:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000c90:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <main+0x67c>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	4a21      	ldr	r2, [pc, #132]	@ (8000d1c <main+0x67c>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9a:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <main+0x67c>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <main+0x67c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <main+0x67c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <main+0x67c>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <main+0x680>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <main+0x680>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <main+0x680>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a16      	ldr	r2, [pc, #88]	@ (8000d20 <main+0x680>)
 8000cc6:	f023 0302 	bic.w	r3, r3, #2
 8000cca:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <main+0x680>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	@ (8000d20 <main+0x680>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd6:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <main+0x680>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4a10      	ldr	r2, [pc, #64]	@ (8000d20 <main+0x680>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <main+0x680>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <main+0x680>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <main+0x684>)
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f017 f816 	bl	8017d24 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <main+0x688>)
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <main+0x68c>)
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	e016      	b.n	8000d30 <main+0x690>
 8000d02:	bf00      	nop
 8000d04:	40013000 	.word	0x40013000
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	40003800 	.word	0x40003800
 8000d10:	58020c00 	.word	0x58020c00
 8000d14:	08023d54 	.word	0x08023d54
 8000d18:	58021000 	.word	0x58021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40000400 	.word	0x40000400
 8000d24:	20000724 	.word	0x20000724
 8000d28:	0802723c 	.word	0x0802723c
 8000d2c:	08027238 	.word	0x08027238
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <main+0x6f0>)
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <main+0x6f4>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	@ (8000d98 <main+0x6f8>)
 8000d38:	4918      	ldr	r1, [pc, #96]	@ (8000d9c <main+0x6fc>)
 8000d3a:	4819      	ldr	r0, [pc, #100]	@ (8000da0 <main+0x700>)
 8000d3c:	f00c f8d0 	bl	800cee0 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000d40:	f008 fa1e 	bl	8009180 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <main+0x704>)
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d52:	4915      	ldr	r1, [pc, #84]	@ (8000da8 <main+0x708>)
 8000d54:	4815      	ldr	r0, [pc, #84]	@ (8000dac <main+0x70c>)
 8000d56:	f002 ffeb 	bl	8003d30 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <main+0x710>)
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d68:	4912      	ldr	r1, [pc, #72]	@ (8000db4 <main+0x714>)
 8000d6a:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <main+0x718>)
 8000d6c:	f002 ffe0 	bl	8003d30 <xTaskCreate>
      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <main+0x71c>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d7e:	4910      	ldr	r1, [pc, #64]	@ (8000dc0 <main+0x720>)
 8000d80:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <main+0x724>)
 8000d82:	f002 ffd5 	bl	8003d30 <xTaskCreate>
      vTaskStartScheduler();
 8000d86:	f003 f98f 	bl	80040a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d8a:	bf00      	nop
 8000d8c:	e7fd      	b.n	8000d8a <main+0x6ea>
 8000d8e:	bf00      	nop
 8000d90:	08027234 	.word	0x08027234
 8000d94:	08027230 	.word	0x08027230
 8000d98:	0802722c 	.word	0x0802722c
 8000d9c:	2000074c 	.word	0x2000074c
 8000da0:	20000724 	.word	0x20000724
 8000da4:	20000bf4 	.word	0x20000bf4
 8000da8:	08023d38 	.word	0x08023d38
 8000dac:	0800195d 	.word	0x0800195d
 8000db0:	20000bf8 	.word	0x20000bf8
 8000db4:	08023d40 	.word	0x08023d40
 8000db8:	08001985 	.word	0x08001985
 8000dbc:	20000bfc 	.word	0x20000bfc
 8000dc0:	08023d48 	.word	0x08023d48
 8000dc4:	08001b3d 	.word	0x08001b3d

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09e      	sub	sp, #120	@ 0x78
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd2:	224c      	movs	r2, #76	@ 0x4c
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f021 fa2f 	bl	802223a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2220      	movs	r2, #32
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f021 fa28 	bl	802223a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f01b faca 	bl	801c384 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	4b48      	ldr	r3, [pc, #288]	@ (8000f18 <SystemClock_Config+0x150>)
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	4a47      	ldr	r2, [pc, #284]	@ (8000f18 <SystemClock_Config+0x150>)
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e00:	4b45      	ldr	r3, [pc, #276]	@ (8000f18 <SystemClock_Config+0x150>)
 8000e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b44      	ldr	r3, [pc, #272]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a43      	ldr	r2, [pc, #268]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b41      	ldr	r3, [pc, #260]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e22:	bf00      	nop
 8000e24:	4b3d      	ldr	r3, [pc, #244]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e30:	d1f8      	bne.n	8000e24 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <SystemClock_Config+0x158>)
 8000e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e38:	4a39      	ldr	r2, [pc, #228]	@ (8000f20 <SystemClock_Config+0x158>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e42:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <SystemClock_Config+0x158>)
 8000e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a30      	ldr	r2, [pc, #192]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <SystemClock_Config+0x150>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000f18 <SystemClock_Config+0x150>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e76:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <SystemClock_Config+0x150>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e82:	bf00      	nop
 8000e84:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <SystemClock_Config+0x154>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e90:	d1f8      	bne.n	8000e84 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e96:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ea8:	2340      	movs	r3, #64	@ 0x40
 8000eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f01b fa95 	bl	801c3f8 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ed4:	f000 ff44 	bl	8001d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	233f      	movs	r3, #63	@ 0x3f
 8000eda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	2303      	movs	r3, #3
 8000ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ee8:	2340      	movs	r3, #64	@ 0x40
 8000eea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eec:	2340      	movs	r3, #64	@ 0x40
 8000eee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ef6:	2340      	movs	r3, #64	@ 0x40
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	2102      	movs	r1, #2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f01b fed3 	bl	801ccac <HAL_RCC_ClockConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000f0c:	f000 ff28 	bl	8001d60 <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3778      	adds	r7, #120	@ 0x78
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	58000400 	.word	0x58000400
 8000f1c:	58024800 	.word	0x58024800
 8000f20:	58024400 	.word	0x58024400

08000f24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0b0      	sub	sp, #192	@ 0xc0
 8000f28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	22c0      	movs	r2, #192	@ 0xc0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f021 f982 	bl	802223a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000f36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000f42:	2308      	movs	r3, #8
 8000f44:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000f46:	2340      	movs	r3, #64	@ 0x40
 8000f48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000f56:	2340      	movs	r3, #64	@ 0x40
 8000f58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f66:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f01c fa2a 	bl	801d3c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000f76:	f000 fef3 	bl	8001d60 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	37c0      	adds	r7, #192	@ 0xc0
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <MX_I2C4_Init+0x78>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <MX_I2C4_Init+0x7c>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fc0:	f01b f8ac 	bl	801c11c <HAL_I2C_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000fca:	f000 fec9 	bl	8001d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fd2:	f01b f93f 	bl	801c254 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f000 fec0 	bl	8001d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_I2C4_Init+0x74>)
 8000fe4:	f01b f981 	bl	801c2ea <HAL_I2CEx_ConfigDigitalFilter>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f000 feb7 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000a4 	.word	0x200000a4
 8000ffc:	58001c00 	.word	0x58001c00
 8001000:	10c0ecff 	.word	0x10c0ecff

08001004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001008:	4b28      	ldr	r3, [pc, #160]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800100a:	4a29      	ldr	r2, [pc, #164]	@ (80010b0 <MX_SPI1_Init+0xac>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001010:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800101c:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800101e:	220f      	movs	r2, #15
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001028:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800102a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800102e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001030:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001032:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001036:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800103a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800103e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001062:	2200      	movs	r2, #0
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800107a:	2203      	movs	r2, #3
 800107c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001080:	2230      	movs	r2, #48	@ 0x30
 8001082:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001086:	2200      	movs	r2, #0
 8001088:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_SPI1_Init+0xa8>)
 800108c:	2200      	movs	r2, #0
 800108e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001092:	2200      	movs	r2, #0
 8001094:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_SPI1_Init+0xa8>)
 8001098:	f01d ffc0 	bl	801f01c <HAL_SPI_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80010a2:	f000 fe5d 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000f8 	.word	0x200000f8
 80010b0:	40013000 	.word	0x40013000

080010b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010ba:	4a28      	ldr	r2, [pc, #160]	@ (800115c <MX_SPI2_Init+0xa8>)
 80010bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010be:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010ce:	220f      	movs	r2, #15
 80010d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010e0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010e8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80010ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f4:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <MX_SPI2_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001108:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800110c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_SPI2_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001128:	2203      	movs	r2, #3
 800112a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <MX_SPI2_Init+0xa4>)
 800112e:	2230      	movs	r2, #48	@ 0x30
 8001130:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <MX_SPI2_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <MX_SPI2_Init+0xa4>)
 8001146:	f01d ff69 	bl	801f01c <HAL_SPI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001150:	f000 fe06 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000180 	.word	0x20000180
 800115c:	40003800 	.word	0x40003800

08001160 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_SPI3_Init+0xa4>)
 8001166:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <MX_SPI3_Init+0xa8>)
 8001168:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_SPI3_Init+0xa4>)
 800116c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001170:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001172:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_SPI3_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <MX_SPI3_Init+0xa4>)
 800117a:	2203      	movs	r2, #3
 800117c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_SPI3_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_SPI3_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_SPI3_Init+0xa4>)
 800118c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001190:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_SPI3_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_SPI3_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a4:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_SPI3_Init+0xa4>)
 80011f0:	f01d ff14 	bl	801f01c <HAL_SPI_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80011fa:	f000 fdb1 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000208 	.word	0x20000208
 8001208:	40003c00 	.word	0x40003c00

0800120c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122a:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 800122c:	4a1f      	ldr	r2, [pc, #124]	@ (80012ac <MX_TIM1_Init+0xa0>)
 800122e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 800123e:	22ff      	movs	r2, #255	@ 0xff
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001254:	4814      	ldr	r0, [pc, #80]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 8001256:	f01e fada 	bl	801f80e <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 fd7e 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001268:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	4619      	mov	r1, r3
 8001270:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 8001272:	f01e fd11 	bl	801fc98 <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800127c:	f000 fd70 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001280:	2320      	movs	r3, #32
 8001282:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_TIM1_Init+0x9c>)
 8001292:	f01f fa13 	bl	80206bc <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800129c:	f000 fd60 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000380 	.word	0x20000380
 80012ac:	40010000 	.word	0x40010000

080012b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_TIM3_Init+0x94>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <MX_TIM3_Init+0x98>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_TIM3_Init+0x94>)
 80012d6:	22c7      	movs	r2, #199	@ 0xc7
 80012d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_TIM3_Init+0x94>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_TIM3_Init+0x94>)
 80012e2:	2209      	movs	r2, #9
 80012e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_TIM3_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_TIM3_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f2:	4814      	ldr	r0, [pc, #80]	@ (8001344 <MX_TIM3_Init+0x94>)
 80012f4:	f01e fa8b 	bl	801f80e <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 fd2f 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <MX_TIM3_Init+0x94>)
 8001310:	f01e fcc2 	bl	801fc98 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 fd21 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_TIM3_Init+0x94>)
 800132c:	f01f f9c6 	bl	80206bc <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001336:	f000 fd13 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000418 	.word	0x20000418
 8001348:	40000400 	.word	0x40000400

0800134c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	@ 0x38
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800137e:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <MX_TIM4_Init+0x104>)
 8001380:	4a34      	ldr	r2, [pc, #208]	@ (8001454 <MX_TIM4_Init+0x108>)
 8001382:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001384:	4b32      	ldr	r3, [pc, #200]	@ (8001450 <MX_TIM4_Init+0x104>)
 8001386:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800138a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <MX_TIM4_Init+0x104>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001392:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <MX_TIM4_Init+0x104>)
 8001394:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001398:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <MX_TIM4_Init+0x104>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <MX_TIM4_Init+0x104>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013a6:	482a      	ldr	r0, [pc, #168]	@ (8001450 <MX_TIM4_Init+0x104>)
 80013a8:	f01e fa31 	bl	801f80e <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f000 fcd5 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4823      	ldr	r0, [pc, #140]	@ (8001450 <MX_TIM4_Init+0x104>)
 80013c4:	f01e fc68 	bl	801fc98 <HAL_TIM_ConfigClockSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80013ce:	f000 fcc7 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013d2:	481f      	ldr	r0, [pc, #124]	@ (8001450 <MX_TIM4_Init+0x104>)
 80013d4:	f01e faea 	bl	801f9ac <HAL_TIM_PWM_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80013de:	f000 fcbf 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4817      	ldr	r0, [pc, #92]	@ (8001450 <MX_TIM4_Init+0x104>)
 80013f2:	f01f f963 	bl	80206bc <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80013fc:	f000 fcb0 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001400:	2360      	movs	r3, #96	@ 0x60
 8001402:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001404:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001408:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_TIM4_Init+0x104>)
 800141a:	f01e fb29 	bl	801fa70 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001424:	f000 fc9c 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001428:	2370      	movs	r3, #112	@ 0x70
 800142a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	2204      	movs	r2, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	@ (8001450 <MX_TIM4_Init+0x104>)
 8001434:	f01e fb1c 	bl	801fa70 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800143e:	f000 fc8f 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001442:	4803      	ldr	r0, [pc, #12]	@ (8001450 <MX_TIM4_Init+0x104>)
 8001444:	f001 f8b4 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	@ 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000464 	.word	0x20000464
 8001454:	40000800 	.word	0x40000800

08001458 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800145c:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 800145e:	4a23      	ldr	r2, [pc, #140]	@ (80014ec <MX_USART3_UART_Init+0x94>)
 8001460:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001462:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014a0:	4811      	ldr	r0, [pc, #68]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 80014a2:	f01f f999 	bl	80207d8 <HAL_UART_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014ac:	f000 fc58 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b0:	2100      	movs	r1, #0
 80014b2:	480d      	ldr	r0, [pc, #52]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 80014b4:	f020 f9a1 	bl	80217fa <HAL_UARTEx_SetTxFifoThreshold>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014be:	f000 fc4f 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4808      	ldr	r0, [pc, #32]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 80014c6:	f020 f9d6 	bl	8021876 <HAL_UARTEx_SetRxFifoThreshold>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f000 fc46 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_USART3_UART_Init+0x90>)
 80014d6:	f020 f957 	bl	8021788 <HAL_UARTEx_DisableFifoMode>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014e0:	f000 fc3e 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000690 	.word	0x20000690
 80014ec:	40004800 	.word	0x40004800

080014f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_DMA_Init+0x8c>)
 80014f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014fc:	4a1f      	ldr	r2, [pc, #124]	@ (800157c <MX_DMA_Init+0x8c>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_DMA_Init+0x8c>)
 8001508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2106      	movs	r1, #6
 8001518:	200b      	movs	r0, #11
 800151a:	f018 fc80 	bl	8019e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800151e:	200b      	movs	r0, #11
 8001520:	f018 fc97 	bl	8019e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2106      	movs	r1, #6
 8001528:	200c      	movs	r0, #12
 800152a:	f018 fc78 	bl	8019e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800152e:	200c      	movs	r0, #12
 8001530:	f018 fc8f 	bl	8019e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2107      	movs	r1, #7
 8001538:	200d      	movs	r0, #13
 800153a:	f018 fc70 	bl	8019e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800153e:	200d      	movs	r0, #13
 8001540:	f018 fc87 	bl	8019e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2107      	movs	r1, #7
 8001548:	200e      	movs	r0, #14
 800154a:	f018 fc68 	bl	8019e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800154e:	200e      	movs	r0, #14
 8001550:	f018 fc7f 	bl	8019e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2107      	movs	r1, #7
 8001558:	200f      	movs	r0, #15
 800155a:	f018 fc60 	bl	8019e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800155e:	200f      	movs	r0, #15
 8001560:	f018 fc77 	bl	8019e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2107      	movs	r1, #7
 8001568:	2010      	movs	r0, #16
 800156a:	f018 fc58 	bl	8019e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800156e:	2010      	movs	r0, #16
 8001570:	f018 fc6f 	bl	8019e52 <HAL_NVIC_EnableIRQ>

}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	58024400 	.word	0x58024400

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	@ 0x30
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	4b61      	ldr	r3, [pc, #388]	@ (800171c <MX_GPIO_Init+0x19c>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159c:	4a5f      	ldr	r2, [pc, #380]	@ (800171c <MX_GPIO_Init+0x19c>)
 800159e:	f043 0310 	orr.w	r3, r3, #16
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a6:	4b5d      	ldr	r3, [pc, #372]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b4:	4b59      	ldr	r3, [pc, #356]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ba:	4a58      	ldr	r2, [pc, #352]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c4:	4b55      	ldr	r3, [pc, #340]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	4b52      	ldr	r3, [pc, #328]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d8:	4a50      	ldr	r2, [pc, #320]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e2:	4b4e      	ldr	r3, [pc, #312]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b4a      	ldr	r3, [pc, #296]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f6:	4a49      	ldr	r2, [pc, #292]	@ (800171c <MX_GPIO_Init+0x19c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001600:	4b46      	ldr	r3, [pc, #280]	@ (800171c <MX_GPIO_Init+0x19c>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b43      	ldr	r3, [pc, #268]	@ (800171c <MX_GPIO_Init+0x19c>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a41      	ldr	r2, [pc, #260]	@ (800171c <MX_GPIO_Init+0x19c>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b3f      	ldr	r3, [pc, #252]	@ (800171c <MX_GPIO_Init+0x19c>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162c:	4b3b      	ldr	r3, [pc, #236]	@ (800171c <MX_GPIO_Init+0x19c>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	4a3a      	ldr	r2, [pc, #232]	@ (800171c <MX_GPIO_Init+0x19c>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163c:	4b37      	ldr	r3, [pc, #220]	@ (800171c <MX_GPIO_Init+0x19c>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	213c      	movs	r1, #60	@ 0x3c
 800164e:	4834      	ldr	r0, [pc, #208]	@ (8001720 <MX_GPIO_Init+0x1a0>)
 8001650:	f01a fd4a 	bl	801c0e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001654:	2200      	movs	r2, #0
 8001656:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 800165a:	4832      	ldr	r0, [pc, #200]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 800165c:	f01a fd44 	bl	801c0e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001666:	4830      	ldr	r0, [pc, #192]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 8001668:	f01a fd3e 	bl	801c0e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 800166c:	233c      	movs	r3, #60	@ 0x3c
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4827      	ldr	r0, [pc, #156]	@ (8001720 <MX_GPIO_Init+0x1a0>)
 8001684:	f01a fb80 	bl	801bd88 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001688:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 800168c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4820      	ldr	r0, [pc, #128]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80016a2:	f01a fb71 	bl	801bd88 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 80016a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	481a      	ldr	r0, [pc, #104]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80016bc:	f01a fb64 	bl	801bd88 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80016c0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4813      	ldr	r0, [pc, #76]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 80016da:	f01a fb55 	bl	801bd88 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80016de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 80016f4:	f01a fb48 	bl	801bd88 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 80016f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4807      	ldr	r0, [pc, #28]	@ (800172c <MX_GPIO_Init+0x1ac>)
 800170e:	f01a fb3b 	bl	801bd88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58024400 	.word	0x58024400
 8001720:	58021000 	.word	0x58021000
 8001724:	58020c00 	.word	0x58020c00
 8001728:	58020000 	.word	0x58020000
 800172c:	58020400 	.word	0x58020400

08001730 <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <vHeapInit+0x28>)
 8001738:	463c      	mov	r4, r7
 800173a:	461d      	mov	r5, r3
 800173c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001740:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001748:	463b      	mov	r3, r7
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fe02 	bl	8006354 <vPortDefineHeapRegions>
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	08023d58 	.word	0x08023d58

0800175c <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
	return 0U;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 800177a:	f004 fb51 	bl	8005e20 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800177e:	e000      	b.n	8001782 <vAssertCalled+0x16>
		{
			__NOP();
 8001780:	bf00      	nop
		while( ul == 0 )
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0fb      	beq.n	8001780 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001788:	f004 fb76 	bl	8005e78 <vPortExitCritical>
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001798:	f240 41af 	movw	r1, #1199	@ 0x4af
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <vApplicationMallocFailedHook+0x14>)
 800179e:	f7ff ffe5 	bl	800176c <vAssertCalled>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	08023d78 	.word	0x08023d78

080017ac <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	817b      	strh	r3, [r7, #10]
 80017bc:	4613      	mov	r3, r2
 80017be:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f89b 	bl	8001900 <xApplicationGetRandomNumber>

	return ulReturn;
 80017ca:	697b      	ldr	r3, [r7, #20]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d147      	bne.n	8001874 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <vApplicationIPNetworkEventHook+0xa8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80017ec:	4b23      	ldr	r3, [pc, #140]	@ (800187c <vApplicationIPNetworkEventHook+0xa8>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80017f2:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <vApplicationIPNetworkEventHook+0xac>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	f107 021c 	add.w	r2, r7, #28
 8001800:	f107 0120 	add.w	r1, r7, #32
 8001804:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001808:	f007 fd52 	bl	80092b0 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	f107 0208 	add.w	r2, r7, #8
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f00d fb4f 	bl	800eeb8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4619      	mov	r1, r3
 8001820:	4818      	ldr	r0, [pc, #96]	@ (8001884 <vApplicationIPNetworkEventHook+0xb0>)
 8001822:	f020 f9e1 	bl	8021be8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f107 0208 	add.w	r2, r7, #8
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f00d fb42 	bl	800eeb8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4619      	mov	r1, r3
 800183a:	4813      	ldr	r0, [pc, #76]	@ (8001888 <vApplicationIPNetworkEventHook+0xb4>)
 800183c:	f020 f9d4 	bl	8021be8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f107 0208 	add.w	r2, r7, #8
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f00d fb35 	bl	800eeb8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4619      	mov	r1, r3
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <vApplicationIPNetworkEventHook+0xb8>)
 8001856:	f020 f9c7 	bl	8021be8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f107 0208 	add.w	r2, r7, #8
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f00d fb28 	bl	800eeb8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4619      	mov	r1, r3
 800186e:	4808      	ldr	r0, [pc, #32]	@ (8001890 <vApplicationIPNetworkEventHook+0xbc>)
 8001870:	f020 f9ba 	bl	8021be8 <lUDPLoggingPrintf>
	}
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	@ 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000bec 	.word	0x20000bec
 8001880:	20000bf0 	.word	0x20000bf0
 8001884:	08023d8c 	.word	0x08023d8c
 8001888:	08023d9c 	.word	0x08023d9c
 800188c:	08023db0 	.word	0x08023db0
 8001890:	08023dc8 	.word	0x08023dc8

08001894 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 80018a0:	f000 f810 	bl	80018c4 <pcApplicationHostnameHook>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f021 fb79 	bl	8022fa0 <strcasecmp>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 80018b4:	2301      	movs	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 80018c8:	4b02      	ldr	r3, [pc, #8]	@ (80018d4 <pcApplicationHostnameHook+0x10>)
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	08023de0 	.word	0x08023de0

080018d8 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	4613      	mov	r3, r2
 80018e6:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	4619      	mov	r1, r3
 80018ec:	4803      	ldr	r0, [pc, #12]	@ (80018fc <vApplicationPingReplyHook+0x24>)
 80018ee:	f020 f97b 	bl	8021be8 <lUDPLoggingPrintf>
	}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	08023de8 	.word	0x08023de8

08001900 <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 8001908:	f021 f9dc 	bl	8022cc4 <rand>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 800192c:	4a01      	ldr	r2, [pc, #4]	@ (8001934 <prvGetRegistersFromStack+0x14>)
 800192e:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <prvGetRegistersFromStack+0x10>
 8001934:	20000c00 	.word	0x20000c00

08001938 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
	__asm volatile
 800193c:	f01e 0f04 	tst.w	lr, #4
 8001940:	bf0c      	ite	eq
 8001942:	f3ef 8008 	mrseq	r0, MSP
 8001946:	f3ef 8009 	mrsne	r0, PSP
 800194a:	6981      	ldr	r1, [r0, #24]
 800194c:	f7ff ffe8 	bl	8001920 <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001964:	200a      	movs	r0, #10
 8001966:	f002 fb23 	bl	8003fb0 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <prvServerWorkTask+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f8      	beq.n	8001964 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001972:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <prvServerWorkTask+0x24>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001978:	f020 f952 	bl	8021c20 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 800197c:	e7f2      	b.n	8001964 <prvServerWorkTask+0x8>
 800197e:	bf00      	nop
 8001980:	20000bf0 	.word	0x20000bf0

08001984 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b098      	sub	sp, #96	@ 0x60
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 800198c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001996:	2218      	movs	r2, #24
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f020 fc4d 	bl	802223a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 80019a0:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 80019ba:	2303      	movs	r3, #3
 80019bc:	061a      	lsls	r2, r3, #24
 80019be:	2301      	movs	r3, #1
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	431a      	orrs	r2, r3
 80019c4:	23a8      	movs	r3, #168	@ 0xa8
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	4313      	orrs	r3, r2
 80019ca:	22c0      	movs	r2, #192	@ 0xc0
 80019cc:	4313      	orrs	r3, r2
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80019d6:	2206      	movs	r2, #6
 80019d8:	2101      	movs	r1, #1
 80019da:	2002      	movs	r0, #2
 80019dc:	f00c f960 	bl	800dca0 <FreeRTOS_socket>
 80019e0:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2210      	movs	r2, #16
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f020 fc25 	bl	802223a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 80019f0:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80019f4:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 80019f6:	230c      	movs	r3, #12
 80019f8:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 80019fa:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80019fe:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001a00:	230c      	movs	r3, #12
 8001a02:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001a04:	2304      	movs	r3, #4
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4b48      	ldr	r3, [pc, #288]	@ (8001b2c <vADCTCPTask+0x1a8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a10:	f00d f900 	bl	800ec14 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001a14:	2304      	movs	r3, #4
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4b44      	ldr	r3, [pc, #272]	@ (8001b2c <vADCTCPTask+0x1a8>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a20:	f00d f8f8 	bl	800ec14 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2210      	movs	r2, #16
 8001a2a:	9200      	str	r2, [sp, #0]
 8001a2c:	220d      	movs	r2, #13
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a32:	f00d f8ef 	bl	800ec14 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d104      	bne.n	8001a48 <vADCTCPTask+0xc4>
 8001a3e:	f240 51d7 	movw	r1, #1495	@ 0x5d7
 8001a42:	483b      	ldr	r0, [pc, #236]	@ (8001b30 <vADCTCPTask+0x1ac>)
 8001a44:	f7ff fe92 	bl	800176c <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	9200      	str	r2, [sp, #0]
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295
 8001a56:	2100      	movs	r1, #0
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f003 fc33 	bl	80052c4 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001a68:	4b32      	ldr	r3, [pc, #200]	@ (8001b34 <vADCTCPTask+0x1b0>)
 8001a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a6c:	e001      	b.n	8001a72 <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001a6e:	4b32      	ldr	r3, [pc, #200]	@ (8001b38 <vADCTCPTask+0x1b4>)
 8001a70:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7e:	2218      	movs	r2, #24
 8001a80:	4619      	mov	r1, r3
 8001a82:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a84:	f00d fc64 	bl	800f350 <FreeRTOS_connect>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d139      	bne.n	8001b02 <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001a8e:	e030      	b.n	8001af2 <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001aa0:	f00d fe3f 	bl	800f722 <FreeRTOS_get_tx_head>
 8001aa4:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d027      	beq.n	8001afc <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d902      	bls.n	8001abe <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001abc:	e003      	b.n	8001ac6 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001aca:	4413      	add	r3, r2
 8001acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001ad2:	f020 faa5 	bl	8022020 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001ad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ade:	f00d ff2b 	bl	800f938 <FreeRTOS_send>
 8001ae2:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0a      	blt.n	8001b00 <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001aea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aee:	4413      	add	r3, r2
 8001af0:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d8ca      	bhi.n	8001a90 <vADCTCPTask+0x10c>
 8001afa:	e002      	b.n	8001b02 <vADCTCPTask+0x17e>
                        break;
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001b00:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001b02:	2102      	movs	r1, #2
 8001b04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b06:	f00d ffc6 	bl	800fa96 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001b0a:	e002      	b.n	8001b12 <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f002 fa4f 	bl	8003fb0 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b18:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b1a:	f00d fd6d 	bl	800f5f8 <FreeRTOS_recv>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	daf3      	bge.n	8001b0c <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001b24:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b26:	f00c fc7f 	bl	800e428 <FreeRTOS_closesocket>
    for(;;) {
 8001b2a:	e754      	b.n	80019d6 <vADCTCPTask+0x52>
 8001b2c:	08027244 	.word	0x08027244
 8001b30:	08023d78 	.word	0x08023d78
 8001b34:	30010004 	.word	0x30010004
 8001b38:	30000004 	.word	0x30000004

08001b3c <vAuxADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vAuxADCTCPTask(void *pvParameters) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b098      	sub	sp, #96	@ 0x60
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usAuxADCDataMock0);
 8001b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4e:	2218      	movs	r2, #24
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f020 fb71 	bl	802223a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001b58:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001b72:	2303      	movs	r3, #3
 8001b74:	061a      	lsls	r2, r3, #24
 8001b76:	2301      	movs	r3, #1
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	23a8      	movs	r3, #168	@ 0xa8
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	4313      	orrs	r3, r2
 8001b82:	22c0      	movs	r2, #192	@ 0xc0
 8001b84:	4313      	orrs	r3, r2
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001b8e:	2206      	movs	r2, #6
 8001b90:	2101      	movs	r1, #1
 8001b92:	2002      	movs	r0, #2
 8001b94:	f00c f884 	bl	800dca0 <FreeRTOS_socket>
 8001b98:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f020 fb49 	bl	802223a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001ba8:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001bac:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001bae:	230c      	movs	r3, #12
 8001bb0:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001bb2:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001bb6:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001bb8:	230c      	movs	r3, #12
 8001bba:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4b48      	ldr	r3, [pc, #288]	@ (8001ce4 <vAuxADCTCPTask+0x1a8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bc8:	f00d f824 	bl	800ec14 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001bcc:	2304      	movs	r3, #4
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	4b44      	ldr	r3, [pc, #272]	@ (8001ce4 <vAuxADCTCPTask+0x1a8>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bd8:	f00d f81c 	bl	800ec14 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	2210      	movs	r2, #16
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	220d      	movs	r2, #13
 8001be6:	2100      	movs	r1, #0
 8001be8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bea:	f00d f813 	bl	800ec14 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d104      	bne.n	8001c00 <vAuxADCTCPTask+0xc4>
 8001bf6:	f240 6161 	movw	r1, #1633	@ 0x661
 8001bfa:	483b      	ldr	r0, [pc, #236]	@ (8001ce8 <vAuxADCTCPTask+0x1ac>)
 8001bfc:	f7ff fdb6 	bl	800176c <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001c00:	f107 0320 	add.w	r3, r7, #32
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	9200      	str	r2, [sp, #0]
 8001c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2000      	movs	r0, #0
 8001c12:	f003 fb57 	bl	80052c4 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <vAuxADCTCPTask+0xea>
	    pcBufferToTransmit = usAuxADCDataMock1;
 8001c20:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <vAuxADCTCPTask+0x1b0>)
 8001c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c24:	e001      	b.n	8001c2a <vAuxADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usAuxADCDataMock0;
 8001c26:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <vAuxADCTCPTask+0x1b4>)
 8001c28:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c36:	2218      	movs	r2, #24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c3c:	f00d fb88 	bl	800f350 <FreeRTOS_connect>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d139      	bne.n	8001cba <vAuxADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001c46:	e030      	b.n	8001caa <vAuxADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c58:	f00d fd63 	bl	800f722 <FreeRTOS_get_tx_head>
 8001c5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d027      	beq.n	8001cb4 <vAuxADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d902      	bls.n	8001c76 <vAuxADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c74:	e003      	b.n	8001c7e <vAuxADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c82:	4413      	add	r3, r2
 8001c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c86:	4619      	mov	r1, r3
 8001c88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c8a:	f020 f9c9 	bl	8022020 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001c8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c90:	2300      	movs	r3, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c96:	f00d fe4f 	bl	800f938 <FreeRTOS_send>
 8001c9a:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0a      	blt.n	8001cb8 <vAuxADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001ca2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca6:	4413      	add	r3, r2
 8001ca8:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d8ca      	bhi.n	8001c48 <vAuxADCTCPTask+0x10c>
 8001cb2:	e002      	b.n	8001cba <vAuxADCTCPTask+0x17e>
                        break;
 8001cb4:	bf00      	nop
 8001cb6:	e000      	b.n	8001cba <vAuxADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001cb8:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001cba:	2102      	movs	r1, #2
 8001cbc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cbe:	f00d feea 	bl	800fa96 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001cc2:	e002      	b.n	8001cca <vAuxADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f002 f973 	bl	8003fb0 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001cca:	2300      	movs	r3, #0
 8001ccc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001cd0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cd2:	f00d fc91 	bl	800f5f8 <FreeRTOS_recv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	daf3      	bge.n	8001cc4 <vAuxADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001cdc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cde:	f00c fba3 	bl	800e428 <FreeRTOS_closesocket>
    for(;;) {
 8001ce2:	e754      	b.n	8001b8e <vAuxADCTCPTask+0x52>
 8001ce4:	08027248 	.word	0x08027248
 8001ce8:	08023d78 	.word	0x08023d78
 8001cec:	30028004 	.word	0x30028004
 8001cf0:	30020004 	.word	0x30020004

08001cf4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d06:	f018 f8bf 	bl	8019e88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001d12:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001d16:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d24:	2303      	movs	r3, #3
 8001d26:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f018 f8dc 	bl	8019ef8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001d44:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d48:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f018 f8d3 	bl	8019ef8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d52:	2004      	movs	r0, #4
 8001d54:	f018 f8b0 	bl	8019eb8 <HAL_MPU_Enable>

}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <Error_Handler+0x8>

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_MspInit+0x30>)
 8001d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d78:	4a08      	ldr	r2, [pc, #32]	@ (8001d9c <HAL_MspInit+0x30>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_MspInit+0x30>)
 8001d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	58024400 	.word	0x58024400

08001da0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	@ 0x38
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a61      	ldr	r2, [pc, #388]	@ (8001f44 <HAL_ETH_MspInit+0x1a4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 80bb 	bne.w	8001f3a <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001dc4:	4b60      	ldr	r3, [pc, #384]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dca:	4a5f      	ldr	r2, [pc, #380]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001dd4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001de2:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001de8:	4a57      	ldr	r2, [pc, #348]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001df2:	4b55      	ldr	r3, [pc, #340]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001e00:	4b51      	ldr	r3, [pc, #324]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e06:	4a50      	ldr	r2, [pc, #320]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e10:	4b4d      	ldr	r3, [pc, #308]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e24:	4a48      	ldr	r2, [pc, #288]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b42      	ldr	r3, [pc, #264]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	4a41      	ldr	r2, [pc, #260]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	4a39      	ldr	r2, [pc, #228]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <HAL_ETH_MspInit+0x1a8>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e88:	230b      	movs	r3, #11
 8001e8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e90:	4619      	mov	r1, r3
 8001e92:	482e      	ldr	r0, [pc, #184]	@ (8001f4c <HAL_ETH_MspInit+0x1ac>)
 8001e94:	f019 ff78 	bl	801bd88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001e98:	2306      	movs	r3, #6
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ea8:	230b      	movs	r3, #11
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4827      	ldr	r0, [pc, #156]	@ (8001f50 <HAL_ETH_MspInit+0x1b0>)
 8001eb4:	f019 ff68 	bl	801bd88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ec8:	230b      	movs	r3, #11
 8001eca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481f      	ldr	r0, [pc, #124]	@ (8001f50 <HAL_ETH_MspInit+0x1b0>)
 8001ed4:	f019 ff58 	bl	801bd88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ed8:	2330      	movs	r3, #48	@ 0x30
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ee8:	230b      	movs	r3, #11
 8001eea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4816      	ldr	r0, [pc, #88]	@ (8001f4c <HAL_ETH_MspInit+0x1ac>)
 8001ef4:	f019 ff48 	bl	801bd88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001ef8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f0a:	230b      	movs	r3, #11
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	480f      	ldr	r0, [pc, #60]	@ (8001f54 <HAL_ETH_MspInit+0x1b4>)
 8001f16:	f019 ff37 	bl	801bd88 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	203d      	movs	r0, #61	@ 0x3d
 8001f20:	f017 ff7d 	bl	8019e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001f24:	203d      	movs	r0, #61	@ 0x3d
 8001f26:	f017 ff94 	bl	8019e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2105      	movs	r1, #5
 8001f2e:	203e      	movs	r0, #62	@ 0x3e
 8001f30:	f017 ff75 	bl	8019e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001f34:	203e      	movs	r0, #62	@ 0x3e
 8001f36:	f017 ff8c 	bl	8019e52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3738      	adds	r7, #56	@ 0x38
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40028000 	.word	0x40028000
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	58020800 	.word	0x58020800
 8001f50:	58020000 	.word	0x58020000
 8001f54:	58020400 	.word	0x58020400

08001f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	22c0      	movs	r2, #192	@ 0xc0
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f020 f95e 	bl	802223a <memset>
  if(hi2c->Instance==I2C4)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a27      	ldr	r2, [pc, #156]	@ (8002020 <HAL_I2C_MspInit+0xc8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d146      	bne.n	8002016 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001f88:	f04f 0210 	mov.w	r2, #16
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f01b fa10 	bl	801d3c4 <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001faa:	f7ff fed9 	bl	8001d60 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_I2C_MspInit+0xcc>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_I2C_MspInit+0xcc>)
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fbe:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_I2C_MspInit+0xcc>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fcc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	@ (8002028 <HAL_I2C_MspInit+0xd0>)
 8001ff4:	f019 fec8 	bl	801bd88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_I2C_MspInit+0xcc>)
 8001ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ffe:	4a09      	ldr	r2, [pc, #36]	@ (8002024 <HAL_I2C_MspInit+0xcc>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002004:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_I2C_MspInit+0xcc>)
 800200a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800200e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8002016:	bf00      	nop
 8002018:	37e8      	adds	r7, #232	@ 0xe8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	58001c00 	.word	0x58001c00
 8002024:	58024400 	.word	0x58024400
 8002028:	58020c00 	.word	0x58020c00

0800202c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b090      	sub	sp, #64	@ 0x40
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a88      	ldr	r2, [pc, #544]	@ (800226c <HAL_SPI_MspInit+0x240>)
 800204a:	4293      	cmp	r3, r2
 800204c:	f040 8083 	bne.w	8002156 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002050:	4b87      	ldr	r3, [pc, #540]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002056:	4a86      	ldr	r2, [pc, #536]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800205c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002060:	4b83      	ldr	r3, [pc, #524]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b80      	ldr	r3, [pc, #512]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002074:	4a7e      	ldr	r2, [pc, #504]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207e:	4b7c      	ldr	r3, [pc, #496]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b78      	ldr	r3, [pc, #480]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002092:	4a77      	ldr	r2, [pc, #476]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800209c:	4b74      	ldr	r3, [pc, #464]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80020aa:	2370      	movs	r3, #112	@ 0x70
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ba:	2305      	movs	r3, #5
 80020bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c2:	4619      	mov	r1, r3
 80020c4:	486b      	ldr	r0, [pc, #428]	@ (8002274 <HAL_SPI_MspInit+0x248>)
 80020c6:	f019 fe5f 	bl	801bd88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ca:	2320      	movs	r3, #32
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020da:	2305      	movs	r3, #5
 80020dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4864      	ldr	r0, [pc, #400]	@ (8002278 <HAL_SPI_MspInit+0x24c>)
 80020e6:	f019 fe4f 	bl	801bd88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80020ea:	4b64      	ldr	r3, [pc, #400]	@ (800227c <HAL_SPI_MspInit+0x250>)
 80020ec:	4a64      	ldr	r2, [pc, #400]	@ (8002280 <HAL_SPI_MspInit+0x254>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80020f0:	4b62      	ldr	r3, [pc, #392]	@ (800227c <HAL_SPI_MspInit+0x250>)
 80020f2:	2225      	movs	r2, #37	@ 0x25
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f6:	4b61      	ldr	r3, [pc, #388]	@ (800227c <HAL_SPI_MspInit+0x250>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fc:	4b5f      	ldr	r3, [pc, #380]	@ (800227c <HAL_SPI_MspInit+0x250>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002102:	4b5e      	ldr	r3, [pc, #376]	@ (800227c <HAL_SPI_MspInit+0x250>)
 8002104:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002108:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800210a:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <HAL_SPI_MspInit+0x250>)
 800210c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002110:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002112:	4b5a      	ldr	r3, [pc, #360]	@ (800227c <HAL_SPI_MspInit+0x250>)
 8002114:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002118:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800211a:	4b58      	ldr	r3, [pc, #352]	@ (800227c <HAL_SPI_MspInit+0x250>)
 800211c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002120:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002122:	4b56      	ldr	r3, [pc, #344]	@ (800227c <HAL_SPI_MspInit+0x250>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002128:	4b54      	ldr	r3, [pc, #336]	@ (800227c <HAL_SPI_MspInit+0x250>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800212e:	4853      	ldr	r0, [pc, #332]	@ (800227c <HAL_SPI_MspInit+0x250>)
 8002130:	f017 ff22 	bl	8019f78 <HAL_DMA_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800213a:	f7ff fe11 	bl	8001d60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4e      	ldr	r2, [pc, #312]	@ (800227c <HAL_SPI_MspInit+0x250>)
 8002142:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002144:	4a4d      	ldr	r2, [pc, #308]	@ (800227c <HAL_SPI_MspInit+0x250>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2023      	movs	r0, #35	@ 0x23
 8002150:	f017 fe65 	bl	8019e1e <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002154:	e0f0      	b.n	8002338 <HAL_SPI_MspInit+0x30c>
  else if(hspi->Instance==SPI2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a4a      	ldr	r2, [pc, #296]	@ (8002284 <HAL_SPI_MspInit+0x258>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f040 8097 	bne.w	8002290 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002162:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002168:	4a41      	ldr	r2, [pc, #260]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 800216a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800216e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002172:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	4b3b      	ldr	r3, [pc, #236]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002186:	4a3a      	ldr	r2, [pc, #232]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002190:	4b37      	ldr	r3, [pc, #220]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b34      	ldr	r3, [pc, #208]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a4:	4a32      	ldr	r2, [pc, #200]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ae:	4b30      	ldr	r3, [pc, #192]	@ (8002270 <HAL_SPI_MspInit+0x244>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80021bc:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ce:	2305      	movs	r3, #5
 80021d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d6:	4619      	mov	r1, r3
 80021d8:	4827      	ldr	r0, [pc, #156]	@ (8002278 <HAL_SPI_MspInit+0x24c>)
 80021da:	f019 fdd5 	bl	801bd88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f0:	2305      	movs	r3, #5
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f8:	4619      	mov	r1, r3
 80021fa:	481e      	ldr	r0, [pc, #120]	@ (8002274 <HAL_SPI_MspInit+0x248>)
 80021fc:	f019 fdc4 	bl	801bd88 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002202:	4a22      	ldr	r2, [pc, #136]	@ (800228c <HAL_SPI_MspInit+0x260>)
 8002204:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002208:	2227      	movs	r2, #39	@ 0x27
 800220a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800220c:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002212:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 800221a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002226:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 800222a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002230:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002232:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002236:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 800223a:	2200      	movs	r2, #0
 800223c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002240:	2200      	movs	r2, #0
 8002242:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002244:	4810      	ldr	r0, [pc, #64]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002246:	f017 fe97 	bl	8019f78 <HAL_DMA_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8002250:	f7ff fd86 	bl	8001d60 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 8002258:	67da      	str	r2, [r3, #124]	@ 0x7c
 800225a:	4a0b      	ldr	r2, [pc, #44]	@ (8002288 <HAL_SPI_MspInit+0x25c>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	2024      	movs	r0, #36	@ 0x24
 8002266:	f017 fdda 	bl	8019e1e <HAL_NVIC_SetPriority>
}
 800226a:	e065      	b.n	8002338 <HAL_SPI_MspInit+0x30c>
 800226c:	40013000 	.word	0x40013000
 8002270:	58024400 	.word	0x58024400
 8002274:	58020000 	.word	0x58020000
 8002278:	58020400 	.word	0x58020400
 800227c:	20000290 	.word	0x20000290
 8002280:	40020010 	.word	0x40020010
 8002284:	40003800 	.word	0x40003800
 8002288:	20000308 	.word	0x20000308
 800228c:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2a      	ldr	r2, [pc, #168]	@ (8002340 <HAL_SPI_MspInit+0x314>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d14e      	bne.n	8002338 <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800229a:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 800229c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022a0:	4a28      	ldr	r2, [pc, #160]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022aa:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022be:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022dc:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_SPI_MspInit+0x318>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002306:	2306      	movs	r3, #6
 8002308:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230e:	4619      	mov	r1, r3
 8002310:	480d      	ldr	r0, [pc, #52]	@ (8002348 <HAL_SPI_MspInit+0x31c>)
 8002312:	f019 fd39 	bl	801bd88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002316:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002328:	2306      	movs	r3, #6
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <HAL_SPI_MspInit+0x320>)
 8002334:	f019 fd28 	bl	801bd88 <HAL_GPIO_Init>
}
 8002338:	bf00      	nop
 800233a:	3740      	adds	r7, #64	@ 0x40
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40003c00 	.word	0x40003c00
 8002344:	58024400 	.word	0x58024400
 8002348:	58020000 	.word	0x58020000
 800234c:	58020800 	.word	0x58020800

08002350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a88      	ldr	r2, [pc, #544]	@ (8002580 <HAL_TIM_Base_MspInit+0x230>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d13e      	bne.n	80023e0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002362:	4b88      	ldr	r3, [pc, #544]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 8002364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002368:	4a86      	ldr	r2, [pc, #536]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002372:	4b84      	ldr	r3, [pc, #528]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 8002374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8002380:	4b81      	ldr	r3, [pc, #516]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 8002382:	4a82      	ldr	r2, [pc, #520]	@ (800258c <HAL_TIM_Base_MspInit+0x23c>)
 8002384:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8002386:	4b80      	ldr	r3, [pc, #512]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 8002388:	220f      	movs	r2, #15
 800238a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800238c:	4b7e      	ldr	r3, [pc, #504]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 800238e:	2240      	movs	r2, #64	@ 0x40
 8002390:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002392:	4b7d      	ldr	r3, [pc, #500]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 8002394:	2200      	movs	r2, #0
 8002396:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8002398:	4b7b      	ldr	r3, [pc, #492]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800239e:	4b7a      	ldr	r3, [pc, #488]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023a4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023a6:	4b78      	ldr	r3, [pc, #480]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ac:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80023ae:	4b76      	ldr	r3, [pc, #472]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023b4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80023b6:	4b74      	ldr	r3, [pc, #464]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023bc:	4b72      	ldr	r3, [pc, #456]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80023c2:	4871      	ldr	r0, [pc, #452]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023c4:	f017 fdd8 	bl	8019f78 <HAL_DMA_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80023ce:	f7ff fcc7 	bl	8001d60 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a6c      	ldr	r2, [pc, #432]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023d6:	621a      	str	r2, [r3, #32]
 80023d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002588 <HAL_TIM_Base_MspInit+0x238>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023de:	e0cb      	b.n	8002578 <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e8:	d10f      	bne.n	800240a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ea:	4b66      	ldr	r3, [pc, #408]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 80023ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f0:	4a64      	ldr	r2, [pc, #400]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023fa:	4b62      	ldr	r3, [pc, #392]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 80023fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
}
 8002408:	e0b6      	b.n	8002578 <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a60      	ldr	r2, [pc, #384]	@ (8002590 <HAL_TIM_Base_MspInit+0x240>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d13e      	bne.n	8002492 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002414:	4b5b      	ldr	r3, [pc, #364]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 8002416:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241a:	4a5a      	ldr	r2, [pc, #360]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002424:	4b57      	ldr	r3, [pc, #348]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 8002426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002432:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002434:	4a58      	ldr	r2, [pc, #352]	@ (8002598 <HAL_TIM_Base_MspInit+0x248>)
 8002436:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002438:	4b56      	ldr	r3, [pc, #344]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 800243a:	221b      	movs	r2, #27
 800243c:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800243e:	4b55      	ldr	r3, [pc, #340]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002440:	2240      	movs	r2, #64	@ 0x40
 8002442:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002444:	4b53      	ldr	r3, [pc, #332]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 800244a:	4b52      	ldr	r3, [pc, #328]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002450:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002452:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002456:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002458:	4b4e      	ldr	r3, [pc, #312]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 800245a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800245e:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002460:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002466:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002468:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002470:	2200      	movs	r2, #0
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002474:	4847      	ldr	r0, [pc, #284]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002476:	f017 fd7f 	bl	8019f78 <HAL_DMA_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002480:	f7ff fc6e 	bl	8001d60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a43      	ldr	r2, [pc, #268]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 8002488:	621a      	str	r2, [r3, #32]
 800248a:	4a42      	ldr	r2, [pc, #264]	@ (8002594 <HAL_TIM_Base_MspInit+0x244>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002490:	e072      	b.n	8002578 <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM4)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a41      	ldr	r2, [pc, #260]	@ (800259c <HAL_TIM_Base_MspInit+0x24c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d16d      	bne.n	8002578 <HAL_TIM_Base_MspInit+0x228>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800249c:	4b39      	ldr	r3, [pc, #228]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 800249e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024a2:	4a38      	ldr	r2, [pc, #224]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024ac:	4b35      	ldr	r3, [pc, #212]	@ (8002584 <HAL_TIM_Base_MspInit+0x234>)
 80024ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 80024ba:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024bc:	4a39      	ldr	r2, [pc, #228]	@ (80025a4 <HAL_TIM_Base_MspInit+0x254>)
 80024be:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80024c0:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024c2:	221d      	movs	r2, #29
 80024c4:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c6:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024c8:	2240      	movs	r2, #64	@ 0x40
 80024ca:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024cc:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 80024d2:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024d8:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024de:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024e0:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ee:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024f6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80024fe:	4828      	ldr	r0, [pc, #160]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 8002500:	f017 fd3a 	bl	8019f78 <HAL_DMA_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_TIM_Base_MspInit+0x1be>
      Error_Handler();
 800250a:	f7ff fc29 	bl	8001d60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a23      	ldr	r2, [pc, #140]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
 8002514:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <HAL_TIM_Base_MspInit+0x250>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 800251a:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 800251c:	4a23      	ldr	r2, [pc, #140]	@ (80025ac <HAL_TIM_Base_MspInit+0x25c>)
 800251e:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002520:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002522:	2220      	movs	r2, #32
 8002524:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002528:	2240      	movs	r2, #64	@ 0x40
 800252a:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800252c:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002532:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 800253a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800253e:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002542:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002546:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 800254a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800254e:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002550:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002552:	2200      	movs	r2, #0
 8002554:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 800255c:	4812      	ldr	r0, [pc, #72]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 800255e:	f017 fd0b 	bl	8019f78 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_TIM_Base_MspInit+0x21c>
      Error_Handler();
 8002568:	f7ff fbfa 	bl	8001d60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002570:	621a      	str	r2, [r3, #32]
 8002572:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_TIM_Base_MspInit+0x258>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002578:	bf00      	nop
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40010000 	.word	0x40010000
 8002584:	58024400 	.word	0x58024400
 8002588:	200004b0 	.word	0x200004b0
 800258c:	40020040 	.word	0x40020040
 8002590:	40000400 	.word	0x40000400
 8002594:	20000528 	.word	0x20000528
 8002598:	40020058 	.word	0x40020058
 800259c:	40000800 	.word	0x40000800
 80025a0:	200005a0 	.word	0x200005a0
 80025a4:	40020070 	.word	0x40020070
 80025a8:	20000618 	.word	0x20000618
 80025ac:	40020088 	.word	0x40020088

080025b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <HAL_TIM_MspPostInit+0x68>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d11e      	bne.n	8002610 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d2:	4b12      	ldr	r3, [pc, #72]	@ (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d8:	4a10      	ldr	r2, [pc, #64]	@ (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f0:	23c0      	movs	r3, #192	@ 0xc0
 80025f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002600:	2302      	movs	r3, #2
 8002602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	4805      	ldr	r0, [pc, #20]	@ (8002620 <HAL_TIM_MspPostInit+0x70>)
 800260c:	f019 fbbc 	bl	801bd88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40000800 	.word	0x40000800
 800261c:	58024400 	.word	0x58024400
 8002620:	58020400 	.word	0x58020400

08002624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0ba      	sub	sp, #232	@ 0xe8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	22c0      	movs	r2, #192	@ 0xc0
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f01f fdf8 	bl	802223a <memset>
  if(huart->Instance==USART3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a27      	ldr	r2, [pc, #156]	@ (80026ec <HAL_UART_MspInit+0xc8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d146      	bne.n	80026e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002654:	f04f 0202 	mov.w	r2, #2
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f01a feaa 	bl	801d3c4 <HAL_RCCEx_PeriphCLKConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002676:	f7ff fb73 	bl	8001d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800267a:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 800267c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002680:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 8002682:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002686:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800268a:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 800268c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002698:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269e:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 80026aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026d0:	2307      	movs	r3, #7
 80026d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_UART_MspInit+0xd0>)
 80026de:	f019 fb53 	bl	801bd88 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80026e2:	bf00      	nop
 80026e4:	37e8      	adds	r7, #232	@ 0xe8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40004800 	.word	0x40004800
 80026f0:	58024400 	.word	0x58024400
 80026f4:	58020c00 	.word	0x58020c00

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <NMI_Handler+0x4>

08002700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <MemManage_Handler+0x4>

08002708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <UsageFault_Handler+0x4>

08002718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272a:	f017 fa39 	bl	8019ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800272e:	f002 fb15 	bl	8004d5c <xTaskGetSchedulerState>
 8002732:	4603      	mov	r3, r0
 8002734:	2b02      	cmp	r3, #2
 8002736:	d101      	bne.n	800273c <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002738:	f003 fbf6 	bl	8005f28 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 800274a:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <DMA1_Stream0_IRQHandler+0x70>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00c      	beq.n	8002770 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002756:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <DMA1_Stream0_IRQHandler+0x74>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e001      	b.n	8002770 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 800276c:	2301      	movs	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002770:	4811      	ldr	r0, [pc, #68]	@ (80027b8 <DMA1_Stream0_IRQHandler+0x78>)
 8002772:	f018 f9a3 	bl	801aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <DMA1_Stream0_IRQHandler+0x7c>)
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	2100      	movs	r1, #0
 800278c:	f002 ff3e 	bl	800560c <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <DMA1_Stream0_IRQHandler+0x66>
 8002796:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <DMA1_Stream0_IRQHandler+0x80>)
 8002798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020010 	.word	0x40020010
 80027b8:	20000290 	.word	0x20000290
 80027bc:	20000bf8 	.word	0x20000bf8
 80027c0:	e000ed04 	.word	0xe000ed04

080027c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 80027ce:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <DMA1_Stream1_IRQHandler+0x70>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 80027da:	4b17      	ldr	r3, [pc, #92]	@ (8002838 <DMA1_Stream1_IRQHandler+0x74>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	e001      	b.n	80027f4 <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80027f4:	4811      	ldr	r0, [pc, #68]	@ (800283c <DMA1_Stream1_IRQHandler+0x78>)
 80027f6:	f018 f961 	bl	801aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <DMA1_Stream1_IRQHandler+0x7c>)
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	2100      	movs	r1, #0
 8002810:	f002 fefc 	bl	800560c <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <DMA1_Stream1_IRQHandler+0x66>
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <DMA1_Stream1_IRQHandler+0x80>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40020000 	.word	0x40020000
 8002838:	40020028 	.word	0x40020028
 800283c:	20000308 	.word	0x20000308
 8002840:	20000bfc 	.word	0x20000bfc
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800284c:	4802      	ldr	r0, [pc, #8]	@ (8002858 <DMA1_Stream2_IRQHandler+0x10>)
 800284e:	f018 f935 	bl	801aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200004b0 	.word	0x200004b0

0800285c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002860:	4802      	ldr	r0, [pc, #8]	@ (800286c <DMA1_Stream3_IRQHandler+0x10>)
 8002862:	f018 f92b 	bl	801aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000528 	.word	0x20000528

08002870 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002874:	4802      	ldr	r0, [pc, #8]	@ (8002880 <DMA1_Stream4_IRQHandler+0x10>)
 8002876:	f018 f921 	bl	801aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200005a0 	.word	0x200005a0

08002884 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002888:	4802      	ldr	r0, [pc, #8]	@ (8002894 <DMA1_Stream5_IRQHandler+0x10>)
 800288a:	f018 f917 	bl	801aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000618 	.word	0x20000618

08002898 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <SPI1_IRQHandler+0x10>)
 800289e:	f01c fce1 	bl	801f264 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200000f8 	.word	0x200000f8

080028ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80028b0:	4802      	ldr	r0, [pc, #8]	@ (80028bc <SPI2_IRQHandler+0x10>)
 80028b2:	f01c fcd7 	bl	801f264 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000180 	.word	0x20000180

080028c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return 1;
 80028c4:	2301      	movs	r3, #1
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_kill>:

int _kill(int pid, int sig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028da:	f020 fbd5 	bl	8023088 <__errno>
 80028de:	4603      	mov	r3, r0
 80028e0:	2216      	movs	r2, #22
 80028e2:	601a      	str	r2, [r3, #0]
  return -1;
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_exit>:

void _exit (int status)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ffe7 	bl	80028d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002902:	bf00      	nop
 8002904:	e7fd      	b.n	8002902 <_exit+0x12>

08002906 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e00a      	b.n	800292e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002918:	f3af 8000 	nop.w
 800291c:	4601      	mov	r1, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	60ba      	str	r2, [r7, #8]
 8002924:	b2ca      	uxtb	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3301      	adds	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	dbf0      	blt.n	8002918 <_read+0x12>
  }

  return len;
 8002936:	687b      	ldr	r3, [r7, #4]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e009      	b.n	8002966 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	60ba      	str	r2, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3301      	adds	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	dbf1      	blt.n	8002952 <_write+0x12>
  }
  return len;
 800296e:	687b      	ldr	r3, [r7, #4]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_close>:

int _close(int file)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a0:	605a      	str	r2, [r3, #4]
  return 0;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_isatty>:

int _isatty(int file)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029b8:	2301      	movs	r3, #1
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e8:	4a14      	ldr	r2, [pc, #80]	@ (8002a3c <_sbrk+0x5c>)
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <_sbrk+0x60>)
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f4:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <_sbrk+0x64>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <_sbrk+0x64>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	@ (8002a48 <_sbrk+0x68>)
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a02:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d207      	bcs.n	8002a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a10:	f020 fb3a 	bl	8023088 <__errno>
 8002a14:	4603      	mov	r3, r0
 8002a16:	220c      	movs	r2, #12
 8002a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e009      	b.n	8002a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a20:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <_sbrk+0x64>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	4a05      	ldr	r2, [pc, #20]	@ (8002a44 <_sbrk+0x64>)
 8002a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	24080000 	.word	0x24080000
 8002a40:	00000400 	.word	0x00000400
 8002a44:	20000c04 	.word	0x20000c04
 8002a48:	200026c8 	.word	0x200026c8

08002a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a52:	4b3f      	ldr	r3, [pc, #252]	@ (8002b50 <SystemInit+0x104>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a58:	4a3d      	ldr	r2, [pc, #244]	@ (8002b50 <SystemInit+0x104>)
 8002a5a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a62:	4b3c      	ldr	r3, [pc, #240]	@ (8002b54 <SystemInit+0x108>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d807      	bhi.n	8002a7e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a6e:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <SystemInit+0x108>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 030f 	bic.w	r3, r3, #15
 8002a76:	4a37      	ldr	r2, [pc, #220]	@ (8002b54 <SystemInit+0x108>)
 8002a78:	f043 0307 	orr.w	r3, r3, #7
 8002a7c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a7e:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <SystemInit+0x10c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a35      	ldr	r2, [pc, #212]	@ (8002b58 <SystemInit+0x10c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a8a:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <SystemInit+0x10c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a90:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <SystemInit+0x10c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4930      	ldr	r1, [pc, #192]	@ (8002b58 <SystemInit+0x10c>)
 8002a96:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <SystemInit+0x110>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <SystemInit+0x108>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <SystemInit+0x108>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 030f 	bic.w	r3, r3, #15
 8002ab0:	4a28      	ldr	r2, [pc, #160]	@ (8002b54 <SystemInit+0x108>)
 8002ab2:	f043 0307 	orr.w	r3, r3, #7
 8002ab6:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ab8:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <SystemInit+0x10c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002abe:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <SystemInit+0x10c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <SystemInit+0x10c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002aca:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <SystemInit+0x10c>)
 8002acc:	4a24      	ldr	r2, [pc, #144]	@ (8002b60 <SystemInit+0x114>)
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <SystemInit+0x10c>)
 8002ad2:	4a24      	ldr	r2, [pc, #144]	@ (8002b64 <SystemInit+0x118>)
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <SystemInit+0x10c>)
 8002ad8:	4a23      	ldr	r2, [pc, #140]	@ (8002b68 <SystemInit+0x11c>)
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <SystemInit+0x10c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <SystemInit+0x10c>)
 8002ae4:	4a20      	ldr	r2, [pc, #128]	@ (8002b68 <SystemInit+0x11c>)
 8002ae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <SystemInit+0x10c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <SystemInit+0x10c>)
 8002af0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b68 <SystemInit+0x11c>)
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <SystemInit+0x10c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002afa:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <SystemInit+0x10c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a16      	ldr	r2, [pc, #88]	@ (8002b58 <SystemInit+0x10c>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <SystemInit+0x10c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b0c:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <SystemInit+0x120>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <SystemInit+0x124>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b18:	d202      	bcs.n	8002b20 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b1a:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <SystemInit+0x128>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8002b20:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <SystemInit+0x10c>)
 8002b22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <SystemInit+0x10c>)
 8002b28:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8002b2c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <SystemInit+0x10c>)
 8002b32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b36:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8002b38:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <SystemInit+0x12c>)
 8002b3c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002b40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00
 8002b54:	52002000 	.word	0x52002000
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b60:	02020200 	.word	0x02020200
 8002b64:	01ff0000 	.word	0x01ff0000
 8002b68:	01010280 	.word	0x01010280
 8002b6c:	5c001000 	.word	0x5c001000
 8002b70:	ffff0000 	.word	0xffff0000
 8002b74:	51008108 	.word	0x51008108
 8002b78:	52004000 	.word	0x52004000

08002b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b80:	f7ff ff64 	bl	8002a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b84:	480c      	ldr	r0, [pc, #48]	@ (8002bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b86:	490d      	ldr	r1, [pc, #52]	@ (8002bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b88:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002baa:	f020 fa73 	bl	8023094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bae:	f7fd fd77 	bl	80006a0 <main>
  bx  lr
 8002bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bbc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002bc0:	080275a8 	.word	0x080275a8
  ldr r2, =_sbss
 8002bc4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002bc8:	200026c4 	.word	0x200026c4

08002bcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bcc:	e7fe      	b.n	8002bcc <ADC3_IRQHandler>

08002bce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002bd4:	201c      	movs	r0, #28
 8002bd6:	f003 fa25 	bl	8006024 <pvPortMalloc>
 8002bda:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f9c3 	bl	8002f78 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8002bf2:	687b      	ldr	r3, [r7, #4]
        }
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	@ 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <xEventGroupWaitBits+0x2a>
 8002c1c:	f240 1147 	movw	r1, #327	@ 0x147
 8002c20:	4850      	ldr	r0, [pc, #320]	@ (8002d64 <xEventGroupWaitBits+0x168>)
 8002c22:	f7fe fda3 	bl	800176c <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c2c:	d304      	bcc.n	8002c38 <xEventGroupWaitBits+0x3c>
 8002c2e:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8002c32:	484c      	ldr	r0, [pc, #304]	@ (8002d64 <xEventGroupWaitBits+0x168>)
 8002c34:	f7fe fd9a 	bl	800176c <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <xEventGroupWaitBits+0x4c>
 8002c3e:	f240 1149 	movw	r1, #329	@ 0x149
 8002c42:	4848      	ldr	r0, [pc, #288]	@ (8002d64 <xEventGroupWaitBits+0x168>)
 8002c44:	f7fe fd92 	bl	800176c <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c48:	f002 f888 	bl	8004d5c <xTaskGetSchedulerState>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <xEventGroupWaitBits+0x5c>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <xEventGroupWaitBits+0x60>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <xEventGroupWaitBits+0x62>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <xEventGroupWaitBits+0x70>
 8002c62:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002c66:	483f      	ldr	r0, [pc, #252]	@ (8002d64 <xEventGroupWaitBits+0x168>)
 8002c68:	f7fe fd80 	bl	800176c <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8002c6c:	f001 fa58 	bl	8004120 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	69f8      	ldr	r0, [r7, #28]
 8002c7c:	f000 f95a 	bl	8002f34 <prvTestWaitCondition>
 8002c80:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d028      	beq.n	8002ce8 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e020      	b.n	8002ce8 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	e018      	b.n	8002ce8 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	1d18      	adds	r0, r3, #4
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f001 fd06 	bl	80046f0 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002ce8:	f001 fa28 	bl	800413c <xTaskResumeAll>
 8002cec:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d031      	beq.n	8002d58 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d107      	bne.n	8002d0a <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <xEventGroupWaitBits+0x16c>)
 8002cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 8002d0a:	f002 fa31 	bl	8005170 <uxTaskResetEventItemValue>
 8002d0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11a      	bne.n	8002d50 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 8002d1a:	f003 f881 	bl	8005e20 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d2a:	f000 f903 	bl	8002f34 <prvTestWaitCondition>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8002d4c:	f003 f894 	bl	8005e78 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8002d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3730      	adds	r7, #48	@ 0x30
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	08023e00 	.word	0x08023e00
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <xEventGroupClearBits+0x1e>
 8002d80:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8002d84:	480f      	ldr	r0, [pc, #60]	@ (8002dc4 <xEventGroupClearBits+0x58>)
 8002d86:	f7fe fcf1 	bl	800176c <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d90:	d304      	bcc.n	8002d9c <xEventGroupClearBits+0x30>
 8002d92:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002d96:	480b      	ldr	r0, [pc, #44]	@ (8002dc4 <xEventGroupClearBits+0x58>)
 8002d98:	f7fe fce8 	bl	800176c <vAssertCalled>

        taskENTER_CRITICAL();
 8002d9c:	f003 f840 	bl	8005e20 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002db4:	f003 f860 	bl	8005e78 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 8002db8:	68bb      	ldr	r3, [r7, #8]
    }
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	08023e00 	.word	0x08023e00

08002dc8 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	@ 0x30
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <xEventGroupSetBits+0x26>
 8002de4:	f240 2132 	movw	r1, #562	@ 0x232
 8002de8:	4836      	ldr	r0, [pc, #216]	@ (8002ec4 <xEventGroupSetBits+0xfc>)
 8002dea:	f7fe fcbf 	bl	800176c <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df4:	d304      	bcc.n	8002e00 <xEventGroupSetBits+0x38>
 8002df6:	f240 2133 	movw	r1, #563	@ 0x233
 8002dfa:	4832      	ldr	r0, [pc, #200]	@ (8002ec4 <xEventGroupSetBits+0xfc>)
 8002dfc:	f7fe fcb6 	bl	800176c <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	3304      	adds	r3, #4
 8002e04:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8002e0c:	f001 f988 	bl	8004120 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8002e22:	e03c      	b.n	8002e9e <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8002e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002e3a:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e42:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	e008      	b.n	8002e72 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d101      	bne.n	8002e72 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8002e82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e92:	4619      	mov	r1, r3
 8002e94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e96:	f001 fd49 	bl	800492c <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8002e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d1be      	bne.n	8002e24 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8002eb4:	f001 f942 	bl	800413c <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	681b      	ldr	r3, [r3, #0]
    }
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3730      	adds	r7, #48	@ 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	08023e00 	.word	0x08023e00

08002ec8 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <vEventGroupDelete+0x1c>
 8002eda:	f240 218e 	movw	r1, #654	@ 0x28e
 8002ede:	4814      	ldr	r0, [pc, #80]	@ (8002f30 <vEventGroupDelete+0x68>)
 8002ee0:	f7fe fc44 	bl	800176c <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 8002eea:	f001 f919 	bl	8004120 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002eee:	e011      	b.n	8002f14 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d104      	bne.n	8002f06 <vEventGroupDelete+0x3e>
 8002efc:	f240 219a 	movw	r1, #666	@ 0x29a
 8002f00:	480b      	ldr	r0, [pc, #44]	@ (8002f30 <vEventGroupDelete+0x68>)
 8002f02:	f7fe fc33 	bl	800176c <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 fd0c 	bl	800492c <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e9      	bne.n	8002ef0 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8002f1c:	f001 f90e 	bl	800413c <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f003 f953 	bl	80061cc <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	08023e00 	.word	0x08023e00

08002f34 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d107      	bne.n	8002f5a <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e007      	b.n	8002f6a <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d101      	bne.n	8002f6a <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8002f6a:	697b      	ldr	r3, [r7, #20]
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 0208 	add.w	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f103 0208 	add.w	r2, r3, #8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0208 	add.w	r2, r3, #8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d103      	bne.n	800303a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e00c      	b.n	8003054 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3308      	adds	r3, #8
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e002      	b.n	8003048 <vListInsert+0x2e>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d2f6      	bcs.n	8003042 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6852      	ldr	r2, [r2, #4]
 80030ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d103      	bne.n	80030c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80030ea:	2301      	movs	r3, #1
 80030ec:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <xQueueGenericReset+0x22>
 80030f8:	f240 1137 	movw	r1, #311	@ 0x137
 80030fc:	4839      	ldr	r0, [pc, #228]	@ (80031e4 <xQueueGenericReset+0x104>)
 80030fe:	f7fe fb35 	bl	800176c <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d05d      	beq.n	80031c4 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d059      	beq.n	80031c4 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	2100      	movs	r1, #0
 800311a:	fba3 2302 	umull	r2, r3, r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d000      	beq.n	8003124 <xQueueGenericReset+0x44>
 8003122:	2101      	movs	r1, #1
 8003124:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003126:	2b00      	cmp	r3, #0
 8003128:	d14c      	bne.n	80031c4 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800312a:	f002 fe79 	bl	8005e20 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	441a      	add	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315a:	3b01      	subs	r3, #1
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	441a      	add	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	22ff      	movs	r2, #255	@ 0xff
 800316e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	22ff      	movs	r2, #255	@ 0xff
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d114      	bne.n	80031aa <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01a      	beq.n	80031be <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3310      	adds	r3, #16
 800318c:	4618      	mov	r0, r3
 800318e:	f001 fafb 	bl	8004788 <xTaskRemoveFromEventList>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d012      	beq.n	80031be <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003198:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <xQueueGenericReset+0x108>)
 800319a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	e009      	b.n	80031be <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3310      	adds	r3, #16
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fee2 	bl	8002f78 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3324      	adds	r3, #36	@ 0x24
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fedd 	bl	8002f78 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80031be:	f002 fe5b 	bl	8005e78 <vPortExitCritical>
 80031c2:	e001      	b.n	80031c8 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <xQueueGenericReset+0xf8>
 80031ce:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80031d2:	4804      	ldr	r0, [pc, #16]	@ (80031e4 <xQueueGenericReset+0x104>)
 80031d4:	f7fe faca 	bl	800176c <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	08023e2c 	.word	0x08023e2c
 80031e8:	e000ed04 	.word	0xe000ed04

080031ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d02e      	beq.n	8003262 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003204:	2100      	movs	r1, #0
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	fba3 2302 	umull	r2, r3, r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d000      	beq.n	8003214 <xQueueGenericCreate+0x28>
 8003212:	2101      	movs	r1, #1
 8003214:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d123      	bne.n	8003262 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003222:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003226:	d81c      	bhi.n	8003262 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	3350      	adds	r3, #80	@ 0x50
 8003236:	4618      	mov	r0, r3
 8003238:	f002 fef4 	bl	8006024 <pvPortMalloc>
 800323c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d016      	beq.n	8003272 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3350      	adds	r3, #80	@ 0x50
 800324c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800324e:	79fa      	ldrb	r2, [r7, #7]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f810 	bl	8003280 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003260:	e007      	b.n	8003272 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <xQueueGenericCreate+0x86>
 8003268:	f240 212a 	movw	r1, #554	@ 0x22a
 800326c:	4803      	ldr	r0, [pc, #12]	@ (800327c <xQueueGenericCreate+0x90>)
 800326e:	f7fe fa7d 	bl	800176c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003272:	69fb      	ldr	r3, [r7, #28]
    }
 8003274:	4618      	mov	r0, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	08023e2c 	.word	0x08023e2c

08003280 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e002      	b.n	80032a2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032ae:	2101      	movs	r1, #1
 80032b0:	69b8      	ldr	r0, [r7, #24]
 80032b2:	f7ff ff15 	bl	80030e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80032e6:	2300      	movs	r3, #0
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f847 	bl	8003380 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003304:	2301      	movs	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	461a      	mov	r2, r3
 8003310:	6939      	ldr	r1, [r7, #16]
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f7ff ff6a 	bl	80031ec <xQueueGenericCreate>
 8003318:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff ffd3 	bl	80032c6 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003320:	68fb      	ldr	r3, [r7, #12]
    }
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <xQueueCreateCountingSemaphore+0x36>
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d80c      	bhi.n	8003362 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003348:	2202      	movs	r2, #2
 800334a:	2100      	movs	r1, #0
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff4d 	bl	80031ec <xQueueGenericCreate>
 8003352:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003360:	e007      	b.n	8003372 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <xQueueCreateCountingSemaphore+0x46>
 8003368:	f240 319f 	movw	r1, #927	@ 0x39f
 800336c:	4803      	ldr	r0, [pc, #12]	@ (800337c <xQueueCreateCountingSemaphore+0x50>)
 800336e:	f7fe f9fd 	bl	800176c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003372:	68fb      	ldr	r3, [r7, #12]
    }
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08023e2c 	.word	0x08023e2c

08003380 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	@ 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <xQueueGenericSend+0x26>
 800339c:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80033a0:	4869      	ldr	r0, [pc, #420]	@ (8003548 <xQueueGenericSend+0x1c8>)
 80033a2:	f7fe f9e3 	bl	800176c <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <xQueueGenericSend+0x34>
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <xQueueGenericSend+0x38>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <xQueueGenericSend+0x3a>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <xQueueGenericSend+0x48>
 80033be:	f240 31b7 	movw	r1, #951	@ 0x3b7
 80033c2:	4861      	ldr	r0, [pc, #388]	@ (8003548 <xQueueGenericSend+0x1c8>)
 80033c4:	f7fe f9d2 	bl	800176c <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d103      	bne.n	80033d6 <xQueueGenericSend+0x56>
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <xQueueGenericSend+0x5a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <xQueueGenericSend+0x5c>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <xQueueGenericSend+0x6a>
 80033e0:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 80033e4:	4858      	ldr	r0, [pc, #352]	@ (8003548 <xQueueGenericSend+0x1c8>)
 80033e6:	f7fe f9c1 	bl	800176c <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ea:	f001 fcb7 	bl	8004d5c <xTaskGetSchedulerState>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <xQueueGenericSend+0x7a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <xQueueGenericSend+0x7e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueGenericSend+0x80>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <xQueueGenericSend+0x8e>
 8003404:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003408:	484f      	ldr	r0, [pc, #316]	@ (8003548 <xQueueGenericSend+0x1c8>)
 800340a:	f7fe f9af 	bl	800176c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800340e:	f002 fd07 	bl	8005e20 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <xQueueGenericSend+0xa4>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d129      	bne.n	8003478 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	6a38      	ldr	r0, [r7, #32]
 800342a:	f000 fabb 	bl	80039a4 <prvCopyDataToQueue>
 800342e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	3324      	adds	r3, #36	@ 0x24
 800343c:	4618      	mov	r0, r3
 800343e:	f001 f9a3 	bl	8004788 <xTaskRemoveFromEventList>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003448:	4b40      	ldr	r3, [pc, #256]	@ (800354c <xQueueGenericSend+0x1cc>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	e00a      	b.n	8003470 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003460:	4b3a      	ldr	r3, [pc, #232]	@ (800354c <xQueueGenericSend+0x1cc>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003470:	f002 fd02 	bl	8005e78 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003474:	2301      	movs	r3, #1
 8003476:	e063      	b.n	8003540 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800347e:	f002 fcfb 	bl	8005e78 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003482:	2300      	movs	r3, #0
 8003484:	e05c      	b.n	8003540 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fb23 	bl	8004adc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800349a:	f002 fced 	bl	8005e78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800349e:	f000 fe3f 	bl	8004120 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034a2:	f002 fcbd 	bl	8005e20 <vPortEnterCritical>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d103      	bne.n	80034bc <xQueueGenericSend+0x13c>
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d103      	bne.n	80034d2 <xQueueGenericSend+0x152>
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034d2:	f002 fcd1 	bl	8005e78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d6:	1d3a      	adds	r2, r7, #4
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fb12 	bl	8004b08 <xTaskCheckForTimeOut>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d124      	bne.n	8003534 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034ea:	6a38      	ldr	r0, [r7, #32]
 80034ec:	f000 fb52 	bl	8003b94 <prvIsQueueFull>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	3310      	adds	r3, #16
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 f8d6 	bl	80046b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003504:	6a38      	ldr	r0, [r7, #32]
 8003506:	f000 fadd 	bl	8003ac4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800350a:	f000 fe17 	bl	800413c <xTaskResumeAll>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af7c 	bne.w	800340e <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <xQueueGenericSend+0x1cc>)
 8003518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	e772      	b.n	800340e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003528:	6a38      	ldr	r0, [r7, #32]
 800352a:	f000 facb 	bl	8003ac4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800352e:	f000 fe05 	bl	800413c <xTaskResumeAll>
 8003532:	e76c      	b.n	800340e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003534:	6a38      	ldr	r0, [r7, #32]
 8003536:	f000 fac5 	bl	8003ac4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800353a:	f000 fdff 	bl	800413c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800353e:	2300      	movs	r3, #0
        }
    }
}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	@ 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	08023e2c 	.word	0x08023e2c
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <xQueueReceive+0x24>
 800356a:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 800356e:	485e      	ldr	r0, [pc, #376]	@ (80036e8 <xQueueReceive+0x198>)
 8003570:	f7fe f8fc 	bl	800176c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <xQueueReceive+0x32>
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <xQueueReceive+0x36>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <xQueueReceive+0x38>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <xQueueReceive+0x46>
 800358c:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003590:	4855      	ldr	r0, [pc, #340]	@ (80036e8 <xQueueReceive+0x198>)
 8003592:	f7fe f8eb 	bl	800176c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003596:	f001 fbe1 	bl	8004d5c <xTaskGetSchedulerState>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <xQueueReceive+0x56>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <xQueueReceive+0x5a>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <xQueueReceive+0x5c>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <xQueueReceive+0x6a>
 80035b0:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 80035b4:	484c      	ldr	r0, [pc, #304]	@ (80036e8 <xQueueReceive+0x198>)
 80035b6:	f7fe f8d9 	bl	800176c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80035ba:	f002 fc31 	bl	8005e20 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01f      	beq.n	800360a <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	6a38      	ldr	r0, [r7, #32]
 80035ce:	f000 fa53 	bl	8003a78 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00f      	beq.n	8003602 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	3310      	adds	r3, #16
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 f8ce 	bl	8004788 <xTaskRemoveFromEventList>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80035f2:	4b3e      	ldr	r3, [pc, #248]	@ (80036ec <xQueueReceive+0x19c>)
 80035f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003602:	f002 fc39 	bl	8005e78 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003606:	2301      	movs	r3, #1
 8003608:	e069      	b.n	80036de <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003610:	f002 fc32 	bl	8005e78 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003614:	2300      	movs	r3, #0
 8003616:	e062      	b.n	80036de <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fa5a 	bl	8004adc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800362c:	f002 fc24 	bl	8005e78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003630:	f000 fd76 	bl	8004120 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003634:	f002 fbf4 	bl	8005e20 <vPortEnterCritical>
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800363e:	b25b      	sxtb	r3, r3
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d103      	bne.n	800364e <xQueueReceive+0xfe>
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003654:	b25b      	sxtb	r3, r3
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d103      	bne.n	8003664 <xQueueReceive+0x114>
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003664:	f002 fc08 	bl	8005e78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003668:	1d3a      	adds	r2, r7, #4
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fa49 	bl	8004b08 <xTaskCheckForTimeOut>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d123      	bne.n	80036c4 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800367c:	6a38      	ldr	r0, [r7, #32]
 800367e:	f000 fa73 	bl	8003b68 <prvIsQueueEmpty>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d017      	beq.n	80036b8 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	3324      	adds	r3, #36	@ 0x24
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f80d 	bl	80046b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003696:	6a38      	ldr	r0, [r7, #32]
 8003698:	f000 fa14 	bl	8003ac4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800369c:	f000 fd4e 	bl	800413c <xTaskResumeAll>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d189      	bne.n	80035ba <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 80036a6:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <xQueueReceive+0x19c>)
 80036a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	e780      	b.n	80035ba <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80036b8:	6a38      	ldr	r0, [r7, #32]
 80036ba:	f000 fa03 	bl	8003ac4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80036be:	f000 fd3d 	bl	800413c <xTaskResumeAll>
 80036c2:	e77a      	b.n	80035ba <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80036c4:	6a38      	ldr	r0, [r7, #32]
 80036c6:	f000 f9fd 	bl	8003ac4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80036ca:	f000 fd37 	bl	800413c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036ce:	6a38      	ldr	r0, [r7, #32]
 80036d0:	f000 fa4a 	bl	8003b68 <prvIsQueueEmpty>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f43f af6f 	beq.w	80035ba <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80036dc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3728      	adds	r7, #40	@ 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	08023e2c 	.word	0x08023e2c
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <xQueueSemaphoreTake+0x26>
 800370c:	f240 6182 	movw	r1, #1666	@ 0x682
 8003710:	486c      	ldr	r0, [pc, #432]	@ (80038c4 <xQueueSemaphoreTake+0x1d4>)
 8003712:	f7fe f82b 	bl	800176c <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <xQueueSemaphoreTake+0x38>
 800371e:	f240 6186 	movw	r1, #1670	@ 0x686
 8003722:	4868      	ldr	r0, [pc, #416]	@ (80038c4 <xQueueSemaphoreTake+0x1d4>)
 8003724:	f7fe f822 	bl	800176c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003728:	f001 fb18 	bl	8004d5c <xTaskGetSchedulerState>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <xQueueSemaphoreTake+0x48>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <xQueueSemaphoreTake+0x4c>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <xQueueSemaphoreTake+0x4e>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <xQueueSemaphoreTake+0x5c>
 8003742:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003746:	485f      	ldr	r0, [pc, #380]	@ (80038c4 <xQueueSemaphoreTake+0x1d4>)
 8003748:	f7fe f810 	bl	800176c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800374c:	f002 fb68 	bl	8005e20 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d024      	beq.n	80037a6 <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1e5a      	subs	r2, r3, #1
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800376c:	f001 fd18 	bl	80051a0 <pvTaskIncrementMutexHeldCount>
 8003770:	4602      	mov	r2, r0
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00f      	beq.n	800379e <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3310      	adds	r3, #16
 8003782:	4618      	mov	r0, r3
 8003784:	f001 f800 	bl	8004788 <xTaskRemoveFromEventList>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800378e:	4b4e      	ldr	r3, [pc, #312]	@ (80038c8 <xQueueSemaphoreTake+0x1d8>)
 8003790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800379e:	f002 fb6b 	bl	8005e78 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e089      	b.n	80038ba <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d103      	bne.n	80037b4 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80037ac:	f002 fb64 	bl	8005e78 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e082      	b.n	80038ba <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037ba:	f107 030c 	add.w	r3, r7, #12
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 f98c 	bl	8004adc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037c8:	f002 fb56 	bl	8005e78 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037cc:	f000 fca8 	bl	8004120 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037d0:	f002 fb26 	bl	8005e20 <vPortEnterCritical>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d103      	bne.n	80037ea <xQueueSemaphoreTake+0xfa>
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037f0:	b25b      	sxtb	r3, r3
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d103      	bne.n	8003800 <xQueueSemaphoreTake+0x110>
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003800:	f002 fb3a 	bl	8005e78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003804:	463a      	mov	r2, r7
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f97b 	bl	8004b08 <xTaskCheckForTimeOut>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d132      	bne.n	800387e <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003818:	69f8      	ldr	r0, [r7, #28]
 800381a:	f000 f9a5 	bl	8003b68 <prvIsQueueEmpty>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d026      	beq.n	8003872 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 800382c:	f002 faf8 	bl	8005e20 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f001 faaf 	bl	8004d98 <xTaskPriorityInherit>
 800383a:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800383c:	f002 fb1c 	bl	8005e78 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	3324      	adds	r3, #36	@ 0x24
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f000 ff31 	bl	80046b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800384e:	69f8      	ldr	r0, [r7, #28]
 8003850:	f000 f938 	bl	8003ac4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003854:	f000 fc72 	bl	800413c <xTaskResumeAll>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	f47f af76 	bne.w	800374c <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003860:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <xQueueSemaphoreTake+0x1d8>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	e76c      	b.n	800374c <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003872:	69f8      	ldr	r0, [r7, #28]
 8003874:	f000 f926 	bl	8003ac4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003878:	f000 fc60 	bl	800413c <xTaskResumeAll>
 800387c:	e766      	b.n	800374c <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800387e:	69f8      	ldr	r0, [r7, #28]
 8003880:	f000 f920 	bl	8003ac4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003884:	f000 fc5a 	bl	800413c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003888:	69f8      	ldr	r0, [r7, #28]
 800388a:	f000 f96d 	bl	8003b68 <prvIsQueueEmpty>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	f43f af5b 	beq.w	800374c <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 800389c:	f002 fac0 	bl	8005e20 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80038a0:	69f8      	ldr	r0, [r7, #28]
 80038a2:	f000 f867 	bl	8003974 <prvGetDisinheritPriorityAfterTimeout>
 80038a6:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	6979      	ldr	r1, [r7, #20]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fbae 	bl	8005010 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80038b4:	f002 fae0 	bl	8005e78 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80038b8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3728      	adds	r7, #40	@ 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	08023e2c 	.word	0x08023e2c
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <uxQueueMessagesWaiting+0x18>
 80038da:	f640 019b 	movw	r1, #2203	@ 0x89b
 80038de:	4807      	ldr	r0, [pc, #28]	@ (80038fc <uxQueueMessagesWaiting+0x30>)
 80038e0:	f7fd ff44 	bl	800176c <vAssertCalled>

    taskENTER_CRITICAL();
 80038e4:	f002 fa9c 	bl	8005e20 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80038ee:	f002 fac3 	bl	8005e78 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08023e2c 	.word	0x08023e2c

08003900 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <uxQueueSpacesAvailable+0x1c>
 8003912:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 8003916:	4809      	ldr	r0, [pc, #36]	@ (800393c <uxQueueSpacesAvailable+0x3c>)
 8003918:	f7fd ff28 	bl	800176c <vAssertCalled>

    taskENTER_CRITICAL();
 800391c:	f002 fa80 	bl	8005e20 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 800392c:	f002 faa4 	bl	8005e78 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8003930:	68bb      	ldr	r3, [r7, #8]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	08023e2c 	.word	0x08023e2c

08003940 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <vQueueDelete+0x1c>
 8003952:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 8003956:	4806      	ldr	r0, [pc, #24]	@ (8003970 <vQueueDelete+0x30>)
 8003958:	f7fd ff08 	bl	800176c <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f979 	bl	8003c54 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f002 fc32 	bl	80061cc <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	08023e2c 	.word	0x08023e2c

08003974 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1c3 0307 	rsb	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e001      	b.n	8003996 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003996:	68fb      	ldr	r3, [r7, #12]
    }
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d14d      	bne.n	8003a66 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fa82 	bl	8004ed8 <xTaskPriorityDisinherit>
 80039d4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	e043      	b.n	8003a66 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d119      	bne.n	8003a18 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6858      	ldr	r0, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	461a      	mov	r2, r3
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	f01e fb16 	bl	8022020 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	441a      	add	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d32b      	bcc.n	8003a66 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	e026      	b.n	8003a66 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68d8      	ldr	r0, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	461a      	mov	r2, r3
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	f01e fafc 	bl	8022020 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	425b      	negs	r3, r3
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d207      	bcs.n	8003a54 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	425b      	negs	r3, r3
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d105      	bne.n	8003a66 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003a6e:	697b      	ldr	r3, [r7, #20]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d018      	beq.n	8003abc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	441a      	add	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d303      	bcc.n	8003aac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68d9      	ldr	r1, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6838      	ldr	r0, [r7, #0]
 8003ab8:	f01e fab2 	bl	8022020 <memcpy>
    }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003acc:	f002 f9a8 	bl	8005e20 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ad6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ad8:	e011      	b.n	8003afe <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d012      	beq.n	8003b08 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3324      	adds	r3, #36	@ 0x24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fe4e 	bl	8004788 <xTaskRemoveFromEventList>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003af2:	f001 f865 	bl	8004bc0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	dce9      	bgt.n	8003ada <prvUnlockQueue+0x16>
 8003b06:	e000      	b.n	8003b0a <prvUnlockQueue+0x46>
                    break;
 8003b08:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	22ff      	movs	r2, #255	@ 0xff
 8003b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003b12:	f002 f9b1 	bl	8005e78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003b16:	f002 f983 	bl	8005e20 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b20:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b22:	e011      	b.n	8003b48 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d012      	beq.n	8003b52 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3310      	adds	r3, #16
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fe29 	bl	8004788 <xTaskRemoveFromEventList>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003b3c:	f001 f840 	bl	8004bc0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003b40:	7bbb      	ldrb	r3, [r7, #14]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	dce9      	bgt.n	8003b24 <prvUnlockQueue+0x60>
 8003b50:	e000      	b.n	8003b54 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003b52:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	22ff      	movs	r2, #255	@ 0xff
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003b5c:	f002 f98c 	bl	8005e78 <vPortExitCritical>
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b70:	f002 f956 	bl	8005e20 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e001      	b.n	8003b86 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003b86:	f002 f977 	bl	8005e78 <vPortExitCritical>

    return xReturn;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b9c:	f002 f940 	bl	8005e20 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d102      	bne.n	8003bb2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003bac:	2301      	movs	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e001      	b.n	8003bb6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003bb6:	f002 f95f 	bl	8005e78 <vPortExitCritical>

    return xReturn;
 8003bba:	68fb      	ldr	r3, [r7, #12]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <vQueueAddToRegistry+0x1e>
 8003bd8:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8003bdc:	481b      	ldr	r0, [pc, #108]	@ (8003c4c <vQueueAddToRegistry+0x88>)
 8003bde:	f7fd fdc5 	bl	800176c <vAssertCalled>

        if( pcQueueName != NULL )
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d024      	beq.n	8003c32 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e01e      	b.n	8003c2c <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003bee:	4a18      	ldr	r2, [pc, #96]	@ (8003c50 <vQueueAddToRegistry+0x8c>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d105      	bne.n	8003c0a <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4a13      	ldr	r2, [pc, #76]	@ (8003c50 <vQueueAddToRegistry+0x8c>)
 8003c04:	4413      	add	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
                    break;
 8003c08:	e013      	b.n	8003c32 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <vQueueAddToRegistry+0x62>
 8003c10:	4a0f      	ldr	r2, [pc, #60]	@ (8003c50 <vQueueAddToRegistry+0x8c>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4a0b      	ldr	r2, [pc, #44]	@ (8003c50 <vQueueAddToRegistry+0x8c>)
 8003c22:	4413      	add	r3, r2
 8003c24:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b07      	cmp	r3, #7
 8003c30:	d9dd      	bls.n	8003bee <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	08023e2c 	.word	0x08023e2c
 8003c50:	20000c08 	.word	0x20000c08

08003c54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <vQueueUnregisterQueue+0x18>
 8003c62:	f640 411d 	movw	r1, #3101	@ 0xc1d
 8003c66:	4812      	ldr	r0, [pc, #72]	@ (8003cb0 <vQueueUnregisterQueue+0x5c>)
 8003c68:	f7fd fd80 	bl	800176c <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e016      	b.n	8003ca0 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003c72:	4a10      	ldr	r2, [pc, #64]	@ (8003cb4 <vQueueUnregisterQueue+0x60>)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d10b      	bne.n	8003c9a <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8003c82:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb4 <vQueueUnregisterQueue+0x60>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2100      	movs	r1, #0
 8003c88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003c8c:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <vQueueUnregisterQueue+0x60>)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	2200      	movs	r2, #0
 8003c96:	605a      	str	r2, [r3, #4]
                break;
 8003c98:	e006      	b.n	8003ca8 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b07      	cmp	r3, #7
 8003ca4:	d9e5      	bls.n	8003c72 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	08023e2c 	.word	0x08023e2c
 8003cb4:	20000c08 	.word	0x20000c08

08003cb8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	@ 0x28
 8003cbc:	af04      	add	r7, sp, #16
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 f9aa 	bl	8006024 <pvPortMalloc>
 8003cd0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d013      	beq.n	8003d00 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003cd8:	206c      	movs	r0, #108	@ 0x6c
 8003cda:	f002 f9a3 	bl	8006024 <pvPortMalloc>
 8003cde:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003ce6:	226c      	movs	r2, #108	@ 0x6c
 8003ce8:	2100      	movs	r1, #0
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f01e faa5 	bl	802223a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cf6:	e005      	b.n	8003d04 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003cf8:	6938      	ldr	r0, [r7, #16]
 8003cfa:	f002 fa67 	bl	80061cc <vPortFree>
 8003cfe:	e001      	b.n	8003d04 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9303      	str	r3, [sp, #12]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	9302      	str	r3, [sp, #8]
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f829 	bl	8003d78 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003d26:	697b      	ldr	r3, [r7, #20]
    }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff ffb3 	bl	8003cb8 <prvCreateTask>
 8003d52:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003d5a:	6938      	ldr	r0, [r7, #16]
 8003d5c:	f000 f890 	bl	8003e80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e002      	b.n	8003d6c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8003d6c:	697b      	ldr	r3, [r7, #20]
    }
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	21a5      	movs	r1, #165	@ 0xa5
 8003d92:	f01e fa52 	bl	802223a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003da0:	440b      	add	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f023 0307 	bic.w	r3, r3, #7
 8003dae:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <prvInitialiseNewTask+0x4c>
 8003dba:	f240 712e 	movw	r1, #1838	@ 0x72e
 8003dbe:	482f      	ldr	r0, [pc, #188]	@ (8003e7c <prvInitialiseNewTask+0x104>)
 8003dc0:	f7fd fcd4 	bl	800176c <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01e      	beq.n	8003e08 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e012      	b.n	8003df6 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	7819      	ldrb	r1, [r3, #0]
 8003dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3334      	adds	r3, #52	@ 0x34
 8003de0:	460a      	mov	r2, r1
 8003de2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	4413      	add	r3, r2
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3301      	adds	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d9e9      	bls.n	8003dd0 <prvInitialiseNewTask+0x58>
 8003dfc:	e000      	b.n	8003e00 <prvInitialiseNewTask+0x88>
            {
                break;
 8003dfe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d904      	bls.n	8003e18 <prvInitialiseNewTask+0xa0>
 8003e0e:	f240 7164 	movw	r1, #1892	@ 0x764
 8003e12:	481a      	ldr	r0, [pc, #104]	@ (8003e7c <prvInitialiseNewTask+0x104>)
 8003e14:	f7fd fcaa 	bl	800176c <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d901      	bls.n	8003e22 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e1e:	2306      	movs	r3, #6
 8003e20:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2a:	6a3a      	ldr	r2, [r7, #32]
 8003e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	3304      	adds	r3, #4
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff f8c0 	bl	8002fb8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	3318      	adds	r3, #24
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff f8bb 	bl	8002fb8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e46:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	f1c3 0207 	rsb	r2, r3, #7
 8003e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e50:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	6938      	ldr	r0, [r7, #16]
 8003e5e:	f001 fea5 	bl	8005bac <pxPortInitialiseStack>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e72:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e74:	bf00      	nop
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	08023e50 	.word	0x08023e50

08003e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003e88:	f001 ffca 	bl	8005e20 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003e8c:	4b41      	ldr	r3, [pc, #260]	@ (8003f94 <prvAddNewTaskToReadyList+0x114>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a40      	ldr	r2, [pc, #256]	@ (8003f94 <prvAddNewTaskToReadyList+0x114>)
 8003e94:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003e96:	4b40      	ldr	r3, [pc, #256]	@ (8003f98 <prvAddNewTaskToReadyList+0x118>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003e9e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f98 <prvAddNewTaskToReadyList+0x118>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <prvAddNewTaskToReadyList+0x114>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d110      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003eac:	f000 feac 	bl	8004c08 <prvInitialiseTaskLists>
 8003eb0:	e00d      	b.n	8003ece <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8003f9c <prvAddNewTaskToReadyList+0x11c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eba:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <prvAddNewTaskToReadyList+0x118>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d802      	bhi.n	8003ece <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003ec8:	4a33      	ldr	r2, [pc, #204]	@ (8003f98 <prvAddNewTaskToReadyList+0x118>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003ece:	4b34      	ldr	r3, [pc, #208]	@ (8003fa0 <prvAddNewTaskToReadyList+0x120>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a32      	ldr	r2, [pc, #200]	@ (8003fa0 <prvAddNewTaskToReadyList+0x120>)
 8003ed6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ed8:	4b31      	ldr	r3, [pc, #196]	@ (8003fa0 <prvAddNewTaskToReadyList+0x120>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa4 <prvAddNewTaskToReadyList+0x124>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <prvAddNewTaskToReadyList+0x124>)
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef6:	492c      	ldr	r1, [pc, #176]	@ (8003fa8 <prvAddNewTaskToReadyList+0x128>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3304      	adds	r3, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	3204      	adds	r2, #4
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa8 <prvAddNewTaskToReadyList+0x128>)
 8003f36:	441a      	add	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	615a      	str	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	4919      	ldr	r1, [pc, #100]	@ (8003fa8 <prvAddNewTaskToReadyList+0x128>)
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	4814      	ldr	r0, [pc, #80]	@ (8003fa8 <prvAddNewTaskToReadyList+0x128>)
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4403      	add	r3, r0
 8003f60:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003f62:	f001 ff89 	bl	8005e78 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <prvAddNewTaskToReadyList+0x11c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00e      	beq.n	8003f8c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <prvAddNewTaskToReadyList+0x118>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d207      	bcs.n	8003f8c <prvAddNewTaskToReadyList+0x10c>
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <prvAddNewTaskToReadyList+0x12c>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000d48 	.word	0x20000d48
 8003f98:	20000c48 	.word	0x20000c48
 8003f9c:	20000d54 	.word	0x20000d54
 8003fa0:	20000d64 	.word	0x20000d64
 8003fa4:	20000d50 	.word	0x20000d50
 8003fa8:	20000c4c 	.word	0x20000c4c
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d011      	beq.n	8003fe6 <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 8003fc2:	f000 f8ad 	bl	8004120 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <vTaskDelay+0x54>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d004      	beq.n	8003fd8 <vTaskDelay+0x28>
 8003fce:	f640 118e 	movw	r1, #2446	@ 0x98e
 8003fd2:	480d      	ldr	r0, [pc, #52]	@ (8004008 <vTaskDelay+0x58>)
 8003fd4:	f7fd fbca 	bl	800176c <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 fd64 	bl	8005aa8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003fe0:	f000 f8ac 	bl	800413c <xTaskResumeAll>
 8003fe4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d107      	bne.n	8003ffc <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8003fec:	4b07      	ldr	r3, [pc, #28]	@ (800400c <vTaskDelay+0x5c>)
 8003fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000d70 	.word	0x20000d70
 8004008:	08023e50 	.word	0x08023e50
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8004016:	2301      	movs	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e011      	b.n	8004048 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004024:	4a1d      	ldr	r2, [pc, #116]	@ (800409c <prvCreateIdleTasks+0x8c>)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	4413      	add	r3, r2
 800402a:	7819      	ldrb	r1, [r3, #0]
 800402c:	463a      	mov	r2, r7
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4413      	add	r3, r2
 8004032:	460a      	mov	r2, r1
 8004034:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8004036:	463a      	mov	r2, r7
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4413      	add	r3, r2
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	3301      	adds	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	ddea      	ble.n	8004024 <prvCreateIdleTasks+0x14>
 800404e:	e000      	b.n	8004052 <prvCreateIdleTasks+0x42>
        {
            break;
 8004050:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e016      	b.n	8004086 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <prvCreateIdleTasks+0x90>)
 800405a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4a10      	ldr	r2, [pc, #64]	@ (80040a4 <prvCreateIdleTasks+0x94>)
 8004062:	4413      	add	r3, r2
 8004064:	4639      	mov	r1, r7
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004072:	6938      	ldr	r0, [r7, #16]
 8004074:	f7ff fe5c 	bl	8003d30 <xTaskCreate>
 8004078:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	3301      	adds	r3, #1
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	dde5      	ble.n	8004058 <prvCreateIdleTasks+0x48>
 800408c:	e000      	b.n	8004090 <prvCreateIdleTasks+0x80>
        {
            break;
 800408e:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8004090:	69fb      	ldr	r3, [r7, #28]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	08023e74 	.word	0x08023e74
 80040a0:	08004bd9 	.word	0x08004bd9
 80040a4:	20000d6c 	.word	0x20000d6c

080040a8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80040ae:	f7ff ffaf 	bl	8004010 <prvCreateIdleTasks>
 80040b2:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d118      	bne.n	80040ec <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80040ba:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040be:	b672      	cpsid	i
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	b662      	cpsie	i
 80040ce:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80040d0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80040d2:	4b0e      	ldr	r3, [pc, #56]	@ (800410c <vTaskStartScheduler+0x64>)
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80040da:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <vTaskStartScheduler+0x68>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <vTaskStartScheduler+0x6c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80040e6:	f001 fded 	bl	8005cc4 <xPortStartScheduler>
 80040ea:	e008      	b.n	80040fe <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d104      	bne.n	80040fe <vTaskStartScheduler+0x56>
 80040f4:	f640 61a9 	movw	r1, #3753	@ 0xea9
 80040f8:	4807      	ldr	r0, [pc, #28]	@ (8004118 <vTaskStartScheduler+0x70>)
 80040fa:	f7fd fb37 	bl	800176c <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80040fe:	4b07      	ldr	r3, [pc, #28]	@ (800411c <vTaskStartScheduler+0x74>)
 8004100:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000d68 	.word	0x20000d68
 8004110:	20000d54 	.word	0x20000d54
 8004114:	20000d4c 	.word	0x20000d4c
 8004118:	08023e50 	.word	0x08023e50
 800411c:	20000008 	.word	0x20000008

08004120 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004124:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <vTaskSuspendAll+0x18>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	4a03      	ldr	r2, [pc, #12]	@ (8004138 <vTaskSuspendAll+0x18>)
 800412c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20000d70 	.word	0x20000d70

0800413c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800414a:	f001 fe69 	bl	8005e20 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8004152:	4b72      	ldr	r3, [pc, #456]	@ (800431c <xTaskResumeAll+0x1e0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <xTaskResumeAll+0x28>
 800415a:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800415e:	4870      	ldr	r0, [pc, #448]	@ (8004320 <xTaskResumeAll+0x1e4>)
 8004160:	f7fd fb04 	bl	800176c <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004164:	4b6d      	ldr	r3, [pc, #436]	@ (800431c <xTaskResumeAll+0x1e0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3b01      	subs	r3, #1
 800416a:	4a6c      	ldr	r2, [pc, #432]	@ (800431c <xTaskResumeAll+0x1e0>)
 800416c:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800416e:	4b6b      	ldr	r3, [pc, #428]	@ (800431c <xTaskResumeAll+0x1e0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 80ca 	bne.w	800430c <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004178:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <xTaskResumeAll+0x1e8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80c5 	beq.w	800430c <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004182:	e08e      	b.n	80042a2 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004184:	4b68      	ldr	r3, [pc, #416]	@ (8004328 <xTaskResumeAll+0x1ec>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	6a12      	ldr	r2, [r2, #32]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	69d2      	ldr	r2, [r2, #28]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3318      	adds	r3, #24
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d103      	bne.n	80041ba <xTaskResumeAll+0x7e>
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2200      	movs	r2, #0
 80041be:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	68d2      	ldr	r2, [r2, #12]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	6892      	ldr	r2, [r2, #8]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3304      	adds	r3, #4
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d103      	bne.n	80041f8 <xTaskResumeAll+0xbc>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2200      	movs	r2, #0
 80041fc:	615a      	str	r2, [r3, #20]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	4b46      	ldr	r3, [pc, #280]	@ (800432c <xTaskResumeAll+0x1f0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	4a45      	ldr	r2, [pc, #276]	@ (800432c <xTaskResumeAll+0x1f0>)
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421e:	4944      	ldr	r1, [pc, #272]	@ (8004330 <xTaskResumeAll+0x1f4>)
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	3304      	adds	r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	3204      	adds	r2, #4
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	1d1a      	adds	r2, r3, #4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4a34      	ldr	r2, [pc, #208]	@ (8004330 <xTaskResumeAll+0x1f4>)
 800425e:	441a      	add	r2, r3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	615a      	str	r2, [r3, #20]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004268:	4931      	ldr	r1, [pc, #196]	@ (8004330 <xTaskResumeAll+0x1f4>)
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800427a:	1c59      	adds	r1, r3, #1
 800427c:	482c      	ldr	r0, [pc, #176]	@ (8004330 <xTaskResumeAll+0x1f4>)
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4403      	add	r3, r0
 8004288:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428e:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <xTaskResumeAll+0x1f8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	429a      	cmp	r2, r3
 8004296:	d904      	bls.n	80042a2 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004298:	4a27      	ldr	r2, [pc, #156]	@ (8004338 <xTaskResumeAll+0x1fc>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2101      	movs	r1, #1
 800429e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a2:	4b21      	ldr	r3, [pc, #132]	@ (8004328 <xTaskResumeAll+0x1ec>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f47f af6c 	bne.w	8004184 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80042b2:	f000 fd27 	bl	8004d04 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042b6:	4b21      	ldr	r3, [pc, #132]	@ (800433c <xTaskResumeAll+0x200>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80042c2:	f000 f86d 	bl	80043a0 <xTaskIncrementTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80042cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004338 <xTaskResumeAll+0x1fc>)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2101      	movs	r1, #1
 80042d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3b01      	subs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ef      	bne.n	80042c2 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 80042e2:	4b16      	ldr	r3, [pc, #88]	@ (800433c <xTaskResumeAll+0x200>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80042e8:	4a13      	ldr	r2, [pc, #76]	@ (8004338 <xTaskResumeAll+0x1fc>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80042f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <xTaskResumeAll+0x1f8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <xTaskResumeAll+0x204>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800430c:	f001 fdb4 	bl	8005e78 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004310:	69bb      	ldr	r3, [r7, #24]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000d70 	.word	0x20000d70
 8004320:	08023e50 	.word	0x08023e50
 8004324:	20000d48 	.word	0x20000d48
 8004328:	20000d08 	.word	0x20000d08
 800432c:	20000d50 	.word	0x20000d50
 8004330:	20000c4c 	.word	0x20000c4c
 8004334:	20000c48 	.word	0x20000c48
 8004338:	20000d5c 	.word	0x20000d5c
 800433c:	20000d58 	.word	0x20000d58
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800434a:	4b05      	ldr	r3, [pc, #20]	@ (8004360 <xTaskGetTickCount+0x1c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004350:	687b      	ldr	r3, [r7, #4]
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000d4c 	.word	0x20000d4c

08004364 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <pcTaskGetName+0x14>
 8004372:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <pcTaskGetName+0x34>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	e000      	b.n	800437a <pcTaskGetName+0x16>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <pcTaskGetName+0x28>
 8004382:	f241 0155 	movw	r1, #4181	@ 0x1055
 8004386:	4805      	ldr	r0, [pc, #20]	@ (800439c <pcTaskGetName+0x38>)
 8004388:	f7fd f9f0 	bl	800176c <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3334      	adds	r3, #52	@ 0x34
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000c48 	.word	0x20000c48
 800439c:	08023e50 	.word	0x08023e50

080043a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80043aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004598 <xTaskIncrementTick+0x1f8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 80e8 	bne.w	8004584 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043b4:	4b79      	ldr	r3, [pc, #484]	@ (800459c <xTaskIncrementTick+0x1fc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80043bc:	4a77      	ldr	r2, [pc, #476]	@ (800459c <xTaskIncrementTick+0x1fc>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11a      	bne.n	80043fe <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 80043c8:	4b75      	ldr	r3, [pc, #468]	@ (80045a0 <xTaskIncrementTick+0x200>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <xTaskIncrementTick+0x3c>
 80043d2:	f241 215f 	movw	r1, #4703	@ 0x125f
 80043d6:	4873      	ldr	r0, [pc, #460]	@ (80045a4 <xTaskIncrementTick+0x204>)
 80043d8:	f7fd f9c8 	bl	800176c <vAssertCalled>
 80043dc:	4b70      	ldr	r3, [pc, #448]	@ (80045a0 <xTaskIncrementTick+0x200>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	4b71      	ldr	r3, [pc, #452]	@ (80045a8 <xTaskIncrementTick+0x208>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6e      	ldr	r2, [pc, #440]	@ (80045a0 <xTaskIncrementTick+0x200>)
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4a6f      	ldr	r2, [pc, #444]	@ (80045a8 <xTaskIncrementTick+0x208>)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b6e      	ldr	r3, [pc, #440]	@ (80045ac <xTaskIncrementTick+0x20c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	4a6d      	ldr	r2, [pc, #436]	@ (80045ac <xTaskIncrementTick+0x20c>)
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	f000 fc83 	bl	8004d04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80043fe:	4b6c      	ldr	r3, [pc, #432]	@ (80045b0 <xTaskIncrementTick+0x210>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	429a      	cmp	r2, r3
 8004406:	f0c0 80a8 	bcc.w	800455a <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440a:	4b65      	ldr	r3, [pc, #404]	@ (80045a0 <xTaskIncrementTick+0x200>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004414:	4b66      	ldr	r3, [pc, #408]	@ (80045b0 <xTaskIncrementTick+0x210>)
 8004416:	f04f 32ff 	mov.w	r2, #4294967295
 800441a:	601a      	str	r2, [r3, #0]
                    break;
 800441c:	e09d      	b.n	800455a <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800441e:	4b60      	ldr	r3, [pc, #384]	@ (80045a0 <xTaskIncrementTick+0x200>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	429a      	cmp	r2, r3
 8004434:	d203      	bcs.n	800443e <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004436:	4a5e      	ldr	r2, [pc, #376]	@ (80045b0 <xTaskIncrementTick+0x210>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6013      	str	r3, [r2, #0]
                        break;
 800443c:	e08d      	b.n	800455a <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	68d2      	ldr	r2, [r2, #12]
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	6892      	ldr	r2, [r2, #8]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	3304      	adds	r3, #4
 8004460:	429a      	cmp	r2, r3
 8004462:	d103      	bne.n	800446c <xTaskIncrementTick+0xcc>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2200      	movs	r2, #0
 8004470:	615a      	str	r2, [r3, #20]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01e      	beq.n	80044c2 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	6a12      	ldr	r2, [r2, #32]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	69d2      	ldr	r2, [r2, #28]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3318      	adds	r3, #24
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d103      	bne.n	80044b2 <xTaskIncrementTick+0x112>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2200      	movs	r2, #0
 80044b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	1e5a      	subs	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	2201      	movs	r2, #1
 80044c8:	409a      	lsls	r2, r3
 80044ca:	4b3a      	ldr	r3, [pc, #232]	@ (80045b4 <xTaskIncrementTick+0x214>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	4a38      	ldr	r2, [pc, #224]	@ (80045b4 <xTaskIncrementTick+0x214>)
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d8:	4937      	ldr	r1, [pc, #220]	@ (80045b8 <xTaskIncrementTick+0x218>)
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3304      	adds	r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	3204      	adds	r2, #4
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1d1a      	adds	r2, r3, #4
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a28      	ldr	r2, [pc, #160]	@ (80045b8 <xTaskIncrementTick+0x218>)
 8004518:	441a      	add	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	615a      	str	r2, [r3, #20]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004522:	4925      	ldr	r1, [pc, #148]	@ (80045b8 <xTaskIncrementTick+0x218>)
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004534:	1c59      	adds	r1, r3, #1
 8004536:	4820      	ldr	r0, [pc, #128]	@ (80045b8 <xTaskIncrementTick+0x218>)
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4403      	add	r3, r0
 8004542:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004548:	4b1c      	ldr	r3, [pc, #112]	@ (80045bc <xTaskIncrementTick+0x21c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	429a      	cmp	r2, r3
 8004550:	f67f af5b 	bls.w	800440a <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004558:	e757      	b.n	800440a <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800455a:	4b18      	ldr	r3, [pc, #96]	@ (80045bc <xTaskIncrementTick+0x21c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004560:	4915      	ldr	r1, [pc, #84]	@ (80045b8 <xTaskIncrementTick+0x218>)
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d901      	bls.n	8004576 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004572:	2301      	movs	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <xTaskIncrementTick+0x220>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 800457e:	2301      	movs	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e004      	b.n	800458e <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004584:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <xTaskIncrementTick+0x224>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <xTaskIncrementTick+0x224>)
 800458c:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800458e:	69fb      	ldr	r3, [r7, #28]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	20000d70 	.word	0x20000d70
 800459c:	20000d4c 	.word	0x20000d4c
 80045a0:	20000d00 	.word	0x20000d00
 80045a4:	08023e50 	.word	0x08023e50
 80045a8:	20000d04 	.word	0x20000d04
 80045ac:	20000d60 	.word	0x20000d60
 80045b0:	20000d68 	.word	0x20000d68
 80045b4:	20000d50 	.word	0x20000d50
 80045b8:	20000c4c 	.word	0x20000c4c
 80045bc:	20000c48 	.word	0x20000c48
 80045c0:	20000d5c 	.word	0x20000d5c
 80045c4:	20000d58 	.word	0x20000d58

080045c8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80045ce:	4b30      	ldr	r3, [pc, #192]	@ (8004690 <vTaskSwitchContext+0xc8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80045d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004694 <vTaskSwitchContext+0xcc>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80045dc:	e053      	b.n	8004686 <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 80045de:	4b2d      	ldr	r3, [pc, #180]	@ (8004694 <vTaskSwitchContext+0xcc>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 80045e4:	f7fd f8ba 	bl	800175c <ulGetRunTimeCounterValue>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004698 <vTaskSwitchContext+0xd0>)
 80045ec:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 80045ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004698 <vTaskSwitchContext+0xd0>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <vTaskSwitchContext+0xd4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d909      	bls.n	800460e <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 80045fa:	4b27      	ldr	r3, [pc, #156]	@ (8004698 <vTaskSwitchContext+0xd0>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b27      	ldr	r3, [pc, #156]	@ (800469c <vTaskSwitchContext+0xd4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1ad1      	subs	r1, r2, r3
 8004604:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <vTaskSwitchContext+0xd8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800460a:	440a      	add	r2, r1
 800460c:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 800460e:	4b22      	ldr	r3, [pc, #136]	@ (8004698 <vTaskSwitchContext+0xd0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a22      	ldr	r2, [pc, #136]	@ (800469c <vTaskSwitchContext+0xd4>)
 8004614:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004616:	4b23      	ldr	r3, [pc, #140]	@ (80046a4 <vTaskSwitchContext+0xdc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f1c3 031f 	rsb	r3, r3, #31
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	491e      	ldr	r1, [pc, #120]	@ (80046a8 <vTaskSwitchContext+0xe0>)
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <vTaskSwitchContext+0x82>
 8004640:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8004644:	4819      	ldr	r0, [pc, #100]	@ (80046ac <vTaskSwitchContext+0xe4>)
 8004646:	f7fd f891 	bl	800176c <vAssertCalled>
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4a14      	ldr	r2, [pc, #80]	@ (80046a8 <vTaskSwitchContext+0xe0>)
 8004656:	4413      	add	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	3308      	adds	r3, #8
 800466c:	429a      	cmp	r2, r3
 800466e:	d103      	bne.n	8004678 <vTaskSwitchContext+0xb0>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4a08      	ldr	r2, [pc, #32]	@ (80046a0 <vTaskSwitchContext+0xd8>)
 8004680:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004682:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <vTaskSwitchContext+0xd8>)
 8004684:	681b      	ldr	r3, [r3, #0]
    }
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000d70 	.word	0x20000d70
 8004694:	20000d5c 	.word	0x20000d5c
 8004698:	20000d78 	.word	0x20000d78
 800469c:	20000d74 	.word	0x20000d74
 80046a0:	20000c48 	.word	0x20000c48
 80046a4:	20000d50 	.word	0x20000d50
 80046a8:	20000c4c 	.word	0x20000c4c
 80046ac:	08023e50 	.word	0x08023e50

080046b0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <vTaskPlaceOnEventList+0x1a>
 80046c0:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 80046c4:	4808      	ldr	r0, [pc, #32]	@ (80046e8 <vTaskPlaceOnEventList+0x38>)
 80046c6:	f7fd f851 	bl	800176c <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046ca:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <vTaskPlaceOnEventList+0x3c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3318      	adds	r3, #24
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe fca1 	bl	800301a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d8:	2101      	movs	r1, #1
 80046da:	6838      	ldr	r0, [r7, #0]
 80046dc:	f001 f9e4 	bl	8005aa8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	08023e50 	.word	0x08023e50
 80046ec:	20000c48 	.word	0x20000c48

080046f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <vTaskPlaceOnUnorderedEventList+0x1c>
 8004702:	f241 419e 	movw	r1, #5278	@ 0x149e
 8004706:	481d      	ldr	r0, [pc, #116]	@ (800477c <vTaskPlaceOnUnorderedEventList+0x8c>)
 8004708:	f7fd f830 	bl	800176c <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800470c:	4b1c      	ldr	r3, [pc, #112]	@ (8004780 <vTaskPlaceOnUnorderedEventList+0x90>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <vTaskPlaceOnUnorderedEventList+0x2e>
 8004714:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 8004718:	4818      	ldr	r0, [pc, #96]	@ (800477c <vTaskPlaceOnUnorderedEventList+0x8c>)
 800471a:	f7fd f827 	bl	800176c <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800471e:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004728:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	61da      	str	r2, [r3, #28]
 8004738:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <vTaskPlaceOnUnorderedEventList+0x94>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	621a      	str	r2, [r3, #32]
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	3218      	adds	r2, #24
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f103 0218 	add.w	r2, r3, #24
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <vTaskPlaceOnUnorderedEventList+0x94>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	629a      	str	r2, [r3, #40]	@ 0x28
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800476c:	2101      	movs	r1, #1
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f001 f99a 	bl	8005aa8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8004774:	bf00      	nop
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	08023e50 	.word	0x08023e50
 8004780:	20000d70 	.word	0x20000d70
 8004784:	20000c48 	.word	0x20000c48

08004788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <xTaskRemoveFromEventList+0x20>
 800479e:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 80047a2:	485b      	ldr	r0, [pc, #364]	@ (8004910 <xTaskRemoveFromEventList+0x188>)
 80047a4:	f7fc ffe2 	bl	800176c <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	6a12      	ldr	r2, [r2, #32]
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	69d2      	ldr	r2, [r2, #28]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3318      	adds	r3, #24
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d103      	bne.n	80047d6 <xTaskRemoveFromEventList+0x4e>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2200      	movs	r2, #0
 80047da:	629a      	str	r2, [r3, #40]	@ 0x28
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	1e5a      	subs	r2, r3, #1
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80047e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004914 <xTaskRemoveFromEventList+0x18c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d160      	bne.n	80048b0 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	68d2      	ldr	r2, [r2, #12]
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	6892      	ldr	r2, [r2, #8]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	3304      	adds	r3, #4
 8004810:	429a      	cmp	r2, r3
 8004812:	d103      	bne.n	800481c <xTaskRemoveFromEventList+0x94>
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2200      	movs	r2, #0
 8004820:	615a      	str	r2, [r3, #20]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	1e5a      	subs	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	2201      	movs	r2, #1
 8004832:	409a      	lsls	r2, r3
 8004834:	4b38      	ldr	r3, [pc, #224]	@ (8004918 <xTaskRemoveFromEventList+0x190>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4313      	orrs	r3, r2
 800483a:	4a37      	ldr	r2, [pc, #220]	@ (8004918 <xTaskRemoveFromEventList+0x190>)
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004842:	4936      	ldr	r1, [pc, #216]	@ (800491c <xTaskRemoveFromEventList+0x194>)
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	3304      	adds	r3, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	3204      	adds	r2, #4
 800486a:	605a      	str	r2, [r3, #4]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1d1a      	adds	r2, r3, #4
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4a26      	ldr	r2, [pc, #152]	@ (800491c <xTaskRemoveFromEventList+0x194>)
 8004882:	441a      	add	r2, r3
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	615a      	str	r2, [r3, #20]
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	4923      	ldr	r1, [pc, #140]	@ (800491c <xTaskRemoveFromEventList+0x194>)
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	481e      	ldr	r0, [pc, #120]	@ (800491c <xTaskRemoveFromEventList+0x194>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4403      	add	r3, r0
 80048ac:	6019      	str	r1, [r3, #0]
 80048ae:	e01b      	b.n	80048e8 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004920 <xTaskRemoveFromEventList+0x198>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	61da      	str	r2, [r3, #28]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	621a      	str	r2, [r3, #32]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	3218      	adds	r2, #24
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f103 0218 	add.w	r2, r3, #24
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	4a11      	ldr	r2, [pc, #68]	@ (8004920 <xTaskRemoveFromEventList+0x198>)
 80048dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <xTaskRemoveFromEventList+0x198>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004920 <xTaskRemoveFromEventList+0x198>)
 80048e6:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <xTaskRemoveFromEventList+0x19c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d905      	bls.n	8004902 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <xTaskRemoveFromEventList+0x1a0>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e001      	b.n	8004906 <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8004906:	69fb      	ldr	r3, [r7, #28]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	08023e50 	.word	0x08023e50
 8004914:	20000d70 	.word	0x20000d70
 8004918:	20000d50 	.word	0x20000d50
 800491c:	20000c4c 	.word	0x20000c4c
 8004920:	20000d08 	.word	0x20000d08
 8004924:	20000c48 	.word	0x20000c48
 8004928:	20000d5c 	.word	0x20000d5c

0800492c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004936:	4b52      	ldr	r3, [pc, #328]	@ (8004a80 <vTaskRemoveFromUnorderedEventList+0x154>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <vTaskRemoveFromUnorderedEventList+0x1c>
 800493e:	f241 5143 	movw	r1, #5443	@ 0x1543
 8004942:	4850      	ldr	r0, [pc, #320]	@ (8004a84 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004944:	f7fc ff12 	bl	800176c <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <vTaskRemoveFromUnorderedEventList+0x3c>
 800495e:	f241 514e 	movw	r1, #5454	@ 0x154e
 8004962:	4848      	ldr	r0, [pc, #288]	@ (8004a84 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004964:	f7fc ff02 	bl	800176c <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6892      	ldr	r2, [r2, #8]
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6852      	ldr	r2, [r2, #4]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d103      	bne.n	8004994 <vTaskRemoveFromUnorderedEventList+0x68>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1e5a      	subs	r2, r3, #1
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	68d2      	ldr	r2, [r2, #12]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	3304      	adds	r3, #4
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d103      	bne.n	80049d2 <vTaskRemoveFromUnorderedEventList+0xa6>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	615a      	str	r2, [r3, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	2201      	movs	r2, #1
 80049e8:	409a      	lsls	r2, r3
 80049ea:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <vTaskRemoveFromUnorderedEventList+0x15c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	4a25      	ldr	r2, [pc, #148]	@ (8004a88 <vTaskRemoveFromUnorderedEventList+0x15c>)
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	4924      	ldr	r1, [pc, #144]	@ (8004a8c <vTaskRemoveFromUnorderedEventList+0x160>)
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3304      	adds	r3, #4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	60da      	str	r2, [r3, #12]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	3204      	adds	r2, #4
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	1d1a      	adds	r2, r3, #4
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	609a      	str	r2, [r3, #8]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4a15      	ldr	r2, [pc, #84]	@ (8004a8c <vTaskRemoveFromUnorderedEventList+0x160>)
 8004a38:	441a      	add	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	615a      	str	r2, [r3, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a42:	4912      	ldr	r1, [pc, #72]	@ (8004a8c <vTaskRemoveFromUnorderedEventList+0x160>)
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	480d      	ldr	r0, [pc, #52]	@ (8004a8c <vTaskRemoveFromUnorderedEventList+0x160>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4403      	add	r3, r0
 8004a62:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a68:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <vTaskRemoveFromUnorderedEventList+0x164>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d902      	bls.n	8004a78 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8004a72:	4b08      	ldr	r3, [pc, #32]	@ (8004a94 <vTaskRemoveFromUnorderedEventList+0x168>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000d70 	.word	0x20000d70
 8004a84:	08023e50 	.word	0x08023e50
 8004a88:	20000d50 	.word	0x20000d50
 8004a8c:	20000c4c 	.word	0x20000c4c
 8004a90:	20000c48 	.word	0x20000c48
 8004a94:	20000d5c 	.word	0x20000d5c

08004a98 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <vTaskSetTimeOutState+0x18>
 8004aa6:	f241 5186 	movw	r1, #5510	@ 0x1586
 8004aaa:	4809      	ldr	r0, [pc, #36]	@ (8004ad0 <vTaskSetTimeOutState+0x38>)
 8004aac:	f7fc fe5e 	bl	800176c <vAssertCalled>
    taskENTER_CRITICAL();
 8004ab0:	f001 f9b6 	bl	8005e20 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	@ (8004ad4 <vTaskSetTimeOutState+0x3c>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <vTaskSetTimeOutState+0x40>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8004ac4:	f001 f9d8 	bl	8005e78 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	08023e50 	.word	0x08023e50
 8004ad4:	20000d60 	.word	0x20000d60
 8004ad8:	20000d4c 	.word	0x20000d4c

08004adc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <vTaskInternalSetTimeOutState+0x24>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <vTaskInternalSetTimeOutState+0x28>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000d60 	.word	0x20000d60
 8004b04:	20000d4c 	.word	0x20000d4c

08004b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <xTaskCheckForTimeOut+0x1a>
 8004b18:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8004b1c:	4825      	ldr	r0, [pc, #148]	@ (8004bb4 <xTaskCheckForTimeOut+0xac>)
 8004b1e:	f7fc fe25 	bl	800176c <vAssertCalled>
    configASSERT( pxTicksToWait );
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <xTaskCheckForTimeOut+0x2a>
 8004b28:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8004b2c:	4821      	ldr	r0, [pc, #132]	@ (8004bb4 <xTaskCheckForTimeOut+0xac>)
 8004b2e:	f7fc fe1d 	bl	800176c <vAssertCalled>

    taskENTER_CRITICAL();
 8004b32:	f001 f975 	bl	8005e20 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004b36:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <xTaskCheckForTimeOut+0xb0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d102      	bne.n	8004b56 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e026      	b.n	8004ba4 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b18      	ldr	r3, [pc, #96]	@ (8004bbc <xTaskCheckForTimeOut+0xb4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d00a      	beq.n	8004b78 <xTaskCheckForTimeOut+0x70>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d305      	bcc.n	8004b78 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e015      	b.n	8004ba4 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20b      	bcs.n	8004b9a <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad2      	subs	r2, r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ffa4 	bl	8004adc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e004      	b.n	8004ba4 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004ba4:	f001 f968 	bl	8005e78 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8004ba8:	697b      	ldr	r3, [r7, #20]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	08023e50 	.word	0x08023e50
 8004bb8:	20000d4c 	.word	0x20000d4c
 8004bbc:	20000d60 	.word	0x20000d60

08004bc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	@ (8004bd4 <vTaskMissedYield+0x14>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000d5c 	.word	0x20000d5c

08004bd8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004be0:	f000 f852 	bl	8004c88 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004be4:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <prvIdleTask+0x28>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d9f9      	bls.n	8004be0 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <prvIdleTask+0x2c>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004bfc:	e7f0      	b.n	8004be0 <prvIdleTask+0x8>
 8004bfe:	bf00      	nop
 8004c00:	20000c4c 	.word	0x20000c4c
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	e00c      	b.n	8004c2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4a12      	ldr	r2, [pc, #72]	@ (8004c68 <prvInitialiseTaskLists+0x60>)
 8004c20:	4413      	add	r3, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe f9a8 	bl	8002f78 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b06      	cmp	r3, #6
 8004c32:	d9ef      	bls.n	8004c14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004c34:	480d      	ldr	r0, [pc, #52]	@ (8004c6c <prvInitialiseTaskLists+0x64>)
 8004c36:	f7fe f99f 	bl	8002f78 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004c3a:	480d      	ldr	r0, [pc, #52]	@ (8004c70 <prvInitialiseTaskLists+0x68>)
 8004c3c:	f7fe f99c 	bl	8002f78 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004c40:	480c      	ldr	r0, [pc, #48]	@ (8004c74 <prvInitialiseTaskLists+0x6c>)
 8004c42:	f7fe f999 	bl	8002f78 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004c46:	480c      	ldr	r0, [pc, #48]	@ (8004c78 <prvInitialiseTaskLists+0x70>)
 8004c48:	f7fe f996 	bl	8002f78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004c4c:	480b      	ldr	r0, [pc, #44]	@ (8004c7c <prvInitialiseTaskLists+0x74>)
 8004c4e:	f7fe f993 	bl	8002f78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004c52:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <prvInitialiseTaskLists+0x78>)
 8004c54:	4a05      	ldr	r2, [pc, #20]	@ (8004c6c <prvInitialiseTaskLists+0x64>)
 8004c56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <prvInitialiseTaskLists+0x7c>)
 8004c5a:	4a05      	ldr	r2, [pc, #20]	@ (8004c70 <prvInitialiseTaskLists+0x68>)
 8004c5c:	601a      	str	r2, [r3, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000c4c 	.word	0x20000c4c
 8004c6c:	20000cd8 	.word	0x20000cd8
 8004c70:	20000cec 	.word	0x20000cec
 8004c74:	20000d08 	.word	0x20000d08
 8004c78:	20000d1c 	.word	0x20000d1c
 8004c7c:	20000d34 	.word	0x20000d34
 8004c80:	20000d00 	.word	0x20000d00
 8004c84:	20000d04 	.word	0x20000d04

08004c88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c8e:	e019      	b.n	8004cc4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004c90:	f001 f8c6 	bl	8005e20 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004c94:	4b10      	ldr	r3, [pc, #64]	@ (8004cd8 <prvCheckTasksWaitingTermination+0x50>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe f9f3 	bl	800308c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <prvCheckTasksWaitingTermination+0x54>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	4a0b      	ldr	r2, [pc, #44]	@ (8004cdc <prvCheckTasksWaitingTermination+0x54>)
 8004cae:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <prvCheckTasksWaitingTermination+0x58>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <prvCheckTasksWaitingTermination+0x58>)
 8004cb8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004cba:	f001 f8dd 	bl	8005e78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f810 	bl	8004ce4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <prvCheckTasksWaitingTermination+0x58>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e1      	bne.n	8004c90 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000d1c 	.word	0x20000d1c
 8004cdc:	20000d48 	.word	0x20000d48
 8004ce0:	20000d30 	.word	0x20000d30

08004ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 fa6b 	bl	80061cc <vPortFree>
            vPortFree( pxTCB );
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 fa68 	bl	80061cc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <prvResetNextTaskUnblockTime+0x30>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004d12:	4b09      	ldr	r3, [pc, #36]	@ (8004d38 <prvResetNextTaskUnblockTime+0x34>)
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295
 8004d18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004d1a:	e005      	b.n	8004d28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <prvResetNextTaskUnblockTime+0x30>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a04      	ldr	r2, [pc, #16]	@ (8004d38 <prvResetNextTaskUnblockTime+0x34>)
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000d00 	.word	0x20000d00
 8004d38:	20000d68 	.word	0x20000d68

08004d3c <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <xTaskGetCurrentTaskHandle+0x1c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8004d48:	687b      	ldr	r3, [r7, #4]
        }
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000c48 	.word	0x20000c48

08004d5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004d62:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <xTaskGetSchedulerState+0x34>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	e008      	b.n	8004d82 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004d70:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <xTaskGetSchedulerState+0x38>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	e001      	b.n	8004d82 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8004d82:	687b      	ldr	r3, [r7, #4]
    }
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000d54 	.word	0x20000d54
 8004d94:	20000d70 	.word	0x20000d70

08004d98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8089 	beq.w	8004ec2 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db4:	4b45      	ldr	r3, [pc, #276]	@ (8004ecc <xTaskPriorityInherit+0x134>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d278      	bcs.n	8004eb0 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	db06      	blt.n	8004dd4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <xTaskPriorityInherit+0x134>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	f1c3 0207 	rsb	r2, r3, #7
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6959      	ldr	r1, [r3, #20]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed0 <xTaskPriorityInherit+0x138>)
 8004de6:	4413      	add	r3, r2
 8004de8:	4299      	cmp	r1, r3
 8004dea:	d159      	bne.n	8004ea0 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe f94b 	bl	800308c <uxListRemove>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	2201      	movs	r2, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43da      	mvns	r2, r3
 8004e08:	4b32      	ldr	r3, [pc, #200]	@ (8004ed4 <xTaskPriorityInherit+0x13c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	4a31      	ldr	r2, [pc, #196]	@ (8004ed4 <xTaskPriorityInherit+0x13c>)
 8004e10:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e12:	4b2e      	ldr	r3, [pc, #184]	@ (8004ecc <xTaskPriorityInherit+0x134>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	2201      	movs	r2, #1
 8004e22:	409a      	lsls	r2, r3
 8004e24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed4 <xTaskPriorityInherit+0x13c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed4 <xTaskPriorityInherit+0x13c>)
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e32:	4927      	ldr	r1, [pc, #156]	@ (8004ed0 <xTaskPriorityInherit+0x138>)
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3304      	adds	r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	609a      	str	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	3204      	adds	r2, #4
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4a17      	ldr	r2, [pc, #92]	@ (8004ed0 <xTaskPriorityInherit+0x138>)
 8004e72:	441a      	add	r2, r3
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	615a      	str	r2, [r3, #20]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e7c:	4914      	ldr	r1, [pc, #80]	@ (8004ed0 <xTaskPriorityInherit+0x138>)
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	480f      	ldr	r0, [pc, #60]	@ (8004ed0 <xTaskPriorityInherit+0x138>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4403      	add	r3, r0
 8004e9c:	6019      	str	r1, [r3, #0]
 8004e9e:	e004      	b.n	8004eaa <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <xTaskPriorityInherit+0x134>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e008      	b.n	8004ec2 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004eb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <xTaskPriorityInherit+0x134>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d201      	bcs.n	8004ec2 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8004ec2:	697b      	ldr	r3, [r7, #20]
    }
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000c48 	.word	0x20000c48
 8004ed0:	20000c4c 	.word	0x20000c4c
 8004ed4:	20000d50 	.word	0x20000d50

08004ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8082 	beq.w	8004ff4 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004ef0:	4b43      	ldr	r3, [pc, #268]	@ (8005000 <xTaskPriorityDisinherit+0x128>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d004      	beq.n	8004f04 <xTaskPriorityDisinherit+0x2c>
 8004efa:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8004efe:	4841      	ldr	r0, [pc, #260]	@ (8005004 <xTaskPriorityDisinherit+0x12c>)
 8004f00:	f7fc fc34 	bl	800176c <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <xTaskPriorityDisinherit+0x3e>
 8004f0c:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8004f10:	483c      	ldr	r0, [pc, #240]	@ (8005004 <xTaskPriorityDisinherit+0x12c>)
 8004f12:	f7fc fc2b 	bl	800176c <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1a:	1e5a      	subs	r2, r3, #1
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d063      	beq.n	8004ff4 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d15f      	bne.n	8004ff4 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f8a7 	bl	800308c <uxListRemove>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	2201      	movs	r2, #1
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43da      	mvns	r2, r3
 8004f50:	4b2d      	ldr	r3, [pc, #180]	@ (8005008 <xTaskPriorityDisinherit+0x130>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4013      	ands	r3, r2
 8004f56:	4a2c      	ldr	r2, [pc, #176]	@ (8005008 <xTaskPriorityDisinherit+0x130>)
 8004f58:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	f1c3 0207 	rsb	r2, r3, #7
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	2201      	movs	r2, #1
 8004f74:	409a      	lsls	r2, r3
 8004f76:	4b24      	ldr	r3, [pc, #144]	@ (8005008 <xTaskPriorityDisinherit+0x130>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	4a22      	ldr	r2, [pc, #136]	@ (8005008 <xTaskPriorityDisinherit+0x130>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f84:	4921      	ldr	r1, [pc, #132]	@ (800500c <xTaskPriorityDisinherit+0x134>)
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3304      	adds	r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	3204      	adds	r2, #4
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4a12      	ldr	r2, [pc, #72]	@ (800500c <xTaskPriorityDisinherit+0x134>)
 8004fc4:	441a      	add	r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	615a      	str	r2, [r3, #20]
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fce:	490f      	ldr	r1, [pc, #60]	@ (800500c <xTaskPriorityDisinherit+0x134>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	480a      	ldr	r0, [pc, #40]	@ (800500c <xTaskPriorityDisinherit+0x134>)
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4403      	add	r3, r0
 8004fee:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8004ff4:	697b      	ldr	r3, [r7, #20]
    }
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000c48 	.word	0x20000c48
 8005004:	08023e50 	.word	0x08023e50
 8005008:	20000d50 	.word	0x20000d50
 800500c:	20000c4c 	.word	0x20000c4c

08005010 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8096 	beq.w	8005156 <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8005032:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8005036:	484a      	ldr	r0, [pc, #296]	@ (8005160 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005038:	f7fc fb98 	bl	800176c <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d902      	bls.n	800504c <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	e002      	b.n	8005052 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005050:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	429a      	cmp	r2, r3
 800505a:	d07c      	beq.n	8005156 <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	429a      	cmp	r2, r3
 8005064:	d177      	bne.n	8005156 <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005066:	4b3f      	ldr	r3, [pc, #252]	@ (8005164 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	429a      	cmp	r2, r3
 800506e:	d104      	bne.n	800507a <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8005070:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8005074:	483a      	ldr	r0, [pc, #232]	@ (8005160 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005076:	f7fc fb79 	bl	800176c <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	db04      	blt.n	8005098 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f1c3 0207 	rsb	r2, r3, #7
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	6959      	ldr	r1, [r3, #20]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4a30      	ldr	r2, [pc, #192]	@ (8005168 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80050a8:	4413      	add	r3, r2
 80050aa:	4299      	cmp	r1, r3
 80050ac:	d153      	bne.n	8005156 <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fd ffea 	bl	800308c <uxListRemove>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	2201      	movs	r2, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43da      	mvns	r2, r3
 80050ca:	4b28      	ldr	r3, [pc, #160]	@ (800516c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4013      	ands	r3, r2
 80050d0:	4a26      	ldr	r2, [pc, #152]	@ (800516c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80050d2:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	2201      	movs	r2, #1
 80050da:	409a      	lsls	r2, r3
 80050dc:	4b23      	ldr	r3, [pc, #140]	@ (800516c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	4a22      	ldr	r2, [pc, #136]	@ (800516c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ea:	491f      	ldr	r1, [pc, #124]	@ (8005168 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	3304      	adds	r3, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	609a      	str	r2, [r3, #8]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	3204      	adds	r2, #4
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	1d1a      	adds	r2, r3, #4
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4a0f      	ldr	r2, [pc, #60]	@ (8005168 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800512a:	441a      	add	r2, r3
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	615a      	str	r2, [r3, #20]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005134:	490c      	ldr	r1, [pc, #48]	@ (8005168 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	4807      	ldr	r0, [pc, #28]	@ (8005168 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4403      	add	r3, r0
 8005154:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8005156:	bf00      	nop
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	08023e50 	.word	0x08023e50
 8005164:	20000c48 	.word	0x20000c48
 8005168:	20000c4c 	.word	0x20000c4c
 800516c:	20000d50 	.word	0x20000d50

08005170 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <uxTaskResetEventItemValue+0x2c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <uxTaskResetEventItemValue+0x2c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <uxTaskResetEventItemValue+0x2c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f1c2 0207 	rsb	r2, r2, #7
 800518c:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 800518e:	687b      	ldr	r3, [r7, #4]
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	20000c48 	.word	0x20000c48

080051a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80051a6:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <pvTaskIncrementMutexHeldCount+0x2c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80051bc:	687b      	ldr	r3, [r7, #4]
    }
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000c48 	.word	0x20000c48

080051d0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <ulTaskGenericNotifyTake+0x20>
 80051e6:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 80051ea:	4833      	ldr	r0, [pc, #204]	@ (80052b8 <ulTaskGenericNotifyTake+0xe8>)
 80051ec:	f7fc fabe 	bl	800176c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80051f0:	f7fe ff96 	bl	8004120 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 80051f4:	f000 fe14 	bl	8005e20 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 80051f8:	4b30      	ldr	r3, [pc, #192]	@ (80052bc <ulTaskGenericNotifyTake+0xec>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3318      	adds	r3, #24
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800520a:	4b2c      	ldr	r3, [pc, #176]	@ (80052bc <ulTaskGenericNotifyTake+0xec>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	3368      	adds	r3, #104	@ 0x68
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 800521e:	2301      	movs	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005222:	f000 fe29 	bl	8005e78 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d103      	bne.n	8005234 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800522c:	2101      	movs	r1, #1
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fc3a 	bl	8005aa8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005234:	f7fe ff82 	bl	800413c <xTaskResumeAll>
 8005238:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d10a      	bne.n	8005256 <ulTaskGenericNotifyTake+0x86>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d107      	bne.n	8005256 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8005246:	4b1e      	ldr	r3, [pc, #120]	@ (80052c0 <ulTaskGenericNotifyTake+0xf0>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005256:	f000 fde3 	bl	8005e20 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800525a:	4b18      	ldr	r3, [pc, #96]	@ (80052bc <ulTaskGenericNotifyTake+0xec>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3318      	adds	r3, #24
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d014      	beq.n	800529a <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8005276:	4b11      	ldr	r3, [pc, #68]	@ (80052bc <ulTaskGenericNotifyTake+0xec>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3318      	adds	r3, #24
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	e008      	b.n	800529a <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8005288:	4b0c      	ldr	r3, [pc, #48]	@ (80052bc <ulTaskGenericNotifyTake+0xec>)
 800528a:	6819      	ldr	r1, [r3, #0]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	1e5a      	subs	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3318      	adds	r3, #24
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 800529a:	4b08      	ldr	r3, [pc, #32]	@ (80052bc <ulTaskGenericNotifyTake+0xec>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	3368      	adds	r3, #104	@ 0x68
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80052a8:	f000 fde6 	bl	8005e78 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 80052ac:	697b      	ldr	r3, [r7, #20]
    }
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	08023e50 	.word	0x08023e50
 80052bc:	20000c48 	.word	0x20000c48
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <xTaskGenericNotifyWait+0x22>
 80052dc:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 80052e0:	483e      	ldr	r0, [pc, #248]	@ (80053dc <xTaskGenericNotifyWait+0x118>)
 80052e2:	f7fc fa43 	bl	800176c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80052e6:	f7fe ff1b 	bl	8004120 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 80052ea:	f000 fd99 	bl	8005e20 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80052ee:	4b3c      	ldr	r3, [pc, #240]	@ (80053e0 <xTaskGenericNotifyWait+0x11c>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	3368      	adds	r3, #104	@ 0x68
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d01a      	beq.n	8005336 <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005300:	4b37      	ldr	r3, [pc, #220]	@ (80053e0 <xTaskGenericNotifyWait+0x11c>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3318      	adds	r3, #24
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	43db      	mvns	r3, r3
 8005312:	4019      	ands	r1, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3318      	adds	r3, #24
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800531e:	4b30      	ldr	r3, [pc, #192]	@ (80053e0 <xTaskGenericNotifyWait+0x11c>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	3368      	adds	r3, #104	@ 0x68
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8005332:	2301      	movs	r3, #1
 8005334:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005336:	f000 fd9f 	bl	8005e78 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d103      	bne.n	8005348 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005340:	2101      	movs	r1, #1
 8005342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005344:	f000 fbb0 	bl	8005aa8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005348:	f7fe fef8 	bl	800413c <xTaskResumeAll>
 800534c:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10a      	bne.n	800536a <xTaskGenericNotifyWait+0xa6>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 800535a:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <xTaskGenericNotifyWait+0x120>)
 800535c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800536a:	f000 fd59 	bl	8005e20 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005374:	4b1a      	ldr	r3, [pc, #104]	@ (80053e0 <xTaskGenericNotifyWait+0x11c>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3318      	adds	r3, #24
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005386:	4b16      	ldr	r3, [pc, #88]	@ (80053e0 <xTaskGenericNotifyWait+0x11c>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	3368      	adds	r3, #104	@ 0x68
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d002      	beq.n	800539e <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e010      	b.n	80053c0 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 800539e:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <xTaskGenericNotifyWait+0x11c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3318      	adds	r3, #24
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	4019      	ands	r1, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3318      	adds	r3, #24
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <xTaskGenericNotifyWait+0x11c>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	3368      	adds	r3, #104	@ 0x68
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80053ce:	f000 fd53 	bl	8005e78 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80053d2:	69fb      	ldr	r3, [r7, #28]
    }
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	08023e50 	.word	0x08023e50
 80053e0:	20000c48 	.word	0x20000c48
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80053f6:	2301      	movs	r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <xTaskGenericNotify+0x22>
 8005400:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8005404:	487b      	ldr	r0, [pc, #492]	@ (80055f4 <xTaskGenericNotify+0x20c>)
 8005406:	f7fc f9b1 	bl	800176c <vAssertCalled>
        configASSERT( xTaskToNotify );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <xTaskGenericNotify+0x32>
 8005410:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8005414:	4877      	ldr	r0, [pc, #476]	@ (80055f4 <xTaskGenericNotify+0x20c>)
 8005416:	f7fc f9a9 	bl	800176c <vAssertCalled>
        pxTCB = xTaskToNotify;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 800541e:	f000 fcff 	bl	8005e20 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3318      	adds	r3, #24
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005438:	6a3a      	ldr	r2, [r7, #32]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	3368      	adds	r3, #104	@ 0x68
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005444:	6a3a      	ldr	r2, [r7, #32]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4413      	add	r3, r2
 800544a:	3368      	adds	r3, #104	@ 0x68
 800544c:	2202      	movs	r2, #2
 800544e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d83f      	bhi.n	80054d6 <xTaskGenericNotify+0xee>
 8005456:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <xTaskGenericNotify+0x74>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	080054eb 	.word	0x080054eb
 8005460:	08005471 	.word	0x08005471
 8005464:	0800548f 	.word	0x0800548f
 8005468:	080054ab 	.word	0x080054ab
 800546c:	080054bb 	.word	0x080054bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3318      	adds	r3, #24
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	431a      	orrs	r2, r3
 8005480:	6a39      	ldr	r1, [r7, #32]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	3318      	adds	r3, #24
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	605a      	str	r2, [r3, #4]
                    break;
 800548c:	e030      	b.n	80054f0 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	3318      	adds	r3, #24
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	6a39      	ldr	r1, [r7, #32]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	3318      	adds	r3, #24
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	605a      	str	r2, [r3, #4]
                    break;
 80054a8:	e022      	b.n	80054f0 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	3318      	adds	r3, #24
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	605a      	str	r2, [r3, #4]
                    break;
 80054b8:	e01a      	b.n	80054f0 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d007      	beq.n	80054d0 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054c0:	6a3a      	ldr	r2, [r7, #32]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	3318      	adds	r3, #24
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80054ce:	e00f      	b.n	80054f0 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80054d4:	e00c      	b.n	80054f0 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80054d6:	4b48      	ldr	r3, [pc, #288]	@ (80055f8 <xTaskGenericNotify+0x210>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <xTaskGenericNotify+0x106>
 80054de:	f641 61da 	movw	r1, #7898	@ 0x1eda
 80054e2:	4844      	ldr	r0, [pc, #272]	@ (80055f4 <xTaskGenericNotify+0x20c>)
 80054e4:	f7fc f942 	bl	800176c <vAssertCalled>

                    break;
 80054e8:	e001      	b.n	80054ee <xTaskGenericNotify+0x106>
                    break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <xTaskGenericNotify+0x108>
                    break;
 80054ee:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80054f0:	7ffb      	ldrb	r3, [r7, #31]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d177      	bne.n	80055e6 <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	6a3a      	ldr	r2, [r7, #32]
 8005502:	68d2      	ldr	r2, [r2, #12]
 8005504:	609a      	str	r2, [r3, #8]
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	6a3a      	ldr	r2, [r7, #32]
 800550c:	6892      	ldr	r2, [r2, #8]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	3304      	adds	r3, #4
 8005518:	429a      	cmp	r2, r3
 800551a:	d103      	bne.n	8005524 <xTaskGenericNotify+0x13c>
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2200      	movs	r2, #0
 8005528:	615a      	str	r2, [r3, #20]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	1e5a      	subs	r2, r3, #1
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	2201      	movs	r2, #1
 800553a:	409a      	lsls	r2, r3
 800553c:	4b2f      	ldr	r3, [pc, #188]	@ (80055fc <xTaskGenericNotify+0x214>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4313      	orrs	r3, r2
 8005542:	4a2e      	ldr	r2, [pc, #184]	@ (80055fc <xTaskGenericNotify+0x214>)
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554a:	492d      	ldr	r1, [pc, #180]	@ (8005600 <xTaskGenericNotify+0x218>)
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3304      	adds	r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	3204      	adds	r2, #4
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4a1d      	ldr	r2, [pc, #116]	@ (8005600 <xTaskGenericNotify+0x218>)
 800558a:	441a      	add	r2, r3
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	615a      	str	r2, [r3, #20]
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005594:	491a      	ldr	r1, [pc, #104]	@ (8005600 <xTaskGenericNotify+0x218>)
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a3a      	ldr	r2, [r7, #32]
 80055a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	4815      	ldr	r0, [pc, #84]	@ (8005600 <xTaskGenericNotify+0x218>)
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4403      	add	r3, r0
 80055b4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d004      	beq.n	80055c8 <xTaskGenericNotify+0x1e0>
 80055be:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 80055c2:	480c      	ldr	r0, [pc, #48]	@ (80055f4 <xTaskGenericNotify+0x20c>)
 80055c4:	f7fc f8d2 	bl	800176c <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80055c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <xTaskGenericNotify+0x21c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d207      	bcs.n	80055e6 <xTaskGenericNotify+0x1fe>
 80055d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <xTaskGenericNotify+0x220>)
 80055d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80055e6:	f000 fc47 	bl	8005e78 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80055ec:	4618      	mov	r0, r3
 80055ee:	3728      	adds	r7, #40	@ 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	08023e50 	.word	0x08023e50
 80055f8:	20000d4c 	.word	0x20000d4c
 80055fc:	20000d50 	.word	0x20000d50
 8005600:	20000c4c 	.word	0x20000c4c
 8005604:	20000c48 	.word	0x20000c48
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800560c:	b580      	push	{r7, lr}
 800560e:	b08e      	sub	sp, #56	@ 0x38
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800561a:	2301      	movs	r3, #1
 800561c:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <xTaskGenericNotifyFromISR+0x22>
 8005624:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005628:	4899      	ldr	r0, [pc, #612]	@ (8005890 <xTaskGenericNotifyFromISR+0x284>)
 800562a:	f7fc f89f 	bl	800176c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <xTaskGenericNotifyFromISR+0x32>
 8005634:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005638:	4895      	ldr	r0, [pc, #596]	@ (8005890 <xTaskGenericNotifyFromISR+0x284>)
 800563a:	f7fc f897 	bl	800176c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800563e:	f000 fcbd 	bl	8005fbc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005646:	f3ef 8211 	mrs	r2, BASEPRI
 800564a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800564e:	b672      	cpsid	i
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	b662      	cpsie	i
 800565e:	61ba      	str	r2, [r7, #24]
 8005660:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005662:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005664:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8005666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800566c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3318      	adds	r3, #24
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800567a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800567c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4413      	add	r3, r2
 8005682:	3368      	adds	r3, #104	@ 0x68
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800568a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4413      	add	r3, r2
 8005690:	3368      	adds	r3, #104	@ 0x68
 8005692:	2202      	movs	r2, #2
 8005694:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	2b04      	cmp	r3, #4
 800569a:	d841      	bhi.n	8005720 <xTaskGenericNotifyFromISR+0x114>
 800569c:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <xTaskGenericNotifyFromISR+0x98>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	08005735 	.word	0x08005735
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	080056d7 	.word	0x080056d7
 80056b0:	080056f3 	.word	0x080056f3
 80056b4:	08005703 	.word	0x08005703
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80056b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3318      	adds	r3, #24
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	3318      	adds	r3, #24
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	605a      	str	r2, [r3, #4]
                    break;
 80056d4:	e031      	b.n	800573a <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80056d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	3318      	adds	r3, #24
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3318      	adds	r3, #24
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	605a      	str	r2, [r3, #4]
                    break;
 80056f0:	e023      	b.n	800573a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80056f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	3318      	adds	r3, #24
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	605a      	str	r2, [r3, #4]
                    break;
 8005700:	e01b      	b.n	800573a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005702:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005706:	2b02      	cmp	r3, #2
 8005708:	d007      	beq.n	800571a <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800570a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	3318      	adds	r3, #24
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005718:	e00f      	b.n	800573a <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 800571a:	2300      	movs	r3, #0
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800571e:	e00c      	b.n	800573a <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005720:	4b5c      	ldr	r3, [pc, #368]	@ (8005894 <xTaskGenericNotifyFromISR+0x288>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <xTaskGenericNotifyFromISR+0x12c>
 8005728:	f641 7169 	movw	r1, #8041	@ 0x1f69
 800572c:	4858      	ldr	r0, [pc, #352]	@ (8005890 <xTaskGenericNotifyFromISR+0x284>)
 800572e:	f7fc f81d 	bl	800176c <vAssertCalled>
                    break;
 8005732:	e001      	b.n	8005738 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8005734:	bf00      	nop
 8005736:	e000      	b.n	800573a <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8005738:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800573a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800573e:	2b01      	cmp	r3, #1
 8005740:	f040 809a 	bne.w	8005878 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <xTaskGenericNotifyFromISR+0x14a>
 800574c:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005750:	484f      	ldr	r0, [pc, #316]	@ (8005890 <xTaskGenericNotifyFromISR+0x284>)
 8005752:	f7fc f80b 	bl	800176c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005756:	4b50      	ldr	r3, [pc, #320]	@ (8005898 <xTaskGenericNotifyFromISR+0x28c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d160      	bne.n	8005820 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576a:	68d2      	ldr	r2, [r2, #12]
 800576c:	609a      	str	r2, [r3, #8]
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005774:	6892      	ldr	r2, [r2, #8]
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577e:	3304      	adds	r3, #4
 8005780:	429a      	cmp	r2, r3
 8005782:	d103      	bne.n	800578c <xTaskGenericNotifyFromISR+0x180>
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	2200      	movs	r2, #0
 8005790:	615a      	str	r2, [r3, #20]
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1e5a      	subs	r2, r3, #1
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	2201      	movs	r2, #1
 80057a2:	409a      	lsls	r2, r3
 80057a4:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <xTaskGenericNotifyFromISR+0x290>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	4a3c      	ldr	r2, [pc, #240]	@ (800589c <xTaskGenericNotifyFromISR+0x290>)
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b2:	493b      	ldr	r1, [pc, #236]	@ (80058a0 <xTaskGenericNotifyFromISR+0x294>)
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	3304      	adds	r3, #4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d8:	3204      	adds	r2, #4
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4a2b      	ldr	r2, [pc, #172]	@ (80058a0 <xTaskGenericNotifyFromISR+0x294>)
 80057f2:	441a      	add	r2, r3
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	615a      	str	r2, [r3, #20]
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fc:	4928      	ldr	r1, [pc, #160]	@ (80058a0 <xTaskGenericNotifyFromISR+0x294>)
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800580c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800580e:	1c59      	adds	r1, r3, #1
 8005810:	4823      	ldr	r0, [pc, #140]	@ (80058a0 <xTaskGenericNotifyFromISR+0x294>)
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4403      	add	r3, r0
 800581c:	6019      	str	r1, [r3, #0]
 800581e:	e01b      	b.n	8005858 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005820:	4b20      	ldr	r3, [pc, #128]	@ (80058a4 <xTaskGenericNotifyFromISR+0x298>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582a:	61da      	str	r2, [r3, #28]
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	621a      	str	r2, [r3, #32]
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583a:	3218      	adds	r2, #24
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	f103 0218 	add.w	r2, r3, #24
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	4a16      	ldr	r2, [pc, #88]	@ (80058a4 <xTaskGenericNotifyFromISR+0x298>)
 800584c:	629a      	str	r2, [r3, #40]	@ 0x28
 800584e:	4b15      	ldr	r3, [pc, #84]	@ (80058a4 <xTaskGenericNotifyFromISR+0x298>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3301      	adds	r3, #1
 8005854:	4a13      	ldr	r2, [pc, #76]	@ (80058a4 <xTaskGenericNotifyFromISR+0x298>)
 8005856:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585c:	4b12      	ldr	r3, [pc, #72]	@ (80058a8 <xTaskGenericNotifyFromISR+0x29c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	429a      	cmp	r2, r3
 8005864:	d908      	bls.n	8005878 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800586c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005872:	4b0e      	ldr	r3, [pc, #56]	@ (80058ac <xTaskGenericNotifyFromISR+0x2a0>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005882:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8005884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8005886:	4618      	mov	r0, r3
 8005888:	3738      	adds	r7, #56	@ 0x38
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	08023e50 	.word	0x08023e50
 8005894:	20000d4c 	.word	0x20000d4c
 8005898:	20000d70 	.word	0x20000d70
 800589c:	20000d50 	.word	0x20000d50
 80058a0:	20000c4c 	.word	0x20000c4c
 80058a4:	20000d08 	.word	0x20000d08
 80058a8:	20000c48 	.word	0x20000c48
 80058ac:	20000d5c 	.word	0x20000d5c

080058b0 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	@ 0x38
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <vTaskGenericNotifyGiveFromISR+0x1c>
 80058c2:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80058c6:	4871      	ldr	r0, [pc, #452]	@ (8005a8c <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80058c8:	f7fb ff50 	bl	800176c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <vTaskGenericNotifyGiveFromISR+0x2c>
 80058d2:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 80058d6:	486d      	ldr	r0, [pc, #436]	@ (8005a8c <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80058d8:	f7fb ff48 	bl	800176c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058dc:	f000 fb6e 	bl	8005fbc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 80058e4:	f3ef 8211 	mrs	r2, BASEPRI
 80058e8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80058ec:	b672      	cpsid	i
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	b662      	cpsie	i
 80058fc:	61fa      	str	r2, [r7, #28]
 80058fe:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8005900:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005902:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	3368      	adds	r3, #104	@ 0x68
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4413      	add	r3, r2
 8005918:	3368      	adds	r3, #104	@ 0x68
 800591a:	2202      	movs	r2, #2
 800591c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800591e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	3318      	adds	r3, #24
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	3318      	adds	r3, #24
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 809a 	bne.w	8005a76 <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <vTaskGenericNotifyGiveFromISR+0xa4>
 800594a:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 800594e:	484f      	ldr	r0, [pc, #316]	@ (8005a8c <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005950:	f7fb ff0c 	bl	800176c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005954:	4b4e      	ldr	r3, [pc, #312]	@ (8005a90 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d160      	bne.n	8005a1e <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
 8005962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005968:	68d2      	ldr	r2, [r2, #12]
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005972:	6892      	ldr	r2, [r2, #8]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597c:	3304      	adds	r3, #4
 800597e:	429a      	cmp	r2, r3
 8005980:	d103      	bne.n	800598a <vTaskGenericNotifyGiveFromISR+0xda>
 8005982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598c:	2200      	movs	r2, #0
 800598e:	615a      	str	r2, [r3, #20]
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	1e5a      	subs	r2, r3, #1
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	2201      	movs	r2, #1
 80059a0:	409a      	lsls	r2, r3
 80059a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005a94 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005a94 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	4939      	ldr	r1, [pc, #228]	@ (8005a98 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3304      	adds	r3, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059d6:	3204      	adds	r2, #4
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005a98 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80059f0:	441a      	add	r2, r3
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	615a      	str	r2, [r3, #20]
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fa:	4927      	ldr	r1, [pc, #156]	@ (8005a98 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a0c:	1c59      	adds	r1, r3, #1
 8005a0e:	4822      	ldr	r0, [pc, #136]	@ (8005a98 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4403      	add	r3, r0
 8005a1a:	6019      	str	r1, [r3, #0]
 8005a1c:	e01b      	b.n	8005a56 <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005a9c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a28:	61da      	str	r2, [r3, #28]
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a30:	621a      	str	r2, [r3, #32]
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a38:	3218      	adds	r2, #24
 8005a3a:	605a      	str	r2, [r3, #4]
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	f103 0218 	add.w	r2, r3, #24
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a48:	4a14      	ldr	r2, [pc, #80]	@ (8005a9c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005a4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a4c:	4b13      	ldr	r3, [pc, #76]	@ (8005a9c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	4a12      	ldr	r2, [pc, #72]	@ (8005a9c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005a54:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5a:	4b11      	ldr	r3, [pc, #68]	@ (8005aa0 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d908      	bls.n	8005a76 <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005a70:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa4 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	617b      	str	r3, [r7, #20]
    __asm volatile
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f383 8811 	msr	BASEPRI, r3
}
 8005a80:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8005a82:	bf00      	nop
 8005a84:	3738      	adds	r7, #56	@ 0x38
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08023e50 	.word	0x08023e50
 8005a90:	20000d70 	.word	0x20000d70
 8005a94:	20000d50 	.word	0x20000d50
 8005a98:	20000c4c 	.word	0x20000c4c
 8005a9c:	20000d08 	.word	0x20000d08
 8005aa0:	20000c48 	.word	0x20000c48
 8005aa4:	20000d5c 	.word	0x20000d5c

08005aa8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005ab2:	4b37      	ldr	r3, [pc, #220]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8005ab8:	4b36      	ldr	r3, [pc, #216]	@ (8005b94 <prvAddCurrentTaskToDelayedList+0xec>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8005abe:	4b36      	ldr	r3, [pc, #216]	@ (8005b98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac4:	4b35      	ldr	r3, [pc, #212]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fd fade 	bl	800308c <uxListRemove>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ad6:	4b31      	ldr	r3, [pc, #196]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	2201      	movs	r2, #1
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	43da      	mvns	r2, r3
 8005ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005aec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d124      	bne.n	8005b40 <prvAddCurrentTaskToDelayedList+0x98>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d021      	beq.n	8005b40 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afc:	4b29      	ldr	r3, [pc, #164]	@ (8005ba4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	4b26      	ldr	r3, [pc, #152]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	609a      	str	r2, [r3, #8]
 8005b0a:	4b24      	ldr	r3, [pc, #144]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	6892      	ldr	r2, [r2, #8]
 8005b12:	60da      	str	r2, [r3, #12]
 8005b14:	4b21      	ldr	r3, [pc, #132]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	3204      	adds	r2, #4
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	4b1e      	ldr	r3, [pc, #120]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	609a      	str	r2, [r3, #8]
 8005b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005b30:	615a      	str	r2, [r3, #20]
 8005b32:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005b3e:	e022      	b.n	8005b86 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4413      	add	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b48:	4b14      	ldr	r3, [pc, #80]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d207      	bcs.n	8005b68 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005b58:	4b10      	ldr	r3, [pc, #64]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6978      	ldr	r0, [r7, #20]
 8005b62:	f7fd fa5a 	bl	800301a <vListInsert>
}
 8005b66:	e00e      	b.n	8005b86 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005b68:	4b0c      	ldr	r3, [pc, #48]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	69b8      	ldr	r0, [r7, #24]
 8005b72:	f7fd fa52 	bl	800301a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005b76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <prvAddCurrentTaskToDelayedList+0x100>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d202      	bcs.n	8005b86 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005b80:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <prvAddCurrentTaskToDelayedList+0x100>)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6013      	str	r3, [r2, #0]
}
 8005b86:	bf00      	nop
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000d4c 	.word	0x20000d4c
 8005b94:	20000d00 	.word	0x20000d00
 8005b98:	20000d04 	.word	0x20000d04
 8005b9c:	20000c48 	.word	0x20000c48
 8005ba0:	20000d50 	.word	0x20000d50
 8005ba4:	20000d34 	.word	0x20000d34
 8005ba8:	20000d68 	.word	0x20000d68

08005bac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005bc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3b04      	subs	r3, #4
 8005bda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8005c10 <pxPortInitialiseStack+0x64>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3b14      	subs	r3, #20
 8005be6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3b04      	subs	r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f06f 0202 	mvn.w	r2, #2
 8005bfa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3b20      	subs	r3, #32
 8005c00:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005c02:	68fb      	ldr	r3, [r7, #12]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	08005c15 	.word	0x08005c15

08005c14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c5c <prvTaskExitError+0x48>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d003      	beq.n	8005c30 <prvTaskExitError+0x1c>
 8005c28:	21ee      	movs	r1, #238	@ 0xee
 8005c2a:	480d      	ldr	r0, [pc, #52]	@ (8005c60 <prvTaskExitError+0x4c>)
 8005c2c:	f7fb fd9e 	bl	800176c <vAssertCalled>
    __asm volatile
 8005c30:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005c34:	b672      	cpsid	i
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	b662      	cpsie	i
 8005c44:	607b      	str	r3, [r7, #4]
}
 8005c46:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005c48:	bf00      	nop
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0fc      	beq.n	8005c4a <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2000000c 	.word	0x2000000c
 8005c60:	08023e7c 	.word	0x08023e7c
	...

08005c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005c70:	4b07      	ldr	r3, [pc, #28]	@ (8005c90 <pxCurrentTCBConst2>)
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	6808      	ldr	r0, [r1, #0]
 8005c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	f380 8809 	msr	PSP, r0
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f04f 0000 	mov.w	r0, #0
 8005c86:	f380 8811 	msr	BASEPRI, r0
 8005c8a:	4770      	bx	lr
 8005c8c:	f3af 8000 	nop.w

08005c90 <pxCurrentTCBConst2>:
 8005c90:	20000c48 	.word	0x20000c48
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005c98:	4808      	ldr	r0, [pc, #32]	@ (8005cbc <prvPortStartFirstTask+0x24>)
 8005c9a:	6800      	ldr	r0, [r0, #0]
 8005c9c:	6800      	ldr	r0, [r0, #0]
 8005c9e:	f380 8808 	msr	MSP, r0
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8814 	msr	CONTROL, r0
 8005caa:	b662      	cpsie	i
 8005cac:	b661      	cpsie	f
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	df00      	svc	0
 8005cb8:	bf00      	nop
 8005cba:	0000      	.short	0x0000
 8005cbc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop

08005cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8005cca:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <xPortStartScheduler+0x130>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	332c      	adds	r3, #44	@ 0x2c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a48      	ldr	r2, [pc, #288]	@ (8005df8 <xPortStartScheduler+0x134>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <xPortStartScheduler+0x22>
 8005cdc:	f240 114b 	movw	r1, #331	@ 0x14b
 8005ce0:	4846      	ldr	r0, [pc, #280]	@ (8005dfc <xPortStartScheduler+0x138>)
 8005ce2:	f7fb fd43 	bl	800176c <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3338      	adds	r3, #56	@ 0x38
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a44      	ldr	r2, [pc, #272]	@ (8005e00 <xPortStartScheduler+0x13c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d004      	beq.n	8005cfc <xPortStartScheduler+0x38>
 8005cf2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8005cf6:	4841      	ldr	r0, [pc, #260]	@ (8005dfc <xPortStartScheduler+0x138>)
 8005cf8:	f7fb fd38 	bl	800176c <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d00:	4b40      	ldr	r3, [pc, #256]	@ (8005e04 <xPortStartScheduler+0x140>)
 8005d02:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	22ff      	movs	r2, #255	@ 0xff
 8005d10:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	4b38      	ldr	r3, [pc, #224]	@ (8005e08 <xPortStartScheduler+0x144>)
 8005d26:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005d28:	4b37      	ldr	r3, [pc, #220]	@ (8005e08 <xPortStartScheduler+0x144>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <xPortStartScheduler+0x76>
 8005d30:	f240 116f 	movw	r1, #367	@ 0x16f
 8005d34:	4831      	ldr	r0, [pc, #196]	@ (8005dfc <xPortStartScheduler+0x138>)
 8005d36:	f7fb fd19 	bl	800176c <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00d      	beq.n	8005d64 <xPortStartScheduler+0xa0>
 8005d48:	f240 1173 	movw	r1, #371	@ 0x173
 8005d4c:	482b      	ldr	r0, [pc, #172]	@ (8005dfc <xPortStartScheduler+0x138>)
 8005d4e:	f7fb fd0d 	bl	800176c <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d52:	e007      	b.n	8005d64 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	3301      	adds	r3, #1
 8005d58:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6c:	2b80      	cmp	r3, #128	@ 0x80
 8005d6e:	d0f1      	beq.n	8005d54 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d103      	bne.n	8005d7e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005d76:	4b25      	ldr	r3, [pc, #148]	@ (8005e0c <xPortStartScheduler+0x148>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e004      	b.n	8005d88 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f1c3 0307 	rsb	r3, r3, #7
 8005d84:	4a21      	ldr	r2, [pc, #132]	@ (8005e0c <xPortStartScheduler+0x148>)
 8005d86:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d88:	4b20      	ldr	r3, [pc, #128]	@ (8005e0c <xPortStartScheduler+0x148>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e0c <xPortStartScheduler+0x148>)
 8005d90:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d92:	4b1e      	ldr	r3, [pc, #120]	@ (8005e0c <xPortStartScheduler+0x148>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005e0c <xPortStartScheduler+0x148>)
 8005d9c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005da6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <xPortStartScheduler+0x14c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a19      	ldr	r2, [pc, #100]	@ (8005e10 <xPortStartScheduler+0x14c>)
 8005dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005db0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005db2:	4b17      	ldr	r3, [pc, #92]	@ (8005e10 <xPortStartScheduler+0x14c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a16      	ldr	r2, [pc, #88]	@ (8005e10 <xPortStartScheduler+0x14c>)
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dbc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <xPortStartScheduler+0x150>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005dc4:	f000 f8d4 	bl	8005f70 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005dc8:	4b13      	ldr	r3, [pc, #76]	@ (8005e18 <xPortStartScheduler+0x154>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005dce:	f000 f8e9 	bl	8005fa4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	@ (8005e1c <xPortStartScheduler+0x158>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a11      	ldr	r2, [pc, #68]	@ (8005e1c <xPortStartScheduler+0x158>)
 8005dd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005ddc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005dde:	f7ff ff5b 	bl	8005c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005de2:	f7fe fbf1 	bl	80045c8 <vTaskSwitchContext>
    prvTaskExitError();
 8005de6:	f7ff ff15 	bl	8005c14 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	e000ed08 	.word	0xe000ed08
 8005df8:	08005c71 	.word	0x08005c71
 8005dfc:	08023e7c 	.word	0x08023e7c
 8005e00:	08005ec1 	.word	0x08005ec1
 8005e04:	e000e400 	.word	0xe000e400
 8005e08:	20000d7c 	.word	0x20000d7c
 8005e0c:	20000d80 	.word	0x20000d80
 8005e10:	e000ed20 	.word	0xe000ed20
 8005e14:	e000ed1c 	.word	0xe000ed1c
 8005e18:	2000000c 	.word	0x2000000c
 8005e1c:	e000ef34 	.word	0xe000ef34

08005e20 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
    __asm volatile
 8005e26:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005e2a:	b672      	cpsid	i
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	b662      	cpsie	i
 8005e3a:	607b      	str	r3, [r7, #4]
}
 8005e3c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e6c <vPortEnterCritical+0x4c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a09      	ldr	r2, [pc, #36]	@ (8005e6c <vPortEnterCritical+0x4c>)
 8005e46:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005e48:	4b08      	ldr	r3, [pc, #32]	@ (8005e6c <vPortEnterCritical+0x4c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d109      	bne.n	8005e64 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e50:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <vPortEnterCritical+0x50>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <vPortEnterCritical+0x44>
 8005e5a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8005e5e:	4805      	ldr	r0, [pc, #20]	@ (8005e74 <vPortEnterCritical+0x54>)
 8005e60:	f7fb fc84 	bl	800176c <vAssertCalled>
    }
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000000c 	.word	0x2000000c
 8005e70:	e000ed04 	.word	0xe000ed04
 8005e74:	08023e7c 	.word	0x08023e7c

08005e78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <vPortExitCritical+0x40>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <vPortExitCritical+0x18>
 8005e86:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8005e8a:	480c      	ldr	r0, [pc, #48]	@ (8005ebc <vPortExitCritical+0x44>)
 8005e8c:	f7fb fc6e 	bl	800176c <vAssertCalled>
    uxCriticalNesting--;
 8005e90:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <vPortExitCritical+0x40>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	4a08      	ldr	r2, [pc, #32]	@ (8005eb8 <vPortExitCritical+0x40>)
 8005e98:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005e9a:	4b07      	ldr	r3, [pc, #28]	@ (8005eb8 <vPortExitCritical+0x40>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <vPortExitCritical+0x36>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
    __asm volatile
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f383 8811 	msr	BASEPRI, r3
}
 8005eac:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005eae:	bf00      	nop
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000000c 	.word	0x2000000c
 8005ebc:	08023e7c 	.word	0x08023e7c

08005ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b15      	ldr	r3, [pc, #84]	@ (8005f20 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f01e 0f10 	tst.w	lr, #16
 8005ed0:	bf08      	it	eq
 8005ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ee0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8005ee4:	b672      	cpsid	i
 8005ee6:	f380 8811 	msr	BASEPRI, r0
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	b662      	cpsie	i
 8005ef4:	f7fe fb68 	bl	80045c8 <vTaskSwitchContext>
 8005ef8:	f04f 0000 	mov.w	r0, #0
 8005efc:	f380 8811 	msr	BASEPRI, r0
 8005f00:	bc09      	pop	{r0, r3}
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	6808      	ldr	r0, [r1, #0]
 8005f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	f01e 0f10 	tst.w	lr, #16
 8005f0e:	bf08      	it	eq
 8005f10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f14:	f380 8809 	msr	PSP, r0
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop

08005f20 <pxCurrentTCBConst>:
 8005f20:	20000c48 	.word	0x20000c48
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
    __asm volatile
 8005f2e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005f32:	b672      	cpsid	i
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	b662      	cpsie	i
 8005f42:	607b      	str	r3, [r7, #4]
}
 8005f44:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005f46:	f7fe fa2b 	bl	80043a0 <xTaskIncrementTick>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f50:	4b06      	ldr	r3, [pc, #24]	@ (8005f6c <xPortSysTickHandler+0x44>)
 8005f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	f383 8811 	msr	BASEPRI, r3
}
 8005f62:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f74:	4b08      	ldr	r3, [pc, #32]	@ (8005f98 <vPortSetupTimerInterrupt+0x28>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f7a:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <vPortSetupTimerInterrupt+0x2c>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <vPortSetupTimerInterrupt+0x30>)
 8005f82:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005f86:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f88:	4b03      	ldr	r3, [pc, #12]	@ (8005f98 <vPortSetupTimerInterrupt+0x28>)
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	601a      	str	r2, [r3, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	e000e010 	.word	0xe000e010
 8005f9c:	e000e018 	.word	0xe000e018
 8005fa0:	e000e014 	.word	0xe000e014

08005fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005fb4 <vPortEnableVFP+0x10>
 8005fa8:	6801      	ldr	r1, [r0, #0]
 8005faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005fae:	6001      	str	r1, [r0, #0]
 8005fb0:	4770      	bx	lr
 8005fb2:	0000      	.short	0x0000
 8005fb4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop

08005fbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005fc2:	f3ef 8305 	mrs	r3, IPSR
 8005fc6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	d90e      	bls.n	8005fec <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fce:	4a10      	ldr	r2, [pc, #64]	@ (8006010 <vPortValidateInterruptPriority+0x54>)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006014 <vPortValidateInterruptPriority+0x58>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	78fa      	ldrb	r2, [r7, #3]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d204      	bcs.n	8005fec <vPortValidateInterruptPriority+0x30>
 8005fe2:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8005fe6:	480c      	ldr	r0, [pc, #48]	@ (8006018 <vPortValidateInterruptPriority+0x5c>)
 8005fe8:	f7fb fbc0 	bl	800176c <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <vPortValidateInterruptPriority+0x60>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <vPortValidateInterruptPriority+0x64>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d904      	bls.n	8006006 <vPortValidateInterruptPriority+0x4a>
 8005ffc:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8006000:	4805      	ldr	r0, [pc, #20]	@ (8006018 <vPortValidateInterruptPriority+0x5c>)
 8006002:	f7fb fbb3 	bl	800176c <vAssertCalled>
    }
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	e000e3f0 	.word	0xe000e3f0
 8006014:	20000d7c 	.word	0x20000d7c
 8006018:	08023e7c 	.word	0x08023e7c
 800601c:	e000ed0c 	.word	0xe000ed0c
 8006020:	20000d80 	.word	0x20000d80

08006024 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8006030:	4b60      	ldr	r3, [pc, #384]	@ (80061b4 <pvPortMalloc+0x190>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <pvPortMalloc+0x1c>
 8006038:	21da      	movs	r1, #218	@ 0xda
 800603a:	485f      	ldr	r0, [pc, #380]	@ (80061b8 <pvPortMalloc+0x194>)
 800603c:	f7fb fb96 	bl	800176c <vAssertCalled>

    if( xWantedSize > 0 )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d022      	beq.n	800608c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006046:	2308      	movs	r3, #8
 8006048:	43db      	mvns	r3, r3
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d81b      	bhi.n	8006088 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8006050:	2208      	movs	r2, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4413      	add	r3, r2
 8006056:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2b00      	cmp	r3, #0
 8006060:	d014      	beq.n	800608c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	f1c3 0308 	rsb	r3, r3, #8
 800606c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	43db      	mvns	r3, r3
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d804      	bhi.n	8006082 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	607b      	str	r3, [r7, #4]
 8006080:	e004      	b.n	800608c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	607b      	str	r3, [r7, #4]
 8006086:	e001      	b.n	800608c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800608c:	f7fe f848 	bl	8004120 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	db78      	blt.n	8006188 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d075      	beq.n	8006188 <pvPortMalloc+0x164>
 800609c:	4b47      	ldr	r3, [pc, #284]	@ (80061bc <pvPortMalloc+0x198>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d870      	bhi.n	8006188 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80060a6:	4b46      	ldr	r3, [pc, #280]	@ (80061c0 <pvPortMalloc+0x19c>)
 80060a8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80060aa:	4b45      	ldr	r3, [pc, #276]	@ (80061c0 <pvPortMalloc+0x19c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80060b0:	e004      	b.n	80060bc <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d903      	bls.n	80060ce <pvPortMalloc+0xaa>
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f1      	bne.n	80060b2 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80060ce:	4b39      	ldr	r3, [pc, #228]	@ (80061b4 <pvPortMalloc+0x190>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d057      	beq.n	8006188 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2208      	movs	r2, #8
 80060de:	4413      	add	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d904      	bls.n	80060fe <pvPortMalloc+0xda>
 80060f4:	f240 1129 	movw	r1, #297	@ 0x129
 80060f8:	482f      	ldr	r0, [pc, #188]	@ (80061b8 <pvPortMalloc+0x194>)
 80060fa:	f7fb fb37 	bl	800176c <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1ad2      	subs	r2, r2, r3
 8006106:	2308      	movs	r3, #8
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	429a      	cmp	r2, r3
 800610c:	d91d      	bls.n	800614a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4413      	add	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <pvPortMalloc+0x106>
 8006120:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006124:	4824      	ldr	r0, [pc, #144]	@ (80061b8 <pvPortMalloc+0x194>)
 8006126:	f7fb fb21 	bl	800176c <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1ad2      	subs	r2, r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800614a:	4b1c      	ldr	r3, [pc, #112]	@ (80061bc <pvPortMalloc+0x198>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	4a19      	ldr	r2, [pc, #100]	@ (80061bc <pvPortMalloc+0x198>)
 8006156:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006158:	4b18      	ldr	r3, [pc, #96]	@ (80061bc <pvPortMalloc+0x198>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b19      	ldr	r3, [pc, #100]	@ (80061c4 <pvPortMalloc+0x1a0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d203      	bcs.n	800616c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006164:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <pvPortMalloc+0x198>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a16      	ldr	r2, [pc, #88]	@ (80061c4 <pvPortMalloc+0x1a0>)
 800616a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800617e:	4b12      	ldr	r3, [pc, #72]	@ (80061c8 <pvPortMalloc+0x1a4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	4a10      	ldr	r2, [pc, #64]	@ (80061c8 <pvPortMalloc+0x1a4>)
 8006186:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006188:	f7fd ffd8 	bl	800413c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8006192:	f7fb faff 	bl	8001794 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	2b00      	cmp	r3, #0
 800619e:	d004      	beq.n	80061aa <pvPortMalloc+0x186>
 80061a0:	f240 1173 	movw	r1, #371	@ 0x173
 80061a4:	4804      	ldr	r0, [pc, #16]	@ (80061b8 <pvPortMalloc+0x194>)
 80061a6:	f7fb fae1 	bl	800176c <vAssertCalled>
    return pvReturn;
 80061aa:	697b      	ldr	r3, [r7, #20]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000d8c 	.word	0x20000d8c
 80061b8:	08023eb8 	.word	0x08023eb8
 80061bc:	20000d90 	.word	0x20000d90
 80061c0:	20000d84 	.word	0x20000d84
 80061c4:	20000d94 	.word	0x20000d94
 80061c8:	20000d98 	.word	0x20000d98

080061cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d03d      	beq.n	800625a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80061de:	2308      	movs	r3, #8
 80061e0:	425b      	negs	r3, r3
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	db04      	blt.n	80061fe <vPortFree+0x32>
 80061f4:	f240 1187 	movw	r1, #391	@ 0x187
 80061f8:	481a      	ldr	r0, [pc, #104]	@ (8006264 <vPortFree+0x98>)
 80061fa:	f7fb fab7 	bl	800176c <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <vPortFree+0x44>
 8006206:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800620a:	4816      	ldr	r0, [pc, #88]	@ (8006264 <vPortFree+0x98>)
 800620c:	f7fb faae 	bl	800176c <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	0fdb      	lsrs	r3, r3, #31
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01c      	beq.n	800625a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d118      	bne.n	800625a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006234:	f7fd ff74 	bl	8004120 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <vPortFree+0x9c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4413      	add	r3, r2
 8006242:	4a09      	ldr	r2, [pc, #36]	@ (8006268 <vPortFree+0x9c>)
 8006244:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006246:	68b8      	ldr	r0, [r7, #8]
 8006248:	f000 f82a 	bl	80062a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800624c:	4b07      	ldr	r3, [pc, #28]	@ (800626c <vPortFree+0xa0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	4a06      	ldr	r2, [pc, #24]	@ (800626c <vPortFree+0xa0>)
 8006254:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006256:	f7fd ff71 	bl	800413c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	08023eb8 	.word	0x08023eb8
 8006268:	20000d90 	.word	0x20000d90
 800626c:	20000d9c 	.word	0x20000d9c

08006270 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006274:	4b03      	ldr	r3, [pc, #12]	@ (8006284 <xPortGetFreeHeapSize+0x14>)
 8006276:	681b      	ldr	r3, [r3, #0]
}
 8006278:	4618      	mov	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000d90 	.word	0x20000d90

08006288 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 800628c:	4b03      	ldr	r3, [pc, #12]	@ (800629c <xPortGetMinimumEverFreeHeapSize+0x14>)
 800628e:	681b      	ldr	r3, [r3, #0]
}
 8006290:	4618      	mov	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000d94 	.word	0x20000d94

080062a0 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80062a8:	4b28      	ldr	r3, [pc, #160]	@ (800634c <prvInsertBlockIntoFreeList+0xac>)
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e002      	b.n	80062b4 <prvInsertBlockIntoFreeList+0x14>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d8f7      	bhi.n	80062ae <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	4413      	add	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d108      	bne.n	80062e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	441a      	add	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	441a      	add	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d118      	bne.n	8006328 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b15      	ldr	r3, [pc, #84]	@ (8006350 <prvInsertBlockIntoFreeList+0xb0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d00d      	beq.n	800631e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	441a      	add	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e008      	b.n	8006330 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800631e:	4b0c      	ldr	r3, [pc, #48]	@ (8006350 <prvInsertBlockIntoFreeList+0xb0>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e003      	b.n	8006330 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d002      	beq.n	800633e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000d84 	.word	0x20000d84
 8006350:	20000d8c 	.word	0x20000d8c

08006354 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	@ 0x28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006368:	4b4b      	ldr	r3, [pc, #300]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <vPortDefineHeapRegions+0x26>
 8006370:	f240 2121 	movw	r1, #545	@ 0x221
 8006374:	4849      	ldr	r0, [pc, #292]	@ (800649c <vPortDefineHeapRegions+0x148>)
 8006376:	f7fb f9f9 	bl	800176c <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006384:	e071      	b.n	800646a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00e      	beq.n	80063ba <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	3307      	adds	r3, #7
 80063a0:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f023 0307 	bic.w	r3, r3, #7
 80063a8:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b6:	4413      	add	r3, r2
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a36      	ldr	r2, [pc, #216]	@ (80064a0 <vPortDefineHeapRegions+0x14c>)
 80063c8:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 80063ca:	4b35      	ldr	r3, [pc, #212]	@ (80064a0 <vPortDefineHeapRegions+0x14c>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	605a      	str	r2, [r3, #4]
 80063d0:	e013      	b.n	80063fa <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 80063d2:	4b31      	ldr	r3, [pc, #196]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <vPortDefineHeapRegions+0x90>
 80063da:	f240 2149 	movw	r1, #585	@ 0x249
 80063de:	482f      	ldr	r0, [pc, #188]	@ (800649c <vPortDefineHeapRegions+0x148>)
 80063e0:	f7fb f9c4 	bl	800176c <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 80063e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d804      	bhi.n	80063fa <vPortDefineHeapRegions+0xa6>
 80063f0:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80063f4:	4829      	ldr	r0, [pc, #164]	@ (800649c <vPortDefineHeapRegions+0x148>)
 80063f6:	f7fb f9b9 	bl	800176c <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 80063fa:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	4413      	add	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006408:	2208      	movs	r2, #8
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	4a1f      	ldr	r2, [pc, #124]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 800641c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 800641e:	4b1e      	ldr	r3, [pc, #120]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2200      	movs	r2, #0
 8006424:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006426:	4b1c      	ldr	r3, [pc, #112]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800643c:	4b16      	ldr	r3, [pc, #88]	@ (8006498 <vPortDefineHeapRegions+0x144>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	4413      	add	r3, r2
 8006458:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	4413      	add	r3, r2
 8006468:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d189      	bne.n	8006386 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006472:	4a0c      	ldr	r2, [pc, #48]	@ (80064a4 <vPortDefineHeapRegions+0x150>)
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006478:	4a0b      	ldr	r2, [pc, #44]	@ (80064a8 <vPortDefineHeapRegions+0x154>)
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <vPortDefineHeapRegions+0x13a>
 8006484:	f240 2189 	movw	r1, #649	@ 0x289
 8006488:	4804      	ldr	r0, [pc, #16]	@ (800649c <vPortDefineHeapRegions+0x148>)
 800648a:	f7fb f96f 	bl	800176c <vAssertCalled>
}
 800648e:	bf00      	nop
 8006490:	3728      	adds	r7, #40	@ 0x28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000d8c 	.word	0x20000d8c
 800649c:	08023eb8 	.word	0x08023eb8
 80064a0:	20000d84 	.word	0x20000d84
 80064a4:	20000d94 	.word	0x20000d94
 80064a8:	20000d90 	.word	0x20000d90

080064ac <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b090      	sub	sp, #64	@ 0x40
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80064ba:	2300      	movs	r3, #0
 80064bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 80064c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c8:	330e      	adds	r3, #14
 80064ca:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d6:	f040 81bb 	bne.w	8006850 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	885b      	ldrh	r3, [r3, #2]
 80064de:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	f040 81b5 	bne.w	8006850 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80064ea:	2b06      	cmp	r3, #6
 80064ec:	f040 81b0 	bne.w	8006850 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	f040 81ab 	bne.w	8006850 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	330e      	adds	r3, #14
 80064fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8006500:	f107 0320 	add.w	r3, r7, #32
 8006504:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8006516:	4b9c      	ldr	r3, [pc, #624]	@ (8006788 <eARPProcessPacket+0x2dc>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 800651e:	499b      	ldr	r1, [pc, #620]	@ (800678c <eARPProcessPacket+0x2e0>)
 8006520:	489b      	ldr	r0, [pc, #620]	@ (8006790 <eARPProcessPacket+0x2e4>)
 8006522:	f7fe faf1 	bl	8004b08 <xTaskCheckForTimeOut>
 8006526:	4603      	mov	r3, r0
 8006528:	2b01      	cmp	r3, #1
 800652a:	d102      	bne.n	8006532 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 800652c:	4b96      	ldr	r3, [pc, #600]	@ (8006788 <eARPProcessPacket+0x2dc>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	7a1b      	ldrb	r3, [r3, #8]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 8188 	bne.w	8006850 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	061a      	lsls	r2, r3, #24
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800654c:	431a      	orrs	r2, r3
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	0a1b      	lsrs	r3, r3, #8
 8006552:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006556:	431a      	orrs	r2, r3
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	0e1b      	lsrs	r3, r3, #24
 800655c:	4313      	orrs	r3, r2
 800655e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006562:	d311      	bcc.n	8006588 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	061a      	lsls	r2, r3, #24
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006570:	431a      	orrs	r2, r3
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800657a:	431a      	orrs	r2, r3
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	0e1b      	lsrs	r3, r3, #24
 8006580:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006582:	2b00      	cmp	r3, #0
 8006584:	f280 8164 	bge.w	8006850 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658a:	2b00      	cmp	r3, #0
 800658c:	d021      	beq.n	80065d2 <eARPProcessPacket+0x126>
 800658e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	429a      	cmp	r2, r3
 8006596:	d11c      	bne.n	80065d2 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006598:	4b7b      	ldr	r3, [pc, #492]	@ (8006788 <eARPProcessPacket+0x2dc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f040 8157 	bne.w	8006850 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 80065a2:	4b79      	ldr	r3, [pc, #484]	@ (8006788 <eARPProcessPacket+0x2dc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3301      	adds	r3, #1
 80065a8:	4a77      	ldr	r2, [pc, #476]	@ (8006788 <eARPProcessPacket+0x2dc>)
 80065aa:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80065ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80065b4:	f000 fe32 	bl	800721c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 80065b8:	f7fd fec4 	bl	8004344 <xTaskGetTickCount>
 80065bc:	4603      	mov	r3, r0
 80065be:	4a75      	ldr	r2, [pc, #468]	@ (8006794 <eARPProcessPacket+0x2e8>)
 80065c0:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 80065c2:	4873      	ldr	r0, [pc, #460]	@ (8006790 <eARPProcessPacket+0x2e4>)
 80065c4:	f7fe fa68 	bl	8004a98 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 80065c8:	4b70      	ldr	r3, [pc, #448]	@ (800678c <eARPProcessPacket+0x2e0>)
 80065ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065ce:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80065d0:	e13e      	b.n	8006850 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	88db      	ldrh	r3, [r3, #6]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065dc:	d14a      	bne.n	8006674 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	061a      	lsls	r2, r3, #24
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065ea:	431a      	orrs	r2, r3
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80065f4:	431a      	orrs	r2, r3
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	0e1b      	lsrs	r3, r3, #24
 80065fa:	ea42 0103 	orr.w	r1, r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	061a      	lsls	r2, r3, #24
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800660a:	431a      	orrs	r2, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006614:	431a      	orrs	r2, r3
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	0e1b      	lsrs	r3, r3, #24
 800661a:	ea42 0003 	orr.w	r0, r2, r3
 800661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <eARPProcessPacket+0x180>
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	061a      	lsls	r2, r3, #24
 800662a:	e000      	b.n	800662e <eARPProcessPacket+0x182>
 800662c:	2200      	movs	r2, #0
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <eARPProcessPacket+0x194>
 8006634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800663e:	e000      	b.n	8006642 <eARPProcessPacket+0x196>
 8006640:	2300      	movs	r3, #0
 8006642:	431a      	orrs	r2, r3
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <eARPProcessPacket+0x1aa>
 800664a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006654:	e000      	b.n	8006658 <eARPProcessPacket+0x1ac>
 8006656:	2300      	movs	r3, #0
 8006658:	431a      	orrs	r2, r3
 800665a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <eARPProcessPacket+0x1bc>
 8006660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	0e1b      	lsrs	r3, r3, #24
 8006666:	e000      	b.n	800666a <eARPProcessPacket+0x1be>
 8006668:	2300      	movs	r3, #0
 800666a:	4313      	orrs	r3, r2
 800666c:	4602      	mov	r2, r0
 800666e:	484a      	ldr	r0, [pc, #296]	@ (8006798 <eARPProcessPacket+0x2ec>)
 8006670:	f01b faba 	bl	8021be8 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006676:	88db      	ldrh	r3, [r3, #6]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800667e:	d151      	bne.n	8006724 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006680:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006684:	429a      	cmp	r2, r3
 8006686:	d04d      	beq.n	8006724 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	d04a      	beq.n	8006724 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	061a      	lsls	r2, r3, #24
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800669a:	431a      	orrs	r2, r3
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80066a4:	431a      	orrs	r2, r3
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	0e1b      	lsrs	r3, r3, #24
 80066aa:	ea42 0103 	orr.w	r1, r2, r3
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	061a      	lsls	r2, r3, #24
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80066ba:	431a      	orrs	r2, r3
 80066bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80066c4:	431a      	orrs	r2, r3
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	0e1b      	lsrs	r3, r3, #24
 80066ca:	ea42 0003 	orr.w	r0, r2, r3
 80066ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <eARPProcessPacket+0x230>
 80066d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	061a      	lsls	r2, r3, #24
 80066da:	e000      	b.n	80066de <eARPProcessPacket+0x232>
 80066dc:	2200      	movs	r2, #0
 80066de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <eARPProcessPacket+0x244>
 80066e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80066ee:	e000      	b.n	80066f2 <eARPProcessPacket+0x246>
 80066f0:	2300      	movs	r3, #0
 80066f2:	431a      	orrs	r2, r3
 80066f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <eARPProcessPacket+0x25a>
 80066fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006704:	e000      	b.n	8006708 <eARPProcessPacket+0x25c>
 8006706:	2300      	movs	r3, #0
 8006708:	431a      	orrs	r2, r3
 800670a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <eARPProcessPacket+0x26c>
 8006710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	e000      	b.n	800671a <eARPProcessPacket+0x26e>
 8006718:	2300      	movs	r3, #0
 800671a:	4313      	orrs	r3, r2
 800671c:	4602      	mov	r2, r0
 800671e:	481f      	ldr	r0, [pc, #124]	@ (800679c <eARPProcessPacket+0x2f0>)
 8006720:	f01b fa62 	bl	8021be8 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8006724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8092 	beq.w	8006850 <eARPProcessPacket+0x3a4>
 800672c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8089 	beq.w	8006850 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	88db      	ldrh	r3, [r3, #6]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006748:	d003      	beq.n	8006752 <eARPProcessPacket+0x2a6>
 800674a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800674e:	d077      	beq.n	8006840 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006750:	e07e      	b.n	8006850 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006758:	429a      	cmp	r2, r3
 800675a:	d121      	bne.n	80067a0 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800675c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006766:	2206      	movs	r2, #6
 8006768:	4619      	mov	r1, r3
 800676a:	f01c fbee 	bl	8022f4a <memcmp>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d06c      	beq.n	800684e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	461a      	mov	r2, r3
 8006778:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800677a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800677c:	f000 f872 	bl	8006864 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8006780:	2302      	movs	r3, #2
 8006782:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8006786:	e062      	b.n	800684e <eARPProcessPacket+0x3a2>
 8006788:	20000e04 	.word	0x20000e04
 800678c:	20000010 	.word	0x20000010
 8006790:	20000e08 	.word	0x20000e08
 8006794:	20000e00 	.word	0x20000e00
 8006798:	08023ef0 	.word	0x08023ef0
 800679c:	08023f20 	.word	0x08023f20
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d152      	bne.n	800684e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 80067a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	405a      	eors	r2, r3
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d149      	bne.n	800684e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 80067ba:	4a28      	ldr	r2, [pc, #160]	@ (800685c <eARPProcessPacket+0x3b0>)
 80067bc:	f107 0318 	add.w	r3, r7, #24
 80067c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067c4:	6018      	str	r0, [r3, #0]
 80067c6:	3304      	adds	r3, #4
 80067c8:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	3312      	adds	r3, #18
 80067ce:	2206      	movs	r2, #6
 80067d0:	4923      	ldr	r1, [pc, #140]	@ (8006860 <eARPProcessPacket+0x3b4>)
 80067d2:	4618      	mov	r0, r3
 80067d4:	f01c fbb9 	bl	8022f4a <memcmp>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	3312      	adds	r3, #18
 80067e2:	f107 0118 	add.w	r1, r7, #24
 80067e6:	2206      	movs	r2, #6
 80067e8:	4618      	mov	r0, r3
 80067ea:	f01c fbae 	bl	8022f4a <memcmp>
 80067ee:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d12c      	bne.n	800684e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 80067f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f6:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	3308      	adds	r3, #8
 80067fe:	2206      	movs	r2, #6
 8006800:	4619      	mov	r1, r3
 8006802:	f01c fba2 	bl	8022f4a <memcmp>
 8006806:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8006808:	2b00      	cmp	r3, #0
 800680a:	d020      	beq.n	800684e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8006810:	f107 020c 	add.w	r2, r7, #12
 8006814:	f107 0110 	add.w	r1, r7, #16
 8006818:	f107 0320 	add.w	r3, r7, #32
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fb11 	bl	8006e44 <eARPGetCacheEntry>
 8006822:	4603      	mov	r3, r0
 8006824:	2b01      	cmp	r3, #1
 8006826:	d112      	bne.n	800684e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800682c:	429a      	cmp	r2, r3
 800682e:	d10e      	bne.n	800684e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	3308      	adds	r3, #8
 8006834:	6a39      	ldr	r1, [r7, #32]
 8006836:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f9ef 	bl	8006c1c <vARPRefreshCacheEntry>
                            break;
 800683e:	e006      	b.n	800684e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	461a      	mov	r2, r3
 8006844:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006846:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006848:	f000 f84a 	bl	80068e0 <vARPProcessPacketReply>
                            break;
 800684c:	e000      	b.n	8006850 <eARPProcessPacket+0x3a4>
                            break;
 800684e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8006850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8006854:	4618      	mov	r0, r3
 8006856:	3740      	adds	r7, #64	@ 0x40
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	08023f50 	.word	0x08023f50
 8006860:	08027294 	.word	0x08027294

08006864 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	330e      	adds	r3, #14
 8006874:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3308      	adds	r3, #8
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 f9cc 	bl	8006c1c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2200      	movs	r2, #0
 8006888:	719a      	strb	r2, [r3, #6]
 800688a:	2200      	movs	r2, #0
 800688c:	f042 0202 	orr.w	r2, r2, #2
 8006890:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	3308      	adds	r3, #8
 8006896:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	3312      	adds	r3, #18
 800689c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800689e:	2206      	movs	r2, #6
 80068a0:	69b9      	ldr	r1, [r7, #24]
 80068a2:	6978      	ldr	r0, [r7, #20]
 80068a4:	f01b fbbc 	bl	8022020 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	33e8      	adds	r3, #232	@ 0xe8
 80068b2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3308      	adds	r3, #8
 80068b8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80068ba:	2206      	movs	r2, #6
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	6978      	ldr	r0, [r7, #20]
 80068c0:	f01b fbae 	bl	8022020 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	330e      	adds	r3, #14
 80068cc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	601a      	str	r2, [r3, #0]
    }
 80068d8:	bf00      	nop
 80068da:	3720      	adds	r7, #32
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08c      	sub	sp, #48	@ 0x30
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	330e      	adds	r3, #14
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80068f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068fe:	429a      	cmp	r2, r3
 8006900:	d005      	beq.n	800690e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f844 	bl	8006990 <xIsIPInARPCache>
 8006908:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 800690a:	2b01      	cmp	r3, #1
 800690c:	d106      	bne.n	800691c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006910:	3308      	adds	r3, #8
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f980 	bl	8006c1c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800691c:	4b1b      	ldr	r3, [pc, #108]	@ (800698c <vARPProcessPacketReply+0xac>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02e      	beq.n	8006982 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8006924:	4b19      	ldr	r3, [pc, #100]	@ (800698c <vARPProcessPacketReply+0xac>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f003 f8a5 	bl	8009a78 <uxIPHeaderSizePacket>
 800692e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8006930:	2b14      	cmp	r3, #20
 8006932:	d126      	bne.n	8006982 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8006934:	4b15      	ldr	r3, [pc, #84]	@ (800698c <vARPProcessPacketReply+0xac>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	330e      	adds	r3, #14
 8006940:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d11a      	bne.n	8006982 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8006950:	2301      	movs	r3, #1
 8006952:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8006954:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <vARPProcessPacketReply+0xac>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800695a:	f107 0314 	add.w	r3, r7, #20
 800695e:	69f9      	ldr	r1, [r7, #28]
 8006960:	4618      	mov	r0, r3
 8006962:	f002 fcd5 	bl	8009310 <xSendEventStructToIPTask>
 8006966:	4603      	mov	r3, r0
 8006968:	2b01      	cmp	r3, #1
 800696a:	d004      	beq.n	8006976 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800696c:	4b07      	ldr	r3, [pc, #28]	@ (800698c <vARPProcessPacketReply+0xac>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f010 fa91 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8006976:	4b05      	ldr	r3, [pc, #20]	@ (800698c <vARPProcessPacketReply+0xac>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800697c:	2000      	movs	r0, #0
 800697e:	f003 fabd 	bl	8009efc <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8006982:	bf00      	nop
 8006984:	3730      	adds	r7, #48	@ 0x30
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000fd8 	.word	0x20000fd8

08006990 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e017      	b.n	80069d2 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80069a2:	4a12      	ldr	r2, [pc, #72]	@ (80069ec <xIsIPInARPCache+0x5c>)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	4413      	add	r3, r2
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d10c      	bne.n	80069cc <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 80069b2:	2301      	movs	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80069b6:	4a0d      	ldr	r2, [pc, #52]	@ (80069ec <xIsIPInARPCache+0x5c>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	4413      	add	r3, r2
 80069be:	330b      	adds	r3, #11
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60bb      	str	r3, [r7, #8]
            }

            break;
 80069ca:	e006      	b.n	80069da <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	dde4      	ble.n	80069a2 <xIsIPInARPCache+0x12>
 80069d8:	e000      	b.n	80069dc <xIsIPInARPCache+0x4c>
            break;
 80069da:	bf00      	nop
        }
    }

    return xReturn;
 80069dc:	68bb      	ldr	r3, [r7, #8]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20000da0 	.word	0x20000da0

080069f0 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b0a5      	sub	sp, #148	@ 0x94
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f003 f83a 	bl	8009a78 <uxIPHeaderSizePacket>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b14      	cmp	r3, #20
 8006a08:	d002      	beq.n	8006a10 <xCheckRequiresARPResolution+0x20>
 8006a0a:	2b28      	cmp	r3, #40	@ 0x28
 8006a0c:	d029      	beq.n	8006a62 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 8006a0e:	e0b6      	b.n	8006b7e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a14:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a18:	330e      	adds	r3, #14
 8006a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a20:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8006a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	405a      	eors	r2, r3
 8006a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 80a0 	bne.w	8006b78 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8006a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff ffa7 	bl	8006990 <xIsIPInARPCache>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 8097 	bne.w	8006b78 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4619      	mov	r1, r3
 8006a54:	4610      	mov	r0, r2
 8006a56:	f000 fbe1 	bl	800721c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006a60:	e08a      	b.n	8006b78 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a6e:	330e      	adds	r3, #14
 8006a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8006a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a78:	3308      	adds	r3, #8
 8006a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 8006a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a82:	799b      	ldrb	r3, [r3, #6]
 8006a84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8006a88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006a8c:	2b06      	cmp	r3, #6
 8006a8e:	d003      	beq.n	8006a98 <xCheckRequiresARPResolution+0xa8>
 8006a90:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006a94:	2b11      	cmp	r3, #17
 8006a96:	d171      	bne.n	8006b7c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8006a98:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006a9c:	f006 ff68 	bl	800d970 <xIPv6_GetIPType>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8006aa6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8006aaa:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <xCheckRequiresARPResolution+0xde>
 8006ab2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d007      	beq.n	8006aca <xCheckRequiresARPResolution+0xda>
 8006aba:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d101      	bne.n	8006ac6 <xCheckRequiresARPResolution+0xd6>
 8006ac2:	4b32      	ldr	r3, [pc, #200]	@ (8006b8c <xCheckRequiresARPResolution+0x19c>)
 8006ac4:	e004      	b.n	8006ad0 <xCheckRequiresARPResolution+0xe0>
 8006ac6:	4b32      	ldr	r3, [pc, #200]	@ (8006b90 <xCheckRequiresARPResolution+0x1a0>)
 8006ac8:	e002      	b.n	8006ad0 <xCheckRequiresARPResolution+0xe0>
 8006aca:	4b32      	ldr	r3, [pc, #200]	@ (8006b94 <xCheckRequiresARPResolution+0x1a4>)
 8006acc:	e000      	b.n	8006ad0 <xCheckRequiresARPResolution+0xe0>
 8006ace:	4b32      	ldr	r3, [pc, #200]	@ (8006b98 <xCheckRequiresARPResolution+0x1a8>)
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4832      	ldr	r0, [pc, #200]	@ (8006b9c <xCheckRequiresARPResolution+0x1ac>)
 8006ad4:	f01b f888 	bl	8021be8 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8006ad8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d14d      	bne.n	8006b7c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	2250      	movs	r2, #80	@ 0x50
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f01b fba6 	bl	802223a <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 8006aee:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8006af2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006af6:	4619      	mov	r1, r3
 8006af8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006afc:	f004 fe0e 	bl	800b71c <eNDGetCacheEntry>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8006b06:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <xCheckRequiresARPResolution+0x12e>
 8006b0e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <xCheckRequiresARPResolution+0x12a>
 8006b16:	4c22      	ldr	r4, [pc, #136]	@ (8006ba0 <xCheckRequiresARPResolution+0x1b0>)
 8006b18:	e002      	b.n	8006b20 <xCheckRequiresARPResolution+0x130>
 8006b1a:	4c22      	ldr	r4, [pc, #136]	@ (8006ba4 <xCheckRequiresARPResolution+0x1b4>)
 8006b1c:	e000      	b.n	8006b20 <xCheckRequiresARPResolution+0x130>
 8006b1e:	4c22      	ldr	r4, [pc, #136]	@ (8006ba8 <xCheckRequiresARPResolution+0x1b8>)
 8006b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b22:	f107 010c 	add.w	r1, r7, #12
 8006b26:	2250      	movs	r2, #80	@ 0x50
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f006 ff79 	bl	800da20 <pcEndpointName>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461a      	mov	r2, r3
 8006b32:	4621      	mov	r1, r4
 8006b34:	481d      	ldr	r0, [pc, #116]	@ (8006bac <xCheckRequiresARPResolution+0x1bc>)
 8006b36:	f01b f857 	bl	8021be8 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 8006b3a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d11c      	bne.n	8006b7c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8006b42:	2356      	movs	r3, #86	@ 0x56
 8006b44:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8006b46:	2100      	movs	r1, #0
 8006b48:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006b4a:	f010 f93d 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 8006b4e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006b50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00c      	beq.n	8006b70 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b5c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b64:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006b66:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8006b6a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006b6c:	f005 f842 	bl	800bbf4 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006b76:	e001      	b.n	8006b7c <xCheckRequiresARPResolution+0x18c>
                   break;
 8006b78:	bf00      	nop
 8006b7a:	e000      	b.n	8006b7e <xCheckRequiresARPResolution+0x18e>
                   break;
 8006b7c:	bf00      	nop
    }

    return xNeedsARPResolution;
 8006b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3794      	adds	r7, #148	@ 0x94
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd90      	pop	{r4, r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	08023f58 	.word	0x08023f58
 8006b90:	08023f64 	.word	0x08023f64
 8006b94:	08023f6c 	.word	0x08023f6c
 8006b98:	08023f78 	.word	0x08023f78
 8006b9c:	08023f80 	.word	0x08023f80
 8006ba0:	08023fac 	.word	0x08023fac
 8006ba4:	08023fb0 	.word	0x08023fb0
 8006ba8:	08023fb8 	.word	0x08023fb8
 8006bac:	08023fc0 	.word	0x08023fc0

08006bb0 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d026      	beq.n	8006c0e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e020      	b.n	8006c08 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006bc6:	4a14      	ldr	r2, [pc, #80]	@ (8006c18 <vARPRefreshCacheEntryAge+0x68>)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	4413      	add	r3, r2
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d115      	bne.n	8006c02 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	4a0f      	ldr	r2, [pc, #60]	@ (8006c18 <vARPRefreshCacheEntryAge+0x68>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	3304      	adds	r3, #4
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	2206      	movs	r2, #6
 8006be4:	4618      	mov	r0, r3
 8006be6:	f01c f9b0 	bl	8022f4a <memcmp>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d108      	bne.n	8006c02 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006bf0:	4a09      	ldr	r2, [pc, #36]	@ (8006c18 <vARPRefreshCacheEntryAge+0x68>)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4413      	add	r3, r2
 8006bf8:	330a      	adds	r3, #10
 8006bfa:	2296      	movs	r2, #150	@ 0x96
 8006bfc:	701a      	strb	r2, [r3, #0]
                    break;
 8006bfe:	bf00      	nop
                }
            }
        }
    }
}
 8006c00:	e005      	b.n	8006c0e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	dddb      	ble.n	8006bc6 <vARPRefreshCacheEntryAge+0x16>
}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000da0 	.word	0x20000da0

08006c1c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8006c28:	f107 0310 	add.w	r3, r7, #16
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f85b 	bl	8006cec <prvFindCacheEntry>
 8006c36:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d150      	bne.n	8006ce0 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	db0e      	blt.n	8006c62 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	db0e      	blt.n	8006c6c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	4a25      	ldr	r2, [pc, #148]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006c54:	4413      	add	r3, r2
 8006c56:	2210      	movs	r2, #16
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f01b faed 	bl	802223a <memset>
 8006c60:	e004      	b.n	8006c6c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	db01      	blt.n	8006c6c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	4413      	add	r3, r2
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01f      	beq.n	8006cbe <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	4a19      	ldr	r2, [pc, #100]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006c84:	4413      	add	r3, r2
 8006c86:	3304      	adds	r3, #4
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	2206      	movs	r2, #6
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f01b f9c7 	bl	8022020 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	4a14      	ldr	r2, [pc, #80]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	4413      	add	r3, r2
 8006c9a:	330a      	adds	r3, #10
 8006c9c:	2296      	movs	r2, #150	@ 0x96
 8006c9e:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4a11      	ldr	r2, [pc, #68]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	4413      	add	r3, r2
 8006ca8:	330b      	adds	r3, #11
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	4413      	add	r3, r2
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 8006cbc:	e010      	b.n	8006ce0 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da0d      	bge.n	8006ce0 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	4a08      	ldr	r2, [pc, #32]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	4413      	add	r3, r2
 8006ccc:	330a      	adds	r3, #10
 8006cce:	2205      	movs	r2, #5
 8006cd0:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	4a04      	ldr	r2, [pc, #16]	@ (8006ce8 <vARPRefreshCacheEntry+0xcc>)
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	4413      	add	r3, r2
 8006cda:	330b      	adds	r3, #11
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000da0 	.word	0x20000da0

08006cec <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	@ 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006d08:	2102      	movs	r1, #2
 8006d0a:	68b8      	ldr	r0, [r7, #8]
 8006d0c:	f006 fb24 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf14      	ite	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	2300      	moveq	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 8006d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d22:	3b01      	subs	r3, #1
 8006d24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295
 8006d36:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d3e:	2300      	movs	r3, #0
 8006d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d42:	e074      	b.n	8006e2e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	4a3b      	ldr	r2, [pc, #236]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006d54:	4413      	add	r3, r2
 8006d56:	3304      	adds	r3, #4
 8006d58:	68f9      	ldr	r1, [r7, #12]
 8006d5a:	2206      	movs	r2, #6
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f01c f8f4 	bl	8022f4a <memcmp>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006d6c:	4a34      	ldr	r2, [pc, #208]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	4413      	add	r3, r2
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d125      	bne.n	8006dc8 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d86:	601a      	str	r2, [r3, #0]
                break;
 8006d88:	e054      	b.n	8006e34 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d017      	beq.n	8006dc0 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006d90:	4a2b      	ldr	r2, [pc, #172]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	4413      	add	r3, r2
 8006d98:	330a      	adds	r3, #10
 8006d9a:	2296      	movs	r2, #150	@ 0x96
 8006d9c:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8006d9e:	4a28      	ldr	r2, [pc, #160]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	4413      	add	r3, r2
 8006da6:	330b      	adds	r3, #11
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 8006dac:	4a24      	ldr	r2, [pc, #144]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	4413      	add	r3, r2
 8006db4:	330c      	adds	r3, #12
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
                break;
 8006dbe:	e039      	b.n	8006e34 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e02f      	b.n	8006e28 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d017      	beq.n	8006dfe <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006dce:	4a1c      	ldr	r2, [pc, #112]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	4413      	add	r3, r2
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2103      	movs	r1, #3
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f006 fabc 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bf14      	ite	ne
 8006de6:	2301      	movne	r3, #1
 8006de8:	2300      	moveq	r3, #0
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d118      	bne.n	8006e28 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dfa:	605a      	str	r2, [r3, #4]
 8006dfc:	e014      	b.n	8006e28 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8006dfe:	4a10      	ldr	r2, [pc, #64]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	4413      	add	r3, r2
 8006e06:	330a      	adds	r3, #10
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d90a      	bls.n	8006e28 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8006e12:	4a0b      	ldr	r2, [pc, #44]	@ (8006e40 <prvFindCacheEntry+0x154>)
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	4413      	add	r3, r2
 8006e1a:	330a      	adds	r3, #10
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e26:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	dd87      	ble.n	8006d44 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8006e34:	69fb      	ldr	r3, [r7, #28]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3728      	adds	r7, #40	@ 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000da0 	.word	0x20000da0

08006e44 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d104      	bne.n	8006e64 <eARPGetCacheEntry+0x20>
 8006e5a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 8006e5e:	483c      	ldr	r0, [pc, #240]	@ (8006f50 <eARPGetCacheEntry+0x10c>)
 8006e60:	f7fa fc84 	bl	800176c <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <eARPGetCacheEntry+0x30>
 8006e6a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8006e6e:	4838      	ldr	r0, [pc, #224]	@ (8006f50 <eARPGetCacheEntry+0x10c>)
 8006e70:	f7fa fc7c 	bl	800176c <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <eARPGetCacheEntry+0x40>
 8006e7a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 8006e7e:	4834      	ldr	r0, [pc, #208]	@ (8006f50 <eARPGetCacheEntry+0x10c>)
 8006e80:	f7fa fc74 	bl	800176c <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 8006e90:	2100      	movs	r1, #0
 8006e92:	6978      	ldr	r0, [r7, #20]
 8006e94:	f006 f9d4 	bl	800d240 <FreeRTOS_FindEndPointOnIP_IPv4>
 8006e98:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f003 fc3c 	bl	800a718 <xIsIPv4Multicast>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d021      	beq.n	8006eea <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	6978      	ldr	r0, [r7, #20]
 8006eaa:	f003 fd63 	bl	800a974 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f006 f978 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 8006eb8:	61b8      	str	r0, [r7, #24]

            for( ;
 8006eba:	e012      	b.n	8006ee2 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d105      	bne.n	8006ed8 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	77fb      	strb	r3, [r7, #31]
                    break;
 8006ed6:	e035      	b.n	8006f44 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	2000      	movs	r0, #0
 8006edc:	f006 f986 	bl	800d1ec <FreeRTOS_NextEndPoint>
 8006ee0:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e9      	bne.n	8006ebc <eARPGetCacheEntry+0x78>
 8006ee8:	e02c      	b.n	8006f44 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	061a      	lsls	r2, r3, #24
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f00:	431a      	orrs	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	0e1b      	lsrs	r3, r3, #24
 8006f06:	4313      	orrs	r3, r2
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2bff      	cmp	r3, #255	@ 0xff
 8006f0c:	d113      	bne.n	8006f36 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4a10      	ldr	r2, [pc, #64]	@ (8006f54 <eARPGetCacheEntry+0x110>)
 8006f12:	6811      	ldr	r1, [r2, #0]
 8006f14:	6019      	str	r1, [r3, #0]
 8006f16:	8892      	ldrh	r2, [r2, #4]
 8006f18:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006f1a:	2104      	movs	r1, #4
 8006f1c:	6978      	ldr	r0, [r7, #20]
 8006f1e:	f006 fa1b 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 8006f22:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8006f30:	2301      	movs	r3, #1
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e006      	b.n	8006f44 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f80c 	bl	8006f58 <eARPGetCacheEntryGateWay>
 8006f40:	4603      	mov	r3, r0
 8006f42:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8006f44:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006f46:	4618      	mov	r0, r3
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	08023ff4 	.word	0x08023ff4
 8006f54:	08027294 	.word	0x08027294

08006f58 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006f64:	2300      	movs	r3, #0
 8006f66:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006f74:	2104      	movs	r1, #4
 8006f76:	69b8      	ldr	r0, [r7, #24]
 8006f78:	f006 f9ee 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 8006f7c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11b      	bne.n	8006fbc <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	69b8      	ldr	r0, [r7, #24]
 8006f8a:	f000 f86b 	bl	8007064 <prvCacheLookup>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8006f92:	7ffb      	ldrb	r3, [r7, #31]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d017      	beq.n	8006fc8 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8006f98:	2040      	movs	r0, #64	@ 0x40
 8006f9a:	f006 fca9 	bl	800d8f0 <FreeRTOS_FindGateWay>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	e008      	b.n	8006fc8 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	e005      	b.n	8006fc8 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8006fc8:	7ffb      	ldrb	r3, [r7, #31]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d13f      	bne.n	800704e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e039      	b.n	800704e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	69b8      	ldr	r0, [r7, #24]
 8006fe0:	f000 f840 	bl	8007064 <prvCacheLookup>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d103      	bne.n	8006ff6 <eARPGetCacheEntryGateWay+0x9e>
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d028      	beq.n	8007048 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	061a      	lsls	r2, r3, #24
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007002:	431a      	orrs	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800700c:	431a      	orrs	r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	0e1b      	lsrs	r3, r3, #24
 8007012:	ea42 0103 	orr.w	r1, r2, r3
 8007016:	7ffb      	ldrb	r3, [r7, #31]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <eARPGetCacheEntryGateWay+0xc8>
 800701c:	480e      	ldr	r0, [pc, #56]	@ (8007058 <eARPGetCacheEntryGateWay+0x100>)
 800701e:	e000      	b.n	8007022 <eARPGetCacheEntryGateWay+0xca>
 8007020:	480e      	ldr	r0, [pc, #56]	@ (800705c <eARPGetCacheEntryGateWay+0x104>)
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	061a      	lsls	r2, r3, #24
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800702e:	431a      	orrs	r2, r3
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007038:	431a      	orrs	r2, r3
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	0e1b      	lsrs	r3, r3, #24
 800703e:	4313      	orrs	r3, r2
 8007040:	4602      	mov	r2, r0
 8007042:	4807      	ldr	r0, [pc, #28]	@ (8007060 <eARPGetCacheEntryGateWay+0x108>)
 8007044:	f01a fdd0 	bl	8021be8 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800704e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	08024020 	.word	0x08024020
 800705c:	08024024 	.word	0x08024024
 8007060:	0802402c 	.word	0x0802402c

08007064 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007070:	2300      	movs	r3, #0
 8007072:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e02a      	b.n	80070d0 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800707a:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <prvCacheLookup+0x7c>)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	4413      	add	r3, r2
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	429a      	cmp	r2, r3
 8007088:	d11f      	bne.n	80070ca <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800708a:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <prvCacheLookup+0x7c>)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	4413      	add	r3, r2
 8007092:	330b      	adds	r3, #11
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 800709a:	2302      	movs	r3, #2
 800709c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 800709e:	e01a      	b.n	80070d6 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80070a0:	68b8      	ldr	r0, [r7, #8]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4a0e      	ldr	r2, [pc, #56]	@ (80070e0 <prvCacheLookup+0x7c>)
 80070a8:	4413      	add	r3, r2
 80070aa:	3304      	adds	r3, #4
 80070ac:	2206      	movs	r2, #6
 80070ae:	4619      	mov	r1, r3
 80070b0:	f01a ffb6 	bl	8022020 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 80070b4:	4a0a      	ldr	r2, [pc, #40]	@ (80070e0 <prvCacheLookup+0x7c>)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	4413      	add	r3, r2
 80070bc:	330c      	adds	r3, #12
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80070c4:	2301      	movs	r3, #1
 80070c6:	74fb      	strb	r3, [r7, #19]
                break;
 80070c8:	e005      	b.n	80070d6 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	3301      	adds	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2b05      	cmp	r3, #5
 80070d4:	ddd1      	ble.n	800707a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 80070d6:	7cfb      	ldrb	r3, [r7, #19]
    }
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000da0 	.word	0x20000da0

080070e4 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e048      	b.n	8007182 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 80070f0:	4a47      	ldr	r2, [pc, #284]	@ (8007210 <vARPAgeCache+0x12c>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	4413      	add	r3, r2
 80070f8:	330a      	adds	r3, #10
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d03d      	beq.n	800717c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007100:	4a43      	ldr	r2, [pc, #268]	@ (8007210 <vARPAgeCache+0x12c>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	4413      	add	r3, r2
 8007108:	330a      	adds	r3, #10
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	3b01      	subs	r3, #1
 800710e:	b2d9      	uxtb	r1, r3
 8007110:	4a3f      	ldr	r2, [pc, #252]	@ (8007210 <vARPAgeCache+0x12c>)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	4413      	add	r3, r2
 8007118:	330a      	adds	r3, #10
 800711a:	460a      	mov	r2, r1
 800711c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800711e:	4a3c      	ldr	r2, [pc, #240]	@ (8007210 <vARPAgeCache+0x12c>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	4413      	add	r3, r2
 8007126:	330b      	adds	r3, #11
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d108      	bne.n	8007140 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800712e:	4a38      	ldr	r2, [pc, #224]	@ (8007210 <vARPAgeCache+0x12c>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4413      	add	r3, r2
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f8d7 	bl	80072ec <FreeRTOS_OutputARPRequest>
 800713e:	e00f      	b.n	8007160 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007140:	4a33      	ldr	r2, [pc, #204]	@ (8007210 <vARPAgeCache+0x12c>)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	4413      	add	r3, r2
 8007148:	330a      	adds	r3, #10
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d807      	bhi.n	8007160 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007150:	4a2f      	ldr	r2, [pc, #188]	@ (8007210 <vARPAgeCache+0x12c>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	4413      	add	r3, r2
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f8c6 	bl	80072ec <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8007160:	4a2b      	ldr	r2, [pc, #172]	@ (8007210 <vARPAgeCache+0x12c>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	4413      	add	r3, r2
 8007168:	330a      	adds	r3, #10
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8007170:	4a27      	ldr	r2, [pc, #156]	@ (8007210 <vARPAgeCache+0x12c>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	4413      	add	r3, r2
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b05      	cmp	r3, #5
 8007186:	ddb3      	ble.n	80070f0 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8007188:	f7fd f8dc 	bl	8004344 <xTaskGetTickCount>
 800718c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800718e:	4b21      	ldr	r3, [pc, #132]	@ (8007214 <vARPAgeCache+0x130>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <vARPAgeCache+0xc2>
 8007196:	4b1f      	ldr	r3, [pc, #124]	@ (8007214 <vARPAgeCache+0x130>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d92f      	bls.n	8007206 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80071a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007218 <vARPAgeCache+0x134>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 80071ac:	e025      	b.n	80071fa <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d019      	beq.n	80071f2 <vARPAgeCache+0x10e>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d015      	beq.n	80071f2 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80071cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <vARPAgeCache+0xf8>
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d007      	beq.n	80071ea <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 80071da:	e00a      	b.n	80071f2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4619      	mov	r1, r3
 80071e2:	68b8      	ldr	r0, [r7, #8]
 80071e4:	f000 f81a 	bl	800721c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 80071e8:	e003      	b.n	80071f2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 80071ea:	68b8      	ldr	r0, [r7, #8]
 80071ec:	f005 f822 	bl	800c234 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 80071f0:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80071f8:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1d6      	bne.n	80071ae <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007200:	4a04      	ldr	r2, [pc, #16]	@ (8007214 <vARPAgeCache+0x130>)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6013      	str	r3, [r2, #0]
        }
    }
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000da0 	.word	0x20000da0
 8007214:	20000e00 	.word	0x20000e00
 8007218:	20001364 	.word	0x20001364

0800721c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d156      	bne.n	80072e4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 800723a:	2b00      	cmp	r3, #0
 800723c:	d052      	beq.n	80072e4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800723e:	2100      	movs	r1, #0
 8007240:	202a      	movs	r0, #42	@ 0x2a
 8007242:	f00f fdc1 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 8007246:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d04a      	beq.n	80072e4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007264:	6938      	ldr	r0, [r7, #16]
 8007266:	f000 f855 	bl	8007314 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007270:	d812      	bhi.n	8007298 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e008      	b.n	800728c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	4413      	add	r3, r2
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	3301      	adds	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007290:	ddf3      	ble.n	800727a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	223c      	movs	r2, #60	@ 0x3c
 8007296:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8007298:	f002 ff7c 	bl	800a194 <xIsCallingFromIPTask>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00f      	beq.n	80072c2 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 80072ba:	2201      	movs	r2, #1
 80072bc:	6939      	ldr	r1, [r7, #16]
 80072be:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 80072c0:	e010      	b.n	80072e4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 80072c2:	2302      	movs	r3, #2
 80072c4:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	f04f 31ff 	mov.w	r1, #4294967295
 80072d2:	4618      	mov	r0, r3
 80072d4:	f002 f81c 	bl	8009310 <xSendEventStructToIPTask>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80072de:	6938      	ldr	r0, [r7, #16]
 80072e0:	f00f fdda 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
    }
 80072e4:	bf00      	nop
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 80072f4:	210c      	movs	r1, #12
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f006 f82e 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 80072fc:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff ff88 	bl	800721c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <vARPGenerateRequestPacket+0x18>
 8007322:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007326:	4828      	ldr	r0, [pc, #160]	@ (80073c8 <vARPGenerateRequestPacket+0xb4>)
 8007328:	f7fa fa20 	bl	800176c <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007330:	2b29      	cmp	r3, #41	@ 0x29
 8007332:	d804      	bhi.n	800733e <vARPGenerateRequestPacket+0x2a>
 8007334:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007338:	4823      	ldr	r0, [pc, #140]	@ (80073c8 <vARPGenerateRequestPacket+0xb4>)
 800733a:	f7fa fa17 	bl	800176c <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <vARPGenerateRequestPacket+0x3c>
 8007346:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 800734a:	481f      	ldr	r0, [pc, #124]	@ (80073c8 <vARPGenerateRequestPacket+0xb4>)
 800734c:	f7fa fa0e 	bl	800176c <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007356:	4b1d      	ldr	r3, [pc, #116]	@ (80073cc <vARPGenerateRequestPacket+0xb8>)
 8007358:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800735e:	2226      	movs	r2, #38	@ 0x26
 8007360:	6939      	ldr	r1, [r7, #16]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f01a fe5c 	bl	8022020 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736c:	33e8      	adds	r3, #232	@ 0xe8
 800736e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	3306      	adds	r3, #6
 8007374:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007376:	2206      	movs	r2, #6
 8007378:	6939      	ldr	r1, [r7, #16]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f01a fe50 	bl	8022020 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007384:	33e8      	adds	r3, #232	@ 0xe8
 8007386:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	3316      	adds	r3, #22
 800738c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800738e:	2206      	movs	r2, #6
 8007390:	6939      	ldr	r1, [r7, #16]
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f01a fe44 	bl	8022020 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739c:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	331c      	adds	r3, #28
 80073a2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	222a      	movs	r2, #42	@ 0x2a
 80073bc:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	08023ff4 	.word	0x08023ff4
 80073cc:	0802725c 	.word	0x0802725c

080073d0 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01b      	beq.n	8007416 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e014      	b.n	800740e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 80073e4:	4a10      	ldr	r2, [pc, #64]	@ (8007428 <FreeRTOS_ClearARP+0x58>)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	4413      	add	r3, r2
 80073ec:	330c      	adds	r3, #12
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d108      	bne.n	8007408 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007428 <FreeRTOS_ClearARP+0x58>)
 80073fc:	4413      	add	r3, r2
 80073fe:	2210      	movs	r2, #16
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f01a ff19 	bl	802223a <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b05      	cmp	r3, #5
 8007412:	dde7      	ble.n	80073e4 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007414:	e004      	b.n	8007420 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007416:	2260      	movs	r2, #96	@ 0x60
 8007418:	2100      	movs	r1, #0
 800741a:	4803      	ldr	r0, [pc, #12]	@ (8007428 <FreeRTOS_ClearARP+0x58>)
 800741c:	f01a ff0d 	bl	802223a <memset>
}
 8007420:	bf00      	nop
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000da0 	.word	0x20000da0

0800742c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007430:	f000 fc8a 	bl	8007d48 <vDNSCallbackInitialise>
        }
 8007434:	bf00      	nop
 8007436:	bd80      	pop	{r7, pc}

08007438 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007448:	2048      	movs	r0, #72	@ 0x48
 800744a:	f7fe fdeb 	bl	8006024 <pvPortMalloc>
 800744e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d057      	beq.n	8007506 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800745a:	2248      	movs	r2, #72	@ 0x48
 800745c:	2100      	movs	r1, #0
 800745e:	69f8      	ldr	r0, [r7, #28]
 8007460:	f01a feeb 	bl	802223a <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	3338      	adds	r3, #56	@ 0x38
 8007472:	220f      	movs	r2, #15
 8007474:	68f9      	ldr	r1, [r7, #12]
 8007476:	4618      	mov	r0, r3
 8007478:	f01b fdac 	bl	8022fd4 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f103 0220 	add.w	r2, r3, #32
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d003      	beq.n	800749c <pxNew_AddrInfo+0x64>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b0a      	cmp	r3, #10
 8007498:	d01e      	beq.n	80074d8 <pxNew_AddrInfo+0xa0>
 800749a:	e02b      	b.n	80074f4 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f003 f87d 	bl	800a59c <ulChar2u32>
 80074a2:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	061a      	lsls	r2, r3, #24
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074b0:	431a      	orrs	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80074ba:	ea42 0103 	orr.w	r1, r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	0e1a      	lsrs	r2, r3, #24
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2202      	movs	r2, #2
 80074ce:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	2204      	movs	r2, #4
 80074d4:	611a      	str	r2, [r3, #16]
                       }
                       break;
 80074d6:	e016      	b.n	8007506 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	220a      	movs	r2, #10
 80074dc:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2210      	movs	r2, #16
 80074e2:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	3328      	adds	r3, #40	@ 0x28
 80074e8:	2210      	movs	r2, #16
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f01a fd97 	bl	8022020 <memcpy>
                        break;
 80074f2:	e008      	b.n	8007506 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 80074f4:	4806      	ldr	r0, [pc, #24]	@ (8007510 <pxNew_AddrInfo+0xd8>)
 80074f6:	f01a fb77 	bl	8021be8 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 80074fa:	69b8      	ldr	r0, [r7, #24]
 80074fc:	f7fe fe66 	bl	80061cc <vPortFree>
                    pxAddrInfo = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	61fb      	str	r3, [r7, #28]

                    break;
 8007504:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8007506:	69fb      	ldr	r3, [r7, #28]
    }
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	08024098 	.word	0x08024098

08007514 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8007526:	e007      	b.n	8007538 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7fe fe4c 	bl	80061cc <vPortFree>
                pxIterator = pxNext;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f4      	bne.n	8007528 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 800753e:	bf00      	nop
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007546:	b580      	push	{r7, lr}
 8007548:	b088      	sub	sp, #32
 800754a:	af02      	add	r7, sp, #8
 800754c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f002 fa92 	bl	8009a78 <uxIPHeaderSizePacket>
 8007554:	4603      	mov	r3, r0
 8007556:	3316      	adds	r3, #22
 8007558:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	429a      	cmp	r2, r3
 8007562:	d829      	bhi.n	80075b8 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b0b      	cmp	r3, #11
 8007572:	d921      	bls.n	80075b8 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	4413      	add	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	b21a      	sxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800758e:	0a1b      	lsrs	r3, r3, #8
 8007590:	b29b      	uxth	r3, r3
 8007592:	b21b      	sxth	r3, r3
 8007594:	4313      	orrs	r3, r2
 8007596:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007598:	b29b      	uxth	r3, r3
 800759a:	f107 0208 	add.w	r2, r7, #8
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2300      	movs	r3, #0
 80075a2:	6939      	ldr	r1, [r7, #16]
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fcb5 	bl	8007f14 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff ffae 	bl	8007514 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 80075b8:	2300      	movs	r3, #0
    }
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af02      	add	r7, sp, #8
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	2300      	movs	r3, #0
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f818 	bl	8007610 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 80075e0:	2301      	movs	r3, #1
    }
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 80075f0:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80075f4:	2100      	movs	r1, #0
 80075f6:	4804      	ldr	r0, [pc, #16]	@ (8007608 <FreeRTOS_dnsclear+0x1c>)
 80075f8:	f01a fe1f 	bl	802223a <memset>
        uxFreeEntry = 0U;
 80075fc:	4b03      	ldr	r3, [pc, #12]	@ (800760c <FreeRTOS_dnsclear+0x20>)
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
    }
 8007602:	bf00      	nop
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000e10 	.word	0x20000e10
 800760c:	20000fc0 	.word	0x20000fc0

08007610 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b09b      	sub	sp, #108	@ 0x6c
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 800761e:	f7fc fe91 	bl	8004344 <xTaskGetTickCount>
 8007622:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <FreeRTOS_ProcessDNSCache+0x22>
 800762a:	21d8      	movs	r1, #216	@ 0xd8
 800762c:	4841      	ldr	r0, [pc, #260]	@ (8007734 <FreeRTOS_ProcessDNSCache+0x124>)
 800762e:	f7fa f89d 	bl	800176c <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 800763e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007640:	4a3d      	ldr	r2, [pc, #244]	@ (8007738 <FreeRTOS_ProcessDNSCache+0x128>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	099b      	lsrs	r3, r3, #6
 8007648:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 800764a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800764e:	461a      	mov	r2, r3
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 f87a 	bl	800774c <prvFindEntryIndex>
 8007658:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 800765a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800765c:	2b01      	cmp	r3, #1
 800765e:	d110      	bne.n	8007682 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d106      	bne.n	8007674 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007666:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800766a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	f000 f8b1 	bl	80077d4 <prvGetCacheIPEntry>
 8007672:	e013      	b.n	800769c <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007674:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	f000 f94a 	bl	8007914 <prvUpdateCacheEntry>
 8007680:	e00c      	b.n	800769c <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d103      	bne.n	8007690 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e005      	b.n	800769c <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8007690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f994 	bl	80079c4 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <FreeRTOS_ProcessDNSCache+0x9a>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d03f      	beq.n	800772a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 80076aa:	2302      	movs	r3, #2
 80076ac:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00c      	beq.n	80076d0 <FreeRTOS_ProcessDNSCache+0xc0>
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10e      	bne.n	80076d8 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	6859      	ldr	r1, [r3, #4]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 80076ca:	230a      	movs	r3, #10
 80076cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 80076ce:	e007      	b.n	80076e0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 80076d6:	e003      	b.n	80076e0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 80076d8:	4818      	ldr	r0, [pc, #96]	@ (800773c <FreeRTOS_ProcessDNSCache+0x12c>)
 80076da:	f01a fa85 	bl	8021be8 <lUDPLoggingPrintf>
                        break;
 80076de:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 80076e0:	f107 0214 	add.w	r2, r7, #20
 80076e4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80076e8:	2328      	movs	r3, #40	@ 0x28
 80076ea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80076ec:	f007 fc62 	bl	800efb4 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <FreeRTOS_ProcessDNSCache+0xea>
 80076f6:	4912      	ldr	r1, [pc, #72]	@ (8007740 <FreeRTOS_ProcessDNSCache+0x130>)
 80076f8:	e000      	b.n	80076fc <FreeRTOS_ProcessDNSCache+0xec>
 80076fa:	4912      	ldr	r1, [pc, #72]	@ (8007744 <FreeRTOS_ProcessDNSCache+0x134>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	061a      	lsls	r2, r3, #24
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	0a1b      	lsrs	r3, r3, #8
 800770e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	0e1b      	lsrs	r3, r3, #24
 8007718:	4313      	orrs	r3, r2
 800771a:	f107 0214 	add.w	r2, r7, #20
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4808      	ldr	r0, [pc, #32]	@ (8007748 <FreeRTOS_ProcessDNSCache+0x138>)
 8007726:	f01a fa5f 	bl	8021be8 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 800772a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 800772c:	4618      	mov	r0, r3
 800772e:	3764      	adds	r7, #100	@ 0x64
 8007730:	46bd      	mov	sp, r7
 8007732:	bd90      	pop	{r4, r7, pc}
 8007734:	08024314 	.word	0x08024314
 8007738:	10624dd3 	.word	0x10624dd3
 800773c:	08024348 	.word	0x08024348
 8007740:	08024378 	.word	0x08024378
 8007744:	08024380 	.word	0x08024380
 8007748:	08024384 	.word	0x08024384

0800774c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	e02d      	b.n	80077be <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007762:	4a1b      	ldr	r2, [pc, #108]	@ (80077d0 <prvFindEntryIndex+0x84>)
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	216c      	movs	r1, #108	@ 0x6c
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	3350      	adds	r3, #80	@ 0x50
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01f      	beq.n	80077b6 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	226c      	movs	r2, #108	@ 0x6c
 800777a:	fb02 f303 	mul.w	r3, r2, r3
 800777e:	3350      	adds	r3, #80	@ 0x50
 8007780:	4a13      	ldr	r2, [pc, #76]	@ (80077d0 <prvFindEntryIndex+0x84>)
 8007782:	4413      	add	r3, r2
 8007784:	68f9      	ldr	r1, [r7, #12]
 8007786:	4618      	mov	r0, r3
 8007788:	f7f8 fdaa 	bl	80002e0 <strcmp>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d112      	bne.n	80077b8 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	490e      	ldr	r1, [pc, #56]	@ (80077d0 <prvFindEntryIndex+0x84>)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	206c      	movs	r0, #108	@ 0x6c
 800779c:	fb00 f303 	mul.w	r3, r0, r3
 80077a0:	440b      	add	r3, r1
 80077a2:	3310      	adds	r3, #16
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d106      	bne.n	80077b8 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	601a      	str	r2, [r3, #0]
                    break;
 80077b4:	e006      	b.n	80077c4 <prvFindEntryIndex+0x78>
                continue;
 80077b6:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	3301      	adds	r3, #1
 80077bc:	613b      	str	r3, [r7, #16]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d9ce      	bls.n	8007762 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 80077c4:	697b      	ldr	r3, [r7, #20]
    }
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000e10 	.word	0x20000e10

080077d4 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 80077e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	216c      	movs	r1, #108	@ 0x6c
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	4413      	add	r3, r2
 80077f2:	3364      	adds	r3, #100	@ 0x64
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 80077fc:	4a44      	ldr	r2, [pc, #272]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	216c      	movs	r1, #108	@ 0x6c
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	4413      	add	r3, r2
 8007808:	3360      	adds	r3, #96	@ 0x60
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	061a      	lsls	r2, r3, #24
 800780e:	4940      	ldr	r1, [pc, #256]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	206c      	movs	r0, #108	@ 0x6c
 8007814:	fb00 f303 	mul.w	r3, r0, r3
 8007818:	440b      	add	r3, r1
 800781a:	3360      	adds	r3, #96	@ 0x60
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	021b      	lsls	r3, r3, #8
 8007820:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007824:	431a      	orrs	r2, r3
 8007826:	493a      	ldr	r1, [pc, #232]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	206c      	movs	r0, #108	@ 0x6c
 800782c:	fb00 f303 	mul.w	r3, r0, r3
 8007830:	440b      	add	r3, r1
 8007832:	3360      	adds	r3, #96	@ 0x60
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800783c:	431a      	orrs	r2, r3
 800783e:	4934      	ldr	r1, [pc, #208]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	206c      	movs	r0, #108	@ 0x6c
 8007844:	fb00 f303 	mul.w	r3, r0, r3
 8007848:	440b      	add	r3, r1
 800784a:	3360      	adds	r3, #96	@ 0x60
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	0e1b      	lsrs	r3, r3, #24
 8007850:	4313      	orrs	r3, r2
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	429a      	cmp	r2, r3
 8007856:	d24a      	bcs.n	80078ee <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007858:	4a2d      	ldr	r2, [pc, #180]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	216c      	movs	r1, #108	@ 0x6c
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	3369      	adds	r3, #105	@ 0x69
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	4929      	ldr	r1, [pc, #164]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	206c      	movs	r0, #108	@ 0x6c
 800786e:	fb00 f202 	mul.w	r2, r0, r2
 8007872:	440a      	add	r2, r1
 8007874:	3268      	adds	r2, #104	@ 0x68
 8007876:	7812      	ldrb	r2, [r2, #0]
 8007878:	fbb3 f1f2 	udiv	r1, r3, r2
 800787c:	fb01 f202 	mul.w	r2, r1, r2
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 800788c:	7cfb      	ldrb	r3, [r7, #19]
 800788e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8007890:	4a1f      	ldr	r2, [pc, #124]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	216c      	movs	r1, #108	@ 0x6c
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	4413      	add	r3, r2
 800789c:	3369      	adds	r3, #105	@ 0x69
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	b2d8      	uxtb	r0, r3
 80078a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	216c      	movs	r1, #108	@ 0x6c
 80078aa:	fb01 f303 	mul.w	r3, r1, r3
 80078ae:	4413      	add	r3, r2
 80078b0:	3369      	adds	r3, #105	@ 0x69
 80078b2:	4602      	mov	r2, r0
 80078b4:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	216c      	movs	r1, #108	@ 0x6c
 80078c4:	fb01 f202 	mul.w	r2, r1, r2
 80078c8:	4413      	add	r3, r2
 80078ca:	4a11      	ldr	r2, [pc, #68]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 80078cc:	4413      	add	r3, r2
 80078ce:	2214      	movs	r2, #20
 80078d0:	4619      	mov	r1, r3
 80078d2:	68b8      	ldr	r0, [r7, #8]
 80078d4:	f01a fba4 	bl	8022020 <memcpy>
            isRead = pdTRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d010      	beq.n	8007904 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f8dc 	bl	8007aa4 <prvReadDNSCache>
 80078ec:	e00a      	b.n	8007904 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 80078ee:	4a08      	ldr	r2, [pc, #32]	@ (8007910 <prvGetCacheIPEntry+0x13c>)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	216c      	movs	r1, #108	@ 0x6c
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	4413      	add	r3, r2
 80078fa:	3350      	adds	r3, #80	@ 0x50
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8007900:	2300      	movs	r3, #0
 8007902:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8007904:	69fb      	ldr	r3, [r7, #28]
    }
 8007906:	4618      	mov	r0, r3
 8007908:	3720      	adds	r7, #32
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000e10 	.word	0x20000e10

08007914 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8007926:	4a26      	ldr	r2, [pc, #152]	@ (80079c0 <prvUpdateCacheEntry+0xac>)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	216c      	movs	r1, #108	@ 0x6c
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	4413      	add	r3, r2
 8007932:	3368      	adds	r3, #104	@ 0x68
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d81b      	bhi.n	8007972 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 800793a:	4a21      	ldr	r2, [pc, #132]	@ (80079c0 <prvUpdateCacheEntry+0xac>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	216c      	movs	r1, #108	@ 0x6c
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	4413      	add	r3, r2
 8007946:	3368      	adds	r3, #104	@ 0x68
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 800794c:	4a1c      	ldr	r2, [pc, #112]	@ (80079c0 <prvUpdateCacheEntry+0xac>)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	216c      	movs	r1, #108	@ 0x6c
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	4413      	add	r3, r2
 8007958:	3368      	adds	r3, #104	@ 0x68
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	3301      	adds	r3, #1
 800795e:	b2d8      	uxtb	r0, r3
 8007960:	4a17      	ldr	r2, [pc, #92]	@ (80079c0 <prvUpdateCacheEntry+0xac>)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	216c      	movs	r1, #108	@ 0x6c
 8007966:	fb01 f303 	mul.w	r3, r1, r3
 800796a:	4413      	add	r3, r2
 800796c:	3368      	adds	r3, #104	@ 0x68
 800796e:	4602      	mov	r2, r0
 8007970:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	216c      	movs	r1, #108	@ 0x6c
 8007980:	fb01 f202 	mul.w	r2, r1, r2
 8007984:	4413      	add	r3, r2
 8007986:	4a0e      	ldr	r2, [pc, #56]	@ (80079c0 <prvUpdateCacheEntry+0xac>)
 8007988:	4413      	add	r3, r2
 800798a:	2214      	movs	r2, #20
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	4618      	mov	r0, r3
 8007990:	f01a fb46 	bl	8022020 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8007994:	4a0a      	ldr	r2, [pc, #40]	@ (80079c0 <prvUpdateCacheEntry+0xac>)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	216c      	movs	r1, #108	@ 0x6c
 800799a:	fb01 f303 	mul.w	r3, r1, r3
 800799e:	4413      	add	r3, r2
 80079a0:	3360      	adds	r3, #96	@ 0x60
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80079a6:	4a06      	ldr	r2, [pc, #24]	@ (80079c0 <prvUpdateCacheEntry+0xac>)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	216c      	movs	r1, #108	@ 0x6c
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	4413      	add	r3, r2
 80079b2:	3364      	adds	r3, #100	@ 0x64
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	601a      	str	r2, [r3, #0]
    }
 80079b8:	bf00      	nop
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000e10 	.word	0x20000e10

080079c4 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7f8 fc8e 	bl	80002f4 <strlen>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b0f      	cmp	r3, #15
 80079dc:	d859      	bhi.n	8007a92 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 80079de:	4b2f      	ldr	r3, [pc, #188]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	226c      	movs	r2, #108	@ 0x6c
 80079e4:	fb02 f303 	mul.w	r3, r2, r3
 80079e8:	3350      	adds	r3, #80	@ 0x50
 80079ea:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa0 <prvInsertCacheEntry+0xdc>)
 80079ec:	4413      	add	r3, r2
 80079ee:	2210      	movs	r2, #16
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f01b faee 	bl	8022fd4 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 80079f8:	4b28      	ldr	r3, [pc, #160]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	226c      	movs	r2, #108	@ 0x6c
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
 8007a02:	4a27      	ldr	r2, [pc, #156]	@ (8007aa0 <prvInsertCacheEntry+0xdc>)
 8007a04:	4413      	add	r3, r2
 8007a06:	2214      	movs	r2, #20
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f01a fb08 	bl	8022020 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8007a10:	4b22      	ldr	r3, [pc, #136]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a22      	ldr	r2, [pc, #136]	@ (8007aa0 <prvInsertCacheEntry+0xdc>)
 8007a16:	216c      	movs	r1, #108	@ 0x6c
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3360      	adds	r3, #96	@ 0x60
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007a24:	4b1d      	ldr	r3, [pc, #116]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <prvInsertCacheEntry+0xdc>)
 8007a2a:	216c      	movs	r1, #108	@ 0x6c
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	3364      	adds	r3, #100	@ 0x64
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8007a38:	4b18      	ldr	r3, [pc, #96]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a18      	ldr	r2, [pc, #96]	@ (8007aa0 <prvInsertCacheEntry+0xdc>)
 8007a3e:	216c      	movs	r1, #108	@ 0x6c
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	3368      	adds	r3, #104	@ 0x68
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 8007a4c:	4b13      	ldr	r3, [pc, #76]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a13      	ldr	r2, [pc, #76]	@ (8007aa0 <prvInsertCacheEntry+0xdc>)
 8007a52:	216c      	movs	r1, #108	@ 0x6c
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	3369      	adds	r3, #105	@ 0x69
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8007a60:	4b0e      	ldr	r3, [pc, #56]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	226c      	movs	r2, #108	@ 0x6c
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
 8007a6a:	3314      	adds	r3, #20
 8007a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa0 <prvInsertCacheEntry+0xdc>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	223c      	movs	r2, #60	@ 0x3c
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f01a fbe0 	bl	802223a <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 8007a7a:	4b08      	ldr	r3, [pc, #32]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	4a06      	ldr	r2, [pc, #24]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a82:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d102      	bne.n	8007a92 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 8007a8c:	4b03      	ldr	r3, [pc, #12]	@ (8007a9c <prvInsertCacheEntry+0xd8>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8007a92:	bf00      	nop
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000fc0 	.word	0x20000fc0
 8007aa0:	20000e10 	.word	0x20000e10

08007aa4 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007aba:	4a2e      	ldr	r2, [pc, #184]	@ (8007b74 <prvReadDNSCache+0xd0>)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	216c      	movs	r1, #108	@ 0x6c
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3368      	adds	r3, #104	@ 0x68
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d901      	bls.n	8007ad6 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007ad2:	2304      	movs	r3, #4
 8007ad4:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	e041      	b.n	8007b60 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	216c      	movs	r1, #108	@ 0x6c
 8007aea:	fb01 f202 	mul.w	r2, r1, r2
 8007aee:	4413      	add	r3, r2
 8007af0:	4a20      	ldr	r2, [pc, #128]	@ (8007b74 <prvReadDNSCache+0xd0>)
 8007af2:	4413      	add	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <prvReadDNSCache+0x60>
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d010      	beq.n	8007b24 <prvReadDNSCache+0x80>
 8007b02:	e01d      	b.n	8007b40 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	226c      	movs	r2, #108	@ 0x6c
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
 8007b10:	3350      	adds	r3, #80	@ 0x50
 8007b12:	4a18      	ldr	r2, [pc, #96]	@ (8007b74 <prvReadDNSCache+0xd0>)
 8007b14:	4413      	add	r3, r2
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	2102      	movs	r1, #2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fc8c 	bl	8007438 <pxNew_AddrInfo>
 8007b20:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8007b22:	e011      	b.n	8007b48 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	226c      	movs	r2, #108	@ 0x6c
 8007b28:	fb02 f303 	mul.w	r3, r2, r3
 8007b2c:	3350      	adds	r3, #80	@ 0x50
 8007b2e:	4a11      	ldr	r2, [pc, #68]	@ (8007b74 <prvReadDNSCache+0xd0>)
 8007b30:	4413      	add	r3, r2
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	210a      	movs	r1, #10
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff fc7e 	bl	8007438 <pxNew_AddrInfo>
 8007b3c:	6178      	str	r0, [r7, #20]
                        break;
 8007b3e:	e003      	b.n	8007b48 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8007b40:	480d      	ldr	r0, [pc, #52]	@ (8007b78 <prvReadDNSCache+0xd4>)
 8007b42:	f01a f851 	bl	8021be8 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8007b46:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00d      	beq.n	8007b6a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	331c      	adds	r3, #28
 8007b58:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	61fb      	str	r3, [r7, #28]
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d3b9      	bcc.n	8007adc <prvReadDNSCache+0x38>
        }
    }
 8007b68:	e000      	b.n	8007b6c <prvReadDNSCache+0xc8>
                break;
 8007b6a:	bf00      	nop
    }
 8007b6c:	bf00      	nop
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000e10 	.word	0x20000e10
 8007b78:	080243b8 	.word	0x080243b8

08007b7c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08a      	sub	sp, #40	@ 0x28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 8007b8a:	4b28      	ldr	r3, [pc, #160]	@ (8007c2c <xDNSDoCallback+0xb0>)
 8007b8c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8007ba0:	f7fc fabe 	bl	8004120 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	e029      	b.n	8007c00 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d101      	bne.n	8007bc0 <xDNSDoCallback+0x44>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e000      	b.n	8007bc2 <xDNSDoCallback+0x46>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d117      	bne.n	8007bfa <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3314      	adds	r3, #20
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fb fa56 	bl	800308c <uxListRemove>
                    vPortFree( pxCallback );
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7fe faf3 	bl	80061cc <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007be6:	4b12      	ldr	r3, [pc, #72]	@ (8007c30 <xDNSDoCallback+0xb4>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f002 f9ca 	bl	8009f88 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8007bf8:	e006      	b.n	8007c08 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8007c00:	6a3a      	ldr	r2, [r7, #32]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d1d1      	bne.n	8007bac <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8007c08:	f7fc fa98 	bl	800413c <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d006      	beq.n	8007c20 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	69b9      	ldr	r1, [r7, #24]
 8007c1e:	4798      	blx	r3
        }

        return xResult;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007c22:	4618      	mov	r0, r3
 8007c24:	3728      	adds	r7, #40	@ 0x28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000fcc 	.word	0x20000fcc
 8007c30:	20000fc4 	.word	0x20000fc4

08007c34 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08c      	sub	sp, #48	@ 0x30
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 8007c3c:	4b40      	ldr	r3, [pc, #256]	@ (8007d40 <vDNSCheckCallBack+0x10c>)
 8007c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8007c40:	f107 030c 	add.w	r3, r7, #12
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fb f997 	bl	8002f78 <vListInitialise>

        vTaskSuspendAll();
 8007c4a:	f7fc fa69 	bl	8004120 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c54:	e02e      	b.n	8007cb4 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <vDNSCheckCallBack+0x50>
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d108      	bne.n	8007c84 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	3314      	adds	r3, #20
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fb fa08 	bl	800308c <uxListRemove>
                    vPortFree( pxCallback );
 8007c7c:	6a38      	ldr	r0, [r7, #32]
 8007c7e:	f7fe faa5 	bl	80061cc <vPortFree>
 8007c82:	e017      	b.n	8007cb4 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	3308      	adds	r3, #8
 8007c88:	6a3a      	ldr	r2, [r7, #32]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fc ff3b 	bl	8004b08 <xTaskCheckForTimeOut>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	3314      	adds	r3, #20
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fb f9f5 	bl	800308c <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	f103 0214 	add.w	r2, r3, #20
 8007ca8:	f107 030c 	add.w	r3, r7, #12
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fb f98f 	bl	8002fd2 <vListInsertEnd>
                 pxIterator != xEnd; )
 8007cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d1cc      	bne.n	8007c56 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 8007cbc:	f7fc fa3e 	bl	800413c <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d030      	beq.n	8007d28 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8007cc6:	f107 030c 	add.w	r3, r7, #12
 8007cca:	3308      	adds	r3, #8
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd4:	e024      	b.n	8007d20 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf0:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf6:	6911      	ldr	r1, [r2, #16]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	4798      	blx	r3
 8007cfc:	e008      	b.n	8007d10 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d04:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d0a:	6911      	ldr	r1, [r2, #16]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d12:	3314      	adds	r3, #20
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fb f9b9 	bl	800308c <uxListRemove>
                vPortFree( pxCallback );
 8007d1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d1c:	f7fe fa56 	bl	80061cc <vPortFree>
                 pxIterator != xEnd;
 8007d20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d1d6      	bne.n	8007cd6 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007d28:	4b06      	ldr	r3, [pc, #24]	@ (8007d44 <vDNSCheckCallBack+0x110>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8007d30:	2000      	movs	r0, #0
 8007d32:	f002 f929 	bl	8009f88 <vIPSetDNSTimerEnableState>
        }
    }
 8007d36:	bf00      	nop
 8007d38:	3730      	adds	r7, #48	@ 0x30
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000fcc 	.word	0x20000fcc
 8007d44:	20000fc4 	.word	0x20000fc4

08007d48 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 8007d4c:	4802      	ldr	r0, [pc, #8]	@ (8007d58 <vDNSCallbackInitialise+0x10>)
 8007d4e:	f7fb f913 	bl	8002f78 <vListInitialise>
    }
 8007d52:	bf00      	nop
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000fc4 	.word	0x20000fc4

08007d5c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 8007d5c:	b480      	push	{r7}
 8007d5e:	b089      	sub	sp, #36	@ 0x24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e069      	b.n	8007e5a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d94:	d144      	bne.n	8007e20 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d903      	bls.n	8007da4 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	3302      	adds	r3, #2
 8007da0:	61bb      	str	r3, [r7, #24]
 8007da2:	e05a      	b.n	8007e5a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	e057      	b.n	8007e5a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	3334      	adds	r3, #52	@ 0x34
 8007db8:	222e      	movs	r2, #46	@ 0x2e
 8007dba:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d202      	bcs.n	8007de4 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61bb      	str	r3, [r7, #24]
                    break;
 8007de2:	e027      	b.n	8007e34 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d812      	bhi.n	8007e16 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61bb      	str	r3, [r7, #24]
                    break;
 8007df4:	e01e      	b.n	8007e34 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	7819      	ldrb	r1, [r3, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	4413      	add	r3, r2
 8007e04:	3334      	adds	r3, #52	@ 0x34
 8007e06:	460a      	mov	r2, r1
 8007e08:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	3301      	adds	r3, #1
 8007e14:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	617a      	str	r2, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1ea      	bne.n	8007df6 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d205      	bcs.n	8007e34 <DNS_ReadNameField+0xd8>
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1ba      	bne.n	8007daa <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00f      	beq.n	8007e5a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d209      	bcs.n	8007e56 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	4413      	add	r3, r2
 8007e48:	3334      	adds	r3, #52	@ 0x34
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	3301      	adds	r3, #1
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	e001      	b.n	8007e5a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
    }
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3724      	adds	r7, #36	@ 0x24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	e03f      	b.n	8007f06 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e94:	d11f      	bne.n	8007ed6 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d903      	bls.n	8007ea4 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	e030      	b.n	8007f06 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	e02d      	b.n	8007f06 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4413      	add	r3, r2
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d908      	bls.n	8007ed0 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	e002      	b.n	8007ed6 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	613b      	str	r3, [r7, #16]
                    break;
 8007ed4:	e008      	b.n	8007ee8 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4413      	add	r3, r2
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <DNS_SkipNameField+0x80>
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d8e0      	bhi.n	8007eaa <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d103      	bne.n	8007f02 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3301      	adds	r3, #1
 8007efe:	613b      	str	r3, [r7, #16]
 8007f00:	e001      	b.n	8007f06 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8007f06:	693b      	ldr	r3, [r7, #16]
    }
 8007f08:	4618      	mov	r0, r3
 8007f0a:	371c      	adds	r7, #28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8007f14:	b5b0      	push	{r4, r5, r7, lr}
 8007f16:	b0f6      	sub	sp, #472	@ 0x1d8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8007f1e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8007f22:	6020      	str	r0, [r4, #0]
 8007f24:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8007f28:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 8007f2c:	6001      	str	r1, [r0, #0]
 8007f2e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007f32:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8007f36:	600a      	str	r2, [r1, #0]
 8007f38:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007f3c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007f40:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8007f4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f52:	224c      	movs	r2, #76	@ 0x4c
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f01a f96f 	bl	802223a <memset>
        xSet.usPortNumber = usPort;
 8007f5c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8007f60:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8007f64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f68:	3344      	adds	r3, #68	@ 0x44
 8007f6a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8007f6e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f72:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8007f7c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d803      	bhi.n	8007f92 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007f90:	e35a      	b.n	8008648 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8007f92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f96:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8007fa0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007fa4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8007fae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007fb2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8007fc8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007fcc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8007fd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007fda:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8007fe6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007fea:	3b0c      	subs	r3, #12
 8007fec:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8007ff0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007ff4:	889b      	ldrh	r3, [r3, #4]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	b21a      	sxth	r2, r3
 8007ffc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008000:	889b      	ldrh	r3, [r3, #4]
 8008002:	b29b      	uxth	r3, r3
 8008004:	0a1b      	lsrs	r3, r3, #8
 8008006:	b29b      	uxth	r3, r3
 8008008:	b21b      	sxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b21b      	sxth	r3, r3
 800800e:	b29b      	uxth	r3, r3
 8008010:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008014:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008018:	88db      	ldrh	r3, [r3, #6]
 800801a:	b29b      	uxth	r3, r3
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	b21a      	sxth	r2, r3
 8008020:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	b29b      	uxth	r3, r3
 8008028:	0a1b      	lsrs	r3, r3, #8
 800802a:	b29b      	uxth	r3, r3
 800802c:	b21b      	sxth	r3, r3
 800802e:	4313      	orrs	r3, r2
 8008030:	b21b      	sxth	r3, r3
 8008032:	b29b      	uxth	r3, r3
 8008034:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008038:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800803c:	885b      	ldrh	r3, [r3, #2]
 800803e:	b29b      	uxth	r3, r3
 8008040:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008044:	2b80      	cmp	r3, #128	@ 0x80
 8008046:	d11b      	bne.n	8008080 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8008048:	2301      	movs	r3, #1
 800804a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 800804e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8008056:	2300      	movs	r3, #0
 8008058:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800805c:	e2f4      	b.n	8008648 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 800805e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008062:	2b00      	cmp	r3, #0
 8008064:	d114      	bne.n	8008090 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008066:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800806a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 800806e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008072:	2110      	movs	r1, #16
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff fe71 	bl	8007d5c <DNS_ReadNameField>
 800807a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 800807e:	e007      	b.n	8008090 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8008080:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008084:	2b00      	cmp	r3, #0
 8008086:	d103      	bne.n	8008090 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800808e:	e2db      	b.n	8008648 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8008090:	2300      	movs	r3, #0
 8008092:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008096:	e064      	b.n	8008162 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8008098:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800809c:	2b00      	cmp	r3, #0
 800809e:	d103      	bne.n	80080a8 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80080a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080a4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 80080a8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d108      	bne.n	80080c2 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 80080b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80080b4:	2110      	movs	r1, #16
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fe50 	bl	8007d5c <DNS_ReadNameField>
 80080bc:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80080c0:	e009      	b.n	80080d6 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 80080c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080c6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fecb 	bl	8007e68 <DNS_SkipNameField>
 80080d2:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 80080d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d103      	bne.n	80080e6 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 80080de:	2300      	movs	r3, #0
 80080e0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80080e4:	e043      	b.n	800816e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 80080e6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80080ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80080ee:	4413      	add	r3, r2
 80080f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 80080f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80080f8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80080fc:	4413      	add	r3, r2
 80080fe:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008102:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008106:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008110:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008114:	2b03      	cmp	r3, #3
 8008116:	d91b      	bls.n	8008150 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800811c:	4618      	mov	r0, r3
 800811e:	f002 fa58 	bl	800a5d2 <usChar2u16>
 8008122:	4603      	mov	r3, r0
 8008124:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800812c:	3302      	adds	r3, #2
 800812e:	4618      	mov	r0, r3
 8008130:	f002 fa4f 	bl	800a5d2 <usChar2u16>
 8008134:	4603      	mov	r3, r0
 8008136:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 800813a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800813e:	3304      	adds	r3, #4
 8008140:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008144:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008148:	3b04      	subs	r3, #4
 800814a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800814e:	e003      	b.n	8008158 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008156:	e00a      	b.n	800816e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008158:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800815c:	3301      	adds	r3, #1
 800815e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008162:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008166:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 800816a:	429a      	cmp	r2, r3
 800816c:	d394      	bcc.n	8008098 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 800816e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8265 	beq.w	8008642 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008178:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800817c:	2b01      	cmp	r3, #1
 800817e:	d10d      	bne.n	800819c <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008180:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8008184:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008188:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800818c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8008190:	6819      	ldr	r1, [r3, #0]
 8008192:	f000 fa73 	bl	800867c <parseDNSAnswer>
 8008196:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 800819a:	e255      	b.n	8008648 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 800819c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d004      	beq.n	80081ae <DNS_ParseDNSReply+0x29a>
 80081a4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80081a8:	2b1c      	cmp	r3, #28
 80081aa:	f040 824d 	bne.w	8008648 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 80081ae:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	f040 8248 	bne.w	8008648 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 80081b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80081bc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f001 ff9f 	bl	800a104 <pxUDPPayloadBuffer_to_NetworkBuffer>
 80081c6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 80081ca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d103      	bne.n	80081da <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 80081d2:	48c4      	ldr	r0, [pc, #784]	@ (80084e4 <DNS_ParseDNSReply+0x5d0>)
 80081d4:	f019 fd08 	bl	8021be8 <lUDPLoggingPrintf>
                            break;
 80081d8:	e236      	b.n	8008648 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 80081da:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80081de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e0:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80081e4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80081e8:	6812      	ldr	r2, [r2, #0]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 80081f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80081f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f6:	d003      	beq.n	8008200 <DNS_ParseDNSReply+0x2ec>
 80081f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80081fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80081fe:	d101      	bne.n	8008204 <DNS_ParseDNSReply+0x2f0>
 8008200:	2301      	movs	r3, #1
 8008202:	e000      	b.n	8008206 <DNS_ParseDNSReply+0x2f2>
 8008204:	2300      	movs	r3, #0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <DNS_ParseDNSReply+0x300>
 800820a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 800820e:	48b6      	ldr	r0, [pc, #728]	@ (80084e8 <DNS_ParseDNSReply+0x5d4>)
 8008210:	f7f9 faac 	bl	800176c <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008214:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8213 	beq.w	8008646 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008220:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008226:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 800822a:	f107 0314 	add.w	r3, r7, #20
 800822e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008232:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008236:	4618      	mov	r0, r3
 8008238:	f019 fef2 	bl	8022020 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 800823c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008240:	461a      	mov	r2, r3
 8008242:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008246:	3334      	adds	r3, #52	@ 0x34
 8008248:	4619      	mov	r1, r3
 800824a:	48a8      	ldr	r0, [pc, #672]	@ (80084ec <DNS_ParseDNSReply+0x5d8>)
 800824c:	f019 fccc 	bl	8021be8 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008250:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008254:	b2da      	uxtb	r2, r3
 8008256:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800825a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800825e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008262:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008266:	3334      	adds	r3, #52	@ 0x34
 8008268:	4618      	mov	r0, r3
 800826a:	f7f9 fb13 	bl	8001894 <xApplicationDNSQueryHook>
 800826e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008272:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d014      	beq.n	80082a4 <DNS_ParseDNSReply+0x390>
 800827a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800827e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008282:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <DNS_ParseDNSReply+0x390>
 8008290:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008294:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 800829e:	2300      	movs	r3, #0
 80082a0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 80082a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 81cd 	beq.w	8008648 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 80082ba:	4b8d      	ldr	r3, [pc, #564]	@ (80084f0 <DNS_ParseDNSReply+0x5dc>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d164      	bne.n	800838c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 80082c2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80082c6:	f001 fbd7 	bl	8009a78 <uxIPHeaderSizePacket>
 80082ca:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 80082cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 80082d8:	3316      	adds	r3, #22
 80082da:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 80082de:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80082e2:	2b1c      	cmp	r3, #28
 80082e4:	d103      	bne.n	80082ee <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 80082e6:	231c      	movs	r3, #28
 80082e8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80082ec:	e002      	b.n	80082f4 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 80082ee:	2310      	movs	r3, #16
 80082f0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 80082f4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80082f8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80082fc:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 80082fe:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008302:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008306:	4413      	add	r3, r2
 8008308:	4619      	mov	r1, r3
 800830a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800830e:	f001 fe65 	bl	8009fdc <pxDuplicateNetworkBufferWithDescriptor>
 8008312:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008316:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800831a:	2b00      	cmp	r3, #0
 800831c:	d032      	beq.n	8008384 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 800831e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008322:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008326:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008332:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008336:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800833a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008346:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800834a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800834e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008354:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008358:	4413      	add	r3, r2
 800835a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 800835e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008362:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008366:	4413      	add	r3, r2
 8008368:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 800836c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008370:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008374:	4413      	add	r3, r2
 8008376:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 800837a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800837e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008382:	e00b      	b.n	800839c <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008384:	2300      	movs	r3, #0
 8008386:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800838a:	e007      	b.n	800839c <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800838c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008392:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008396:	4413      	add	r3, r2
 8008398:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 800839c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8151 	beq.w	8008648 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 80083a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083aa:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 80083ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083b2:	3302      	adds	r3, #2
 80083b4:	2280      	movs	r2, #128	@ 0x80
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083bc:	3303      	adds	r3, #3
 80083be:	2200      	movs	r2, #0
 80083c0:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 80083c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083c6:	3306      	adds	r3, #6
 80083c8:	2200      	movs	r2, #0
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083d0:	3307      	adds	r3, #7
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 80083d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083da:	3308      	adds	r3, #8
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083e4:	3309      	adds	r3, #9
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 80083ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083ee:	330a      	adds	r3, #10
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083f8:	330b      	adds	r3, #11
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 80083fe:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008402:	22c0      	movs	r2, #192	@ 0xc0
 8008404:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008406:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800840a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	b2da      	uxtb	r2, r3
 8008412:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008416:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008418:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800841c:	0a1b      	lsrs	r3, r3, #8
 800841e:	b29a      	uxth	r2, r3
 8008420:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008424:	3302      	adds	r3, #2
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 800842e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008432:	3303      	adds	r3, #3
 8008434:	b2d2      	uxtb	r2, r2
 8008436:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008438:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800843c:	3304      	adds	r3, #4
 800843e:	2200      	movs	r2, #0
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008446:	3305      	adds	r3, #5
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800844c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008450:	3306      	adds	r3, #6
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800845a:	3307      	adds	r3, #7
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008464:	3308      	adds	r3, #8
 8008466:	2201      	movs	r2, #1
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800846e:	3309      	adds	r3, #9
 8008470:	222c      	movs	r2, #44	@ 0x2c
 8008472:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008474:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008478:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	b29b      	uxth	r3, r3
 8008480:	3310      	adds	r3, #16
 8008482:	b29b      	uxth	r3, r3
 8008484:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008488:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800848c:	2b1c      	cmp	r3, #28
 800848e:	d131      	bne.n	80084f4 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008490:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008494:	330a      	adds	r3, #10
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800849e:	330b      	adds	r3, #11
 80084a0:	2210      	movs	r2, #16
 80084a2:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80084a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80084a8:	f103 020c 	add.w	r2, r3, #12
 80084ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80084b0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80084b4:	4615      	mov	r5, r2
 80084b6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80084ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084bc:	6028      	str	r0, [r5, #0]
 80084be:	6069      	str	r1, [r5, #4]
 80084c0:	60aa      	str	r2, [r5, #8]
 80084c2:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 80084c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80084c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 80084d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	331c      	adds	r3, #28
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 80084e0:	e09a      	b.n	8008618 <DNS_ParseDNSReply+0x704>
 80084e2:	bf00      	nop
 80084e4:	08024460 	.word	0x08024460
 80084e8:	08024494 	.word	0x08024494
 80084ec:	080244c8 	.word	0x080244c8
 80084f0:	08027380 	.word	0x08027380
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 80084f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80084f8:	330a      	adds	r3, #10
 80084fa:	2200      	movs	r2, #0
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008502:	330b      	adds	r3, #11
 8008504:	2204      	movs	r2, #4
 8008506:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8008508:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800850c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	061a      	lsls	r2, r3, #24
 8008514:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008518:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008524:	431a      	orrs	r2, r3
 8008526:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800852a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	0a1b      	lsrs	r3, r3, #8
 8008532:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008536:	431a      	orrs	r2, r3
 8008538:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800853c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	0e1b      	lsrs	r3, r3, #24
 8008544:	4313      	orrs	r3, r2
 8008546:	0e1a      	lsrs	r2, r3, #24
 8008548:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800854c:	330c      	adds	r3, #12
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008556:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	061a      	lsls	r2, r3, #24
 800855e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008562:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800856e:	431a      	orrs	r2, r3
 8008570:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008574:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008580:	431a      	orrs	r2, r3
 8008582:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008586:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	0e1b      	lsrs	r3, r3, #24
 800858e:	4313      	orrs	r3, r2
 8008590:	0c1a      	lsrs	r2, r3, #16
 8008592:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008596:	330d      	adds	r3, #13
 8008598:	b2d2      	uxtb	r2, r2
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085a0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	061a      	lsls	r2, r3, #24
 80085a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085ac:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80085b8:	431a      	orrs	r2, r3
 80085ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085be:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	0a1b      	lsrs	r3, r3, #8
 80085c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80085ca:	431a      	orrs	r2, r3
 80085cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085d0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	0e1b      	lsrs	r3, r3, #24
 80085d8:	4313      	orrs	r3, r2
 80085da:	0a1a      	lsrs	r2, r3, #8
 80085dc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80085e0:	330e      	adds	r3, #14
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	0e1a      	lsrs	r2, r3, #24
 80085f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80085f6:	330f      	adds	r3, #15
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 80085fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008600:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 800860a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800860e:	b29b      	uxth	r3, r3
 8008610:	3310      	adds	r3, #16
 8008612:	b29b      	uxth	r3, r3
 8008614:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8008618:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 800861c:	4619      	mov	r1, r3
 800861e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008622:	f000 fa21 	bl	8008a68 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008626:	2100      	movs	r1, #0
 8008628:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800862c:	f001 f924 	bl	8009878 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008630:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008638:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 800863c:	f00e fc2c 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
 8008640:	e002      	b.n	8008648 <DNS_ParseDNSReply+0x734>
                    break;
 8008642:	bf00      	nop
 8008644:	e000      	b.n	8008648 <DNS_ParseDNSReply+0x734>
                            break;
 8008646:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008648:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d103      	bne.n	8008658 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008650:	2300      	movs	r3, #0
 8008652:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008656:	e009      	b.n	800866c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008658:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800865c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 800866c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008670:	4618      	mov	r0, r3
 8008672:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008676:	46bd      	mov	sp, r7
 8008678:	bdb0      	pop	{r4, r5, r7, pc}
 800867a:	bf00      	nop

0800867c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b0a7      	sub	sp, #156	@ 0x9c
 8008680:	af02      	add	r7, sp, #8
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800868e:	2304      	movs	r3, #4
 8008690:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 80086a0:	2300      	movs	r3, #0
 80086a2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80086a6:	e1c1      	b.n	8008a2c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80086b0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80086b4:	429a      	cmp	r2, r3
 80086b6:	f240 81c1 	bls.w	8008a3c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7ff fbcf 	bl	8007e68 <DNS_SkipNameField>
 80086ca:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 80086cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 80086d8:	e1b1      	b.n	8008a3e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086e6:	441a      	add	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086f2:	441a      	add	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	695a      	ldr	r2, [r3, #20]
 80086fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d803      	bhi.n	8008714 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 800870c:	2300      	movs	r3, #0
 800870e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008712:	e194      	b.n	8008a3e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4618      	mov	r0, r3
 800871a:	f001 ff5a 	bl	800a5d2 <usChar2u16>
 800871e:	4603      	mov	r3, r0
 8008720:	461a      	mov	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8b1b      	ldrh	r3, [r3, #24]
 800872a:	2b1c      	cmp	r3, #28
 800872c:	d10c      	bne.n	8008748 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2210      	movs	r2, #16
 8008732:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	695a      	ldr	r2, [r3, #20]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	330a      	adds	r3, #10
 800873e:	429a      	cmp	r2, r3
 8008740:	d323      	bcc.n	800878a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008742:	2301      	movs	r3, #1
 8008744:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008746:	e020      	b.n	800878a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8b1b      	ldrh	r3, [r3, #24]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d11c      	bne.n	800878a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2204      	movs	r2, #4
 8008754:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	695a      	ldr	r2, [r3, #20]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	330a      	adds	r3, #10
 8008760:	429a      	cmp	r2, r3
 8008762:	d312      	bcc.n	800878a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	330a      	adds	r3, #10
 800876a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800876c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008770:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	461a      	mov	r2, r3
 8008778:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800877a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800877c:	f019 fc50 	bl	8022020 <memcpy>

                    if( ulTestAddress != 0U )
 8008780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008786:	2301      	movs	r3, #1
 8008788:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 800878a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 810d 	beq.w	80089ac <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800879a:	891b      	ldrh	r3, [r3, #8]
 800879c:	b29b      	uxth	r3, r3
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	b21a      	sxth	r2, r3
 80087a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087a4:	891b      	ldrh	r3, [r3, #8]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	0a1b      	lsrs	r3, r3, #8
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	b21b      	sxth	r3, r3
 80087ae:	4313      	orrs	r3, r2
 80087b0:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 80087b6:	b21b      	sxth	r3, r3
 80087b8:	429a      	cmp	r2, r3
 80087ba:	f040 80d0 	bne.w	800895e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d11c      	bne.n	8008800 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 80087cc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	6859      	ldr	r1, [r3, #4]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3334      	adds	r3, #52	@ 0x34
 80087e4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80087e8:	210a      	movs	r1, #10
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fe24 	bl	8007438 <pxNew_AddrInfo>
 80087f0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	61da      	str	r2, [r3, #28]
 80087fe:	e021      	b.n	8008844 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	330a      	adds	r3, #10
 8008806:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	331c      	adds	r3, #28
 800880c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	461a      	mov	r2, r3
 8008814:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008816:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8008818:	f019 fc02 	bl	8022020 <memcpy>

                        if( ppxAddressInfo != NULL )
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	331c      	adds	r3, #28
 8008826:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3334      	adds	r3, #52	@ 0x34
 800882c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800882e:	2102      	movs	r1, #2
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fe01 	bl	8007438 <pxNew_AddrInfo>
 8008836:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8008840:	2300      	movs	r3, #0
 8008842:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8008844:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008848:	2b00      	cmp	r3, #0
 800884a:	d013      	beq.n	8008874 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e004      	b.n	8008868 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008862:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008866:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8008868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800886c:	f103 021c 	add.w	r2, r3, #28
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <parseDNSAnswer+0x204>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	e000      	b.n	8008882 <parseDNSAnswer+0x206>
 8008880:	2300      	movs	r3, #0
 8008882:	4619      	mov	r1, r3
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff f979 	bl	8007b7c <xDNSDoCallback>
 800888a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 800888c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	2b00      	cmp	r3, #0
 800889e:	d011      	beq.n	80088c4 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 80088a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088a8:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 80088aa:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80088ae:	2300      	movs	r3, #0
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	2300      	movs	r3, #0
 80088b4:	f7fe fe85 	bl	80075c2 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80088bc:	3301      	adds	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8b1b      	ldrh	r3, [r3, #24]
 80088c8:	2b1c      	cmp	r3, #28
 80088ca:	d11f      	bne.n	800890c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 80088cc:	f107 0214 	add.w	r2, r7, #20
 80088d0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80088d4:	2328      	movs	r3, #40	@ 0x28
 80088d6:	200a      	movs	r0, #10
 80088d8:	f006 fb6c 	bl	800efb4 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	4618      	mov	r0, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <parseDNSAnswer+0x27c>
 80088f4:	4b58      	ldr	r3, [pc, #352]	@ (8008a58 <parseDNSAnswer+0x3dc>)
 80088f6:	e000      	b.n	80088fa <parseDNSAnswer+0x27e>
 80088f8:	4b58      	ldr	r3, [pc, #352]	@ (8008a5c <parseDNSAnswer+0x3e0>)
 80088fa:	f107 0114 	add.w	r1, r7, #20
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	460b      	mov	r3, r1
 8008902:	4601      	mov	r1, r0
 8008904:	4856      	ldr	r0, [pc, #344]	@ (8008a60 <parseDNSAnswer+0x3e4>)
 8008906:	f019 f96f 	bl	8021be8 <lUDPLoggingPrintf>
 800890a:	e01f      	b.n	800894c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8008912:	f107 0214 	add.w	r2, r7, #20
 8008916:	2328      	movs	r3, #40	@ 0x28
 8008918:	2002      	movs	r0, #2
 800891a:	f006 fb4b 	bl	800efb4 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	4618      	mov	r0, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <parseDNSAnswer+0x2be>
 8008936:	4b48      	ldr	r3, [pc, #288]	@ (8008a58 <parseDNSAnswer+0x3dc>)
 8008938:	e000      	b.n	800893c <parseDNSAnswer+0x2c0>
 800893a:	4b48      	ldr	r3, [pc, #288]	@ (8008a5c <parseDNSAnswer+0x3e0>)
 800893c:	f107 0114 	add.w	r1, r7, #20
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	460b      	mov	r3, r1
 8008944:	4601      	mov	r1, r0
 8008946:	4846      	ldr	r0, [pc, #280]	@ (8008a60 <parseDNSAnswer+0x3e4>)
 8008948:	f019 f94e 	bl	8021be8 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800894c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008950:	2b00      	cmp	r3, #0
 8008952:	d119      	bne.n	8008988 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800895c:	e014      	b.n	8008988 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800895e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008960:	891b      	ldrh	r3, [r3, #8]
 8008962:	b29b      	uxth	r3, r3
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	b21a      	sxth	r2, r3
 8008968:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800896a:	891b      	ldrh	r3, [r3, #8]
 800896c:	b29b      	uxth	r3, r3
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	b29b      	uxth	r3, r3
 8008972:	b21b      	sxth	r3, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	b21b      	sxth	r3, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	461a      	mov	r2, r3
 8008982:	4838      	ldr	r0, [pc, #224]	@ (8008a64 <parseDNSAnswer+0x3e8>)
 8008984:	f019 f930 	bl	8021be8 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	330a      	adds	r3, #10
 8008992:	441a      	add	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	f1a3 020a 	sub.w	r2, r3, #10
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	615a      	str	r2, [r3, #20]
 80089aa:	e03a      	b.n	8008a22 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	2b09      	cmp	r3, #9
 80089b2:	d936      	bls.n	8008a22 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f103 020a 	add.w	r2, r3, #10
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f1a3 020a 	sub.w	r2, r3, #10
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 80089d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089d4:	891b      	ldrh	r3, [r3, #8]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	b21a      	sxth	r2, r3
 80089dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089de:	891b      	ldrh	r3, [r3, #8]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	4313      	orrs	r3, r2
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	695a      	ldr	r2, [r3, #20]
 80089f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d30e      	bcc.n	8008a1a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008a04:	441a      	add	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008a12:	1ad2      	subs	r2, r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	615a      	str	r2, [r3, #20]
 8008a18:	e003      	b.n	8008a22 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8008a20:	e00d      	b.n	8008a3e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008a22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008a26:	3301      	adds	r3, #1
 8008a28:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	88db      	ldrh	r3, [r3, #6]
 8008a30:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008a34:	429a      	cmp	r2, r3
 8008a36:	f4ff ae37 	bcc.w	80086a8 <parseDNSAnswer+0x2c>
 8008a3a:	e000      	b.n	8008a3e <parseDNSAnswer+0x3c2>
                break;
 8008a3c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 8008a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <parseDNSAnswer+0x3d0>
 8008a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a4a:	e000      	b.n	8008a4e <parseDNSAnswer+0x3d2>
 8008a4c:	2300      	movs	r3, #0
    }
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3794      	adds	r7, #148	@ 0x94
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd90      	pop	{r4, r7, pc}
 8008a56:	bf00      	nop
 8008a58:	080244f8 	.word	0x080244f8
 8008a5c:	080244fc 	.word	0x080244fc
 8008a60:	08024504 	.word	0x08024504
 8008a64:	0802453c 	.word	0x0802453c

08008a68 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08c      	sub	sp, #48	@ 0x30
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a76:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fffd 	bl	8009a78 <uxIPHeaderSizePacket>
 8008a7e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <prepareReplyDNSMessage+0x28>
 8008a86:	f240 319f 	movw	r1, #927	@ 0x39f
 8008a8a:	4865      	ldr	r0, [pc, #404]	@ (8008c20 <prepareReplyDNSMessage+0x1b8>)
 8008a8c:	f7f8 fe6e 	bl	800176c <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a94:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	330e      	adds	r3, #14
 8008a9a:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9e:	2b28      	cmp	r3, #40	@ 0x28
 8008aa0:	d150      	bne.n	8008b44 <prepareReplyDNSMessage+0xdc>
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008aaa:	2b60      	cmp	r3, #96	@ 0x60
 8008aac:	d14a      	bne.n	8008b44 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab2:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	330e      	adds	r3, #14
 8008ab8:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	3336      	adds	r3, #54	@ 0x36
 8008abe:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	0a1b      	lsrs	r3, r3, #8
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f103 0018 	add.w	r0, r3, #24
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	2210      	movs	r2, #16
 8008aea:	4619      	mov	r1, r3
 8008aec:	f019 fa98 	bl	8022020 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f103 0008 	add.w	r0, r3, #8
 8008af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af8:	3338      	adds	r3, #56	@ 0x38
 8008afa:	2210      	movs	r2, #16
 8008afc:	4619      	mov	r1, r3
 8008afe:	f019 fa8f 	bl	8022020 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	3308      	adds	r3, #8
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3308      	adds	r3, #8
 8008b14:	0a1b      	lsrs	r3, r3, #8
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	781a      	ldrb	r2, [r3, #0]
 8008b24:	785b      	ldrb	r3, [r3, #1]
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	81fb      	strh	r3, [r7, #14]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	885b      	ldrh	r3, [r3, #2]
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	801a      	strh	r2, [r3, #0]
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	89fa      	ldrh	r2, [r7, #14]
 8008b3a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	333e      	adds	r3, #62	@ 0x3e
 8008b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8008b42:	e066      	b.n	8008c12 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	3322      	adds	r3, #34	@ 0x22
 8008b48:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3308      	adds	r3, #8
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	4619      	mov	r1, r3
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	440b      	add	r3, r1
 8008b68:	3308      	adds	r3, #8
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008c24 <prepareReplyDNSMessage+0x1bc>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d103      	bne.n	8008b88 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	22ff      	movs	r2, #255	@ 0xff
 8008b84:	721a      	strb	r2, [r3, #8]
 8008b86:	e006      	b.n	8008b96 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	2280      	movs	r2, #128	@ 0x80
 8008b94:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8008b9e:	4b22      	ldr	r3, [pc, #136]	@ (8008c28 <prepareReplyDNSMessage+0x1c0>)
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	b21a      	sxth	r2, r3
 8008ba6:	4b20      	ldr	r3, [pc, #128]	@ (8008c28 <prepareReplyDNSMessage+0x1c0>)
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	b21b      	sxth	r3, r3
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	b21b      	sxth	r3, r3
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	719a      	strb	r2, [r3, #6]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8008bc4:	4b18      	ldr	r3, [pc, #96]	@ (8008c28 <prepareReplyDNSMessage+0x1c0>)
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	4b16      	ldr	r3, [pc, #88]	@ (8008c28 <prepareReplyDNSMessage+0x1c0>)
 8008bce:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	0a1b      	lsrs	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	781a      	ldrb	r2, [r3, #0]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	81bb      	strh	r3, [r7, #12]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	885b      	ldrh	r3, [r3, #2]
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	89ba      	ldrh	r2, [r7, #12]
 8008c06:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0c:	4413      	add	r3, r2
 8008c0e:	3316      	adds	r3, #22
 8008c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c16:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8008c18:	bf00      	nop
 8008c1a:	3730      	adds	r7, #48	@ 0x30
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	08024494 	.word	0x08024494
 8008c24:	fb0000e0 	.word	0xfb0000e0
 8008c28:	20000fe0 	.word	0x20000fe0

08008c2c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3c:	2b29      	cmp	r3, #41	@ 0x29
 8008c3e:	d803      	bhi.n	8008c48 <ProcessICMPPacket+0x1c>
 8008c40:	2159      	movs	r1, #89	@ 0x59
 8008c42:	4811      	ldr	r0, [pc, #68]	@ (8008c88 <ProcessICMPPacket+0x5c>)
 8008c44:	f7f8 fd92 	bl	800176c <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4c:	2b29      	cmp	r3, #41	@ 0x29
 8008c4e:	d915      	bls.n	8008c7c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c54:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d008      	beq.n	8008c72 <ProcessICMPPacket+0x46>
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d10a      	bne.n	8008c7a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	68b8      	ldr	r0, [r7, #8]
 8008c68:	f000 f810 	bl	8008c8c <prvProcessICMPEchoRequest>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008c70:	e004      	b.n	8008c7c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8008c72:	68b8      	ldr	r0, [r7, #8]
 8008c74:	f000 f836 	bl	8008ce4 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8008c78:	e000      	b.n	8008c7c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 8008c7a:	bf00      	nop
            }
        }

        return eReturn;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
    }
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	08024560 	.word	0x08024560

08008c8c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3322      	adds	r3, #34	@ 0x22
 8008c9a:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	330e      	adds	r3, #14
 8008ca0:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2240      	movs	r2, #64	@ 0x40
 8008cc0:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	719a      	strb	r2, [r3, #6]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	709a      	strb	r2, [r3, #2]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8008cd6:	2302      	movs	r3, #2
    }
 8008cd8:	4618      	mov	r0, r3
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 8008cec:	2300      	movs	r3, #0
 8008cee:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	7c1a      	ldrb	r2, [r3, #16]
 8008cf4:	7c5b      	ldrb	r3, [r3, #17]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 8008cfc:	89fb      	ldrh	r3, [r7, #14]
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	b21a      	sxth	r2, r3
 8008d02:	89fb      	ldrh	r3, [r7, #14]
 8008d04:	0a1b      	lsrs	r3, r3, #8
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	b21b      	sxth	r3, r3
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	b21b      	sxth	r3, r3
 8008d0e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	3b14      	subs	r3, #20
 8008d14:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8008d16:	89fb      	ldrh	r3, [r7, #14]
 8008d18:	3b08      	subs	r3, #8
 8008d1a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	332a      	adds	r3, #42	@ 0x2a
 8008d24:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008d26:	2300      	movs	r3, #0
 8008d28:	82bb      	strh	r3, [r7, #20]
 8008d2a:	e00c      	b.n	8008d46 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b78      	cmp	r3, #120	@ 0x78
 8008d32:	d002      	beq.n	8008d3a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8008d34:	2302      	movs	r3, #2
 8008d36:	75fb      	strb	r3, [r7, #23]
                break;
 8008d38:	e009      	b.n	8008d4e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008d40:	8abb      	ldrh	r3, [r7, #20]
 8008d42:	3301      	adds	r3, #1
 8008d44:	82bb      	strh	r3, [r7, #20]
 8008d46:	8aba      	ldrh	r2, [r7, #20]
 8008d48:	89fb      	ldrh	r3, [r7, #14]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d3ee      	bcc.n	8008d2c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	4611      	mov	r1, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7f8 fdbd 	bl	80018d8 <vApplicationPingReplyHook>
    }
 8008d5e:	bf00      	nop
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8008d70:	f000 f90e 	bl	8008f90 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8008d74:	4802      	ldr	r0, [pc, #8]	@ (8008d80 <prvIPTask+0x18>)
 8008d76:	f018 ff37 	bl	8021be8 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 8008d7a:	f000 f803 	bl	8008d84 <prvProcessIPEventsAndTimers>
 8008d7e:	e7fc      	b.n	8008d7a <prvIPTask+0x12>
 8008d80:	08024590 	.word	0x08024590

08008d84 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8008d84:	b590      	push	{r4, r7, lr}
 8008d86:	b08d      	sub	sp, #52	@ 0x34
 8008d88:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 8008d8a:	f000 ff09 	bl	8009ba0 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 8008d8e:	f000 fea7 	bl	8009ae0 <xCalculateSleepTime>
 8008d92:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8008d94:	4b7c      	ldr	r3, [pc, #496]	@ (8008f88 <prvProcessIPEventsAndTimers+0x204>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f107 0118 	add.w	r1, r7, #24
 8008d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fa fbd6 	bl	8003550 <xQueueReceive>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 8008daa:	23ff      	movs	r3, #255	@ 0xff
 8008dac:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 8008dae:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db6:	d00d      	beq.n	8008dd4 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8008db8:	4b73      	ldr	r3, [pc, #460]	@ (8008f88 <prvProcessIPEventsAndTimers+0x204>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fa fd9f 	bl	8003900 <uxQueueSpacesAvailable>
 8008dc2:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8008dc4:	4b71      	ldr	r3, [pc, #452]	@ (8008f8c <prvProcessIPEventsAndTimers+0x208>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d202      	bcs.n	8008dd4 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 8008dce:	4a6f      	ldr	r2, [pc, #444]	@ (8008f8c <prvProcessIPEventsAndTimers+0x208>)
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8008dd4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	2b0e      	cmp	r3, #14
 8008ddc:	f200 80ca 	bhi.w	8008f74 <prvProcessIPEventsAndTimers+0x1f0>
 8008de0:	a201      	add	r2, pc, #4	@ (adr r2, 8008de8 <prvProcessIPEventsAndTimers+0x64>)
 8008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de6:	bf00      	nop
 8008de8:	08008f75 	.word	0x08008f75
 8008dec:	08008e25 	.word	0x08008e25
 8008df0:	08008e2f 	.word	0x08008e2f
 8008df4:	08008e39 	.word	0x08008e39
 8008df8:	08008e45 	.word	0x08008e45
 8008dfc:	08008f0f 	.word	0x08008f0f
 8008e00:	08008f19 	.word	0x08008f19
 8008e04:	08008f2d 	.word	0x08008f2d
 8008e08:	08008f35 	.word	0x08008f35
 8008e0c:	08008f59 	.word	0x08008f59
 8008e10:	08008e4f 	.word	0x08008e4f
 8008e14:	08008f05 	.word	0x08008f05
 8008e18:	08008f23 	.word	0x08008f23
 8008e1c:	08008f75 	.word	0x08008f75
 8008e20:	08008f5f 	.word	0x08008f5f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 f9cc 	bl	800a1c4 <prvProcessNetworkDownEvent>
            break;
 8008e2c:	e0a5      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f955 	bl	80090e0 <prvHandleEthernetPacket>
            break;
 8008e36:	e0a0      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 f95d 	bl	80090fc <prvForwardTxPacket>
            break;
 8008e42:	e09a      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8008e44:	f7fe f94e 	bl	80070e4 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8008e48:	f002 fdb6 	bl	800b9b8 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 8008e4c:	e095      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008e52:	2318      	movs	r3, #24
 8008e54:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	7a1b      	ldrb	r3, [r3, #8]
 8008e5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <prvProcessIPEventsAndTimers+0xe6>
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d01a      	beq.n	8008e9e <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008e68:	e02c      	b.n	8008ec4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e72:	061a      	lsls	r2, r3, #24
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	021b      	lsls	r3, r3, #8
 8008e7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e84:	0a1b      	lsrs	r3, r3, #8
 8008e86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e90:	0e1b      	lsrs	r3, r3, #24
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 8008e9c:	e012      	b.n	8008ec4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 8008e9e:	230a      	movs	r3, #10
 8008ea0:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	3328      	adds	r3, #40	@ 0x28
 8008ea6:	f107 0408 	add.w	r4, r7, #8
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	6859      	ldr	r1, [r3, #4]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	3328      	adds	r3, #40	@ 0x28
 8008eb8:	2210      	movs	r2, #16
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f019 f9bc 	bl	802223a <memset>
                        break;
 8008ec2:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	b21a      	sxth	r2, r3
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008ed0:	0a1b      	lsrs	r3, r3, #8
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	b21b      	sxth	r3, r3
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	b21b      	sxth	r3, r3
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2218      	movs	r2, #24
 8008eea:	6a38      	ldr	r0, [r7, #32]
 8008eec:	f005 fa32 	bl	800e354 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f043 0210 	orr.w	r2, r3, #16
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 8008efc:	6a38      	ldr	r0, [r7, #32]
 8008efe:	f006 f8d8 	bl	800f0b2 <vSocketWakeUpUser>
            break;
 8008f02:	e03a      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f005 fad8 	bl	800e4bc <vSocketClose>
            break;
 8008f0c:	e035      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f00d f9b1 	bl	8016278 <vProcessGeneratedUDPPacket>
            break;
 8008f16:	e030      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f88c 	bl	8009038 <prvCallDHCP_RA_Handler>
            break;
 8008f20:	e02b      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f007 fab3 	bl	8010490 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008f2a:	e026      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	f000 ffab 	bl	8009e88 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8008f32:	e022      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8008f38:	6a38      	ldr	r0, [r7, #32]
 8008f3a:	f008 fbed 	bl	8011718 <xTCPCheckNewClient>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d019      	beq.n	8008f78 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f043 0204 	orr.w	r2, r3, #4
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8008f50:	6a38      	ldr	r0, [r7, #32]
 8008f52:	f006 f8ae 	bl	800f0b2 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8008f56:	e00f      	b.n	8008f78 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8008f58:	f007 f984 	bl	8010264 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 8008f5c:	e00d      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f9 ffae 	bl	8002ec8 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 8008f6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f6e:	f7fd f92d 	bl	80061cc <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008f72:	e002      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8008f74:	bf00      	nop
 8008f76:	e000      	b.n	8008f7a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8008f78:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 8008f7a:	f000 f833 	bl	8008fe4 <prvIPTask_CheckPendingEvents>
}
 8008f7e:	bf00      	nop
 8008f80:	3734      	adds	r7, #52	@ 0x34
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd90      	pop	{r4, r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000fdc 	.word	0x20000fdc
 8008f8c:	20000014 	.word	0x20000014

08008f90 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8008f96:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008f9a:	f000 ff2b 	bl	8009df4 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fdc <prvIPTask_Initialise+0x4c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	607b      	str	r3, [r7, #4]
 8008fa4:	e005      	b.n	8008fb2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f8be 	bl	8009128 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb0:	607b      	str	r3, [r7, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1f6      	bne.n	8008fa6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8008fb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008fbc:	f000 fee8 	bl	8009d90 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	f000 ff9b 	bl	8009efc <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8008fc6:	f7fe fa31 	bl	800742c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 8008fca:	f7fe fb0f 	bl	80075ec <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 8008fce:	4b04      	ldr	r3, [pc, #16]	@ (8008fe0 <prvIPTask_Initialise+0x50>)
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20001368 	.word	0x20001368
 8008fe0:	20000fec 	.word	0x20000fec

08008fe4 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 8008fea:	4b12      	ldr	r3, [pc, #72]	@ (8009034 <prvIPTask_CheckPendingEvents+0x50>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01c      	beq.n	800902c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8008ff2:	4b10      	ldr	r3, [pc, #64]	@ (8009034 <prvIPTask_CheckPendingEvents+0x50>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8008ff8:	f004 f836 	bl	800d068 <FreeRTOS_FirstNetworkInterface>
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	e012      	b.n	8009026 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	7f1b      	ldrb	r3, [r3, #28]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 f8d8 	bl	800a1c4 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	7f13      	ldrb	r3, [r2, #28]
 8009018:	f36f 0341 	bfc	r3, #1, #1
 800901c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f004 f82e 	bl	800d080 <FreeRTOS_NextNetworkInterface>
 8009024:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e9      	bne.n	8009000 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000fe4 	.word	0x20000fe4

08009038 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8009040:	2300      	movs	r3, #0
 8009042:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d10b      	bne.n	8009076 <prvCallDHCP_RA_Handler+0x3e>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	2000      	movs	r0, #0
 8009072:	f003 fecd 	bl	800ce10 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8009084:	4b03      	ldr	r3, [pc, #12]	@ (8009094 <FreeRTOS_GetIPTaskHandle+0x14>)
 8009086:	681b      	ldr	r3, [r3, #0]
}
 8009088:	4618      	mov	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000fe8 	.word	0x20000fe8

08009098 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 80090b0:	2101      	movs	r1, #1
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f002 fa7e 	bl	800b5b4 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80090be:	f043 0310 	orr.w	r3, r3, #16
 80090c2:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80090c6:	2000      	movs	r0, #0
 80090c8:	f7f8 fb84 	bl	80017d4 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 80090cc:	f7fe f9ae 	bl	800742c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 80090d0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80090d4:	f000 fe6a 	bl	8009dac <vARPTimerReload>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9c8 	bl	8009484 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d007      	beq.n	800911e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4798      	blx	r3
    }
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7f13      	ldrb	r3, [r2, #28]
 8009138:	f36f 0300 	bfc	r3, #0, #1
 800913c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 800913e:	2300      	movs	r3, #0
 8009140:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009146:	f107 030c 	add.w	r3, r7, #12
 800914a:	6979      	ldr	r1, [r7, #20]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 f8df 	bl	8009310 <xSendEventStructToIPTask>
 8009152:	4603      	mov	r3, r0
 8009154:	2b01      	cmp	r3, #1
 8009156:	d008      	beq.n	800916a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	7f13      	ldrb	r3, [r2, #28]
 800915c:	f043 0302 	orr.w	r3, r3, #2
 8009160:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8009162:	4b06      	ldr	r3, [pc, #24]	@ (800917c <FreeRTOS_NetworkDown+0x54>)
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009168:	e004      	b.n	8009174 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	7f13      	ldrb	r3, [r2, #28]
 800916e:	f36f 0341 	bfc	r3, #1, #1
 8009172:	7713      	strb	r3, [r2, #28]
}
 8009174:	bf00      	nop
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20000fe4 	.word	0x20000fe4

08009180 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8009186:	2300      	movs	r3, #0
 8009188:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 800918a:	f003 ff6d 	bl	800d068 <FreeRTOS_FirstNetworkInterface>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <FreeRTOS_IPInit_Multi+0x1e>
 8009194:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8009198:	4823      	ldr	r0, [pc, #140]	@ (8009228 <FreeRTOS_IPInit_Multi+0xa8>)
 800919a:	f7f8 fae7 	bl	800176c <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 800919e:	f001 f8cb 	bl	800a338 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 80091a2:	2200      	movs	r2, #0
 80091a4:	2108      	movs	r1, #8
 80091a6:	2045      	movs	r0, #69	@ 0x45
 80091a8:	f7fa f820 	bl	80031ec <xQueueGenericCreate>
 80091ac:	4603      	mov	r3, r0
 80091ae:	4a1f      	ldr	r2, [pc, #124]	@ (800922c <FreeRTOS_IPInit_Multi+0xac>)
 80091b0:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 80091b2:	4b1e      	ldr	r3, [pc, #120]	@ (800922c <FreeRTOS_IPInit_Multi+0xac>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <FreeRTOS_IPInit_Multi+0x44>
 80091ba:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 80091be:	481a      	ldr	r0, [pc, #104]	@ (8009228 <FreeRTOS_IPInit_Multi+0xa8>)
 80091c0:	f7f8 fad4 	bl	800176c <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 80091c4:	4b19      	ldr	r3, [pc, #100]	@ (800922c <FreeRTOS_IPInit_Multi+0xac>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d025      	beq.n	8009218 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 80091cc:	4b17      	ldr	r3, [pc, #92]	@ (800922c <FreeRTOS_IPInit_Multi+0xac>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4917      	ldr	r1, [pc, #92]	@ (8009230 <FreeRTOS_IPInit_Multi+0xb0>)
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fa fcf6 	bl	8003bc4 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 80091d8:	f00d fd8c 	bl	8016cf4 <xNetworkBuffersInitialise>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d10e      	bne.n	8009200 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 80091e2:	f004 fc7f 	bl	800dae4 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 80091e6:	4b13      	ldr	r3, [pc, #76]	@ (8009234 <FreeRTOS_IPInit_Multi+0xb4>)
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	2304      	movs	r3, #4
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	2300      	movs	r3, #0
 80091f0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80091f4:	4910      	ldr	r1, [pc, #64]	@ (8009238 <FreeRTOS_IPInit_Multi+0xb8>)
 80091f6:	4811      	ldr	r0, [pc, #68]	@ (800923c <FreeRTOS_IPInit_Multi+0xbc>)
 80091f8:	f7fa fd9a 	bl	8003d30 <xTaskCreate>
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	e00e      	b.n	800921e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009200:	480f      	ldr	r0, [pc, #60]	@ (8009240 <FreeRTOS_IPInit_Multi+0xc0>)
 8009202:	f018 fcf1 	bl	8021be8 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009206:	4b09      	ldr	r3, [pc, #36]	@ (800922c <FreeRTOS_IPInit_Multi+0xac>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4618      	mov	r0, r3
 800920c:	f7fa fb98 	bl	8003940 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009210:	4b06      	ldr	r3, [pc, #24]	@ (800922c <FreeRTOS_IPInit_Multi+0xac>)
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	e002      	b.n	800921e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009218:	480a      	ldr	r0, [pc, #40]	@ (8009244 <FreeRTOS_IPInit_Multi+0xc4>)
 800921a:	f018 fce5 	bl	8021be8 <lUDPLoggingPrintf>
    }

    return xReturn;
 800921e:	687b      	ldr	r3, [r7, #4]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	080245a4 	.word	0x080245a4
 800922c:	20000fdc 	.word	0x20000fdc
 8009230:	080245d0 	.word	0x080245d0
 8009234:	20000fe8 	.word	0x20000fe8
 8009238:	080245d8 	.word	0x080245d8
 800923c:	08008d69 	.word	0x08008d69
 8009240:	080245e0 	.word	0x080245e0
 8009244:	0802461c 	.word	0x0802461c

08009248 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d023      	beq.n	80092a4 <FreeRTOS_GetEndPointConfiguration+0x5c>
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d11b      	bne.n	80092a4 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80092be:	2000      	movs	r0, #0
 80092c0:	f003 ff72 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 80092c4:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff ffb6 	bl	8009248 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 80092dc:	bf00      	nop
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 80092fa:	f107 030c 	add.w	r3, r7, #12
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f805 	bl	8009310 <xSendEventStructToIPTask>
 8009306:	4603      	mov	r3, r0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800931e:	f000 fb93 	bl	8009a48 <xIPIsNetworkTaskReady>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d107      	bne.n	8009338 <xSendEventStructToIPTask+0x28>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f993 3000 	ldrsb.w	r3, [r3]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e035      	b.n	80093a4 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009338:	2301      	movs	r3, #1
 800933a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f993 3000 	ldrsb.w	r3, [r3]
 8009342:	2b06      	cmp	r3, #6
 8009344:	d10c      	bne.n	8009360 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009346:	2001      	movs	r0, #1
 8009348:	f000 fd9e 	bl	8009e88 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800934c:	4b18      	ldr	r3, [pc, #96]	@ (80093b0 <xSendEventStructToIPTask+0xa0>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4618      	mov	r0, r3
 8009352:	f7fa fabb 	bl	80038cc <uxQueueMessagesWaiting>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800935c:	2300      	movs	r3, #0
 800935e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d01c      	beq.n	80093a0 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009366:	f000 ff15 	bl	800a194 <xIsCallingFromIPTask>
 800936a:	4603      	mov	r3, r0
 800936c:	2b01      	cmp	r3, #1
 800936e:	d104      	bne.n	800937a <xSendEventStructToIPTask+0x6a>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800937a:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <xSendEventStructToIPTask+0xa0>)
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	2300      	movs	r3, #0
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	f7f9 fffc 	bl	8003380 <xQueueGenericSend>
 8009388:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f993 3000 	ldrsb.w	r3, [r3]
 8009396:	4619      	mov	r1, r3
 8009398:	4806      	ldr	r0, [pc, #24]	@ (80093b4 <xSendEventStructToIPTask+0xa4>)
 800939a:	f018 fc25 	bl	8021be8 <lUDPLoggingPrintf>
 800939e:	e001      	b.n	80093a4 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 80093a0:	2301      	movs	r3, #1
 80093a2:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 80093a4:	697b      	ldr	r3, [r7, #20]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000fdc 	.word	0x20000fdc
 80093b4:	08024660 	.word	0x08024660

080093b8 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 80093c0:	2301      	movs	r3, #1
 80093c2:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]
 80093d6:	e032      	b.n	800943e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f003 ff81 	bl	800d2e8 <FreeRTOS_FindEndPointOnMAC>
 80093e6:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 80093ee:	2301      	movs	r3, #1
 80093f0:	75fb      	strb	r3, [r7, #23]
 80093f2:	e024      	b.n	800943e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2206      	movs	r2, #6
 80093f8:	4619      	mov	r1, r3
 80093fa:	4820      	ldr	r0, [pc, #128]	@ (800947c <eConsiderFrameForProcessing+0xc4>)
 80093fc:	f019 fda5 	bl	8022f4a <memcmp>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
 800940a:	e018      	b.n	800943e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2206      	movs	r2, #6
 8009410:	4619      	mov	r1, r3
 8009412:	481b      	ldr	r0, [pc, #108]	@ (8009480 <eConsiderFrameForProcessing+0xc8>)
 8009414:	f019 fd99 	bl	8022f4a <memcmp>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 800941e:	2301      	movs	r3, #1
 8009420:	75fb      	strb	r3, [r7, #23]
 8009422:	e00c      	b.n	800943e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b33      	cmp	r3, #51	@ 0x33
 800942a:	d106      	bne.n	800943a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009430:	2b33      	cmp	r3, #51	@ 0x33
 8009432:	d102      	bne.n	800943a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009434:	2301      	movs	r3, #1
 8009436:	75fb      	strb	r3, [r7, #23]
 8009438:	e001      	b.n	800943e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 800943a:	2300      	movs	r3, #0
 800943c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d115      	bne.n	8009470 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	7b1a      	ldrb	r2, [r3, #12]
 8009448:	7b5b      	ldrb	r3, [r3, #13]
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	4313      	orrs	r3, r2
 800944e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009450:	897b      	ldrh	r3, [r7, #10]
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	b21a      	sxth	r2, r3
 8009456:	897b      	ldrh	r3, [r7, #10]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b29b      	uxth	r3, r3
 800945c:	b21b      	sxth	r3, r3
 800945e:	4313      	orrs	r3, r2
 8009460:	b21b      	sxth	r3, r3
 8009462:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009464:	897b      	ldrh	r3, [r7, #10]
 8009466:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800946a:	d801      	bhi.n	8009470 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 800946c:	2300      	movs	r3, #0
 800946e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	08027294 	.word	0x08027294
 8009480:	08027284 	.word	0x08027284

08009484 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d03d      	beq.n	8009514 <prvProcessEthernetPacket+0x90>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949c:	2b00      	cmp	r3, #0
 800949e:	d039      	beq.n	8009514 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	2b0d      	cmp	r3, #13
 80094a6:	d934      	bls.n	8009512 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 80094a8:	2301      	movs	r3, #1
 80094aa:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	899b      	ldrh	r3, [r3, #12]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80094bc:	4293      	cmp	r3, r2
 80094be:	d015      	beq.n	80094ec <prvProcessEthernetPacket+0x68>
 80094c0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80094c4:	4293      	cmp	r3, r2
 80094c6:	dc21      	bgt.n	800950c <prvProcessEthernetPacket+0x88>
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d00f      	beq.n	80094ec <prvProcessEthernetPacket+0x68>
 80094cc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80094d0:	d11c      	bne.n	800950c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d6:	2b29      	cmp	r3, #41	@ 0x29
 80094d8:	d905      	bls.n	80094e6 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fc ffe6 	bl	80064ac <eARPProcessPacket>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 80094e4:	e016      	b.n	8009514 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
                        break;
 80094ea:	e013      	b.n	8009514 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	2b21      	cmp	r3, #33	@ 0x21
 80094f2:	d908      	bls.n	8009506 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f8c6 	bl	800968c <prvProcessIPPacket>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009504:	e006      	b.n	8009514 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
                    break;
 800950a:	e003      	b.n	8009514 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8009510:	e000      	b.n	8009514 <prvProcessEthernetPacket+0x90>
            break;
 8009512:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b04      	cmp	r3, #4
 8009518:	d00b      	beq.n	8009532 <prvProcessEthernetPacket+0xae>
 800951a:	2b04      	cmp	r3, #4
 800951c:	dc19      	bgt.n	8009552 <prvProcessEthernetPacket+0xce>
 800951e:	2b02      	cmp	r3, #2
 8009520:	d002      	beq.n	8009528 <prvProcessEthernetPacket+0xa4>
 8009522:	2b03      	cmp	r3, #3
 8009524:	d019      	beq.n	800955a <prvProcessEthernetPacket+0xd6>
 8009526:	e014      	b.n	8009552 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009528:	2101      	movs	r1, #1
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f9a4 	bl	8009878 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009530:	e014      	b.n	800955c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009532:	4b0c      	ldr	r3, [pc, #48]	@ (8009564 <prvProcessEthernetPacket+0xe0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d107      	bne.n	800954a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 800953a:	4a0a      	ldr	r2, [pc, #40]	@ (8009564 <prvProcessEthernetPacket+0xe0>)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009540:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009544:	f000 fc06 	bl	8009d54 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009548:	e008      	b.n	800955c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f00d fca4 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009550:	e004      	b.n	800955c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f00d fca0 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009558:	e000      	b.n	800955c <prvProcessEthernetPacket+0xd8>
            break;
 800955a:	bf00      	nop
    }
}
 800955c:	bf00      	nop
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000fd8 	.word	0x20000fd8

08009568 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009568:	b5b0      	push	{r4, r5, r7, lr}
 800956a:	b08c      	sub	sp, #48	@ 0x30
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009570:	2300      	movs	r3, #0
 8009572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009576:	2300      	movs	r3, #0
 8009578:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	3322      	adds	r3, #34	@ 0x22
 8009584:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fa76 	bl	8009a78 <uxIPHeaderSizePacket>
 800958c:	4603      	mov	r3, r0
 800958e:	3316      	adds	r3, #22
 8009590:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	899b      	ldrh	r3, [r3, #12]
 8009596:	b29b      	uxth	r3, r3
 8009598:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800959c:	4293      	cmp	r3, r2
 800959e:	d105      	bne.n	80095ac <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a4:	3336      	adds	r3, #54	@ 0x36
 80095a6:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	889b      	ldrh	r3, [r3, #4]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	b21a      	sxth	r2, r3
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	889b      	ldrh	r3, [r3, #4]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	b29b      	uxth	r3, r3
 80095c0:	b21b      	sxth	r3, r3
 80095c2:	4313      	orrs	r3, r2
 80095c4:	b21b      	sxth	r3, r3
 80095c6:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 80095c8:	8b7b      	ldrh	r3, [r7, #26]
 80095ca:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	899b      	ldrh	r3, [r3, #12]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d11a      	bne.n	800960c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 80095d6:	8b7c      	ldrh	r4, [r7, #26]
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	8a1b      	ldrh	r3, [r3, #16]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	b21a      	sxth	r2, r3
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	8a1b      	ldrh	r3, [r3, #16]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	0a1b      	lsrs	r3, r3, #8
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	b21b      	sxth	r3, r3
 80095ee:	4313      	orrs	r3, r2
 80095f0:	b21b      	sxth	r3, r3
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	461d      	mov	r5, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fa3e 	bl	8009a78 <uxIPHeaderSizePacket>
 80095fc:	4603      	mov	r3, r0
 80095fe:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009600:	429c      	cmp	r4, r3
 8009602:	d903      	bls.n	800960c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800960a:	e038      	b.n	800967e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	6a3a      	ldr	r2, [r7, #32]
 8009612:	429a      	cmp	r2, r3
 8009614:	d833      	bhi.n	800967e <prvProcessUDPPacket+0x116>
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b07      	cmp	r3, #7
 800961a:	d930      	bls.n	800967e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	3b08      	subs	r3, #8
 800962a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	429a      	cmp	r2, r3
 8009632:	d904      	bls.n	800963e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	441a      	add	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 800963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29a      	uxth	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009654:	885b      	ldrh	r3, [r3, #2]
 8009656:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009658:	f107 0208 	add.w	r2, r7, #8
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f00c fe2a 	bl	80162b8 <xProcessReceivedUDPPacket>
 8009664:	4603      	mov	r3, r0
 8009666:	2b01      	cmp	r3, #1
 8009668:	d103      	bne.n	8009672 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800966a:	2303      	movs	r3, #3
 800966c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009670:	e005      	b.n	800967e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d102      	bne.n	800967e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009678:	2304      	movs	r3, #4
 800967a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800967e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009682:	4618      	mov	r0, r3
 8009684:	3730      	adds	r7, #48	@ 0x30
 8009686:	46bd      	mov	sp, r7
 8009688:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800968c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009696:	2314      	movs	r3, #20
 8009698:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	330e      	adds	r3, #14
 80096a6:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	899b      	ldrh	r3, [r3, #12]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b08      	cmp	r3, #8
 80096b0:	d023      	beq.n	80096fa <prvProcessIPPacket+0x6e>
 80096b2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d144      	bne.n	8009744 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096be:	2b35      	cmp	r3, #53	@ 0x35
 80096c0:	d802      	bhi.n	80096c8 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 80096c2:	2300      	movs	r3, #0
 80096c4:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 80096c6:	e043      	b.n	8009750 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096cc:	330e      	adds	r3, #14
 80096ce:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 80096d0:	2328      	movs	r3, #40	@ 0x28
 80096d2:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	799b      	ldrb	r3, [r3, #6]
 80096d8:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	330e      	adds	r3, #14
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f001 fb6c 	bl	800adc0 <prvAllowIPPacketIPv6>
 80096e8:	4603      	mov	r3, r0
 80096ea:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f0:	3b06      	subs	r3, #6
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	7812      	ldrb	r2, [r2, #0]
 80096f6:	701a      	strb	r2, [r3, #0]
                break;
 80096f8:	e02a      	b.n	8009750 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009708:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970e:	3b0e      	subs	r3, #14
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	429a      	cmp	r2, r3
 8009714:	d802      	bhi.n	800971c <prvProcessIPPacket+0x90>
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b13      	cmp	r3, #19
 800971a:	d802      	bhi.n	8009722 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 800971c:	2300      	movs	r3, #0
 800971e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8009720:	e016      	b.n	8009750 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	7ddb      	ldrb	r3, [r3, #23]
 8009726:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 f81b 	bl	800a768 <prvAllowIPPacketIPv4>
 8009732:	4603      	mov	r3, r0
 8009734:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973a:	3b06      	subs	r3, #6
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	7812      	ldrb	r2, [r2, #0]
 8009740:	701a      	strb	r2, [r3, #0]
                   break;
 8009742:	e005      	b.n	8009750 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009744:	2300      	movs	r3, #0
 8009746:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8009748:	484a      	ldr	r0, [pc, #296]	@ (8009874 <prvProcessIPPacket+0x1e8>)
 800974a:	f018 fa4d 	bl	8021be8 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 800974e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009750:	7ffb      	ldrb	r3, [r7, #31]
 8009752:	2b01      	cmp	r3, #1
 8009754:	f040 8088 	bne.w	8009868 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	899b      	ldrh	r3, [r3, #12]
 800975c:	b29b      	uxth	r3, r3
 800975e:	2b08      	cmp	r3, #8
 8009760:	d004      	beq.n	800976c <prvProcessIPPacket+0xe0>
 8009762:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009766:	4293      	cmp	r3, r2
 8009768:	d009      	beq.n	800977e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800976a:	e020      	b.n	80097ae <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	2b14      	cmp	r3, #20
 8009770:	d91a      	bls.n	80097a8 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009772:	6838      	ldr	r0, [r7, #0]
 8009774:	f001 f852 	bl	800a81c <prvCheckIP4HeaderOptions>
 8009778:	4603      	mov	r3, r0
 800977a:	77fb      	strb	r3, [r7, #31]
                    break;
 800977c:	e014      	b.n	80097a8 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2100      	movs	r1, #0
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fb3a 	bl	800adfc <xGetExtensionOrder>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	dd0e      	ble.n	80097ac <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800978e:	2101      	movs	r1, #1
 8009790:	6838      	ldr	r0, [r7, #0]
 8009792:	f001 fb99 	bl	800aec8 <eHandleIPv6ExtensionHeaders>
 8009796:	4603      	mov	r3, r0
 8009798:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800979a:	7ffb      	ldrb	r3, [r7, #31]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	799b      	ldrb	r3, [r3, #6]
 80097a4:	75fb      	strb	r3, [r7, #23]
                    break;
 80097a6:	e001      	b.n	80097ac <prvProcessIPPacket+0x120>
                    break;
 80097a8:	bf00      	nop
 80097aa:	e000      	b.n	80097ae <prvProcessIPPacket+0x122>
                    break;
 80097ac:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 80097ae:	7ffb      	ldrb	r3, [r7, #31]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d059      	beq.n	8009868 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	2b11      	cmp	r3, #17
 80097b8:	d026      	beq.n	8009808 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80097ba:	6838      	ldr	r0, [r7, #0]
 80097bc:	f7fd f918 	bl	80069f0 <xCheckRequiresARPResolution>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d102      	bne.n	80097cc <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 80097c6:	2304      	movs	r3, #4
 80097c8:	77fb      	strb	r3, [r7, #31]
 80097ca:	e01d      	b.n	8009808 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	899b      	ldrh	r3, [r3, #12]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d00e      	beq.n	80097f4 <prvProcessIPPacket+0x168>
 80097d6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80097da:	4293      	cmp	r3, r2
 80097dc:	d113      	bne.n	8009806 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	1d98      	adds	r0, r3, #6
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f103 0108 	add.w	r1, r3, #8
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ec:	461a      	mov	r2, r3
 80097ee:	f002 f843 	bl	800b878 <vNDRefreshCacheEntry>
                                break;
 80097f2:	e009      	b.n	8009808 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	1d9a      	adds	r2, r3, #6
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f7fd f9d6 	bl	8006bb0 <vARPRefreshCacheEntryAge>
                                break;
 8009804:	e000      	b.n	8009808 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8009806:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 8009808:	7ffb      	ldrb	r3, [r7, #31]
 800980a:	2b04      	cmp	r3, #4
 800980c:	d02c      	beq.n	8009868 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	2b3a      	cmp	r3, #58	@ 0x3a
 8009812:	d010      	beq.n	8009836 <prvProcessIPPacket+0x1aa>
 8009814:	2b3a      	cmp	r3, #58	@ 0x3a
 8009816:	dc23      	bgt.n	8009860 <prvProcessIPPacket+0x1d4>
 8009818:	2b11      	cmp	r3, #17
 800981a:	d012      	beq.n	8009842 <prvProcessIPPacket+0x1b6>
 800981c:	2b11      	cmp	r3, #17
 800981e:	dc1f      	bgt.n	8009860 <prvProcessIPPacket+0x1d4>
 8009820:	2b01      	cmp	r3, #1
 8009822:	d002      	beq.n	800982a <prvProcessIPPacket+0x19e>
 8009824:	2b06      	cmp	r3, #6
 8009826:	d012      	beq.n	800984e <prvProcessIPPacket+0x1c2>
 8009828:	e01a      	b.n	8009860 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800982a:	6838      	ldr	r0, [r7, #0]
 800982c:	f7ff f9fe 	bl	8008c2c <ProcessICMPPacket>
 8009830:	4603      	mov	r3, r0
 8009832:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8009834:	e018      	b.n	8009868 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 8009836:	6838      	ldr	r0, [r7, #0]
 8009838:	f002 fb6e 	bl	800bf18 <prvProcessICMPMessage_IPv6>
 800983c:	4603      	mov	r3, r0
 800983e:	77fb      	strb	r3, [r7, #31]
                            break;
 8009840:	e012      	b.n	8009868 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8009842:	6838      	ldr	r0, [r7, #0]
 8009844:	f7ff fe90 	bl	8009568 <prvProcessUDPPacket>
 8009848:	4603      	mov	r3, r0
 800984a:	77fb      	strb	r3, [r7, #31]
                        break;
 800984c:	e00c      	b.n	8009868 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800984e:	6838      	ldr	r0, [r7, #0]
 8009850:	f007 fda0 	bl	8011394 <xProcessReceivedTCPPacket>
 8009854:	4603      	mov	r3, r0
 8009856:	2b01      	cmp	r3, #1
 8009858:	d105      	bne.n	8009866 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800985a:	2303      	movs	r3, #3
 800985c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800985e:	e002      	b.n	8009866 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009860:	2300      	movs	r3, #0
 8009862:	77fb      	strb	r3, [r7, #31]
                        break;
 8009864:	e000      	b.n	8009868 <prvProcessIPPacket+0x1dc>
                                break;
 8009866:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009868:	7ffb      	ldrb	r3, [r7, #31]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	0802468c 	.word	0x0802468c

08009878 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08e      	sub	sp, #56	@ 0x38
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	2b3b      	cmp	r3, #59	@ 0x3b
 8009888:	d818      	bhi.n	80098bc <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988e:	4619      	mov	r1, r3
 8009890:	486a      	ldr	r0, [pc, #424]	@ (8009a3c <vReturnEthernetFrame+0x1c4>)
 8009892:	f018 f9a9 	bl	8021be8 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
 800989c:	e008      	b.n	80098b0 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a4:	4413      	add	r3, r2
 80098a6:	2200      	movs	r2, #0
 80098a8:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80098aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ac:	3301      	adds	r3, #1
 80098ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80098b4:	ddf3      	ble.n	800989e <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	223c      	movs	r2, #60	@ 0x3c
 80098ba:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d111      	bne.n	80098e6 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fb87 	bl	8009fdc <pxDuplicateNetworkBufferWithDescriptor>
 80098ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 80098d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d005      	beq.n	80098e2 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 80098d6:	2301      	movs	r3, #1
 80098d8:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 80098e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e4:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 80a3 	beq.w	8009a34 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 80098f4:	2300      	movs	r3, #0
 80098f6:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009900:	2b00      	cmp	r3, #0
 8009902:	d12f      	bne.n	8009964 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 8009904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009906:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800990a:	061a      	lsls	r2, r3, #24
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009918:	431a      	orrs	r2, r3
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009920:	0a1b      	lsrs	r3, r3, #8
 8009922:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009926:	431a      	orrs	r2, r3
 8009928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800992e:	0e1b      	lsrs	r3, r3, #24
 8009930:	4313      	orrs	r3, r2
 8009932:	4619      	mov	r1, r3
 8009934:	4842      	ldr	r0, [pc, #264]	@ (8009a40 <vReturnEthernetFrame+0x1c8>)
 8009936:	f018 f957 	bl	8021be8 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993e:	899b      	ldrh	r3, [r3, #12]
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b08      	cmp	r3, #8
 8009944:	d003      	beq.n	800994e <vReturnEthernetFrame+0xd6>
 8009946:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800994a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800994c:	e00a      	b.n	8009964 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009954:	2107      	movs	r1, #7
 8009956:	4618      	mov	r0, r3
 8009958:	f003 fcfe 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 800995c:	4602      	mov	r2, r0
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009962:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009968:	2b00      	cmp	r3, #0
 800996a:	d063      	beq.n	8009a34 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009970:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009974:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009978:	899b      	ldrh	r3, [r3, #12]
 800997a:	b29b      	uxth	r3, r3
 800997c:	2b08      	cmp	r3, #8
 800997e:	d11c      	bne.n	80099ba <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009982:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009986:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800998e:	f107 0114 	add.w	r1, r7, #20
 8009992:	f107 0310 	add.w	r3, r7, #16
 8009996:	4618      	mov	r0, r3
 8009998:	f7fd fa54 	bl	8006e44 <eARPGetCacheEntry>
 800999c:	4603      	mov	r3, r0
 800999e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 80099a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d103      	bne.n	80099b2 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 80099aa:	f107 0314 	add.w	r3, r7, #20
 80099ae:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 80099b0:	e007      	b.n	80099c2 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	3306      	adds	r3, #6
 80099b6:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 80099b8:	e003      	b.n	80099c2 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 80099ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099bc:	3306      	adds	r3, #6
 80099be:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 80099c0:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 80099c6:	2206      	movs	r2, #6
 80099c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099ca:	69f8      	ldr	r0, [r7, #28]
 80099cc:	f018 fb28 	bl	8022020 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d4:	33e8      	adds	r3, #232	@ 0xe8
 80099d6:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	3306      	adds	r3, #6
 80099dc:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80099de:	2206      	movs	r2, #6
 80099e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099e2:	69f8      	ldr	r0, [r7, #28]
 80099e4:	f018 fb1c 	bl	8022020 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 80099e8:	f000 fbd4 	bl	800a194 <xIsCallingFromIPTask>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d106      	bne.n	8009a00 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099fc:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 80099fe:	e019      	b.n	8009a34 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d011      	beq.n	8009a2a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 8009a06:	2302      	movs	r3, #2
 8009a08:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009a0e:	f107 0308 	add.w	r3, r7, #8
 8009a12:	f04f 31ff 	mov.w	r1, #4294967295
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff fc7a 	bl	8009310 <xSendEventStructToIPTask>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d108      	bne.n	8009a34 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f00d fa38 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
}
 8009a28:	e004      	b.n	8009a34 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 8009a2a:	f640 019f 	movw	r1, #2207	@ 0x89f
 8009a2e:	4805      	ldr	r0, [pc, #20]	@ (8009a44 <vReturnEthernetFrame+0x1cc>)
 8009a30:	f7f7 fe9c 	bl	800176c <vAssertCalled>
}
 8009a34:	bf00      	nop
 8009a36:	3738      	adds	r7, #56	@ 0x38
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	080246b8 	.word	0x080246b8
 8009a40:	080246dc 	.word	0x080246dc
 8009a44:	080245a4 	.word	0x080245a4

08009a48 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009a4c:	4b03      	ldr	r3, [pc, #12]	@ (8009a5c <xIPIsNetworkTaskReady+0x14>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20000fec 	.word	0x20000fec

08009a60 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8009a64:	4b03      	ldr	r3, [pc, #12]	@ (8009a74 <uxGetMinimumIPQueueSpace+0x14>)
 8009a66:	681b      	ldr	r3, [r3, #0]
    }
 8009a68:	4618      	mov	r0, r3
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000014 	.word	0x20000014

08009a78 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a84:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	899b      	ldrh	r3, [r3, #12]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d102      	bne.n	8009a9a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009a94:	2328      	movs	r3, #40	@ 0x28
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e001      	b.n	8009a9e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009a9a:	2314      	movs	r3, #20
 8009a9c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <uxIPHeaderSizeSocket+0x22>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7a1b      	ldrb	r3, [r3, #8]
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009ac8:	2328      	movs	r3, #40	@ 0x28
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e001      	b.n	8009ad2 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009ace:	2314      	movs	r3, #20
 8009ad0:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009ae6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009aea:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009aec:	4b28      	ldr	r3, [pc, #160]	@ (8009b90 <xCalculateSleepTime+0xb0>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d007      	beq.n	8009b0a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009afa:	4b25      	ldr	r3, [pc, #148]	@ (8009b90 <xCalculateSleepTime+0xb0>)
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d902      	bls.n	8009b0a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 8009b04:	4b22      	ldr	r3, [pc, #136]	@ (8009b90 <xCalculateSleepTime+0xb0>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009b0a:	4b22      	ldr	r3, [pc, #136]	@ (8009b94 <xCalculateSleepTime+0xb4>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 8009b10:	e015      	b.n	8009b3e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d009      	beq.n	8009b36 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d903      	bls.n	8009b36 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009b34:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8009b3c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e6      	bne.n	8009b12 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 8009b44:	4b14      	ldr	r3, [pc, #80]	@ (8009b98 <xCalculateSleepTime+0xb8>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d007      	beq.n	8009b62 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009b52:	4b11      	ldr	r3, [pc, #68]	@ (8009b98 <xCalculateSleepTime+0xb8>)
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d902      	bls.n	8009b62 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b98 <xCalculateSleepTime+0xb8>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009b62:	4b0e      	ldr	r3, [pc, #56]	@ (8009b9c <xCalculateSleepTime+0xbc>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d007      	beq.n	8009b80 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 8009b70:	4b0a      	ldr	r3, [pc, #40]	@ (8009b9c <xCalculateSleepTime+0xbc>)
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d902      	bls.n	8009b80 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 8009b7a:	4b08      	ldr	r3, [pc, #32]	@ (8009b9c <xCalculateSleepTime+0xbc>)
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 8009b80:	687b      	ldr	r3, [r7, #4]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20001008 	.word	0x20001008
 8009b94:	20001364 	.word	0x20001364
 8009b98:	2000101c 	.word	0x2000101c
 8009b9c:	20001030 	.word	0x20001030

08009ba0 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009ba6:	484f      	ldr	r0, [pc, #316]	@ (8009ce4 <vCheckNetworkTimers+0x144>)
 8009ba8:	f000 f932 	bl	8009e10 <prvIPTimerCheck>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8009bb2:	2003      	movs	r0, #3
 8009bb4:	f7ff fb96 	bl	80092e4 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 8009bb8:	484b      	ldr	r0, [pc, #300]	@ (8009ce8 <vCheckNetworkTimers+0x148>)
 8009bba:	f000 f929 	bl	8009e10 <prvIPTimerCheck>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00e      	beq.n	8009be2 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 8009bc4:	4b49      	ldr	r3, [pc, #292]	@ (8009cec <vCheckNetworkTimers+0x14c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00a      	beq.n	8009be2 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f000 f995 	bl	8009efc <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8009bd2:	4b46      	ldr	r3, [pc, #280]	@ (8009cec <vCheckNetworkTimers+0x14c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f00d f95e 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 8009bdc:	4b43      	ldr	r3, [pc, #268]	@ (8009cec <vCheckNetworkTimers+0x14c>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009be2:	4b43      	ldr	r3, [pc, #268]	@ (8009cf0 <vCheckNetworkTimers+0x150>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 8009be8:	e01f      	b.n	8009c2a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	33f8      	adds	r3, #248	@ 0xf8
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f90e 	bl	8009e10 <prvIPTimerCheck>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d013      	beq.n	8009c22 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00b      	beq.n	8009c22 <vCheckNetworkTimers+0x82>
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 8009c1a:	6939      	ldr	r1, [r7, #16]
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f003 f8f7 	bl	800ce10 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8009c28:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1dc      	bne.n	8009bea <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009c30:	4830      	ldr	r0, [pc, #192]	@ (8009cf4 <vCheckNetworkTimers+0x154>)
 8009c32:	f000 f8ed 	bl	8009e10 <prvIPTimerCheck>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	f7fd fff9 	bl	8007c34 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8009c42:	4b2d      	ldr	r3, [pc, #180]	@ (8009cf8 <vCheckNetworkTimers+0x158>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7f9 fe40 	bl	80038cc <uxQueueMessagesWaiting>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d102      	bne.n	8009c58 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009c52:	2301      	movs	r3, #1
 8009c54:	60fb      	str	r3, [r7, #12]
 8009c56:	e001      	b.n	8009c5c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009c5c:	4827      	ldr	r0, [pc, #156]	@ (8009cfc <vCheckNetworkTimers+0x15c>)
 8009c5e:	f000 f8d7 	bl	8009e10 <prvIPTimerCheck>
 8009c62:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f005 ff3f 	bl	800faf8 <xTCPTimerCheck>
 8009c7a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	481f      	ldr	r0, [pc, #124]	@ (8009cfc <vCheckNetworkTimers+0x15c>)
 8009c80:	f000 f844 	bl	8009d0c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 8009c84:	2000      	movs	r0, #0
 8009c86:	f006 fe6f 	bl	8010968 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	f006 fe88 	bl	80109a0 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 8009c90:	4b1b      	ldr	r3, [pc, #108]	@ (8009d00 <vCheckNetworkTimers+0x160>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d120      	bne.n	8009cda <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 8009c98:	481a      	ldr	r0, [pc, #104]	@ (8009d04 <vCheckNetworkTimers+0x164>)
 8009c9a:	f000 f8b9 	bl	8009e10 <prvIPTimerCheck>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01a      	beq.n	8009cda <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009ca8:	4b17      	ldr	r3, [pc, #92]	@ (8009d08 <vCheckNetworkTimers+0x168>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	617b      	str	r3, [r7, #20]
 8009cae:	e00e      	b.n	8009cce <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	7f1b      	ldrb	r3, [r3, #28]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d104      	bne.n	8009cc8 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 8009cc2:	6978      	ldr	r0, [r7, #20]
 8009cc4:	f7ff fa30 	bl	8009128 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1ed      	bne.n	8009cb0 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f971 	bl	8009fbc <vSetAllNetworksUp>
        }
    }
}
 8009cda:	bf00      	nop
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20001008 	.word	0x20001008
 8009ce8:	20000ff4 	.word	0x20000ff4
 8009cec:	20000fd8 	.word	0x20000fd8
 8009cf0:	20001364 	.word	0x20001364
 8009cf4:	20001030 	.word	0x20001030
 8009cf8:	20000fdc 	.word	0x20000fdc
 8009cfc:	2000101c 	.word	0x2000101c
 8009d00:	20000ff0 	.word	0x20000ff0
 8009d04:	20001044 	.word	0x20001044
 8009d08:	20001368 	.word	0x20001368

08009d0c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fa febc 	bl	8004a98 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d105      	bne.n	8009d38 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	7813      	ldrb	r3, [r2, #0]
 8009d30:	f043 0302 	orr.w	r3, r3, #2
 8009d34:	7013      	strb	r3, [r2, #0]
 8009d36:	e004      	b.n	8009d42 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7813      	ldrb	r3, [r2, #0]
 8009d3c:	f36f 0341 	bfc	r3, #1, #1
 8009d40:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	7813      	ldrb	r3, [r2, #0]
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	7013      	strb	r3, [r2, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	4803      	ldr	r0, [pc, #12]	@ (8009d6c <vIPTimerStartARPResolution+0x18>)
 8009d60:	f7ff ffd4 	bl	8009d0c <prvIPTimerStart>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	20000ff4 	.word	0x20000ff4

08009d70 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff ffc2 	bl	8009d0c <prvIPTimerStart>
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 8009d98:	6879      	ldr	r1, [r7, #4]
 8009d9a:	4803      	ldr	r0, [pc, #12]	@ (8009da8 <vTCPTimerReload+0x18>)
 8009d9c:	f7ff ffe8 	bl	8009d70 <prvIPTimerReload>
    }
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	2000101c 	.word	0x2000101c

08009dac <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	4803      	ldr	r0, [pc, #12]	@ (8009dc4 <vARPTimerReload+0x18>)
 8009db8:	f7ff ffda 	bl	8009d70 <prvIPTimerReload>
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20001008 	.word	0x20001008

08009dc8 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	4806      	ldr	r0, [pc, #24]	@ (8009df0 <vDHCP_RATimerReload+0x28>)
 8009dd6:	f017 ff07 	bl	8021be8 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	33f8      	adds	r3, #248	@ 0xf8
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff ffc5 	bl	8009d70 <prvIPTimerReload>
    }
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	08024710 	.word	0x08024710

08009df4 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	4803      	ldr	r0, [pc, #12]	@ (8009e0c <vNetworkTimerReload+0x18>)
 8009e00:	f7ff ffb6 	bl	8009d70 <prvIPTimerReload>
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	20001044 	.word	0x20001044

08009e10 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	e028      	b.n	8009e7e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10f      	bne.n	8009e5a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	1d1a      	adds	r2, r3, #4
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	330c      	adds	r3, #12
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f7fa fe5f 	bl	8004b08 <xTaskCheckForTimeOut>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	7813      	ldrb	r3, [r2, #0]
 8009e54:	f043 0302 	orr.w	r3, r3, #2
 8009e58:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d008      	beq.n	8009e7a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff ff4c 	bl	8009d0c <prvIPTimerStart>
            xReturn = pdTRUE;
 8009e74:	2301      	movs	r3, #1
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	e001      	b.n	8009e7e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 8009e90:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec4 <vIPSetTCPTimerExpiredState+0x3c>)
 8009e92:	7813      	ldrb	r3, [r2, #0]
 8009e94:	f043 0301 	orr.w	r3, r3, #1
 8009e98:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d005      	beq.n	8009eac <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009ea0:	4a08      	ldr	r2, [pc, #32]	@ (8009ec4 <vIPSetTCPTimerExpiredState+0x3c>)
 8009ea2:	7813      	ldrb	r3, [r2, #0]
 8009ea4:	f043 0302 	orr.w	r3, r3, #2
 8009ea8:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 8009eaa:	e004      	b.n	8009eb6 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 8009eac:	4a05      	ldr	r2, [pc, #20]	@ (8009ec4 <vIPSetTCPTimerExpiredState+0x3c>)
 8009eae:	7813      	ldrb	r3, [r2, #0]
 8009eb0:	f36f 0341 	bfc	r3, #1, #1
 8009eb4:	7013      	strb	r3, [r2, #0]
    }
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	2000101c 	.word	0x2000101c

08009ec8 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 8009ed6:	4a08      	ldr	r2, [pc, #32]	@ (8009ef8 <vIPSetARPTimerEnableState+0x30>)
 8009ed8:	7813      	ldrb	r3, [r2, #0]
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009ee0:	e004      	b.n	8009eec <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009ee2:	4a05      	ldr	r2, [pc, #20]	@ (8009ef8 <vIPSetARPTimerEnableState+0x30>)
 8009ee4:	7813      	ldrb	r3, [r2, #0]
 8009ee6:	f36f 0300 	bfc	r3, #0, #1
 8009eea:	7013      	strb	r3, [r2, #0]
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	20001008 	.word	0x20001008

08009efc <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d005      	beq.n	8009f16 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 8009f0a:	4a08      	ldr	r2, [pc, #32]	@ (8009f2c <vIPSetARPResolutionTimerEnableState+0x30>)
 8009f0c:	7813      	ldrb	r3, [r2, #0]
 8009f0e:	f043 0301 	orr.w	r3, r3, #1
 8009f12:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009f14:	e004      	b.n	8009f20 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 8009f16:	4a05      	ldr	r2, [pc, #20]	@ (8009f2c <vIPSetARPResolutionTimerEnableState+0x30>)
 8009f18:	7813      	ldrb	r3, [r2, #0]
 8009f1a:	f36f 0300 	bfc	r3, #0, #1
 8009f1e:	7013      	strb	r3, [r2, #0]
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20000ff4 	.word	0x20000ff4

08009f30 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <vIPSetDHCP_RATimerEnableState+0x14>
 8009f40:	4b0e      	ldr	r3, [pc, #56]	@ (8009f7c <vIPSetDHCP_RATimerEnableState+0x4c>)
 8009f42:	e000      	b.n	8009f46 <vIPSetDHCP_RATimerEnableState+0x16>
 8009f44:	4b0e      	ldr	r3, [pc, #56]	@ (8009f80 <vIPSetDHCP_RATimerEnableState+0x50>)
 8009f46:	4619      	mov	r1, r3
 8009f48:	480e      	ldr	r0, [pc, #56]	@ (8009f84 <vIPSetDHCP_RATimerEnableState+0x54>)
 8009f4a:	f017 fe4d 	bl	8021be8 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d007      	beq.n	8009f64 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009f5a:	f043 0301 	orr.w	r3, r3, #1
 8009f5e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009f62:	e006      	b.n	8009f72 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009f6a:	f36f 0300 	bfc	r3, #0, #1
 8009f6e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	0802472c 	.word	0x0802472c
 8009f80:	08024730 	.word	0x08024730
 8009f84:	08024734 	.word	0x08024734

08009f88 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d005      	beq.n	8009fa2 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 8009f96:	4a08      	ldr	r2, [pc, #32]	@ (8009fb8 <vIPSetDNSTimerEnableState+0x30>)
 8009f98:	7813      	ldrb	r3, [r2, #0]
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009fa0:	e004      	b.n	8009fac <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 8009fa2:	4a05      	ldr	r2, [pc, #20]	@ (8009fb8 <vIPSetDNSTimerEnableState+0x30>)
 8009fa4:	7813      	ldrb	r3, [r2, #0]
 8009fa6:	f36f 0300 	bfc	r3, #0, #1
 8009faa:	7013      	strb	r3, [r2, #0]
    }
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	20001030 	.word	0x20001030

08009fbc <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 8009fc4:	4a04      	ldr	r2, [pc, #16]	@ (8009fd8 <vSetAllNetworksUp+0x1c>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6013      	str	r3, [r2, #0]
}
 8009fca:	bf00      	nop
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	20000ff0 	.word	0x20000ff0

08009fdc <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8009fea:	2100      	movs	r1, #0
 8009fec:	6838      	ldr	r0, [r7, #0]
 8009fee:	f00c feeb 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 8009ff2:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d03e      	beq.n	800a078 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800a002:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a006:	481f      	ldr	r0, [pc, #124]	@ (800a084 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800a008:	f7f7 fbb0 	bl	800176c <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	429a      	cmp	r2, r3
 800a014:	d902      	bls.n	800a01c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4619      	mov	r1, r3
 800a056:	f017 ffe3 	bl	8022020 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800a05a:	68b8      	ldr	r0, [r7, #8]
 800a05c:	f7ff fd0c 	bl	8009a78 <uxIPHeaderSizePacket>
 800a060:	4603      	mov	r3, r0
 800a062:	2b28      	cmp	r3, #40	@ 0x28
 800a064:	d108      	bne.n	800a078 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f103 0014 	add.w	r0, r3, #20
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3314      	adds	r3, #20
 800a070:	2210      	movs	r2, #16
 800a072:	4619      	mov	r1, r3
 800a074:	f017 ffd4 	bl	8022020 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a078:	68bb      	ldr	r3, [r7, #8]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	08024758 	.word	0x08024758

0800a088 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	e013      	b.n	800a0c6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f816 	bl	800a0d0 <void_ptr_to_uintptr>
 800a0a4:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	3b0a      	subs	r3, #10
 800a0ae:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d103      	bne.n	800a0c2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e001      	b.n	800a0c6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff ffc7 	bl	800a088 <prvPacketBuffer_to_NetworkBuffer>
 800a0fa:	4603      	mov	r3, r0
    }
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d102      	bne.n	800a118 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	61fb      	str	r3, [r7, #28]
 800a116:	e033      	b.n	800a180 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff ffd9 	bl	800a0d0 <void_ptr_to_uintptr>
 800a11e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	3b30      	subs	r3, #48	@ 0x30
 800a124:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	f023 030f 	bic.w	r3, r3, #15
 800a132:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b40      	cmp	r3, #64	@ 0x40
 800a138:	d002      	beq.n	800a140 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	2b60      	cmp	r3, #96	@ 0x60
 800a13e:	d101      	bne.n	800a144 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800a140:	2301      	movs	r3, #1
 800a142:	e000      	b.n	800a146 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800a144:	2300      	movs	r3, #0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d104      	bne.n	800a154 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800a14a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800a14e:	480f      	ldr	r0, [pc, #60]	@ (800a18c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800a150:	f7f7 fb0c 	bl	800176c <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b40      	cmp	r3, #64	@ 0x40
 800a158:	d004      	beq.n	800a164 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800a15a:	2b60      	cmp	r3, #96	@ 0x60
 800a15c:	d105      	bne.n	800a16a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800a15e:	233e      	movs	r3, #62	@ 0x3e
 800a160:	61bb      	str	r3, [r7, #24]
                    break;
 800a162:	e008      	b.n	800a176 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800a164:	232a      	movs	r3, #42	@ 0x2a
 800a166:	61bb      	str	r3, [r7, #24]
                    break;
 800a168:	e005      	b.n	800a176 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800a16a:	4809      	ldr	r0, [pc, #36]	@ (800a190 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800a16c:	f017 fd3c 	bl	8021be8 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800a170:	232a      	movs	r3, #42	@ 0x2a
 800a172:	61bb      	str	r3, [r7, #24]
                break;
 800a174:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800a176:	69b9      	ldr	r1, [r7, #24]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff ff85 	bl	800a088 <prvPacketBuffer_to_NetworkBuffer>
 800a17e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800a180:	69fb      	ldr	r3, [r7, #28]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	08024758 	.word	0x08024758
 800a190:	08024830 	.word	0x08024830

0800a194 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800a19a:	f7fa fdcf 	bl	8004d3c <xTaskGetCurrentTaskHandle>
 800a19e:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800a1a0:	f7fe ff6e 	bl	8009080 <FreeRTOS_GetIPTaskHandle>
 800a1a4:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d102      	bne.n	800a1b4 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	e001      	b.n	800a1b8 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d104      	bne.n	800a1dc <prvProcessNetworkDownEvent+0x18>
 800a1d2:	f240 3137 	movw	r1, #823	@ 0x337
 800a1d6:	4857      	ldr	r0, [pc, #348]	@ (800a334 <prvProcessNetworkDownEvent+0x170>)
 800a1d8:	f7f7 fac8 	bl	800176c <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <prvProcessNetworkDownEvent+0x2a>
 800a1e4:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800a1e8:	4852      	ldr	r0, [pc, #328]	@ (800a334 <prvProcessNetworkDownEvent+0x170>)
 800a1ea:	f7f7 fabf 	bl	800176c <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	f7ff fe6a 	bl	8009ec8 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f002 ffd7 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	e041      	b.n	800a282 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800a204:	f36f 1304 	bfc	r3, #4, #1
 800a208:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800a21c:	2100      	movs	r1, #0
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f001 f9c8 	bl	800b5b4 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a22a:	f003 0308 	and.w	r3, r3, #8
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d003      	beq.n	800a23c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800a234:	2001      	movs	r0, #1
 800a236:	f7f7 facd 	bl	80017d4 <vApplicationIPNetworkEventHook>
 800a23a:	e006      	b.n	800a24a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800a242:	f043 0308 	orr.w	r3, r3, #8
 800a246:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7fd f8c0 	bl	80073d0 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a256:	f003 0304 	and.w	r3, r3, #4
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <prvProcessNetworkDownEvent+0xb4>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800a270:	2100      	movs	r1, #0
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7ff fe5c 	bl	8009f30 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a278:	68f9      	ldr	r1, [r7, #12]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f002 ffb6 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800a280:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1ba      	bne.n	800a1fe <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	4798      	blx	r3
 800a290:	4603      	mov	r3, r0
 800a292:	2b01      	cmp	r3, #1
 800a294:	d147      	bne.n	800a326 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	7f13      	ldrb	r3, [r2, #28]
 800a29a:	f043 0301 	orr.w	r3, r3, #1
 800a29e:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f002 ff81 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	e039      	b.n	800a31e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00c      	beq.n	800a2d4 <prvProcessNetworkDownEvent+0x110>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d004      	beq.n	800a2d4 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800a2ca:	68f9      	ldr	r1, [r7, #12]
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	f002 fd9f 	bl	800ce10 <vRAProcess>
 800a2d2:	e01f      	b.n	800a314 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a2da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <prvProcessNetworkDownEvent+0x126>
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d008      	beq.n	800a2fa <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800a2e8:	e011      	b.n	800a30e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	331c      	adds	r3, #28
 800a2f0:	221c      	movs	r2, #28
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	f017 fe94 	bl	8022020 <memcpy>
                            break;
 800a2f8:	e009      	b.n	800a30e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3390      	adds	r3, #144	@ 0x90
 800a304:	2258      	movs	r2, #88	@ 0x58
 800a306:	4619      	mov	r1, r3
 800a308:	f017 fe8a 	bl	8022020 <memcpy>
                            break;
 800a30c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7fe fec2 	bl	8009098 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a314:	68f9      	ldr	r1, [r7, #12]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f002 ff68 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800a31c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1c2      	bne.n	800a2aa <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800a324:	e002      	b.n	800a32c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800a326:	2000      	movs	r0, #0
 800a328:	f7ff fe48 	bl	8009fbc <vSetAllNetworksUp>
}
 800a32c:	bf00      	nop
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	08024758 	.word	0x08024758

0800a338 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a33e:	f7ff fb83 	bl	8009a48 <xIPIsNetworkTaskReady>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <vPreCheckConfigs+0x1a>
 800a348:	f240 31db 	movw	r1, #987	@ 0x3db
 800a34c:	4831      	ldr	r0, [pc, #196]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a34e:	f7f7 fa0d 	bl	800176c <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800a352:	4b31      	ldr	r3, [pc, #196]	@ (800a418 <vPreCheckConfigs+0xe0>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <vPreCheckConfigs+0x2c>
 800a35a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800a35e:	482d      	ldr	r0, [pc, #180]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a360:	f7f7 fa04 	bl	800176c <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a364:	f7fe fe8c 	bl	8009080 <FreeRTOS_GetIPTaskHandle>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d004      	beq.n	800a378 <vPreCheckConfigs+0x40>
 800a36e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800a372:	4828      	ldr	r0, [pc, #160]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a374:	f7f7 f9fa 	bl	800176c <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a378:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a37c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a384:	4293      	cmp	r3, r2
 800a386:	d804      	bhi.n	800a392 <vPreCheckConfigs+0x5a>
 800a388:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800a38c:	4821      	ldr	r0, [pc, #132]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a38e:	f7f7 f9ed 	bl	800176c <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800a392:	230e      	movs	r3, #14
 800a394:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b0e      	cmp	r3, #14
 800a39a:	d004      	beq.n	800a3a6 <vPreCheckConfigs+0x6e>
 800a39c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a3a0:	481c      	ldr	r0, [pc, #112]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a3a2:	f7f7 f9e3 	bl	800176c <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800a3a6:	231c      	movs	r3, #28
 800a3a8:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b1c      	cmp	r3, #28
 800a3ae:	d004      	beq.n	800a3ba <vPreCheckConfigs+0x82>
 800a3b0:	f240 4102 	movw	r1, #1026	@ 0x402
 800a3b4:	4817      	ldr	r0, [pc, #92]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a3b6:	f7f7 f9d9 	bl	800176c <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800a3ba:	2314      	movs	r3, #20
 800a3bc:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b14      	cmp	r3, #20
 800a3c2:	d004      	beq.n	800a3ce <vPreCheckConfigs+0x96>
 800a3c4:	f240 4105 	movw	r1, #1029	@ 0x405
 800a3c8:	4812      	ldr	r0, [pc, #72]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a3ca:	f7f7 f9cf 	bl	800176c <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800a3ce:	2308      	movs	r3, #8
 800a3d0:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	d004      	beq.n	800a3e2 <vPreCheckConfigs+0xaa>
 800a3d8:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800a3dc:	480d      	ldr	r0, [pc, #52]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a3de:	f7f7 f9c5 	bl	800176c <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d004      	beq.n	800a3f6 <vPreCheckConfigs+0xbe>
 800a3ec:	f240 410b 	movw	r1, #1035	@ 0x40b
 800a3f0:	4808      	ldr	r0, [pc, #32]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a3f2:	f7f7 f9bb 	bl	800176c <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a3f6:	2324      	movs	r3, #36	@ 0x24
 800a3f8:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b24      	cmp	r3, #36	@ 0x24
 800a3fe:	d004      	beq.n	800a40a <vPreCheckConfigs+0xd2>
 800a400:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800a404:	4803      	ldr	r0, [pc, #12]	@ (800a414 <vPreCheckConfigs+0xdc>)
 800a406:	f7f7 f9b1 	bl	800176c <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	08024758 	.word	0x08024758
 800a418:	20000fdc 	.word	0x20000fdc

0800a41c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800a422:	f00c fd7f 	bl	8016f24 <uxGetMinimumFreeNetworkBuffers>
 800a426:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800a428:	4b24      	ldr	r3, [pc, #144]	@ (800a4bc <vPrintResourceStats+0xa0>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d20a      	bcs.n	800a448 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800a432:	4a22      	ldr	r2, [pc, #136]	@ (800a4bc <vPrintResourceStats+0xa0>)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800a438:	f00c fd80 	bl	8016f3c <uxGetNumberOfFreeNetworkBuffers>
 800a43c:	4603      	mov	r3, r0
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4619      	mov	r1, r3
 800a442:	481f      	ldr	r0, [pc, #124]	@ (800a4c0 <vPrintResourceStats+0xa4>)
 800a444:	f017 fbd0 	bl	8021be8 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800a448:	f7fb ff1e 	bl	8006288 <xPortGetMinimumEverFreeHeapSize>
 800a44c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800a44e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c4 <vPrintResourceStats+0xa8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d103      	bne.n	800a45e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800a456:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c4 <vPrintResourceStats+0xa8>)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	e019      	b.n	800a492 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a464:	d215      	bcs.n	800a492 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800a466:	4b17      	ldr	r3, [pc, #92]	@ (800a4c4 <vPrintResourceStats+0xa8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	225a      	movs	r2, #90	@ 0x5a
 800a46c:	fb03 f202 	mul.w	r2, r3, r2
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2164      	movs	r1, #100	@ 0x64
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	429a      	cmp	r2, r3
 800a47a:	d90a      	bls.n	800a492 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800a47c:	4a11      	ldr	r2, [pc, #68]	@ (800a4c4 <vPrintResourceStats+0xa8>)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800a482:	f7fb fef5 	bl	8006270 <xPortGetFreeHeapSize>
 800a486:	4603      	mov	r3, r0
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	4619      	mov	r1, r3
 800a48c:	480e      	ldr	r0, [pc, #56]	@ (800a4c8 <vPrintResourceStats+0xac>)
 800a48e:	f017 fbab 	bl	8021be8 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800a492:	2300      	movs	r3, #0
 800a494:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800a496:	f7ff fae3 	bl	8009a60 <uxGetMinimumIPQueueSpace>
 800a49a:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800a49c:	4b0b      	ldr	r3, [pc, #44]	@ (800a4cc <vPrintResourceStats+0xb0>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d006      	beq.n	800a4b4 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800a4a6:	4a09      	ldr	r2, [pc, #36]	@ (800a4cc <vPrintResourceStats+0xb0>)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800a4ac:	6879      	ldr	r1, [r7, #4]
 800a4ae:	4808      	ldr	r0, [pc, #32]	@ (800a4d0 <vPrintResourceStats+0xb4>)
 800a4b0:	f017 fb9a 	bl	8021be8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800a4b4:	bf00      	nop
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20000018 	.word	0x20000018
 800a4c0:	080248c8 	.word	0x080248c8
 800a4c4:	20001058 	.word	0x20001058
 800a4c8:	080248ec 	.word	0x080248ec
 800a4cc:	2000105c 	.word	0x2000105c
 800a4d0:	08024908 	.word	0x08024908

0800a4d4 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	bf38      	it	cc
 800a4e6:	4613      	movcc	r3, r2
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	4293      	cmp	r3, r2
 800a504:	bfa8      	it	ge
 800a506:	4613      	movge	r3, r2
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	4293      	cmp	r3, r2
 800a524:	bf28      	it	cs
 800a526:	4613      	movcs	r3, r2
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	4293      	cmp	r3, r2
 800a544:	bf28      	it	cs
 800a546:	4613      	movcs	r3, r2
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <FreeRTOS_round_up+0x1e>
 800a568:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800a56c:	480a      	ldr	r0, [pc, #40]	@ (800a598 <FreeRTOS_round_up+0x44>)
 800a56e:	f7f7 f8fd 	bl	800176c <vAssertCalled>

    if( d != 0U )
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00a      	beq.n	800a58e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	4413      	add	r3, r2
 800a57e:	1e5a      	subs	r2, r3, #1
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	fbb2 f2f3 	udiv	r2, r2, r3
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800a58e:	68fb      	ldr	r3, [r7, #12]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	08024758 	.word	0x08024758

0800a59c <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a5b2:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3302      	adds	r3, #2
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a5bc:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	3203      	adds	r2, #3
 800a5c2:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a5c4:	4313      	orrs	r3, r2
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	3201      	adds	r2, #1
 800a5e6:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	b29b      	uxth	r3, r3
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08a      	sub	sp, #40	@ 0x28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800a602:	2300      	movs	r3, #0
 800a604:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b21      	cmp	r3, #33	@ 0x21
 800a612:	d802      	bhi.n	800a61a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a614:	2301      	movs	r3, #1
 800a616:	61fb      	str	r3, [r7, #28]
                break;
 800a618:	e06f      	b.n	800a6fa <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	7b9b      	ldrb	r3, [r3, #14]
 800a61e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800a620:	8afb      	ldrh	r3, [r7, #22]
 800a622:	2b44      	cmp	r3, #68	@ 0x44
 800a624:	d902      	bls.n	800a62c <xCheckIPv4SizeFields+0x34>
 800a626:	8afb      	ldrh	r3, [r7, #22]
 800a628:	2b4f      	cmp	r3, #79	@ 0x4f
 800a62a:	d902      	bls.n	800a632 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a62c:	2302      	movs	r3, #2
 800a62e:	61fb      	str	r3, [r7, #28]
                break;
 800a630:	e063      	b.n	800a6fa <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800a632:	8afb      	ldrh	r3, [r7, #22]
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	b29b      	uxth	r3, r3
 800a638:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a63c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800a63e:	8afb      	ldrh	r3, [r7, #22]
 800a640:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	330e      	adds	r3, #14
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d202      	bcs.n	800a652 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a64c:	2303      	movs	r3, #3
 800a64e:	61fb      	str	r3, [r7, #28]
                break;
 800a650:	e053      	b.n	800a6fa <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	7c1a      	ldrb	r2, [r3, #16]
 800a656:	7c5b      	ldrb	r3, [r3, #17]
 800a658:	021b      	lsls	r3, r3, #8
 800a65a:	4313      	orrs	r3, r2
 800a65c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800a65e:	89fb      	ldrh	r3, [r7, #14]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	b21a      	sxth	r2, r3
 800a664:	89fb      	ldrh	r3, [r7, #14]
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b29b      	uxth	r3, r3
 800a66a:	b21b      	sxth	r3, r3
 800a66c:	4313      	orrs	r3, r2
 800a66e:	b21b      	sxth	r3, r3
 800a670:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800a672:	89fb      	ldrh	r3, [r7, #14]
 800a674:	330e      	adds	r3, #14
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d202      	bcs.n	800a682 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a67c:	2304      	movs	r3, #4
 800a67e:	61fb      	str	r3, [r7, #28]
                break;
 800a680:	e03b      	b.n	800a6fa <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	7ddb      	ldrb	r3, [r3, #23]
 800a686:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a688:	7b7b      	ldrb	r3, [r7, #13]
 800a68a:	2b11      	cmp	r3, #17
 800a68c:	d103      	bne.n	800a696 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	3316      	adds	r3, #22
 800a692:	627b      	str	r3, [r7, #36]	@ 0x24
 800a694:	e013      	b.n	800a6be <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800a696:	7b7b      	ldrb	r3, [r7, #13]
 800a698:	2b06      	cmp	r3, #6
 800a69a:	d103      	bne.n	800a6a4 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3322      	adds	r3, #34	@ 0x22
 800a6a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6a2:	e00c      	b.n	800a6be <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800a6a4:	7b7b      	ldrb	r3, [r7, #13]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d002      	beq.n	800a6b0 <xCheckIPv4SizeFields+0xb8>
 800a6aa:	7b7b      	ldrb	r3, [r7, #13]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d103      	bne.n	800a6b8 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	3316      	adds	r3, #22
 800a6b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6b6:	e002      	b.n	800a6be <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a6b8:	2305      	movs	r3, #5
 800a6ba:	61fb      	str	r3, [r7, #28]
                break;
 800a6bc:	e01d      	b.n	800a6fa <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d202      	bcs.n	800a6cc <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a6c6:	2306      	movs	r3, #6
 800a6c8:	61fb      	str	r3, [r7, #28]
                break;
 800a6ca:	e016      	b.n	800a6fa <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800a6cc:	89fb      	ldrh	r3, [r7, #14]
 800a6ce:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	1a9b      	subs	r3, r3, r2
 800a6da:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b07      	cmp	r3, #7
 800a6e0:	d906      	bls.n	800a6f0 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a6e8:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d902      	bls.n	800a6f6 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a6f0:	2307      	movs	r3, #7
 800a6f2:	61fb      	str	r3, [r7, #28]
                break;
 800a6f4:	e001      	b.n	800a6fa <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d003      	beq.n	800a708 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800a700:	69f9      	ldr	r1, [r7, #28]
 800a702:	4804      	ldr	r0, [pc, #16]	@ (800a714 <xCheckIPv4SizeFields+0x11c>)
 800a704:	f017 fa70 	bl	8021be8 <lUDPLoggingPrintf>
        }

        return xResult;
 800a708:	6a3b      	ldr	r3, [r7, #32]
    }
 800a70a:	4618      	mov	r0, r3
 800a70c:	3728      	adds	r7, #40	@ 0x28
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	080249d4 	.word	0x080249d4

0800a718 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	061a      	lsls	r2, r3, #24
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a72c:	431a      	orrs	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	0e1b      	lsrs	r3, r3, #24
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a746:	d306      	bcc.n	800a756 <xIsIPv4Multicast+0x3e>
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800a74e:	d202      	bcs.n	800a756 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800a750:	2301      	movs	r3, #1
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	e001      	b.n	800a75a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a75a:	68fb      	ldr	r3, [r7, #12]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a774:	2301      	movs	r3, #1
 800a776:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d10c      	bne.n	800a798 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a786:	4619      	mov	r1, r3
 800a788:	4610      	mov	r0, r2
 800a78a:	f7ff ff35 	bl	800a5f8 <xCheckIPv4SizeFields>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b01      	cmp	r3, #1
 800a792:	d001      	beq.n	800a798 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a794:	2300      	movs	r3, #0
 800a796:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d134      	bne.n	800a808 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	7ddb      	ldrb	r3, [r3, #23]
 800a7a2:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a8:	3322      	adds	r3, #34	@ 0x22
 800a7aa:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a7ac:	7dbb      	ldrb	r3, [r7, #22]
 800a7ae:	2b11      	cmp	r3, #17
 800a7b0:	d12a      	bne.n	800a808 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	88db      	ldrh	r3, [r3, #6]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d125      	bne.n	800a808 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800a7bc:	4b15      	ldr	r3, [pc, #84]	@ (800a814 <prvAllowIPPacketIPv4+0xac>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	dc1f      	bgt.n	800a804 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a7ca:	061a      	lsls	r2, r3, #24
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a7e0:	0a1b      	lsrs	r3, r3, #8
 800a7e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a7ee:	0e1b      	lsrs	r3, r3, #24
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4808      	ldr	r0, [pc, #32]	@ (800a818 <prvAllowIPPacketIPv4+0xb0>)
 800a7f6:	f017 f9f7 	bl	8021be8 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800a7fa:	4b06      	ldr	r3, [pc, #24]	@ (800a814 <prvAllowIPPacketIPv4+0xac>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	4a04      	ldr	r2, [pc, #16]	@ (800a814 <prvAllowIPPacketIPv4+0xac>)
 800a802:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800a804:	2300      	movs	r3, #0
 800a806:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20001060 	.word	0x20001060
 800a818:	080249f8 	.word	0x080249f8

0800a81c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08a      	sub	sp, #40	@ 0x28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82e:	330e      	adds	r3, #14
 800a830:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a840:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	3b14      	subs	r3, #20
 800a846:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	330e      	adds	r3, #14
 800a850:	4413      	add	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a858:	3322      	adds	r3, #34	@ 0x22
 800a85a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	3b22      	subs	r3, #34	@ 0x22
 800a866:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	6939      	ldr	r1, [r7, #16]
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f018 fb7c 	bl	8022f6a <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	1ad2      	subs	r2, r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	885b      	ldrh	r3, [r3, #2]
 800a882:	b29b      	uxth	r3, r3
 800a884:	021b      	lsls	r3, r3, #8
 800a886:	b21a      	sxth	r2, r3
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	885b      	ldrh	r3, [r3, #2]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	b29b      	uxth	r3, r3
 800a892:	b21b      	sxth	r3, r3
 800a894:	4313      	orrs	r3, r2
 800a896:	b21b      	sxth	r3, r3
 800a898:	b29a      	uxth	r2, r3
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	b219      	sxth	r1, r3
 800a8b0:	6a3b      	ldr	r3, [r7, #32]
 800a8b2:	885b      	ldrh	r3, [r3, #2]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	0a1b      	lsrs	r3, r3, #8
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	b21b      	sxth	r3, r3
 800a8bc:	430b      	orrs	r3, r1
 800a8be:	b21b      	sxth	r3, r3
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	1acb      	subs	r3, r1, r3
 800a8c8:	0a1b      	lsrs	r3, r3, #8
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f023 030f 	bic.w	r3, r3, #15
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f043 0305 	orr.w	r3, r3, #5
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800a8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3728      	adds	r7, #40	@ 0x28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b0f      	cmp	r3, #15
 800a904:	d802      	bhi.n	800a90c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	61fb      	str	r3, [r7, #28]
 800a90a:	e00e      	b.n	800a92a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800a90c:	f107 0314 	add.w	r3, r7, #20
 800a910:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	4618      	mov	r0, r3
 800a922:	f004 fac9 	bl	800eeb8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800a92a:	69fb      	ldr	r3, [r7, #28]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d010      	beq.n	800a966 <xSend_UDP_Update_IPv4+0x32>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00d      	beq.n	800a966 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	689a      	ldr	r2, [r3, #8]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f042 0208 	orr.w	r2, r2, #8
 800a960:	731a      	strb	r2, [r3, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	061a      	lsls	r2, r3, #24
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	021b      	lsls	r3, r3, #8
 800a986:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a98a:	431a      	orrs	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	0a1b      	lsrs	r3, r3, #8
 800a990:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	0e1b      	lsrs	r3, r3, #24
 800a99a:	4313      	orrs	r3, r2
 800a99c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	225e      	movs	r2, #94	@ 0x5e
 800a9ae:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	0c1b      	lsrs	r3, r3, #16
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	0a1b      	lsrs	r3, r3, #8
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	715a      	strb	r2, [r3, #5]
}
 800a9d2:	bf00      	nop
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08c      	sub	sp, #48	@ 0x30
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b27      	cmp	r3, #39	@ 0x27
 800aa06:	d802      	bhi.n	800aa0e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800aa08:	2301      	movs	r3, #1
 800aa0a:	61fb      	str	r3, [r7, #28]
                break;
 800aa0c:	e098      	b.n	800ab40 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	7b9b      	ldrb	r3, [r3, #14]
 800aa12:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800aa14:	89fb      	ldrh	r3, [r7, #14]
 800aa16:	111b      	asrs	r3, r3, #4
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	2b06      	cmp	r3, #6
 800aa1e:	d002      	beq.n	800aa26 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800aa20:	2302      	movs	r3, #2
 800aa22:	61fb      	str	r3, [r7, #28]
                break;
 800aa24:	e08c      	b.n	800ab40 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b35      	cmp	r3, #53	@ 0x35
 800aa2a:	d802      	bhi.n	800aa32 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	61fb      	str	r3, [r7, #28]
                break;
 800aa30:	e086      	b.n	800ab40 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	8a5b      	ldrh	r3, [r3, #18]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	021b      	lsls	r3, r3, #8
 800aa3a:	b21a      	sxth	r2, r3
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	8a5b      	ldrh	r3, [r3, #18]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	0a1b      	lsrs	r3, r3, #8
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	b21b      	sxth	r3, r3
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	b21b      	sxth	r3, r3
 800aa4c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800aa4e:	89bb      	ldrh	r3, [r7, #12]
 800aa50:	3336      	adds	r3, #54	@ 0x36
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d002      	beq.n	800aa5e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800aa58:	2304      	movs	r3, #4
 800aa5a:	61fb      	str	r3, [r7, #28]
                break;
 800aa5c:	e070      	b.n	800ab40 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	7d1b      	ldrb	r3, [r3, #20]
 800aa62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800aa66:	e015      	b.n	800aa94 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	3336      	adds	r3, #54	@ 0x36
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	4413      	add	r3, r2
 800aa70:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	3301      	adds	r3, #1
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	4413      	add	r3, r2
 800aa80:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	3336      	adds	r3, #54	@ 0x36
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d908      	bls.n	800aaa6 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800aa94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 f85f 	bl	800ab5c <xIsExtHeader>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1e1      	bne.n	800aa68 <xCheckIPv6SizeFields+0x88>
 800aaa4:	e000      	b.n	800aaa8 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800aaa6:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	3336      	adds	r3, #54	@ 0x36
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d802      	bhi.n	800aab8 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800aab2:	2307      	movs	r3, #7
 800aab4:	61fb      	str	r3, [r7, #28]
                break;
 800aab6:	e043      	b.n	800ab40 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800aab8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aabc:	2b11      	cmp	r3, #17
 800aabe:	d103      	bne.n	800aac8 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	333e      	adds	r3, #62	@ 0x3e
 800aac4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aac6:	e032      	b.n	800ab2e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800aac8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aacc:	2b06      	cmp	r3, #6
 800aace:	d103      	bne.n	800aad8 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	334a      	adds	r3, #74	@ 0x4a
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aad6:	e02a      	b.n	800ab2e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800aad8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aadc:	2b3a      	cmp	r3, #58	@ 0x3a
 800aade:	d123      	bne.n	800ab28 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	3336      	adds	r3, #54	@ 0x36
 800aae4:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	4413      	add	r3, r2
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800aaf0:	7afb      	ldrb	r3, [r7, #11]
 800aaf2:	2b80      	cmp	r3, #128	@ 0x80
 800aaf4:	d002      	beq.n	800aafc <xCheckIPv6SizeFields+0x11c>
 800aaf6:	7afb      	ldrb	r3, [r7, #11]
 800aaf8:	2b81      	cmp	r3, #129	@ 0x81
 800aafa:	d103      	bne.n	800ab04 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	3308      	adds	r3, #8
 800ab00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab02:	e014      	b.n	800ab2e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800ab04:	7afb      	ldrb	r3, [r7, #11]
 800ab06:	2b85      	cmp	r3, #133	@ 0x85
 800ab08:	d103      	bne.n	800ab12 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab10:	e00d      	b.n	800ab2e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	2b86      	cmp	r3, #134	@ 0x86
 800ab16:	d103      	bne.n	800ab20 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800ab18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1a:	3310      	adds	r3, #16
 800ab1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab1e:	e006      	b.n	800ab2e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab22:	3318      	adds	r3, #24
 800ab24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab26:	e002      	b.n	800ab2e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800ab28:	2305      	movs	r3, #5
 800ab2a:	61fb      	str	r3, [r7, #28]
                break;
 800ab2c:	e008      	b.n	800ab40 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d202      	bcs.n	800ab3c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800ab36:	2306      	movs	r3, #6
 800ab38:	61fb      	str	r3, [r7, #28]
                break;
 800ab3a:	e001      	b.n	800ab40 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800ab40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d003      	beq.n	800ab4e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800ab46:	69f9      	ldr	r1, [r7, #28]
 800ab48:	4803      	ldr	r0, [pc, #12]	@ (800ab58 <xCheckIPv6SizeFields+0x178>)
 800ab4a:	f017 f84d 	bl	8021be8 <lUDPLoggingPrintf>
        }

        return xResult;
 800ab4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800ab50:	4618      	mov	r0, r3
 800ab52:	3730      	adds	r7, #48	@ 0x30
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	08024a34 	.word	0x08024a34

0800ab5c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4603      	mov	r3, r0
 800ab64:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	2b87      	cmp	r3, #135	@ 0x87
 800ab6e:	d016      	beq.n	800ab9e <xIsExtHeader+0x42>
 800ab70:	2b87      	cmp	r3, #135	@ 0x87
 800ab72:	dc16      	bgt.n	800aba2 <xIsExtHeader+0x46>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d012      	beq.n	800ab9e <xIsExtHeader+0x42>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	db12      	blt.n	800aba2 <xIsExtHeader+0x46>
 800ab7c:	2b3c      	cmp	r3, #60	@ 0x3c
 800ab7e:	dc10      	bgt.n	800aba2 <xIsExtHeader+0x46>
 800ab80:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab82:	db0e      	blt.n	800aba2 <xIsExtHeader+0x46>
 800ab84:	3b2b      	subs	r3, #43	@ 0x2b
 800ab86:	4a0a      	ldr	r2, [pc, #40]	@ (800abb0 <xIsExtHeader+0x54>)
 800ab88:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	bf14      	ite	ne
 800ab94:	2301      	movne	r3, #1
 800ab96:	2300      	moveq	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800aba2:	68fb      	ldr	r3, [r7, #12]
    }
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	00020183 	.word	0x00020183

0800abb4 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <xGetIPv6MulticastGroupID+0x1a>
 800abc4:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800abc8:	480e      	ldr	r0, [pc, #56]	@ (800ac04 <xGetIPv6MulticastGroupID+0x50>)
 800abca:	f7f6 fdcf 	bl	800176c <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d104      	bne.n	800abde <xGetIPv6MulticastGroupID+0x2a>
 800abd4:	f240 1113 	movw	r1, #275	@ 0x113
 800abd8:	480a      	ldr	r0, [pc, #40]	@ (800ac04 <xGetIPv6MulticastGroupID+0x50>)
 800abda:	f7f6 fdc7 	bl	800176c <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2200      	movs	r2, #0
 800abe2:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	2200      	movs	r2, #0
 800abe8:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	1c98      	adds	r0, r3, #2
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3302      	adds	r3, #2
 800abf2:	220e      	movs	r2, #14
 800abf4:	4619      	mov	r1, r3
 800abf6:	f017 fa13 	bl	8022020 <memcpy>
}
 800abfa:	bf00      	nop
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	08024a58 	.word	0x08024a58

0800ac08 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2210      	movs	r2, #16
 800ac18:	4906      	ldr	r1, [pc, #24]	@ (800ac34 <xIsIPv6Loopback+0x2c>)
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f018 f995 	bl	8022f4a <memcmp>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800ac26:	2301      	movs	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	080272ac 	.word	0x080272ac

0800ac38 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2bff      	cmp	r3, #255	@ 0xff
 800ac4a:	d123      	bne.n	800ac94 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800ac4c:	f107 030c 	add.w	r3, r7, #12
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff ffae 	bl	800abb4 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	785b      	ldrb	r3, [r3, #1]
 800ac5c:	f003 030f 	and.w	r3, r3, #15
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d102      	bne.n	800ac6a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61fb      	str	r3, [r7, #28]
 800ac68:	e014      	b.n	800ac94 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	785b      	ldrb	r3, [r3, #1]
 800ac6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10c      	bne.n	800ac90 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800ac76:	f107 030c 	add.w	r3, r7, #12
 800ac7a:	2210      	movs	r2, #16
 800ac7c:	4908      	ldr	r1, [pc, #32]	@ (800aca0 <xIsIPv6AllowedMulticast+0x68>)
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f018 f963 	bl	8022f4a <memcmp>
 800ac84:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d102      	bne.n	800ac90 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	61fb      	str	r3, [r7, #28]
 800ac8e:	e001      	b.n	800ac94 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800ac90:	2301      	movs	r3, #1
 800ac92:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800ac94:	69fb      	ldr	r3, [r7, #28]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	0802729c 	.word	0x0802729c

0800aca4 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08a      	sub	sp, #40	@ 0x28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2bff      	cmp	r3, #255	@ 0xff
 800acb6:	d112      	bne.n	800acde <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d10e      	bne.n	800acde <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800acc4:	2bff      	cmp	r3, #255	@ 0xff
 800acc6:	d10a      	bne.n	800acde <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f103 000d 	add.w	r0, r3, #13
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	330d      	adds	r3, #13
 800acd2:	2203      	movs	r2, #3
 800acd4:	4619      	mov	r1, r3
 800acd6:	f018 f938 	bl	8022f4a <memcmp>
 800acda:	6278      	str	r0, [r7, #36]	@ 0x24
 800acdc:	e069      	b.n	800adb2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2210      	movs	r2, #16
 800ace2:	4936      	ldr	r1, [pc, #216]	@ (800adbc <xCompareIPv6_Address+0x118>)
 800ace4:	4618      	mov	r0, r3
 800ace6:	f018 f930 	bl	8022f4a <memcmp>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d102      	bne.n	800acf6 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800acf4:	e05d      	b.n	800adb2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2bfe      	cmp	r3, #254	@ 0xfe
 800acfc:	d10e      	bne.n	800ad1c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800ad02:	2b80      	cmp	r3, #128	@ 0x80
 800ad04:	d10a      	bne.n	800ad1c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800ad0a:	2bfe      	cmp	r3, #254	@ 0xfe
 800ad0c:	d106      	bne.n	800ad1c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800ad12:	2b80      	cmp	r3, #128	@ 0x80
 800ad14:	d102      	bne.n	800ad1c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad1a:	e04a      	b.n	800adb2 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad26:	e044      	b.n	800adb2 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b80      	cmp	r3, #128	@ 0x80
 800ad2c:	d107      	bne.n	800ad3e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	2210      	movs	r2, #16
 800ad34:	4618      	mov	r0, r3
 800ad36:	f018 f908 	bl	8022f4a <memcmp>
 800ad3a:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad3c:	e039      	b.n	800adb2 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	08db      	lsrs	r3, r3, #3
 800ad42:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800ad48:	6a3b      	ldr	r3, [r7, #32]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d006      	beq.n	800ad5c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	68b9      	ldr	r1, [r7, #8]
 800ad52:	6a3a      	ldr	r2, [r7, #32]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f018 f8f8 	bl	8022f4a <memcmp>
 800ad5a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d127      	bne.n	800adb2 <xCompareIPv6_Address+0x10e>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f003 0307 	and.w	r3, r3, #7
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d022      	beq.n	800adb2 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	f1c3 0308 	rsb	r3, r3, #8
 800ad7a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	fa02 f303 	lsl.w	r3, r2, r3
 800ad84:	3b01      	subs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	43db      	mvns	r3, r3
 800ad8e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	4413      	add	r3, r2
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	68b9      	ldr	r1, [r7, #8]
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	440b      	add	r3, r1
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	4053      	eors	r3, r2
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	7cfb      	ldrb	r3, [r7, #19]
 800ada6:	4013      	ands	r3, r2
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800adae:	2301      	movs	r3, #1
 800adb0:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3728      	adds	r7, #40	@ 0x28
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	080272bc 	.word	0x080272bc

0800adc0 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800adcc:	2301      	movs	r3, #1
 800adce:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800add0:	7dfb      	ldrb	r3, [r7, #23]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d10c      	bne.n	800adf0 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f7ff fdfd 	bl	800a9e0 <xCheckIPv6SizeFields>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d001      	beq.n	800adf0 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800adec:	2300      	movs	r3, #0
 800adee:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	460a      	mov	r2, r1
 800ae06:	71fb      	strb	r3, [r7, #7]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	2b87      	cmp	r3, #135	@ 0x87
 800ae10:	d04b      	beq.n	800aeaa <xGetExtensionOrder+0xae>
 800ae12:	2b87      	cmp	r3, #135	@ 0x87
 800ae14:	dc4c      	bgt.n	800aeb0 <xGetExtensionOrder+0xb4>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d030      	beq.n	800ae7c <xGetExtensionOrder+0x80>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	db48      	blt.n	800aeb0 <xGetExtensionOrder+0xb4>
 800ae1e:	2b3c      	cmp	r3, #60	@ 0x3c
 800ae20:	dc46      	bgt.n	800aeb0 <xGetExtensionOrder+0xb4>
 800ae22:	2b2b      	cmp	r3, #43	@ 0x2b
 800ae24:	db44      	blt.n	800aeb0 <xGetExtensionOrder+0xb4>
 800ae26:	3b2b      	subs	r3, #43	@ 0x2b
 800ae28:	2b11      	cmp	r3, #17
 800ae2a:	d841      	bhi.n	800aeb0 <xGetExtensionOrder+0xb4>
 800ae2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae34 <xGetExtensionOrder+0x38>)
 800ae2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae32:	bf00      	nop
 800ae34:	0800ae93 	.word	0x0800ae93
 800ae38:	0800ae99 	.word	0x0800ae99
 800ae3c:	0800aeb1 	.word	0x0800aeb1
 800ae40:	0800aeb1 	.word	0x0800aeb1
 800ae44:	0800aeb1 	.word	0x0800aeb1
 800ae48:	0800aeb1 	.word	0x0800aeb1
 800ae4c:	0800aeb1 	.word	0x0800aeb1
 800ae50:	0800aea5 	.word	0x0800aea5
 800ae54:	0800ae9f 	.word	0x0800ae9f
 800ae58:	0800aeb1 	.word	0x0800aeb1
 800ae5c:	0800aeb1 	.word	0x0800aeb1
 800ae60:	0800aeb1 	.word	0x0800aeb1
 800ae64:	0800aeb1 	.word	0x0800aeb1
 800ae68:	0800aeb1 	.word	0x0800aeb1
 800ae6c:	0800aeb1 	.word	0x0800aeb1
 800ae70:	0800aeb1 	.word	0x0800aeb1
 800ae74:	0800aeb1 	.word	0x0800aeb1
 800ae78:	0800ae83 	.word	0x0800ae83
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	60fb      	str	r3, [r7, #12]
            break;
 800ae80:	e01b      	b.n	800aeba <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800ae82:	2307      	movs	r3, #7
 800ae84:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800ae86:	79bb      	ldrb	r3, [r7, #6]
 800ae88:	2b2b      	cmp	r3, #43	@ 0x2b
 800ae8a:	d115      	bne.n	800aeb8 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800ae90:	e012      	b.n	800aeb8 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800ae92:	2303      	movs	r3, #3
 800ae94:	60fb      	str	r3, [r7, #12]
            break;
 800ae96:	e010      	b.n	800aeba <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800ae98:	2304      	movs	r3, #4
 800ae9a:	60fb      	str	r3, [r7, #12]
            break;
 800ae9c:	e00d      	b.n	800aeba <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800ae9e:	2305      	movs	r3, #5
 800aea0:	60fb      	str	r3, [r7, #12]
            break;
 800aea2:	e00a      	b.n	800aeba <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800aea4:	2306      	movs	r3, #6
 800aea6:	60fb      	str	r3, [r7, #12]
            break;
 800aea8:	e007      	b.n	800aeba <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800aeaa:	2308      	movs	r3, #8
 800aeac:	60fb      	str	r3, [r7, #12]
            break;
 800aeae:	e004      	b.n	800aeba <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800aeb0:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb4:	60fb      	str	r3, [r7, #12]
            break;
 800aeb6:	e000      	b.n	800aeba <xGetExtensionOrder+0xbe>
            break;
 800aeb8:	bf00      	nop
    }

    return xReturn;
 800aeba:	68fb      	ldr	r3, [r7, #12]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08e      	sub	sp, #56	@ 0x38
 800aecc:	af02      	add	r7, sp, #8
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800aed2:	2300      	movs	r3, #0
 800aed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aedc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee2:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefc:	f107 020b 	add.w	r2, r7, #11
 800af00:	4619      	mov	r1, r3
 800af02:	f000 faa5 	bl	800b450 <usGetExtensionHeaderLength>
 800af06:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	3336      	adds	r3, #54	@ 0x36
 800af0c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af12:	429a      	cmp	r2, r3
 800af14:	d243      	bcs.n	800af9e <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	8a5b      	ldrh	r3, [r3, #18]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	b21a      	sxth	r2, r3
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	8a5b      	ldrh	r3, [r3, #18]
 800af24:	b29b      	uxth	r3, r3
 800af26:	0a1b      	lsrs	r3, r3, #8
 800af28:	b29b      	uxth	r3, r3
 800af2a:	b21b      	sxth	r3, r3
 800af2c:	4313      	orrs	r3, r2
 800af2e:	b21b      	sxth	r3, r3
 800af30:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800af32:	8afb      	ldrh	r3, [r7, #22]
 800af34:	69fa      	ldr	r2, [r7, #28]
 800af36:	429a      	cmp	r2, r3
 800af38:	d231      	bcs.n	800af9e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d12e      	bne.n	800af9e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800af40:	7afa      	ldrb	r2, [r7, #11]
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4a:	3336      	adds	r3, #54	@ 0x36
 800af4c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	4413      	add	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800af58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800af60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	6938      	ldr	r0, [r7, #16]
 800af66:	f018 f800 	bl	8022f6a <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	1ad2      	subs	r2, r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	8afa      	ldrh	r2, [r7, #22]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800af80:	8afb      	ldrh	r3, [r7, #22]
 800af82:	021b      	lsls	r3, r3, #8
 800af84:	b21a      	sxth	r2, r3
 800af86:	8afb      	ldrh	r3, [r7, #22]
 800af88:	0a1b      	lsrs	r3, r3, #8
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	b21b      	sxth	r3, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	b21b      	sxth	r3, r3
 800af92:	b29a      	uxth	r2, r3
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800af98:	2301      	movs	r3, #1
 800af9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800af9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d101      	bne.n	800afaa <eHandleIPv6ExtensionHeaders+0xe2>
 800afa6:	4910      	ldr	r1, [pc, #64]	@ (800afe8 <eHandleIPv6ExtensionHeaders+0x120>)
 800afa8:	e000      	b.n	800afac <eHandleIPv6ExtensionHeaders+0xe4>
 800afaa:	4910      	ldr	r1, [pc, #64]	@ (800afec <eHandleIPv6ExtensionHeaders+0x124>)
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	8a5b      	ldrh	r3, [r3, #18]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	021b      	lsls	r3, r3, #8
 800afb4:	b21a      	sxth	r2, r3
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	8a5b      	ldrh	r3, [r3, #18]
 800afba:	b29b      	uxth	r3, r3
 800afbc:	0a1b      	lsrs	r3, r3, #8
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	b21b      	sxth	r3, r3
 800afc2:	4313      	orrs	r3, r2
 800afc4:	b21b      	sxth	r3, r3
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	461a      	mov	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	9200      	str	r2, [sp, #0]
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afd6:	4806      	ldr	r0, [pc, #24]	@ (800aff0 <eHandleIPv6ExtensionHeaders+0x128>)
 800afd8:	f016 fe06 	bl	8021be8 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800afdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3730      	adds	r7, #48	@ 0x30
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	08024a88 	.word	0x08024a88
 800afec:	08024a90 	.word	0x08024a90
 800aff0:	08024a94 	.word	0x08024a94

0800aff4 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d026      	beq.n	800b056 <pxTCPSocketLookup_IPv6+0x62>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d023      	beq.n	800b056 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	7a1b      	ldrb	r3, [r3, #8]
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d010      	beq.n	800b03e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d018      	beq.n	800b056 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3354      	adds	r3, #84	@ 0x54
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	2210      	movs	r2, #16
 800b02c:	4618      	mov	r0, r3
 800b02e:	f017 ff8c 	bl	8022f4a <memcmp>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10e      	bne.n	800b056 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	e00b      	b.n	800b056 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d107      	bne.n	800b056 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d101      	bne.n	800b056 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800b056:	68fb      	ldr	r3, [r7, #12]
    }
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d103      	bne.n	800b084 <xSend_UDP_Update_IPv6+0x24>
 800b07c:	2173      	movs	r1, #115	@ 0x73
 800b07e:	4811      	ldr	r0, [pc, #68]	@ (800b0c4 <xSend_UDP_Update_IPv6+0x64>)
 800b080:	f7f6 fb74 	bl	800176c <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	3308      	adds	r3, #8
 800b08e:	2210      	movs	r2, #16
 800b090:	4619      	mov	r1, r3
 800b092:	f016 ffc5 	bl	8022020 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f103 0014 	add.w	r0, r3, #20
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	3308      	adds	r3, #8
 800b0a0:	2210      	movs	r2, #16
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f016 ffbc 	bl	8022020 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b0b0:	731a      	strb	r2, [r3, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b0b8:	735a      	strb	r2, [r3, #13]

    return NULL;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	08024aec 	.word	0x08024aec

0800b0c8 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800b0d2:	2330      	movs	r3, #48	@ 0x30
 800b0d4:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800b0d6:	88fb      	ldrh	r3, [r7, #6]
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d805      	bhi.n	800b0e8 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800b0dc:	88fb      	ldrh	r3, [r7, #6]
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	73fb      	strb	r3, [r7, #15]
 800b0e6:	e010      	b.n	800b10a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800b0e8:	88fb      	ldrh	r3, [r7, #6]
 800b0ea:	2b0f      	cmp	r3, #15
 800b0ec:	d809      	bhi.n	800b102 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800b0ee:	2361      	movs	r3, #97	@ 0x61
 800b0f0:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	3b0a      	subs	r3, #10
 800b0fe:	73fb      	strb	r3, [r7, #15]
 800b100:	e003      	b.n	800b10a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800b102:	21b3      	movs	r1, #179	@ 0xb3
 800b104:	4803      	ldr	r0, [pc, #12]	@ (800b114 <cHexToChar+0x4c>)
 800b106:	f7f6 fb31 	bl	800176c <vAssertCalled>
    }

    return cReturn;
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	08024aec 	.word	0x08024aec

0800b118 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800b118:	b590      	push	{r4, r7, lr}
 800b11a:	b08b      	sub	sp, #44	@ 0x2c
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800b126:	2304      	movs	r3, #4
 800b128:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800b12e:	88fb      	ldrh	r3, [r7, #6]
 800b130:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800b132:	2300      	movs	r3, #0
 800b134:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b136:	2300      	movs	r3, #0
 800b138:	627b      	str	r3, [r7, #36]	@ 0x24
 800b13a:	e026      	b.n	800b18a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800b13c:	8bfb      	ldrh	r3, [r7, #30]
 800b13e:	0b1b      	lsrs	r3, r3, #12
 800b140:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800b142:	8a7b      	ldrh	r3, [r7, #18]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800b148:	2301      	movs	r3, #1
 800b14a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d104      	bne.n	800b15c <uxHexPrintShort+0x44>
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	3b01      	subs	r3, #1
 800b156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b158:	429a      	cmp	r2, r3
 800b15a:	d110      	bne.n	800b17e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	3b01      	subs	r3, #1
 800b160:	6a3a      	ldr	r2, [r7, #32]
 800b162:	429a      	cmp	r2, r3
 800b164:	d216      	bcs.n	800b194 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	18d4      	adds	r4, r2, r3
 800b16c:	8a7b      	ldrh	r3, [r7, #18]
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff ffaa 	bl	800b0c8 <cHexToChar>
 800b174:	4603      	mov	r3, r0
 800b176:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	3301      	adds	r3, #1
 800b17c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800b17e:	8bfb      	ldrh	r3, [r7, #30]
 800b180:	011b      	lsls	r3, r3, #4
 800b182:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b186:	3301      	adds	r3, #1
 800b188:	627b      	str	r3, [r7, #36]	@ 0x24
 800b18a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d3d4      	bcc.n	800b13c <uxHexPrintShort+0x24>
 800b192:	e000      	b.n	800b196 <uxHexPrintShort+0x7e>
                break;
 800b194:	bf00      	nop
    }

    return uxIndex;
 800b196:	6a3b      	ldr	r3, [r7, #32]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	372c      	adds	r7, #44	@ 0x2c
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd90      	pop	{r4, r7, pc}

0800b1a0 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b089      	sub	sp, #36	@ 0x24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800b1b4:	2308      	movs	r3, #8
 800b1b6:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b1be:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800b1c0:	e02c      	b.n	800b21c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	4413      	add	r3, r2
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d107      	bne.n	800b1e6 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800b1e6:	89fb      	ldrh	r3, [r7, #14]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d104      	bne.n	800b1f6 <prv_ntop6_search_zeros+0x56>
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	69fa      	ldr	r2, [r7, #28]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d10f      	bne.n	800b216 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	dd0a      	ble.n	800b212 <prv_ntop6_search_zeros+0x72>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	697a      	ldr	r2, [r7, #20]
 800b202:	429a      	cmp	r2, r3
 800b204:	dd05      	ble.n	800b212 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	3301      	adds	r3, #1
 800b21a:	61fb      	str	r3, [r7, #28]
 800b21c:	69fa      	ldr	r2, [r7, #28]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	429a      	cmp	r2, r3
 800b222:	dbce      	blt.n	800b1c2 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop
 800b228:	3724      	adds	r7, #36	@ 0x24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800b232:	b480      	push	{r7}
 800b234:	b087      	sub	sp, #28
 800b236:	af00      	add	r7, sp, #0
 800b238:	60f8      	str	r0, [r7, #12]
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800b23e:	2301      	movs	r3, #1
 800b240:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800b242:	2308      	movs	r3, #8
 800b244:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	691a      	ldr	r2, [r3, #16]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	429a      	cmp	r2, r3
 800b250:	d827      	bhi.n	800b2a2 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4413      	add	r3, r2
 800b25a:	223a      	movs	r2, #58	@ 0x3a
 800b25c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68da      	ldr	r2, [r3, #12]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	4413      	add	r3, r2
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	429a      	cmp	r2, r3
 800b276:	d116      	bne.n	800b2a6 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	3b01      	subs	r3, #1
 800b280:	429a      	cmp	r2, r3
 800b282:	d80b      	bhi.n	800b29c <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4413      	add	r3, r2
 800b28c:	223a      	movs	r2, #58	@ 0x3a
 800b28e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	611a      	str	r2, [r3, #16]
 800b29a:	e004      	b.n	800b2a6 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
 800b2a0:	e001      	b.n	800b2a6 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b2a6:	697b      	ldr	r3, [r7, #20]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	371c      	adds	r7, #28
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800b2b4:	b590      	push	{r4, r7, lr}
 800b2b6:	b089      	sub	sp, #36	@ 0x24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800b2c4:	2304      	movs	r3, #4
 800b2c6:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	dd13      	ble.n	800b2f8 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691a      	ldr	r2, [r3, #16]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d302      	bcc.n	800b2e2 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	61fb      	str	r3, [r7, #28]
 800b2e0:	e00a      	b.n	800b2f8 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	223a      	movs	r2, #58	@ 0x3a
 800b2ec:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d130      	bne.n	800b360 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	1acb      	subs	r3, r1, r3
 800b308:	429a      	cmp	r2, r3
 800b30a:	d827      	bhi.n	800b35c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	18d0      	adds	r0, r2, r3
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	4413      	add	r3, r2
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	021b      	lsls	r3, r3, #8
 800b328:	b21a      	sxth	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6819      	ldr	r1, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	440b      	add	r3, r1
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	0a1b      	lsrs	r3, r3, #8
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	b21b      	sxth	r3, r3
 800b33e:	4313      	orrs	r3, r2
 800b340:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b342:	b29b      	uxth	r3, r3
 800b344:	461a      	mov	r2, r3
 800b346:	4621      	mov	r1, r4
 800b348:	f7ff fee6 	bl	800b118 <uxHexPrintShort>
 800b34c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	691a      	ldr	r2, [r3, #16]
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	441a      	add	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	611a      	str	r2, [r3, #16]
 800b35a:	e001      	b.n	800b360 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800b35c:	2300      	movs	r3, #0
 800b35e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b360:	69fb      	ldr	r3, [r7, #28]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3724      	adds	r7, #36	@ 0x24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd90      	pop	{r4, r7, pc}

0800b36a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b08a      	sub	sp, #40	@ 0x28
 800b36e:	af00      	add	r7, sp, #0
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	60b9      	str	r1, [r7, #8]
 800b374:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800b376:	f107 0310 	add.w	r3, r7, #16
 800b37a:	2214      	movs	r2, #20
 800b37c:	2100      	movs	r1, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	f016 ff5b 	bl	802223a <memset>

    xSet.pusAddress = pvSource;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d92c      	bls.n	800b3e8 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800b38e:	f107 0310 	add.w	r3, r7, #16
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff ff04 	bl	800b1a0 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800b398:	e01f      	b.n	800b3da <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d10e      	bne.n	800b3c0 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b3a2:	f107 0310 	add.w	r3, r7, #16
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	68b8      	ldr	r0, [r7, #8]
 800b3ac:	f7ff ff41 	bl	800b232 <prv_ntop6_write_zeros>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d015      	beq.n	800b3e2 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800b3b6:	69fa      	ldr	r2, [r7, #28]
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	61fb      	str	r3, [r7, #28]
 800b3be:	e00c      	b.n	800b3da <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b3c0:	f107 0310 	add.w	r3, r7, #16
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	6879      	ldr	r1, [r7, #4]
 800b3c8:	68b8      	ldr	r0, [r7, #8]
 800b3ca:	f7ff ff73 	bl	800b2b4 <prv_ntop6_write_short>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d008      	beq.n	800b3e6 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	2b07      	cmp	r3, #7
 800b3de:	dddc      	ble.n	800b39a <FreeRTOS_inet_ntop6+0x30>
 800b3e0:	e002      	b.n	800b3e8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b3e2:	bf00      	nop
 800b3e4:	e000      	b.n	800b3e8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b3e6:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	2b07      	cmp	r3, #7
 800b3ec:	dc02      	bgt.n	800b3f4 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3f2:	e006      	b.n	800b402 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800b402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b404:	4618      	mov	r0, r3
 800b406:	3728      	adds	r7, #40	@ 0x28
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2233      	movs	r2, #51	@ 0x33
 800b41a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2233      	movs	r2, #51	@ 0x33
 800b420:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	7b1a      	ldrb	r2, [r3, #12]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	7b5a      	ldrb	r2, [r3, #13]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	7b9a      	ldrb	r2, [r3, #14]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	7bda      	ldrb	r2, [r3, #15]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	715a      	strb	r2, [r3, #5]
}
 800b442:	bf00      	nop
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
	...

0800b450 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08e      	sub	sp, #56	@ 0x38
 800b454:	af02      	add	r7, sp, #8
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800b462:	2336      	movs	r3, #54	@ 0x36
 800b464:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 808c 	beq.w	800b596 <usGetExtensionHeaderLength+0x146>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 8088 	beq.w	800b596 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	7d1b      	ldrb	r3, [r3, #20]
 800b48e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800b492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b496:	2100      	movs	r1, #0
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff fcaf 	bl	800adfc <xGetExtensionOrder>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	dd72      	ble.n	800b58a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b4a4:	e06b      	b.n	800b57e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	4413      	add	r3, r2
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800b4b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff fc9d 	bl	800adfc <xGetExtensionOrder>
 800b4c2:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800b4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800b4d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	4413      	add	r3, r2
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d806      	bhi.n	800b4f2 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4ea:	482d      	ldr	r0, [pc, #180]	@ (800b5a0 <usGetExtensionHeaderLength+0x150>)
 800b4ec:	f016 fb7c 	bl	8021be8 <lUDPLoggingPrintf>
                    break;
 800b4f0:	e051      	b.n	800b596 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800b4f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800b4fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b4fe:	2b06      	cmp	r3, #6
 800b500:	d007      	beq.n	800b512 <usGetExtensionHeaderLength+0xc2>
 800b502:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b506:	2b11      	cmp	r3, #17
 800b508:	d003      	beq.n	800b512 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800b50a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b50e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b510:	d10d      	bne.n	800b52e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800b512:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b516:	4619      	mov	r1, r3
 800b518:	4822      	ldr	r0, [pc, #136]	@ (800b5a4 <usGetExtensionHeaderLength+0x154>)
 800b51a:	f016 fb65 	bl	8021be8 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800b51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b520:	3b36      	subs	r3, #54	@ 0x36
 800b522:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b52a:	701a      	strb	r2, [r3, #0]
                    break;
 800b52c:	e033      	b.n	800b596 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b532:	4413      	add	r3, r2
 800b534:	781a      	ldrb	r2, [r3, #0]
 800b536:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b53a:	4611      	mov	r1, r2
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff fc5d 	bl	800adfc <xGetExtensionOrder>
 800b542:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800b544:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800b548:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	4613      	mov	r3, r2
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	4814      	ldr	r0, [pc, #80]	@ (800b5a8 <usGetExtensionHeaderLength+0x158>)
 800b556:	f016 fb47 	bl	8021be8 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d103      	bne.n	800b568 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800b560:	4812      	ldr	r0, [pc, #72]	@ (800b5ac <usGetExtensionHeaderLength+0x15c>)
 800b562:	f016 fb41 	bl	8021be8 <lUDPLoggingPrintf>
                    break;
 800b566:	e016      	b.n	800b596 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da03      	bge.n	800b576 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800b56e:	4810      	ldr	r0, [pc, #64]	@ (800b5b0 <usGetExtensionHeaderLength+0x160>)
 800b570:	f016 fb3a 	bl	8021be8 <lUDPLoggingPrintf>
                    break;
 800b574:	e00f      	b.n	800b596 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800b576:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b57a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b580:	3308      	adds	r3, #8
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	429a      	cmp	r2, r3
 800b586:	d88e      	bhi.n	800b4a6 <usGetExtensionHeaderLength+0x56>
 800b588:	e005      	b.n	800b596 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b590:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3730      	adds	r7, #48	@ 0x30
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	08024b34 	.word	0x08024b34
 800b5a4:	08024b7c 	.word	0x08024b7c
 800b5a8:	08024b90 	.word	0x08024b90
 800b5ac:	08024bb8 	.word	0x08024bb8
 800b5b0:	08024c18 	.word	0x08024c18

0800b5b4 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <vManageSolicitedNodeAddress+0x1a>
 800b5c4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800b5c8:	482d      	ldr	r0, [pc, #180]	@ (800b680 <vManageSolicitedNodeAddress+0xcc>)
 800b5ca:	f7f6 f8cf 	bl	800176c <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <vManageSolicitedNodeAddress+0x2e>
 800b5d8:	f240 1133 	movw	r1, #307	@ 0x133
 800b5dc:	4828      	ldr	r0, [pc, #160]	@ (800b680 <vManageSolicitedNodeAddress+0xcc>)
 800b5de:	f7f6 f8c5 	bl	800176c <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	3338      	adds	r3, #56	@ 0x38
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f002 f9c2 	bl	800d970 <xIPv6_GetIPType>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d005      	beq.n	800b602 <vManageSolicitedNodeAddress+0x4e>
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d002      	beq.n	800b602 <vManageSolicitedNodeAddress+0x4e>
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d138      	bne.n	800b674 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b602:	2333      	movs	r3, #51	@ 0x33
 800b604:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b606:	2333      	movs	r3, #51	@ 0x33
 800b608:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800b60a:	23ff      	movs	r3, #255	@ 0xff
 800b60c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b614:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b61c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b624:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d111      	bne.n	800b650 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d01e      	beq.n	800b676 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b646:	f107 0108 	add.w	r1, r7, #8
 800b64a:	4610      	mov	r0, r2
 800b64c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800b64e:	e012      	b.n	800b676 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00c      	beq.n	800b676 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b662:	699b      	ldr	r3, [r3, #24]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b66a:	f107 0108 	add.w	r1, r7, #8
 800b66e:	4610      	mov	r0, r2
 800b670:	4798      	blx	r3
}
 800b672:	e000      	b.n	800b676 <vManageSolicitedNodeAddress+0xc2>
            break;
 800b674:	bf00      	nop
}
 800b676:	bf00      	nop
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	08024c3c 	.word	0x08024c3c

0800b684 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b68a:	2000      	movs	r0, #0
 800b68c:	f001 fd8c 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	e016      	b.n	800b6c2 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b69a:	f003 0304 	and.w	r3, r3, #4
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d009      	beq.n	800b6b8 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3338      	adds	r3, #56	@ 0x38
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f002 f961 	bl	800d970 <xIPv6_GetIPType>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800b6b2:	78fb      	ldrb	r3, [r7, #3]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d008      	beq.n	800b6ca <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f001 fd96 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800b6c0:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e5      	bne.n	800b694 <pxFindLocalEndpoint+0x10>
 800b6c8:	e000      	b.n	800b6cc <pxFindLocalEndpoint+0x48>
                {
                    break;
 800b6ca:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800b6cc:	687b      	ldr	r3, [r7, #4]
    }
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7ff faa8 	bl	800ac38 <xIsIPv6AllowedMulticast>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00e      	beq.n	800b70c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800b6ee:	68b9      	ldr	r1, [r7, #8]
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7ff fe8b 	bl	800b40c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d004      	beq.n	800b706 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800b6fc:	f7ff ffc2 	bl	800b684 <pxFindLocalEndpoint>
 800b700:	4602      	mov	r2, r0
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800b706:	2301      	movs	r3, #1
 800b708:	75fb      	strb	r3, [r7, #23]
 800b70a:	e001      	b.n	800b710 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800b70c:	2300      	movs	r3, #0
 800b70e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800b710:	7dfb      	ldrb	r3, [r7, #23]
    }
 800b712:	4618      	mov	r0, r3
 800b714:	3718      	adds	r7, #24
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7ff ffd2 	bl	800b6d6 <prvMACResolve>
 800b732:	4603      	mov	r3, r0
 800b734:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800b736:	7ffb      	ldrb	r3, [r7, #31]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d106      	bne.n	800b74a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f9a9 	bl	800ba98 <prvNDCacheLookup>
 800b746:	4603      	mov	r3, r0
 800b748:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800b74a:	7ffb      	ldrb	r3, [r7, #31]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d104      	bne.n	800b75a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	4619      	mov	r1, r3
 800b754:	4840      	ldr	r0, [pc, #256]	@ (800b858 <eNDGetCacheEntry+0x13c>)
 800b756:	f016 fa47 	bl	8021be8 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800b75a:	7ffb      	ldrb	r3, [r7, #31]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d176      	bne.n	800b84e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f002 f905 	bl	800d970 <xIPv6_GetIPType>
 800b766:	4603      	mov	r3, r0
 800b768:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f001 fdae 	bl	800d2cc <FreeRTOS_FindEndPointOnIP_IPv6>
 800b770:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00d      	beq.n	800b794 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	69ba      	ldr	r2, [r7, #24]
 800b782:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800b784:	68f9      	ldr	r1, [r7, #12]
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	3338      	adds	r3, #56	@ 0x38
 800b78a:	461a      	mov	r2, r3
 800b78c:	4833      	ldr	r0, [pc, #204]	@ (800b85c <eNDGetCacheEntry+0x140>)
 800b78e:	f016 fa2b 	bl	8021be8 <lUDPLoggingPrintf>
 800b792:	e05c      	b.n	800b84e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800b794:	7dfb      	ldrb	r3, [r7, #23]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d12b      	bne.n	800b7f2 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b79a:	2000      	movs	r0, #0
 800b79c:	f001 fd04 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800b7a0:	61b8      	str	r0, [r7, #24]
 800b7a2:	e017      	b.n	800b7d4 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	3338      	adds	r3, #56	@ 0x38
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f002 f8e1 	bl	800d970 <xIPv6_GetIPType>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800b7b2:	7dba      	ldrb	r2, [r7, #22]
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d107      	bne.n	800b7ca <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	68b9      	ldr	r1, [r7, #8]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f000 f96a 	bl	800ba98 <prvNDCacheLookup>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	77fb      	strb	r3, [r7, #31]
                            break;
 800b7c8:	e007      	b.n	800b7da <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b7ca:	69b9      	ldr	r1, [r7, #24]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f001 fd0d 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800b7d2:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e4      	bne.n	800b7a4 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800b7da:	68f9      	ldr	r1, [r7, #12]
 800b7dc:	7ffb      	ldrb	r3, [r7, #31]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <eNDGetCacheEntry+0xca>
 800b7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800b860 <eNDGetCacheEntry+0x144>)
 800b7e4:	e000      	b.n	800b7e8 <eNDGetCacheEntry+0xcc>
 800b7e6:	4b1f      	ldr	r3, [pc, #124]	@ (800b864 <eNDGetCacheEntry+0x148>)
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	481f      	ldr	r0, [pc, #124]	@ (800b868 <eNDGetCacheEntry+0x14c>)
 800b7ec:	f016 f9fc 	bl	8021be8 <lUDPLoggingPrintf>
 800b7f0:	e02d      	b.n	800b84e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800b7f2:	2060      	movs	r0, #96	@ 0x60
 800b7f4:	f002 f87c 	bl	800d8f0 <FreeRTOS_FindGateWay>
 800b7f8:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d026      	beq.n	800b84e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	335c      	adds	r3, #92	@ 0x5c
 800b806:	2210      	movs	r2, #16
 800b808:	4619      	mov	r1, r3
 800b80a:	f016 fc09 	bl	8022020 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4619      	mov	r1, r3
 800b812:	4816      	ldr	r0, [pc, #88]	@ (800b86c <eNDGetCacheEntry+0x150>)
 800b814:	f016 f9e8 	bl	8021be8 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	3338      	adds	r3, #56	@ 0x38
 800b81c:	4619      	mov	r1, r3
 800b81e:	4814      	ldr	r0, [pc, #80]	@ (800b870 <eNDGetCacheEntry+0x154>)
 800b820:	f016 f9e2 	bl	8021be8 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f935 	bl	800ba98 <prvNDCacheLookup>
 800b82e:	4603      	mov	r3, r0
 800b830:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d006      	beq.n	800b848 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3338      	adds	r3, #56	@ 0x38
 800b840:	4619      	mov	r1, r3
 800b842:	480c      	ldr	r0, [pc, #48]	@ (800b874 <eNDGetCacheEntry+0x158>)
 800b844:	f016 f9d0 	bl	8021be8 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800b84e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800b850:	4618      	mov	r0, r3
 800b852:	3720      	adds	r7, #32
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	08024c70 	.word	0x08024c70
 800b85c:	08024c94 	.word	0x08024c94
 800b860:	08024cd8 	.word	0x08024cd8
 800b864:	08024cdc 	.word	0x08024cdc
 800b868:	08024ce4 	.word	0x08024ce4
 800b86c:	08024d0c 	.word	0x08024d0c
 800b870:	08024d30 	.word	0x08024d30
 800b874:	08024d54 	.word	0x08024d54

0800b878 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800b878:	b5b0      	push	{r4, r5, r7, lr}
 800b87a:	b08e      	sub	sp, #56	@ 0x38
 800b87c:	af04      	add	r7, sp, #16
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800b884:	f04f 33ff 	mov.w	r3, #4294967295
 800b888:	623b      	str	r3, [r7, #32]
 800b88a:	f04f 33ff 	mov.w	r3, #4294967295
 800b88e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800b890:	2397      	movs	r3, #151	@ 0x97
 800b892:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b898:	2300      	movs	r3, #0
 800b89a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b89c:	e033      	b.n	800b906 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b89e:	4a44      	ldr	r2, [pc, #272]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a2:	015b      	lsls	r3, r3, #5
 800b8a4:	4413      	add	r3, r2
 800b8a6:	331d      	adds	r3, #29
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d106      	bne.n	800b8bc <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800b8ae:	6a3b      	ldr	r3, [r7, #32]
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d124      	bne.n	800b900 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b8:	623b      	str	r3, [r7, #32]
 800b8ba:	e021      	b.n	800b900 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8be:	015b      	lsls	r3, r3, #5
 800b8c0:	4a3b      	ldr	r2, [pc, #236]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b8c2:	4413      	add	r3, r2
 800b8c4:	68b9      	ldr	r1, [r7, #8]
 800b8c6:	2210      	movs	r2, #16
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f017 fb3e 	bl	8022f4a <memcmp>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	61fb      	str	r3, [r7, #28]
                break;
 800b8d8:	e018      	b.n	800b90c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800b8da:	4a35      	ldr	r2, [pc, #212]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8de:	015b      	lsls	r3, r3, #5
 800b8e0:	4413      	add	r3, r2
 800b8e2:	331c      	adds	r3, #28
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	8b7b      	ldrh	r3, [r7, #26]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d908      	bls.n	800b900 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800b8ee:	4a30      	ldr	r2, [pc, #192]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	015b      	lsls	r3, r3, #5
 800b8f4:	4413      	add	r3, r2
 800b8f6:	331c      	adds	r3, #28
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fe:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b902:	3301      	adds	r3, #1
 800b904:	627b      	str	r3, [r7, #36]	@ 0x24
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	2b17      	cmp	r3, #23
 800b90a:	ddc8      	ble.n	800b89e <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	da22      	bge.n	800b958 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	2b00      	cmp	r3, #0
 800b916:	db02      	blt.n	800b91e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	61fb      	str	r3, [r7, #28]
 800b91c:	e01c      	b.n	800b958 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	461c      	mov	r4, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	785b      	ldrb	r3, [r3, #1]
 800b92c:	461d      	mov	r5, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	789b      	ldrb	r3, [r3, #2]
 800b932:	461a      	mov	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	78db      	ldrb	r3, [r3, #3]
 800b938:	4619      	mov	r1, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	791b      	ldrb	r3, [r3, #4]
 800b93e:	4618      	mov	r0, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	795b      	ldrb	r3, [r3, #5]
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	9002      	str	r0, [sp, #8]
 800b948:	9101      	str	r1, [sp, #4]
 800b94a:	9200      	str	r2, [sp, #0]
 800b94c:	462b      	mov	r3, r5
 800b94e:	4622      	mov	r2, r4
 800b950:	69f9      	ldr	r1, [r7, #28]
 800b952:	4818      	ldr	r0, [pc, #96]	@ (800b9b4 <vNDRefreshCacheEntry+0x13c>)
 800b954:	f016 f948 	bl	8021be8 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	015b      	lsls	r3, r3, #5
 800b95c:	4a14      	ldr	r2, [pc, #80]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b95e:	4413      	add	r3, r2
 800b960:	68b9      	ldr	r1, [r7, #8]
 800b962:	2210      	movs	r2, #16
 800b964:	4618      	mov	r0, r3
 800b966:	f016 fb5b 	bl	8022020 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	015b      	lsls	r3, r3, #5
 800b96e:	3310      	adds	r3, #16
 800b970:	4a0f      	ldr	r2, [pc, #60]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b972:	4413      	add	r3, r2
 800b974:	68f9      	ldr	r1, [r7, #12]
 800b976:	2206      	movs	r2, #6
 800b978:	4618      	mov	r0, r3
 800b97a:	f016 fb51 	bl	8022020 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800b97e:	4a0c      	ldr	r2, [pc, #48]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	015b      	lsls	r3, r3, #5
 800b984:	4413      	add	r3, r2
 800b986:	3318      	adds	r3, #24
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b98c:	4a08      	ldr	r2, [pc, #32]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	015b      	lsls	r3, r3, #5
 800b992:	4413      	add	r3, r2
 800b994:	331c      	adds	r3, #28
 800b996:	2296      	movs	r2, #150	@ 0x96
 800b998:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800b99a:	4a05      	ldr	r2, [pc, #20]	@ (800b9b0 <vNDRefreshCacheEntry+0x138>)
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	015b      	lsls	r3, r3, #5
 800b9a0:	4413      	add	r3, r2
 800b9a2:	331d      	adds	r3, #29
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	701a      	strb	r2, [r3, #0]
    }
 800b9a8:	bf00      	nop
 800b9aa:	3728      	adds	r7, #40	@ 0x28
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bdb0      	pop	{r4, r5, r7, pc}
 800b9b0:	20001064 	.word	0x20001064
 800b9b4:	08024d7c 	.word	0x08024d7c

0800b9b8 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60fb      	str	r3, [r7, #12]
 800b9c2:	e05f      	b.n	800ba84 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800b9c8:	4a32      	ldr	r2, [pc, #200]	@ (800ba94 <vNDAgeCache+0xdc>)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	015b      	lsls	r3, r3, #5
 800b9ce:	4413      	add	r3, r2
 800b9d0:	331c      	adds	r3, #28
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d052      	beq.n	800ba7e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800b9d8:	4a2e      	ldr	r2, [pc, #184]	@ (800ba94 <vNDAgeCache+0xdc>)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	015b      	lsls	r3, r3, #5
 800b9de:	4413      	add	r3, r2
 800b9e0:	331c      	adds	r3, #28
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b2d9      	uxtb	r1, r3
 800b9e8:	4a2a      	ldr	r2, [pc, #168]	@ (800ba94 <vNDAgeCache+0xdc>)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	015b      	lsls	r3, r3, #5
 800b9ee:	4413      	add	r3, r2
 800b9f0:	331c      	adds	r3, #28
 800b9f2:	460a      	mov	r2, r1
 800b9f4:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800b9f6:	4a27      	ldr	r2, [pc, #156]	@ (800ba94 <vNDAgeCache+0xdc>)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	015b      	lsls	r3, r3, #5
 800b9fc:	4413      	add	r3, r2
 800b9fe:	331c      	adds	r3, #28
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d109      	bne.n	800ba1a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	015b      	lsls	r3, r3, #5
 800ba0a:	4a22      	ldr	r2, [pc, #136]	@ (800ba94 <vNDAgeCache+0xdc>)
 800ba0c:	4413      	add	r3, r2
 800ba0e:	2220      	movs	r2, #32
 800ba10:	2100      	movs	r1, #0
 800ba12:	4618      	mov	r0, r3
 800ba14:	f016 fc11 	bl	802223a <memset>
 800ba18:	e031      	b.n	800ba7e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800ba1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba94 <vNDAgeCache+0xdc>)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	015b      	lsls	r3, r3, #5
 800ba20:	4413      	add	r3, r2
 800ba22:	331d      	adds	r3, #29
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d102      	bne.n	800ba30 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	60bb      	str	r3, [r7, #8]
 800ba2e:	e009      	b.n	800ba44 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800ba30:	4a18      	ldr	r2, [pc, #96]	@ (800ba94 <vNDAgeCache+0xdc>)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	015b      	lsls	r3, r3, #5
 800ba36:	4413      	add	r3, r2
 800ba38:	331c      	adds	r3, #28
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d801      	bhi.n	800ba44 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d019      	beq.n	800ba7e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800ba4a:	2356      	movs	r3, #86	@ 0x56
 800ba4c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800ba4e:	2100      	movs	r1, #0
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f00b f9b9 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 800ba56:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00f      	beq.n	800ba7e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800ba5e:	4a0d      	ldr	r2, [pc, #52]	@ (800ba94 <vNDAgeCache+0xdc>)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	015b      	lsls	r3, r3, #5
 800ba64:	4413      	add	r3, r2
 800ba66:	3318      	adds	r3, #24
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	015b      	lsls	r3, r3, #5
 800ba72:	4a08      	ldr	r2, [pc, #32]	@ (800ba94 <vNDAgeCache+0xdc>)
 800ba74:	4413      	add	r3, r2
 800ba76:	4619      	mov	r1, r3
 800ba78:	6838      	ldr	r0, [r7, #0]
 800ba7a:	f000 f8bb 	bl	800bbf4 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3301      	adds	r3, #1
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b17      	cmp	r3, #23
 800ba88:	dd9c      	ble.n	800b9c4 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800ba8a:	bf00      	nop
 800ba8c:	bf00      	nop
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20001064 	.word	0x20001064

0800ba98 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800ba98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba9a:	b08d      	sub	sp, #52	@ 0x34
 800ba9c:	af06      	add	r7, sp, #24
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800baa4:	2300      	movs	r3, #0
 800baa6:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800baa8:	2300      	movs	r3, #0
 800baaa:	617b      	str	r3, [r7, #20]
 800baac:	e04a      	b.n	800bb44 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800baae:	4a30      	ldr	r2, [pc, #192]	@ (800bb70 <prvNDCacheLookup+0xd8>)
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	015b      	lsls	r3, r3, #5
 800bab4:	4413      	add	r3, r2
 800bab6:	331d      	adds	r3, #29
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d03f      	beq.n	800bb3e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	015b      	lsls	r3, r3, #5
 800bac2:	4a2b      	ldr	r2, [pc, #172]	@ (800bb70 <prvNDCacheLookup+0xd8>)
 800bac4:	4413      	add	r3, r2
 800bac6:	68f9      	ldr	r1, [r7, #12]
 800bac8:	2210      	movs	r2, #16
 800baca:	4618      	mov	r0, r3
 800bacc:	f017 fa3d 	bl	8022f4a <memcmp>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d133      	bne.n	800bb3e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800bad6:	68b8      	ldr	r0, [r7, #8]
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	015b      	lsls	r3, r3, #5
 800badc:	3310      	adds	r3, #16
 800bade:	4a24      	ldr	r2, [pc, #144]	@ (800bb70 <prvNDCacheLookup+0xd8>)
 800bae0:	4413      	add	r3, r2
 800bae2:	2206      	movs	r2, #6
 800bae4:	4619      	mov	r1, r3
 800bae6:	f016 fa9b 	bl	8022020 <memcpy>
                eReturn = eARPCacheHit;
 800baea:	2301      	movs	r3, #1
 800baec:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800baf4:	4a1e      	ldr	r2, [pc, #120]	@ (800bb70 <prvNDCacheLookup+0xd8>)
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	015b      	lsls	r3, r3, #5
 800bafa:	4413      	add	r3, r2
 800bafc:	3318      	adds	r3, #24
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	461e      	mov	r6, r3
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	785b      	ldrb	r3, [r3, #1]
 800bb10:	4619      	mov	r1, r3
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	789b      	ldrb	r3, [r3, #2]
 800bb16:	4618      	mov	r0, r3
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	78db      	ldrb	r3, [r3, #3]
 800bb1c:	461c      	mov	r4, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	791b      	ldrb	r3, [r3, #4]
 800bb22:	461d      	mov	r5, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	795b      	ldrb	r3, [r3, #5]
 800bb28:	9304      	str	r3, [sp, #16]
 800bb2a:	9503      	str	r5, [sp, #12]
 800bb2c:	9402      	str	r4, [sp, #8]
 800bb2e:	9001      	str	r0, [sp, #4]
 800bb30:	9100      	str	r1, [sp, #0]
 800bb32:	4633      	mov	r3, r6
 800bb34:	6979      	ldr	r1, [r7, #20]
 800bb36:	480f      	ldr	r0, [pc, #60]	@ (800bb74 <prvNDCacheLookup+0xdc>)
 800bb38:	f016 f856 	bl	8021be8 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800bb3c:	e005      	b.n	800bb4a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	3301      	adds	r3, #1
 800bb42:	617b      	str	r3, [r7, #20]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2b17      	cmp	r3, #23
 800bb48:	ddb1      	ble.n	800baae <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800bb4a:	7cfb      	ldrb	r3, [r7, #19]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10a      	bne.n	800bb66 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4619      	mov	r1, r3
 800bb54:	4808      	ldr	r0, [pc, #32]	@ (800bb78 <prvNDCacheLookup+0xe0>)
 800bb56:	f016 f847 	bl	8021be8 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800bb66:	7cfb      	ldrb	r3, [r7, #19]
    }
 800bb68:	4618      	mov	r0, r3
 800bb6a:	371c      	adds	r7, #28
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb70:	20001064 	.word	0x20001064
 800bb74:	08024de0 	.word	0x08024de0
 800bb78:	08024e20 	.word	0x08024e20

0800bb7c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb8a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb90:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3316      	adds	r3, #22
 800bb9c:	2210      	movs	r2, #16
 800bb9e:	4619      	mov	r1, r3
 800bba0:	f016 fa3e 	bl	8022020 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f103 0016 	add.w	r0, r3, #22
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3338      	adds	r3, #56	@ 0x38
 800bbae:	2210      	movs	r2, #16
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	f016 fa35 	bl	8022020 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	0a1b      	lsrs	r3, r3, #8
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7fd fe46 	bl	8009878 <vReturnEthernetFrame>
    }
 800bbec:	bf00      	nop
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800bbf4:	b5b0      	push	{r4, r5, r7, lr}
 800bbf6:	b090      	sub	sp, #64	@ 0x40
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800bc10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 80c1 	beq.w	800bd9a <vNDSendNeighbourSolicitation+0x1a6>
 800bc18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc1a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bc1e:	f003 0304 	and.w	r3, r3, #4
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f000 80b8 	beq.w	800bd9a <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800bc2a:	2356      	movs	r3, #86	@ 0x56
 800bc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d909      	bls.n	800bc4c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800bc38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc3a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bc3c:	f7fe f9ce 	bl	8009fdc <pxDuplicateNetworkBufferWithDescriptor>
 800bc40:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800bc42:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bc44:	f00b f928 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800bc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80a3 	beq.w	800bd9a <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800bc54:	2320      	movs	r3, #32
 800bc56:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800bc58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc60:	3336      	adds	r3, #54	@ 0x36
 800bc62:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800bc64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc68:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800bc6a:	2333      	movs	r3, #51	@ 0x33
 800bc6c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800bc6e:	2333      	movs	r3, #51	@ 0x33
 800bc70:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800bc72:	23ff      	movs	r3, #255	@ 0xff
 800bc74:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	7b5b      	ldrb	r3, [r3, #13]
 800bc7a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	7b9b      	ldrb	r3, [r3, #14]
 800bc80:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	7bdb      	ldrb	r3, [r3, #15]
 800bc86:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8a:	3306      	adds	r3, #6
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	f107 0308 	add.w	r3, r7, #8
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	6010      	str	r0, [r2, #0]
 800bc96:	889b      	ldrh	r3, [r3, #4]
 800bc98:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bc9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc9e:	33e8      	adds	r3, #232	@ 0xe8
 800bca0:	2206      	movs	r2, #6
 800bca2:	4619      	mov	r1, r3
 800bca4:	f016 f9bc 	bl	8022020 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800bca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bcb0:	731a      	strb	r2, [r3, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bcb8:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800bcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbc:	2260      	movs	r2, #96	@ 0x60
 800bcbe:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc8:	2200      	movs	r2, #0
 800bcca:	741a      	strb	r2, [r3, #16]
 800bccc:	2200      	movs	r2, #0
 800bcce:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800bcd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcda:	0a1b      	lsrs	r3, r3, #8
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	223a      	movs	r2, #58	@ 0x3a
 800bcea:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcee:	22ff      	movs	r2, #255	@ 0xff
 800bcf0:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	f103 0016 	add.w	r0, r3, #22
 800bcf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfa:	3338      	adds	r3, #56	@ 0x38
 800bcfc:	2210      	movs	r2, #16
 800bcfe:	4619      	mov	r1, r3
 800bd00:	f016 f98e 	bl	8022020 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800bd04:	f107 0310 	add.w	r3, r7, #16
 800bd08:	2210      	movs	r2, #16
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f016 fa94 	bl	802223a <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800bd12:	23ff      	movs	r3, #255	@ 0xff
 800bd14:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800bd16:	2302      	movs	r3, #2
 800bd18:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800bd1e:	23ff      	movs	r3, #255	@ 0xff
 800bd20:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	7b5b      	ldrb	r3, [r3, #13]
 800bd26:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	7b9b      	ldrb	r3, [r3, #14]
 800bd2c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	7bdb      	ldrb	r3, [r3, #15]
 800bd32:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd36:	3326      	adds	r3, #38	@ 0x26
 800bd38:	461d      	mov	r5, r3
 800bd3a:	f107 0410 	add.w	r4, r7, #16
 800bd3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd40:	6028      	str	r0, [r5, #0]
 800bd42:	6069      	str	r1, [r5, #4]
 800bd44:	60aa      	str	r2, [r5, #8]
 800bd46:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800bd48:	2220      	movs	r2, #32
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	6a38      	ldr	r0, [r7, #32]
 800bd4e:	f016 fa74 	bl	802223a <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800bd52:	6a3b      	ldr	r3, [r7, #32]
 800bd54:	2287      	movs	r2, #135	@ 0x87
 800bd56:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	2210      	movs	r2, #16
 800bd60:	4618      	mov	r0, r3
 800bd62:	f016 f95d 	bl	8022020 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	f103 001a 	add.w	r0, r3, #26
 800bd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7a:	33e8      	adds	r3, #232	@ 0xe8
 800bd7c:	2206      	movs	r2, #6
 800bd7e:	4619      	mov	r1, r3
 800bd80:	f016 f94e 	bl	8022020 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	2200      	movs	r2, #0
 800bd88:	709a      	strb	r2, [r3, #2]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800bd8e:	2101      	movs	r1, #1
 800bd90:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bd92:	f7fd fd71 	bl	8009878 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800bd96:	2301      	movs	r3, #1
 800bd98:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800bd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d005      	beq.n	800bdac <vNDSendNeighbourSolicitation+0x1b8>
 800bda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800bda6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bda8:	f00b f876 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800bdac:	bf00      	nop
 800bdae:	3740      	adds	r7, #64	@ 0x40
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bdb0      	pop	{r4, r5, r7, pc}

0800bdb4 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b04      	cmp	r3, #4
 800bdc2:	dc29      	bgt.n	800be18 <pcMessageType+0x64>
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	dc19      	bgt.n	800bdfc <pcMessageType+0x48>
 800bdc8:	e049      	b.n	800be5e <pcMessageType+0xaa>
 800bdca:	3b80      	subs	r3, #128	@ 0x80
 800bdcc:	2b08      	cmp	r3, #8
 800bdce:	d846      	bhi.n	800be5e <pcMessageType+0xaa>
 800bdd0:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd8 <pcMessageType+0x24>)
 800bdd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd6:	bf00      	nop
 800bdd8:	0800be3b 	.word	0x0800be3b
 800bddc:	0800be41 	.word	0x0800be41
 800bde0:	0800be5f 	.word	0x0800be5f
 800bde4:	0800be5f 	.word	0x0800be5f
 800bde8:	0800be5f 	.word	0x0800be5f
 800bdec:	0800be47 	.word	0x0800be47
 800bdf0:	0800be4d 	.word	0x0800be4d
 800bdf4:	0800be53 	.word	0x0800be53
 800bdf8:	0800be59 	.word	0x0800be59
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d82d      	bhi.n	800be5e <pcMessageType+0xaa>
 800be02:	a201      	add	r2, pc, #4	@ (adr r2, 800be08 <pcMessageType+0x54>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be23 	.word	0x0800be23
 800be0c:	0800be29 	.word	0x0800be29
 800be10:	0800be2f 	.word	0x0800be2f
 800be14:	0800be35 	.word	0x0800be35
 800be18:	2b88      	cmp	r3, #136	@ 0x88
 800be1a:	dc20      	bgt.n	800be5e <pcMessageType+0xaa>
 800be1c:	2b80      	cmp	r3, #128	@ 0x80
 800be1e:	dad4      	bge.n	800bdca <pcMessageType+0x16>
 800be20:	e01d      	b.n	800be5e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800be22:	4b14      	ldr	r3, [pc, #80]	@ (800be74 <pcMessageType+0xc0>)
 800be24:	60fb      	str	r3, [r7, #12]
                    break;
 800be26:	e01d      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800be28:	4b13      	ldr	r3, [pc, #76]	@ (800be78 <pcMessageType+0xc4>)
 800be2a:	60fb      	str	r3, [r7, #12]
                    break;
 800be2c:	e01a      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800be2e:	4b13      	ldr	r3, [pc, #76]	@ (800be7c <pcMessageType+0xc8>)
 800be30:	60fb      	str	r3, [r7, #12]
                    break;
 800be32:	e017      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800be34:	4b12      	ldr	r3, [pc, #72]	@ (800be80 <pcMessageType+0xcc>)
 800be36:	60fb      	str	r3, [r7, #12]
                    break;
 800be38:	e014      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800be3a:	4b12      	ldr	r3, [pc, #72]	@ (800be84 <pcMessageType+0xd0>)
 800be3c:	60fb      	str	r3, [r7, #12]
                    break;
 800be3e:	e011      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800be40:	4b11      	ldr	r3, [pc, #68]	@ (800be88 <pcMessageType+0xd4>)
 800be42:	60fb      	str	r3, [r7, #12]
                    break;
 800be44:	e00e      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800be46:	4b11      	ldr	r3, [pc, #68]	@ (800be8c <pcMessageType+0xd8>)
 800be48:	60fb      	str	r3, [r7, #12]
                    break;
 800be4a:	e00b      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800be4c:	4b10      	ldr	r3, [pc, #64]	@ (800be90 <pcMessageType+0xdc>)
 800be4e:	60fb      	str	r3, [r7, #12]
                    break;
 800be50:	e008      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800be52:	4b10      	ldr	r3, [pc, #64]	@ (800be94 <pcMessageType+0xe0>)
 800be54:	60fb      	str	r3, [r7, #12]
                    break;
 800be56:	e005      	b.n	800be64 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800be58:	4b0f      	ldr	r3, [pc, #60]	@ (800be98 <pcMessageType+0xe4>)
 800be5a:	60fb      	str	r3, [r7, #12]
                    break;
 800be5c:	e002      	b.n	800be64 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800be5e:	4b0f      	ldr	r3, [pc, #60]	@ (800be9c <pcMessageType+0xe8>)
 800be60:	60fb      	str	r3, [r7, #12]
                    break;
 800be62:	bf00      	nop
            }

            return pcReturn;
 800be64:	68fb      	ldr	r3, [r7, #12]
        }
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	08024ee8 	.word	0x08024ee8
 800be78:	08024efc 	.word	0x08024efc
 800be7c:	08024f0c 	.word	0x08024f0c
 800be80:	08024f1c 	.word	0x08024f1c
 800be84:	08024f30 	.word	0x08024f30
 800be88:	08024f40 	.word	0x08024f40
 800be8c:	08024f4c 	.word	0x08024f4c
 800be90:	08024f58 	.word	0x08024f58
 800be94:	08024f64 	.word	0x08024f64
 800be98:	08024f74 	.word	0x08024f74
 800be9c:	08024f84 	.word	0x08024f84

0800bea0 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800bea8:	4b19      	ldr	r3, [pc, #100]	@ (800bf10 <prvCheckWaitingBuffer+0x70>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beae:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	330e      	adds	r3, #14
 800beb4:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	3308      	adds	r3, #8
 800bebc:	2210      	movs	r2, #16
 800bebe:	4619      	mov	r1, r3
 800bec0:	f017 f843 	bl	8022f4a <memcmp>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d11d      	bne.n	800bf06 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800beca:	2300      	movs	r3, #0
 800becc:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800bece:	4811      	ldr	r0, [pc, #68]	@ (800bf14 <prvCheckWaitingBuffer+0x74>)
 800bed0:	f015 fe8a 	bl	8021be8 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800bed4:	2301      	movs	r3, #1
 800bed6:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800bed8:	4b0d      	ldr	r3, [pc, #52]	@ (800bf10 <prvCheckWaitingBuffer+0x70>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800bede:	f107 030c 	add.w	r3, r7, #12
 800bee2:	6979      	ldr	r1, [r7, #20]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fd fa13 	bl	8009310 <xSendEventStructToIPTask>
 800beea:	4603      	mov	r3, r0
 800beec:	2b01      	cmp	r3, #1
 800beee:	d004      	beq.n	800befa <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800bef0:	4b07      	ldr	r3, [pc, #28]	@ (800bf10 <prvCheckWaitingBuffer+0x70>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f00a ffcf 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800befa:	4b05      	ldr	r3, [pc, #20]	@ (800bf10 <prvCheckWaitingBuffer+0x70>)
 800befc:	2200      	movs	r2, #0
 800befe:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800bf00:	2000      	movs	r0, #0
 800bf02:	f7fd fffb 	bl	8009efc <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800bf06:	bf00      	nop
 800bf08:	3720      	adds	r7, #32
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	20000fd8 	.word	0x20000fd8
 800bf14:	08024f94 	.word	0x08024f94

0800bf18 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1c:	b09e      	sub	sp, #120	@ 0x78
 800bf1e:	af02      	add	r7, sp, #8
 800bf20:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf26:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bf28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf2a:	3336      	adds	r3, #54	@ 0x36
 800bf2c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf32:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800bf34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b80      	cmp	r3, #128	@ 0x80
 800bf3a:	d01e      	beq.n	800bf7a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800bf3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	4698      	mov	r8, r3
 800bf42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff ff34 	bl	800bdb4 <pcMessageType>
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf50:	f103 0516 	add.w	r5, r3, #22
 800bf54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf56:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800bf5a:	f107 030c 	add.w	r3, r7, #12
 800bf5e:	2228      	movs	r2, #40	@ 0x28
 800bf60:	4619      	mov	r1, r3
 800bf62:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bf64:	f001 fd5c 	bl	800da20 <pcEndpointName>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	9400      	str	r4, [sp, #0]
 800bf6e:	462b      	mov	r3, r5
 800bf70:	4632      	mov	r2, r6
 800bf72:	4641      	mov	r1, r8
 800bf74:	48a7      	ldr	r0, [pc, #668]	@ (800c214 <prvProcessICMPMessage_IPv6+0x2fc>)
 800bf76:	f015 fe37 	bl	8021be8 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800bf7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf7c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f000 813e 	beq.w	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bf8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	dc1d      	bgt.n	800bfd0 <prvProcessICMPMessage_IPv6+0xb8>
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f300 8130 	bgt.w	800c1fa <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800bf9a:	e130      	b.n	800c1fe <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bf9c:	3b80      	subs	r3, #128	@ 0x80
 800bf9e:	2b08      	cmp	r3, #8
 800bfa0:	f200 812d 	bhi.w	800c1fe <prvProcessICMPMessage_IPv6+0x2e6>
 800bfa4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfac <prvProcessICMPMessage_IPv6+0x94>)
 800bfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfaa:	bf00      	nop
 800bfac:	0800bfdd 	.word	0x0800bfdd
 800bfb0:	0800c025 	.word	0x0800c025
 800bfb4:	0800c1ff 	.word	0x0800c1ff
 800bfb8:	0800c1ff 	.word	0x0800c1ff
 800bfbc:	0800c1ff 	.word	0x0800c1ff
 800bfc0:	0800c1ff 	.word	0x0800c1ff
 800bfc4:	0800c1f3 	.word	0x0800c1f3
 800bfc8:	0800c09b 	.word	0x0800c09b
 800bfcc:	0800c1ab 	.word	0x0800c1ab
 800bfd0:	2b88      	cmp	r3, #136	@ 0x88
 800bfd2:	f300 8114 	bgt.w	800c1fe <prvProcessICMPMessage_IPv6+0x2e6>
 800bfd6:	2b80      	cmp	r3, #128	@ 0x80
 800bfd8:	dae0      	bge.n	800bf9c <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800bfda:	e110      	b.n	800c1fe <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800bfdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfde:	8a5b      	ldrh	r3, [r3, #18]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	021b      	lsls	r3, r3, #8
 800bfe4:	b21a      	sxth	r2, r3
 800bfe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfe8:	8a5b      	ldrh	r3, [r3, #18]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	0a1b      	lsrs	r3, r3, #8
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	b21b      	sxth	r3, r3
 800bff2:	4313      	orrs	r3, r2
 800bff4:	b21b      	sxth	r3, r3
 800bff6:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800bff8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bffa:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bffe:	3336      	adds	r3, #54	@ 0x36
 800c000:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c008:	429a      	cmp	r2, r3
 800c00a:	d903      	bls.n	800c014 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c00c:	4882      	ldr	r0, [pc, #520]	@ (800c218 <prvProcessICMPMessage_IPv6+0x300>)
 800c00e:	f015 fdeb 	bl	8021be8 <lUDPLoggingPrintf>
                           break;
 800c012:	e0f9      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800c014:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c016:	2281      	movs	r2, #129	@ 0x81
 800c018:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c01a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fdad 	bl	800bb7c <prvReturnICMP_IPv6>
                   break;
 800c022:	e0f1      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800c024:	2300      	movs	r3, #0
 800c026:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800c02a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c02c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800c02e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c030:	8a5b      	ldrh	r3, [r3, #18]
 800c032:	b29b      	uxth	r3, r3
 800c034:	021b      	lsls	r3, r3, #8
 800c036:	b21a      	sxth	r2, r3
 800c038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c03a:	8a5b      	ldrh	r3, [r3, #18]
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	0a1b      	lsrs	r3, r3, #8
 800c040:	b29b      	uxth	r3, r3
 800c042:	b21b      	sxth	r3, r3
 800c044:	4313      	orrs	r3, r2
 800c046:	b21b      	sxth	r3, r3
 800c048:	b29b      	uxth	r3, r3
 800c04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800c04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c04e:	3b08      	subs	r3, #8
 800c050:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800c052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c054:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800c056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c058:	3308      	adds	r3, #8
 800c05a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c05c:	2300      	movs	r3, #0
 800c05e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c060:	e00d      	b.n	800c07e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800c062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b78      	cmp	r3, #120	@ 0x78
 800c068:	d003      	beq.n	800c072 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800c06a:	2302      	movs	r3, #2
 800c06c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800c070:	e009      	b.n	800c086 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800c072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c074:	3301      	adds	r3, #1
 800c076:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c07a:	3301      	adds	r3, #1
 800c07c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c07e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c082:	429a      	cmp	r2, r3
 800c084:	d3ed      	bcc.n	800c062 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800c086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c088:	889b      	ldrh	r3, [r3, #4]
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7f5 fc20 	bl	80018d8 <vApplicationPingReplyHook>
                           break;
 800c098:	e0b6      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800c09a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c09c:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0a4:	3308      	adds	r3, #8
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	f001 f9cd 	bl	800d448 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800c0ae:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800c0b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800c0b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c0ba:	e005      	b.n	800c0c8 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800c0bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0be:	3308      	adds	r3, #8
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4856      	ldr	r0, [pc, #344]	@ (800c21c <prvProcessICMPMessage_IPv6+0x304>)
 800c0c4:	f015 fd90 	bl	8021be8 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c0c8:	2320      	movs	r3, #32
 800c0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ce:	3336      	adds	r3, #54	@ 0x36
 800c0d0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d903      	bls.n	800c0e4 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c0dc:	484e      	ldr	r0, [pc, #312]	@ (800c218 <prvProcessICMPMessage_IPv6+0x300>)
 800c0de:	f015 fd83 	bl	8021be8 <lUDPLoggingPrintf>
                           break;
 800c0e2:	e091      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c0e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0e6:	f103 0008 	add.w	r0, r3, #8
 800c0ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0ec:	3338      	adds	r3, #56	@ 0x38
 800c0ee:	2210      	movs	r2, #16
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	f016 ff2a 	bl	8022f4a <memcmp>
 800c0f6:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800c0f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0fa:	f103 0108 	add.w	r1, r3, #8
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c102:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <prvProcessICMPMessage_IPv6+0x1f8>
 800c10c:	4b44      	ldr	r3, [pc, #272]	@ (800c220 <prvProcessICMPMessage_IPv6+0x308>)
 800c10e:	e000      	b.n	800c112 <prvProcessICMPMessage_IPv6+0x1fa>
 800c110:	4b44      	ldr	r3, [pc, #272]	@ (800c224 <prvProcessICMPMessage_IPv6+0x30c>)
 800c112:	4845      	ldr	r0, [pc, #276]	@ (800c228 <prvProcessICMPMessage_IPv6+0x310>)
 800c114:	f015 fd68 	bl	8021be8 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800c118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d171      	bne.n	800c202 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c11e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c120:	2288      	movs	r2, #136	@ 0x88
 800c122:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800c124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c126:	2200      	movs	r2, #0
 800c128:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c12a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c12c:	2200      	movs	r2, #0
 800c12e:	711a      	strb	r2, [r3, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	715a      	strb	r2, [r3, #5]
 800c134:	2200      	movs	r2, #0
 800c136:	719a      	strb	r2, [r3, #6]
 800c138:	2200      	movs	r2, #0
 800c13a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c13e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c140:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	061a      	lsls	r2, r3, #24
 800c146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	021b      	lsls	r3, r3, #8
 800c14c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c150:	431a      	orrs	r2, r3
 800c152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	0a1b      	lsrs	r3, r3, #8
 800c158:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c15c:	431a      	orrs	r2, r3
 800c15e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	0e1b      	lsrs	r3, r3, #24
 800c164:	431a      	orrs	r2, r3
 800c166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c168:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c16a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c16c:	2202      	movs	r2, #2
 800c16e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800c170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c172:	2201      	movs	r2, #1
 800c174:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c178:	f103 001a 	add.w	r0, r3, #26
 800c17c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c17e:	33e8      	adds	r3, #232	@ 0xe8
 800c180:	2206      	movs	r2, #6
 800c182:	4619      	mov	r1, r3
 800c184:	f015 ff4c 	bl	8022020 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c18a:	22ff      	movs	r2, #255	@ 0xff
 800c18c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c18e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c190:	f103 0008 	add.w	r0, r3, #8
 800c194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c196:	3338      	adds	r3, #56	@ 0x38
 800c198:	2210      	movs	r2, #16
 800c19a:	4619      	mov	r1, r3
 800c19c:	f015 ff40 	bl	8022020 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c1a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff fcea 	bl	800bb7c <prvReturnICMP_IPv6>
                   break;
 800c1a8:	e02b      	b.n	800c202 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c1aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1ac:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800c1b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1b2:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c1b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	f7ff fb5e 	bl	800b878 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800c1bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1be:	3308      	adds	r3, #8
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	481a      	ldr	r0, [pc, #104]	@ (800c22c <prvProcessICMPMessage_IPv6+0x314>)
 800c1c4:	f015 fd10 	bl	8021be8 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fa89 	bl	800c6e0 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800c1ce:	4b18      	ldr	r3, [pc, #96]	@ (800c230 <prvProcessICMPMessage_IPv6+0x318>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d017      	beq.n	800c206 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800c1d6:	4b16      	ldr	r3, [pc, #88]	@ (800c230 <prvProcessICMPMessage_IPv6+0x318>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fd fc4c 	bl	8009a78 <uxIPHeaderSizePacket>
 800c1e0:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800c1e2:	2b28      	cmp	r3, #40	@ 0x28
 800c1e4:	d10f      	bne.n	800c206 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c1e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7ff fe58 	bl	800bea0 <prvCheckWaitingBuffer>
                    break;
 800c1f0:	e009      	b.n	800c206 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fb9a 	bl	800c92c <vReceiveRA>
                            break;
 800c1f8:	e006      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c1fa:	bf00      	nop
 800c1fc:	e004      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c1fe:	bf00      	nop
 800c200:	e002      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800c202:	bf00      	nop
 800c204:	e000      	b.n	800c208 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c206:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800c208:	2300      	movs	r3, #0
    }
 800c20a:	4618      	mov	r0, r3
 800c20c:	3770      	adds	r7, #112	@ 0x70
 800c20e:	46bd      	mov	sp, r7
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	08024fa4 	.word	0x08024fa4
 800c218:	08024fdc 	.word	0x08024fdc
 800c21c:	08024fe8 	.word	0x08024fe8
 800c220:	08025018 	.word	0x08025018
 800c224:	08025020 	.word	0x08025020
 800c228:	08025028 	.word	0x08025028
 800c22c:	0802504c 	.word	0x0802504c
 800c230:	20000fd8 	.word	0x20000fd8

0800c234 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800c234:	b5b0      	push	{r4, r5, r7, lr}
 800c236:	b088      	sub	sp, #32
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c23c:	2356      	movs	r3, #86	@ 0x56
 800c23e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800c240:	2100      	movs	r1, #0
 800c242:	69f8      	ldr	r0, [r7, #28]
 800c244:	f00a fdc0 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 800c248:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 80b1 	beq.w	800c3b4 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	3314      	adds	r3, #20
 800c256:	2210      	movs	r2, #16
 800c258:	2100      	movs	r1, #0
 800c25a:	4618      	mov	r0, r3
 800c25c:	f015 ffed 	bl	802223a <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c26c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d104      	bne.n	800c27e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800c274:	f240 419e 	movw	r1, #1182	@ 0x49e
 800c278:	4850      	ldr	r0, [pc, #320]	@ (800c3bc <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800c27a:	f7f5 fa77 	bl	800176c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c282:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3336      	adds	r3, #54	@ 0x36
 800c288:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	4a4c      	ldr	r2, [pc, #304]	@ (800c3c0 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800c28e:	6810      	ldr	r0, [r2, #0]
 800c290:	6018      	str	r0, [r3, #0]
 800c292:	8892      	ldrh	r2, [r2, #4]
 800c294:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	1d98      	adds	r0, r3, #6
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	33e8      	adds	r3, #232	@ 0xe8
 800c29e:	2206      	movs	r2, #6
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	f015 febd 	bl	8022020 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c2ae:	731a      	strb	r2, [r3, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c2b6:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	2260      	movs	r2, #96	@ 0x60
 800c2bc:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	741a      	strb	r2, [r3, #16]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	749a      	strb	r2, [r3, #18]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f042 0220 	orr.w	r2, r2, #32
 800c2da:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	223a      	movs	r2, #58	@ 0x3a
 800c2e0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	22ff      	movs	r2, #255	@ 0xff
 800c2e6:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f103 0016 	add.w	r0, r3, #22
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3338      	adds	r3, #56	@ 0x38
 800c2f2:	2210      	movs	r2, #16
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	f015 fe93 	bl	8022020 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	3326      	adds	r3, #38	@ 0x26
 800c2fe:	4a31      	ldr	r2, [pc, #196]	@ (800c3c4 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800c300:	461c      	mov	r4, r3
 800c302:	4615      	mov	r5, r2
 800c304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c306:	6020      	str	r0, [r4, #0]
 800c308:	6061      	str	r1, [r4, #4]
 800c30a:	60a2      	str	r2, [r4, #8]
 800c30c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c30e:	2320      	movs	r3, #32
 800c310:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2288      	movs	r2, #136	@ 0x88
 800c316:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	711a      	strb	r2, [r3, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	715a      	strb	r2, [r3, #5]
 800c328:	2200      	movs	r2, #0
 800c32a:	719a      	strb	r2, [r3, #6]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c332:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	061a      	lsls	r2, r3, #24
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	021b      	lsls	r3, r3, #8
 800c340:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c344:	431a      	orrs	r2, r3
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	0a1b      	lsrs	r3, r3, #8
 800c34c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c350:	431a      	orrs	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	0e1b      	lsrs	r3, r3, #24
 800c358:	431a      	orrs	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2202      	movs	r2, #2
 800c362:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2201      	movs	r2, #1
 800c368:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f103 001a 	add.w	r0, r3, #26
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	33e8      	adds	r3, #232	@ 0xe8
 800c374:	2206      	movs	r2, #6
 800c376:	4619      	mov	r1, r3
 800c378:	f015 fe52 	bl	8022020 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	22ff      	movs	r2, #255	@ 0xff
 800c380:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f103 0008 	add.w	r0, r3, #8
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3338      	adds	r3, #56	@ 0x38
 800c38c:	2210      	movs	r2, #16
 800c38e:	4619      	mov	r1, r3
 800c390:	f015 fe46 	bl	8022020 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	709a      	strb	r2, [r3, #2]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	69b9      	ldr	r1, [r7, #24]
 800c3b0:	6978      	ldr	r0, [r7, #20]
 800c3b2:	4798      	blx	r3
        }
    }
 800c3b4:	bf00      	nop
 800c3b6:	3720      	adds	r7, #32
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bdb0      	pop	{r4, r5, r7, pc}
 800c3bc:	08025064 	.word	0x08025064
 800c3c0:	080272dc 	.word	0x080272dc
 800c3c4:	080272cc 	.word	0x080272cc

0800c3c8 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b090      	sub	sp, #64	@ 0x40
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d017      	beq.n	800c410 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3e4:	e010      	b.n	800c408 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800c3e6:	f107 0214 	add.w	r2, r7, #20
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7f5 fa85 	bl	8001900 <xApplicationGetRandomNumber>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800c400:	e00d      	b.n	800c41e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c404:	3301      	adds	r3, #1
 800c406:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	ddeb      	ble.n	800c3e6 <FreeRTOS_CreateIPv6Address+0x1e>
 800c40e:	e006      	b.n	800c41e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800c410:	f107 0314 	add.w	r3, r7, #20
 800c414:	2210      	movs	r2, #16
 800c416:	2100      	movs	r1, #0
 800c418:	4618      	mov	r0, r3
 800c41a:	f015 ff0e 	bl	802223a <memset>
        }

        if( xResult == pdPASS )
 800c41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c420:	2b01      	cmp	r3, #1
 800c422:	d167      	bne.n	800c4f4 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d004      	beq.n	800c434 <FreeRTOS_CreateIPv6Address+0x6c>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b80      	cmp	r3, #128	@ 0x80
 800c42e:	d801      	bhi.n	800c434 <FreeRTOS_CreateIPv6Address+0x6c>
 800c430:	2301      	movs	r3, #1
 800c432:	e000      	b.n	800c436 <FreeRTOS_CreateIPv6Address+0x6e>
 800c434:	2300      	movs	r3, #0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d104      	bne.n	800c444 <FreeRTOS_CreateIPv6Address+0x7c>
 800c43a:	f240 5105 	movw	r1, #1285	@ 0x505
 800c43e:	4830      	ldr	r0, [pc, #192]	@ (800c500 <FreeRTOS_CreateIPv6Address+0x138>)
 800c440:	f7f5 f994 	bl	800176c <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b07      	cmp	r3, #7
 800c448:	d907      	bls.n	800c45a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	68b9      	ldr	r1, [r7, #8]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	3307      	adds	r3, #7
 800c452:	08db      	lsrs	r3, r3, #3
 800c454:	461a      	mov	r2, r3
 800c456:	f015 fde3 	bl	8022020 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800c45a:	f107 0314 	add.w	r3, r7, #20
 800c45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	08db      	lsrs	r3, r3, #3
 800c464:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f003 0307 	and.w	r3, r3, #7
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d034      	beq.n	800c4da <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f003 0307 	and.w	r3, r3, #7
 800c476:	f1c3 0308 	rsb	r3, r3, #8
 800c47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800c47c:	2201      	movs	r2, #1
 800c47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c480:	fa02 f303 	lsl.w	r3, r2, r3
 800c484:	3b01      	subs	r3, #1
 800c486:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800c488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	43db      	mvns	r3, r3
 800c48e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c496:	4413      	add	r3, r2
 800c498:	781a      	ldrb	r2, [r3, #0]
 800c49a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c49e:	4013      	ands	r3, r2
 800c4a0:	b2d9      	uxtb	r1, r3
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a6:	4413      	add	r3, r2
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b0:	4413      	add	r3, r2
 800c4b2:	781a      	ldrb	r2, [r3, #0]
 800c4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4b6:	7819      	ldrb	r1, [r3, #0]
 800c4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	400b      	ands	r3, r1
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	b2d9      	uxtb	r1, r3
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	4413      	add	r3, r2
 800c4ca:	460a      	mov	r2, r1
 800c4cc:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800c4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4dc:	2b0f      	cmp	r3, #15
 800c4de:	d809      	bhi.n	800c4f4 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	18d0      	adds	r0, r2, r3
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e8:	f1c3 0310 	rsb	r3, r3, #16
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4f0:	f015 fd96 	bl	8022020 <memcpy>
            }
        }

        return xResult;
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3740      	adds	r7, #64	@ 0x40
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	08025064 	.word	0x08025064

0800c504 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fe48 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800c518:	60b8      	str	r0, [r7, #8]
 800c51a:	e01a      	b.n	800c552 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c522:	2bfe      	cmp	r3, #254	@ 0xfe
 800c524:	d110      	bne.n	800c548 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c52c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c530:	2b80      	cmp	r3, #128	@ 0x80
 800c532:	d109      	bne.n	800c548 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c534:	6838      	ldr	r0, [r7, #0]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	3338      	adds	r3, #56	@ 0x38
 800c53a:	2210      	movs	r2, #16
 800c53c:	4619      	mov	r1, r3
 800c53e:	f015 fd6f 	bl	8022020 <memcpy>
                xResult = pdPASS;
 800c542:	2301      	movs	r3, #1
 800c544:	60fb      	str	r3, [r7, #12]
                break;
 800c546:	e007      	b.n	800c558 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800c548:	68b9      	ldr	r1, [r7, #8]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fe4e 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800c550:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1e1      	bne.n	800c51c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800c558:	68fb      	ldr	r3, [r7, #12]
    }
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800c564:	b5b0      	push	{r4, r5, r7, lr}
 800c566:	b090      	sub	sp, #64	@ 0x40
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c572:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c574:	233e      	movs	r3, #62	@ 0x3e
 800c576:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c57c:	2300      	movs	r3, #0
 800c57e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800c580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c582:	2b00      	cmp	r3, #0
 800c584:	d103      	bne.n	800c58e <vNDSendRouterSolicitation+0x2a>
 800c586:	218f      	movs	r1, #143	@ 0x8f
 800c588:	4852      	ldr	r0, [pc, #328]	@ (800c6d4 <vNDSendRouterSolicitation+0x170>)
 800c58a:	f7f5 f8ef 	bl	800176c <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800c58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c590:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d103      	bne.n	800c5a6 <vNDSendRouterSolicitation+0x42>
 800c59e:	2190      	movs	r1, #144	@ 0x90
 800c5a0:	484c      	ldr	r0, [pc, #304]	@ (800c6d4 <vNDSendRouterSolicitation+0x170>)
 800c5a2:	f7f5 f8e3 	bl	800176c <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c5ac:	f107 020c 	add.w	r2, r7, #12
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff ffa6 	bl	800c504 <xGetLinkLocalAddress>
 800c5b8:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800c5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800c5c0:	4845      	ldr	r0, [pc, #276]	@ (800c6d8 <vNDSendRouterSolicitation+0x174>)
 800c5c2:	f015 fb11 	bl	8021be8 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c5c6:	f107 030c 	add.w	r3, r7, #12
 800c5ca:	2210      	movs	r2, #16
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f015 fe33 	bl	802223a <memset>
 800c5d4:	e005      	b.n	800c5e2 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800c5d6:	f107 030c 	add.w	r3, r7, #12
 800c5da:	4619      	mov	r1, r3
 800c5dc:	483f      	ldr	r0, [pc, #252]	@ (800c6dc <vNDSendRouterSolicitation+0x178>)
 800c5de:	f015 fb03 	bl	8021be8 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800c5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d909      	bls.n	800c600 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c5ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c5ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5f0:	f7fd fcf4 	bl	8009fdc <pxDuplicateNetworkBufferWithDescriptor>
 800c5f4:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c5f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5f8:	f00a fc4e 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800c600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c602:	2b00      	cmp	r3, #0
 800c604:	d062      	beq.n	800c6cc <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c60a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60e:	3336      	adds	r3, #54	@ 0x36
 800c610:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800c612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c614:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c616:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800c618:	f107 031c 	add.w	r3, r7, #28
 800c61c:	2200      	movs	r2, #0
 800c61e:	4619      	mov	r1, r3
 800c620:	6838      	ldr	r0, [r7, #0]
 800c622:	f7ff f87b 	bl	800b71c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c628:	3306      	adds	r3, #6
 800c62a:	461a      	mov	r2, r3
 800c62c:	f107 031c 	add.w	r3, r7, #28
 800c630:	6818      	ldr	r0, [r3, #0]
 800c632:	6010      	str	r0, [r2, #0]
 800c634:	889b      	ldrh	r3, [r3, #4]
 800c636:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63c:	33e8      	adds	r3, #232	@ 0xe8
 800c63e:	2206      	movs	r2, #6
 800c640:	4619      	mov	r1, r3
 800c642:	f015 fced 	bl	8022020 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	2200      	movs	r2, #0
 800c64a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c64e:	731a      	strb	r2, [r3, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c656:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	2260      	movs	r2, #96	@ 0x60
 800c65c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c660:	2200      	movs	r2, #0
 800c662:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c666:	2200      	movs	r2, #0
 800c668:	741a      	strb	r2, [r3, #16]
 800c66a:	2200      	movs	r2, #0
 800c66c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800c66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c670:	2200      	movs	r2, #0
 800c672:	749a      	strb	r2, [r3, #18]
 800c674:	2200      	movs	r2, #0
 800c676:	f042 0208 	orr.w	r2, r2, #8
 800c67a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67e:	223a      	movs	r2, #58	@ 0x3a
 800c680:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	22ff      	movs	r2, #255	@ 0xff
 800c686:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68a:	3316      	adds	r3, #22
 800c68c:	461d      	mov	r5, r3
 800c68e:	f107 040c 	add.w	r4, r7, #12
 800c692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c694:	6028      	str	r0, [r5, #0]
 800c696:	6069      	str	r1, [r5, #4]
 800c698:	60aa      	str	r2, [r5, #8]
 800c69a:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69e:	3326      	adds	r3, #38	@ 0x26
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	2210      	movs	r2, #16
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f015 fcbb 	bl	8022020 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800c6aa:	2208      	movs	r2, #8
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6b0:	f015 fdc3 	bl	802223a <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b6:	2285      	movs	r2, #133	@ 0x85
 800c6b8:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6bc:	2200      	movs	r2, #0
 800c6be:	709a      	strb	r2, [r3, #2]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c6c8:	f7fd f8d6 	bl	8009878 <vReturnEthernetFrame>
        }
    }
 800c6cc:	bf00      	nop
 800c6ce:	3740      	adds	r7, #64	@ 0x40
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d4:	08025090 	.word	0x08025090
 800c6d8:	080250bc 	.word	0x080250bc
 800c6dc:	080250e4 	.word	0x080250e4

0800c6e0 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ec:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f2:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	3336      	adds	r3, #54	@ 0x36
 800c6f8:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c6fa:	6938      	ldr	r0, [r7, #16]
 800c6fc:	f000 fd54 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800c700:	6178      	str	r0, [r7, #20]
 800c702:	e028      	b.n	800c756 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b00      	cmp	r3, #0
 800c712:	d01b      	beq.n	800c74c <vReceiveNA+0x6c>
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d116      	bne.n	800c74c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	3308      	adds	r3, #8
 800c728:	2210      	movs	r2, #16
 800c72a:	4619      	mov	r1, r3
 800c72c:	f016 fc0d 	bl	8022f4a <memcmp>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c73c:	f043 0302 	orr.w	r3, r3, #2
 800c740:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800c744:	2164      	movs	r1, #100	@ 0x64
 800c746:	6978      	ldr	r0, [r7, #20]
 800c748:	f7fd fb3e 	bl	8009dc8 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800c74c:	6979      	ldr	r1, [r7, #20]
 800c74e:	6938      	ldr	r0, [r7, #16]
 800c750:	f000 fd4c 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800c754:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1d3      	bne.n	800c704 <vReceiveNA+0x24>
                }
            }
        }
    }
 800c75c:	bf00      	nop
 800c75e:	bf00      	nop
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
	...

0800c768 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76a:	b091      	sub	sp, #68	@ 0x44
 800c76c:	af04      	add	r7, sp, #16
 800c76e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800c770:	2300      	movs	r3, #0
 800c772:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c774:	2310      	movs	r3, #16
 800c776:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	3336      	adds	r3, #54	@ 0x36
 800c77c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	4413      	add	r3, r2
 800c790:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800c796:	e0b2      	b.n	800c8fe <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79c:	4413      	add	r3, r2
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800c7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d103      	bne.n	800c7c2 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800c7ba:	4856      	ldr	r0, [pc, #344]	@ (800c914 <vReceiveRA_ReadReply+0x1ac>)
 800c7bc:	f015 fa14 	bl	8021be8 <lUDPLoggingPrintf>
                break;
 800c7c0:	e0a3      	b.n	800c90a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800c7c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	69fa      	ldr	r2, [r7, #28]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d208      	bcs.n	800c7e0 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800c7ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	484f      	ldr	r0, [pc, #316]	@ (800c918 <vReceiveRA_ReadReply+0x1b0>)
 800c7da:	f015 fa05 	bl	8021be8 <lUDPLoggingPrintf>
                break;
 800c7de:	e094      	b.n	800c90a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	d87f      	bhi.n	800c8e8 <vReceiveRA_ReadReply+0x180>
 800c7e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7f0 <vReceiveRA_ReadReply+0x88>)
 800c7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ee:	bf00      	nop
 800c7f0:	0800c805 	.word	0x0800c805
 800c7f4:	0800c8f5 	.word	0x0800c8f5
 800c7f8:	0800c85f 	.word	0x0800c85f
 800c7fc:	0800c8f5 	.word	0x0800c8f5
 800c800:	0800c8cf 	.word	0x0800c8cf
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800c804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c806:	3302      	adds	r3, #2
 800c808:	69ba      	ldr	r2, [r7, #24]
 800c80a:	4413      	add	r3, r2
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	461c      	mov	r4, r3
 800c810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c812:	3303      	adds	r3, #3
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	4413      	add	r3, r2
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	461d      	mov	r5, r3
 800c81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81e:	3304      	adds	r3, #4
 800c820:	69ba      	ldr	r2, [r7, #24]
 800c822:	4413      	add	r3, r2
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	461e      	mov	r6, r3
 800c828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82a:	3305      	adds	r3, #5
 800c82c:	69ba      	ldr	r2, [r7, #24]
 800c82e:	4413      	add	r3, r2
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	4619      	mov	r1, r3
 800c834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c836:	3306      	adds	r3, #6
 800c838:	69ba      	ldr	r2, [r7, #24]
 800c83a:	4413      	add	r3, r2
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	4618      	mov	r0, r3
 800c840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c842:	3307      	adds	r3, #7
 800c844:	69ba      	ldr	r2, [r7, #24]
 800c846:	4413      	add	r3, r2
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	9302      	str	r3, [sp, #8]
 800c84c:	9001      	str	r0, [sp, #4]
 800c84e:	9100      	str	r1, [sp, #0]
 800c850:	4633      	mov	r3, r6
 800c852:	462a      	mov	r2, r5
 800c854:	4621      	mov	r1, r4
 800c856:	4831      	ldr	r0, [pc, #196]	@ (800c91c <vReceiveRA_ReadReply+0x1b4>)
 800c858:	f015 f9c6 	bl	8021be8 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800c85c:	e04b      	b.n	800c8f6 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c862:	4413      	add	r3, r2
 800c864:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800c866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c868:	789b      	ldrb	r3, [r3, #2]
 800c86a:	4618      	mov	r0, r3
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	061a      	lsls	r2, r3, #24
 800c872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	021b      	lsls	r3, r3, #8
 800c878:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c87c:	431a      	orrs	r2, r3
 800c87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	0a1b      	lsrs	r3, r3, #8
 800c884:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c888:	431a      	orrs	r2, r3
 800c88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	0e1b      	lsrs	r3, r3, #24
 800c890:	ea42 0103 	orr.w	r1, r2, r3
 800c894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	061a      	lsls	r2, r3, #24
 800c89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	021b      	lsls	r3, r3, #8
 800c8a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c8a4:	431a      	orrs	r2, r3
 800c8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	0a1b      	lsrs	r3, r3, #8
 800c8ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	0e1b      	lsrs	r3, r3, #24
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8bc:	3310      	adds	r3, #16
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	460a      	mov	r2, r1
 800c8c4:	4601      	mov	r1, r0
 800c8c6:	4816      	ldr	r0, [pc, #88]	@ (800c920 <vReceiveRA_ReadReply+0x1b8>)
 800c8c8:	f015 f98e 	bl	8021be8 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800c8cc:	e013      	b.n	800c8f6 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800c8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	69ba      	ldr	r2, [r7, #24]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fd fe60 	bl	800a59c <ulChar2u32>
 800c8dc:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800c8de:	68b9      	ldr	r1, [r7, #8]
 800c8e0:	4810      	ldr	r0, [pc, #64]	@ (800c924 <vReceiveRA_ReadReply+0x1bc>)
 800c8e2:	f015 f981 	bl	8021be8 <lUDPLoggingPrintf>
                   }
                   break;
 800c8e6:	e006      	b.n	800c8f6 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800c8e8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	480e      	ldr	r0, [pc, #56]	@ (800c928 <vReceiveRA_ReadReply+0x1c0>)
 800c8ee:	f015 f97b 	bl	8021be8 <lUDPLoggingPrintf>
                    break;
 800c8f2:	e000      	b.n	800c8f6 <vReceiveRA_ReadReply+0x18e>
                    break;
 800c8f4:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800c8f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800c8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c900:	3301      	adds	r3, #1
 800c902:	69fa      	ldr	r2, [r7, #28]
 800c904:	429a      	cmp	r2, r3
 800c906:	f63f af47 	bhi.w	800c798 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800c90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800c90c:	4618      	mov	r0, r3
 800c90e:	3734      	adds	r7, #52	@ 0x34
 800c910:	46bd      	mov	sp, r7
 800c912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c914:	080250f8 	.word	0x080250f8
 800c918:	0802512c 	.word	0x0802512c
 800c91c:	08025150 	.word	0x08025150
 800c920:	0802517c 	.word	0x0802517c
 800c924:	080251a4 	.word	0x080251a4
 800c928:	080251b4 	.word	0x080251b4

0800c92c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c92e:	b08d      	sub	sp, #52	@ 0x34
 800c930:	af04      	add	r7, sp, #16
 800c932:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c938:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c93e:	2310      	movs	r3, #16
 800c940:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	3336      	adds	r3, #54	@ 0x36
 800c946:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d903      	bls.n	800c95a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800c952:	485b      	ldr	r0, [pc, #364]	@ (800cac0 <vReceiveRA+0x194>)
 800c954:	f015 f948 	bl	8021be8 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800c958:	e0ae      	b.n	800cab8 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	3336      	adds	r3, #54	@ 0x36
 800c95e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	461c      	mov	r4, r3
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	785b      	ldrb	r3, [r3, #1]
 800c96a:	461d      	mov	r5, r3
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	885b      	ldrh	r3, [r3, #2]
 800c970:	b29b      	uxth	r3, r3
 800c972:	021b      	lsls	r3, r3, #8
 800c974:	b21a      	sxth	r2, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	885b      	ldrh	r3, [r3, #2]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	0a1b      	lsrs	r3, r3, #8
 800c97e:	b29b      	uxth	r3, r3
 800c980:	b21b      	sxth	r3, r3
 800c982:	4313      	orrs	r3, r2
 800c984:	b21b      	sxth	r3, r3
 800c986:	b29b      	uxth	r3, r3
 800c988:	461e      	mov	r6, r3
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	791b      	ldrb	r3, [r3, #4]
 800c98e:	4619      	mov	r1, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	795b      	ldrb	r3, [r3, #5]
 800c994:	4618      	mov	r0, r3
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	88db      	ldrh	r3, [r3, #6]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	021b      	lsls	r3, r3, #8
 800c99e:	b21a      	sxth	r2, r3
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	88db      	ldrh	r3, [r3, #6]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	0a1b      	lsrs	r3, r3, #8
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	b21b      	sxth	r3, r3
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	b21b      	sxth	r3, r3
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	9302      	str	r3, [sp, #8]
 800c9b4:	9001      	str	r0, [sp, #4]
 800c9b6:	9100      	str	r1, [sp, #0]
 800c9b8:	4633      	mov	r3, r6
 800c9ba:	462a      	mov	r2, r5
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4841      	ldr	r0, [pc, #260]	@ (800cac4 <vReceiveRA+0x198>)
 800c9c0:	f015 f912 	bl	8021be8 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	88db      	ldrh	r3, [r3, #6]
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d074      	beq.n	800cab8 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff feca 	bl	800c768 <vReceiveRA_ReadReply>
 800c9d4:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d104      	bne.n	800c9e8 <vReceiveRA+0xbc>
 800c9de:	f240 118b 	movw	r1, #395	@ 0x18b
 800c9e2:	4839      	ldr	r0, [pc, #228]	@ (800cac8 <vReceiveRA+0x19c>)
 800c9e4:	f7f4 fec2 	bl	800176c <vAssertCalled>
                if( pxPrefixOption != NULL )
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d064      	beq.n	800cab8 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 fbd8 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800c9f8:	61f8      	str	r0, [r7, #28]
 800c9fa:	e05a      	b.n	800cab2 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d04b      	beq.n	800caa4 <vReceiveRA+0x178>
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d146      	bne.n	800caa4 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	789b      	ldrb	r3, [r3, #2]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	3310      	adds	r3, #16
 800ca2a:	2210      	movs	r2, #16
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	f015 faf7 	bl	8022020 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	3316      	adds	r3, #22
 800ca3c:	2210      	movs	r2, #16
 800ca3e:	4619      	mov	r1, r3
 800ca40:	f015 faee 	bl	8022020 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800ca44:	69fa      	ldr	r2, [r7, #28]
 800ca46:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800ca4a:	f043 0301 	orr.w	r3, r3, #1
 800ca4e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	061a      	lsls	r2, r3, #24
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	021b      	lsls	r3, r3, #8
 800ca66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	0a1b      	lsrs	r3, r3, #8
 800ca72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ca76:	431a      	orrs	r2, r3
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	0e1b      	lsrs	r3, r3, #24
 800ca7e:	431a      	orrs	r2, r3
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800ca8c:	f043 0302 	orr.w	r3, r3, #2
 800ca90:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	2202      	movs	r2, #2
 800ca98:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800ca9c:	69f9      	ldr	r1, [r7, #28]
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f000 f9b6 	bl	800ce10 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa8:	69f9      	ldr	r1, [r7, #28]
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 fb9e 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800cab0:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1a1      	bne.n	800c9fc <vReceiveRA+0xd0>
    }
 800cab8:	bf00      	nop
 800caba:	3724      	adds	r7, #36	@ 0x24
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac0:	080251d8 	.word	0x080251d8
 800cac4:	08025208 	.word	0x08025208
 800cac8:	08025090 	.word	0x08025090

0800cacc <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800cacc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cad0:	b088      	sub	sp, #32
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6178      	str	r0, [r7, #20]
 800cad6:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800cad8:	6939      	ldr	r1, [r7, #16]
 800cada:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800cadc:	6979      	ldr	r1, [r7, #20]
 800cade:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800cae2:	2901      	cmp	r1, #1
 800cae4:	d133      	bne.n	800cb4e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d804      	bhi.n	800cb08 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800cb06:	e0bf      	b.n	800cc88 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800cb08:	4862      	ldr	r0, [pc, #392]	@ (800cc94 <xRAProcess_HandleWaitStates+0x1c8>)
 800cb0a:	f015 f86d 	bl	8021be8 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	3390      	adds	r3, #144	@ 0x90
 800cb18:	2258      	movs	r2, #88	@ 0x58
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	f015 fa80 	bl	8022020 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cb26:	f36f 0300 	bfc	r3, #0, #1
 800cb2a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cb3c:	f043 0302 	orr.w	r3, r3, #2
 800cb40:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2202      	movs	r2, #2
 800cb48:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800cb4c:	e09c      	b.n	800cc88 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800cb4e:	6979      	ldr	r1, [r7, #20]
 800cb50:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800cb54:	2903      	cmp	r1, #3
 800cb56:	f040 8097 	bne.w	800cc88 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800cb5a:	6979      	ldr	r1, [r7, #20]
 800cb5c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800cb60:	f001 0102 	and.w	r1, r1, #2
 800cb64:	b2c9      	uxtb	r1, r1
 800cb66:	2900      	cmp	r1, #0
 800cb68:	d00b      	beq.n	800cb82 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	2202      	movs	r2, #2
 800cb76:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800cb7a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800cb7e:	61fb      	str	r3, [r7, #28]
 800cb80:	e082      	b.n	800cc88 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800cb82:	6979      	ldr	r1, [r7, #20]
 800cb84:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800cb88:	2902      	cmp	r1, #2
 800cb8a:	d80e      	bhi.n	800cbaa <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2202      	movs	r2, #2
 800cb9e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800cba2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800cba6:	61fb      	str	r3, [r7, #28]
 800cba8:	e06e      	b.n	800cc88 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800cbaa:	6979      	ldr	r1, [r7, #20]
 800cbac:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800cbb0:	f001 0101 	and.w	r1, r1, #1
 800cbb4:	b2c9      	uxtb	r1, r1
 800cbb6:	2900      	cmp	r1, #0
 800cbb8:	d057      	beq.n	800cc6a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800cbba:	6979      	ldr	r1, [r7, #20]
 800cbbc:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	4688      	mov	r8, r1
 800cbc4:	4681      	mov	r9, r0
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	4649      	mov	r1, r9
 800cbca:	f04f 0a00 	mov.w	sl, #0
 800cbce:	f04f 0b00 	mov.w	fp, #0
 800cbd2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800cbd6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800cbda:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800cbde:	4650      	mov	r0, sl
 800cbe0:	4659      	mov	r1, fp
 800cbe2:	ebb0 0208 	subs.w	r2, r0, r8
 800cbe6:	eb61 0309 	sbc.w	r3, r1, r9
 800cbea:	f04f 0000 	mov.w	r0, #0
 800cbee:	f04f 0100 	mov.w	r1, #0
 800cbf2:	0259      	lsls	r1, r3, #9
 800cbf4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800cbf8:	0250      	lsls	r0, r2, #9
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	eb12 0408 	adds.w	r4, r2, r8
 800cc02:	eb43 0509 	adc.w	r5, r3, r9
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	f04f 0300 	mov.w	r3, #0
 800cc0e:	01ab      	lsls	r3, r5, #6
 800cc10:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800cc14:	01a2      	lsls	r2, r4, #6
 800cc16:	1b11      	subs	r1, r2, r4
 800cc18:	6039      	str	r1, [r7, #0]
 800cc1a:	eb63 0305 	sbc.w	r3, r3, r5
 800cc1e:	607b      	str	r3, [r7, #4]
 800cc20:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc24:	460b      	mov	r3, r1
 800cc26:	eb13 0308 	adds.w	r3, r3, r8
 800cc2a:	60bb      	str	r3, [r7, #8]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	eb43 0309 	adc.w	r3, r3, r9
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cc38:	f04f 0300 	mov.w	r3, #0
 800cc3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cc40:	f7f3 fbb6 	bl	80003b0 <__aeabi_uldivmod>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4613      	mov	r3, r2
 800cc4a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	2204      	movs	r2, #4
 800cc50:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800cc60:	461a      	mov	r2, r3
 800cc62:	480d      	ldr	r0, [pc, #52]	@ (800cc98 <xRAProcess_HandleWaitStates+0x1cc>)
 800cc64:	f014 ffc0 	bl	8021be8 <lUDPLoggingPrintf>
 800cc68:	e00b      	b.n	800cc82 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	2206      	movs	r2, #6
 800cc6e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	3338      	adds	r3, #56	@ 0x38
 800cc76:	4619      	mov	r1, r3
 800cc78:	4808      	ldr	r0, [pc, #32]	@ (800cc9c <xRAProcess_HandleWaitStates+0x1d0>)
 800cc7a:	f014 ffb5 	bl	8021be8 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800cc82:	6978      	ldr	r0, [r7, #20]
 800cc84:	f7fc fa08 	bl	8009098 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800cc88:	69fb      	ldr	r3, [r7, #28]
    }
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc94:	0802524c 	.word	0x0802524c
 800cc98:	08025274 	.word	0x08025274
 800cc9c:	080252b4 	.word	0x080252b4

0800cca0 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08c      	sub	sp, #48	@ 0x30
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ccb4:	2b06      	cmp	r3, #6
 800ccb6:	f200 808c 	bhi.w	800cdd2 <xRAProcess_HandleOtherStates+0x132>
 800ccba:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc0 <xRAProcess_HandleOtherStates+0x20>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800ccdd 	.word	0x0800ccdd
 800ccc4:	0800cdd3 	.word	0x0800cdd3
 800ccc8:	0800cd3f 	.word	0x0800cd3f
 800cccc:	0800cdd3 	.word	0x0800cdd3
 800ccd0:	0800cdbb 	.word	0x0800cdbb
 800ccd4:	0800cdc5 	.word	0x0800cdc5
 800ccd8:	0800cdd3 	.word	0x0800cdd3
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800ccdc:	f107 030c 	add.w	r3, r7, #12
 800cce0:	2210      	movs	r2, #16
 800cce2:	2100      	movs	r1, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f015 faa8 	bl	802223a <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800ccea:	23ff      	movs	r3, #255	@ 0xff
 800ccec:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800ccf6:	233e      	movs	r3, #62	@ 0x3e
 800ccf8:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	6a38      	ldr	r0, [r7, #32]
 800ccfe:	f00a f863 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 800cd02:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d008      	beq.n	800cd1c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800cd10:	f107 030c 	add.w	r3, r7, #12
 800cd14:	4619      	mov	r1, r3
 800cd16:	69f8      	ldr	r0, [r7, #28]
 800cd18:	f7ff fc24 	bl	800c564 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800cd22:	3301      	adds	r3, #1
 800cd24:	2203      	movs	r2, #3
 800cd26:	4619      	mov	r1, r3
 800cd28:	482d      	ldr	r0, [pc, #180]	@ (800cde0 <xRAProcess_HandleOtherStates+0x140>)
 800cd2a:	f014 ff5d 	bl	8021be8 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800cd2e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800cd32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800cd3c:	e04a      	b.n	800cdd4 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800cd44:	f003 0302 	and.w	r3, r3, #2
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d014      	beq.n	800cd78 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cd54:	f36f 0341 	bfc	r3, #1, #1
 800cd58:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	f7ff fb2b 	bl	800c3c8 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800cd72:	481c      	ldr	r0, [pc, #112]	@ (800cde4 <xRAProcess_HandleOtherStates+0x144>)
 800cd74:	f014 ff38 	bl	8021be8 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	3338      	adds	r3, #56	@ 0x38
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	481a      	ldr	r0, [pc, #104]	@ (800cde8 <xRAProcess_HandleOtherStates+0x148>)
 800cd80:	f014 ff32 	bl	8021be8 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800cd84:	2356      	movs	r3, #86	@ 0x56
 800cd86:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800cd88:	2100      	movs	r1, #0
 800cd8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd8c:	f00a f81c 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 800cd90:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800cd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d008      	beq.n	800cdaa <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	3338      	adds	r3, #56	@ 0x38
 800cda2:	4619      	mov	r1, r3
 800cda4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cda6:	f7fe ff25 	bl	800bbf4 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800cdaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cdae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2203      	movs	r2, #3
 800cdb4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800cdb8:	e00c      	b.n	800cdd4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2205      	movs	r2, #5
 800cdbe:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800cdc2:	e007      	b.n	800cdd4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f811 	bl	800cdec <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800cdca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cdce:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800cdd0:	e000      	b.n	800cdd4 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800cdd2:	bf00      	nop
        }

        return uxNewReloadTime;
 800cdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3730      	adds	r7, #48	@ 0x30
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	080252f0 	.word	0x080252f0
 800cde4:	08025324 	.word	0x08025324
 800cde8:	08025348 	.word	0x08025348

0800cdec <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800ce10:	b590      	push	{r4, r7, lr}
 800ce12:	b089      	sub	sp, #36	@ 0x24
 800ce14:	af04      	add	r7, sp, #16
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800ce1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ce1e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d104      	bne.n	800ce30 <vRAProcess+0x20>
 800ce26:	f240 2189 	movw	r1, #649	@ 0x289
 800ce2a:	4828      	ldr	r0, [pc, #160]	@ (800cecc <vRAProcess+0xbc>)
 800ce2c:	f7f4 fc9e 	bl	800176c <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ce36:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800ce3e:	6838      	ldr	r0, [r7, #0]
 800ce40:	f7ff ffd4 	bl	800cdec <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800ce44:	68f9      	ldr	r1, [r7, #12]
 800ce46:	6838      	ldr	r0, [r7, #0]
 800ce48:	f7ff fe40 	bl	800cacc <xRAProcess_HandleWaitStates>
 800ce4c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800ce4e:	68f9      	ldr	r1, [r7, #12]
 800ce50:	6838      	ldr	r0, [r7, #0]
 800ce52:	f7ff ff25 	bl	800cca0 <xRAProcess_HandleOtherStates>
 800ce56:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800ce64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	461c      	mov	r4, r3
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800ce72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	4618      	mov	r0, r3
 800ce7a:	7afb      	ldrb	r3, [r7, #11]
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800ce82:	9202      	str	r2, [sp, #8]
 800ce84:	9301      	str	r3, [sp, #4]
 800ce86:	9000      	str	r0, [sp, #0]
 800ce88:	4623      	mov	r3, r4
 800ce8a:	460a      	mov	r2, r1
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	4810      	ldr	r0, [pc, #64]	@ (800ced0 <vRAProcess+0xc0>)
 800ce90:	f014 feaa 	bl	8021be8 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00d      	beq.n	800ceb6 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	4a0d      	ldr	r2, [pc, #52]	@ (800ced4 <vRAProcess+0xc4>)
 800ce9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cea2:	099b      	lsrs	r3, r3, #6
 800cea4:	4619      	mov	r1, r3
 800cea6:	480c      	ldr	r0, [pc, #48]	@ (800ced8 <vRAProcess+0xc8>)
 800cea8:	f014 fe9e 	bl	8021be8 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800ceac:	68f9      	ldr	r1, [r7, #12]
 800ceae:	6838      	ldr	r0, [r7, #0]
 800ceb0:	f7fc ff8a 	bl	8009dc8 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800ceb4:	e006      	b.n	800cec4 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800ceb6:	4809      	ldr	r0, [pc, #36]	@ (800cedc <vRAProcess+0xcc>)
 800ceb8:	f014 fe96 	bl	8021be8 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800cebc:	2100      	movs	r1, #0
 800cebe:	6838      	ldr	r0, [r7, #0]
 800cec0:	f7fd f836 	bl	8009f30 <vIPSetDHCP_RATimerEnableState>
    }
 800cec4:	bf00      	nop
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd90      	pop	{r4, r7, pc}
 800cecc:	08025090 	.word	0x08025090
 800ced0:	08025370 	.word	0x08025370
 800ced4:	10624dd3 	.word	0x10624dd3
 800ced8:	080253bc 	.word	0x080253bc
 800cedc:	080253d4 	.word	0x080253d4

0800cee0 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]
 800ceec:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <FreeRTOS_FillEndPoint+0x1a>
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d105      	bne.n	800cf06 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	68f9      	ldr	r1, [r7, #12]
 800cefe:	483f      	ldr	r0, [pc, #252]	@ (800cffc <FreeRTOS_FillEndPoint+0x11c>)
 800cf00:	f014 fe72 	bl	8021be8 <lUDPLoggingPrintf>
 800cf04:	e075      	b.n	800cff2 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cf0c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800cf0e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800cf12:	2100      	movs	r1, #0
 800cf14:	68b8      	ldr	r0, [r7, #8]
 800cf16:	f015 f990 	bl	802223a <memset>
            pxEndPoint->pxNext = pxNext;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	3303      	adds	r3, #3
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	061a      	lsls	r2, r3, #24
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3302      	adds	r3, #2
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	041b      	lsls	r3, r3, #16
 800cf32:	431a      	orrs	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3301      	adds	r3, #1
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	021b      	lsls	r3, r3, #8
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	7812      	ldrb	r2, [r2, #0]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	3303      	adds	r3, #3
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	061a      	lsls	r2, r3, #24
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	3302      	adds	r3, #2
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	041b      	lsls	r3, r3, #16
 800cf56:	431a      	orrs	r2, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	021b      	lsls	r3, r3, #8
 800cf60:	4313      	orrs	r3, r2
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	7812      	ldrb	r2, [r2, #0]
 800cf66:	431a      	orrs	r2, r3
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	3303      	adds	r3, #3
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	061a      	lsls	r2, r3, #24
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	3302      	adds	r3, #2
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	041b      	lsls	r3, r3, #16
 800cf7c:	431a      	orrs	r2, r3
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	3301      	adds	r3, #1
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	021b      	lsls	r3, r3, #8
 800cf86:	4313      	orrs	r3, r2
 800cf88:	6a3a      	ldr	r2, [r7, #32]
 800cf8a:	7812      	ldrb	r2, [r2, #0]
 800cf8c:	431a      	orrs	r2, r3
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800cf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf94:	3303      	adds	r3, #3
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	061a      	lsls	r2, r3, #24
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9c:	3302      	adds	r3, #2
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	041b      	lsls	r3, r3, #16
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	021b      	lsls	r3, r3, #8
 800cfac:	4313      	orrs	r3, r2
 800cfae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfb0:	7812      	ldrb	r2, [r2, #0]
 800cfb2:	431a      	orrs	r2, r3
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	43da      	mvns	r2, r3
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	431a      	orrs	r2, r3
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	331c      	adds	r3, #28
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	221c      	movs	r2, #28
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f015 f826 	bl	8022020 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	693a      	ldr	r2, [r7, #16]
 800cfd8:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	33e8      	adds	r3, #232	@ 0xe8
 800cfde:	2206      	movs	r2, #6
 800cfe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f015 f81c 	bl	8022020 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800cfe8:	68b9      	ldr	r1, [r7, #8]
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f000 f85c 	bl	800d0a8 <FreeRTOS_AddEndPoint>
        }
    }
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	080253ec 	.word	0x080253ec

0800d000 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800d008:	2300      	movs	r3, #0
 800d00a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d021      	beq.n	800d056 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800d012:	4b14      	ldr	r3, [pc, #80]	@ (800d064 <FreeRTOS_AddNetworkInterface+0x64>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d106      	bne.n	800d028 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800d01a:	4a12      	ldr	r2, [pc, #72]	@ (800d064 <FreeRTOS_AddNetworkInterface+0x64>)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	625a      	str	r2, [r3, #36]	@ 0x24
 800d026:	e016      	b.n	800d056 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800d028:	4b0e      	ldr	r3, [pc, #56]	@ (800d064 <FreeRTOS_AddNetworkInterface+0x64>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	429a      	cmp	r2, r3
 800d034:	d00e      	beq.n	800d054 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800d04a:	e004      	b.n	800d056 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d050:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800d052:	e7ec      	b.n	800d02e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800d054:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800d056:	687b      	ldr	r3, [r7, #4]
    }
 800d058:	4618      	mov	r0, r3
 800d05a:	3714      	adds	r7, #20
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr
 800d064:	20001368 	.word	0x20001368

0800d068 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800d068:	b480      	push	{r7}
 800d06a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800d06c:	4b03      	ldr	r3, [pc, #12]	@ (800d07c <FreeRTOS_FirstNetworkInterface+0x14>)
 800d06e:	681b      	ldr	r3, [r3, #0]
    }
 800d070:	4618      	mov	r0, r3
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	20001368 	.word	0x20001368

0800d080 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	e001      	b.n	800d09a <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800d09a:	68fb      	ldr	r3, [r7, #12]
    }
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d102      	bne.n	800d0cc <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800d0cc:	4b33      	ldr	r3, [pc, #204]	@ (800d19c <FreeRTOS_AddEndPoint+0xf4>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d107      	bne.n	800d0e4 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800d0dc:	4a2f      	ldr	r2, [pc, #188]	@ (800d19c <FreeRTOS_AddEndPoint+0xf4>)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	6013      	str	r3, [r2, #0]
 800d0e2:	e01a      	b.n	800d11a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800d0e4:	4b2d      	ldr	r3, [pc, #180]	@ (800d19c <FreeRTOS_AddEndPoint+0xf4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d012      	beq.n	800d118 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d108      	bne.n	800d10e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800d10c:	e005      	b.n	800d11a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d114:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800d116:	e7e8      	b.n	800d0ea <FreeRTOS_AddEndPoint+0x42>
                    break;
 800d118:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d120:	f003 0304 	and.w	r3, r3, #4
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00c      	beq.n	800d144 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d130:	4619      	mov	r1, r3
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d138:	461a      	mov	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	3390      	adds	r3, #144	@ 0x90
 800d13e:	4818      	ldr	r0, [pc, #96]	@ (800d1a0 <FreeRTOS_AddEndPoint+0xf8>)
 800d140:	f014 fd52 	bl	8021be8 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d14a:	f003 0304 	and.w	r3, r3, #4
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b00      	cmp	r3, #0
 800d152:	d11e      	bne.n	800d192 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d15a:	4619      	mov	r1, r3
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d162:	4618      	mov	r0, r3
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	69db      	ldr	r3, [r3, #28]
 800d168:	061a      	lsls	r2, r3, #24
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d174:	431a      	orrs	r2, r3
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	69db      	ldr	r3, [r3, #28]
 800d17a:	0a1b      	lsrs	r3, r3, #8
 800d17c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d180:	431a      	orrs	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	69db      	ldr	r3, [r3, #28]
 800d186:	0e1b      	lsrs	r3, r3, #24
 800d188:	4313      	orrs	r3, r2
 800d18a:	4602      	mov	r2, r0
 800d18c:	4805      	ldr	r0, [pc, #20]	@ (800d1a4 <FreeRTOS_AddEndPoint+0xfc>)
 800d18e:	f014 fd2b 	bl	8021be8 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800d192:	683b      	ldr	r3, [r7, #0]
    }
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	20001364 	.word	0x20001364
 800d1a0:	0802542c 	.word	0x0802542c
 800d1a4:	08025460 	.word	0x08025460

0800d1a8 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800d1a8:	b480      	push	{r7}
 800d1aa:	b085      	sub	sp, #20
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d1b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e8 <FreeRTOS_FirstEndPoint+0x40>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800d1b6:	e00c      	b.n	800d1d2 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00c      	beq.n	800d1d8 <FreeRTOS_FirstEndPoint+0x30>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d006      	beq.n	800d1d8 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d1d0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1ef      	bne.n	800d1b8 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
    }
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3714      	adds	r7, #20
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	20001364 	.word	0x20001364

0800d1ec <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d015      	beq.n	800d22c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d206:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800d208:	e00c      	b.n	800d224 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d011      	beq.n	800d234 <FreeRTOS_NextEndPoint+0x48>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d00b      	beq.n	800d234 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d222:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1ef      	bne.n	800d20a <FreeRTOS_NextEndPoint+0x1e>
 800d22a:	e003      	b.n	800d234 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff ffbb 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800d232:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800d234:	68fb      	ldr	r3, [r7, #12]
    }
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
	...

0800d240 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d24a:	4b1e      	ldr	r3, [pc, #120]	@ (800d2c4 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800d250:	2308      	movs	r3, #8
 800d252:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800d254:	4b1c      	ldr	r3, [pc, #112]	@ (800d2c8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	4a1b      	ldr	r2, [pc, #108]	@ (800d2c8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d25c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	429a      	cmp	r2, r3
 800d264:	d223      	bcs.n	800d2ae <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800d266:	4a18      	ldr	r2, [pc, #96]	@ (800d2c8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	3312      	adds	r3, #18
 800d26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d270:	1c5a      	adds	r2, r3, #1
 800d272:	4915      	ldr	r1, [pc, #84]	@ (800d2c8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	3312      	adds	r3, #18
 800d278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800d27c:	e017      	b.n	800d2ae <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d284:	f003 0304 	and.w	r3, r3, #4
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10b      	bne.n	800d2a6 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00f      	beq.n	800d2b4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00b      	beq.n	800d2b4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d006      	beq.n	800d2b4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d2ac:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1e4      	bne.n	800d27e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
    }
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20001364 	.word	0x20001364
 800d2c8:	2000136c 	.word	0x2000136c

0800d2cc <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	2000      	movs	r0, #0
 800d2d8:	f000 f8b6 	bl	800d448 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800d2dc:	4603      	mov	r3, r0
        }
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d2f2:	4b17      	ldr	r3, [pc, #92]	@ (800d350 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800d2f8:	4b16      	ldr	r3, [pc, #88]	@ (800d354 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	4a15      	ldr	r2, [pc, #84]	@ (800d354 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d300:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d119      	bne.n	800d33c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800d308:	2300      	movs	r3, #0
 800d30a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800d30c:	e016      	b.n	800d33c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d005      	beq.n	800d320 <FreeRTOS_FindEndPointOnMAC+0x38>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d109      	bne.n	800d334 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	33e8      	adds	r3, #232	@ 0xe8
 800d324:	6879      	ldr	r1, [r7, #4]
 800d326:	2206      	movs	r2, #6
 800d328:	4618      	mov	r0, r3
 800d32a:	f015 fe0e 	bl	8022f4a <memcmp>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d007      	beq.n	800d344 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d33a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1e5      	bne.n	800d30e <FreeRTOS_FindEndPointOnMAC+0x26>
 800d342:	e000      	b.n	800d346 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800d344:	bf00      	nop
        }

        return pxEndPoint;
 800d346:	68fb      	ldr	r3, [r7, #12]
    }
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	20001364 	.word	0x20001364
 800d354:	2000136c 	.word	0x2000136c

0800d358 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800d362:	683a      	ldr	r2, [r7, #0]
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	2000      	movs	r0, #0
 800d368:	f000 f806 	bl	800d378 <FreeRTOS_InterfaceEndPointOnNetMask>
 800d36c:	4603      	mov	r3, r0
    }
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d384:	4b2d      	ldr	r3, [pc, #180]	@ (800d43c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800d38a:	230e      	movs	r3, #14
 800d38c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800d38e:	4b2c      	ldr	r3, [pc, #176]	@ (800d440 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	3301      	adds	r3, #1
 800d394:	4a2a      	ldr	r2, [pc, #168]	@ (800d440 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d396:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d22d      	bcs.n	800d3fc <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800d3a0:	4a27      	ldr	r2, [pc, #156]	@ (800d440 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	4924      	ldr	r1, [pc, #144]	@ (800d440 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800d3b6:	e021      	b.n	800d3fc <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d005      	beq.n	800d3ca <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d114      	bne.n	800d3f4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10c      	bne.n	800d3f4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e0:	d00f      	beq.n	800d402 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	405a      	eors	r2, r3
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d006      	beq.n	800d402 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d3fa:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1da      	bne.n	800d3b8 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d113      	bne.n	800d430 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	061a      	lsls	r2, r3, #24
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	021b      	lsls	r3, r3, #8
 800d410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d414:	431a      	orrs	r2, r3
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	0a1b      	lsrs	r3, r3, #8
 800d41a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d41e:	431a      	orrs	r2, r3
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	0e1b      	lsrs	r3, r3, #24
 800d424:	4313      	orrs	r3, r2
 800d426:	461a      	mov	r2, r3
 800d428:	6879      	ldr	r1, [r7, #4]
 800d42a:	4806      	ldr	r0, [pc, #24]	@ (800d444 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800d42c:	f014 fbdc 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800d430:	697b      	ldr	r3, [r7, #20]
    }
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	20001364 	.word	0x20001364
 800d440:	2000136c 	.word	0x2000136c
 800d444:	08025494 	.word	0x08025494

0800d448 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d452:	4b17      	ldr	r3, [pc, #92]	@ (800d4b0 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800d458:	e020      	b.n	800d49c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d005      	beq.n	800d46c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d113      	bne.n	800d494 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d472:	f003 0304 	and.w	r3, r3, #4
 800d476:	b2db      	uxtb	r3, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00b      	beq.n	800d494 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d486:	461a      	mov	r2, r3
 800d488:	6839      	ldr	r1, [r7, #0]
 800d48a:	f7fd fc0b 	bl	800aca4 <xCompareIPv6_Address>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d007      	beq.n	800d4a4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d49a:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1db      	bne.n	800d45a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800d4a2:	e000      	b.n	800d4a6 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800d4a4:	bf00      	nop
            }

            return pxEndPoint;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
        }
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20001364 	.word	0x20001364

0800d4b4 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800d4b4:	b5b0      	push	{r4, r5, r7, lr}
 800d4b6:	b0b0      	sub	sp, #192	@ 0xc0
 800d4b8:	af04      	add	r7, sp, #16
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	607a      	str	r2, [r7, #4]
 800d4be:	603b      	str	r3, [r7, #0]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800d4ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	605a      	str	r2, [r3, #4]
 800d4d4:	609a      	str	r2, [r3, #8]
 800d4d6:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800d4d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800d4dc:	2200      	movs	r2, #0
 800d4de:	601a      	str	r2, [r3, #0]
 800d4e0:	605a      	str	r2, [r3, #4]
 800d4e2:	609a      	str	r2, [r3, #8]
 800d4e4:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800d4e6:	897b      	ldrh	r3, [r7, #10]
 800d4e8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d101      	bne.n	800d4f4 <pxEasyFit+0x40>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e000      	b.n	800d4f6 <pxEasyFit+0x42>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800d500:	2300      	movs	r3, #0
 800d502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800d506:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d123      	bne.n	800d556 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2210      	movs	r2, #16
 800d512:	4619      	mov	r1, r3
 800d514:	4888      	ldr	r0, [pc, #544]	@ (800d738 <pxEasyFit+0x284>)
 800d516:	f015 fd18 	bl	8022f4a <memcmp>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <pxEasyFit+0x70>
 800d520:	2301      	movs	r3, #1
 800d522:	e000      	b.n	800d526 <pxEasyFit+0x72>
 800d524:	2300      	movs	r3, #0
 800d526:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800d52a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d105      	bne.n	800d53e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	4619      	mov	r1, r3
 800d538:	4880      	ldr	r0, [pc, #512]	@ (800d73c <pxEasyFit+0x288>)
 800d53a:	f014 fb55 	bl	8021be8 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	4618      	mov	r0, r3
 800d542:	f000 fa15 	bl	800d970 <xIPv6_GetIPType>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <pxEasyFit+0x9c>
 800d54c:	2301      	movs	r3, #1
 800d54e:	e000      	b.n	800d552 <pxEasyFit+0x9e>
 800d550:	2300      	movs	r3, #0
 800d552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7ff fe26 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 800d55c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d560:	e07d      	b.n	800d65e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800d562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d566:	33e8      	adds	r3, #232	@ 0xe8
 800d568:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800d56c:	2206      	movs	r2, #6
 800d56e:	4618      	mov	r0, r3
 800d570:	f015 fceb 	bl	8022f4a <memcmp>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <pxEasyFit+0xca>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <pxEasyFit+0xcc>
 800d57e:	2300      	movs	r3, #0
 800d580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800d584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d588:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d58c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d590:	b2db      	uxtb	r3, r3
 800d592:	461a      	mov	r2, r3
 800d594:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d598:	4293      	cmp	r3, r2
 800d59a:	d159      	bne.n	800d650 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800d59c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800d5a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d5a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d134      	bne.n	800d61a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d5b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5b4:	3338      	adds	r3, #56	@ 0x38
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f9da 	bl	800d970 <xIPv6_GetIPType>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800d5c2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d5c6:	2b05      	cmp	r3, #5
 800d5c8:	d035      	beq.n	800d636 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d5ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d101      	bne.n	800d5d6 <pxEasyFit+0x122>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e000      	b.n	800d5d8 <pxEasyFit+0x124>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800d5dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5e0:	3338      	adds	r3, #56	@ 0x38
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	2210      	movs	r2, #16
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f015 fcaf 	bl	8022f4a <memcmp>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5f6:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800d5f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800d5fe:	e01a      	b.n	800d636 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800d600:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d604:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d608:	429a      	cmp	r2, r3
 800d60a:	d114      	bne.n	800d636 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800d60c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d610:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800d612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d614:	3301      	adds	r3, #1
 800d616:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800d618:	e00d      	b.n	800d636 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800d61a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	429a      	cmp	r2, r3
 800d626:	d108      	bne.n	800d63a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d62c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800d62e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d630:	3301      	adds	r3, #1
 800d632:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800d634:	e001      	b.n	800d63a <pxEasyFit+0x186>
                           break;
 800d636:	bf00      	nop
 800d638:	e000      	b.n	800d63c <pxEasyFit+0x188>
                        break;
 800d63a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800d63c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d640:	2b01      	cmp	r3, #1
 800d642:	d105      	bne.n	800d650 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800d644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d646:	3301      	adds	r3, #1
 800d648:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800d64a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d64e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800d650:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff fdc9 	bl	800d1ec <FreeRTOS_NextEndPoint>
 800d65a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800d65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d662:	2b00      	cmp	r3, #0
 800d664:	f47f af7d 	bne.w	800d562 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d668:	2300      	movs	r3, #0
 800d66a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d66e:	e017      	b.n	800d6a0 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800d670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	33b0      	adds	r3, #176	@ 0xb0
 800d678:	443b      	add	r3, r7
 800d67a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	dd09      	ble.n	800d696 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800d682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	33b0      	adds	r3, #176	@ 0xb0
 800d68a:	443b      	add	r3, r7
 800d68c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800d690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800d694:	e008      	b.n	800d6a8 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d696:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d69a:	3301      	adds	r3, #1
 800d69c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d6a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	dde3      	ble.n	800d670 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800d6a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d13c      	bne.n	800d72a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800d6b0:	897b      	ldrh	r3, [r7, #10]
 800d6b2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d101      	bne.n	800d6be <pxEasyFit+0x20a>
 800d6ba:	230a      	movs	r3, #10
 800d6bc:	e000      	b.n	800d6c0 <pxEasyFit+0x20c>
 800d6be:	2302      	movs	r3, #2
 800d6c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800d6c4:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800d6c6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d6ca:	2328      	movs	r3, #40	@ 0x28
 800d6cc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d6d0:	f001 fc70 	bl	800efb4 <FreeRTOS_inet_ntop>
 800d6d4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800d6d8:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800d6da:	f107 0210 	add.w	r2, r7, #16
 800d6de:	2328      	movs	r3, #40	@ 0x28
 800d6e0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d6e4:	f001 fc66 	bl	800efb4 <FreeRTOS_inet_ntop>
 800d6e8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800d6ec:	8979      	ldrh	r1, [r7, #10]
 800d6ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6f0:	461c      	mov	r4, r3
 800d6f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6f4:	461d      	mov	r5, r3
 800d6f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <pxEasyFit+0x254>
 800d702:	f107 0310 	add.w	r3, r7, #16
 800d706:	e000      	b.n	800d70a <pxEasyFit+0x256>
 800d708:	4b0d      	ldr	r3, [pc, #52]	@ (800d740 <pxEasyFit+0x28c>)
 800d70a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d70e:	2a00      	cmp	r2, #0
 800d710:	d002      	beq.n	800d718 <pxEasyFit+0x264>
 800d712:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d716:	e000      	b.n	800d71a <pxEasyFit+0x266>
 800d718:	4a09      	ldr	r2, [pc, #36]	@ (800d740 <pxEasyFit+0x28c>)
 800d71a:	9202      	str	r2, [sp, #8]
 800d71c:	9301      	str	r3, [sp, #4]
 800d71e:	9000      	str	r0, [sp, #0]
 800d720:	462b      	mov	r3, r5
 800d722:	4622      	mov	r2, r4
 800d724:	4807      	ldr	r0, [pc, #28]	@ (800d744 <pxEasyFit+0x290>)
 800d726:	f014 fa5f 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800d72a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800d72e:	4618      	mov	r0, r3
 800d730:	37b0      	adds	r7, #176	@ 0xb0
 800d732:	46bd      	mov	sp, r7
 800d734:	bdb0      	pop	{r4, r5, r7, pc}
 800d736:	bf00      	nop
 800d738:	080272e4 	.word	0x080272e4
 800d73c:	08025530 	.word	0x08025530
 800d740:	0802554c 	.word	0x0802554c
 800d744:	08025554 	.word	0x08025554

0800d748 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800d748:	b590      	push	{r4, r7, lr}
 800d74a:	b097      	sub	sp, #92	@ 0x5c
 800d74c:	af02      	add	r7, sp, #8
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800d752:	2300      	movs	r3, #0
 800d754:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d104      	bne.n	800d76e <FreeRTOS_MatchingEndpoint+0x26>
 800d764:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800d768:	485e      	ldr	r0, [pc, #376]	@ (800d8e4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d76a:	f7f3 ffff 	bl	800176c <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800d772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d774:	3302      	adds	r3, #2
 800d776:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800d778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d77a:	f003 0303 	and.w	r3, r3, #3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d004      	beq.n	800d78c <FreeRTOS_MatchingEndpoint+0x44>
 800d782:	f240 319b 	movw	r1, #923	@ 0x39b
 800d786:	4857      	ldr	r0, [pc, #348]	@ (800d8e4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d788:	f7f3 fff0 	bl	800176c <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800d78c:	4b56      	ldr	r3, [pc, #344]	@ (800d8e8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	3301      	adds	r3, #1
 800d792:	4a55      	ldr	r2, [pc, #340]	@ (800d8e8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d794:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800d796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d798:	7b1a      	ldrb	r2, [r3, #12]
 800d79a:	7b5b      	ldrb	r3, [r3, #13]
 800d79c:	021b      	lsls	r3, r3, #8
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d7a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7aa:	2210      	movs	r2, #16
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f014 fd43 	bl	802223a <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d7b4:	f107 0314 	add.w	r3, r7, #20
 800d7b8:	2210      	movs	r2, #16
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f014 fd3c 	bl	802223a <memset>

            switch( usFrameType )
 800d7c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d7c4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d009      	beq.n	800d7e0 <FreeRTOS_MatchingEndpoint+0x98>
 800d7cc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	dc6a      	bgt.n	800d8aa <FreeRTOS_MatchingEndpoint+0x162>
 800d7d4:	2b08      	cmp	r3, #8
 800d7d6:	d05d      	beq.n	800d894 <FreeRTOS_MatchingEndpoint+0x14c>
 800d7d8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d7dc:	d015      	beq.n	800d80a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800d7de:	e064      	b.n	800d8aa <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d7e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7e2:	3316      	adds	r3, #22
 800d7e4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	6859      	ldr	r1, [r3, #4]
 800d7ec:	689a      	ldr	r2, [r3, #8]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7f4:	3326      	adds	r3, #38	@ 0x26
 800d7f6:	f107 0414 	add.w	r4, r7, #20
 800d7fa:	6818      	ldr	r0, [r3, #0]
 800d7fc:	6859      	ldr	r1, [r3, #4]
 800d7fe:	689a      	ldr	r2, [r3, #8]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800d804:	2301      	movs	r3, #1
 800d806:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d808:	e050      	b.n	800d8ac <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800d80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d810:	8a9b      	ldrh	r3, [r3, #20]
 800d812:	b29b      	uxth	r3, r3
 800d814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d818:	d108      	bne.n	800d82c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d81c:	331c      	adds	r3, #28
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d824:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d828:	617b      	str	r3, [r7, #20]
 800d82a:	e00d      	b.n	800d848 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800d82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82e:	8a9b      	ldrh	r3, [r3, #20]
 800d830:	b29b      	uxth	r3, r3
 800d832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d836:	d107      	bne.n	800d848 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d83a:	331c      	adds	r3, #28
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d842:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d846:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800d848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84a:	061a      	lsls	r2, r3, #24
 800d84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84e:	021b      	lsls	r3, r3, #8
 800d850:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d854:	431a      	orrs	r2, r3
 800d856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d858:	0a1b      	lsrs	r3, r3, #8
 800d85a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d85e:	431a      	orrs	r2, r3
 800d860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d862:	0e1b      	lsrs	r3, r3, #24
 800d864:	ea42 0103 	orr.w	r1, r2, r3
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	061a      	lsls	r2, r3, #24
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	021b      	lsls	r3, r3, #8
 800d870:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d874:	431a      	orrs	r2, r3
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	0a1b      	lsrs	r3, r3, #8
 800d87a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d87e:	431a      	orrs	r2, r3
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	0e1b      	lsrs	r3, r3, #24
 800d884:	4313      	orrs	r3, r2
 800d886:	461a      	mov	r2, r3
 800d888:	4818      	ldr	r0, [pc, #96]	@ (800d8ec <FreeRTOS_MatchingEndpoint+0x1a4>)
 800d88a:	f014 f9ad 	bl	8021be8 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800d88e:	2301      	movs	r3, #1
 800d890:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d892:	e00b      	b.n	800d8ac <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800d894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d896:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800d89a:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800d89c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d89e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800d8a2:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d8a8:	e000      	b.n	800d8ac <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800d8aa:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800d8ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d113      	bne.n	800d8da <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800d8b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8b4:	f107 030c 	add.w	r3, r7, #12
 800d8b8:	6810      	ldr	r0, [r2, #0]
 800d8ba:	6018      	str	r0, [r3, #0]
 800d8bc:	8892      	ldrh	r2, [r2, #4]
 800d8be:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800d8c0:	f107 0014 	add.w	r0, r7, #20
 800d8c4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d8c8:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800d8ca:	f107 030c 	add.w	r3, r7, #12
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff fdee 	bl	800d4b4 <pxEasyFit>
 800d8d8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800d8da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3754      	adds	r7, #84	@ 0x54
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd90      	pop	{r4, r7, pc}
 800d8e4:	0802557c 	.word	0x0802557c
 800d8e8:	2000136c 	.word	0x2000136c
 800d8ec:	080255ac 	.word	0x080255ac

0800d8f0 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d8f8:	4b1b      	ldr	r3, [pc, #108]	@ (800d968 <FreeRTOS_FindGateWay+0x78>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800d8fe:	e028      	b.n	800d952 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b60      	cmp	r3, #96	@ 0x60
 800d904:	d112      	bne.n	800d92c <FreeRTOS_FindGateWay+0x3c>
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00a      	beq.n	800d92c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	335c      	adds	r3, #92	@ 0x5c
 800d91a:	2210      	movs	r2, #16
 800d91c:	4619      	mov	r1, r3
 800d91e:	4813      	ldr	r0, [pc, #76]	@ (800d96c <FreeRTOS_FindGateWay+0x7c>)
 800d920:	f015 fb13 	bl	8022f4a <memcmp>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00f      	beq.n	800d94a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800d92a:	e017      	b.n	800d95c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b40      	cmp	r3, #64	@ 0x40
 800d930:	d10b      	bne.n	800d94a <FreeRTOS_FindGateWay+0x5a>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d938:	f003 0304 	and.w	r3, r3, #4
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d103      	bne.n	800d94a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d107      	bne.n	800d95a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d950:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1d3      	bne.n	800d900 <FreeRTOS_FindGateWay+0x10>
 800d958:	e000      	b.n	800d95c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800d95a:	bf00      	nop
        }

        return pxEndPoint;
 800d95c:	68fb      	ldr	r3, [r7, #12]
    }
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	20001364 	.word	0x20001364
 800d96c:	0802729c 	.word	0x0802729c

0800d970 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800d978:	2305      	movs	r3, #5
 800d97a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d046      	beq.n	800da10 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d982:	2300      	movs	r3, #0
 800d984:	613b      	str	r3, [r7, #16]
 800d986:	e040      	b.n	800da0a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	021b      	lsls	r3, r3, #8
 800d98e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	785b      	ldrb	r3, [r3, #1]
 800d994:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d996:	4313      	orrs	r3, r2
 800d998:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800d99a:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800d99c:	491f      	ldr	r1, [pc, #124]	@ (800da1c <xIPv6_GetIPType+0xac>)
 800d99e:	693a      	ldr	r2, [r7, #16]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	005b      	lsls	r3, r3, #1
 800d9a4:	4413      	add	r3, r2
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	440b      	add	r3, r1
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b04      	cmp	r3, #4
 800d9ae:	d108      	bne.n	800d9c2 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7fd f929 	bl	800ac08 <xIsIPv6Loopback>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800d9bc:	2304      	movs	r3, #4
 800d9be:	75fb      	strb	r3, [r7, #23]
                        break;
 800d9c0:	e026      	b.n	800da10 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800d9c2:	4916      	ldr	r1, [pc, #88]	@ (800da1c <xIPv6_GetIPType+0xac>)
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	005b      	lsls	r3, r3, #1
 800d9ca:	4413      	add	r3, r2
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	440b      	add	r3, r1
 800d9d0:	3302      	adds	r3, #2
 800d9d2:	881a      	ldrh	r2, [r3, #0]
 800d9d4:	89fb      	ldrh	r3, [r7, #14]
 800d9d6:	4013      	ands	r3, r2
 800d9d8:	b299      	uxth	r1, r3
 800d9da:	4810      	ldr	r0, [pc, #64]	@ (800da1c <xIPv6_GetIPType+0xac>)
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	4613      	mov	r3, r2
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	4413      	add	r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4403      	add	r3, r0
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	4299      	cmp	r1, r3
 800d9ee:	d109      	bne.n	800da04 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800d9f0:	490a      	ldr	r1, [pc, #40]	@ (800da1c <xIPv6_GetIPType+0xac>)
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	4413      	add	r3, r2
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	440b      	add	r3, r1
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	75fb      	strb	r3, [r7, #23]
                    break;
 800da02:	e005      	b.n	800da10 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	3301      	adds	r3, #1
 800da08:	613b      	str	r3, [r7, #16]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	2b04      	cmp	r3, #4
 800da0e:	ddbb      	ble.n	800d988 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800da10:	7dfb      	ldrb	r3, [r7, #23]
    }
 800da12:	4618      	mov	r0, r3
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	080272f4 	.word	0x080272f4

0800da20 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d105      	bne.n	800da3e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800da32:	4a16      	ldr	r2, [pc, #88]	@ (800da8c <pcEndpointName+0x6c>)
 800da34:	6879      	ldr	r1, [r7, #4]
 800da36:	68b8      	ldr	r0, [r7, #8]
 800da38:	f015 f902 	bl	8022c40 <snprintf>
 800da3c:	e020      	b.n	800da80 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800da44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d002      	beq.n	800da54 <pcEndpointName+0x34>
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d007      	beq.n	800da62 <pcEndpointName+0x42>
 800da52:	e00f      	b.n	800da74 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800da54:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	2002      	movs	r0, #2
 800da5c:	f001 faaa 	bl	800efb4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800da60:	e00e      	b.n	800da80 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	68ba      	ldr	r2, [r7, #8]
 800da6c:	200a      	movs	r0, #10
 800da6e:	f001 faa1 	bl	800efb4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800da72:	e005      	b.n	800da80 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800da74:	4a05      	ldr	r2, [pc, #20]	@ (800da8c <pcEndpointName+0x6c>)
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	68b8      	ldr	r0, [r7, #8]
 800da7a:	f015 f8e1 	bl	8022c40 <snprintf>
                    break;
 800da7e:	bf00      	nop
            }
        }

        return pcBuffer;
 800da80:	68bb      	ldr	r3, [r7, #8]
    }
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	080255cc 	.word	0x080255cc

0800da90 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f002 fb21 	bl	80100e4 <xSocketValid>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800daa8:	2300      	movs	r3, #0
 800daaa:	617b      	str	r3, [r7, #20]
 800daac:	e015      	b.n	800dada <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d006      	beq.n	800dac2 <prvValidSocket+0x32>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	69db      	ldr	r3, [r3, #28]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800dabc:	2300      	movs	r3, #0
 800dabe:	617b      	str	r3, [r7, #20]
 800dac0:	e00b      	b.n	800dada <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	429a      	cmp	r2, r3
 800dace:	d002      	beq.n	800dad6 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800dad0:	2300      	movs	r3, #0
 800dad2:	617b      	str	r3, [r7, #20]
 800dad4:	e001      	b.n	800dada <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800dad6:	2301      	movs	r3, #1
 800dad8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800dada:	697b      	ldr	r3, [r7, #20]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800dae8:	4803      	ldr	r0, [pc, #12]	@ (800daf8 <vNetworkSocketsInit+0x14>)
 800daea:	f7f5 fa45 	bl	8002f78 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800daee:	4803      	ldr	r0, [pc, #12]	@ (800dafc <vNetworkSocketsInit+0x18>)
 800daf0:	f7f5 fa42 	bl	8002f78 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800daf4:	bf00      	nop
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	20001430 	.word	0x20001430
 800dafc:	20001444 	.word	0x20001444

0800db00 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
 800db0c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800db0e:	2301      	movs	r3, #1
 800db10:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800db12:	2300      	movs	r3, #0
 800db14:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800db16:	f7fb ff97 	bl	8009a48 <xIPIsNetworkTaskReady>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d102      	bne.n	800db26 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800db20:	2300      	movs	r3, #0
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	e05e      	b.n	800dbe4 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d004      	beq.n	800db36 <prvDetermineSocketSize+0x36>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b0a      	cmp	r3, #10
 800db30:	d001      	beq.n	800db36 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800db32:	2300      	movs	r3, #0
 800db34:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d002      	beq.n	800db42 <prvDetermineSocketSize+0x42>
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2b0a      	cmp	r3, #10
 800db40:	d101      	bne.n	800db46 <prvDetermineSocketSize+0x46>
 800db42:	2301      	movs	r3, #1
 800db44:	e000      	b.n	800db48 <prvDetermineSocketSize+0x48>
 800db46:	2300      	movs	r3, #0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d104      	bne.n	800db56 <prvDetermineSocketSize+0x56>
 800db4c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800db50:	4827      	ldr	r0, [pc, #156]	@ (800dbf0 <prvDetermineSocketSize+0xf0>)
 800db52:	f7f3 fe0b 	bl	800176c <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800db56:	4b27      	ldr	r3, [pc, #156]	@ (800dbf4 <prvDetermineSocketSize+0xf4>)
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5e:	d004      	beq.n	800db6a <prvDetermineSocketSize+0x6a>
 800db60:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800db64:	4822      	ldr	r0, [pc, #136]	@ (800dbf0 <prvDetermineSocketSize+0xf0>)
 800db66:	f7f3 fe01 	bl	800176c <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800db6a:	4b23      	ldr	r3, [pc, #140]	@ (800dbf8 <prvDetermineSocketSize+0xf8>)
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db72:	d004      	beq.n	800db7e <prvDetermineSocketSize+0x7e>
 800db74:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800db78:	481d      	ldr	r0, [pc, #116]	@ (800dbf0 <prvDetermineSocketSize+0xf0>)
 800db7a:	f7f3 fdf7 	bl	800176c <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b11      	cmp	r3, #17
 800db82:	d110      	bne.n	800dba6 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b02      	cmp	r3, #2
 800db88:	d009      	beq.n	800db9e <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d004      	beq.n	800db9e <prvDetermineSocketSize+0x9e>
 800db94:	f240 2106 	movw	r1, #518	@ 0x206
 800db98:	4815      	ldr	r0, [pc, #84]	@ (800dbf0 <prvDetermineSocketSize+0xf0>)
 800db9a:	f7f3 fde7 	bl	800176c <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2270      	movs	r2, #112	@ 0x70
 800dba2:	601a      	str	r2, [r3, #0]
 800dba4:	e01e      	b.n	800dbe4 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b06      	cmp	r3, #6
 800dbaa:	d111      	bne.n	800dbd0 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d009      	beq.n	800dbc6 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d004      	beq.n	800dbc6 <prvDetermineSocketSize+0xc6>
 800dbbc:	f240 2113 	movw	r1, #531	@ 0x213
 800dbc0:	480b      	ldr	r0, [pc, #44]	@ (800dbf0 <prvDetermineSocketSize+0xf0>)
 800dbc2:	f7f3 fdd3 	bl	800176c <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	e009      	b.n	800dbe4 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d004      	beq.n	800dbe4 <prvDetermineSocketSize+0xe4>
 800dbda:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800dbde:	4804      	ldr	r0, [pc, #16]	@ (800dbf0 <prvDetermineSocketSize+0xf0>)
 800dbe0:	f7f3 fdc4 	bl	800176c <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800dbe4:	697b      	ldr	r3, [r7, #20]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	080255d4 	.word	0x080255d4
 800dbf4:	20001430 	.word	0x20001430
 800dbf8:	20001444 	.word	0x20001444

0800dbfc <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800dc0c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	7a1b      	ldrb	r3, [r3, #8]
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00a      	beq.n	800dc34 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800dc1e:	2314      	movs	r3, #20
 800dc20:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800dc28:	89fb      	ldrh	r3, [r7, #14]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f241 121c 	movw	r2, #4380	@ 0x111c
 800dc3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800dc3e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800dc42:	f640 3068 	movw	r0, #2920	@ 0xb68
 800dc46:	f7fc fc85 	bl	800a554 <FreeRTOS_round_up>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc58:	08db      	lsrs	r3, r3, #3
 800dc5a:	4a10      	ldr	r2, [pc, #64]	@ (800dc9c <prvInitialiseTCPFields+0xa0>)
 800dc5c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc60:	099b      	lsrs	r3, r3, #6
 800dc62:	4619      	mov	r1, r3
 800dc64:	2001      	movs	r0, #1
 800dc66:	f7fc fc35 	bl	800a4d4 <FreeRTOS_max_size_t>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc78:	08db      	lsrs	r3, r3, #3
 800dc7a:	4a08      	ldr	r2, [pc, #32]	@ (800dc9c <prvInitialiseTCPFields+0xa0>)
 800dc7c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc80:	099b      	lsrs	r3, r3, #6
 800dc82:	4619      	mov	r1, r3
 800dc84:	2001      	movs	r0, #1
 800dc86:	f7fc fc25 	bl	800a4d4 <FreeRTOS_max_size_t>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800dc92:	bf00      	nop
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	2ce33e6d 	.word	0x2ce33e6d

0800dca0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b08a      	sub	sp, #40	@ 0x28
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800dcac:	2301      	movs	r3, #1
 800dcae:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b0a      	cmp	r3, #10
 800dcb8:	d002      	beq.n	800dcc0 <FreeRTOS_socket+0x20>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d101      	bne.n	800dcc4 <FreeRTOS_socket+0x24>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e000      	b.n	800dcc6 <FreeRTOS_socket+0x26>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d104      	bne.n	800dcd4 <FreeRTOS_socket+0x34>
 800dcca:	f240 2171 	movw	r1, #625	@ 0x271
 800dcce:	4845      	ldr	r0, [pc, #276]	@ (800dde4 <FreeRTOS_socket+0x144>)
 800dcd0:	f7f3 fd4c 	bl	800176c <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10c      	bne.n	800dcf4 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d005      	beq.n	800dcec <FreeRTOS_socket+0x4c>
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d105      	bne.n	800dcf2 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800dce6:	2311      	movs	r3, #17
 800dce8:	623b      	str	r3, [r7, #32]
                    break;
 800dcea:	e003      	b.n	800dcf4 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800dcec:	2306      	movs	r3, #6
 800dcee:	623b      	str	r3, [r7, #32]
                    break;
 800dcf0:	e000      	b.n	800dcf4 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800dcf2:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800dcf4:	f107 0314 	add.w	r3, r7, #20
 800dcf8:	6a3a      	ldr	r2, [r7, #32]
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f7ff feff 	bl	800db00 <prvDetermineSocketSize>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d103      	bne.n	800dd10 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800dd08:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800dd0e:	e063      	b.n	800ddd8 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7f8 f986 	bl	8006024 <pvPortMalloc>
 800dd18:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d103      	bne.n	800dd28 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800dd20:	f04f 33ff 	mov.w	r3, #4294967295
 800dd24:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800dd26:	e057      	b.n	800ddd8 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800dd28:	f7f4 ff51 	bl	8002bce <xEventGroupCreate>
 800dd2c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d106      	bne.n	800dd42 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800dd34:	69f8      	ldr	r0, [r7, #28]
 800dd36:	f7f8 fa49 	bl	80061cc <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800dd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd40:	e04a      	b.n	800ddd8 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	461a      	mov	r2, r3
 800dd46:	2100      	movs	r1, #0
 800dd48:	69f8      	ldr	r0, [r7, #28]
 800dd4a:	f014 fa76 	bl	802223a <memset>

            pxSocket->xEventGroup = xEventGroup;
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	69ba      	ldr	r2, [r7, #24]
 800dd52:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d008      	beq.n	800dd6c <FreeRTOS_socket+0xcc>
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b0a      	cmp	r3, #10
 800dd5e:	d10b      	bne.n	800dd78 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800dd60:	69fa      	ldr	r2, [r7, #28]
 800dd62:	7a13      	ldrb	r3, [r2, #8]
 800dd64:	f043 0301 	orr.w	r3, r3, #1
 800dd68:	7213      	strb	r3, [r2, #8]
                        break;
 800dd6a:	e009      	b.n	800dd80 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800dd6c:	69fa      	ldr	r2, [r7, #28]
 800dd6e:	7a13      	ldrb	r3, [r2, #8]
 800dd70:	f36f 0300 	bfc	r3, #0, #1
 800dd74:	7213      	strb	r3, [r2, #8]
                        break;
 800dd76:	e003      	b.n	800dd80 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800dd78:	481b      	ldr	r0, [pc, #108]	@ (800dde8 <FreeRTOS_socket+0x148>)
 800dd7a:	f013 ff35 	bl	8021be8 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800dd7e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	2b11      	cmp	r3, #17
 800dd84:	d105      	bne.n	800dd92 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	3354      	adds	r3, #84	@ 0x54
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7f5 f8f4 	bl	8002f78 <vListInitialise>
 800dd90:	e007      	b.n	800dda2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	2b06      	cmp	r3, #6
 800dd96:	d104      	bne.n	800dda2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	69f8      	ldr	r0, [r7, #28]
 800dd9e:	f7ff ff2d 	bl	800dbfc <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	330c      	adds	r3, #12
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7f5 f906 	bl	8002fb8 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	69fa      	ldr	r2, [r7, #28]
 800ddb0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddb8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddc0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	2202      	movs	r2, #2
 800ddc6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800ddca:	6a3b      	ldr	r3, [r7, #32]
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3728      	adds	r7, #40	@ 0x28
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	080255d4 	.word	0x080255d4
 800dde8:	08025604 	.word	0x08025604

0800ddec <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2111      	movs	r1, #17
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff fe49 	bl	800da90 <prvValidSocket>
 800ddfe:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d10d      	bne.n	800de22 <prvMakeSureSocketIsBound+0x36>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	69db      	ldr	r3, [r3, #28]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d109      	bne.n	800de22 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800de0e:	2200      	movs	r2, #0
 800de10:	2100      	movs	r1, #0
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 f934 	bl	800e080 <FreeRTOS_bind>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800de22:	68fb      	ldr	r3, [r7, #12]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
 800de38:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800de3e:	2304      	movs	r3, #4
 800de40:	753b      	strb	r3, [r7, #20]
 800de42:	2300      	movs	r3, #0
 800de44:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800de46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d006      	beq.n	800de5c <prvSendUDPPacket+0x30>
 800de4e:	2b0a      	cmp	r3, #10
 800de50:	d109      	bne.n	800de66 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800de52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de54:	68b8      	ldr	r0, [r7, #8]
 800de56:	f7fd f903 	bl	800b060 <xSend_UDP_Update_IPv6>
                break;
 800de5a:	e005      	b.n	800de68 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800de5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de5e:	68b8      	ldr	r0, [r7, #8]
 800de60:	f7fc fd68 	bl	800a934 <xSend_UDP_Update_IPv4>
                break;
 800de64:	e000      	b.n	800de68 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800de66:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6c:	441a      	add	r2, r3
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800de72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de74:	885a      	ldrh	r2, [r3, #2]
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	b29a      	uxth	r2, r3
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de88:	3306      	adds	r3, #6
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800de90:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800de96:	f107 0314 	add.w	r3, r7, #20
 800de9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fb fa37 	bl	8009310 <xSendEventStructToIPTask>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d10b      	bne.n	800dec0 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00d      	beq.n	800ded0 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deb8:	6879      	ldr	r1, [r7, #4]
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	4798      	blx	r3
 800debe:	e007      	b.n	800ded0 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d102      	bne.n	800ded0 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800deca:	68b8      	ldr	r0, [r7, #8]
 800decc:	f008 ffe4 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800ded0:	69fb      	ldr	r3, [r7, #28]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3720      	adds	r7, #32
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b08e      	sub	sp, #56	@ 0x38
 800dede:	af04      	add	r7, sp, #16
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	60b9      	str	r1, [r7, #8]
 800dee4:	607a      	str	r2, [r7, #4]
 800dee6:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def0:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	f003 0310 	and.w	r3, r3, #16
 800def8:	2b00      	cmp	r3, #0
 800defa:	d104      	bne.n	800df06 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800defc:	f7fc f94a 	bl	800a194 <xIsCallingFromIPTask>
 800df00:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800df06:	2300      	movs	r3, #0
 800df08:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	2b00      	cmp	r3, #0
 800df12:	d128      	bne.n	800df66 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800df14:	f107 0310 	add.w	r3, r7, #16
 800df18:	4618      	mov	r0, r3
 800df1a:	f7f6 fdbd 	bl	8004a98 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800df1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4413      	add	r3, r2
 800df24:	69ba      	ldr	r2, [r7, #24]
 800df26:	4611      	mov	r1, r2
 800df28:	4618      	mov	r0, r3
 800df2a:	f008 ff4d 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 800df2e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800df30:	6a3b      	ldr	r3, [r7, #32]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d01b      	beq.n	800df6e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df3c:	4413      	add	r3, r2
 800df3e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	69f8      	ldr	r0, [r7, #28]
 800df46:	f014 f86b 	bl	8022020 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800df4a:	f107 0218 	add.w	r2, r7, #24
 800df4e:	f107 0310 	add.w	r3, r7, #16
 800df52:	4611      	mov	r1, r2
 800df54:	4618      	mov	r0, r3
 800df56:	f7f6 fdd7 	bl	8004b08 <xTaskCheckForTimeOut>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d106      	bne.n	800df6e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800df60:	2300      	movs	r3, #0
 800df62:	61bb      	str	r3, [r7, #24]
 800df64:	e003      	b.n	800df6e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800df66:	68b8      	ldr	r0, [r7, #8]
 800df68:	f7fc f8cc 	bl	800a104 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800df6c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800df6e:	6a3b      	ldr	r3, [r7, #32]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d010      	beq.n	800df96 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df80:	9202      	str	r2, [sp, #8]
 800df82:	9301      	str	r3, [sp, #4]
 800df84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	6a39      	ldr	r1, [r7, #32]
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7ff ff4c 	bl	800de2c <prvSendUDPPacket>
 800df94:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3728      	adds	r7, #40	@ 0x28
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b090      	sub	sp, #64	@ 0x40
 800dfa4:	af02      	add	r7, sp, #8
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800dfbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d013      	beq.n	800dfec <FreeRTOS_sendto+0x4c>
 800dfc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfc6:	785b      	ldrb	r3, [r3, #1]
 800dfc8:	2b0a      	cmp	r3, #10
 800dfca:	d00f      	beq.n	800dfec <FreeRTOS_sendto+0x4c>
 800dfcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfce:	785b      	ldrb	r3, [r3, #1]
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d00b      	beq.n	800dfec <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800dfd4:	f107 0310 	add.w	r3, r7, #16
 800dfd8:	2218      	movs	r2, #24
 800dfda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f014 f81f 	bl	8022020 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800dfe6:	f107 0310 	add.w	r3, r7, #16
 800dfea:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800dfec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d104      	bne.n	800dffc <FreeRTOS_sendto+0x5c>
 800dff2:	f240 6143 	movw	r1, #1603	@ 0x643
 800dff6:	4820      	ldr	r0, [pc, #128]	@ (800e078 <FreeRTOS_sendto+0xd8>)
 800dff8:	f7f3 fbb8 	bl	800176c <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d104      	bne.n	800e00c <FreeRTOS_sendto+0x6c>
 800e002:	f240 6144 	movw	r1, #1604	@ 0x644
 800e006:	481c      	ldr	r0, [pc, #112]	@ (800e078 <FreeRTOS_sendto+0xd8>)
 800e008:	f7f3 fbb0 	bl	800176c <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800e00c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	2b02      	cmp	r3, #2
 800e012:	d007      	beq.n	800e024 <FreeRTOS_sendto+0x84>
 800e014:	2b0a      	cmp	r3, #10
 800e016:	d10b      	bne.n	800e030 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800e018:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800e01c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800e01e:	233e      	movs	r3, #62	@ 0x3e
 800e020:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e022:	e00c      	b.n	800e03e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800e024:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e028:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800e02a:	232a      	movs	r3, #42	@ 0x2a
 800e02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e02e:	e006      	b.n	800e03e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800e030:	4812      	ldr	r0, [pc, #72]	@ (800e07c <FreeRTOS_sendto+0xdc>)
 800e032:	f013 fdd9 	bl	8021be8 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e036:	f06f 0315 	mvn.w	r3, #21
 800e03a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e03c:	bf00      	nop
    }

    if( lReturn == 0 )
 800e03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e040:	2b00      	cmp	r3, #0
 800e042:	d114      	bne.n	800e06e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e048:	429a      	cmp	r2, r3
 800e04a:	d810      	bhi.n	800e06e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800e04c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e04e:	f7ff fecd 	bl	800ddec <prvMakeSureSocketIsBound>
 800e052:	4603      	mov	r3, r0
 800e054:	2b01      	cmp	r3, #1
 800e056:	d10a      	bne.n	800e06e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800e058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	68b9      	ldr	r1, [r7, #8]
 800e066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e068:	f7ff ff37 	bl	800deda <prvSendTo_ActualSend>
 800e06c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800e06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e070:	4618      	mov	r0, r3
 800e072:	3738      	adds	r7, #56	@ 0x38
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	080255d4 	.word	0x080255d4
 800e07c:	08025688 	.word	0x08025688

0800e080 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b090      	sub	sp, #64	@ 0x40
 800e084:	af02      	add	r7, sp, #8
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800e090:	2300      	movs	r3, #0
 800e092:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d013      	beq.n	800e0c2 <FreeRTOS_bind+0x42>
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	785b      	ldrb	r3, [r3, #1]
 800e09e:	2b0a      	cmp	r3, #10
 800e0a0:	d00f      	beq.n	800e0c2 <FreeRTOS_bind+0x42>
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	785b      	ldrb	r3, [r3, #1]
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d00b      	beq.n	800e0c2 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800e0aa:	f107 0310 	add.w	r3, r7, #16
 800e0ae:	2218      	movs	r2, #24
 800e0b0:	68b9      	ldr	r1, [r7, #8]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f013 ffb4 	bl	8022020 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800e0bc:	f107 0310 	add.w	r3, r7, #16
 800e0c0:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800e0c2:	f7fc f867 	bl	800a194 <xIsCallingFromIPTask>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d004      	beq.n	800e0d6 <FreeRTOS_bind+0x56>
 800e0cc:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800e0d0:	484b      	ldr	r0, [pc, #300]	@ (800e200 <FreeRTOS_bind+0x180>)
 800e0d2:	f7f3 fb4b 	bl	800176c <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e0d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0d8:	f002 f804 	bl	80100e4 <xSocketValid>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d103      	bne.n	800e0ea <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e0e2:	f06f 0315 	mvn.w	r3, #21
 800e0e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0e8:	e084      	b.n	800e1f4 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d009      	beq.n	800e106 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4842      	ldr	r0, [pc, #264]	@ (800e204 <FreeRTOS_bind+0x184>)
 800e0fa:	f013 fd75 	bl	8021be8 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e0fe:	f06f 0315 	mvn.w	r3, #21
 800e102:	637b      	str	r3, [r7, #52]	@ 0x34
 800e104:	e076      	b.n	800e1f4 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800e106:	2309      	movs	r3, #9
 800e108:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d042      	beq.n	800e19c <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	785b      	ldrb	r3, [r3, #1]
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d010      	beq.n	800e140 <FreeRTOS_bind+0xc0>
 800e11e:	2b0a      	cmp	r3, #10
 800e120:	d129      	bne.n	800e176 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e124:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	3308      	adds	r3, #8
 800e12c:	2210      	movs	r2, #16
 800e12e:	4619      	mov	r1, r3
 800e130:	f013 ff76 	bl	8022020 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e136:	7a13      	ldrb	r3, [r2, #8]
 800e138:	f043 0301 	orr.w	r3, r3, #1
 800e13c:	7213      	strb	r3, [r2, #8]
                        break;
 800e13e:	e01e      	b.n	800e17e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	061a      	lsls	r2, r3, #24
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	021b      	lsls	r3, r3, #8
 800e14c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e150:	431a      	orrs	r2, r3
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	0a1b      	lsrs	r3, r3, #8
 800e158:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e15c:	431a      	orrs	r2, r3
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	0e1b      	lsrs	r3, r3, #24
 800e164:	431a      	orrs	r2, r3
 800e166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e168:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e16a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e16c:	7a13      	ldrb	r3, [r2, #8]
 800e16e:	f36f 0300 	bfc	r3, #0, #1
 800e172:	7213      	strb	r3, [r2, #8]
                        break;
 800e174:	e003      	b.n	800e17e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800e176:	4824      	ldr	r0, [pc, #144]	@ (800e208 <FreeRTOS_bind+0x188>)
 800e178:	f013 fd36 	bl	8021be8 <lUDPLoggingPrintf>
                    break;
 800e17c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	885b      	ldrh	r3, [r3, #2]
 800e182:	021b      	lsls	r3, r3, #8
 800e184:	b21a      	sxth	r2, r3
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	885b      	ldrh	r3, [r3, #2]
 800e18a:	0a1b      	lsrs	r3, r3, #8
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	b21b      	sxth	r3, r3
 800e190:	4313      	orrs	r3, r2
 800e192:	b21b      	sxth	r3, r3
 800e194:	b29a      	uxth	r2, r3
 800e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e198:	871a      	strh	r2, [r3, #56]	@ 0x38
 800e19a:	e009      	b.n	800e1b0 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800e19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19e:	2200      	movs	r2, #0
 800e1a0:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a4:	3328      	adds	r3, #40	@ 0x28
 800e1a6:	2210      	movs	r2, #16
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f014 f845 	bl	802223a <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e1b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e1b4:	f04f 31ff 	mov.w	r1, #4294967295
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fb f8a9 	bl	8009310 <xSendEventStructToIPTask>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d106      	bne.n	800e1d2 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800e1c4:	4811      	ldr	r0, [pc, #68]	@ (800e20c <FreeRTOS_bind+0x18c>)
 800e1c6:	f013 fd0f 	bl	8021be8 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800e1ca:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800e1ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1d0:	e010      	b.n	800e1f4 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d4:	6858      	ldr	r0, [r3, #4]
 800e1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	2300      	movs	r3, #0
 800e1de:	2201      	movs	r2, #1
 800e1e0:	2110      	movs	r1, #16
 800e1e2:	f7f4 fd0b 	bl	8002bfc <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	69db      	ldr	r3, [r3, #28]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d102      	bne.n	800e1f4 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e1ee:	f06f 0315 	mvn.w	r3, #21
 800e1f2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800e1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3738      	adds	r7, #56	@ 0x38
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	080255d4 	.word	0x080255d4
 800e204:	080256b0 	.word	0x080256b0
 800e208:	080256dc 	.word	0x080256dc
 800e20c:	08025704 	.word	0x08025704

0800e210 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800e21e:	2300      	movs	r3, #0
 800e220:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d004      	beq.n	800e232 <prvSocketBindAdd+0x22>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e22e:	2b06      	cmp	r3, #6
 800e230:	d024      	beq.n	800e27c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 fdf1 	bl	800ee20 <pxListFindListItemWithValue>
 800e23e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e240:	2b00      	cmp	r3, #0
 800e242:	d01b      	beq.n	800e27c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e24a:	2b06      	cmp	r3, #6
 800e24c:	d101      	bne.n	800e252 <prvSocketBindAdd+0x42>
 800e24e:	493e      	ldr	r1, [pc, #248]	@ (800e348 <prvSocketBindAdd+0x138>)
 800e250:	e000      	b.n	800e254 <prvSocketBindAdd+0x44>
 800e252:	493e      	ldr	r1, [pc, #248]	@ (800e34c <prvSocketBindAdd+0x13c>)
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	885b      	ldrh	r3, [r3, #2]
 800e258:	021b      	lsls	r3, r3, #8
 800e25a:	b21a      	sxth	r2, r3
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	885b      	ldrh	r3, [r3, #2]
 800e260:	0a1b      	lsrs	r3, r3, #8
 800e262:	b29b      	uxth	r3, r3
 800e264:	b21b      	sxth	r3, r3
 800e266:	4313      	orrs	r3, r2
 800e268:	b21b      	sxth	r3, r3
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	461a      	mov	r2, r3
 800e26e:	4838      	ldr	r0, [pc, #224]	@ (800e350 <prvSocketBindAdd+0x140>)
 800e270:	f013 fcba 	bl	8021be8 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800e274:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800e278:	617b      	str	r3, [r7, #20]
 800e27a:	e060      	b.n	800e33e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	885b      	ldrh	r3, [r3, #2]
 800e280:	461a      	mov	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	885b      	ldrh	r3, [r3, #2]
 800e28a:	021b      	lsls	r3, r3, #8
 800e28c:	b21a      	sxth	r2, r3
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	885b      	ldrh	r3, [r3, #2]
 800e292:	0a1b      	lsrs	r3, r3, #8
 800e294:	b29b      	uxth	r3, r3
 800e296:	b21b      	sxth	r3, r3
 800e298:	4313      	orrs	r3, r2
 800e29a:	b21b      	sxth	r3, r3
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	785b      	ldrb	r3, [r3, #1]
 800e2a6:	2b0a      	cmp	r3, #10
 800e2a8:	d109      	bne.n	800e2be <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	2210      	movs	r2, #16
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	f013 feb2 	bl	8022020 <memcpy>
 800e2bc:	e00c      	b.n	800e2d8 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d008      	beq.n	800e2d8 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	2107      	movs	r1, #7
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fe ffb7 	bl	800d240 <FreeRTOS_FindEndPointOnIP_IPv4>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d019      	beq.n	800e314 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	061a      	lsls	r2, r3, #24
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	021b      	lsls	r3, r3, #8
 800e2f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e2f4:	431a      	orrs	r2, r3
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	0a1b      	lsrs	r3, r3, #8
 800e2fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e302:	431a      	orrs	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	0e1b      	lsrs	r3, r3, #24
 800e30c:	431a      	orrs	r2, r3
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	629a      	str	r2, [r3, #40]	@ 0x28
 800e312:	e00a      	b.n	800e32a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	785b      	ldrb	r3, [r3, #1]
 800e318:	2b0a      	cmp	r3, #10
 800e31a:	d006      	beq.n	800e32a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	3328      	adds	r3, #40	@ 0x28
 800e320:	2210      	movs	r2, #16
 800e322:	2100      	movs	r1, #0
 800e324:	4618      	mov	r0, r3
 800e326:	f013 ff88 	bl	802223a <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800e32a:	f7f5 fef9 	bl	8004120 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	330c      	adds	r3, #12
 800e332:	4619      	mov	r1, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7f4 fe4c 	bl	8002fd2 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800e33a:	f7f5 feff 	bl	800413c <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800e33e:	697b      	ldr	r3, [r7, #20]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3718      	adds	r7, #24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	08025728 	.word	0x08025728
 800e34c:	0802572c 	.word	0x0802572c
 800e350:	08025730 	.word	0x08025730

0800e354 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b08e      	sub	sp, #56	@ 0x38
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800e362:	2300      	movs	r3, #0
 800e364:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f001 feba 	bl	80100e4 <xSocketValid>
 800e370:	4603      	mov	r3, r0
 800e372:	2b01      	cmp	r3, #1
 800e374:	d004      	beq.n	800e380 <vSocketBind+0x2c>
 800e376:	f240 716f 	movw	r1, #1903	@ 0x76f
 800e37a:	4828      	ldr	r0, [pc, #160]	@ (800e41c <vSocketBind+0xc8>)
 800e37c:	f7f3 f9f6 	bl	800176c <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e386:	2b06      	cmp	r3, #6
 800e388:	d102      	bne.n	800e390 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800e38a:	4b25      	ldr	r3, [pc, #148]	@ (800e420 <vSocketBind+0xcc>)
 800e38c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e38e:	e001      	b.n	800e394 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800e390:	4b24      	ldr	r3, [pc, #144]	@ (800e424 <vSocketBind+0xd0>)
 800e392:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800e394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e396:	2b00      	cmp	r3, #0
 800e398:	d115      	bne.n	800e3c6 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800e39a:	f107 0314 	add.w	r3, r7, #20
 800e39e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800e3a0:	2218      	movs	r2, #24
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3a6:	f013 ff48 	bl	802223a <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	7a1b      	ldrb	r3, [r3, #8]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d003      	beq.n	800e3c0 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ba:	220a      	movs	r2, #10
 800e3bc:	705a      	strb	r2, [r3, #1]
 800e3be:	e002      	b.n	800e3c6 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c2:	2202      	movs	r2, #2
 800e3c4:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800e3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d104      	bne.n	800e3d6 <vSocketBind+0x82>
 800e3cc:	f240 719b 	movw	r1, #1947	@ 0x79b
 800e3d0:	4812      	ldr	r0, [pc, #72]	@ (800e41c <vSocketBind+0xc8>)
 800e3d2:	f7f3 f9cb 	bl	800176c <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800e3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d8:	885b      	ldrh	r3, [r3, #2]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d111      	bne.n	800e402 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 fcc3 	bl	800ed70 <prvGetPrivatePortNumber>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f0:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800e3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f4:	885b      	ldrh	r3, [r3, #2]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d103      	bne.n	800e402 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800e3fa:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800e3fe:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800e400:	e006      	b.n	800e410 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f7ff ff01 	bl	800e210 <prvSocketBindAdd>
 800e40e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800e410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e412:	4618      	mov	r0, r3
 800e414:	3738      	adds	r7, #56	@ 0x38
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	080255d4 	.word	0x080255d4
 800e420:	20001444 	.word	0x20001444
 800e424:	20001430 	.word	0x20001430

0800e428 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b086      	sub	sp, #24
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800e434:	230a      	movs	r3, #10
 800e436:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 fe51 	bl	80100e4 <xSocketValid>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d102      	bne.n	800e44e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800e448:	2300      	movs	r3, #0
 800e44a:	617b      	str	r3, [r7, #20]
 800e44c:	e02f      	b.n	800e4ae <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e454:	2b06      	cmp	r3, #6
 800e456:	d10c      	bne.n	800e472 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	2200      	movs	r2, #0
 800e464:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e470:	e00a      	b.n	800e488 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e478:	2b11      	cmp	r3, #17
 800e47a:	d105      	bne.n	800e488 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	2200      	movs	r2, #0
 800e480:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2200      	movs	r2, #0
 800e486:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e488:	f107 0308 	add.w	r3, r7, #8
 800e48c:	f04f 31ff 	mov.w	r1, #4294967295
 800e490:	4618      	mov	r0, r3
 800e492:	f7fa ff3d 	bl	8009310 <xSendEventStructToIPTask>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d106      	bne.n	800e4aa <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800e49c:	4806      	ldr	r0, [pc, #24]	@ (800e4b8 <FreeRTOS_closesocket+0x90>)
 800e49e:	f013 fba3 	bl	8021be8 <lUDPLoggingPrintf>
            xResult = -1;
 800e4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	e001      	b.n	800e4ae <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800e4ae:	697b      	ldr	r3, [r7, #20]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	08025754 	.word	0x08025754

0800e4bc <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800e4bc:	b590      	push	{r4, r7, lr}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e4ca:	2b06      	cmp	r3, #6
 800e4cc:	d129      	bne.n	800e522 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d005      	beq.n	800e4e4 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f008 fcda 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f006 fee6 	bl	80152bc <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d005      	beq.n	800e506 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e500:	4618      	mov	r0, r3
 800e502:	f7f7 fe63 	bl	80061cc <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d005      	beq.n	800e51c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e516:	4618      	mov	r0, r3
 800e518:	f7f7 fe58 	bl	80061cc <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f8bd 	bl	800e69c <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	69db      	ldr	r3, [r3, #28]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d008      	beq.n	800e53c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800e52a:	f7f5 fdf9 	bl	8004120 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	330c      	adds	r3, #12
 800e532:	4618      	mov	r0, r3
 800e534:	f7f4 fdaa 	bl	800308c <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800e538:	f7f5 fe00 	bl	800413c <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e542:	2b11      	cmp	r3, #17
 800e544:	d10f      	bne.n	800e566 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e546:	e00a      	b.n	800e55e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	4618      	mov	r0, r3
 800e554:	f7f4 fd9a 	bl	800308c <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f008 fc9d 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1f0      	bne.n	800e548 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d004      	beq.n	800e578 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	f7f4 fca8 	bl	8002ec8 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e57e:	2b06      	cmp	r3, #6
 800e580:	d10c      	bne.n	800e59c <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 f816 	bl	800e5b4 <prvSocketProps>
 800e588:	4604      	mov	r4, r0
 800e58a:	f008 fcd7 	bl	8016f3c <uxGetNumberOfFreeNetworkBuffers>
 800e58e:	4602      	mov	r2, r0
 800e590:	4b06      	ldr	r3, [pc, #24]	@ (800e5ac <vSocketClose+0xf0>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4621      	mov	r1, r4
 800e596:	4806      	ldr	r0, [pc, #24]	@ (800e5b0 <vSocketClose+0xf4>)
 800e598:	f013 fb26 	bl	8021be8 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7f7 fe15 	bl	80061cc <vPortFree>

    return NULL;
 800e5a2:	2300      	movs	r3, #0
} /* Tested */
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd90      	pop	{r4, r7, pc}
 800e5ac:	20001444 	.word	0x20001444
 800e5b0:	08025774 	.word	0x08025774

0800e5b4 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af04      	add	r7, sp, #16
 800e5ba:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e5c2:	2b06      	cmp	r3, #6
 800e5c4:	d132      	bne.n	800e62c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	7a1b      	ldrb	r3, [r3, #8]
 800e5ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <prvSocketProps+0x26>
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d014      	beq.n	800e602 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800e5d8:	e050      	b.n	800e67c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e5e2:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e5ee:	9202      	str	r2, [sp, #8]
 800e5f0:	9301      	str	r3, [sp, #4]
 800e5f2:	9000      	str	r0, [sp, #0]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4a24      	ldr	r2, [pc, #144]	@ (800e688 <prvSocketProps+0xd4>)
 800e5f8:	215c      	movs	r1, #92	@ 0x5c
 800e5fa:	4824      	ldr	r0, [pc, #144]	@ (800e68c <prvSocketProps+0xd8>)
 800e5fc:	f014 fb20 	bl	8022c40 <snprintf>
                            break;
 800e600:	e03c      	b.n	800e67c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e60c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e618:	9202      	str	r2, [sp, #8]
 800e61a:	9301      	str	r3, [sp, #4]
 800e61c:	9000      	str	r0, [sp, #0]
 800e61e:	460b      	mov	r3, r1
 800e620:	4a1b      	ldr	r2, [pc, #108]	@ (800e690 <prvSocketProps+0xdc>)
 800e622:	215c      	movs	r1, #92	@ 0x5c
 800e624:	4819      	ldr	r0, [pc, #100]	@ (800e68c <prvSocketProps+0xd8>)
 800e626:	f014 fb0b 	bl	8022c40 <snprintf>
                            break;
 800e62a:	e027      	b.n	800e67c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e632:	2b11      	cmp	r3, #17
 800e634:	d122      	bne.n	800e67c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	7a1b      	ldrb	r3, [r3, #8]
 800e63a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b00      	cmp	r3, #0
 800e642:	d002      	beq.n	800e64a <prvSocketProps+0x96>
 800e644:	2b01      	cmp	r3, #1
 800e646:	d00c      	beq.n	800e662 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800e648:	e018      	b.n	800e67c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	4613      	mov	r3, r2
 800e656:	4a0f      	ldr	r2, [pc, #60]	@ (800e694 <prvSocketProps+0xe0>)
 800e658:	215c      	movs	r1, #92	@ 0x5c
 800e65a:	480c      	ldr	r0, [pc, #48]	@ (800e68c <prvSocketProps+0xd8>)
 800e65c:	f014 faf0 	bl	8022c40 <snprintf>
                        break;
 800e660:	e00c      	b.n	800e67c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	4613      	mov	r3, r2
 800e670:	4a09      	ldr	r2, [pc, #36]	@ (800e698 <prvSocketProps+0xe4>)
 800e672:	215c      	movs	r1, #92	@ 0x5c
 800e674:	4805      	ldr	r0, [pc, #20]	@ (800e68c <prvSocketProps+0xd8>)
 800e676:	f014 fae3 	bl	8022c40 <snprintf>
                        break;
 800e67a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800e67c:	4b03      	ldr	r3, [pc, #12]	@ (800e68c <prvSocketProps+0xd8>)
    }
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	080257a8 	.word	0x080257a8
 800e68c:	200013d4 	.word	0x200013d4
 800e690:	080257c8 	.word	0x080257c8
 800e694:	080257e8 	.word	0x080257e8
 800e698:	080257f8 	.word	0x080257f8

0800e69c <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b088      	sub	sp, #32
 800e6a0:	af02      	add	r7, sp, #8
 800e6a2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800e6a4:	4b3c      	ldr	r3, [pc, #240]	@ (800e798 <prvTCPSetSocketCount+0xfc>)
 800e6a6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e6ac:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d12b      	bne.n	800e710 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800e6be:	e022      	b.n	800e706 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d017      	beq.n	800e706 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e6da:	89fa      	ldrh	r2, [r7, #14]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d112      	bne.n	800e706 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e6e6:	f003 0304 	and.w	r3, r3, #4
 800e6ea:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d107      	bne.n	800e700 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e6f6:	f003 0302 	and.w	r3, r3, #2
 800e6fa:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800e700:	68b8      	ldr	r0, [r7, #8]
 800e702:	f7ff fedb 	bl	800e4bc <vSocketClose>
            while( pxIterator != pxEnd )
 800e706:	697a      	ldr	r2, [r7, #20]
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d1d8      	bne.n	800e6c0 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800e70e:	e03e      	b.n	800e78e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	617b      	str	r3, [r7, #20]
 800e716:	e036      	b.n	800e786 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e724:	2b01      	cmp	r3, #1
 800e726:	d12b      	bne.n	800e780 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e72c:	89fa      	ldrh	r2, [r7, #14]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d126      	bne.n	800e780 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d021      	beq.n	800e780 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e742:	3b01      	subs	r3, #1
 800e744:	b29a      	uxth	r2, r3
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e750:	4619      	mov	r1, r3
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e758:	461a      	mov	r2, r3
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800e760:	4618      	mov	r0, r3
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d101      	bne.n	800e770 <prvTCPSetSocketCount+0xd4>
 800e76c:	4b0b      	ldr	r3, [pc, #44]	@ (800e79c <prvTCPSetSocketCount+0x100>)
 800e76e:	e000      	b.n	800e772 <prvTCPSetSocketCount+0xd6>
 800e770:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a0 <prvTCPSetSocketCount+0x104>)
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	4603      	mov	r3, r0
 800e776:	480b      	ldr	r0, [pc, #44]	@ (800e7a4 <prvTCPSetSocketCount+0x108>)
 800e778:	f013 fa36 	bl	8021be8 <lUDPLoggingPrintf>
                    break;
 800e77c:	bf00      	nop
    }
 800e77e:	e006      	b.n	800e78e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800e786:	697a      	ldr	r2, [r7, #20]
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d1c4      	bne.n	800e718 <prvTCPSetSocketCount+0x7c>
    }
 800e78e:	bf00      	nop
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	2000144c 	.word	0x2000144c
 800e79c:	08025808 	.word	0x08025808
 800e7a0:	0802580c 	.word	0x0802580c
 800e7a4:	08025810 	.word	0x08025810

0800e7a8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b086      	sub	sp, #24
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e7ba:	2b06      	cmp	r3, #6
 800e7bc:	d00d      	beq.n	800e7da <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	d101      	bne.n	800e7c8 <prvSockopt_so_buffer+0x20>
 800e7c4:	4b23      	ldr	r3, [pc, #140]	@ (800e854 <prvSockopt_so_buffer+0xac>)
 800e7c6:	e000      	b.n	800e7ca <prvSockopt_so_buffer+0x22>
 800e7c8:	4b23      	ldr	r3, [pc, #140]	@ (800e858 <prvSockopt_so_buffer+0xb0>)
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4823      	ldr	r0, [pc, #140]	@ (800e85c <prvSockopt_so_buffer+0xb4>)
 800e7ce:	f013 fa0b 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e7d2:	f06f 0315 	mvn.w	r3, #21
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	e036      	b.n	800e848 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	2b04      	cmp	r3, #4
 800e7de:	d104      	bne.n	800e7ea <prvSockopt_so_buffer+0x42>
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d107      	bne.n	800e7fa <prvSockopt_so_buffer+0x52>
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	2b05      	cmp	r3, #5
 800e7ee:	d112      	bne.n	800e816 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00d      	beq.n	800e816 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	2b04      	cmp	r3, #4
 800e7fe:	d101      	bne.n	800e804 <prvSockopt_so_buffer+0x5c>
 800e800:	4b14      	ldr	r3, [pc, #80]	@ (800e854 <prvSockopt_so_buffer+0xac>)
 800e802:	e000      	b.n	800e806 <prvSockopt_so_buffer+0x5e>
 800e804:	4b14      	ldr	r3, [pc, #80]	@ (800e858 <prvSockopt_so_buffer+0xb0>)
 800e806:	4619      	mov	r1, r3
 800e808:	4815      	ldr	r0, [pc, #84]	@ (800e860 <prvSockopt_so_buffer+0xb8>)
 800e80a:	f013 f9ed 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e80e:	f06f 0315 	mvn.w	r3, #21
 800e812:	617b      	str	r3, [r7, #20]
 800e814:	e018      	b.n	800e848 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	2b04      	cmp	r3, #4
 800e820:	d10c      	bne.n	800e83c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800e828:	4619      	mov	r1, r3
 800e82a:	6938      	ldr	r0, [r7, #16]
 800e82c:	f7fb fe92 	bl	800a554 <FreeRTOS_round_up>
 800e830:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800e83a:	e003      	b.n	800e844 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	693a      	ldr	r2, [r7, #16]
 800e840:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800e848:	697b      	ldr	r3, [r7, #20]
    }
 800e84a:	4618      	mov	r0, r3
 800e84c:	3718      	adds	r7, #24
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	0802583c 	.word	0x0802583c
 800e858:	08025840 	.word	0x08025840
 800e85c:	08025844 	.word	0x08025844
 800e860:	08025868 	.word	0x08025868

0800e864 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	2b09      	cmp	r3, #9
 800e878:	d002      	beq.n	800e880 <prvSetOptionCallback+0x1c>
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	2b0a      	cmp	r3, #10
 800e87e:	d102      	bne.n	800e886 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800e880:	2311      	movs	r3, #17
 800e882:	613b      	str	r3, [r7, #16]
 800e884:	e001      	b.n	800e88a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800e886:	2306      	movs	r3, #6
 800e888:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	b2db      	uxtb	r3, r3
 800e894:	429a      	cmp	r2, r3
 800e896:	d002      	beq.n	800e89e <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e898:	f06f 0315 	mvn.w	r3, #21
 800e89c:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d131      	bne.n	800e908 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	3b06      	subs	r3, #6
 800e8a8:	2b04      	cmp	r3, #4
 800e8aa:	d829      	bhi.n	800e900 <prvSetOptionCallback+0x9c>
 800e8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e8b4 <prvSetOptionCallback+0x50>)
 800e8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b2:	bf00      	nop
 800e8b4:	0800e8c9 	.word	0x0800e8c9
 800e8b8:	0800e8d5 	.word	0x0800e8d5
 800e8bc:	0800e8e1 	.word	0x0800e8e1
 800e8c0:	0800e8ed 	.word	0x0800e8ed
 800e8c4:	0800e8f7 	.word	0x0800e8f7
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800e8d2:	e019      	b.n	800e908 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800e8de:	e013      	b.n	800e908 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	689a      	ldr	r2, [r3, #8]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800e8ea:	e00d      	b.n	800e908 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	68da      	ldr	r2, [r3, #12]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800e8f4:	e008      	b.n	800e908 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	691a      	ldr	r2, [r3, #16]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800e8fe:	e003      	b.n	800e908 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e900:	f06f 0315 	mvn.w	r3, #21
 800e904:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e906:	bf00      	nop
            }
        }

        return xReturn;
 800e908:	697b      	ldr	r3, [r7, #20]
    }
 800e90a:	4618      	mov	r0, r3
 800e90c:	371c      	adds	r7, #28
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop

0800e918 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e922:	f06f 0315 	mvn.w	r3, #21
 800e926:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	3354      	adds	r3, #84	@ 0x54
 800e92c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e934:	2b06      	cmp	r3, #6
 800e936:	d003      	beq.n	800e940 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800e938:	4825      	ldr	r0, [pc, #148]	@ (800e9d0 <prvSetOptionTCPWindows+0xb8>)
 800e93a:	f013 f955 	bl	8021be8 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e93e:	e042      	b.n	800e9c6 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	461a      	mov	r2, r3
 800e948:	2104      	movs	r1, #4
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7ff ff2c 	bl	800e7a8 <prvSockopt_so_buffer>
 800e950:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d133      	bne.n	800e9c0 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3308      	adds	r3, #8
 800e95c:	461a      	mov	r2, r3
 800e95e:	2105      	movs	r1, #5
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff ff21 	bl	800e7a8 <prvSockopt_so_buffer>
 800e966:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d12a      	bne.n	800e9c4 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	461a      	mov	r2, r3
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	461a      	mov	r2, r3
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800e98c:	f003 0301 	and.w	r3, r3, #1
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d017      	beq.n	800e9c6 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	8bd2      	ldrh	r2, [r2, #30]
 800e9a0:	fb03 f202 	mul.w	r2, r3, r2
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	8bd2      	ldrh	r2, [r2, #30]
 800e9b4:	fb03 f202 	mul.w	r2, r3, r2
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e9be:	e002      	b.n	800e9c6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e9c0:	bf00      	nop
 800e9c2:	e000      	b.n	800e9c6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e9c4:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800e9c6:	697b      	ldr	r3, [r7, #20]
    }
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3718      	adds	r7, #24
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	08025890 	.word	0x08025890

0800e9d4 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e9de:	f06f 0315 	mvn.w	r3, #21
 800e9e2:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e9ee:	2b06      	cmp	r3, #6
 800e9f0:	d003      	beq.n	800e9fa <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800e9f2:	4813      	ldr	r0, [pc, #76]	@ (800ea40 <prvSetOptionLowHighWater+0x6c>)
 800e9f4:	f013 f8f8 	bl	8021be8 <lUDPLoggingPrintf>
 800e9f8:	e01c      	b.n	800ea34 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d206      	bcs.n	800ea14 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	685a      	ldr	r2, [r3, #4]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d903      	bls.n	800ea1c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800ea14:	480b      	ldr	r0, [pc, #44]	@ (800ea44 <prvSetOptionLowHighWater+0x70>)
 800ea16:	f013 f8e7 	bl	8021be8 <lUDPLoggingPrintf>
 800ea1a:	e00b      	b.n	800ea34 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	685a      	ldr	r2, [r3, #4]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ea34:	68fb      	ldr	r3, [r7, #12]
    }
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	080258b4 	.word	0x080258b4
 800ea44:	080258e8 	.word	0x080258e8

0800ea48 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea52:	f06f 0315 	mvn.w	r3, #21
 800ea56:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ea5e:	2b06      	cmp	r3, #6
 800ea60:	d126      	bne.n	800eab0 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d007      	beq.n	800ea7a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800ea70:	f043 0302 	orr.w	r3, r3, #2
 800ea74:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800ea78:	e006      	b.n	800ea88 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800ea80:	f36f 0341 	bfc	r3, #1, #1
 800ea84:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ea8e:	2b04      	cmp	r3, #4
 800ea90:	d90c      	bls.n	800eaac <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f001 faba 	bl	801000c <FreeRTOS_tx_size>
 800ea98:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d006      	beq.n	800eaac <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800eaa6:	2006      	movs	r0, #6
 800eaa8:	f7fa fc1c 	bl	80092e4 <xSendEventToIPTask>
            }

            xReturn = 0;
 800eaac:	2300      	movs	r3, #0
 800eaae:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800eab0:	68fb      	ldr	r3, [r7, #12]
    }
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eac4:	f06f 0315 	mvn.w	r3, #21
 800eac8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ead0:	2b06      	cmp	r3, #6
 800ead2:	d122      	bne.n	800eb1a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d007      	beq.n	800eaec <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800eae2:	f043 0304 	orr.w	r3, r3, #4
 800eae6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800eaea:	e006      	b.n	800eafa <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800eaf2:	f36f 0382 	bfc	r3, #2, #1
 800eaf6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800eb00:	f043 0301 	orr.w	r3, r3, #1
 800eb04:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800eb10:	2006      	movs	r0, #6
 800eb12:	f7fa fbe7 	bl	80092e4 <xSendEventToIPTask>
            xReturn = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
    }
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800eb24:	b480      	push	{r7}
 800eb26:	b087      	sub	sp, #28
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d110      	bne.n	800eb5e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eb42:	2b11      	cmp	r3, #17
 800eb44:	d107      	bne.n	800eb56 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d902      	bls.n	800eb56 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800eb50:	f241 3388 	movw	r3, #5000	@ 0x1388
 800eb54:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	697a      	ldr	r2, [r7, #20]
 800eb5a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800eb5c:	e002      	b.n	800eb64 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	697a      	ldr	r2, [r7, #20]
 800eb62:	621a      	str	r2, [r3, #32]
}
 800eb64:	bf00      	nop
 800eb66:	371c      	adds	r7, #28
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eb7a:	f06f 0315 	mvn.w	r3, #21
 800eb7e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eb86:	2b06      	cmp	r3, #6
 800eb88:	d114      	bne.n	800ebb4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d007      	beq.n	800eba2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800eb98:	f043 0308 	orr.w	r3, r3, #8
 800eb9c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800eba0:	e006      	b.n	800ebb0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800eba8:	f36f 03c3 	bfc	r3, #3, #1
 800ebac:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
    }
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3714      	adds	r7, #20
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800ebc2:	b480      	push	{r7}
 800ebc4:	b085      	sub	sp, #20
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ebcc:	f06f 0315 	mvn.w	r3, #21
 800ebd0:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ebd8:	2b06      	cmp	r3, #6
 800ebda:	d114      	bne.n	800ec06 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d007      	beq.n	800ebf4 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ebea:	f043 0310 	orr.w	r3, r3, #16
 800ebee:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800ebf2:	e006      	b.n	800ec02 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ebfa:	f36f 1304 	bfc	r3, #4, #1
 800ebfe:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ec06:	68fb      	ldr	r3, [r7, #12]
    }
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3714      	adds	r7, #20
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
 800ec20:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ec22:	f06f 0315 	mvn.w	r3, #21
 800ec26:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800ec2c:	6938      	ldr	r0, [r7, #16]
 800ec2e:	f001 fa59 	bl	80100e4 <xSocketValid>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	f040 8093 	bne.w	800ed60 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b12      	cmp	r3, #18
 800ec3e:	f200 808b 	bhi.w	800ed58 <FreeRTOS_setsockopt+0x144>
 800ec42:	a201      	add	r2, pc, #4	@ (adr r2, 800ec48 <FreeRTOS_setsockopt+0x34>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec95 	.word	0x0800ec95
 800ec4c:	0800eca5 	.word	0x0800eca5
 800ec50:	0800ecb5 	.word	0x0800ecb5
 800ec54:	0800ecf5 	.word	0x0800ecf5
 800ec58:	0800ed0f 	.word	0x0800ed0f
 800ec5c:	0800ed0f 	.word	0x0800ed0f
 800ec60:	0800ece7 	.word	0x0800ece7
 800ec64:	0800ece7 	.word	0x0800ece7
 800ec68:	0800ece7 	.word	0x0800ece7
 800ec6c:	0800ece7 	.word	0x0800ece7
 800ec70:	0800ece7 	.word	0x0800ece7
 800ec74:	0800ed29 	.word	0x0800ed29
 800ec78:	0800ed35 	.word	0x0800ed35
 800ec7c:	0800ed1d 	.word	0x0800ed1d
 800ec80:	0800ed41 	.word	0x0800ed41
 800ec84:	0800ed4d 	.word	0x0800ed4d
 800ec88:	0800ed59 	.word	0x0800ed59
 800ec8c:	0800ed59 	.word	0x0800ed59
 800ec90:	0800ed03 	.word	0x0800ed03
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800ec94:	2200      	movs	r2, #0
 800ec96:	6839      	ldr	r1, [r7, #0]
 800ec98:	6938      	ldr	r0, [r7, #16]
 800ec9a:	f7ff ff43 	bl	800eb24 <prvSetOptionTimeout>
                xReturn = 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	617b      	str	r3, [r7, #20]
                break;
 800eca2:	e060      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800eca4:	2201      	movs	r2, #1
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	6938      	ldr	r0, [r7, #16]
 800ecaa:	f7ff ff3b 	bl	800eb24 <prvSetOptionTimeout>
                xReturn = 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	617b      	str	r3, [r7, #20]
                break;
 800ecb2:	e058      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d109      	bne.n	800ecce <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ecc0:	f023 0302 	bic.w	r3, r3, #2
 800ecc4:	b2da      	uxtb	r2, r3
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800eccc:	e008      	b.n	800ece0 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ecd4:	f043 0302 	orr.w	r3, r3, #2
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800ece0:	2300      	movs	r3, #0
 800ece2:	617b      	str	r3, [r7, #20]
                break;
 800ece4:	e03f      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	6938      	ldr	r0, [r7, #16]
 800ecec:	f7ff fdba 	bl	800e864 <prvSetOptionCallback>
 800ecf0:	6178      	str	r0, [r7, #20]
                        break;
 800ecf2:	e038      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	617b      	str	r3, [r7, #20]
                        break;
 800ed00:	e031      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6938      	ldr	r0, [r7, #16]
 800ed06:	f7ff fe65 	bl	800e9d4 <prvSetOptionLowHighWater>
 800ed0a:	6178      	str	r0, [r7, #20]
                        break;
 800ed0c:	e02b      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800ed0e:	683a      	ldr	r2, [r7, #0]
 800ed10:	6879      	ldr	r1, [r7, #4]
 800ed12:	6938      	ldr	r0, [r7, #16]
 800ed14:	f7ff fd48 	bl	800e7a8 <prvSockopt_so_buffer>
 800ed18:	6178      	str	r0, [r7, #20]
                        break;
 800ed1a:	e024      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	6938      	ldr	r0, [r7, #16]
 800ed20:	f7ff fdfa 	bl	800e918 <prvSetOptionTCPWindows>
 800ed24:	6178      	str	r0, [r7, #20]
                        break;
 800ed26:	e01e      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6938      	ldr	r0, [r7, #16]
 800ed2c:	f7ff ff20 	bl	800eb70 <prvSetOptionReuseListenSocket>
 800ed30:	6178      	str	r0, [r7, #20]
                        break;
 800ed32:	e018      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6938      	ldr	r0, [r7, #16]
 800ed38:	f7ff ff43 	bl	800ebc2 <prvSetOptionCloseAfterSend>
 800ed3c:	6178      	str	r0, [r7, #20]
                        break;
 800ed3e:	e012      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6938      	ldr	r0, [r7, #16]
 800ed44:	f7ff fe80 	bl	800ea48 <prvSetOptionSetFullSize>
 800ed48:	6178      	str	r0, [r7, #20]
                        break;
 800ed4a:	e00c      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6938      	ldr	r0, [r7, #16]
 800ed50:	f7ff feb3 	bl	800eaba <prvSetOptionStopRX>
 800ed54:	6178      	str	r0, [r7, #20]
                        break;
 800ed56:	e006      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800ed58:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800ed5c:	617b      	str	r3, [r7, #20]
                break;
 800ed5e:	e002      	b.n	800ed66 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ed60:	f06f 0315 	mvn.w	r3, #21
 800ed64:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800ed66:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800ed78:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800ed7c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800ed7e:	89fb      	ldrh	r3, [r7, #14]
 800ed80:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b06      	cmp	r3, #6
 800ed8e:	d102      	bne.n	800ed96 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800ed90:	4b21      	ldr	r3, [pc, #132]	@ (800ee18 <prvGetPrivatePortNumber+0xa8>)
 800ed92:	613b      	str	r3, [r7, #16]
 800ed94:	e001      	b.n	800ed9a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800ed96:	4b21      	ldr	r3, [pc, #132]	@ (800ee1c <prvGetPrivatePortNumber+0xac>)
 800ed98:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800ed9a:	f107 0308 	add.w	r3, r7, #8
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7f2 fdae 	bl	8001900 <xApplicationGetRandomNumber>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d030      	beq.n	800ee0c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800edae:	89fa      	ldrh	r2, [r7, #14]
 800edb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800edb4:	fb01 f202 	mul.w	r2, r1, r2
 800edb8:	1a9b      	subs	r3, r3, r2
 800edba:	b29b      	uxth	r3, r3
 800edbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800edc0:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800edc2:	8abb      	ldrh	r3, [r7, #20]
 800edc4:	021b      	lsls	r3, r3, #8
 800edc6:	b21a      	sxth	r2, r3
 800edc8:	8abb      	ldrh	r3, [r7, #20]
 800edca:	0a1b      	lsrs	r3, r3, #8
 800edcc:	b29b      	uxth	r3, r3
 800edce:	b21b      	sxth	r3, r3
 800edd0:	4313      	orrs	r3, r2
 800edd2:	b21b      	sxth	r3, r3
 800edd4:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800edd6:	4619      	mov	r1, r3
 800edd8:	6938      	ldr	r0, [r7, #16]
 800edda:	f000 f821 	bl	800ee20 <pxListFindListItemWithValue>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d10a      	bne.n	800edfa <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800ede4:	8abb      	ldrh	r3, [r7, #20]
 800ede6:	021b      	lsls	r3, r3, #8
 800ede8:	b21a      	sxth	r2, r3
 800edea:	8abb      	ldrh	r3, [r7, #20]
 800edec:	0a1b      	lsrs	r3, r3, #8
 800edee:	b29b      	uxth	r3, r3
 800edf0:	b21b      	sxth	r3, r3
 800edf2:	4313      	orrs	r3, r2
 800edf4:	b21b      	sxth	r3, r3
 800edf6:	82bb      	strh	r3, [r7, #20]
            break;
 800edf8:	e009      	b.n	800ee0e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800edfe:	8afb      	ldrh	r3, [r7, #22]
 800ee00:	3b01      	subs	r3, #1
 800ee02:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800ee04:	8afb      	ldrh	r3, [r7, #22]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1c7      	bne.n	800ed9a <prvGetPrivatePortNumber+0x2a>
 800ee0a:	e000      	b.n	800ee0e <prvGetPrivatePortNumber+0x9e>
            break;
 800ee0c:	bf00      	nop

    return usResult;
 800ee0e:	8abb      	ldrh	r3, [r7, #20]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	20001444 	.word	0x20001444
 800ee1c:	20001430 	.word	0x20001430

0800ee20 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800ee2e:	f7fa fe0b 	bl	8009a48 <xIPIsNetworkTaskReady>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d018      	beq.n	800ee6a <pxListFindListItemWithValue+0x4a>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d015      	beq.n	800ee6a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	3308      	adds	r3, #8
 800ee42:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	613b      	str	r3, [r7, #16]
 800ee4a:	e00a      	b.n	800ee62 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d102      	bne.n	800ee5c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	617b      	str	r3, [r7, #20]
                break;
 800ee5a:	e006      	b.n	800ee6a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800ee62:	693a      	ldr	r2, [r7, #16]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d1f0      	bne.n	800ee4c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800ee6a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3718      	adds	r7, #24
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	480b      	ldr	r0, [pc, #44]	@ (800eeb0 <pxUDPSocketLookup+0x3c>)
 800ee84:	f7ff ffcc 	bl	800ee20 <pxListFindListItemWithValue>
 800ee88:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00a      	beq.n	800eea6 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d104      	bne.n	800eea6 <pxUDPSocketLookup+0x32>
 800ee9c:	f640 4111 	movw	r1, #3089	@ 0xc11
 800eea0:	4804      	ldr	r0, [pc, #16]	@ (800eeb4 <pxUDPSocketLookup+0x40>)
 800eea2:	f7f2 fc63 	bl	800176c <vAssertCalled>
    }

    return pxSocket;
 800eea6:	68fb      	ldr	r3, [r7, #12]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	20001430 	.word	0x20001430
 800eeb4:	080255d4 	.word	0x080255d4

0800eeb8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b08b      	sub	sp, #44	@ 0x2c
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800eec6:	1d3b      	adds	r3, r7, #4
 800eec8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800eece:	2300      	movs	r3, #0
 800eed0:	627b      	str	r3, [r7, #36]	@ 0x24
 800eed2:	e062      	b.n	800ef9a <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800eed4:	697a      	ldr	r2, [r7, #20]
 800eed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed8:	4413      	add	r3, r2
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800eede:	2302      	movs	r3, #2
 800eee0:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800eee2:	7ffa      	ldrb	r2, [r7, #31]
 800eee4:	4b32      	ldr	r3, [pc, #200]	@ (800efb0 <FreeRTOS_inet_ntoa+0xf8>)
 800eee6:	fba3 1302 	umull	r1, r3, r3, r2
 800eeea:	08d9      	lsrs	r1, r3, #3
 800eeec:	460b      	mov	r3, r1
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	440b      	add	r3, r1
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	b2d9      	uxtb	r1, r3
 800eef8:	f107 020c 	add.w	r2, r7, #12
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	4413      	add	r3, r2
 800ef00:	460a      	mov	r2, r1
 800ef02:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800ef04:	7ffb      	ldrb	r3, [r7, #31]
 800ef06:	4a2a      	ldr	r2, [pc, #168]	@ (800efb0 <FreeRTOS_inet_ntoa+0xf8>)
 800ef08:	fba2 2303 	umull	r2, r3, r2, r3
 800ef0c:	08db      	lsrs	r3, r3, #3
 800ef0e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d003      	beq.n	800ef1e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800ef1c:	e7e1      	b.n	800eee2 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800ef1e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800ef20:	7ffb      	ldrb	r3, [r7, #31]
 800ef22:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ef24:	2300      	movs	r3, #0
 800ef26:	61bb      	str	r3, [r7, #24]
 800ef28:	e009      	b.n	800ef3e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800ef2a:	f107 020c 	add.w	r2, r7, #12
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	4413      	add	r3, r2
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d106      	bne.n	800ef46 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	61bb      	str	r3, [r7, #24]
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d9f2      	bls.n	800ef2a <FreeRTOS_inet_ntoa+0x72>
 800ef44:	e012      	b.n	800ef6c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800ef46:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ef48:	e010      	b.n	800ef6c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800ef4a:	f107 020c 	add.w	r2, r7, #12
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	4413      	add	r3, r2
 800ef52:	781a      	ldrb	r2, [r3, #0]
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	440b      	add	r3, r1
 800ef5a:	3230      	adds	r2, #48	@ 0x30
 800ef5c:	b2d2      	uxtb	r2, r2
 800ef5e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	3301      	adds	r3, #1
 800ef64:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	61bb      	str	r3, [r7, #24]
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d9eb      	bls.n	800ef4a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800ef72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d805      	bhi.n	800ef84 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	222e      	movs	r2, #46	@ 0x2e
 800ef80:	701a      	strb	r2, [r3, #0]
 800ef82:	e004      	b.n	800ef8e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800ef84:	683a      	ldr	r2, [r7, #0]
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	4413      	add	r3, r2
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800ef8e:	6a3b      	ldr	r3, [r7, #32]
 800ef90:	3301      	adds	r3, #1
 800ef92:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ef94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef96:	3301      	adds	r3, #1
 800ef98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef9c:	2b03      	cmp	r3, #3
 800ef9e:	d999      	bls.n	800eed4 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800efa0:	693b      	ldr	r3, [r7, #16]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	372c      	adds	r7, #44	@ 0x2c
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr
 800efae:	bf00      	nop
 800efb0:	cccccccd 	.word	0xcccccccd

0800efb4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
 800efc0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d003      	beq.n	800efd0 <FreeRTOS_inet_ntop+0x1c>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b0a      	cmp	r3, #10
 800efcc:	d007      	beq.n	800efde <FreeRTOS_inet_ntop+0x2a>
 800efce:	e00d      	b.n	800efec <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800efd0:	683a      	ldr	r2, [r7, #0]
 800efd2:	6879      	ldr	r1, [r7, #4]
 800efd4:	68b8      	ldr	r0, [r7, #8]
 800efd6:	f7fb fc8d 	bl	800a8f4 <FreeRTOS_inet_ntop4>
 800efda:	6178      	str	r0, [r7, #20]
                break;
 800efdc:	e009      	b.n	800eff2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	68b8      	ldr	r0, [r7, #8]
 800efe4:	f7fc f9c1 	bl	800b36a <FreeRTOS_inet_ntop6>
 800efe8:	6178      	str	r0, [r7, #20]
                break;
 800efea:	e002      	b.n	800eff2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800efec:	2300      	movs	r3, #0
 800efee:	617b      	str	r3, [r7, #20]
            break;
 800eff0:	bf00      	nop
    }

    return pcResult;
 800eff2:	697b      	ldr	r3, [r7, #20]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	7a1b      	ldrb	r3, [r3, #8]
 800f00e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f012:	b2db      	uxtb	r3, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d002      	beq.n	800f01e <FreeRTOS_GetLocalAddress+0x22>
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d02a      	beq.n	800f072 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800f01c:	e044      	b.n	800f0a8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	2202      	movs	r2, #2
 800f022:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	2218      	movs	r2, #24
 800f028:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f02e:	061a      	lsls	r2, r3, #24
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f034:	021b      	lsls	r3, r3, #8
 800f036:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f03a:	431a      	orrs	r2, r3
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f040:	0a1b      	lsrs	r3, r3, #8
 800f042:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f046:	431a      	orrs	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f04c:	0e1b      	lsrs	r3, r3, #24
 800f04e:	431a      	orrs	r2, r3
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f058:	021b      	lsls	r3, r3, #8
 800f05a:	b21a      	sxth	r2, r3
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f060:	0a1b      	lsrs	r3, r3, #8
 800f062:	b29b      	uxth	r3, r3
 800f064:	b21b      	sxth	r3, r3
 800f066:	4313      	orrs	r3, r2
 800f068:	b21b      	sxth	r3, r3
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	805a      	strh	r2, [r3, #2]
                break;
 800f070:	e01a      	b.n	800f0a8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	220a      	movs	r2, #10
 800f076:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	f103 0008 	add.w	r0, r3, #8
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3328      	adds	r3, #40	@ 0x28
 800f082:	2210      	movs	r2, #16
 800f084:	4619      	mov	r1, r3
 800f086:	f012 ffcb 	bl	8022020 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f08e:	021b      	lsls	r3, r3, #8
 800f090:	b21a      	sxth	r2, r3
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f096:	0a1b      	lsrs	r3, r3, #8
 800f098:	b29b      	uxth	r3, r3
 800f09a:	b21b      	sxth	r3, r3
 800f09c:	4313      	orrs	r3, r2
 800f09e:	b21b      	sxth	r3, r3
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	805a      	strh	r2, [r3, #2]
                break;
 800f0a6:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800f0a8:	2318      	movs	r3, #24
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b084      	sub	sp, #16
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d006      	beq.n	800f0d0 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	f7f4 f958 	bl	8003380 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d015      	beq.n	800f104 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	0a1b      	lsrs	r3, r3, #8
 800f0de:	f003 030f 	and.w	r3, r3, #15
 800f0e2:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00c      	beq.n	800f104 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	431a      	orrs	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68f9      	ldr	r1, [r7, #12]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7f3 fe62 	bl	8002dc8 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00b      	beq.n	800f130 <vSocketWakeUpUser+0x7e>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d007      	beq.n	800f130 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	685a      	ldr	r2, [r3, #4]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4619      	mov	r1, r3
 800f12a:	4610      	mov	r0, r2
 800f12c:	f7f3 fe4c 	bl	8002dc8 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]
}
 800f136:	bf00      	nop
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800f13e:	b480      	push	{r7}
 800f140:	b085      	sub	sp, #20
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f14c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800f14e:	7afb      	ldrb	r3, [r7, #11]
 800f150:	2b08      	cmp	r3, #8
 800f152:	d006      	beq.n	800f162 <bMayConnect+0x24>
 800f154:	2b08      	cmp	r3, #8
 800f156:	dc0b      	bgt.n	800f170 <bMayConnect+0x32>
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d002      	beq.n	800f162 <bMayConnect+0x24>
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	d003      	beq.n	800f168 <bMayConnect+0x2a>
 800f160:	e006      	b.n	800f170 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	60fb      	str	r3, [r7, #12]
                break;
 800f166:	e007      	b.n	800f178 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800f168:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800f16c:	60fb      	str	r3, [r7, #12]
                break;
 800f16e:	e003      	b.n	800f178 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800f170:	f06f 030a 	mvn.w	r3, #10
 800f174:	60fb      	str	r3, [r7, #12]
                break;
 800f176:	bf00      	nop
        }

        return xResult;
 800f178:	68fb      	ldr	r3, [r7, #12]
    }
 800f17a:	4618      	mov	r0, r3
 800f17c:	3714      	adds	r7, #20
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
	...

0800f188 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d103      	bne.n	800f1a4 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f19c:	f06f 0315 	mvn.w	r3, #21
 800f1a0:	60fb      	str	r3, [r7, #12]
 800f1a2:	e01f      	b.n	800f1e4 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	2106      	movs	r1, #6
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f7fe fc71 	bl	800da90 <prvValidSocket>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d103      	bne.n	800f1bc <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800f1b4:	f06f 0308 	mvn.w	r3, #8
 800f1b8:	60fb      	str	r3, [r7, #12]
 800f1ba:	e013      	b.n	800f1e4 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 ff49 	bl	8010054 <FreeRTOS_issocketconnected>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dd03      	ble.n	800f1d0 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800f1c8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800f1cc:	60fb      	str	r3, [r7, #12]
 800f1ce:	e009      	b.n	800f1e4 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	69db      	ldr	r3, [r3, #28]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d105      	bne.n	800f1e4 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800f1d8:	2200      	movs	r2, #0
 800f1da:	2100      	movs	r1, #0
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f7fe ff4f 	bl	800e080 <FreeRTOS_bind>
 800f1e2:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f040 80a6 	bne.w	800f338 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f7ff ffa6 	bl	800f13e <bMayConnect>
 800f1f2:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f040 809e 	bne.w	800f338 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f202:	f36f 03c3 	bfc	r3, #3, #1
 800f206:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	785b      	ldrb	r3, [r3, #1]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d027      	beq.n	800f26a <prvTCPConnectStart+0xe2>
 800f21a:	2b0a      	cmp	r3, #10
 800f21c:	d168      	bne.n	800f2f0 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	7a13      	ldrb	r3, [r2, #8]
 800f222:	f043 0301 	orr.w	r3, r3, #1
 800f226:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f22c:	4618      	mov	r0, r3
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	f103 0108 	add.w	r1, r3, #8
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	885b      	ldrh	r3, [r3, #2]
 800f238:	021b      	lsls	r3, r3, #8
 800f23a:	b21a      	sxth	r2, r3
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	885b      	ldrh	r3, [r3, #2]
 800f240:	0a1b      	lsrs	r3, r3, #8
 800f242:	b29b      	uxth	r3, r3
 800f244:	b21b      	sxth	r3, r3
 800f246:	4313      	orrs	r3, r2
 800f248:	b21b      	sxth	r3, r3
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	460a      	mov	r2, r1
 800f24e:	4601      	mov	r1, r0
 800f250:	483c      	ldr	r0, [pc, #240]	@ (800f344 <prvTCPConnectStart+0x1bc>)
 800f252:	f012 fcc9 	bl	8021be8 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	3308      	adds	r3, #8
 800f260:	2210      	movs	r2, #16
 800f262:	4619      	mov	r1, r3
 800f264:	f012 fedc 	bl	8022020 <memcpy>
                            break;
 800f268:	e046      	b.n	800f2f8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	7a13      	ldrb	r3, [r2, #8]
 800f26e:	f36f 0300 	bfc	r3, #0, #1
 800f272:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f278:	4618      	mov	r0, r3
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	061a      	lsls	r2, r3, #24
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	021b      	lsls	r3, r3, #8
 800f286:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f28a:	431a      	orrs	r2, r3
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	0a1b      	lsrs	r3, r3, #8
 800f292:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f296:	431a      	orrs	r2, r3
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	0e1b      	lsrs	r3, r3, #24
 800f29e:	ea42 0103 	orr.w	r1, r2, r3
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	885b      	ldrh	r3, [r3, #2]
 800f2a6:	021b      	lsls	r3, r3, #8
 800f2a8:	b21a      	sxth	r2, r3
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	885b      	ldrh	r3, [r3, #2]
 800f2ae:	0a1b      	lsrs	r3, r3, #8
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	b21b      	sxth	r3, r3
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	b21b      	sxth	r3, r3
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	460a      	mov	r2, r1
 800f2bc:	4601      	mov	r1, r0
 800f2be:	4822      	ldr	r0, [pc, #136]	@ (800f348 <prvTCPConnectStart+0x1c0>)
 800f2c0:	f012 fc92 	bl	8021be8 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	061a      	lsls	r2, r3, #24
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	021b      	lsls	r3, r3, #8
 800f2d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f2d4:	431a      	orrs	r2, r3
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	0a1b      	lsrs	r3, r3, #8
 800f2dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f2e0:	431a      	orrs	r2, r3
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	0e1b      	lsrs	r3, r3, #24
 800f2e8:	431a      	orrs	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800f2ee:	e003      	b.n	800f2f8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800f2f0:	4816      	ldr	r0, [pc, #88]	@ (800f34c <prvTCPConnectStart+0x1c4>)
 800f2f2:	f012 fc79 	bl	8021be8 <lUDPLoggingPrintf>
                        break;
 800f2f6:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	885b      	ldrh	r3, [r3, #2]
 800f2fc:	021b      	lsls	r3, r3, #8
 800f2fe:	b21a      	sxth	r2, r3
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	885b      	ldrh	r3, [r3, #2]
 800f304:	0a1b      	lsrs	r3, r3, #8
 800f306:	b29b      	uxth	r3, r3
 800f308:	b21b      	sxth	r3, r3
 800f30a:	4313      	orrs	r3, r2
 800f30c:	b21b      	sxth	r3, r3
 800f30e:	b29a      	uxth	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800f316:	2102      	movs	r1, #2
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f001 fc59 	bl	8010bd0 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2201      	movs	r2, #1
 800f322:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800f326:	2006      	movs	r0, #6
 800f328:	f7f9 ffdc 	bl	80092e4 <xSendEventToIPTask>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d002      	beq.n	800f338 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800f332:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800f336:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800f338:	68fb      	ldr	r3, [r7, #12]
    }
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	08025914 	.word	0x08025914
 800f348:	0802593c 	.word	0x0802593c
 800f34c:	08025960 	.word	0x08025960

0800f350 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800f350:	b580      	push	{r7, lr}
 800f352:	b094      	sub	sp, #80	@ 0x50
 800f354:	af02      	add	r7, sp, #8
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f360:	2300      	movs	r3, #0
 800f362:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f364:	f06f 0315 	mvn.w	r3, #21
 800f368:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d013      	beq.n	800f398 <FreeRTOS_connect+0x48>
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	785b      	ldrb	r3, [r3, #1]
 800f374:	2b0a      	cmp	r3, #10
 800f376:	d00f      	beq.n	800f398 <FreeRTOS_connect+0x48>
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	785b      	ldrb	r3, [r3, #1]
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d00b      	beq.n	800f398 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800f380:	f107 0314 	add.w	r3, r7, #20
 800f384:	2218      	movs	r2, #24
 800f386:	68b9      	ldr	r1, [r7, #8]
 800f388:	4618      	mov	r0, r3
 800f38a:	f012 fe49 	bl	8022020 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800f38e:	2302      	movs	r3, #2
 800f390:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800f392:	f107 0314 	add.w	r3, r7, #20
 800f396:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800f398:	68b9      	ldr	r1, [r7, #8]
 800f39a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f39c:	f7ff fef4 	bl	800f188 <prvTCPConnectStart>
 800f3a0:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800f3a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d146      	bne.n	800f436 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800f3a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d110      	bne.n	800f3d0 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800f3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800f3b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d103      	bne.n	800f3c2 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800f3ba:	f06f 030a 	mvn.w	r3, #10
 800f3be:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800f3c0:	e039      	b.n	800f436 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800f3c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7f5 fb64 	bl	8004a98 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800f3d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f3d2:	f000 fe3f 	bl	8010054 <FreeRTOS_issocketconnected>
 800f3d6:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800f3d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	db2a      	blt.n	800f434 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800f3de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	dd02      	ble.n	800f3ea <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f3e8:	e025      	b.n	800f436 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f3ea:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f3ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f3f2:	4611      	mov	r1, r2
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7f5 fb87 	bl	8004b08 <xTaskCheckForTimeOut>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d003      	beq.n	800f408 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800f400:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800f404:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f406:	e016      	b.n	800f436 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f40a:	6858      	ldr	r0, [r3, #4]
 800f40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	2300      	movs	r3, #0
 800f412:	2201      	movs	r2, #1
 800f414:	2128      	movs	r1, #40	@ 0x28
 800f416:	f7f3 fbf1 	bl	8002bfc <xEventGroupWaitBits>
 800f41a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800f41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f41e:	f003 0320 	and.w	r3, r3, #32
 800f422:	2b00      	cmp	r3, #0
 800f424:	d0c0      	beq.n	800f3a8 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f426:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f42a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800f42c:	4804      	ldr	r0, [pc, #16]	@ (800f440 <FreeRTOS_connect+0xf0>)
 800f42e:	f012 fbdb 	bl	8021be8 <lUDPLoggingPrintf>
                    break;
 800f432:	e000      	b.n	800f436 <FreeRTOS_connect+0xe6>
                    break;
 800f434:	bf00      	nop
                }
            }
        }

        return xResult;
 800f436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800f438:	4618      	mov	r0, r3
 800f43a:	3748      	adds	r7, #72	@ 0x48
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	0802598c 	.word	0x0802598c

0800f444 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800f444:	b580      	push	{r7, lr}
 800f446:	b08a      	sub	sp, #40	@ 0x28
 800f448:	af02      	add	r7, sp, #8
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d13b      	bne.n	800f4d4 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	089b      	lsrs	r3, r3, #2
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	68ba      	ldr	r2, [r7, #8]
 800f474:	2100      	movs	r1, #0
 800f476:	f001 fa04 	bl	8010882 <uxStreamBufferGet>
 800f47a:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800f47c:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f484:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d02b      	beq.n	800f4e6 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f494:	4618      	mov	r0, r3
 800f496:	f001 f8c5 	bl	8010624 <uxStreamBufferFrontSpace>
 800f49a:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d31e      	bcc.n	800f4e6 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f4ae:	f36f 13c7 	bfc	r3, #7, #1
 800f4b2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f4bc:	f043 0301 	orr.w	r3, r3, #1
 800f4c0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f4cc:	2006      	movs	r0, #6
 800f4ce:	f7f9 ff09 	bl	80092e4 <xSendEventToIPTask>
 800f4d2:	e008      	b.n	800f4e6 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f4da:	68b9      	ldr	r1, [r7, #8]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f001 f930 	bl	8010742 <uxStreamBufferGetPtr>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800f4e6:	69fb      	ldr	r3, [r7, #28]
    }
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3720      	adds	r7, #32
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08e      	sub	sp, #56	@ 0x38
 800f4f4:	af02      	add	r7, sp, #8
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f500:	2300      	movs	r3, #0
 800f502:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f504:	2300      	movs	r3, #0
 800f506:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d05f      	beq.n	800f5d2 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f518:	4618      	mov	r0, r3
 800f51a:	f001 f894 	bl	8010646 <uxStreamBufferGetSize>
 800f51e:	4603      	mov	r3, r0
 800f520:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800f522:	e056      	b.n	800f5d2 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f52a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800f52e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f532:	2b00      	cmp	r3, #0
 800f534:	d007      	beq.n	800f546 <prvRecvWait+0x56>
 800f536:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f53a:	2b08      	cmp	r3, #8
 800f53c:	d003      	beq.n	800f546 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800f53e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f542:	2b09      	cmp	r3, #9
 800f544:	d10e      	bne.n	800f564 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800f546:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f54a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f552:	f003 0308 	and.w	r3, r3, #8
 800f556:	b2db      	uxtb	r3, r3
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d03e      	beq.n	800f5da <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800f55c:	f06f 030b 	mvn.w	r3, #11
 800f560:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800f562:	e03a      	b.n	800f5da <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800f564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f566:	2b00      	cmp	r3, #0
 800f568:	d111      	bne.n	800f58e <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6a1b      	ldr	r3, [r3, #32]
 800f56e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d033      	beq.n	800f5de <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f003 0310 	and.w	r3, r3, #16
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d130      	bne.n	800f5e2 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f580:	2301      	movs	r3, #1
 800f582:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f584:	f107 0314 	add.w	r3, r7, #20
 800f588:	4618      	mov	r0, r3
 800f58a:	f7f5 fa85 	bl	8004a98 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f58e:	f107 021c 	add.w	r2, r7, #28
 800f592:	f107 0314 	add.w	r3, r7, #20
 800f596:	4611      	mov	r1, r2
 800f598:	4618      	mov	r0, r3
 800f59a:	f7f5 fab5 	bl	8004b08 <xTaskCheckForTimeOut>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d120      	bne.n	800f5e6 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6858      	ldr	r0, [r3, #4]
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	2161      	movs	r1, #97	@ 0x61
 800f5b2:	f7f3 fb23 	bl	8002bfc <xEventGroupWaitBits>
 800f5b6:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d007      	beq.n	800f5d2 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f001 f83c 	bl	8010646 <uxStreamBufferGetSize>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800f5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d0a5      	beq.n	800f524 <prvRecvWait+0x34>
 800f5d8:	e006      	b.n	800f5e8 <prvRecvWait+0xf8>
                break;
 800f5da:	bf00      	nop
 800f5dc:	e004      	b.n	800f5e8 <prvRecvWait+0xf8>
                    break;
 800f5de:	bf00      	nop
 800f5e0:	e002      	b.n	800f5e8 <prvRecvWait+0xf8>
                    break;
 800f5e2:	bf00      	nop
 800f5e4:	e000      	b.n	800f5e8 <prvRecvWait+0xf8>
                break;
 800f5e6:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5ec:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800f5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3730      	adds	r7, #48	@ 0x30
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b088      	sub	sp, #32
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
 800f604:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800f606:	2300      	movs	r3, #0
 800f608:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f60e:	2300      	movs	r3, #0
 800f610:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f612:	2201      	movs	r2, #1
 800f614:	2106      	movs	r1, #6
 800f616:	69b8      	ldr	r0, [r7, #24]
 800f618:	f7fe fa3a 	bl	800da90 <prvValidSocket>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d103      	bne.n	800f62a <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f622:	f06f 0315 	mvn.w	r3, #21
 800f626:	61fb      	str	r3, [r7, #28]
 800f628:	e01d      	b.n	800f666 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	f003 0301 	and.w	r3, r3, #1
 800f630:	2b00      	cmp	r3, #0
 800f632:	d006      	beq.n	800f642 <FreeRTOS_recv+0x4a>
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d103      	bne.n	800f642 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f63a:	f06f 0315 	mvn.w	r3, #21
 800f63e:	61fb      	str	r3, [r7, #28]
 800f640:	e011      	b.n	800f666 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800f642:	f107 0314 	add.w	r3, r7, #20
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	4619      	mov	r1, r3
 800f64a:	69b8      	ldr	r0, [r7, #24]
 800f64c:	f7ff ff50 	bl	800f4f0 <prvRecvWait>
 800f650:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	2b00      	cmp	r3, #0
 800f656:	dd06      	ble.n	800f666 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	68b9      	ldr	r1, [r7, #8]
 800f65e:	69b8      	ldr	r0, [r7, #24]
 800f660:	f7ff fef0 	bl	800f444 <prvRecvData>
 800f664:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800f666:	69fb      	ldr	r3, [r7, #28]
    }
 800f668:	4618      	mov	r0, r3
 800f66a:	3720      	adds	r7, #32
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800f67a:	2301      	movs	r3, #1
 800f67c:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f67e:	2201      	movs	r2, #1
 800f680:	2106      	movs	r1, #6
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7fe fa04 	bl	800da90 <prvValidSocket>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d103      	bne.n	800f696 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f68e:	f06f 0315 	mvn.w	r3, #21
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	e040      	b.n	800f718 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f69c:	f003 0308 	and.w	r3, r3, #8
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d003      	beq.n	800f6ae <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f6a6:	f06f 030b 	mvn.w	r3, #11
 800f6aa:	60fb      	str	r3, [r7, #12]
 800f6ac:	e034      	b.n	800f718 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d009      	beq.n	800f6cc <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f6be:	2b08      	cmp	r3, #8
 800f6c0:	d004      	beq.n	800f6cc <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f6c8:	2b09      	cmp	r3, #9
 800f6ca:	d103      	bne.n	800f6d4 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f6cc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f6d0:	60fb      	str	r3, [r7, #12]
 800f6d2:	e021      	b.n	800f718 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f6da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	60fb      	str	r3, [r7, #12]
 800f6e8:	e016      	b.n	800f718 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d102      	bne.n	800f6f6 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	e010      	b.n	800f718 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10b      	bne.n	800f718 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f700:	2100      	movs	r1, #0
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fac6 	bl	800fc94 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d102      	bne.n	800f718 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f712:	f06f 030b 	mvn.w	r3, #11
 800f716:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800f718:	68fb      	ldr	r3, [r7, #12]
    }
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800f722:	b580      	push	{r7, lr}
 800f724:	b088      	sub	sp, #32
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800f72c:	2300      	movs	r3, #0
 800f72e:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800f734:	2300      	movs	r3, #0
 800f736:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	2200      	movs	r2, #0
 800f73c:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800f73e:	2200      	movs	r2, #0
 800f740:	2106      	movs	r1, #6
 800f742:	6978      	ldr	r0, [r7, #20]
 800f744:	f7fe f9a4 	bl	800da90 <prvValidSocket>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d135      	bne.n	800f7ba <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f754:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d10f      	bne.n	800f77c <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f762:	f003 0308 	and.w	r3, r3, #8
 800f766:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d107      	bne.n	800f77c <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f76c:	2100      	movs	r1, #0
 800f76e:	6978      	ldr	r0, [r7, #20]
 800f770:	f000 fa90 	bl	800fc94 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f77a:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d01b      	beq.n	800f7ba <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800f782:	69b8      	ldr	r0, [r7, #24]
 800f784:	f000 ff3d 	bl	8010602 <uxStreamBufferGetSpace>
 800f788:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	691a      	ldr	r2, [r3, #16]
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d803      	bhi.n	800f7a6 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800f79e:	68fa      	ldr	r2, [r7, #12]
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	e002      	b.n	800f7ac <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800f7a6:	693a      	ldr	r2, [r7, #16]
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	3310      	adds	r3, #16
 800f7b2:	69ba      	ldr	r2, [r7, #24]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800f7ba:	69fb      	ldr	r3, [r7, #28]
    }
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3720      	adds	r7, #32
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b090      	sub	sp, #64	@ 0x40
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f000 ff0e 	bl	8010602 <uxStreamBufferGetSpace>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800f7f2:	e08f      	b.n	800f914 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800f7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	dd4b      	ble.n	800f892 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800f7fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f802:	429a      	cmp	r2, r3
 800f804:	dd01      	ble.n	800f80a <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800f806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f808:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f810:	f003 0310 	and.w	r3, r3, #16
 800f814:	b2db      	uxtb	r3, r3
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00e      	beq.n	800f838 <prvTCPSendLoop+0x74>
 800f81a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f81e:	429a      	cmp	r2, r3
 800f820:	d10a      	bne.n	800f838 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800f822:	2301      	movs	r3, #1
 800f824:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800f826:	f7f4 fc7b 	bl	8004120 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f834:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800f83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f842:	2100      	movs	r1, #0
 800f844:	f000 ff9d 	bl	8010782 <uxStreamBufferAdd>
 800f848:	4603      	mov	r3, r0
 800f84a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800f84c:	6a3b      	ldr	r3, [r7, #32]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d101      	bne.n	800f856 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800f852:	f7f4 fc73 	bl	800413c <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2201      	movs	r2, #1
 800f85a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800f85e:	f7fa fc99 	bl	800a194 <xIsCallingFromIPTask>
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d102      	bne.n	800f86e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f868:	2006      	movs	r0, #6
 800f86a:	f7f9 fd3b 	bl	80092e4 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800f86e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800f876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f87a:	4413      	add	r3, r2
 800f87c:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800f87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f880:	2b00      	cmp	r3, #0
 800f882:	d053      	beq.n	800f92c <prvTCPSendLoop+0x168>
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d050      	beq.n	800f92c <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800f88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f88e:	4413      	add	r3, r2
 800f890:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800f892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f894:	2b00      	cmp	r3, #0
 800f896:	d119      	bne.n	800f8cc <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f89c:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800f89e:	f7fa fc79 	bl	800a194 <xIsCallingFromIPTask>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d001      	beq.n	800f8ac <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d035      	beq.n	800f91e <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	f003 0310 	and.w	r3, r3, #16
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d132      	bne.n	800f922 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f8c0:	f107 0314 	add.w	r3, r7, #20
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7f5 f8e7 	bl	8004a98 <vTaskSetTimeOutState>
 800f8ca:	e00a      	b.n	800f8e2 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f8cc:	f107 021c 	add.w	r2, r7, #28
 800f8d0:	f107 0314 	add.w	r3, r7, #20
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7f5 f916 	bl	8004b08 <xTaskCheckForTimeOut>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d121      	bne.n	800f926 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6858      	ldr	r0, [r3, #4]
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	2122      	movs	r1, #34	@ 0x22
 800f8f0:	f7f3 f984 	bl	8002bfc <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f8f4:	6879      	ldr	r1, [r7, #4]
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f7ff feba 	bl	800f670 <prvTCPSendCheck>
 800f8fc:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800f8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f900:	2b00      	cmp	r3, #0
 800f902:	db12      	blt.n	800f92a <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f90a:	4618      	mov	r0, r3
 800f90c:	f000 fe79 	bl	8010602 <uxStreamBufferGetSpace>
 800f910:	4603      	mov	r3, r0
 800f912:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800f914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f916:	2b00      	cmp	r3, #0
 800f918:	f73f af6c 	bgt.w	800f7f4 <prvTCPSendLoop+0x30>
 800f91c:	e006      	b.n	800f92c <prvTCPSendLoop+0x168>
                    break;
 800f91e:	bf00      	nop
 800f920:	e004      	b.n	800f92c <prvTCPSendLoop+0x168>
                    break;
 800f922:	bf00      	nop
 800f924:	e002      	b.n	800f92c <prvTCPSendLoop+0x168>
                    break;
 800f926:	bf00      	nop
 800f928:	e000      	b.n	800f92c <prvTCPSendLoop+0x168>
                break;
 800f92a:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800f92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800f92e:	4618      	mov	r0, r3
 800f930:	3738      	adds	r7, #56	@ 0x38
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
	...

0800f938 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800f938:	b580      	push	{r7, lr}
 800f93a:	b086      	sub	sp, #24
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
 800f944:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f94a:	6879      	ldr	r1, [r7, #4]
 800f94c:	6938      	ldr	r0, [r7, #16]
 800f94e:	f7ff fe8f 	bl	800f670 <prvTCPSendCheck>
 800f952:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	2b00      	cmp	r3, #0
 800f958:	dd24      	ble.n	800f9a4 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	68b9      	ldr	r1, [r7, #8]
 800f960:	6938      	ldr	r0, [r7, #16]
 800f962:	f7ff ff2f 	bl	800f7c4 <prvTCPSendLoop>
 800f966:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d11a      	bne.n	800f9a4 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f974:	2b05      	cmp	r3, #5
 800f976:	d903      	bls.n	800f980 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800f978:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f97c:	617b      	str	r3, [r7, #20]
 800f97e:	e011      	b.n	800f9a4 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f984:	2b17      	cmp	r3, #23
 800f986:	d00a      	beq.n	800f99e <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f98c:	4619      	mov	r1, r3
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f998:	4805      	ldr	r0, [pc, #20]	@ (800f9b0 <FreeRTOS_send+0x78>)
 800f99a:	f012 f925 	bl	8021be8 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800f99e:	f06f 031b 	mvn.w	r3, #27
 800f9a2:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800f9a4:	697b      	ldr	r3, [r7, #20]
    }
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	080259e4 	.word	0x080259e4

0800f9b4 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	2106      	movs	r1, #6
 800f9ca:	68b8      	ldr	r0, [r7, #8]
 800f9cc:	f7fe f860 	bl	800da90 <prvValidSocket>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d103      	bne.n	800f9de <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f9d6:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f9da:	60fb      	str	r3, [r7, #12]
 800f9dc:	e056      	b.n	800fa8c <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d008      	beq.n	800f9fa <FreeRTOS_listen+0x46>
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f9ee:	2b08      	cmp	r3, #8
 800f9f0:	d003      	beq.n	800f9fa <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f9f2:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f9f6:	60fb      	str	r3, [r7, #12]
 800f9f8:	e048      	b.n	800fa8c <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800fa00:	f7fa fd78 	bl	800a4f4 <FreeRTOS_min_int32>
 800fa04:	4603      	mov	r3, r0
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fa14:	f003 0308 	and.w	r3, r3, #8
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d032      	beq.n	800fa84 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d005      	beq.n	800fa34 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 fe2b 	bl	801068a <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d005      	beq.n	800fa4a <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 fe20 	bl	801068a <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	33aa      	adds	r3, #170	@ 0xaa
 800fa4e:	225a      	movs	r2, #90	@ 0x5a
 800fa50:	2100      	movs	r1, #0
 800fa52:	4618      	mov	r0, r3
 800fa54:	f012 fbf1 	bl	802223a <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800fa5e:	22c0      	movs	r2, #192	@ 0xc0
 800fa60:	2100      	movs	r1, #0
 800fa62:	4618      	mov	r0, r3
 800fa64:	f012 fbe9 	bl	802223a <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	3368      	adds	r3, #104	@ 0x68
 800fa6c:	2204      	movs	r2, #4
 800fa6e:	2100      	movs	r1, #0
 800fa70:	4618      	mov	r0, r3
 800fa72:	f012 fbe2 	bl	802223a <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fa7c:	f043 0308 	orr.w	r3, r3, #8
 800fa80:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800fa84:	2101      	movs	r1, #1
 800fa86:	68b8      	ldr	r0, [r7, #8]
 800fa88:	f001 f8a2 	bl	8010bd0 <vTCPStateChange>
        }

        return xResult;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
    }
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b084      	sub	sp, #16
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
 800fa9e:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800faa4:	2201      	movs	r2, #1
 800faa6:	2106      	movs	r1, #6
 800faa8:	68b8      	ldr	r0, [r7, #8]
 800faaa:	f7fd fff1 	bl	800da90 <prvValidSocket>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d103      	bne.n	800fabc <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800fab4:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	e018      	b.n	800faee <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fac2:	2b05      	cmp	r3, #5
 800fac4:	d003      	beq.n	800face <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800fac6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800faca:	60fb      	str	r3, [r7, #12]
 800facc:	e00f      	b.n	800faee <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fad4:	f043 0320 	orr.w	r3, r3, #32
 800fad8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2201      	movs	r2, #1
 800fae0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fae4:	2006      	movs	r0, #6
 800fae6:	f7f9 fbfd 	bl	80092e4 <xSendEventToIPTask>
            xResult = 0;
 800faea:	2300      	movs	r3, #0
 800faec:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800faee:	68fb      	ldr	r3, [r7, #12]
    }
 800faf0:	4618      	mov	r0, r3
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b08a      	sub	sp, #40	@ 0x28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800fb00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb04:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800fb06:	f7f4 fc1d 	bl	8004344 <xTaskGetTickCount>
 800fb0a:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800fb0c:	4b32      	ldr	r3, [pc, #200]	@ (800fbd8 <xTCPTimerCheck+0xe0>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	69ba      	ldr	r2, [r7, #24]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800fb16:	4b31      	ldr	r3, [pc, #196]	@ (800fbdc <xTCPTimerCheck+0xe4>)
 800fb18:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800fb1a:	4b31      	ldr	r3, [pc, #196]	@ (800fbe0 <xTCPTimerCheck+0xe8>)
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800fb20:	4a2d      	ldr	r2, [pc, #180]	@ (800fbd8 <xTCPTimerCheck+0xe0>)
 800fb22:	69bb      	ldr	r3, [r7, #24]
 800fb24:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800fb26:	6a3b      	ldr	r3, [r7, #32]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d14b      	bne.n	800fbc4 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800fb30:	e048      	b.n	800fbc4 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d03a      	beq.n	800fbbe <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800fb4e:	461a      	mov	r2, r3
 800fb50:	6a3b      	ldr	r3, [r7, #32]
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d20a      	bcs.n	800fb6c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800fb5c:	6a3b      	ldr	r3, [r7, #32]
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800fb6a:	e00a      	b.n	800fb82 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800fb74:	6938      	ldr	r0, [r7, #16]
 800fb76:	f000 ff33 	bl	80109e0 <xTCPSocketCheck>
 800fb7a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	db1f      	blt.n	800fbc2 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d008      	beq.n	800fb9c <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d003      	beq.n	800fb98 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800fb90:	6938      	ldr	r0, [r7, #16]
 800fb92:	f7ff fa8e 	bl	800f0b2 <vSocketWakeUpUser>
 800fb96:	e001      	b.n	800fb9c <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00e      	beq.n	800fbc4 <xTCPTimerCheck+0xcc>
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800fbac:	461a      	mov	r2, r3
 800fbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d907      	bls.n	800fbc4 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800fbba:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbbc:	e002      	b.n	800fbc4 <xTCPTimerCheck+0xcc>
                continue;
 800fbbe:	bf00      	nop
 800fbc0:	e000      	b.n	800fbc4 <xTCPTimerCheck+0xcc>
                    continue;
 800fbc2:	bf00      	nop
        while( pxIterator != pxEnd )
 800fbc4:	69fa      	ldr	r2, [r7, #28]
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d1b2      	bne.n	800fb32 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3728      	adds	r7, #40	@ 0x28
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	20001458 	.word	0x20001458
 800fbdc:	2000144c 	.word	0x2000144c
 800fbe0:	20001444 	.word	0x20001444

0800fbe4 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800fbe4:	b082      	sub	sp, #8
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b088      	sub	sp, #32
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	6039      	str	r1, [r7, #0]
 800fbf0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fbf4:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	61bb      	str	r3, [r7, #24]
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800fc00:	4b23      	ldr	r3, [pc, #140]	@ (800fc90 <pxTCPSocketLookup+0xac>)
 800fc02:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	61fb      	str	r3, [r7, #28]
 800fc0a:	e02e      	b.n	800fc6a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d122      	bne.n	800fc64 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d102      	bne.n	800fc2e <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	617b      	str	r3, [r7, #20]
 800fc2c:	e01a      	b.n	800fc64 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800fc34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d113      	bne.n	800fc64 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d006      	beq.n	800fc50 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800fc42:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f7fb f9d4 	bl	800aff4 <pxTCPSocketLookup_IPv6>
 800fc4c:	61b8      	str	r0, [r7, #24]
 800fc4e:	e006      	b.n	800fc5e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d101      	bne.n	800fc5e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d107      	bne.n	800fc74 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800fc6a:	69fa      	ldr	r2, [r7, #28]
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d1cc      	bne.n	800fc0c <pxTCPSocketLookup+0x28>
 800fc72:	e000      	b.n	800fc76 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800fc74:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800fc76:	69bb      	ldr	r3, [r7, #24]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d101      	bne.n	800fc80 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800fc80:	69bb      	ldr	r3, [r7, #24]
    }
 800fc82:	4618      	mov	r0, r3
 800fc84:	3720      	adds	r7, #32
 800fc86:	46bd      	mov	sp, r7
 800fc88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc8c:	b002      	add	sp, #8
 800fc8e:	4770      	bx	lr
 800fc90:	2000144c 	.word	0x2000144c

0800fc94 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d048      	beq.n	800fd36 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800fca4:	2314      	movs	r3, #20
 800fca6:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800fca8:	2350      	movs	r3, #80	@ 0x50
 800fcaa:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800fcb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcbc:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d00f      	beq.n	800fce4 <prvTCPCreateStream+0x50>
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2b04      	cmp	r3, #4
 800fcc8:	d80c      	bhi.n	800fce4 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	4a40      	ldr	r2, [pc, #256]	@ (800fdd0 <prvTCPCreateStream+0x13c>)
 800fcd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fcd4:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	4a3d      	ldr	r2, [pc, #244]	@ (800fdd0 <prvTCPCreateStream+0x13c>)
 800fcdc:	00db      	lsls	r3, r3, #3
 800fcde:	4413      	add	r3, r2
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fcea:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10c      	bne.n	800fd10 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fcfc:	69ba      	ldr	r2, [r7, #24]
 800fcfe:	fb02 f303 	mul.w	r3, r2, r3
 800fd02:	4a34      	ldr	r2, [pc, #208]	@ (800fdd4 <prvTCPCreateStream+0x140>)
 800fd04:	fba2 2303 	umull	r2, r3, r2, r3
 800fd08:	095a      	lsrs	r2, r3, #5
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d111      	bne.n	800fd3e <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fd20:	697a      	ldr	r2, [r7, #20]
 800fd22:	fb02 f303 	mul.w	r3, r2, r3
 800fd26:	4a2b      	ldr	r2, [pc, #172]	@ (800fdd4 <prvTCPCreateStream+0x140>)
 800fd28:	fba2 2303 	umull	r2, r3, r2, r3
 800fd2c:	095a      	lsrs	r2, r3, #5
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800fd34:	e003      	b.n	800fd3e <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fd3c:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	3304      	adds	r3, #4
 800fd42:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	f023 0303 	bic.w	r3, r3, #3
 800fd4a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	3314      	adds	r3, #20
 800fd50:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f7f6 f966 	bl	8006024 <pvPortMalloc>
 800fd58:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d10e      	bne.n	800fd7e <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800fd60:	481d      	ldr	r0, [pc, #116]	@ (800fdd8 <prvTCPCreateStream+0x144>)
 800fd62:	f011 ff41 	bl	8021be8 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800fd6c:	f043 0308 	orr.w	r3, r3, #8
 800fd70:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800fd74:	2108      	movs	r1, #8
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 ff2a 	bl	8010bd0 <vTCPStateChange>
 800fd7c:	e022      	b.n	800fdc4 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800fd7e:	2214      	movs	r2, #20
 800fd80:	2100      	movs	r1, #0
 800fd82:	68b8      	ldr	r0, [r7, #8]
 800fd84:	f012 fa59 	bl	802223a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	69fa      	ldr	r2, [r7, #28]
 800fd8c:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800fd8e:	4b13      	ldr	r3, [pc, #76]	@ (800fddc <prvTCPCreateStream+0x148>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00a      	beq.n	800fdac <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d001      	beq.n	800fda0 <prvTCPCreateStream+0x10c>
 800fd9c:	2152      	movs	r1, #82	@ 0x52
 800fd9e:	e000      	b.n	800fda2 <prvTCPCreateStream+0x10e>
 800fda0:	2154      	movs	r1, #84	@ 0x54
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	69fa      	ldr	r2, [r7, #28]
 800fda6:	480e      	ldr	r0, [pc, #56]	@ (800fde0 <prvTCPCreateStream+0x14c>)
 800fda8:	f011 ff1e 	bl	8021be8 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d004      	beq.n	800fdbc <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68ba      	ldr	r2, [r7, #8]
 800fdb6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800fdba:	e003      	b.n	800fdc4 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	68ba      	ldr	r2, [r7, #8]
 800fdc0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 800fdc4:	68bb      	ldr	r3, [r7, #8]
    }
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3720      	adds	r7, #32
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	08027314 	.word	0x08027314
 800fdd4:	51eb851f 	.word	0x51eb851f
 800fdd8:	08025a0c 	.word	0x08025a0c
 800fddc:	20001488 	.word	0x20001488
 800fde0:	08025a30 	.word	0x08025a30

0800fde4 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08a      	sub	sp, #40	@ 0x28
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d006      	beq.n	800fe0c <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800fe06:	2300      	movs	r3, #0
 800fe08:	61fb      	str	r3, [r7, #28]
 800fe0a:	e009      	b.n	800fe20 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fe12:	f107 0214 	add.w	r2, r7, #20
 800fe16:	4611      	mov	r1, r2
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f000 fc92 	bl	8010742 <uxStreamBufferGetPtr>
 800fe1e:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d011      	beq.n	800fe4a <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fe2c:	6979      	ldr	r1, [r7, #20]
 800fe2e:	69ba      	ldr	r2, [r7, #24]
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	2200      	movs	r2, #0
 800fe42:	2100      	movs	r1, #0
 800fe44:	f000 fd1d 	bl	8010882 <uxStreamBufferGet>
        {
 800fe48:	e7d4      	b.n	800fdf4 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800fe4a:	bf00      	nop
 800fe4c:	3720      	adds	r7, #32
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b084      	sub	sp, #16
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fe60:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d121      	bne.n	800feae <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fe70:	4618      	mov	r0, r3
 800fe72:	f000 fbd7 	bl	8010624 <uxStreamBufferFrontSpace>
 800fe76:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d814      	bhi.n	800feae <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fe8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe8e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fe98:	f043 0301 	orr.w	r3, r3, #1
 800fe9c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fea8:	2006      	movs	r0, #6
 800feaa:	f7f9 fa1b 	bl	80092e4 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f043 0201 	orr.w	r2, r3, #1
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800febe:	f003 0301 	and.w	r3, r3, #1
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d005      	beq.n	800fed2 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800fed2:	bf00      	nop
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800fedc:	b5b0      	push	{r4, r5, r7, lr}
 800fede:	b08c      	sub	sp, #48	@ 0x30
 800fee0:	af04      	add	r7, sp, #16
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
 800fee8:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fef0:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800fef2:	2300      	movs	r3, #0
 800fef4:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <lTCPAddRxdata+0x28>
 800ff00:	2301      	movs	r3, #1
 800ff02:	e000      	b.n	800ff06 <lTCPAddRxdata+0x2a>
 800ff04:	2300      	movs	r3, #0
 800ff06:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10a      	bne.n	800ff28 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800ff12:	2101      	movs	r1, #1
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f7ff febd 	bl	800fc94 <prvTCPCreateStream>
 800ff1a:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d102      	bne.n	800ff28 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 800ff22:	f04f 33ff 	mov.w	r3, #4294967295
 800ff26:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	db41      	blt.n	800ffb2 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00f      	beq.n	800ff54 <lTCPAddRxdata+0x78>
 800ff34:	69f8      	ldr	r0, [r7, #28]
 800ff36:	f000 fb86 	bl	8010646 <uxStreamBufferGetSize>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d109      	bne.n	800ff54 <lTCPAddRxdata+0x78>
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d106      	bne.n	800ff54 <lTCPAddRxdata+0x78>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d003      	beq.n	800ff54 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800ff50:	2300      	movs	r3, #0
 800ff52:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	68b9      	ldr	r1, [r7, #8]
 800ff5a:	69f8      	ldr	r0, [r7, #28]
 800ff5c:	f000 fc11 	bl	8010782 <uxStreamBufferAdd>
 800ff60:	4603      	mov	r3, r0
 800ff62:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	69ba      	ldr	r2, [r7, #24]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d013      	beq.n	800ff94 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	681c      	ldr	r4, [r3, #0]
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	689d      	ldr	r5, [r3, #8]
 800ff74:	69f8      	ldr	r0, [r7, #28]
 800ff76:	f000 fb55 	bl	8010624 <uxStreamBufferFrontSpace>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	9303      	str	r3, [sp, #12]
 800ff82:	9202      	str	r2, [sp, #8]
 800ff84:	9501      	str	r5, [sp, #4]
 800ff86:	9400      	str	r4, [sp, #0]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	69ba      	ldr	r2, [r7, #24]
 800ff8c:	68b9      	ldr	r1, [r7, #8]
 800ff8e:	480b      	ldr	r0, [pc, #44]	@ (800ffbc <lTCPAddRxdata+0xe0>)
 800ff90:	f011 fe2a 	bl	8021be8 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10b      	bne.n	800ffb2 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d005      	beq.n	800ffac <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	6979      	ldr	r1, [r7, #20]
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f7ff ff1d 	bl	800fde4 <vTCPAddRxdata_Callback>
 800ffaa:	e002      	b.n	800ffb2 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7ff ff50 	bl	800fe52 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800ffb2:	69bb      	ldr	r3, [r7, #24]
    }
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3720      	adds	r7, #32
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bdb0      	pop	{r4, r5, r7, pc}
 800ffbc:	08025a6c 	.word	0x08025a6c

0800ffc0 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ffd2:	2b06      	cmp	r3, #6
 800ffd4:	d003      	beq.n	800ffde <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ffd6:	f06f 0315 	mvn.w	r3, #21
 800ffda:	60fb      	str	r3, [r7, #12]
 800ffdc:	e011      	b.n	8010002 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d008      	beq.n	800fffa <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 fb07 	bl	8010602 <uxStreamBufferGetSpace>
 800fff4:	4603      	mov	r3, r0
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	e003      	b.n	8010002 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010000:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010002:	68fb      	ldr	r3, [r7, #12]
    }
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801001e:	2b06      	cmp	r3, #6
 8010020:	d003      	beq.n	801002a <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010022:	f06f 0315 	mvn.w	r3, #21
 8010026:	60fb      	str	r3, [r7, #12]
 8010028:	e00f      	b.n	801004a <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d008      	beq.n	8010046 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801003a:	4618      	mov	r0, r3
 801003c:	f000 fb03 	bl	8010646 <uxStreamBufferGetSize>
 8010040:	4603      	mov	r3, r0
 8010042:	60fb      	str	r3, [r7, #12]
 8010044:	e001      	b.n	801004a <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 801004a:	68fb      	ldr	r3, [r7, #12]
    }
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8010060:	2300      	movs	r3, #0
 8010062:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801006a:	2b06      	cmp	r3, #6
 801006c:	d003      	beq.n	8010076 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 801006e:	f06f 0315 	mvn.w	r3, #21
 8010072:	60fb      	str	r3, [r7, #12]
 8010074:	e00b      	b.n	801008e <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801007c:	2b04      	cmp	r3, #4
 801007e:	d906      	bls.n	801008e <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010086:	2b07      	cmp	r3, #7
 8010088:	d801      	bhi.n	801008e <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 801008a:	2301      	movs	r3, #1
 801008c:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 801008e:	68fb      	ldr	r3, [r7, #12]
    }
 8010090:	4618      	mov	r0, r3
 8010092:	3714      	adds	r7, #20
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80100ae:	2b06      	cmp	r3, #6
 80100b0:	d003      	beq.n	80100ba <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80100b2:	f06f 0315 	mvn.w	r3, #21
 80100b6:	60fb      	str	r3, [r7, #12]
 80100b8:	e00f      	b.n	80100da <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d008      	beq.n	80100d6 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fabb 	bl	8010646 <uxStreamBufferGetSize>
 80100d0:	4603      	mov	r3, r0
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	e001      	b.n	80100da <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 80100da:	68fb      	ldr	r3, [r7, #12]
    }
 80100dc:	4618      	mov	r0, r3
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 80100ec:	2300      	movs	r3, #0
 80100ee:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f6:	d004      	beq.n	8010102 <xSocketValid+0x1e>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 80100fe:	2301      	movs	r3, #1
 8010100:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010102:	68fb      	ldr	r3, [r7, #12]
}
 8010104:	4618      	mov	r0, r3
 8010106:	3714      	adds	r7, #20
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010114:	b09c      	sub	sp, #112	@ 0x70
 8010116:	af08      	add	r7, sp, #32
 8010118:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 801011a:	2320      	movs	r3, #32
 801011c:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 801011e:	f7f4 f911 	bl	8004344 <xTaskGetTickCount>
 8010122:	4602      	mov	r2, r0
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 801012e:	2300      	movs	r3, #0
 8010130:	60fb      	str	r3, [r7, #12]
 8010132:	f107 0310 	add.w	r3, r7, #16
 8010136:	2200      	movs	r2, #0
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	605a      	str	r2, [r3, #4]
 801013c:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010144:	2b01      	cmp	r3, #1
 8010146:	d11f      	bne.n	8010188 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 801014e:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010156:	f107 000c 	add.w	r0, r7, #12
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	4613      	mov	r3, r2
 801015e:	4a3b      	ldr	r2, [pc, #236]	@ (801024c <vTCPNetStat_TCPSocket+0x13c>)
 8010160:	2110      	movs	r1, #16
 8010162:	f012 fd6d 	bl	8022c40 <snprintf>
 8010166:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801016a:	2b00      	cmp	r3, #0
 801016c:	da04      	bge.n	8010178 <vTCPNetStat_TCPSocket+0x68>
 801016e:	f241 61df 	movw	r1, #5855	@ 0x16df
 8010172:	4837      	ldr	r0, [pc, #220]	@ (8010250 <vTCPNetStat_TCPSocket+0x140>)
 8010174:	f7f1 fafa 	bl	800176c <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801017a:	2b0f      	cmp	r3, #15
 801017c:	dd04      	ble.n	8010188 <vTCPNetStat_TCPSocket+0x78>
 801017e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 8010182:	4833      	ldr	r0, [pc, #204]	@ (8010250 <vTCPNetStat_TCPSocket+0x140>)
 8010184:	f7f1 faf2 	bl	800176c <vAssertCalled>
        }

        if( age > 999999U )
 8010188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801018a:	4a32      	ldr	r2, [pc, #200]	@ (8010254 <vTCPNetStat_TCPSocket+0x144>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d901      	bls.n	8010194 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 8010190:	4b30      	ldr	r3, [pc, #192]	@ (8010254 <vTCPNetStat_TCPSocket+0x144>)
 8010192:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	7a1b      	ldrb	r3, [r3, #8]
 8010198:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d002      	beq.n	80101a8 <vTCPNetStat_TCPSocket+0x98>
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d009      	beq.n	80101ba <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 80101a6:	e011      	b.n	80101cc <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101ac:	f107 001c 	add.w	r0, r7, #28
 80101b0:	4a29      	ldr	r2, [pc, #164]	@ (8010258 <vTCPNetStat_TCPSocket+0x148>)
 80101b2:	2128      	movs	r1, #40	@ 0x28
 80101b4:	f012 fd44 	bl	8022c40 <snprintf>
                    break;
 80101b8:	e008      	b.n	80101cc <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 80101be:	f107 001c 	add.w	r0, r7, #28
 80101c2:	4a26      	ldr	r2, [pc, #152]	@ (801025c <vTCPNetStat_TCPSocket+0x14c>)
 80101c4:	2128      	movs	r1, #40	@ 0x28
 80101c6:	f012 fd3b 	bl	8022c40 <snprintf>
                    break;
 80101ca:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80101d0:	4698      	mov	r8, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80101d8:	461c      	mov	r4, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	bf14      	ite	ne
 80101e4:	2301      	movne	r3, #1
 80101e6:	2300      	moveq	r3, #0
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	461d      	mov	r5, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	bf14      	ite	ne
 80101f6:	2301      	movne	r3, #1
 80101f8:	2300      	moveq	r3, #0
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	461e      	mov	r6, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010204:	4618      	mov	r0, r3
 8010206:	f002 fbf5 	bl	80129f4 <FreeRTOS_GetTCPStateName>
 801020a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801020c:	4a11      	ldr	r2, [pc, #68]	@ (8010254 <vTCPNetStat_TCPSocket+0x144>)
 801020e:	4293      	cmp	r3, r2
 8010210:	bf28      	it	cs
 8010212:	4613      	movcs	r3, r2
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 801021a:	603a      	str	r2, [r7, #0]
 801021c:	f107 011c 	add.w	r1, r7, #28
 8010220:	f107 020c 	add.w	r2, r7, #12
 8010224:	9206      	str	r2, [sp, #24]
 8010226:	683a      	ldr	r2, [r7, #0]
 8010228:	9205      	str	r2, [sp, #20]
 801022a:	9304      	str	r3, [sp, #16]
 801022c:	9003      	str	r0, [sp, #12]
 801022e:	9602      	str	r6, [sp, #8]
 8010230:	9501      	str	r5, [sp, #4]
 8010232:	9400      	str	r4, [sp, #0]
 8010234:	460b      	mov	r3, r1
 8010236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010238:	4641      	mov	r1, r8
 801023a:	4809      	ldr	r0, [pc, #36]	@ (8010260 <vTCPNetStat_TCPSocket+0x150>)
 801023c:	f011 fcd4 	bl	8021be8 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 8010240:	bf00      	nop
 8010242:	3750      	adds	r7, #80	@ 0x50
 8010244:	46bd      	mov	sp, r7
 8010246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801024a:	bf00      	nop
 801024c:	08025ab4 	.word	0x08025ab4
 8010250:	080255d4 	.word	0x080255d4
 8010254:	000f423f 	.word	0x000f423f
 8010258:	08025abc 	.word	0x08025abc
 801025c:	08025ac4 	.word	0x08025ac4
 8010260:	08025acc 	.word	0x08025acc

08010264 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010264:	b580      	push	{r7, lr}
 8010266:	b08a      	sub	sp, #40	@ 0x28
 8010268:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 801026e:	f006 fe59 	bl	8016f24 <uxGetMinimumFreeNetworkBuffers>
 8010272:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010274:	f006 fe62 	bl	8016f3c <uxGetNumberOfFreeNetworkBuffers>
 8010278:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 801027a:	4b26      	ldr	r3, [pc, #152]	@ (8010314 <vTCPNetStat+0xb0>)
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010282:	d003      	beq.n	801028c <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010284:	4824      	ldr	r0, [pc, #144]	@ (8010318 <vTCPNetStat+0xb4>)
 8010286:	f011 fcaf 	bl	8021be8 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 801028a:	e03f      	b.n	801030c <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 801028c:	4b23      	ldr	r3, [pc, #140]	@ (801031c <vTCPNetStat+0xb8>)
 801028e:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 8010290:	4b23      	ldr	r3, [pc, #140]	@ (8010320 <vTCPNetStat+0xbc>)
 8010292:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8010294:	4823      	ldr	r0, [pc, #140]	@ (8010324 <vTCPNetStat+0xc0>)
 8010296:	f011 fca7 	bl	8021be8 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 801029a:	4b1e      	ldr	r3, [pc, #120]	@ (8010314 <vTCPNetStat+0xb0>)
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	61fb      	str	r3, [r7, #28]
 80102a0:	e00b      	b.n	80102ba <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7ff ff31 	bl	8010110 <vTCPNetStat_TCPSocket>
                count++;
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	3301      	adds	r3, #1
 80102b2:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 80102ba:	69fa      	ldr	r2, [r7, #28]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d1ef      	bne.n	80102a2 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 80102c2:	4b19      	ldr	r3, [pc, #100]	@ (8010328 <vTCPNetStat+0xc4>)
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	61fb      	str	r3, [r7, #28]
 80102c8:	e014      	b.n	80102f4 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	021b      	lsls	r3, r3, #8
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	0a1b      	lsrs	r3, r3, #8
 80102da:	b29b      	uxth	r3, r3
 80102dc:	4313      	orrs	r3, r2
 80102de:	b29b      	uxth	r3, r3
 80102e0:	4619      	mov	r1, r3
 80102e2:	4812      	ldr	r0, [pc, #72]	@ (801032c <vTCPNetStat+0xc8>)
 80102e4:	f011 fc80 	bl	8021be8 <lUDPLoggingPrintf>
                count++;
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	3301      	adds	r3, #1
 80102ec:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 80102f4:	69fa      	ldr	r2, [r7, #28]
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d1e6      	bne.n	80102ca <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 80102fc:	2340      	movs	r3, #64	@ 0x40
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	697a      	ldr	r2, [r7, #20]
 8010304:	69b9      	ldr	r1, [r7, #24]
 8010306:	480a      	ldr	r0, [pc, #40]	@ (8010330 <vTCPNetStat+0xcc>)
 8010308:	f011 fc6e 	bl	8021be8 <lUDPLoggingPrintf>
    }
 801030c:	bf00      	nop
 801030e:	3720      	adds	r7, #32
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	20001444 	.word	0x20001444
 8010318:	08025af8 	.word	0x08025af8
 801031c:	2000144c 	.word	0x2000144c
 8010320:	20001438 	.word	0x20001438
 8010324:	08025b14 	.word	0x08025b14
 8010328:	20001430 	.word	0x20001430
 801032c:	08025b5c 	.word	0x08025b5c
 8010330:	08025b6c 	.word	0x08025b6c

08010334 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010334:	b580      	push	{r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 801033c:	2300      	movs	r3, #0
 801033e:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 8010340:	2300      	movs	r3, #0
 8010342:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801034a:	f003 0304 	and.w	r3, r3, #4
 801034e:	b2db      	uxtb	r3, r3
 8010350:	2b00      	cmp	r3, #0
 8010352:	d109      	bne.n	8010368 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801035a:	f003 0302 	and.w	r3, r3, #2
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b00      	cmp	r3, #0
 8010362:	d101      	bne.n	8010368 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010364:	2301      	movs	r3, #1
 8010366:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801036c:	f003 0301 	and.w	r3, r3, #1
 8010370:	2b00      	cmp	r3, #0
 8010372:	d038      	beq.n	80103e6 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801037a:	2b01      	cmp	r3, #1
 801037c:	d111      	bne.n	80103a2 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010382:	2b00      	cmp	r3, #0
 8010384:	d02f      	beq.n	80103e6 <vSocketSelectTCP+0xb2>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801038a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801038e:	f003 0302 	and.w	r3, r3, #2
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2b00      	cmp	r3, #0
 8010396:	d026      	beq.n	80103e6 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	f043 0301 	orr.w	r3, r3, #1
 801039e:	613b      	str	r3, [r7, #16]
 80103a0:	e021      	b.n	80103e6 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80103a8:	f003 0308 	and.w	r3, r3, #8
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00c      	beq.n	80103cc <vSocketSelectTCP+0x98>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80103b8:	f003 0302 	and.w	r3, r3, #2
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d004      	beq.n	80103cc <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	f043 0301 	orr.w	r3, r3, #1
 80103c8:	613b      	str	r3, [r7, #16]
 80103ca:	e00c      	b.n	80103e6 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d009      	beq.n	80103e6 <vSocketSelectTCP+0xb2>
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7ff fe62 	bl	801009c <FreeRTOS_rx_size>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	dd03      	ble.n	80103e6 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	f043 0301 	orr.w	r3, r3, #1
 80103e4:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103ea:	f003 0304 	and.w	r3, r3, #4
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00d      	beq.n	801040e <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80103f8:	2b08      	cmp	r3, #8
 80103fa:	d004      	beq.n	8010406 <vSocketSelectTCP+0xd2>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010402:	2b00      	cmp	r3, #0
 8010404:	d103      	bne.n	801040e <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	f043 0304 	orr.w	r3, r3, #4
 801040c:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010412:	f003 0302 	and.w	r3, r3, #2
 8010416:	2b00      	cmp	r3, #0
 8010418:	d034      	beq.n	8010484 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 801041a:	2300      	movs	r3, #0
 801041c:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d007      	beq.n	8010434 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff fdcb 	bl	800ffc0 <FreeRTOS_tx_space>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	dd01      	ble.n	8010434 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 8010430:	2301      	movs	r3, #1
 8010432:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d11d      	bne.n	8010476 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010440:	f003 0308 	and.w	r3, r3, #8
 8010444:	b2db      	uxtb	r3, r3
 8010446:	2b00      	cmp	r3, #0
 8010448:	d015      	beq.n	8010476 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010450:	2b04      	cmp	r3, #4
 8010452:	d910      	bls.n	8010476 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801045a:	f003 0310 	and.w	r3, r3, #16
 801045e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010460:	2b00      	cmp	r3, #0
 8010462:	d108      	bne.n	8010476 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801046a:	f043 0310 	orr.w	r3, r3, #16
 801046e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 8010472:	2301      	movs	r3, #1
 8010474:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d003      	beq.n	8010484 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	f043 0302 	orr.w	r3, r3, #2
 8010482:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8010484:	693b      	ldr	r3, [r7, #16]
        }
 8010486:	4618      	mov	r0, r3
 8010488:	3718      	adds	r7, #24
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
	...

08010490 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 8010490:	b580      	push	{r7, lr}
 8010492:	b08a      	sub	sp, #40	@ 0x28
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8010498:	2301      	movs	r3, #1
 801049a:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 801049c:	2300      	movs	r3, #0
 801049e:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 80104a0:	2300      	movs	r3, #0
 80104a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80104a4:	e043      	b.n	801052e <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 80104a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d102      	bne.n	80104b2 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 80104ac:	4b34      	ldr	r3, [pc, #208]	@ (8010580 <vSocketSelect+0xf0>)
 80104ae:	617b      	str	r3, [r7, #20]
 80104b0:	e001      	b.n	80104b6 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80104b2:	4b34      	ldr	r3, [pc, #208]	@ (8010584 <vSocketSelect+0xf4>)
 80104b4:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	61bb      	str	r3, [r7, #24]
 80104bc:	e030      	b.n	8010520 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d124      	bne.n	8010518 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80104d8:	2b06      	cmp	r3, #6
 80104da:	d107      	bne.n	80104ec <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 80104dc:	68b8      	ldr	r0, [r7, #8]
 80104de:	f7ff ff29 	bl	8010334 <vSocketSelectTCP>
 80104e2:	4602      	mov	r2, r0
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	4313      	orrs	r3, r2
 80104e8:	623b      	str	r3, [r7, #32]
 80104ea:	e00d      	b.n	8010508 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104f0:	f003 0301 	and.w	r3, r3, #1
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d007      	beq.n	8010508 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d003      	beq.n	8010508 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010500:	6a3b      	ldr	r3, [r7, #32]
 8010502:	f043 0301 	orr.w	r3, r3, #1
 8010506:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	6a3a      	ldr	r2, [r7, #32]
 801050c:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 801050e:	69fa      	ldr	r2, [r7, #28]
 8010510:	6a3b      	ldr	r3, [r7, #32]
 8010512:	4313      	orrs	r3, r2
 8010514:	61fb      	str	r3, [r7, #28]
 8010516:	e000      	b.n	801051a <vSocketSelect+0x8a>
                    continue;
 8010518:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 8010520:	69ba      	ldr	r2, [r7, #24]
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	429a      	cmp	r2, r3
 8010526:	d1ca      	bne.n	80104be <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801052a:	3301      	adds	r3, #1
 801052c:	627b      	str	r3, [r7, #36]	@ 0x24
 801052e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	429a      	cmp	r2, r3
 8010534:	ddb7      	ble.n	80104a6 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2100      	movs	r1, #0
 801053c:	4618      	mov	r0, r3
 801053e:	f7f2 fc15 	bl	8002d6c <xEventGroupClearBits>
 8010542:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	43da      	mvns	r2, r3
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	4013      	ands	r3, r2
 801054c:	f003 030f 	and.w	r3, r3, #15
 8010550:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d005      	beq.n	8010564 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	68f9      	ldr	r1, [r7, #12]
 801055e:	4618      	mov	r0, r3
 8010560:	f7f2 fc04 	bl	8002d6c <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	f043 0310 	orr.w	r3, r3, #16
 801056e:	4619      	mov	r1, r3
 8010570:	4610      	mov	r0, r2
 8010572:	f7f2 fc29 	bl	8002dc8 <xEventGroupSetBits>
    }
 8010576:	bf00      	nop
 8010578:	3728      	adds	r7, #40	@ 0x28
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop
 8010580:	20001438 	.word	0x20001438
 8010584:	2000144c 	.word	0x2000144c

08010588 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8010588:	b480      	push	{r7}
 801058a:	b087      	sub	sp, #28
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	691b      	ldr	r3, [r3, #16]
 8010598:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 801059a:	693a      	ldr	r2, [r7, #16]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	441a      	add	r2, r3
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	3b01      	subs	r3, #1
 80105a6:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 80105a8:	697a      	ldr	r2, [r7, #20]
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d303      	bcc.n	80105b8 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80105b8:	697b      	ldr	r3, [r7, #20]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	371c      	adds	r7, #28
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 80105c6:	b480      	push	{r7}
 80105c8:	b087      	sub	sp, #28
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	60f8      	str	r0, [r7, #12]
 80105ce:	60b9      	str	r1, [r7, #8]
 80105d0:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 80105d8:	693a      	ldr	r2, [r7, #16]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	441a      	add	r2, r3
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 80105e4:	697a      	ldr	r2, [r7, #20]
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d303      	bcc.n	80105f4 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 80105ec:	697a      	ldr	r2, [r7, #20]
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80105f4:	697b      	ldr	r3, [r7, #20]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	371c      	adds	r7, #28
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr

08010602 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b082      	sub	sp, #8
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6899      	ldr	r1, [r3, #8]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	461a      	mov	r2, r3
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7ff ffb7 	bl	8010588 <uxStreamBufferSpace>
 801061a:	4603      	mov	r3, r0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	68d9      	ldr	r1, [r3, #12]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	461a      	mov	r2, r3
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f7ff ffa6 	bl	8010588 <uxStreamBufferSpace>
 801063c:	4603      	mov	r3, r0
}
 801063e:	4618      	mov	r0, r3
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 8010646:	b580      	push	{r7, lr}
 8010648:	b082      	sub	sp, #8
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6819      	ldr	r1, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	689b      	ldr	r3, [r3, #8]
 8010656:	461a      	mov	r2, r3
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff ffb4 	bl	80105c6 <uxStreamBufferDistance>
 801065e:	4603      	mov	r3, r0
}
 8010660:	4618      	mov	r0, r3
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6859      	ldr	r1, [r3, #4]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	689b      	ldr	r3, [r3, #8]
 8010678:	461a      	mov	r2, r3
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7ff ffa3 	bl	80105c6 <uxStreamBufferDistance>
 8010680:	4603      	mov	r3, r0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 801068a:	b480      	push	{r7}
 801068c:	b083      	sub	sp, #12
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2200      	movs	r2, #0
 8010696:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2200      	movs	r2, #0
 801069c:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2200      	movs	r2, #0
 80106a8:	605a      	str	r2, [r3, #4]
}
 80106aa:	bf00      	nop
 80106ac:	370c      	adds	r7, #12
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr

080106b6 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b086      	sub	sp, #24
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7ff ffce 	bl	8010668 <uxStreamBufferMidSpace>
 80106cc:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 80106d8:	693a      	ldr	r2, [r7, #16]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d901      	bls.n	80106e4 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 80106e4:	697a      	ldr	r2, [r7, #20]
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	4413      	add	r3, r2
 80106ea:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d303      	bcc.n	80106fc <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 80106f4:	697a      	ldr	r2, [r7, #20]
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	697a      	ldr	r2, [r7, #20]
 8010700:	605a      	str	r2, [r3, #4]
}
 8010702:	bf00      	nop
 8010704:	3718      	adds	r7, #24
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 801070a:	b480      	push	{r7}
 801070c:	b087      	sub	sp, #28
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	1ad2      	subs	r2, r2, r3
 8010726:	6879      	ldr	r1, [r7, #4]
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	1acb      	subs	r3, r1, r3
 801072c:	429a      	cmp	r2, r3
 801072e:	d801      	bhi.n	8010734 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 8010730:	2301      	movs	r3, #1
 8010732:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8010734:	697b      	ldr	r3, [r7, #20]
}
 8010736:	4618      	mov	r0, r3
 8010738:	371c      	adds	r7, #28
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr

08010742 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b084      	sub	sp, #16
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7ff ff77 	bl	8010646 <uxStreamBufferGetSize>
 8010758:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f103 0214 	add.w	r2, r3, #20
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	441a      	add	r2, r3
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	691a      	ldr	r2, [r3, #16]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	1ad3      	subs	r3, r2, r3
 8010770:	4619      	mov	r1, r3
 8010772:	68b8      	ldr	r0, [r7, #8]
 8010774:	f7f9 fede 	bl	800a534 <FreeRTOS_min_size_t>
 8010778:	4603      	mov	r3, r0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3710      	adds	r7, #16
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b08a      	sub	sp, #40	@ 0x28
 8010786:	af00      	add	r7, sp, #0
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	60b9      	str	r1, [r7, #8]
 801078c:	607a      	str	r2, [r7, #4]
 801078e:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 8010790:	68f8      	ldr	r0, [r7, #12]
 8010792:	f7ff ff36 	bl	8010602 <uxStreamBufferGetSpace>
 8010796:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8010798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	429a      	cmp	r2, r3
 801079e:	d904      	bls.n	80107aa <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 80107a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	1ad3      	subs	r3, r2, r3
 80107a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80107a8:	e001      	b.n	80107ae <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 80107aa:	2300      	movs	r3, #0
 80107ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80107b2:	f7f9 febf 	bl	800a534 <FreeRTOS_min_size_t>
 80107b6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d05c      	beq.n	8010878 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	691b      	ldr	r3, [r3, #16]
 80107c2:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00b      	beq.n	80107e8 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 80107d0:	6a3a      	ldr	r2, [r7, #32]
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	4413      	add	r3, r2
 80107d6:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 80107d8:	6a3a      	ldr	r2, [r7, #32]
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d303      	bcc.n	80107e8 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 80107e0:	6a3a      	ldr	r2, [r7, #32]
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d021      	beq.n	8010832 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 80107ee:	69ba      	ldr	r2, [r7, #24]
 80107f0:	6a3b      	ldr	r3, [r7, #32]
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	69f9      	ldr	r1, [r7, #28]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7f9 fe9c 	bl	800a534 <FreeRTOS_min_size_t>
 80107fc:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 80107fe:	6a3b      	ldr	r3, [r7, #32]
 8010800:	3310      	adds	r3, #16
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	4413      	add	r3, r2
 8010806:	3304      	adds	r3, #4
 8010808:	697a      	ldr	r2, [r7, #20]
 801080a:	6879      	ldr	r1, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	f011 fc07 	bl	8022020 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 8010812:	69fa      	ldr	r2, [r7, #28]
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	429a      	cmp	r2, r3
 8010818:	d90b      	bls.n	8010832 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f103 0014 	add.w	r0, r3, #20
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	18d1      	adds	r1, r2, r3
 8010826:	69fa      	ldr	r2, [r7, #28]
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	461a      	mov	r2, r3
 801082e:	f011 fbf7 	bl	8022020 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 8010832:	f7f3 fc75 	bl	8004120 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10e      	bne.n	801085a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 801083c:	6a3a      	ldr	r2, [r7, #32]
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	4413      	add	r3, r2
 8010842:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 8010844:	6a3a      	ldr	r2, [r7, #32]
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	429a      	cmp	r2, r3
 801084a:	d303      	bcc.n	8010854 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 801084c:	6a3a      	ldr	r2, [r7, #32]
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6a3a      	ldr	r2, [r7, #32]
 8010858:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	6a3a      	ldr	r2, [r7, #32]
 8010860:	4619      	mov	r1, r3
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f7ff ff51 	bl	801070a <xStreamBufferLessThenEqual>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6a3a      	ldr	r2, [r7, #32]
 8010872:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8010874:	f7f3 fc62 	bl	800413c <xTaskResumeAll>
    }

    return uxCount;
 8010878:	69fb      	ldr	r3, [r7, #28]
}
 801087a:	4618      	mov	r0, r3
 801087c:	3728      	adds	r7, #40	@ 0x28
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b08a      	sub	sp, #40	@ 0x28
 8010886:	af00      	add	r7, sp, #0
 8010888:	60f8      	str	r0, [r7, #12]
 801088a:	60b9      	str	r1, [r7, #8]
 801088c:	607a      	str	r2, [r7, #4]
 801088e:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7ff fed8 	bl	8010646 <uxStreamBufferGetSize>
 8010896:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8010898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	429a      	cmp	r2, r3
 801089e:	d904      	bls.n	80108aa <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 80108a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80108a8:	e001      	b.n	80108ae <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 80108aa:	2300      	movs	r3, #0
 80108ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 80108ae:	6839      	ldr	r1, [r7, #0]
 80108b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80108b2:	f7f9 fe3f 	bl	800a534 <FreeRTOS_min_size_t>
 80108b6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d04e      	beq.n	801095c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	691b      	ldr	r3, [r3, #16]
 80108c2:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00b      	beq.n	80108e8 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 80108d0:	6a3a      	ldr	r2, [r7, #32]
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	4413      	add	r3, r2
 80108d6:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80108d8:	6a3a      	ldr	r2, [r7, #32]
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d303      	bcc.n	80108e8 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 80108e0:	6a3a      	ldr	r2, [r7, #32]
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d021      	beq.n	8010932 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 80108ee:	69ba      	ldr	r2, [r7, #24]
 80108f0:	6a3b      	ldr	r3, [r7, #32]
 80108f2:	1ad3      	subs	r3, r2, r3
 80108f4:	69f9      	ldr	r1, [r7, #28]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7f9 fe1c 	bl	800a534 <FreeRTOS_min_size_t>
 80108fc:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 80108fe:	6a3b      	ldr	r3, [r7, #32]
 8010900:	3310      	adds	r3, #16
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	4413      	add	r3, r2
 8010906:	3304      	adds	r3, #4
 8010908:	697a      	ldr	r2, [r7, #20]
 801090a:	4619      	mov	r1, r3
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f011 fb87 	bl	8022020 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 8010912:	69fa      	ldr	r2, [r7, #28]
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	429a      	cmp	r2, r3
 8010918:	d90b      	bls.n	8010932 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	18d0      	adds	r0, r2, r3
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f103 0114 	add.w	r1, r3, #20
 8010926:	69fa      	ldr	r2, [r7, #28]
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	461a      	mov	r2, r3
 801092e:	f011 fb77 	bl	8022020 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 8010932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010934:	2b00      	cmp	r3, #0
 8010936:	d111      	bne.n	801095c <uxStreamBufferGet+0xda>
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10e      	bne.n	801095c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 801093e:	6a3a      	ldr	r2, [r7, #32]
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	4413      	add	r3, r2
 8010944:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010946:	6a3a      	ldr	r2, [r7, #32]
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	429a      	cmp	r2, r3
 801094c:	d303      	bcc.n	8010956 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 801094e:	6a3a      	ldr	r2, [r7, #32]
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	6a3a      	ldr	r2, [r7, #32]
 801095a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 801095c:	69fb      	ldr	r3, [r7, #28]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3728      	adds	r7, #40	@ 0x28
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
	...

08010968 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 8010970:	4b0a      	ldr	r3, [pc, #40]	@ (801099c <vSocketCloseNextTime+0x34>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d009      	beq.n	801098c <vSocketCloseNextTime+0x24>
 8010978:	4b08      	ldr	r3, [pc, #32]	@ (801099c <vSocketCloseNextTime+0x34>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d004      	beq.n	801098c <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 8010982:	4b06      	ldr	r3, [pc, #24]	@ (801099c <vSocketCloseNextTime+0x34>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	4618      	mov	r0, r3
 8010988:	f7fd fd98 	bl	800e4bc <vSocketClose>
        }

        xSocketToClose = pxSocket;
 801098c:	4a03      	ldr	r2, [pc, #12]	@ (801099c <vSocketCloseNextTime+0x34>)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6013      	str	r3, [r2, #0]
    }
 8010992:	bf00      	nop
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	2000145c 	.word	0x2000145c

080109a0 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 80109a8:	4b0c      	ldr	r3, [pc, #48]	@ (80109dc <vSocketListenNextTime+0x3c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00e      	beq.n	80109ce <vSocketListenNextTime+0x2e>
 80109b0:	4b0a      	ldr	r3, [pc, #40]	@ (80109dc <vSocketListenNextTime+0x3c>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d009      	beq.n	80109ce <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 80109ba:	4b08      	ldr	r3, [pc, #32]	@ (80109dc <vSocketListenNextTime+0x3c>)
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	4b07      	ldr	r3, [pc, #28]	@ (80109dc <vSocketListenNextTime+0x3c>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80109c6:	4619      	mov	r1, r3
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7fe fff3 	bl	800f9b4 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 80109ce:	4a03      	ldr	r2, [pc, #12]	@ (80109dc <vSocketListenNextTime+0x3c>)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6013      	str	r3, [r2, #0]
    }
 80109d4:	bf00      	nop
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	20001460 	.word	0x20001460

080109e0 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 80109e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e4:	b086      	sub	sp, #24
 80109e6:	af02      	add	r7, sp, #8
 80109e8:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 80109ea:	2300      	movs	r3, #0
 80109ec:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 80109ee:	2300      	movs	r3, #0
 80109f0:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80109f8:	2b04      	cmp	r3, #4
 80109fa:	d907      	bls.n	8010a0c <xTCPSocketCheck+0x2c>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d002      	beq.n	8010a0c <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f003 f834 	bl	8013a74 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d05f      	beq.n	8010ad6 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010a1c:	f003 0320 	and.w	r3, r3, #32
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d148      	bne.n	8010ab8 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d03b      	beq.n	8010aa8 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8010a30:	4b37      	ldr	r3, [pc, #220]	@ (8010b10 <xTCPSocketCheck+0x130>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	dd25      	ble.n	8010a84 <xTCPSocketCheck+0xa4>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010a3c:	2b17      	cmp	r3, #23
 8010a3e:	d021      	beq.n	8010a84 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010a44:	461e      	mov	r6, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010a4c:	4698      	mov	r8, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010a5a:	1ad5      	subs	r5, r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010a68:	1ad4      	subs	r4, r2, r3
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f7f9 f81e 	bl	8009aac <uxIPHeaderSizeSocket>
 8010a70:	4603      	mov	r3, r0
 8010a72:	3314      	adds	r3, #20
 8010a74:	9301      	str	r3, [sp, #4]
 8010a76:	9400      	str	r4, [sp, #0]
 8010a78:	462b      	mov	r3, r5
 8010a7a:	4642      	mov	r2, r8
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	4825      	ldr	r0, [pc, #148]	@ (8010b14 <xTCPSocketCheck+0x134>)
 8010a80:	f011 f8b2 	bl	8021be8 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7f9 f80e 	bl	8009aac <uxIPHeaderSizeSocket>
 8010a90:	4603      	mov	r3, r0
 8010a92:	f103 0214 	add.w	r2, r3, #20
 8010a96:	2301      	movs	r3, #1
 8010a98:	4621      	mov	r1, r4
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f002 fac8 	bl	8013030 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f000 faa1 	bl	8010ff0 <prvTCPNextTimeout>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d901      	bls.n	8010ab8 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d009      	beq.n	8010ad6 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f006 f9e5 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d113      	bne.n	8010b04 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010ae2:	2b04      	cmp	r3, #4
 8010ae4:	d804      	bhi.n	8010af0 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d102      	bne.n	8010af6 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f002 f9ff 	bl	8012ef4 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fa7a 	bl	8010ff0 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f001 f973 	bl	8011de8 <prvTCPStatusAgeCheck>
 8010b02:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8010b04:	68fb      	ldr	r3, [r7, #12]
    }
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b10:	20001488 	.word	0x20001488
 8010b14:	08025ba4 	.word	0x08025ba4

08010b18 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8010b20:	f7f3 fc10 	bl	8004344 <xTaskGetTickCount>
 8010b24:	4602      	mov	r2, r0
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010b32:	f36f 0382 	bfc	r3, #2, #1
 8010b36:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010b40:	f36f 0341 	bfc	r3, #1, #1
 8010b44:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010b50:	f7f3 fbf8 	bl	8004344 <xTaskGetTickCount>
 8010b54:	4602      	mov	r2, r0
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 8010b5c:	bf00      	nop
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010b64:	b480      	push	{r7}
 8010b66:	b087      	sub	sp, #28
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010b70:	4b15      	ldr	r3, [pc, #84]	@ (8010bc8 <vTCPRemoveTCPChild+0x64>)
 8010b72:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010b74:	4b15      	ldr	r3, [pc, #84]	@ (8010bcc <vTCPRemoveTCPChild+0x68>)
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 8010b7a:	e01a      	b.n	8010bb2 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d010      	beq.n	8010bb2 <vTCPRemoveTCPChild+0x4e>
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d10a      	bne.n	8010bb2 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d105      	bne.n	8010bb2 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 8010bac:	2301      	movs	r3, #1
 8010bae:	617b      	str	r3, [r7, #20]
                    break;
 8010bb0:	e003      	b.n	8010bba <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 8010bb2:	693a      	ldr	r2, [r7, #16]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d1e0      	bne.n	8010b7c <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 8010bba:	697b      	ldr	r3, [r7, #20]
    }
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	371c      	adds	r7, #28
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr
 8010bc8:	2000144c 	.word	0x2000144c
 8010bcc:	20001444 	.word	0x20001444

08010bd0 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8010bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bd2:	b097      	sub	sp, #92	@ 0x5c
 8010bd4:	af02      	add	r7, sp, #8
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	460b      	mov	r3, r1
 8010bda:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010be6:	2b04      	cmp	r3, #4
 8010be8:	d906      	bls.n	8010bf8 <vTCPStateChange+0x28>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010bf0:	2b08      	cmp	r3, #8
 8010bf2:	d001      	beq.n	8010bf8 <vTCPStateChange+0x28>
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e000      	b.n	8010bfa <vTCPStateChange+0x2a>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 8010bfc:	78fb      	ldrb	r3, [r7, #3]
 8010bfe:	2b04      	cmp	r3, #4
 8010c00:	d904      	bls.n	8010c0c <vTCPStateChange+0x3c>
 8010c02:	78fb      	ldrb	r3, [r7, #3]
 8010c04:	2b08      	cmp	r3, #8
 8010c06:	d001      	beq.n	8010c0c <vTCPStateChange+0x3c>
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e000      	b.n	8010c0e <vTCPStateChange+0x3e>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010c16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 8010c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	d007      	beq.n	8010c36 <vTCPStateChange+0x66>
 8010c26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c2a:	2b03      	cmp	r3, #3
 8010c2c:	d003      	beq.n	8010c36 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 8010c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c32:	2b04      	cmp	r3, #4
 8010c34:	d114      	bne.n	8010c60 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8010c36:	78fb      	ldrb	r3, [r7, #3]
 8010c38:	2b08      	cmp	r3, #8
 8010c3a:	d111      	bne.n	8010c60 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 8010c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c40:	4618      	mov	r0, r3
 8010c42:	f001 fed7 	bl	80129f4 <FreeRTOS_GetTCPStateName>
 8010c46:	4604      	mov	r4, r0
 8010c48:	78fb      	ldrb	r3, [r7, #3]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f001 fed2 	bl	80129f4 <FreeRTOS_GetTCPStateName>
 8010c50:	4603      	mov	r3, r0
 8010c52:	461a      	mov	r2, r3
 8010c54:	4621      	mov	r1, r4
 8010c56:	4875      	ldr	r0, [pc, #468]	@ (8010e2c <vTCPStateChange+0x25c>)
 8010c58:	f010 ffc6 	bl	8021be8 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c64:	429a      	cmp	r2, r3
 8010c66:	f000 809f 	beq.w	8010da8 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c70:	f003 0304 	and.w	r3, r3, #4
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d012      	beq.n	8010ca0 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c80:	f003 0308 	and.w	r3, r3, #8
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d10a      	bne.n	8010ca0 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 8010c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d104      	bne.n	8010ca0 <vTCPStateChange+0xd0>
 8010c96:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8010c9a:	4865      	ldr	r0, [pc, #404]	@ (8010e30 <vTCPStateChange+0x260>)
 8010c9c:	f7f0 fd66 	bl	800176c <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d057      	beq.n	8010d56 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d03c      	beq.n	8010d30 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8010cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d027      	beq.n	8010d0c <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8010cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8010cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f043 0204 	orr.w	r2, r3, #4
 8010cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cd4:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8010cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cda:	f003 0301 	and.w	r3, r3, #1
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d005      	beq.n	8010cee <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8010ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cec:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8010cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cf0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d009      	beq.n	8010d0c <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8010cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cfa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010cfe:	f003 0308 	and.w	r3, r3, #8
 8010d02:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8010d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d0a:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010d12:	687a      	ldr	r2, [r7, #4]
 8010d14:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010d18:	f36f 0382 	bfc	r3, #2, #1
 8010d1c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010d26:	f043 0302 	orr.w	r3, r3, #2
 8010d2a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 8010d2e:	e024      	b.n	8010d7a <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f043 0208 	orr.w	r2, r3, #8
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d40:	f003 0302 	and.w	r3, r3, #2
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d018      	beq.n	8010d7a <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	601a      	str	r2, [r3, #0]
 8010d54:	e011      	b.n	8010d7a <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f043 0220 	orr.w	r2, r3, #32
 8010d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d60:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d66:	f003 0304 	and.w	r3, r3, #4
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d005      	beq.n	8010d7a <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 8010d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d78:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d004      	beq.n	8010d8e <vTCPStateChange+0x1be>
 8010d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d101      	bne.n	8010d8e <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010d94:	4618      	mov	r0, r3
 8010d96:	f000 ffff 	bl	8011d98 <prvTCPSocketIsActive>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d103      	bne.n	8010da8 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	78fa      	ldrb	r2, [r7, #3]
 8010dac:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 8010db0:	78fb      	ldrb	r3, [r7, #3]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d003      	beq.n	8010dbe <vTCPStateChange+0x1ee>
 8010db6:	78fb      	ldrb	r3, [r7, #3]
 8010db8:	2b08      	cmp	r3, #8
 8010dba:	f040 8084 	bne.w	8010ec6 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8010dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d106      	bne.n	8010ddc <vTCPStateChange+0x20c>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d002      	beq.n	8010ddc <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d006      	beq.n	8010df2 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8010de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d101      	bne.n	8010df2 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 8010dee:	2301      	movs	r3, #1
 8010df0:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010df8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	4619      	mov	r1, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010e06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010e0a:	b2db      	uxtb	r3, r3
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010e14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	4806      	ldr	r0, [pc, #24]	@ (8010e34 <vTCPStateChange+0x264>)
 8010e1c:	f010 fee4 	bl	8021be8 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8010e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d008      	beq.n	8010e38 <vTCPStateChange+0x268>
 8010e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e2a:	e006      	b.n	8010e3a <vTCPStateChange+0x26a>
 8010e2c:	08025bd0 	.word	0x08025bd0
 8010e30:	08025be4 	.word	0x08025be4
 8010e34:	08025c14 	.word	0x08025c14
 8010e38:	2300      	movs	r3, #0
 8010e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e3c:	9200      	str	r2, [sp, #0]
 8010e3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010e40:	6879      	ldr	r1, [r7, #4]
 8010e42:	4865      	ldr	r0, [pc, #404]	@ (8010fd8 <vTCPStateChange+0x408>)
 8010e44:	f010 fed0 	bl	8021be8 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8010e48:	f7f3 f96a 	bl	8004120 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010e52:	f003 0304 	and.w	r3, r3, #4
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d107      	bne.n	8010e6c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010e62:	f003 0302 	and.w	r3, r3, #2
 8010e66:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d026      	beq.n	8010eba <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010e72:	f003 0308 	and.w	r3, r3, #8
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d11e      	bne.n	8010eba <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7ff fe71 	bl	8010b64 <vTCPRemoveTCPChild>
 8010e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010e8a:	f36f 0382 	bfc	r3, #2, #1
 8010e8e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010e98:	f36f 0341 	bfc	r3, #1, #1
 8010e9c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8010ea0:	f7f9 f978 	bl	800a194 <xIsCallingFromIPTask>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d104      	bne.n	8010eb4 <vTCPStateChange+0x2e4>
 8010eaa:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8010eae:	484b      	ldr	r0, [pc, #300]	@ (8010fdc <vTCPStateChange+0x40c>)
 8010eb0:	f7f0 fc5c 	bl	800176c <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f7ff fd57 	bl	8010968 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8010eba:	f7f3 f93f 	bl	800413c <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8010ebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010ec0:	4847      	ldr	r0, [pc, #284]	@ (8010fe0 <vTCPStateChange+0x410>)
 8010ec2:	f010 fe91 	bl	8021be8 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8010ec6:	78fb      	ldrb	r3, [r7, #3]
 8010ec8:	2b08      	cmp	r3, #8
 8010eca:	d11b      	bne.n	8010f04 <vTCPStateChange+0x334>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ed2:	f003 0308 	and.w	r3, r3, #8
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d013      	beq.n	8010f04 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8010edc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010ee0:	3b03      	subs	r3, #3
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d80d      	bhi.n	8010f02 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010eea:	4619      	mov	r1, r3
 8010eec:	483d      	ldr	r0, [pc, #244]	@ (8010fe4 <vTCPStateChange+0x414>)
 8010eee:	f010 fe7b 	bl	8021be8 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7ff fd50 	bl	80109a0 <vSocketListenNextTime>
                    break;
 8010f00:	e000      	b.n	8010f04 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8010f02:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7ff fe07 	bl	8010b18 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8010f0a:	4b37      	ldr	r3, [pc, #220]	@ (8010fe8 <vTCPStateChange+0x418>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	db4f      	blt.n	8010fb2 <vTCPStateChange+0x3e2>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010f16:	2b17      	cmp	r3, #23
 8010f18:	d04b      	beq.n	8010fb2 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	7a1b      	ldrb	r3, [r3, #8]
 8010f1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d002      	beq.n	8010f2e <vTCPStateChange+0x35e>
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d01d      	beq.n	8010f68 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8010f2c:	e026      	b.n	8010f7c <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f32:	061a      	lsls	r2, r3, #24
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f38:	021b      	lsls	r3, r3, #8
 8010f3a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010f3e:	431a      	orrs	r2, r3
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f44:	0a1b      	lsrs	r3, r3, #8
 8010f46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010f4a:	431a      	orrs	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f50:	0e1b      	lsrs	r3, r3, #24
 8010f52:	4313      	orrs	r3, r2
 8010f54:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8010f56:	f107 0208 	add.w	r2, r7, #8
 8010f5a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010f5e:	2328      	movs	r3, #40	@ 0x28
 8010f60:	2002      	movs	r0, #2
 8010f62:	f7fe f827 	bl	800efb4 <FreeRTOS_inet_ntop>
                           break;
 8010f66:	e009      	b.n	8010f7c <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8010f6e:	f107 0208 	add.w	r2, r7, #8
 8010f72:	2328      	movs	r3, #40	@ 0x28
 8010f74:	200a      	movs	r0, #10
 8010f76:	f7fe f81d 	bl	800efb4 <FreeRTOS_inet_ntop>
                            break;
 8010f7a:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010f80:	461d      	mov	r5, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010f88:	461e      	mov	r6, r3
 8010f8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f001 fd30 	bl	80129f4 <FreeRTOS_GetTCPStateName>
 8010f94:	4604      	mov	r4, r0
 8010f96:	78fb      	ldrb	r3, [r7, #3]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f001 fd2b 	bl	80129f4 <FreeRTOS_GetTCPStateName>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f107 0208 	add.w	r2, r7, #8
 8010fa4:	9301      	str	r3, [sp, #4]
 8010fa6:	9400      	str	r4, [sp, #0]
 8010fa8:	4633      	mov	r3, r6
 8010faa:	4629      	mov	r1, r5
 8010fac:	480f      	ldr	r0, [pc, #60]	@ (8010fec <vTCPStateChange+0x41c>)
 8010fae:	f010 fe1b 	bl	8021be8 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8010fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d005      	beq.n	8010fc4 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8010fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010fbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010fc0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010fc2:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8010fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8010fca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010fcc:	f7fe f871 	bl	800f0b2 <vSocketWakeUpUser>
        }
    }
 8010fd0:	bf00      	nop
 8010fd2:	3754      	adds	r7, #84	@ 0x54
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd8:	08025c50 	.word	0x08025c50
 8010fdc:	08025be4 	.word	0x08025be4
 8010fe0:	08025c84 	.word	0x08025c84
 8010fe4:	08025ca8 	.word	0x08025ca8
 8010fe8:	20001488 	.word	0x20001488
 8010fec:	08025ccc 	.word	0x08025ccc

08010ff0 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8010ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ff4:	b098      	sub	sp, #96	@ 0x60
 8010ff6:	af02      	add	r7, sp, #8
 8010ff8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010ffa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010ffe:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011002:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011006:	2b02      	cmp	r3, #2
 8011008:	f040 80cc 	bne.w	80111a4 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 801100c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801100e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011012:	f003 0308 	and.w	r3, r3, #8
 8011016:	b2db      	uxtb	r3, r3
 8011018:	2b00      	cmp	r3, #0
 801101a:	d01a      	beq.n	8011052 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 801101c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801101e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011022:	2b02      	cmp	r3, #2
 8011024:	d811      	bhi.n	801104a <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011028:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801102c:	2b00      	cmp	r3, #0
 801102e:	d102      	bne.n	8011036 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011030:	2300      	movs	r3, #0
 8011032:	653b      	str	r3, [r7, #80]	@ 0x50
 8011034:	e010      	b.n	8011058 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011038:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801103c:	3b01      	subs	r3, #1
 801103e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011042:	fa02 f303 	lsl.w	r3, r2, r3
 8011046:	653b      	str	r3, [r7, #80]	@ 0x50
 8011048:	e006      	b.n	8011058 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 801104a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 801104e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011050:	e002      	b.n	8011058 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8011052:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011056:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8011058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801105a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801105c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801105e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011062:	4618      	mov	r0, r3
 8011064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011066:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801106a:	461a      	mov	r2, r3
 801106c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801106e:	9300      	str	r3, [sp, #0]
 8011070:	4613      	mov	r3, r2
 8011072:	4602      	mov	r2, r0
 8011074:	48a4      	ldr	r0, [pc, #656]	@ (8011308 <prvTCPNextTimeout+0x318>)
 8011076:	f010 fdb7 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 801107a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801107c:	2200      	movs	r2, #0
 801107e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011080:	647a      	str	r2, [r7, #68]	@ 0x44
 8011082:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011086:	4622      	mov	r2, r4
 8011088:	462b      	mov	r3, r5
 801108a:	f04f 0000 	mov.w	r0, #0
 801108e:	f04f 0100 	mov.w	r1, #0
 8011092:	0159      	lsls	r1, r3, #5
 8011094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011098:	0150      	lsls	r0, r2, #5
 801109a:	4602      	mov	r2, r0
 801109c:	460b      	mov	r3, r1
 801109e:	4621      	mov	r1, r4
 80110a0:	1a51      	subs	r1, r2, r1
 80110a2:	6239      	str	r1, [r7, #32]
 80110a4:	4629      	mov	r1, r5
 80110a6:	eb63 0301 	sbc.w	r3, r3, r1
 80110aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80110ac:	f04f 0200 	mov.w	r2, #0
 80110b0:	f04f 0300 	mov.w	r3, #0
 80110b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80110b8:	4649      	mov	r1, r9
 80110ba:	008b      	lsls	r3, r1, #2
 80110bc:	4641      	mov	r1, r8
 80110be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80110c2:	4641      	mov	r1, r8
 80110c4:	008a      	lsls	r2, r1, #2
 80110c6:	4610      	mov	r0, r2
 80110c8:	4619      	mov	r1, r3
 80110ca:	4603      	mov	r3, r0
 80110cc:	4622      	mov	r2, r4
 80110ce:	189b      	adds	r3, r3, r2
 80110d0:	61bb      	str	r3, [r7, #24]
 80110d2:	462b      	mov	r3, r5
 80110d4:	460a      	mov	r2, r1
 80110d6:	eb42 0303 	adc.w	r3, r2, r3
 80110da:	61fb      	str	r3, [r7, #28]
 80110dc:	f04f 0200 	mov.w	r2, #0
 80110e0:	f04f 0300 	mov.w	r3, #0
 80110e4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80110e8:	4629      	mov	r1, r5
 80110ea:	00cb      	lsls	r3, r1, #3
 80110ec:	4621      	mov	r1, r4
 80110ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80110f2:	4621      	mov	r1, r4
 80110f4:	00ca      	lsls	r2, r1, #3
 80110f6:	4610      	mov	r0, r2
 80110f8:	4619      	mov	r1, r3
 80110fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80110fe:	f04f 0300 	mov.w	r3, #0
 8011102:	f7ef f955 	bl	80003b0 <__aeabi_uldivmod>
 8011106:	4602      	mov	r2, r0
 8011108:	460b      	mov	r3, r1
 801110a:	4613      	mov	r3, r2
 801110c:	2b00      	cmp	r3, #0
 801110e:	d044      	beq.n	801119a <prvTCPNextTimeout+0x1aa>
 8011110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011112:	2200      	movs	r2, #0
 8011114:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011116:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011118:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801111c:	4622      	mov	r2, r4
 801111e:	462b      	mov	r3, r5
 8011120:	f04f 0000 	mov.w	r0, #0
 8011124:	f04f 0100 	mov.w	r1, #0
 8011128:	0159      	lsls	r1, r3, #5
 801112a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801112e:	0150      	lsls	r0, r2, #5
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4621      	mov	r1, r4
 8011136:	ebb2 0a01 	subs.w	sl, r2, r1
 801113a:	4629      	mov	r1, r5
 801113c:	eb63 0b01 	sbc.w	fp, r3, r1
 8011140:	f04f 0200 	mov.w	r2, #0
 8011144:	f04f 0300 	mov.w	r3, #0
 8011148:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801114c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011150:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8011154:	4692      	mov	sl, r2
 8011156:	469b      	mov	fp, r3
 8011158:	4623      	mov	r3, r4
 801115a:	eb1a 0303 	adds.w	r3, sl, r3
 801115e:	613b      	str	r3, [r7, #16]
 8011160:	462b      	mov	r3, r5
 8011162:	eb4b 0303 	adc.w	r3, fp, r3
 8011166:	617b      	str	r3, [r7, #20]
 8011168:	f04f 0200 	mov.w	r2, #0
 801116c:	f04f 0300 	mov.w	r3, #0
 8011170:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011174:	4629      	mov	r1, r5
 8011176:	00cb      	lsls	r3, r1, #3
 8011178:	4621      	mov	r1, r4
 801117a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801117e:	4621      	mov	r1, r4
 8011180:	00ca      	lsls	r2, r1, #3
 8011182:	4610      	mov	r0, r2
 8011184:	4619      	mov	r1, r3
 8011186:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801118a:	f04f 0300 	mov.w	r3, #0
 801118e:	f7ef f90f 	bl	80003b0 <__aeabi_uldivmod>
 8011192:	4602      	mov	r2, r0
 8011194:	460b      	mov	r3, r1
 8011196:	b292      	uxth	r2, r2
 8011198:	e000      	b.n	801119c <prvTCPNextTimeout+0x1ac>
 801119a:	2201      	movs	r2, #1
 801119c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801119e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80111a2:	e0a8      	b.n	80112f6 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 80111a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111a6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f040 80a3 	bne.w	80112f6 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 80111b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111b2:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80111b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111b8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80111bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80111c0:	461a      	mov	r2, r3
 80111c2:	f004 fcbd 	bl	8015b40 <xTCPWindowTxHasData>
 80111c6:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 80111c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d108      	bne.n	80111e0 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 80111ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 80111d4:	2301      	movs	r3, #1
 80111d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80111d8:	e002      	b.n	80111e0 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 80111da:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80111de:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 80111e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111e2:	2200      	movs	r2, #0
 80111e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80111e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80111e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80111ec:	4652      	mov	r2, sl
 80111ee:	465b      	mov	r3, fp
 80111f0:	f04f 0000 	mov.w	r0, #0
 80111f4:	f04f 0100 	mov.w	r1, #0
 80111f8:	0159      	lsls	r1, r3, #5
 80111fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80111fe:	0150      	lsls	r0, r2, #5
 8011200:	4602      	mov	r2, r0
 8011202:	460b      	mov	r3, r1
 8011204:	4651      	mov	r1, sl
 8011206:	ebb2 0801 	subs.w	r8, r2, r1
 801120a:	4659      	mov	r1, fp
 801120c:	eb63 0901 	sbc.w	r9, r3, r1
 8011210:	f04f 0200 	mov.w	r2, #0
 8011214:	f04f 0300 	mov.w	r3, #0
 8011218:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801121c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011220:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011224:	4690      	mov	r8, r2
 8011226:	4699      	mov	r9, r3
 8011228:	4653      	mov	r3, sl
 801122a:	eb18 0303 	adds.w	r3, r8, r3
 801122e:	60bb      	str	r3, [r7, #8]
 8011230:	465b      	mov	r3, fp
 8011232:	eb49 0303 	adc.w	r3, r9, r3
 8011236:	60fb      	str	r3, [r7, #12]
 8011238:	f04f 0200 	mov.w	r2, #0
 801123c:	f04f 0300 	mov.w	r3, #0
 8011240:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011244:	4649      	mov	r1, r9
 8011246:	00cb      	lsls	r3, r1, #3
 8011248:	4641      	mov	r1, r8
 801124a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801124e:	4641      	mov	r1, r8
 8011250:	00ca      	lsls	r2, r1, #3
 8011252:	4610      	mov	r0, r2
 8011254:	4619      	mov	r1, r3
 8011256:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801125a:	f04f 0300 	mov.w	r3, #0
 801125e:	f7ef f8a7 	bl	80003b0 <__aeabi_uldivmod>
 8011262:	4602      	mov	r2, r0
 8011264:	460b      	mov	r3, r1
 8011266:	4613      	mov	r3, r2
 8011268:	2b00      	cmp	r3, #0
 801126a:	d040      	beq.n	80112ee <prvTCPNextTimeout+0x2fe>
 801126c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801126e:	2200      	movs	r2, #0
 8011270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011274:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011278:	4642      	mov	r2, r8
 801127a:	464b      	mov	r3, r9
 801127c:	f04f 0000 	mov.w	r0, #0
 8011280:	f04f 0100 	mov.w	r1, #0
 8011284:	0159      	lsls	r1, r3, #5
 8011286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801128a:	0150      	lsls	r0, r2, #5
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	4641      	mov	r1, r8
 8011292:	1a54      	subs	r4, r2, r1
 8011294:	4649      	mov	r1, r9
 8011296:	eb63 0501 	sbc.w	r5, r3, r1
 801129a:	f04f 0200 	mov.w	r2, #0
 801129e:	f04f 0300 	mov.w	r3, #0
 80112a2:	00ab      	lsls	r3, r5, #2
 80112a4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80112a8:	00a2      	lsls	r2, r4, #2
 80112aa:	4614      	mov	r4, r2
 80112ac:	461d      	mov	r5, r3
 80112ae:	4643      	mov	r3, r8
 80112b0:	18e3      	adds	r3, r4, r3
 80112b2:	603b      	str	r3, [r7, #0]
 80112b4:	464b      	mov	r3, r9
 80112b6:	eb45 0303 	adc.w	r3, r5, r3
 80112ba:	607b      	str	r3, [r7, #4]
 80112bc:	f04f 0200 	mov.w	r2, #0
 80112c0:	f04f 0300 	mov.w	r3, #0
 80112c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80112c8:	4629      	mov	r1, r5
 80112ca:	00cb      	lsls	r3, r1, #3
 80112cc:	4621      	mov	r1, r4
 80112ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80112d2:	4621      	mov	r1, r4
 80112d4:	00ca      	lsls	r2, r1, #3
 80112d6:	4610      	mov	r0, r2
 80112d8:	4619      	mov	r1, r3
 80112da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80112de:	f04f 0300 	mov.w	r3, #0
 80112e2:	f7ef f865 	bl	80003b0 <__aeabi_uldivmod>
 80112e6:	4602      	mov	r2, r0
 80112e8:	460b      	mov	r3, r1
 80112ea:	b292      	uxth	r2, r2
 80112ec:	e000      	b.n	80112f0 <prvTCPNextTimeout+0x300>
 80112ee:	2201      	movs	r2, #1
 80112f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112f2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 80112f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112f8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 80112fc:	4618      	mov	r0, r3
 80112fe:	3758      	adds	r7, #88	@ 0x58
 8011300:	46bd      	mov	sp, r7
 8011302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011306:	bf00      	nop
 8011308:	08025cf0 	.word	0x08025cf0

0801130c <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 801130c:	b4b0      	push	{r4, r5, r7}
 801130e:	b08b      	sub	sp, #44	@ 0x2c
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 801131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801131c:	899b      	ldrh	r3, [r3, #12]
 801131e:	b29b      	uxth	r3, r3
 8011320:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011324:	4293      	cmp	r3, r2
 8011326:	d10e      	bne.n	8011346 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	330e      	adds	r3, #14
 801132c:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 801132e:	2301      	movs	r3, #1
 8011330:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	3308      	adds	r3, #8
 8011336:	f107 0408 	add.w	r4, r7, #8
 801133a:	6818      	ldr	r0, [r3, #0]
 801133c:	6859      	ldr	r1, [r3, #4]
 801133e:	689a      	ldr	r2, [r3, #8]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011344:	e018      	b.n	8011378 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	330e      	adds	r3, #14
 801134a:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 801134c:	2300      	movs	r3, #0
 801134e:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011350:	6a3b      	ldr	r3, [r7, #32]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	061a      	lsls	r2, r3, #24
 8011356:	6a3b      	ldr	r3, [r7, #32]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	021b      	lsls	r3, r3, #8
 801135c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011360:	431a      	orrs	r2, r3
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	0a1b      	lsrs	r3, r3, #8
 8011368:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801136c:	431a      	orrs	r2, r3
 801136e:	6a3b      	ldr	r3, [r7, #32]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	0e1b      	lsrs	r3, r3, #24
 8011374:	4313      	orrs	r3, r2
 8011376:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	461d      	mov	r5, r3
 801137c:	f107 0408 	add.w	r4, r7, #8
 8011380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011384:	6823      	ldr	r3, [r4, #0]
 8011386:	602b      	str	r3, [r5, #0]
    }
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	372c      	adds	r7, #44	@ 0x2c
 801138c:	46bd      	mov	sp, r7
 801138e:	bcb0      	pop	{r4, r5, r7}
 8011390:	4770      	bx	lr
	...

08011394 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011394:	b5b0      	push	{r4, r5, r7, lr}
 8011396:	b096      	sub	sp, #88	@ 0x58
 8011398:	af04      	add	r7, sp, #16
 801139a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 801139c:	2301      	movs	r3, #1
 801139e:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d104      	bne.n	80113b0 <xProcessReceivedTCPPacket+0x1c>
 80113a6:	f240 21f7 	movw	r1, #759	@ 0x2f7
 80113aa:	4898      	ldr	r0, [pc, #608]	@ (801160c <xProcessReceivedTCPPacket+0x278>)
 80113ac:	f7f0 f9de 	bl	800176c <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d104      	bne.n	80113c2 <xProcessReceivedTCPPacket+0x2e>
 80113b8:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 80113bc:	4893      	ldr	r0, [pc, #588]	@ (801160c <xProcessReceivedTCPPacket+0x278>)
 80113be:	f7f0 f9d5 	bl	800176c <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7f8 fb55 	bl	8009a78 <uxIPHeaderSizePacket>
 80113ce:	4603      	mov	r3, r0
 80113d0:	330e      	adds	r3, #14
 80113d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80113d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113da:	3314      	adds	r3, #20
 80113dc:	429a      	cmp	r2, r3
 80113de:	d202      	bcs.n	80113e6 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 80113e0:	2300      	movs	r3, #0
 80113e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80113e4:	e191      	b.n	801170a <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 80113ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113ec:	4413      	add	r3, r2
 80113ee:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80113f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f2:	7b5b      	ldrb	r3, [r3, #13]
 80113f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 80113f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f8:	885b      	ldrh	r3, [r3, #2]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	021b      	lsls	r3, r3, #8
 80113fe:	b21a      	sxth	r2, r3
 8011400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011402:	885b      	ldrh	r3, [r3, #2]
 8011404:	b29b      	uxth	r3, r3
 8011406:	0a1b      	lsrs	r3, r3, #8
 8011408:	b29b      	uxth	r3, r3
 801140a:	b21b      	sxth	r3, r3
 801140c:	4313      	orrs	r3, r2
 801140e:	b21b      	sxth	r3, r3
 8011410:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8011412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	b29b      	uxth	r3, r3
 8011418:	021b      	lsls	r3, r3, #8
 801141a:	b21a      	sxth	r2, r3
 801141c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141e:	881b      	ldrh	r3, [r3, #0]
 8011420:	b29b      	uxth	r3, r3
 8011422:	0a1b      	lsrs	r3, r3, #8
 8011424:	b29b      	uxth	r3, r3
 8011426:	b21b      	sxth	r3, r3
 8011428:	4313      	orrs	r3, r2
 801142a:	b21b      	sxth	r3, r3
 801142c:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011432:	f107 0308 	add.w	r3, r7, #8
 8011436:	4611      	mov	r1, r2
 8011438:	4618      	mov	r0, r3
 801143a:	f7ff ff67 	bl	801130c <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 801143e:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8011440:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011442:	9303      	str	r3, [sp, #12]
 8011444:	466c      	mov	r4, sp
 8011446:	f107 0310 	add.w	r3, r7, #16
 801144a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801144e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011452:	f107 0308 	add.w	r3, r7, #8
 8011456:	cb0c      	ldmia	r3, {r2, r3}
 8011458:	4629      	mov	r1, r5
 801145a:	2000      	movs	r0, #0
 801145c:	f7fe fbc2 	bl	800fbe4 <pxTCPSocketLookup>
 8011460:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8011462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011464:	2b00      	cmp	r3, #0
 8011466:	d008      	beq.n	801147a <xProcessReceivedTCPPacket+0xe6>
 8011468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801146a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801146e:	4618      	mov	r0, r3
 8011470:	f000 fc92 	bl	8011d98 <prvTCPSocketIsActive>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d116      	bne.n	80114a8 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 801147a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801147c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801147e:	4619      	mov	r1, r3
 8011480:	4863      	ldr	r0, [pc, #396]	@ (8011610 <xProcessReceivedTCPPacket+0x27c>)
 8011482:	f010 fbb1 	bl	8021be8 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011486:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011488:	f003 031f 	and.w	r3, r3, #31
 801148c:	2b10      	cmp	r3, #16
 801148e:	d008      	beq.n	80114a2 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8011490:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011492:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011496:	2b00      	cmp	r3, #0
 8011498:	d103      	bne.n	80114a2 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	4618      	mov	r0, r3
 801149e:	f002 fd0b 	bl	8013eb8 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 80114a2:	2300      	movs	r3, #0
 80114a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80114a6:	e0d6      	b.n	8011656 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 80114a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114aa:	2200      	movs	r2, #0
 80114ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 80114b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114b2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d127      	bne.n	801150a <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 80114ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80114bc:	f003 031f 	and.w	r3, r3, #31
 80114c0:	2b02      	cmp	r3, #2
 80114c2:	d015      	beq.n	80114f0 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 80114c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80114c6:	4618      	mov	r0, r3
 80114c8:	f003 fbbe 	bl	8014c48 <prvTCPFlagMeaning>
 80114cc:	4601      	mov	r1, r0
 80114ce:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80114d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80114d2:	4850      	ldr	r0, [pc, #320]	@ (8011614 <xProcessReceivedTCPPacket+0x280>)
 80114d4:	f010 fb88 	bl	8021be8 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 80114d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80114da:	f003 0304 	and.w	r3, r3, #4
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d103      	bne.n	80114ea <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f002 fce7 	bl	8013eb8 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 80114ea:	2300      	movs	r3, #0
 80114ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80114ee:	e0b2      	b.n	8011656 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	4619      	mov	r1, r3
 80114f4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80114f6:	f001 f999 	bl	801282c <prvHandleListen>
 80114fa:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 80114fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f040 80a9 	bne.w	8011656 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8011504:	2300      	movs	r3, #0
 8011506:	647b      	str	r3, [r7, #68]	@ 0x44
 8011508:	e0a5      	b.n	8011656 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 801150a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801150c:	f003 0304 	and.w	r3, r3, #4
 8011510:	2b00      	cmp	r3, #0
 8011512:	d068      	beq.n	80115e6 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8011514:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011516:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8011518:	4619      	mov	r1, r3
 801151a:	483f      	ldr	r0, [pc, #252]	@ (8011618 <xProcessReceivedTCPPacket+0x284>)
 801151c:	f010 fb64 	bl	8021be8 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011522:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011526:	2b02      	cmp	r3, #2
 8011528:	d11f      	bne.n	801156a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 801152a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801152c:	689b      	ldr	r3, [r3, #8]
 801152e:	061a      	lsls	r2, r3, #24
 8011530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	021b      	lsls	r3, r3, #8
 8011536:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801153a:	431a      	orrs	r2, r3
 801153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801153e:	689b      	ldr	r3, [r3, #8]
 8011540:	0a1b      	lsrs	r3, r3, #8
 8011542:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011546:	431a      	orrs	r2, r3
 8011548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	0e1b      	lsrs	r3, r3, #24
 801154e:	4313      	orrs	r3, r2
 8011550:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8011552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011554:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011558:	3301      	adds	r3, #1
 801155a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801155c:	429a      	cmp	r2, r3
 801155e:	d13f      	bne.n	80115e0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011560:	2100      	movs	r1, #0
 8011562:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011564:	f7ff fb34 	bl	8010bd0 <vTCPStateChange>
 8011568:	e03a      	b.n	80115e0 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801156a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	061a      	lsls	r2, r3, #24
 8011570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	021b      	lsls	r3, r3, #8
 8011576:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801157a:	431a      	orrs	r2, r3
 801157c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	0a1b      	lsrs	r3, r3, #8
 8011582:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011586:	431a      	orrs	r2, r3
 8011588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	0e1b      	lsrs	r3, r3, #24
 801158e:	4313      	orrs	r3, r2
 8011590:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8011592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011594:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801159a:	429a      	cmp	r2, r3
 801159c:	d104      	bne.n	80115a8 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801159e:	2100      	movs	r1, #0
 80115a0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80115a2:	f7ff fb15 	bl	8010bd0 <vTCPStateChange>
 80115a6:	e01b      	b.n	80115e0 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 80115a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115aa:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80115ae:	4619      	mov	r1, r3
 80115b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80115b2:	f003 fc82 	bl	8014eba <xSequenceGreaterThan>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d011      	beq.n	80115e0 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 80115bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115be:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 80115c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115c4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 80115c8:	4413      	add	r3, r2
 80115ca:	4619      	mov	r1, r3
 80115cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80115ce:	f003 fc5e 	bl	8014e8e <xSequenceLessThan>
 80115d2:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d003      	beq.n	80115e0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	4618      	mov	r0, r3
 80115dc:	f002 fc5f 	bl	8013e9e <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 80115e0:	2300      	movs	r3, #0
 80115e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80115e4:	e037      	b.n	8011656 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 80115e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80115e8:	f003 031f 	and.w	r3, r3, #31
 80115ec:	2b02      	cmp	r3, #2
 80115ee:	d117      	bne.n	8011620 <xProcessReceivedTCPPacket+0x28c>
 80115f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115f2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80115f6:	2b04      	cmp	r3, #4
 80115f8:	d912      	bls.n	8011620 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 80115fa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80115fc:	4619      	mov	r1, r3
 80115fe:	4807      	ldr	r0, [pc, #28]	@ (801161c <xProcessReceivedTCPPacket+0x288>)
 8011600:	f010 faf2 	bl	8021be8 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8011604:	2300      	movs	r3, #0
 8011606:	647b      	str	r3, [r7, #68]	@ 0x44
 8011608:	e025      	b.n	8011656 <xProcessReceivedTCPPacket+0x2c2>
 801160a:	bf00      	nop
 801160c:	08025be4 	.word	0x08025be4
 8011610:	08025d1c 	.word	0x08025d1c
 8011614:	08025d44 	.word	0x08025d44
 8011618:	08025d7c 	.word	0x08025d7c
 801161c:	08025da0 	.word	0x08025da0
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 8011620:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011622:	f7f8 fa43 	bl	8009aac <uxIPHeaderSizeSocket>
 8011626:	4603      	mov	r3, r0
 8011628:	330e      	adds	r3, #14
 801162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 801162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162e:	33a0      	adds	r3, #160	@ 0xa0
 8011630:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011632:	4413      	add	r3, r2
 8011634:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801163c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801163e:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8011640:	2214      	movs	r2, #20
 8011642:	4619      	mov	r1, r3
 8011644:	f010 fcec 	bl	8022020 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8011648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164a:	330d      	adds	r3, #13
 801164c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801164e:	4413      	add	r3, r2
 8011650:	2210      	movs	r2, #16
 8011652:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8011656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011658:	2b00      	cmp	r3, #0
 801165a:	d056      	beq.n	801170a <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 801165c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801165e:	2b00      	cmp	r3, #0
 8011660:	d104      	bne.n	801166c <xProcessReceivedTCPPacket+0x2d8>
 8011662:	f240 319e 	movw	r1, #926	@ 0x39e
 8011666:	482b      	ldr	r0, [pc, #172]	@ (8011714 <xProcessReceivedTCPPacket+0x380>)
 8011668:	f7f0 f880 	bl	800176c <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 801166c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801166e:	f7ff fa53 	bl	8010b18 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8011672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011674:	7b1b      	ldrb	r3, [r3, #12]
 8011676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801167a:	2b50      	cmp	r3, #80	@ 0x50
 801167c:	d905      	bls.n	801168a <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	4619      	mov	r1, r3
 8011682:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011684:	f000 f894 	bl	80117b0 <prvCheckOptions>
 8011688:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 801168a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801168c:	2b00      	cmp	r3, #0
 801168e:	d03c      	beq.n	801170a <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011692:	89db      	ldrh	r3, [r3, #14]
 8011694:	b29b      	uxth	r3, r3
 8011696:	021b      	lsls	r3, r3, #8
 8011698:	b21a      	sxth	r2, r3
 801169a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169c:	89db      	ldrh	r3, [r3, #14]
 801169e:	b29b      	uxth	r3, r3
 80116a0:	0a1b      	lsrs	r3, r3, #8
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	b21b      	sxth	r3, r3
 80116a6:	4313      	orrs	r3, r2
 80116a8:	b21b      	sxth	r3, r3
 80116aa:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 80116ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80116ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116b0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 80116b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80116b6:	f003 0302 	and.w	r3, r3, #2
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d10a      	bne.n	80116d4 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80116be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80116c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80116c6:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80116ca:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 80116ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116d0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 80116d4:	f107 031c 	add.w	r3, r7, #28
 80116d8:	4619      	mov	r1, r3
 80116da:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80116dc:	f000 ff78 	bl	80125d0 <prvTCPHandleState>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	dd05      	ble.n	80116f2 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 80116e6:	f107 031c 	add.w	r3, r7, #28
 80116ea:	4619      	mov	r1, r3
 80116ec:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80116ee:	f001 fc6f 	bl	8012fd0 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d005      	beq.n	8011704 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	4618      	mov	r0, r3
 80116fc:	f005 fbcc 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 8011700:	2300      	movs	r3, #0
 8011702:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8011704:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011706:	f7ff fc73 	bl	8010ff0 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 801170a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 801170c:	4618      	mov	r0, r3
 801170e:	3748      	adds	r7, #72	@ 0x48
 8011710:	46bd      	mov	sp, r7
 8011712:	bdb0      	pop	{r4, r5, r7, pc}
 8011714:	08025be4 	.word	0x08025be4

08011718 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8011718:	b580      	push	{r7, lr}
 801171a:	b088      	sub	sp, #32
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011724:	021b      	lsls	r3, r3, #8
 8011726:	b21a      	sxth	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801172c:	0a1b      	lsrs	r3, r3, #8
 801172e:	b29b      	uxth	r3, r3
 8011730:	b21b      	sxth	r3, r3
 8011732:	4313      	orrs	r3, r2
 8011734:	b21b      	sxth	r3, r3
 8011736:	b29b      	uxth	r3, r3
 8011738:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 801173a:	2300      	movs	r3, #0
 801173c:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801173e:	4b19      	ldr	r3, [pc, #100]	@ (80117a4 <xTCPCheckNewClient+0x8c>)
 8011740:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011742:	4b19      	ldr	r3, [pc, #100]	@ (80117a8 <xTCPCheckNewClient+0x90>)
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	61fb      	str	r3, [r7, #28]
 8011748:	e023      	b.n	8011792 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	697a      	ldr	r2, [r7, #20]
 8011750:	429a      	cmp	r2, r3
 8011752:	d11b      	bne.n	801178c <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011760:	2b06      	cmp	r3, #6
 8011762:	d113      	bne.n	801178c <xTCPCheckNewClient+0x74>
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801176a:	f003 0302 	and.w	r3, r3, #2
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b00      	cmp	r3, #0
 8011772:	d00b      	beq.n	801178c <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801177e:	4619      	mov	r1, r3
 8011780:	480a      	ldr	r0, [pc, #40]	@ (80117ac <xTCPCheckNewClient+0x94>)
 8011782:	f010 fa31 	bl	8021be8 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8011786:	2301      	movs	r3, #1
 8011788:	61bb      	str	r3, [r7, #24]
                    break;
 801178a:	e006      	b.n	801179a <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8011792:	69fa      	ldr	r2, [r7, #28]
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	429a      	cmp	r2, r3
 8011798:	d1d7      	bne.n	801174a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 801179a:	69bb      	ldr	r3, [r7, #24]
    }
 801179c:	4618      	mov	r0, r3
 801179e:	3720      	adds	r7, #32
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}
 80117a4:	2000144c 	.word	0x2000144c
 80117a8:	20001444 	.word	0x20001444
 80117ac:	08025dc0 	.word	0x08025dc0

080117b0 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b08c      	sub	sp, #48	@ 0x30
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 80117ba:	6838      	ldr	r0, [r7, #0]
 80117bc:	f7f8 f95c 	bl	8009a78 <uxIPHeaderSizePacket>
 80117c0:	4603      	mov	r3, r0
 80117c2:	330e      	adds	r3, #14
 80117c4:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	4413      	add	r3, r2
 80117ce:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 80117d0:	2301      	movs	r3, #1
 80117d2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	3314      	adds	r3, #20
 80117d8:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	3314      	adds	r3, #20
 80117e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	7b1b      	ldrb	r3, [r3, #12]
 80117e8:	2b50      	cmp	r3, #80	@ 0x50
 80117ea:	d93f      	bls.n	801186c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	7b1b      	ldrb	r3, [r3, #12]
 80117f0:	091b      	lsrs	r3, r3, #4
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	3b05      	subs	r3, #5
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
 80117fe:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011804:	697a      	ldr	r2, [r7, #20]
 8011806:	429a      	cmp	r2, r3
 8011808:	d230      	bcs.n	801186c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	6a3a      	ldr	r2, [r7, #32]
 8011814:	429a      	cmp	r2, r3
 8011816:	d829      	bhi.n	801186c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	7b5b      	ldrb	r3, [r3, #13]
 801181c:	f003 0302 	and.w	r3, r3, #2
 8011820:	2b00      	cmp	r3, #0
 8011822:	d002      	beq.n	801182a <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8011824:	2301      	movs	r3, #1
 8011826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011828:	e001      	b.n	801182e <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 801182a:	2300      	movs	r3, #0
 801182c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 801182e:	6a3b      	ldr	r3, [r7, #32]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d018      	beq.n	8011866 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8011834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	6a39      	ldr	r1, [r7, #32]
 801183a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801183c:	f000 f81c 	bl	8011878 <prvSingleStepTCPHeaderOptions>
 8011840:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	2b00      	cmp	r3, #0
 8011846:	da02      	bge.n	801184e <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8011848:	2300      	movs	r3, #0
 801184a:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 801184c:	e00e      	b.n	801186c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00a      	beq.n	801186a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	6a3a      	ldr	r2, [r7, #32]
 8011858:	1ad3      	subs	r3, r2, r3
 801185a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011860:	4413      	add	r3, r2
 8011862:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8011864:	e7e3      	b.n	801182e <prvCheckOptions+0x7e>
                            break;
 8011866:	bf00      	nop
 8011868:	e000      	b.n	801186c <prvCheckOptions+0xbc>
                            break;
 801186a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 801186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801186e:	4618      	mov	r0, r3
 8011870:	3730      	adds	r7, #48	@ 0x30
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
	...

08011878 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8011878:	b580      	push	{r7, lr}
 801187a:	b08a      	sub	sp, #40	@ 0x28
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	60b9      	str	r1, [r7, #8]
 8011882:	607a      	str	r2, [r7, #4]
 8011884:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 801188a:	2300      	movs	r3, #0
 801188c:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011894:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011896:	2300      	movs	r3, #0
 8011898:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d102      	bne.n	80118a8 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	61fb      	str	r3, [r7, #28]
 80118a6:	e0da      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d102      	bne.n	80118b6 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 80118b0:	2301      	movs	r3, #1
 80118b2:	61fb      	str	r3, [r7, #28]
 80118b4:	e0d3      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d803      	bhi.n	80118c4 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 80118bc:	f04f 33ff 	mov.w	r3, #4294967295
 80118c0:	61fb      	str	r3, [r7, #28]
 80118c2:	e0cc      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	2b03      	cmp	r3, #3
 80118ca:	d11e      	bne.n	801190a <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	2b02      	cmp	r3, #2
 80118d0:	d904      	bls.n	80118dc <prvSingleStepTCPHeaderOptions+0x64>
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	3301      	adds	r3, #1
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	2b03      	cmp	r3, #3
 80118da:	d003      	beq.n	80118e4 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 80118dc:	f04f 33ff 	mov.w	r3, #4294967295
 80118e0:	61fb      	str	r3, [r7, #28]
 80118e2:	e0bc      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d00c      	beq.n	8011904 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	3302      	adds	r3, #2
 80118ee:	781a      	ldrb	r2, [r3, #0]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80118fc:	f043 0310 	orr.w	r3, r3, #16
 8011900:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8011904:	2303      	movs	r3, #3
 8011906:	61fb      	str	r3, [r7, #28]
 8011908:	e0a9      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	2b02      	cmp	r3, #2
 8011910:	d16d      	bne.n	80119ee <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2b03      	cmp	r3, #3
 8011916:	d904      	bls.n	8011922 <prvSingleStepTCPHeaderOptions+0xaa>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	3301      	adds	r3, #1
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	2b04      	cmp	r3, #4
 8011920:	d003      	beq.n	801192a <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 8011922:	f04f 33ff 	mov.w	r3, #4294967295
 8011926:	61fb      	str	r3, [r7, #28]
 8011928:	e099      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	3302      	adds	r3, #2
 801192e:	4618      	mov	r0, r3
 8011930:	f7f8 fe4f 	bl	800a5d2 <usChar2u16>
 8011934:	4603      	mov	r3, r0
 8011936:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801193e:	461a      	mov	r2, r3
 8011940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011942:	4293      	cmp	r3, r2
 8011944:	d010      	beq.n	8011968 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8011946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011948:	2b00      	cmp	r3, #0
 801194a:	d105      	bne.n	8011958 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 801194c:	f04f 33ff 	mov.w	r3, #4294967295
 8011950:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8011952:	2301      	movs	r3, #1
 8011954:	61bb      	str	r3, [r7, #24]
 8011956:	e007      	b.n	8011968 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801195e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011960:	4619      	mov	r1, r3
 8011962:	4841      	ldr	r0, [pc, #260]	@ (8011a68 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8011964:	f010 f940 	bl	8021be8 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8011968:	69bb      	ldr	r3, [r7, #24]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d177      	bne.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 801196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011970:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011974:	d202      	bcs.n	801197c <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8011976:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801197a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011982:	461a      	mov	r2, r3
 8011984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011986:	4293      	cmp	r3, r2
 8011988:	d22e      	bcs.n	80119e8 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011990:	f043 0301 	orr.w	r3, r3, #1
 8011994:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801199e:	461a      	mov	r2, r3
 80119a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d207      	bcs.n	80119b6 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80119ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119ae:	4619      	mov	r1, r3
 80119b0:	482e      	ldr	r0, [pc, #184]	@ (8011a6c <prvSingleStepTCPHeaderOptions+0x1f4>)
 80119b2:	f010 f919 	bl	8021be8 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	685a      	ldr	r2, [r3, #4]
 80119ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80119c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119c2:	fb03 f202 	mul.w	r2, r3, r2
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 80119ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 80119d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 80119de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 80119e8:	2304      	movs	r3, #4
 80119ea:	61fb      	str	r3, [r7, #28]
 80119ec:	e037      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	3301      	adds	r3, #1
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 80119f8:	2300      	movs	r3, #0
 80119fa:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 80119fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d904      	bls.n	8011a0e <prvSingleStepTCPHeaderOptions+0x196>
 8011a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a08:	697a      	ldr	r2, [r7, #20]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d203      	bcs.n	8011a16 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 8011a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a12:	61fb      	str	r3, [r7, #28]
 8011a14:	e023      	b.n	8011a5e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b05      	cmp	r3, #5
 8011a1c:	d11a      	bne.n	8011a54 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 8011a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a22:	3b02      	subs	r3, #2
 8011a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8011a28:	69fb      	ldr	r3, [r7, #28]
 8011a2a:	3302      	adds	r3, #2
 8011a2c:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 8011a2e:	e00d      	b.n	8011a4c <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	4619      	mov	r1, r3
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	f000 f81a 	bl	8011a70 <prvReadSackOption>
                            lIndex += 8;
 8011a3c:	69fb      	ldr	r3, [r7, #28]
 8011a3e:	3308      	adds	r3, #8
 8011a40:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 8011a42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a46:	3b08      	subs	r3, #8
 8011a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 8011a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a50:	2b07      	cmp	r3, #7
 8011a52:	d8ed      	bhi.n	8011a30 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8011a54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a58:	69fa      	ldr	r2, [r7, #28]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 8011a5e:	69fb      	ldr	r3, [r7, #28]
    }
 8011a60:	4618      	mov	r0, r3
 8011a62:	3728      	adds	r7, #40	@ 0x28
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	08025dec 	.word	0x08025dec
 8011a6c:	08025e04 	.word	0x08025e04

08011a70 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b08a      	sub	sp, #40	@ 0x28
 8011a74:	af02      	add	r7, sp, #8
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	4413      	add	r3, r2
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7f8 fd8a 	bl	800a59c <ulChar2u32>
 8011a88:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	3304      	adds	r3, #4
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	4413      	add	r3, r2
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7f8 fd82 	bl	800a59c <ulChar2u32>
 8011a98:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011aa0:	69ba      	ldr	r2, [r7, #24]
 8011aa2:	69f9      	ldr	r1, [r7, #28]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f004 fba3 	bl	80161f0 <ulTCPWindowTxSack>
 8011aaa:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d029      	beq.n	8011b0a <prvReadSackOption+0x9a>
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d026      	beq.n	8011b0a <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	2100      	movs	r1, #0
 8011acc:	f7fe fed9 	bl	8010882 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f043 0202 	orr.w	r2, r3, #2
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ae0:	f003 0302 	and.w	r3, r3, #2
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d005      	beq.n	8011af4 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d005      	beq.n	8011b0a <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011b04:	6979      	ldr	r1, [r7, #20]
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 8011b0a:	bf00      	nop
 8011b0c:	3720      	adds	r7, #32
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 8011b12:	b590      	push	{r4, r7, lr}
 8011b14:	b08f      	sub	sp, #60	@ 0x3c
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
 8011b1a:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7f7 ffa9 	bl	8009a78 <uxIPHeaderSizePacket>
 8011b26:	4603      	mov	r3, r0
 8011b28:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011b2a:	4423      	add	r3, r4
 8011b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b30:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7f7 ffa0 	bl	8009a78 <uxIPHeaderSizePacket>
 8011b38:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8011b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b42:	7b1b      	ldrb	r3, [r3, #12]
 8011b44:	089b      	lsrs	r3, r3, #2
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8011b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011b50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011b54:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b5a:	69f9      	ldr	r1, [r7, #28]
 8011b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5e:	440b      	add	r3, r1
 8011b60:	330e      	adds	r3, #14
 8011b62:	441a      	add	r2, r3
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b6c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8011b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b70:	3b0e      	subs	r3, #14
 8011b72:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b78:	899b      	ldrh	r3, [r3, #12]
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	2b08      	cmp	r3, #8
 8011b7e:	d004      	beq.n	8011b8a <prvCheckRxData+0x78>
 8011b80:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d015      	beq.n	8011bb4 <prvCheckRxData+0xa2>
 8011b88:	e02c      	b.n	8011be4 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b8e:	330e      	adds	r3, #14
 8011b90:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	885b      	ldrh	r3, [r3, #2]
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	021b      	lsls	r3, r3, #8
 8011b9a:	b21a      	sxth	r2, r3
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	885b      	ldrh	r3, [r3, #2]
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	0a1b      	lsrs	r3, r3, #8
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	b21b      	sxth	r3, r3
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	b21b      	sxth	r3, r3
 8011bac:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011bae:	8afb      	ldrh	r3, [r7, #22]
 8011bb0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011bb2:	e01a      	b.n	8011bea <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bb8:	330e      	adds	r3, #14
 8011bba:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	889b      	ldrh	r3, [r3, #4]
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	021b      	lsls	r3, r3, #8
 8011bc4:	b21a      	sxth	r2, r3
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	889b      	ldrh	r3, [r3, #4]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	0a1b      	lsrs	r3, r3, #8
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	b21b      	sxth	r3, r3
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	b21b      	sxth	r3, r3
 8011bd6:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011bd8:	8afb      	ldrh	r3, [r7, #22]
 8011bda:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bde:	3328      	adds	r3, #40	@ 0x28
 8011be0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011be2:	e002      	b.n	8011bea <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8011be4:	2300      	movs	r3, #0
 8011be6:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8011be8:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 8011bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	dd01      	ble.n	8011bf6 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 8011bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bf4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8011bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	dd06      	ble.n	8011c10 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8011c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c04:	69fb      	ldr	r3, [r7, #28]
 8011c06:	4413      	add	r3, r2
 8011c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c0e:	e001      	b.n	8011c14 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 8011c10:	2300      	movs	r3, #0
 8011c12:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8011c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c16:	7b5b      	ldrb	r3, [r3, #13]
 8011c18:	f003 0320 	and.w	r3, r3, #32
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d01c      	beq.n	8011c5a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8011c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c22:	8a5b      	ldrh	r3, [r3, #18]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	021b      	lsls	r3, r3, #8
 8011c28:	b21a      	sxth	r2, r3
 8011c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2c:	8a5b      	ldrh	r3, [r3, #18]
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	0a1b      	lsrs	r3, r3, #8
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	b21b      	sxth	r3, r3
 8011c36:	4313      	orrs	r3, r2
 8011c38:	b21b      	sxth	r3, r3
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	441a      	add	r2, r3
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8011c4a:	68f9      	ldr	r1, [r7, #12]
 8011c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c4e:	f7f8 fc51 	bl	800a4f4 <FreeRTOS_min_int32>
 8011c52:	4602      	mov	r2, r0
 8011c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c56:	1a9b      	subs	r3, r3, r2
 8011c58:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 8011c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	373c      	adds	r7, #60	@ 0x3c
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd90      	pop	{r4, r7, pc}

08011c64 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b092      	sub	sp, #72	@ 0x48
 8011c68:	af02      	add	r7, sp, #8
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
 8011c70:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7f7 ff00 	bl	8009a78 <uxIPHeaderSizePacket>
 8011c78:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c80:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8011c82:	4413      	add	r3, r2
 8011c84:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c88:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011c90:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	061a      	lsls	r2, r3, #24
 8011ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	021b      	lsls	r3, r3, #8
 8011caa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011cae:	431a      	orrs	r2, r3
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	0a1b      	lsrs	r3, r3, #8
 8011cb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011cba:	431a      	orrs	r2, r3
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	0e1b      	lsrs	r3, r3, #24
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8011cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d057      	beq.n	8011d7c <prvStoreRxData+0x118>
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011cd2:	2b03      	cmp	r3, #3
 8011cd4:	d952      	bls.n	8011d7c <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d007      	beq.n	8011cf4 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fe fc89 	bl	8010602 <uxStreamBufferGetSpace>
 8011cf0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011cf2:	e003      	b.n	8011cfc <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 8011cfc:	f107 0310 	add.w	r3, r7, #16
 8011d00:	9300      	str	r3, [sp, #0]
 8011d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d06:	69f9      	ldr	r1, [r7, #28]
 8011d08:	6a38      	ldr	r0, [r7, #32]
 8011d0a:	f003 fd45 	bl	8015798 <lTCPWindowRxCheck>
 8011d0e:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	db20      	blt.n	8011d58 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d007      	beq.n	8011d2c <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	68ba      	ldr	r2, [r7, #8]
 8011d28:	4413      	add	r3, r2
 8011d2a:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 8011d2c:	69b9      	ldr	r1, [r7, #24]
 8011d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f7fe f8d2 	bl	800fedc <lTCPAddRxdata>
 8011d38:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 8011d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d3c:	697a      	ldr	r2, [r7, #20]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d00a      	beq.n	8011d58 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8011d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d44:	6979      	ldr	r1, [r7, #20]
 8011d46:	4813      	ldr	r0, [pc, #76]	@ (8011d94 <prvStoreRxData+0x130>)
 8011d48:	f00f ff4e 	bl	8021be8 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f002 f8b3 	bl	8013eb8 <prvTCPSendReset>
                    xResult = -1;
 8011d52:	f04f 33ff 	mov.w	r3, #4294967295
 8011d56:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8011d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d113      	bne.n	8011d86 <prvStoreRxData+0x122>
 8011d5e:	6a3b      	ldr	r3, [r7, #32]
 8011d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00f      	beq.n	8011d86 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8011d66:	6a3b      	ldr	r3, [r7, #32]
 8011d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	2100      	movs	r1, #0
 8011d6e:	68f8      	ldr	r0, [r7, #12]
 8011d70:	f7fe f8b4 	bl	800fedc <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	2200      	movs	r2, #0
 8011d78:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 8011d7a:	e004      	b.n	8011d86 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011d84:	e000      	b.n	8011d88 <prvStoreRxData+0x124>
        {
 8011d86:	bf00      	nop
        }

        return xResult;
 8011d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3740      	adds	r7, #64	@ 0x40
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	08025e1c 	.word	0x08025e1c

08011d98 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	4603      	mov	r3, r0
 8011da0:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 8011da2:	79fb      	ldrb	r3, [r7, #7]
 8011da4:	2b0b      	cmp	r3, #11
 8011da6:	bf8c      	ite	hi
 8011da8:	2201      	movhi	r2, #1
 8011daa:	2200      	movls	r2, #0
 8011dac:	b2d2      	uxtb	r2, r2
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	d10f      	bne.n	8011dd2 <prvTCPSocketIsActive+0x3a>
 8011db2:	f640 3281 	movw	r2, #2945	@ 0xb81
 8011db6:	fa22 f303 	lsr.w	r3, r2, r3
 8011dba:	f003 0301 	and.w	r3, r3, #1
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	bf14      	ite	ne
 8011dc2:	2301      	movne	r3, #1
 8011dc4:	2300      	moveq	r3, #0
 8011dc6:	b2db      	uxtb	r3, r3
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d002      	beq.n	8011dd2 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	60fb      	str	r3, [r7, #12]
                break;
 8011dd0:	e002      	b.n	8011dd8 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	60fb      	str	r3, [r7, #12]
                break;
 8011dd6:	bf00      	nop
        }

        return xResult;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
    }
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3714      	adds	r7, #20
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr
	...

08011de8 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8011de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dea:	b089      	sub	sp, #36	@ 0x24
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011df6:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8011df8:	7cfb      	ldrb	r3, [r7, #19]
 8011dfa:	2b08      	cmp	r3, #8
 8011dfc:	d00b      	beq.n	8011e16 <prvTCPStatusAgeCheck+0x2e>
 8011dfe:	2b08      	cmp	r3, #8
 8011e00:	dc0c      	bgt.n	8011e1c <prvTCPStatusAgeCheck+0x34>
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	dc02      	bgt.n	8011e0c <prvTCPStatusAgeCheck+0x24>
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	da05      	bge.n	8011e16 <prvTCPStatusAgeCheck+0x2e>
 8011e0a:	e007      	b.n	8011e1c <prvTCPStatusAgeCheck+0x34>
 8011e0c:	2b05      	cmp	r3, #5
 8011e0e:	d105      	bne.n	8011e1c <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8011e10:	2300      	movs	r3, #0
 8011e12:	617b      	str	r3, [r7, #20]
                    break;
 8011e14:	e005      	b.n	8011e22 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8011e16:	2300      	movs	r3, #0
 8011e18:	617b      	str	r3, [r7, #20]
                    break;
 8011e1a:	e002      	b.n	8011e22 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	617b      	str	r3, [r7, #20]
                    break;
 8011e20:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d032      	beq.n	8011e8e <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8011e28:	f7f2 fa8c 	bl	8004344 <xTaskGetTickCount>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d925      	bls.n	8011e8e <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011e46:	461d      	mov	r5, r3
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011e52:	461e      	mov	r6, r3
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f000 fdca 	bl	80129f4 <FreeRTOS_GetTCPStateName>
 8011e60:	4603      	mov	r3, r0
 8011e62:	9300      	str	r3, [sp, #0]
 8011e64:	4633      	mov	r3, r6
 8011e66:	4622      	mov	r2, r4
 8011e68:	4629      	mov	r1, r5
 8011e6a:	480b      	ldr	r0, [pc, #44]	@ (8011e98 <prvTCPStatusAgeCheck+0xb0>)
 8011e6c:	f00f febc 	bl	8021be8 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011e70:	2108      	movs	r1, #8
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7fe feac 	bl	8010bd0 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011e7e:	f003 0304 	and.w	r3, r3, #4
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d002      	beq.n	8011e8e <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8011e88:	f04f 33ff 	mov.w	r3, #4294967295
 8011e8c:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 8011e8e:	697b      	ldr	r3, [r7, #20]
        }
 8011e90:	4618      	mov	r0, r3
 8011e92:	371c      	adds	r7, #28
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e98:	08025e44 	.word	0x08025e44

08011e9c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011e9c:	b5b0      	push	{r4, r5, r7, lr}
 8011e9e:	b08a      	sub	sp, #40	@ 0x28
 8011ea0:	af02      	add	r7, sp, #8
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011eaa:	6838      	ldr	r0, [r7, #0]
 8011eac:	f7f7 fde4 	bl	8009a78 <uxIPHeaderSizePacket>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011eb4:	4423      	add	r3, r4
 8011eb6:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011eb8:	69bb      	ldr	r3, [r7, #24]
 8011eba:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	74fb      	strb	r3, [r7, #19]
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	7b5b      	ldrb	r3, [r3, #13]
 8011ec4:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011ecc:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	061a      	lsls	r2, r3, #24
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	021b      	lsls	r3, r3, #8
 8011ede:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011ee2:	431a      	orrs	r2, r3
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	689b      	ldr	r3, [r3, #8]
 8011ee8:	0a1b      	lsrs	r3, r3, #8
 8011eea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011eee:	431a      	orrs	r2, r3
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	0e1b      	lsrs	r3, r3, #24
 8011ef6:	4313      	orrs	r3, r2
 8011ef8:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8011efa:	7cbb      	ldrb	r3, [r7, #18]
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d004      	beq.n	8011f0e <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	695b      	ldr	r3, [r3, #20]
 8011f08:	1c5a      	adds	r2, r3, #1
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d10b      	bne.n	8011f36 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	6a1a      	ldr	r2, [r3, #32]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f30:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8011f34:	e00c      	b.n	8011f50 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d106      	bne.n	8011f50 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011f48:	f043 0301 	orr.w	r3, r3, #1
 8011f4c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011f56:	f003 0301 	and.w	r3, r3, #1
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d10b      	bne.n	8011f78 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	2211      	movs	r2, #17
 8011f6c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8011f6e:	210a      	movs	r1, #10
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7fe fe2d 	bl	8010bd0 <vTCPStateChange>
 8011f76:	e023      	b.n	8011fc0 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011f88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011f8c:	b2db      	uxtb	r3, r3
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d103      	bne.n	8011f9a <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	2200      	movs	r2, #0
 8011f96:	735a      	strb	r2, [r3, #13]
 8011f98:	e012      	b.n	8011fc0 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011fa0:	f003 0302 	and.w	r3, r3, #2
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d103      	bne.n	8011fb2 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2210      	movs	r2, #16
 8011fae:	735a      	strb	r2, [r3, #13]
 8011fb0:	e002      	b.n	8011fb8 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011fb8:	2108      	movs	r1, #8
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7fe fe08 	bl	8010bd0 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	6a1a      	ldr	r2, [r3, #32]
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	7b5b      	ldrb	r3, [r3, #13]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d00d      	beq.n	8011fec <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7f7 fd6b 	bl	8009aac <uxIPHeaderSizeSocket>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011fe0:	4413      	add	r3, r2
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	3314      	adds	r3, #20
 8011fe6:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8011fe8:	7cfb      	ldrb	r3, [r7, #19]
 8011fea:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011ff2:	3314      	adds	r3, #20
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	009b      	lsls	r3, r3, #2
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8011ffe:	4b14      	ldr	r3, [pc, #80]	@ (8012050 <prvTCPHandleFin+0x1b4>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d01f      	beq.n	8012046 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	69db      	ldr	r3, [r3, #28]
 801200a:	68ba      	ldr	r2, [r7, #8]
 801200c:	1ad0      	subs	r0, r2, r3
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6a1a      	ldr	r2, [r3, #32]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	69db      	ldr	r3, [r3, #28]
 8012016:	1ad4      	subs	r4, r2, r3
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	69db      	ldr	r3, [r3, #28]
 8012020:	1ad5      	subs	r5, r2, r3
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	69db      	ldr	r3, [r3, #28]
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	68fa      	ldr	r2, [r7, #12]
 801202e:	6911      	ldr	r1, [r2, #16]
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	68d2      	ldr	r2, [r2, #12]
 8012034:	1a8a      	subs	r2, r1, r2
 8012036:	9201      	str	r2, [sp, #4]
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	462b      	mov	r3, r5
 801203c:	4622      	mov	r2, r4
 801203e:	4601      	mov	r1, r0
 8012040:	4804      	ldr	r0, [pc, #16]	@ (8012054 <prvTCPHandleFin+0x1b8>)
 8012042:	f00f fdd1 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8012046:	69fb      	ldr	r3, [r7, #28]
    }
 8012048:	4618      	mov	r0, r3
 801204a:	3720      	adds	r7, #32
 801204c:	46bd      	mov	sp, r7
 801204e:	bdb0      	pop	{r4, r5, r7, pc}
 8012050:	20001488 	.word	0x20001488
 8012054:	08025e7c 	.word	0x08025e7c

08012058 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012058:	b590      	push	{r4, r7, lr}
 801205a:	b09b      	sub	sp, #108	@ 0x6c
 801205c:	af02      	add	r7, sp, #8
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
 8012064:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f7f7 fd1e 	bl	8009aac <uxIPHeaderSizeSocket>
 8012070:	4603      	mov	r3, r0
 8012072:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012074:	4423      	add	r3, r4
 8012076:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801207a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012082:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012086:	7b5b      	ldrb	r3, [r3, #13]
 8012088:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801208c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	061a      	lsls	r2, r3, #24
 8012092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	021b      	lsls	r3, r3, #8
 8012098:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801209c:	431a      	orrs	r2, r3
 801209e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	0a1b      	lsrs	r3, r3, #8
 80120a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80120a8:	431a      	orrs	r2, r3
 80120aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	0e1b      	lsrs	r3, r3, #24
 80120b0:	4313      	orrs	r3, r2
 80120b2:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 80120b8:	2300      	movs	r3, #0
 80120ba:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 80120bc:	2310      	movs	r3, #16
 80120be:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 80120c2:	2317      	movs	r3, #23
 80120c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	d105      	bne.n	80120de <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 80120d2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80120d6:	f043 0302 	orr.w	r3, r3, #2
 80120da:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 80120de:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80120e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80120e6:	4013      	ands	r3, r2
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d044      	beq.n	801217c <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80120f8:	2b04      	cmp	r3, #4
 80120fa:	d101      	bne.n	8012100 <prvHandleSynReceived+0xa8>
 80120fc:	4977      	ldr	r1, [pc, #476]	@ (80122dc <prvHandleSynReceived+0x284>)
 80120fe:	e000      	b.n	8012102 <prvHandleSynReceived+0xaa>
 8012100:	4977      	ldr	r1, [pc, #476]	@ (80122e0 <prvHandleSynReceived+0x288>)
 8012102:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012106:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801210a:	4876      	ldr	r0, [pc, #472]	@ (80122e4 <prvHandleSynReceived+0x28c>)
 801210c:	f00f fd6c 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012110:	2108      	movs	r1, #8
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	f7fe fd5c 	bl	8010bd0 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	061a      	lsls	r2, r3, #24
 801211e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012120:	689b      	ldr	r3, [r3, #8]
 8012122:	021b      	lsls	r3, r3, #8
 8012124:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012128:	431a      	orrs	r2, r3
 801212a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801212c:	689b      	ldr	r3, [r3, #8]
 801212e:	0a1b      	lsrs	r3, r3, #8
 8012130:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012134:	431a      	orrs	r2, r3
 8012136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012138:	689b      	ldr	r3, [r3, #8]
 801213a:	0e1b      	lsrs	r3, r3, #24
 801213c:	431a      	orrs	r2, r3
 801213e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012140:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012146:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8012148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801214a:	7b5b      	ldrb	r3, [r3, #13]
 801214c:	f043 0304 	orr.w	r3, r3, #4
 8012150:	b2da      	uxtb	r2, r3
 8012152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012154:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	f7f7 fca8 	bl	8009aac <uxIPHeaderSizeSocket>
 801215c:	4602      	mov	r2, r0
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	4413      	add	r3, r2
 8012162:	3314      	adds	r3, #20
 8012164:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012168:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	b2db      	uxtb	r3, r3
 801216e:	3314      	adds	r3, #20
 8012170:	b2db      	uxtb	r3, r3
 8012172:	009b      	lsls	r3, r3, #2
 8012174:	b2da      	uxtb	r2, r3
 8012176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012178:	731a      	strb	r2, [r3, #12]
 801217a:	e0aa      	b.n	80122d2 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012184:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 801218c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801218e:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012198:	2b02      	cmp	r3, #2
 801219a:	d12e      	bne.n	80121fa <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7f7 fc85 	bl	8009aac <uxIPHeaderSizeSocket>
 80121a2:	4603      	mov	r3, r0
 80121a4:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 80121a6:	33a0      	adds	r3, #160	@ 0xa0
 80121a8:	68fa      	ldr	r2, [r7, #12]
 80121aa:	4413      	add	r3, r2
 80121ac:	330a      	adds	r3, #10
 80121ae:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80121b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121b2:	2210      	movs	r2, #16
 80121b4:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80121b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121b8:	2210      	movs	r2, #16
 80121ba:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80121ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80121d0:	f003 f8ec 	bl	80153ac <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 80121d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121d6:	1c5a      	adds	r2, r3, #1
 80121d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121da:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 80121dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121de:	1c5a      	adds	r2, r3, #1
 80121e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121e2:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 80121e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121e6:	6a1b      	ldr	r3, [r3, #32]
 80121e8:	1c5a      	adds	r2, r3, #1
 80121ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121ec:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 80121ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121f2:	1c5a      	adds	r2, r3, #1
 80121f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80121f8:	e005      	b.n	8012206 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d102      	bne.n	8012206 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012204:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012208:	69db      	ldr	r3, [r3, #28]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801220e:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	7a1b      	ldrb	r3, [r3, #8]
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	b2db      	uxtb	r3, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <prvHandleSynReceived+0x1ca>
 801221e:	200a      	movs	r0, #10
 8012220:	e000      	b.n	8012224 <prvHandleSynReceived+0x1cc>
 8012222:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 801222a:	f107 0210 	add.w	r2, r7, #16
 801222e:	2328      	movs	r3, #40	@ 0x28
 8012230:	f7fc fec0 	bl	800efb4 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801223a:	2b02      	cmp	r3, #2
 801223c:	d101      	bne.n	8012242 <prvHandleSynReceived+0x1ea>
 801223e:	492a      	ldr	r1, [pc, #168]	@ (80122e8 <prvHandleSynReceived+0x290>)
 8012240:	e000      	b.n	8012244 <prvHandleSynReceived+0x1ec>
 8012242:	492a      	ldr	r1, [pc, #168]	@ (80122ec <prvHandleSynReceived+0x294>)
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012248:	461c      	mov	r4, r3
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012250:	461a      	mov	r2, r3
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012258:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801225c:	b2db      	uxtb	r3, r3
 801225e:	4618      	mov	r0, r3
 8012260:	f107 0310 	add.w	r3, r7, #16
 8012264:	9001      	str	r0, [sp, #4]
 8012266:	9200      	str	r2, [sp, #0]
 8012268:	4622      	mov	r2, r4
 801226a:	4821      	ldr	r0, [pc, #132]	@ (80122f0 <prvHandleSynReceived+0x298>)
 801226c:	f00f fcbc 	bl	8021be8 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012276:	2b02      	cmp	r3, #2
 8012278:	d002      	beq.n	8012280 <prvHandleSynReceived+0x228>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d014      	beq.n	80122aa <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012282:	2210      	movs	r2, #16
 8012284:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f7f7 fc10 	bl	8009aac <uxIPHeaderSizeSocket>
 801228c:	4602      	mov	r2, r0
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	4413      	add	r3, r2
 8012292:	3314      	adds	r3, #20
 8012294:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012298:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	b2db      	uxtb	r3, r3
 801229e:	3314      	adds	r3, #20
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	009b      	lsls	r3, r3, #2
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122a8:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80122b0:	f003 0310 	and.w	r3, r3, #16
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d107      	bne.n	80122ca <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2200      	movs	r2, #0
 80122be:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2200      	movs	r2, #0
 80122c6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 80122ca:	2105      	movs	r1, #5
 80122cc:	68f8      	ldr	r0, [r7, #12]
 80122ce:	f7fe fc7f 	bl	8010bd0 <vTCPStateChange>
        }

        return xSendLength;
 80122d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 80122d4:	4618      	mov	r0, r3
 80122d6:	3764      	adds	r7, #100	@ 0x64
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd90      	pop	{r4, r7, pc}
 80122dc:	08025ebc 	.word	0x08025ebc
 80122e0:	08025ecc 	.word	0x08025ecc
 80122e4:	08025edc 	.word	0x08025edc
 80122e8:	08025f00 	.word	0x08025f00
 80122ec:	08025f08 	.word	0x08025f08
 80122f0:	08025f10 	.word	0x08025f10

080122f4 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 80122f4:	b590      	push	{r4, r7, lr}
 80122f6:	b097      	sub	sp, #92	@ 0x5c
 80122f8:	af02      	add	r7, sp, #8
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012308:	68f8      	ldr	r0, [r7, #12]
 801230a:	f7f7 fbcf 	bl	8009aac <uxIPHeaderSizeSocket>
 801230e:	4603      	mov	r3, r0
 8012310:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012312:	4423      	add	r3, r4
 8012314:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012318:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012324:	7b5b      	ldrb	r3, [r3, #13]
 8012326:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 801232a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	061a      	lsls	r2, r3, #24
 8012330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012332:	685b      	ldr	r3, [r3, #4]
 8012334:	021b      	lsls	r3, r3, #8
 8012336:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801233a:	431a      	orrs	r2, r3
 801233c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	0a1b      	lsrs	r3, r3, #8
 8012342:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012346:	431a      	orrs	r2, r3
 8012348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	0e1b      	lsrs	r3, r3, #24
 801234e:	4313      	orrs	r3, r2
 8012350:	637b      	str	r3, [r7, #52]	@ 0x34
 8012352:	2300      	movs	r3, #0
 8012354:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012356:	2300      	movs	r3, #0
 8012358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801235a:	2300      	movs	r3, #0
 801235c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 801235e:	2300      	movs	r3, #0
 8012360:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012364:	89db      	ldrh	r3, [r3, #14]
 8012366:	b29b      	uxth	r3, r3
 8012368:	021b      	lsls	r3, r3, #8
 801236a:	b21a      	sxth	r2, r3
 801236c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801236e:	89db      	ldrh	r3, [r3, #14]
 8012370:	b29b      	uxth	r3, r3
 8012372:	0a1b      	lsrs	r3, r3, #8
 8012374:	b29b      	uxth	r3, r3
 8012376:	b21b      	sxth	r3, r3
 8012378:	4313      	orrs	r3, r2
 801237a:	b21b      	sxth	r3, r3
 801237c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801237e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801238c:	68fa      	ldr	r2, [r7, #12]
 801238e:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012392:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 801239c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80123a0:	f003 0310 	and.w	r3, r3, #16
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f000 8106 	beq.w	80125b6 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 80123aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80123ac:	689b      	ldr	r3, [r3, #8]
 80123ae:	061a      	lsls	r2, r3, #24
 80123b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80123b2:	689b      	ldr	r3, [r3, #8]
 80123b4:	021b      	lsls	r3, r3, #8
 80123b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80123ba:	431a      	orrs	r2, r3
 80123bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	0a1b      	lsrs	r3, r3, #8
 80123c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80123c6:	431a      	orrs	r2, r3
 80123c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80123ca:	689b      	ldr	r3, [r3, #8]
 80123cc:	0e1b      	lsrs	r3, r3, #24
 80123ce:	4313      	orrs	r3, r2
 80123d0:	4619      	mov	r1, r3
 80123d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80123d4:	f003 feee 	bl	80161b4 <ulTCPWindowTxAck>
 80123d8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d02c      	beq.n	801243e <prvHandleEstablished+0x14a>
 80123e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d029      	beq.n	801243e <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80123f0:	2300      	movs	r3, #0
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123f6:	2200      	movs	r2, #0
 80123f8:	2100      	movs	r1, #0
 80123fa:	f7fe fa42 	bl	8010882 <uxStreamBufferGet>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b00      	cmp	r3, #0
 8012402:	d01c      	beq.n	801243e <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f043 0202 	orr.w	r2, r3, #2
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012414:	f003 0302 	and.w	r3, r3, #2
 8012418:	2b00      	cmp	r3, #0
 801241a:	d005      	beq.n	8012428 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801242e:	2b00      	cmp	r3, #0
 8012430:	d005      	beq.n	801243e <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012438:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d002      	beq.n	801244e <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8012448:	68f8      	ldr	r0, [r7, #12]
 801244a:	f001 fb13 	bl	8013a74 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801244e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012450:	6a1a      	ldr	r2, [r3, #32]
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801245e:	f003 0320 	and.w	r3, r3, #32
 8012462:	b2db      	uxtb	r3, r3
 8012464:	2b00      	cmp	r3, #0
 8012466:	d105      	bne.n	8012474 <prvHandleEstablished+0x180>
 8012468:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801246c:	f003 0301 	and.w	r3, r3, #1
 8012470:	2b00      	cmp	r3, #0
 8012472:	d06b      	beq.n	801254c <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8012474:	2301      	movs	r3, #1
 8012476:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801247e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012482:	b2db      	uxtb	r3, r3
 8012484:	2b00      	cmp	r3, #0
 8012486:	d13a      	bne.n	80124fe <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8012488:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801248a:	f002 fe87 	bl	801519c <xTCPWindowRxEmpty>
 801248e:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8012490:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012492:	f003 fafd 	bl	8015a90 <xTCPWindowTxDone>
 8012496:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8012498:	6a3b      	ldr	r3, [r7, #32]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d002      	beq.n	80124a4 <prvHandleEstablished+0x1b0>
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d10f      	bne.n	80124c4 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80124a8:	4619      	mov	r1, r3
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80124b0:	461a      	mov	r2, r3
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	6a3b      	ldr	r3, [r7, #32]
 80124b8:	4841      	ldr	r0, [pc, #260]	@ (80125c0 <prvHandleEstablished+0x2cc>)
 80124ba:	f00f fb95 	bl	8021be8 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 80124be:	2300      	movs	r3, #0
 80124c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124c2:	e01c      	b.n	80124fe <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80124c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	441a      	add	r2, r3
 80124ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124cc:	691b      	ldr	r3, [r3, #16]
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 80124d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124d4:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 80124d6:	69bb      	ldr	r3, [r7, #24]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	dd10      	ble.n	80124fe <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 80124dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124de:	691a      	ldr	r2, [r3, #16]
 80124e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124e2:	68db      	ldr	r3, [r3, #12]
 80124e4:	1ad1      	subs	r1, r2, r3
 80124e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124e8:	699a      	ldr	r2, [r3, #24]
 80124ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124ec:	68db      	ldr	r3, [r3, #12]
 80124ee:	1ad3      	subs	r3, r2, r3
 80124f0:	460a      	mov	r2, r1
 80124f2:	69b9      	ldr	r1, [r7, #24]
 80124f4:	4833      	ldr	r0, [pc, #204]	@ (80125c4 <prvHandleEstablished+0x2d0>)
 80124f6:	f00f fb77 	bl	8021be8 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 80124fa:	2300      	movs	r3, #0
 80124fc:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 80124fe:	4b32      	ldr	r3, [pc, #200]	@ (80125c8 <prvHandleEstablished+0x2d4>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	dd11      	ble.n	801252a <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801250c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801250e:	1ad1      	subs	r1, r2, r3
 8012510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012512:	6a1a      	ldr	r2, [r3, #32]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	9300      	str	r3, [sp, #0]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	460a      	mov	r2, r1
 8012522:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012524:	4829      	ldr	r0, [pc, #164]	@ (80125cc <prvHandleEstablished+0x2d8>)
 8012526:	f00f fb5f 	bl	8021be8 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 801252a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00d      	beq.n	801254c <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8012530:	68fa      	ldr	r2, [r7, #12]
 8012532:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012536:	f043 0320 	orr.w	r3, r3, #32
 801253a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4619      	mov	r1, r3
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	f7ff fca9 	bl	8011e9c <prvTCPHandleFin>
 801254a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 801254c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801254e:	2b00      	cmp	r3, #0
 8012550:	d131      	bne.n	80125b6 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012554:	2210      	movs	r2, #16
 8012556:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d01d      	beq.n	801259a <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f7f7 faa4 	bl	8009aac <uxIPHeaderSizeSocket>
 8012564:	4602      	mov	r2, r0
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	4413      	add	r3, r2
 801256a:	3314      	adds	r3, #20
 801256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 801256e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012570:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	b2db      	uxtb	r3, r3
 8012576:	3314      	adds	r3, #20
 8012578:	b2db      	uxtb	r3, r3
 801257a:	009b      	lsls	r3, r3, #2
 801257c:	b2da      	uxtb	r2, r3
 801257e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012580:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801258c:	b2db      	uxtb	r3, r3
 801258e:	2b00      	cmp	r3, #0
 8012590:	d003      	beq.n	801259a <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012598:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d10a      	bne.n	80125b6 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 80125a0:	683a      	ldr	r2, [r7, #0]
 80125a2:	68b9      	ldr	r1, [r7, #8]
 80125a4:	68f8      	ldr	r0, [r7, #12]
 80125a6:	f001 f8a1 	bl	80136ec <prvTCPPrepareSend>
 80125aa:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	dd01      	ble.n	80125b6 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 80125b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 80125b8:	4618      	mov	r0, r3
 80125ba:	3754      	adds	r7, #84	@ 0x54
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd90      	pop	{r4, r7, pc}
 80125c0:	08025f44 	.word	0x08025f44
 80125c4:	08025f70 	.word	0x08025f70
 80125c8:	20001488 	.word	0x20001488
 80125cc:	08025fa4 	.word	0x08025fa4

080125d0 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 80125d0:	b590      	push	{r4, r7, lr}
 80125d2:	b08f      	sub	sp, #60	@ 0x3c
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7f7 fa47 	bl	8009a78 <uxIPHeaderSizePacket>
 80125ea:	4603      	mov	r3, r0
 80125ec:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80125ee:	4423      	add	r3, r4
 80125f0:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80125f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80125fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	061a      	lsls	r2, r3, #24
 8012600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	021b      	lsls	r3, r3, #8
 8012606:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801260a:	431a      	orrs	r2, r3
 801260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	0a1b      	lsrs	r3, r3, #8
 8012612:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012616:	431a      	orrs	r2, r3
 8012618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	0e1b      	lsrs	r3, r3, #24
 801261e:	4313      	orrs	r3, r2
 8012620:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 8012622:	2300      	movs	r3, #0
 8012624:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012628:	7b5b      	ldrb	r3, [r3, #13]
 801262a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012634:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8012636:	2300      	movs	r3, #0
 8012638:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f107 0208 	add.w	r2, r7, #8
 8012642:	4611      	mov	r1, r2
 8012644:	4618      	mov	r0, r3
 8012646:	f7ff fa64 	bl	8011b12 <prvCheckRxData>
 801264a:	4603      	mov	r3, r0
 801264c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012654:	2b04      	cmp	r3, #4
 8012656:	d90c      	bls.n	8012672 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	691a      	ldr	r2, [r3, #16]
 801265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801265e:	3301      	adds	r3, #1
 8012660:	429a      	cmp	r2, r3
 8012662:	d106      	bne.n	8012672 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801266a:	f043 0301 	orr.w	r3, r3, #1
 801266e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8012672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	441a      	add	r2, r3
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	699b      	ldr	r3, [r3, #24]
 801267c:	1ad3      	subs	r3, r2, r3
 801267e:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	2b00      	cmp	r3, #0
 8012684:	dd04      	ble.n	8012690 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	441a      	add	r2, r3
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8012690:	68b9      	ldr	r1, [r7, #8]
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7ff fae3 	bl	8011c64 <prvStoreRxData>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	da03      	bge.n	80126ac <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 80126a4:	f04f 33ff 	mov.w	r3, #4294967295
 80126a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80126aa:	e0ae      	b.n	801280a <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4619      	mov	r1, r3
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f001 fa0c 	bl	8013ad0 <prvSetOptions>
 80126b8:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80126c0:	2b04      	cmp	r3, #4
 80126c2:	d10c      	bne.n	80126de <prvTCPHandleState+0x10e>
 80126c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80126c8:	f003 031f 	and.w	r3, r3, #31
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d106      	bne.n	80126de <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 80126d0:	4855      	ldr	r0, [pc, #340]	@ (8012828 <prvTCPHandleState+0x258>)
 80126d2:	f00f fa89 	bl	8021be8 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 80126d6:	2103      	movs	r1, #3
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7fe fa79 	bl	8010bd0 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 80126de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80126e2:	f003 0301 	and.w	r3, r3, #1
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d022      	beq.n	8012730 <prvTCPHandleState+0x160>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80126f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d11a      	bne.n	8012730 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80126fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	441a      	add	r2, r3
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801270a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801270e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801271c:	b2db      	uxtb	r3, r3
 801271e:	2b00      	cmp	r3, #0
 8012720:	d106      	bne.n	8012730 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012728:	f043 0302 	orr.w	r3, r3, #2
 801272c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012736:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8012738:	7bfb      	ldrb	r3, [r7, #15]
 801273a:	2b0b      	cmp	r3, #11
 801273c:	d864      	bhi.n	8012808 <prvTCPHandleState+0x238>
 801273e:	a201      	add	r2, pc, #4	@ (adr r2, 8012744 <prvTCPHandleState+0x174>)
 8012740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012744:	08012809 	.word	0x08012809
 8012748:	08012809 	.word	0x08012809
 801274c:	080127d7 	.word	0x080127d7
 8012750:	08012775 	.word	0x08012775
 8012754:	080127d7 	.word	0x080127d7
 8012758:	080127e9 	.word	0x080127e9
 801275c:	080127f9 	.word	0x080127f9
 8012760:	080127f9 	.word	0x080127f9
 8012764:	08012809 	.word	0x08012809
 8012768:	08012809 	.word	0x08012809
 801276c:	080127f9 	.word	0x080127f9
 8012770:	08012809 	.word	0x08012809
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8012774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 fe4e 	bl	8013418 <prvSetSynAckOptions>
 801277c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 801277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012780:	2212      	movs	r2, #18
 8012782:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7f7 f991 	bl	8009aac <uxIPHeaderSizeSocket>
 801278a:	4602      	mov	r2, r0
 801278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801278e:	4413      	add	r3, r2
 8012790:	3314      	adds	r3, #20
 8012792:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801279a:	b2db      	uxtb	r3, r3
 801279c:	3314      	adds	r3, #20
 801279e:	b2db      	uxtb	r3, r3
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	b2da      	uxtb	r2, r3
 80127a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127a6:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 80127a8:	2104      	movs	r1, #4
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7fe fa10 	bl	8010bd0 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 80127b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127b2:	1c5a      	adds	r2, r3, #1
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 80127b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ba:	1c5a      	adds	r2, r3, #1
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	69db      	ldr	r3, [r3, #28]
 80127c4:	1c5a      	adds	r2, r3, #1
 80127c6:	69fb      	ldr	r3, [r7, #28]
 80127c8:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	69db      	ldr	r3, [r3, #28]
 80127ce:	1c5a      	adds	r2, r3, #1
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	621a      	str	r2, [r3, #32]
                    break;
 80127d4:	e019      	b.n	801280a <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	6819      	ldr	r1, [r3, #0]
 80127da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127dc:	697a      	ldr	r2, [r7, #20]
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7ff fc3a 	bl	8012058 <prvHandleSynReceived>
 80127e4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80127e6:	e010      	b.n	801280a <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 80127e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ea:	697a      	ldr	r2, [r7, #20]
 80127ec:	6839      	ldr	r1, [r7, #0]
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f7ff fd80 	bl	80122f4 <prvHandleEstablished>
 80127f4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80127f6:	e008      	b.n	801280a <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4619      	mov	r1, r3
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7ff fb4c 	bl	8011e9c <prvTCPHandleFin>
 8012804:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012806:	e000      	b.n	801280a <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8012808:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 801280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801280c:	2b00      	cmp	r3, #0
 801280e:	dd06      	ble.n	801281e <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 8012810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012812:	697a      	ldr	r2, [r7, #20]
 8012814:	6839      	ldr	r1, [r7, #0]
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f001 fa1a 	bl	8013c50 <prvSendData>
 801281c:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 801281e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8012820:	4618      	mov	r0, r3
 8012822:	373c      	adds	r7, #60	@ 0x3c
 8012824:	46bd      	mov	sp, r7
 8012826:	bd90      	pop	{r4, r7, pc}
 8012828:	08025fdc 	.word	0x08025fdc

0801282c <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8012836:	2300      	movs	r3, #0
 8012838:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 801283a:	6838      	ldr	r0, [r7, #0]
 801283c:	f7f7 f91c 	bl	8009a78 <uxIPHeaderSizePacket>
 8012840:	4603      	mov	r3, r0
 8012842:	2b14      	cmp	r3, #20
 8012844:	d002      	beq.n	801284c <prvHandleListen+0x20>
 8012846:	2b28      	cmp	r3, #40	@ 0x28
 8012848:	d006      	beq.n	8012858 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 801284a:	e00b      	b.n	8012864 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 801284c:	6839      	ldr	r1, [r7, #0]
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f000 f8ee 	bl	8012a30 <prvHandleListen_IPV4>
 8012854:	60f8      	str	r0, [r7, #12]
                    break;
 8012856:	e005      	b.n	8012864 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8012858:	6839      	ldr	r1, [r7, #0]
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f000 fa10 	bl	8012c80 <prvHandleListen_IPV6>
 8012860:	60f8      	str	r0, [r7, #12]
                    break;
 8012862:	bf00      	nop
        }

        return pxNewSocket;
 8012864:	68fb      	ldr	r3, [r7, #12]
    }
 8012866:	4618      	mov	r0, r3
 8012868:	3710      	adds	r7, #16
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
	...

08012870 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8012870:	b590      	push	{r4, r7, lr}
 8012872:	b08f      	sub	sp, #60	@ 0x3c
 8012874:	af04      	add	r7, sp, #16
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	6a1a      	ldr	r2, [r3, #32]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801290e:	2b00      	cmp	r3, #0
 8012910:	d009      	beq.n	8012926 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801291e:	f043 0205 	orr.w	r2, r3, #5
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8012926:	f107 030c 	add.w	r3, r7, #12
 801292a:	4619      	mov	r1, r3
 801292c:	6838      	ldr	r0, [r7, #0]
 801292e:	f7fc fb65 	bl	800effc <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012938:	f043 0304 	orr.w	r3, r3, #4
 801293c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	683a      	ldr	r2, [r7, #0]
 8012944:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801294c:	3301      	adds	r3, #1
 801294e:	b29a      	uxth	r2, r3
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801295a:	2b00      	cmp	r3, #0
 801295c:	d102      	bne.n	8012964 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012968:	4619      	mov	r1, r3
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012970:	4618      	mov	r0, r3
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012978:	461c      	mov	r4, r3
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012980:	2b01      	cmp	r3, #1
 8012982:	d101      	bne.n	8012988 <prvTCPSocketCopy+0x118>
 8012984:	4a17      	ldr	r2, [pc, #92]	@ (80129e4 <prvTCPSocketCopy+0x174>)
 8012986:	e000      	b.n	801298a <prvTCPSocketCopy+0x11a>
 8012988:	4a17      	ldr	r2, [pc, #92]	@ (80129e8 <prvTCPSocketCopy+0x178>)
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <prvTCPSocketCopy+0x126>
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012994:	e000      	b.n	8012998 <prvTCPSocketCopy+0x128>
 8012996:	2300      	movs	r3, #0
 8012998:	9303      	str	r3, [sp, #12]
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	9302      	str	r3, [sp, #8]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	9301      	str	r3, [sp, #4]
 80129a2:	9200      	str	r2, [sp, #0]
 80129a4:	4623      	mov	r3, r4
 80129a6:	4602      	mov	r2, r0
 80129a8:	4810      	ldr	r0, [pc, #64]	@ (80129ec <prvTCPSocketCopy+0x17c>)
 80129aa:	f00f f91d 	bl	8021be8 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 80129ae:	f107 010c 	add.w	r1, r7, #12
 80129b2:	2301      	movs	r3, #1
 80129b4:	2218      	movs	r2, #24
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7fb fccc 	bl	800e354 <vSocketBind>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d008      	beq.n	80129d4 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 80129c2:	480b      	ldr	r0, [pc, #44]	@ (80129f0 <prvTCPSocketCopy+0x180>)
 80129c4:	f00f f910 	bl	8021be8 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7fb fd77 	bl	800e4bc <vSocketClose>
            xResult = pdFALSE;
 80129ce:	2300      	movs	r3, #0
 80129d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80129d2:	e001      	b.n	80129d8 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 80129d4:	2301      	movs	r3, #1
 80129d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 80129d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80129da:	4618      	mov	r0, r3
 80129dc:	372c      	adds	r7, #44	@ 0x2c
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd90      	pop	{r4, r7, pc}
 80129e2:	bf00      	nop
 80129e4:	0802601c 	.word	0x0802601c
 80129e8:	08026020 	.word	0x08026020
 80129ec:	08026024 	.word	0x08026024
 80129f0:	08026068 	.word	0x08026068

080129f4 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	db02      	blt.n	8012a0c <FreeRTOS_GetTCPStateName+0x18>
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2b0c      	cmp	r3, #12
 8012a0a:	dd04      	ble.n	8012a16 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8012a0c:	230d      	movs	r3, #13
 8012a0e:	60fb      	str	r3, [r7, #12]
                xIndex--;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	3b01      	subs	r3, #1
 8012a14:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8012a16:	4a05      	ldr	r2, [pc, #20]	@ (8012a2c <FreeRTOS_GetTCPStateName+0x38>)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3714      	adds	r7, #20
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	08027334 	.word	0x08027334

08012a30 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012a30:	b590      	push	{r4, r7, lr}
 8012a32:	b08f      	sub	sp, #60	@ 0x3c
 8012a34:	af02      	add	r7, sp, #8
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8012a42:	2300      	movs	r3, #0
 8012a44:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8012a46:	2300      	movs	r3, #0
 8012a48:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d008      	beq.n	8012a66 <prvHandleListen_IPV4+0x36>
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d005      	beq.n	8012a66 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a64:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8012a66:	6a3b      	ldr	r3, [r7, #32]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d015      	beq.n	8012a98 <prvHandleListen_IPV4+0x68>
 8012a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a6e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8012a72:	6a3b      	ldr	r3, [r7, #32]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d10e      	bne.n	8012a98 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a7c:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8012a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a86:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8012a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a8c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012a8e:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012a90:	f7ee fe8c 	bl	80017ac <ulApplicationGetNextSequenceNumber>
 8012a94:	6278      	str	r0, [r7, #36]	@ 0x24
 8012a96:	e001      	b.n	8012a9c <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8012a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d059      	beq.n	8012b56 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012aa8:	f003 0308 	and.w	r3, r3, #8
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00c      	beq.n	8012acc <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012abc:	f043 0304 	orr.w	r3, r3, #4
 8012ac0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	687a      	ldr	r2, [r7, #4]
 8012ac8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8012aca:	e044      	b.n	8012b56 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8012acc:	2300      	movs	r3, #0
 8012ace:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d31b      	bcc.n	8012b18 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012aec:	461a      	mov	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012af4:	4618      	mov	r0, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d101      	bne.n	8012b04 <prvHandleListen_IPV4+0xd4>
 8012b00:	4b5b      	ldr	r3, [pc, #364]	@ (8012c70 <prvHandleListen_IPV4+0x240>)
 8012b02:	e000      	b.n	8012b06 <prvHandleListen_IPV4+0xd6>
 8012b04:	4b5b      	ldr	r3, [pc, #364]	@ (8012c74 <prvHandleListen_IPV4+0x244>)
 8012b06:	9300      	str	r3, [sp, #0]
 8012b08:	4603      	mov	r3, r0
 8012b0a:	485b      	ldr	r0, [pc, #364]	@ (8012c78 <prvHandleListen_IPV4+0x248>)
 8012b0c:	f00f f86c 	bl	8021be8 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012b10:	6838      	ldr	r0, [r7, #0]
 8012b12:	f001 f9d1 	bl	8013eb8 <prvTCPSendReset>
 8012b16:	e01e      	b.n	8012b56 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012b18:	2206      	movs	r2, #6
 8012b1a:	2101      	movs	r1, #1
 8012b1c:	2002      	movs	r0, #2
 8012b1e:	f7fb f8bf 	bl	800dca0 <FreeRTOS_socket>
 8012b22:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d003      	beq.n	8012b32 <prvHandleListen_IPV4+0x102>
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b30:	d106      	bne.n	8012b40 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012b32:	4852      	ldr	r0, [pc, #328]	@ (8012c7c <prvHandleListen_IPV4+0x24c>)
 8012b34:	f00f f858 	bl	8021be8 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012b38:	6838      	ldr	r0, [r7, #0]
 8012b3a:	f001 f9bd 	bl	8013eb8 <prvTCPSendReset>
 8012b3e:	e00a      	b.n	8012b56 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012b40:	6879      	ldr	r1, [r7, #4]
 8012b42:	6978      	ldr	r0, [r7, #20]
 8012b44:	f7ff fe94 	bl	8012870 <prvTCPSocketCopy>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d003      	beq.n	8012b56 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012b52:	2301      	movs	r3, #1
 8012b54:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	f000 8083 	beq.w	8012c64 <prvHandleListen_IPV4+0x234>
 8012b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d07f      	beq.n	8012c64 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012b68:	6838      	ldr	r0, [r7, #0]
 8012b6a:	f7f6 ff85 	bl	8009a78 <uxIPHeaderSizePacket>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012b72:	4423      	add	r3, r4
 8012b74:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 8012b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b80:	7a13      	ldrb	r3, [r2, #8]
 8012b82:	f36f 0300 	bfc	r3, #0, #1
 8012b86:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8012b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b8a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	021b      	lsls	r3, r3, #8
 8012b90:	b21a      	sxth	r2, r3
 8012b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b94:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	0a1b      	lsrs	r3, r3, #8
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	b21b      	sxth	r3, r3
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	b21b      	sxth	r3, r3
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ba6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8012baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bac:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012bb0:	061a      	lsls	r2, r3, #24
 8012bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012bb8:	021b      	lsls	r3, r3, #8
 8012bba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012bbe:	431a      	orrs	r2, r3
 8012bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012bc6:	0a1b      	lsrs	r3, r3, #8
 8012bc8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012bcc:	431a      	orrs	r2, r3
 8012bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bd0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012bd4:	0e1b      	lsrs	r3, r3, #24
 8012bd6:	431a      	orrs	r2, r3
 8012bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bda:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012be0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	061a      	lsls	r2, r3, #24
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	021b      	lsls	r3, r3, #8
 8012bf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012bf4:	431a      	orrs	r2, r3
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	0a1b      	lsrs	r3, r3, #8
 8012bfc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012c00:	431a      	orrs	r2, r3
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	685b      	ldr	r3, [r3, #4]
 8012c06:	0e1b      	lsrs	r3, r3, #24
 8012c08:	431a      	orrs	r2, r3
 8012c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c0c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c12:	f002 f877 	bl	8014d04 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c18:	f000 fb66 	bl	80132e8 <prvTCPCreateWindow>
 8012c1c:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d008      	beq.n	8012c36 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	2b01      	cmp	r3, #1
 8012c28:	d102      	bne.n	8012c30 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 8012c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c2c:	f7fb fc46 	bl	800e4bc <vSocketClose>
                }

                pxReturn = NULL;
 8012c30:	2300      	movs	r3, #0
 8012c32:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012c34:	e016      	b.n	8012c64 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012c36:	2103      	movs	r1, #3
 8012c38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c3a:	f7fd ffc9 	bl	8010bd0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c42:	2b5a      	cmp	r3, #90	@ 0x5a
 8012c44:	d902      	bls.n	8012c4c <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012c46:	235a      	movs	r3, #90	@ 0x5a
 8012c48:	61bb      	str	r3, [r7, #24]
 8012c4a:	e002      	b.n	8012c52 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c50:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c54:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012c5c:	69ba      	ldr	r2, [r7, #24]
 8012c5e:	4619      	mov	r1, r3
 8012c60:	f00f f9de 	bl	8022020 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3734      	adds	r7, #52	@ 0x34
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd90      	pop	{r4, r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	08026110 	.word	0x08026110
 8012c74:	08026114 	.word	0x08026114
 8012c78:	08026118 	.word	0x08026118
 8012c7c:	08026148 	.word	0x08026148

08012c80 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012c80:	b590      	push	{r4, r7, lr}
 8012c82:	b08f      	sub	sp, #60	@ 0x3c
 8012c84:	af02      	add	r7, sp, #8
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 8012c92:	2300      	movs	r3, #0
 8012c94:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8012c96:	2300      	movs	r3, #0
 8012c98:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d024      	beq.n	8012cee <prvHandleListen_IPV6+0x6e>
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d021      	beq.n	8012cee <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d103      	bne.n	8012cc0 <prvHandleListen_IPV6+0x40>
 8012cb8:	215d      	movs	r1, #93	@ 0x5d
 8012cba:	487b      	ldr	r0, [pc, #492]	@ (8012ea8 <prvHandleListen_IPV6+0x228>)
 8012cbc:	f7ee fd56 	bl	800176c <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8012cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc2:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cca:	3338      	adds	r3, #56	@ 0x38
 8012ccc:	2210      	movs	r2, #16
 8012cce:	4619      	mov	r1, r3
 8012cd0:	f010 f93b 	bl	8022f4a <memcmp>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d109      	bne.n	8012cee <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 8012cda:	f107 0308 	add.w	r3, r7, #8
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7ee fe0e 	bl	8001900 <xApplicationGetRandomNumber>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d101      	bne.n	8012cee <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 8012cea:	2301      	movs	r3, #1
 8012cec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 8012cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d059      	beq.n	8012da8 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012cfa:	f003 0308 	and.w	r3, r3, #8
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d00c      	beq.n	8012d1e <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012d08:	687a      	ldr	r2, [r7, #4]
 8012d0a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012d0e:	f043 0304 	orr.w	r3, r3, #4
 8012d12:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8012d1c:	e044      	b.n	8012da8 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d31b      	bcc.n	8012d6a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012d36:	4619      	mov	r1, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012d3e:	461a      	mov	r2, r3
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012d46:	4618      	mov	r0, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012d4e:	2b01      	cmp	r3, #1
 8012d50:	d101      	bne.n	8012d56 <prvHandleListen_IPV6+0xd6>
 8012d52:	4b56      	ldr	r3, [pc, #344]	@ (8012eac <prvHandleListen_IPV6+0x22c>)
 8012d54:	e000      	b.n	8012d58 <prvHandleListen_IPV6+0xd8>
 8012d56:	4b56      	ldr	r3, [pc, #344]	@ (8012eb0 <prvHandleListen_IPV6+0x230>)
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	4855      	ldr	r0, [pc, #340]	@ (8012eb4 <prvHandleListen_IPV6+0x234>)
 8012d5e:	f00e ff43 	bl	8021be8 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012d62:	6838      	ldr	r0, [r7, #0]
 8012d64:	f001 f8a8 	bl	8013eb8 <prvTCPSendReset>
 8012d68:	e01e      	b.n	8012da8 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012d6a:	2206      	movs	r2, #6
 8012d6c:	2101      	movs	r1, #1
 8012d6e:	200a      	movs	r0, #10
 8012d70:	f7fa ff96 	bl	800dca0 <FreeRTOS_socket>
 8012d74:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d003      	beq.n	8012d84 <prvHandleListen_IPV6+0x104>
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d82:	d106      	bne.n	8012d92 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012d84:	484c      	ldr	r0, [pc, #304]	@ (8012eb8 <prvHandleListen_IPV6+0x238>)
 8012d86:	f00e ff2f 	bl	8021be8 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012d8a:	6838      	ldr	r0, [r7, #0]
 8012d8c:	f001 f894 	bl	8013eb8 <prvTCPSendReset>
 8012d90:	e00a      	b.n	8012da8 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012d92:	6879      	ldr	r1, [r7, #4]
 8012d94:	69b8      	ldr	r0, [r7, #24]
 8012d96:	f7ff fd6b 	bl	8012870 <prvTCPSocketCopy>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d003      	beq.n	8012da8 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8012da0:	69bb      	ldr	r3, [r7, #24]
 8012da2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012da4:	2301      	movs	r3, #1
 8012da6:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8012da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d076      	beq.n	8012e9c <prvHandleListen_IPV6+0x21c>
 8012dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d073      	beq.n	8012e9c <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012db8:	6838      	ldr	r0, [r7, #0]
 8012dba:	f7f6 fe5d 	bl	8009a78 <uxIPHeaderSizePacket>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012dc2:	4423      	add	r3, r4
 8012dc4:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dcc:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 8012dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012dd0:	7a13      	ldrb	r3, [r2, #8]
 8012dd2:	f043 0301 	orr.w	r3, r3, #1
 8012dd6:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ddc:	330e      	adds	r3, #14
 8012dde:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8012de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012de2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012de4:	b29b      	uxth	r3, r3
 8012de6:	021b      	lsls	r3, r3, #8
 8012de8:	b21a      	sxth	r2, r3
 8012dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	0a1b      	lsrs	r3, r3, #8
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	b21b      	sxth	r3, r3
 8012df6:	4313      	orrs	r3, r2
 8012df8:	b21b      	sxth	r3, r3
 8012dfa:	b29a      	uxth	r2, r3
 8012dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dfe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8012e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e04:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	3308      	adds	r3, #8
 8012e0c:	2210      	movs	r2, #16
 8012e0e:	4619      	mov	r1, r3
 8012e10:	f00f f906 	bl	8022020 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e18:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	061a      	lsls	r2, r3, #24
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	021b      	lsls	r3, r3, #8
 8012e28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012e2c:	431a      	orrs	r2, r3
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	0a1b      	lsrs	r3, r3, #8
 8012e34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012e38:	431a      	orrs	r2, r3
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	0e1b      	lsrs	r3, r3, #24
 8012e40:	431a      	orrs	r2, r3
 8012e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e44:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012e48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e4a:	f001 ff5b 	bl	8014d04 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e50:	f000 fa4a 	bl	80132e8 <prvTCPCreateWindow>
 8012e54:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d008      	beq.n	8012e6e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012e5c:	6a3b      	ldr	r3, [r7, #32]
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d102      	bne.n	8012e68 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8012e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e64:	f7fb fb2a 	bl	800e4bc <vSocketClose>
                }

                pxReturn = NULL;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012e6c:	e016      	b.n	8012e9c <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012e6e:	2103      	movs	r1, #3
 8012e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e72:	f7fd fead 	bl	8010bd0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e7a:	2b5a      	cmp	r3, #90	@ 0x5a
 8012e7c:	d902      	bls.n	8012e84 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012e7e:	235a      	movs	r3, #90	@ 0x5a
 8012e80:	61fb      	str	r3, [r7, #28]
 8012e82:	e002      	b.n	8012e8a <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e88:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e8c:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012e94:	69fa      	ldr	r2, [r7, #28]
 8012e96:	4619      	mov	r1, r3
 8012e98:	f00f f8c2 	bl	8022020 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3734      	adds	r7, #52	@ 0x34
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd90      	pop	{r4, r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	08026168 	.word	0x08026168
 8012eac:	080261a8 	.word	0x080261a8
 8012eb0:	080261ac 	.word	0x080261ac
 8012eb4:	080261b0 	.word	0x080261b0
 8012eb8:	080261e0 	.word	0x080261e0

08012ebc <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012ece:	f003 0308 	and.w	r3, r3, #8
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d107      	bne.n	8012ee8 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f000 fa51 	bl	8013380 <prvTCPPrepareConnect>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d001      	beq.n	8012ee8 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
    }
 8012eea:	4618      	mov	r0, r3
 8012eec:	3710      	adds	r7, #16
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
	...

08012ef4 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b088      	sub	sp, #32
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8012efc:	2300      	movs	r3, #0
 8012efe:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8012f00:	2300      	movs	r3, #0
 8012f02:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012f0a:	2b02      	cmp	r3, #2
 8012f0c:	d010      	beq.n	8012f30 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012f12:	f107 030c 	add.w	r3, r7, #12
 8012f16:	4619      	mov	r1, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f000 f859 	bl	8012fd0 <prvTCPSendRepeated>
 8012f1e:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d04d      	beq.n	8012fc2 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f003 ffb5 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
 8012f2e:	e048      	b.n	8012fc2 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012f36:	2b02      	cmp	r3, #2
 8012f38:	d90d      	bls.n	8012f56 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012f44:	461a      	mov	r2, r3
 8012f46:	4821      	ldr	r0, [pc, #132]	@ (8012fcc <prvTCPSendPacket+0xd8>)
 8012f48:	f00e fe4e 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012f4c:	2108      	movs	r1, #8
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7fd fe3e 	bl	8010bd0 <vTCPStateChange>
 8012f54:	e035      	b.n	8012fc2 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f7ff ffb0 	bl	8012ebc <prvTCPMakeSurePrepared>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d12f      	bne.n	8012fc2 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f7f6 fda2 	bl	8009aac <uxIPHeaderSizeSocket>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	330e      	adds	r3, #14
 8012f6c:	33a0      	adds	r3, #160	@ 0xa0
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	4413      	add	r3, r2
 8012f72:	330a      	adds	r3, #10
 8012f74:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f000 fa4c 	bl	8013418 <prvSetSynAckOptions>
 8012f80:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7f6 fd92 	bl	8009aac <uxIPHeaderSizeSocket>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	3314      	adds	r3, #20
 8012f90:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8012f92:	69bb      	ldr	r3, [r7, #24]
 8012f94:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	b2db      	uxtb	r3, r3
 8012f9a:	3314      	adds	r3, #20
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	009b      	lsls	r3, r3, #2
 8012fa0:	b2da      	uxtb	r2, r3
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012fac:	3301      	adds	r3, #1
 8012fae:	b2da      	uxtb	r2, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8012fb6:	69fa      	ldr	r2, [r7, #28]
 8012fb8:	2300      	movs	r3, #0
 8012fba:	2100      	movs	r1, #0
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 f837 	bl	8013030 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012fc2:	69fb      	ldr	r3, [r7, #28]
    }
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3720      	adds	r7, #32
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	08026200 	.word	0x08026200

08012fd0 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	617b      	str	r3, [r7, #20]
 8012fe6:	e019      	b.n	801301c <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	6839      	ldr	r1, [r7, #0]
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f000 fb7d 	bl	80136ec <prvTCPPrepareSend>
 8012ff2:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	dd14      	ble.n	8013024 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	6819      	ldr	r1, [r3, #0]
 8012ffe:	68ba      	ldr	r2, [r7, #8]
 8013000:	2301      	movs	r3, #1
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f000 f814 	bl	8013030 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2200      	movs	r2, #0
 801300c:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 801300e:	693a      	ldr	r2, [r7, #16]
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	4413      	add	r3, r2
 8013014:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	3301      	adds	r3, #1
 801301a:	617b      	str	r3, [r7, #20]
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	2b07      	cmp	r3, #7
 8013020:	d9e2      	bls.n	8012fe8 <prvTCPSendRepeated+0x18>
 8013022:	e000      	b.n	8013026 <prvTCPSendRepeated+0x56>
                break;
 8013024:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013026:	693b      	ldr	r3, [r7, #16]
    }
 8013028:	4618      	mov	r0, r3
 801302a:	3718      	adds	r7, #24
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013030:	b580      	push	{r7, lr}
 8013032:	b086      	sub	sp, #24
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8013042:	2300      	movs	r3, #0
 8013044:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d008      	beq.n	801305e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 801304c:	6938      	ldr	r0, [r7, #16]
 801304e:	f7f6 fd13 	bl	8009a78 <uxIPHeaderSizePacket>
 8013052:	4603      	mov	r3, r0
 8013054:	2b28      	cmp	r3, #40	@ 0x28
 8013056:	d113      	bne.n	8013080 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013058:	2301      	movs	r3, #1
 801305a:	617b      	str	r3, [r7, #20]
 801305c:	e010      	b.n	8013080 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d008      	beq.n	8013076 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f7f6 fd21 	bl	8009aac <uxIPHeaderSizeSocket>
 801306a:	4603      	mov	r3, r0
 801306c:	2b28      	cmp	r3, #40	@ 0x28
 801306e:	d107      	bne.n	8013080 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013070:	2301      	movs	r3, #1
 8013072:	617b      	str	r3, [r7, #20]
 8013074:	e004      	b.n	8013080 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8013076:	f240 1119 	movw	r1, #281	@ 0x119
 801307a:	480c      	ldr	r0, [pc, #48]	@ (80130ac <prvTCPReturnPacket+0x7c>)
 801307c:	f7ee fb76 	bl	800176c <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	2b01      	cmp	r3, #1
 8013084:	d105      	bne.n	8013092 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	68b9      	ldr	r1, [r7, #8]
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f001 fa61 	bl	8014554 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d105      	bne.n	80130a4 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	68b9      	ldr	r1, [r7, #8]
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	f000 ff18 	bl	8013ed4 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 80130a4:	bf00      	nop
 80130a6:	3718      	adds	r7, #24
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	0802621c 	.word	0x0802621c

080130b0 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b08a      	sub	sp, #40	@ 0x28
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80130c2:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80130cc:	4413      	add	r3, r2
 80130ce:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d007      	beq.n	80130ea <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fd fa9f 	bl	8010624 <uxStreamBufferFrontSpace>
 80130e6:	6278      	str	r0, [r7, #36]	@ 0x24
 80130e8:	e003      	b.n	80130f2 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80130f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f7 fa0b 	bl	800a514 <FreeRTOS_min_uint32>
 80130fe:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013106:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801310a:	b2db      	uxtb	r3, r3
 801310c:	2b00      	cmp	r3, #0
 801310e:	d107      	bne.n	8013120 <prvTCPReturn_CheckTCPWindow+0x70>
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013116:	f003 0304 	and.w	r3, r3, #4
 801311a:	b2db      	uxtb	r3, r3
 801311c:	2b00      	cmp	r3, #0
 801311e:	d001      	beq.n	8013124 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013120:	2300      	movs	r3, #0
 8013122:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801312a:	461a      	mov	r2, r3
 801312c:	6a3b      	ldr	r3, [r7, #32]
 801312e:	4293      	cmp	r3, r2
 8013130:	d20a      	bcs.n	8013148 <prvTCPReturn_CheckTCPWindow+0x98>
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013138:	461a      	mov	r2, r3
 801313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801313c:	4293      	cmp	r3, r2
 801313e:	d303      	bcc.n	8013148 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013146:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 801314e:	461a      	mov	r2, r3
 8013150:	6a3b      	ldr	r3, [r7, #32]
 8013152:	40d3      	lsrs	r3, r2
 8013154:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801315c:	4293      	cmp	r3, r2
 801315e:	d902      	bls.n	8013166 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8013160:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8013164:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	b29b      	uxth	r3, r3
 801316a:	021b      	lsls	r3, r3, #8
 801316c:	b21a      	sxth	r2, r3
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	b29b      	uxth	r3, r3
 8013172:	0a1b      	lsrs	r3, r3, #8
 8013174:	b29b      	uxth	r3, r3
 8013176:	b21b      	sxth	r3, r3
 8013178:	4313      	orrs	r3, r2
 801317a:	b21b      	sxth	r3, r3
 801317c:	b29a      	uxth	r2, r3
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013188:	f36f 0300 	bfc	r3, #0, #1
 801318c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8013190:	69bb      	ldr	r3, [r7, #24]
 8013192:	691a      	ldr	r2, [r3, #16]
 8013194:	6a3b      	ldr	r3, [r7, #32]
 8013196:	441a      	add	r2, r3
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 801319c:	bf00      	nop
 801319e:	3728      	adds	r7, #40	@ 0x28
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b088      	sub	sp, #32
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	607a      	str	r2, [r7, #4]
 80131b0:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80131b8:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80131c2:	4413      	add	r3, r2
 80131c4:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80131cc:	f003 0302 	and.w	r3, r3, #2
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d029      	beq.n	801322a <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80131dc:	f36f 0341 	bfc	r3, #1, #1
 80131e0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 80131e4:	68fa      	ldr	r2, [r7, #12]
 80131e6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80131ea:	f043 0304 	orr.w	r3, r3, #4
 80131ee:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80131f8:	1e5a      	subs	r2, r3, #1
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	061a      	lsls	r2, r3, #24
 8013204:	69bb      	ldr	r3, [r7, #24]
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	021b      	lsls	r3, r3, #8
 801320a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801320e:	431a      	orrs	r2, r3
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	0a1b      	lsrs	r3, r3, #8
 8013216:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801321a:	431a      	orrs	r2, r3
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	0e1b      	lsrs	r3, r3, #24
 8013222:	431a      	orrs	r2, r3
 8013224:	69bb      	ldr	r3, [r7, #24]
 8013226:	605a      	str	r2, [r3, #4]
 8013228:	e043      	b.n	80132b2 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013230:	061a      	lsls	r2, r3, #24
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013238:	021b      	lsls	r3, r3, #8
 801323a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801323e:	431a      	orrs	r2, r3
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013246:	0a1b      	lsrs	r3, r3, #8
 8013248:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801324c:	431a      	orrs	r2, r3
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013254:	0e1b      	lsrs	r3, r3, #24
 8013256:	431a      	orrs	r2, r3
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	7b5b      	ldrb	r3, [r3, #13]
 8013260:	f003 0301 	and.w	r3, r3, #1
 8013264:	2b00      	cmp	r3, #0
 8013266:	d024      	beq.n	80132b2 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013268:	68f8      	ldr	r0, [r7, #12]
 801326a:	f7f6 fc1f 	bl	8009aac <uxIPHeaderSizeSocket>
 801326e:	4602      	mov	r2, r0
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	1a9b      	subs	r3, r3, r2
 8013274:	3b14      	subs	r3, #20
 8013276:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	441a      	add	r2, r3
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013284:	429a      	cmp	r2, r3
 8013286:	d014      	beq.n	80132b2 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013288:	69bb      	ldr	r3, [r7, #24]
 801328a:	7b5b      	ldrb	r3, [r3, #13]
 801328c:	f023 0301 	bic.w	r3, r3, #1
 8013290:	b2da      	uxtb	r2, r3
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8013296:	69fb      	ldr	r3, [r7, #28]
 8013298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	69db      	ldr	r3, [r3, #28]
 801329e:	1ad1      	subs	r1, r2, r3
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	69db      	ldr	r3, [r3, #28]
 80132a8:	1ad3      	subs	r3, r2, r3
 80132aa:	697a      	ldr	r2, [r7, #20]
 80132ac:	480d      	ldr	r0, [pc, #52]	@ (80132e4 <prvTCPReturn_SetSequenceNumber+0x140>)
 80132ae:	f00e fc9b 	bl	8021be8 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	691b      	ldr	r3, [r3, #16]
 80132b6:	061a      	lsls	r2, r3, #24
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	691b      	ldr	r3, [r3, #16]
 80132bc:	021b      	lsls	r3, r3, #8
 80132be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80132c2:	431a      	orrs	r2, r3
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	691b      	ldr	r3, [r3, #16]
 80132c8:	0a1b      	lsrs	r3, r3, #8
 80132ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80132ce:	431a      	orrs	r2, r3
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	691b      	ldr	r3, [r3, #16]
 80132d4:	0e1b      	lsrs	r3, r3, #24
 80132d6:	431a      	orrs	r2, r3
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	609a      	str	r2, [r3, #8]
    }
 80132dc:	bf00      	nop
 80132de:	3720      	adds	r7, #32
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	08026258 	.word	0x08026258

080132e8 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 80132e8:	b5b0      	push	{r4, r5, r7, lr}
 80132ea:	b088      	sub	sp, #32
 80132ec:	af02      	add	r7, sp, #8
 80132ee:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80132f6:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80132fe:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8013300:	4b1d      	ldr	r3, [pc, #116]	@ (8013378 <prvTCPCreateWindow+0x90>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d014      	beq.n	8013332 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801330e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013312:	fb02 f103 	mul.w	r1, r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013328:	9300      	str	r3, [sp, #0]
 801332a:	4603      	mov	r3, r0
 801332c:	4813      	ldr	r0, [pc, #76]	@ (801337c <prvTCPCreateWindow+0x94>)
 801332e:	f00e fc5b 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801333e:	fb02 f103 	mul.w	r1, r2, r3
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013348:	fb02 f403 	mul.w	r4, r2, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 801335e:	9201      	str	r2, [sp, #4]
 8013360:	9300      	str	r3, [sp, #0]
 8013362:	462b      	mov	r3, r5
 8013364:	4622      	mov	r2, r4
 8013366:	f001 ffd7 	bl	8015318 <xTCPWindowCreate>
 801336a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 801336c:	68fb      	ldr	r3, [r7, #12]
    }
 801336e:	4618      	mov	r0, r3
 8013370:	3718      	adds	r7, #24
 8013372:	46bd      	mov	sp, r7
 8013374:	bdb0      	pop	{r4, r5, r7, pc}
 8013376:	bf00      	nop
 8013378:	20001488 	.word	0x20001488
 801337c:	08026278 	.word	0x08026278

08013380 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013388:	2301      	movs	r3, #1
 801338a:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	7a1b      	ldrb	r3, [r3, #8]
 8013390:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013394:	b2db      	uxtb	r3, r3
 8013396:	2b00      	cmp	r3, #0
 8013398:	d002      	beq.n	80133a0 <prvTCPPrepareConnect+0x20>
 801339a:	2b01      	cmp	r3, #1
 801339c:	d005      	beq.n	80133aa <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801339e:	e009      	b.n	80133b4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f000 ff69 	bl	8014278 <prvTCPPrepareConnect_IPV4>
 80133a6:	60f8      	str	r0, [r7, #12]
                    break;
 80133a8:	e004      	b.n	80133b4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f001 fab4 	bl	8014918 <prvTCPPrepareConnect_IPV6>
 80133b0:	60f8      	str	r0, [r7, #12]
                    break;
 80133b2:	bf00      	nop
        }

        return xReturn;
 80133b4:	68fb      	ldr	r3, [r7, #12]
    }
 80133b6:	4618      	mov	r0, r3
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
	...

080133c0 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 80133d4:	fb02 f303 	mul.w	r3, r2, r3
 80133d8:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 80133da:	2300      	movs	r3, #0
 80133dc:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 80133de:	e005      	b.n	80133ec <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	085b      	lsrs	r3, r3, #1
 80133e4:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 80133e6:	7afb      	ldrb	r3, [r7, #11]
 80133e8:	3301      	adds	r3, #1
 80133ea:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133f2:	d2f5      	bcs.n	80133e0 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013400:	461a      	mov	r2, r3
 8013402:	7afb      	ldrb	r3, [r7, #11]
 8013404:	4803      	ldr	r0, [pc, #12]	@ (8013414 <prvWinScaleFactor+0x54>)
 8013406:	f00e fbef 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 801340a:	7afb      	ldrb	r3, [r7, #11]
        }
 801340c:	4618      	mov	r0, r3
 801340e:	3710      	adds	r7, #16
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	080262b0 	.word	0x080262b0

08013418 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013428:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	2202      	movs	r2, #2
 801342e:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	2204      	movs	r2, #4
 8013434:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013436:	89fb      	ldrh	r3, [r7, #14]
 8013438:	0a1b      	lsrs	r3, r3, #8
 801343a:	b29b      	uxth	r3, r3
 801343c:	b2da      	uxtb	r2, r3
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8013442:	89fb      	ldrh	r3, [r7, #14]
 8013444:	b2da      	uxtb	r2, r3
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff ffb8 	bl	80133c0 <prvWinScaleFactor>
 8013450:	4603      	mov	r3, r0
 8013452:	461a      	mov	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	2201      	movs	r2, #1
 801345e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	2203      	movs	r2, #3
 8013464:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	2203      	movs	r2, #3
 801346a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8013476:	2308      	movs	r3, #8
 8013478:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 801347a:	683a      	ldr	r2, [r7, #0]
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	4413      	add	r3, r2
 8013480:	3314      	adds	r3, #20
 8013482:	2201      	movs	r2, #1
 8013484:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	3301      	adds	r3, #1
 801348a:	683a      	ldr	r2, [r7, #0]
 801348c:	4413      	add	r3, r2
 801348e:	2201      	movs	r2, #1
 8013490:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	3302      	adds	r3, #2
 8013496:	683a      	ldr	r2, [r7, #0]
 8013498:	4413      	add	r3, r2
 801349a:	2204      	movs	r2, #4
 801349c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	3303      	adds	r3, #3
 80134a2:	683a      	ldr	r2, [r7, #0]
 80134a4:	4413      	add	r3, r2
 80134a6:	2202      	movs	r2, #2
 80134a8:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	3304      	adds	r3, #4
 80134ae:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 80134b0:	68bb      	ldr	r3, [r7, #8]
    }
 80134b2:	4618      	mov	r0, r3
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
	...

080134bc <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 80134bc:	b580      	push	{r7, lr}
 80134be:	b088      	sub	sp, #32
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
 80134c8:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 80134ca:	4b38      	ldr	r3, [pc, #224]	@ (80135ac <prvTCPBufferResize+0xf0>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d00b      	beq.n	80134ea <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 80134d2:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 80134d6:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d102      	bne.n	80134e4 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 80134de:	2301      	movs	r3, #1
 80134e0:	617b      	str	r3, [r7, #20]
 80134e2:	e020      	b.n	8013526 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80134e4:	2300      	movs	r3, #0
 80134e6:	617b      	str	r3, [r7, #20]
 80134e8:	e01d      	b.n	8013526 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80134ea:	68f8      	ldr	r0, [r7, #12]
 80134ec:	f7f6 fade 	bl	8009aac <uxIPHeaderSizeSocket>
 80134f0:	4602      	mov	r2, r0
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	4413      	add	r3, r2
 80134f6:	3322      	adds	r3, #34	@ 0x22
 80134f8:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	69ba      	ldr	r2, [r7, #24]
 80134fe:	4413      	add	r3, r2
 8013500:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	2b59      	cmp	r3, #89	@ 0x59
 8013506:	d801      	bhi.n	801350c <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013508:	235a      	movs	r3, #90	@ 0x5a
 801350a:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d004      	beq.n	801351c <prvTCPBufferResize+0x60>
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013516:	69ba      	ldr	r2, [r7, #24]
 8013518:	429a      	cmp	r2, r3
 801351a:	d902      	bls.n	8013522 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 801351c:	2301      	movs	r3, #1
 801351e:	617b      	str	r3, [r7, #20]
 8013520:	e001      	b.n	8013526 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013522:	2300      	movs	r3, #0
 8013524:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d023      	beq.n	8013574 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 801352c:	2100      	movs	r1, #0
 801352e:	69b8      	ldr	r0, [r7, #24]
 8013530:	f003 fc4a 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 8013534:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d031      	beq.n	80135a0 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 801353c:	69fb      	ldr	r3, [r7, #28]
 801353e:	69ba      	ldr	r2, [r7, #24]
 8013540:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00c      	beq.n	8013562 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013554:	461a      	mov	r2, r3
 8013556:	f00e fd63 	bl	8022020 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801355a:	68b8      	ldr	r0, [r7, #8]
 801355c:	f003 fc9c 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
 8013560:	e01e      	b.n	80135a0 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	33aa      	adds	r3, #170	@ 0xaa
 801356a:	225a      	movs	r2, #90	@ 0x5a
 801356c:	4619      	mov	r1, r3
 801356e:	f00e fd57 	bl	8022020 <memcpy>
 8013572:	e015      	b.n	80135a0 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d104      	bne.n	8013584 <prvTCPBufferResize+0xc8>
 801357a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 801357e:	480c      	ldr	r0, [pc, #48]	@ (80135b0 <prvTCPBufferResize+0xf4>)
 8013580:	f7ee f8f4 	bl	800176c <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	f7f6 fa8f 	bl	8009aac <uxIPHeaderSizeSocket>
 801358e:	4602      	mov	r2, r0
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	441a      	add	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	4413      	add	r3, r2
 8013598:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 80135a0:	69fb      	ldr	r3, [r7, #28]
    }
 80135a2:	4618      	mov	r0, r3
 80135a4:	3720      	adds	r7, #32
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	bf00      	nop
 80135ac:	08027380 	.word	0x08027380
 80135b0:	0802621c 	.word	0x0802621c

080135b4 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 80135c0:	2300      	movs	r3, #0
 80135c2:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 80135c4:	2300      	movs	r3, #0
 80135c6:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d008      	beq.n	80135e0 <prvTCPReturn_SetEndPoint+0x2c>
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d004      	beq.n	80135e0 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 80135de:	e078      	b.n	80136d2 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 80135e0:	483e      	ldr	r0, [pc, #248]	@ (80136dc <prvTCPReturn_SetEndPoint+0x128>)
 80135e2:	f00e fb01 	bl	8021be8 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2b14      	cmp	r3, #20
 80135ea:	d003      	beq.n	80135f4 <prvTCPReturn_SetEndPoint+0x40>
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2b28      	cmp	r3, #40	@ 0x28
 80135f0:	d03d      	beq.n	801366e <prvTCPReturn_SetEndPoint+0xba>
 80135f2:	e056      	b.n	80136a2 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135f8:	330e      	adds	r3, #14
 80135fa:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	691b      	ldr	r3, [r3, #16]
 8013600:	2108      	movs	r1, #8
 8013602:	4618      	mov	r0, r3
 8013604:	f7f9 fea8 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 8013608:	4602      	mov	r2, r0
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013612:	2b00      	cmp	r3, #0
 8013614:	d149      	bne.n	80136aa <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	061a      	lsls	r2, r3, #24
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	021b      	lsls	r3, r3, #8
 8013622:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013626:	431a      	orrs	r2, r3
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	0a1b      	lsrs	r3, r3, #8
 801362e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013632:	431a      	orrs	r2, r3
 8013634:	697b      	ldr	r3, [r7, #20]
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	0e1b      	lsrs	r3, r3, #24
 801363a:	ea42 0103 	orr.w	r1, r2, r3
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	691b      	ldr	r3, [r3, #16]
 8013642:	061a      	lsls	r2, r3, #24
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	691b      	ldr	r3, [r3, #16]
 8013648:	021b      	lsls	r3, r3, #8
 801364a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801364e:	431a      	orrs	r2, r3
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	691b      	ldr	r3, [r3, #16]
 8013654:	0a1b      	lsrs	r3, r3, #8
 8013656:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801365a:	431a      	orrs	r2, r3
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	691b      	ldr	r3, [r3, #16]
 8013660:	0e1b      	lsrs	r3, r3, #24
 8013662:	4313      	orrs	r3, r2
 8013664:	461a      	mov	r2, r3
 8013666:	481e      	ldr	r0, [pc, #120]	@ (80136e0 <prvTCPReturn_SetEndPoint+0x12c>)
 8013668:	f00e fabe 	bl	8021be8 <lUDPLoggingPrintf>
                        break;
 801366c:	e01d      	b.n	80136aa <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013672:	330e      	adds	r3, #14
 8013674:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	3318      	adds	r3, #24
 801367a:	4618      	mov	r0, r3
 801367c:	f7f9 fe26 	bl	800d2cc <FreeRTOS_FindEndPointOnIP_IPv6>
 8013680:	4602      	mov	r2, r0
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801368a:	2b00      	cmp	r3, #0
 801368c:	d10f      	bne.n	80136ae <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	f103 0108 	add.w	r1, r3, #8
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	3318      	adds	r3, #24
 8013698:	461a      	mov	r2, r3
 801369a:	4812      	ldr	r0, [pc, #72]	@ (80136e4 <prvTCPReturn_SetEndPoint+0x130>)
 801369c:	f00e faa4 	bl	8021be8 <lUDPLoggingPrintf>
                        break;
 80136a0:	e005      	b.n	80136ae <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	2200      	movs	r2, #0
 80136a6:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 80136a8:	e002      	b.n	80136b0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 80136aa:	bf00      	nop
 80136ac:	e000      	b.n	80136b0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 80136ae:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d00c      	beq.n	80136d2 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136bc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80136c0:	4619      	mov	r1, r3
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136c6:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 80136ca:	461a      	mov	r2, r3
 80136cc:	4806      	ldr	r0, [pc, #24]	@ (80136e8 <prvTCPReturn_SetEndPoint+0x134>)
 80136ce:	f00e fa8b 	bl	8021be8 <lUDPLoggingPrintf>
    }
 80136d2:	bf00      	nop
 80136d4:	3718      	adds	r7, #24
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	080262e4 	.word	0x080262e4
 80136e0:	0802630c 	.word	0x0802630c
 80136e4:	08026340 	.word	0x08026340
 80136e8:	08026374 	.word	0x08026374

080136ec <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b096      	sub	sp, #88	@ 0x58
 80136f0:	af02      	add	r7, sp, #8
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 80136f8:	2300      	movs	r3, #0
 80136fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d004      	beq.n	801370e <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801370a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801370c:	e002      	b.n	8013714 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	33aa      	adds	r3, #170	@ 0xaa
 8013712:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013714:	68f8      	ldr	r0, [r7, #12]
 8013716:	f7f6 f9c9 	bl	8009aac <uxIPHeaderSizeSocket>
 801371a:	4603      	mov	r3, r0
 801371c:	330e      	adds	r3, #14
 801371e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013720:	4413      	add	r3, r2
 8013722:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801372a:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 801372c:	2300      	movs	r3, #0
 801372e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 8013730:	2300      	movs	r3, #0
 8013732:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8013734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013736:	7b5b      	ldrb	r3, [r3, #13]
 8013738:	f043 0310 	orr.w	r3, r3, #16
 801373c:	b2da      	uxtb	r2, r3
 801373e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013740:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013748:	2b00      	cmp	r3, #0
 801374a:	f000 80a5 	beq.w	8013898 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013754:	2b01      	cmp	r3, #1
 8013756:	d90a      	bls.n	801376e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801375e:	f107 0210 	add.w	r2, r7, #16
 8013762:	4619      	mov	r1, r3
 8013764:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013766:	f002 fb13 	bl	8015d90 <ulTCPWindowTxGet>
 801376a:	4603      	mov	r3, r0
 801376c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 801376e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013770:	2b00      	cmp	r3, #0
 8013772:	f340 8091 	ble.w	8013898 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	6819      	ldr	r1, [r3, #0]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	f7ff fe9c 	bl	80134bc <prvTCPBufferResize>
 8013784:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8013786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013788:	2b00      	cmp	r3, #0
 801378a:	f000 8082 	beq.w	8013892 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013792:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8013794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013798:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801379a:	68f8      	ldr	r0, [r7, #12]
 801379c:	f7f6 f986 	bl	8009aac <uxIPHeaderSizeSocket>
 80137a0:	4603      	mov	r3, r0
 80137a2:	330e      	adds	r3, #14
 80137a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80137a6:	4413      	add	r3, r2
 80137a8:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f7f6 f97e 	bl	8009aac <uxIPHeaderSizeSocket>
 80137b0:	4602      	mov	r2, r0
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4413      	add	r3, r2
 80137b6:	3322      	adds	r3, #34	@ 0x22
 80137b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80137ba:	4413      	add	r3, r2
 80137bc:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	693a      	ldr	r2, [r7, #16]
 80137ce:	4619      	mov	r1, r3
 80137d0:	f7fc fef9 	bl	80105c6 <uxStreamBufferDistance>
 80137d4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80137dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137de:	2201      	movs	r2, #1
 80137e0:	9200      	str	r2, [sp, #0]
 80137e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80137e6:	f7fd f84c 	bl	8010882 <uxStreamBufferGet>
 80137ea:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 80137ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d007      	beq.n	8013804 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 80137f4:	6939      	ldr	r1, [r7, #16]
 80137f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137f8:	9300      	str	r3, [sp, #0]
 80137fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80137fe:	4898      	ldr	r0, [pc, #608]	@ (8013a60 <prvTCPPrepareSend+0x374>)
 8013800:	f00e f9f2 	bl	8021be8 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801380e:	b2db      	uxtb	r3, r3
 8013810:	2b00      	cmp	r3, #0
 8013812:	d041      	beq.n	8013898 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	4619      	mov	r1, r3
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013824:	689b      	ldr	r3, [r3, #8]
 8013826:	461a      	mov	r2, r3
 8013828:	f7fc fecd 	bl	80105c6 <uxStreamBufferDistance>
 801382c:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 801382e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013832:	429a      	cmp	r2, r3
 8013834:	d130      	bne.n	8013898 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801383c:	689b      	ldr	r3, [r3, #8]
 801383e:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8013854:	6a3b      	ldr	r3, [r7, #32]
 8013856:	9301      	str	r3, [sp, #4]
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013862:	4880      	ldr	r0, [pc, #512]	@ (8013a64 <prvTCPPrepareSend+0x378>)
 8013864:	f00e f9c0 	bl	8021be8 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801386a:	7b5b      	ldrb	r3, [r3, #13]
 801386c:	f043 0301 	orr.w	r3, r3, #1
 8013870:	b2da      	uxtb	r2, r3
 8013872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013874:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8013876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801387a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801387c:	441a      	add	r2, r3
 801387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013880:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013882:	68fa      	ldr	r2, [r7, #12]
 8013884:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801388c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8013890:	e002      	b.n	8013898 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8013892:	f04f 33ff 	mov.w	r3, #4294967295
 8013896:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8013898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801389a:	2b00      	cmp	r3, #0
 801389c:	f2c0 8099 	blt.w	80139d2 <prvTCPPrepareSend+0x2e6>
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80138a6:	2b05      	cmp	r3, #5
 80138a8:	f040 8093 	bne.w	80139d2 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80138b2:	f003 0320 	and.w	r3, r3, #32
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d029      	beq.n	8013910 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 80138bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80138be:	f002 f8e7 	bl	8015a90 <xTCPWindowTxDone>
 80138c2:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d023      	beq.n	8013910 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80138ce:	f36f 1345 	bfc	r3, #5, #1
 80138d2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80138d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138d8:	7b5b      	ldrb	r3, [r3, #13]
 80138da:	f043 0301 	orr.w	r3, r3, #1
 80138de:	b2da      	uxtb	r2, r3
 80138e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138e2:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80138ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138ee:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80138f8:	f043 0301 	orr.w	r3, r3, #1
 80138fc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8013900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013902:	6a1a      	ldr	r2, [r3, #32]
 8013904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013906:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8013908:	2106      	movs	r1, #6
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	f7fd f960 	bl	8010bd0 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013916:	2b03      	cmp	r3, #3
 8013918:	d90f      	bls.n	801393a <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013924:	461a      	mov	r2, r3
 8013926:	4850      	ldr	r0, [pc, #320]	@ (8013a68 <prvTCPPrepareSend+0x37c>)
 8013928:	f00e f95e 	bl	8021be8 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 801392c:	2108      	movs	r1, #8
 801392e:	68f8      	ldr	r0, [r7, #12]
 8013930:	f7fd f94e 	bl	8010bd0 <vTCPStateChange>
                    lDataLen = -1;
 8013934:	f04f 33ff 	mov.w	r3, #4294967295
 8013938:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 801393a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801393c:	2b00      	cmp	r3, #0
 801393e:	d148      	bne.n	80139d2 <prvTCPPrepareSend+0x2e6>
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013946:	f003 0301 	and.w	r3, r3, #1
 801394a:	b2db      	uxtb	r3, r3
 801394c:	2b00      	cmp	r3, #0
 801394e:	d140      	bne.n	80139d2 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8013950:	f7f0 fcf8 	bl	8004344 <xTaskGetTickCount>
 8013954:	4602      	mov	r2, r0
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801395c:	1ad3      	subs	r3, r2, r3
 801395e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013960:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013964:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801396c:	2b00      	cmp	r3, #0
 801396e:	d002      	beq.n	8013976 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8013970:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013974:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8013976:	697a      	ldr	r2, [r7, #20]
 8013978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801397a:	429a      	cmp	r2, r3
 801397c:	d929      	bls.n	80139d2 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801397e:	f7f0 fce1 	bl	8004344 <xTaskGetTickCount>
 8013982:	4602      	mov	r2, r0
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 801398a:	4b38      	ldr	r3, [pc, #224]	@ (8013a6c <prvTCPPrepareSend+0x380>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00b      	beq.n	80139aa <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801399c:	461a      	mov	r2, r3
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80139a4:	4832      	ldr	r0, [pc, #200]	@ (8013a70 <prvTCPPrepareSend+0x384>)
 80139a6:	f00e f91f 	bl	8021be8 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80139aa:	68fa      	ldr	r2, [r7, #12]
 80139ac:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80139b0:	f043 0302 	orr.w	r3, r3, #2
 80139b4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80139be:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80139c8:	3301      	adds	r3, #1
 80139ca:	b2da      	uxtb	r2, r3
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 80139d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	db3e      	blt.n	8013a56 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 80139d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139da:	2b00      	cmp	r3, #0
 80139dc:	dc0f      	bgt.n	80139fe <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80139e4:	f003 0301 	and.w	r3, r3, #1
 80139e8:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d107      	bne.n	80139fe <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80139f4:	f003 0302 	and.w	r3, r3, #2
 80139f8:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d02b      	beq.n	8013a56 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80139fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a00:	7b5b      	ldrb	r3, [r3, #13]
 8013a02:	f023 0308 	bic.w	r3, r3, #8
 8013a06:	b2da      	uxtb	r2, r3
 8013a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a0a:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	3314      	adds	r3, #20
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	009b      	lsls	r3, r3, #2
 8013a16:	b2da      	uxtb	r2, r3
 8013a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a1a:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8013a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a1e:	7b5b      	ldrb	r3, [r3, #13]
 8013a20:	f043 0310 	orr.w	r3, r3, #16
 8013a24:	b2da      	uxtb	r2, r3
 8013a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a28:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8013a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d006      	beq.n	8013a3e <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8013a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a32:	7b5b      	ldrb	r3, [r3, #13]
 8013a34:	f043 0308 	orr.w	r3, r3, #8
 8013a38:	b2da      	uxtb	r2, r3
 8013a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a3c:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013a3e:	68f8      	ldr	r0, [r7, #12]
 8013a40:	f7f6 f834 	bl	8009aac <uxIPHeaderSizeSocket>
 8013a44:	4602      	mov	r2, r0
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	4413      	add	r3, r2
 8013a4a:	3314      	adds	r3, #20
 8013a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 8013a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a52:	4413      	add	r3, r2
 8013a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8013a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3750      	adds	r7, #80	@ 0x50
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	080263a8 	.word	0x080263a8
 8013a64:	080263dc 	.word	0x080263dc
 8013a68:	08026404 	.word	0x08026404
 8013a6c:	20001488 	.word	0x20001488
 8013a70:	08026424 	.word	0x08026424

08013a74 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7fc fdf0 	bl	8010668 <uxStreamBufferMidSpace>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	dd1a      	ble.n	8013ac8 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013a98:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013aa0:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013aa2:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013aaa:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013aac:	f001 ff5c 	bl	8015968 <lTCPWindowTxAdd>
 8013ab0:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	dd07      	ble.n	8013ac8 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013abe:	68ba      	ldr	r2, [r7, #8]
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7fc fdf7 	bl	80106b6 <vStreamBufferMoveMid>
            }
        }
    }
 8013ac8:	bf00      	nop
 8013aca:	3710      	adds	r7, #16
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}

08013ad0 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013ad0:	b590      	push	{r4, r7, lr}
 8013ad2:	b08b      	sub	sp, #44	@ 0x2c
 8013ad4:	af02      	add	r7, sp, #8
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013ade:	6838      	ldr	r0, [r7, #0]
 8013ae0:	f7f5 ffca 	bl	8009a78 <uxIPHeaderSizePacket>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013ae8:	4423      	add	r3, r4
 8013aea:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013aec:	69bb      	ldr	r3, [r7, #24]
 8013aee:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013af6:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013afe:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d05c      	beq.n	8013bc0 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8013b06:	4b4f      	ldr	r3, [pc, #316]	@ (8013c44 <prvSetOptions+0x174>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	db44      	blt.n	8013b98 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013b12:	4618      	mov	r0, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013b1a:	461c      	mov	r4, r3
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013b22:	061a      	lsls	r2, r3, #24
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013b2a:	021b      	lsls	r3, r3, #8
 8013b2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013b30:	431a      	orrs	r2, r3
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013b38:	0a1b      	lsrs	r3, r3, #8
 8013b3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013b3e:	431a      	orrs	r2, r3
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013b46:	0e1b      	lsrs	r3, r3, #24
 8013b48:	431a      	orrs	r2, r3
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013b50:	1ad3      	subs	r3, r2, r3
 8013b52:	693a      	ldr	r2, [r7, #16]
 8013b54:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013b58:	0611      	lsls	r1, r2, #24
 8013b5a:	693a      	ldr	r2, [r7, #16]
 8013b5c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013b60:	0212      	lsls	r2, r2, #8
 8013b62:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013b66:	4311      	orrs	r1, r2
 8013b68:	693a      	ldr	r2, [r7, #16]
 8013b6a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013b6e:	0a12      	lsrs	r2, r2, #8
 8013b70:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8013b74:	4311      	orrs	r1, r2
 8013b76:	693a      	ldr	r2, [r7, #16]
 8013b78:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013b7c:	0e12      	lsrs	r2, r2, #24
 8013b7e:	4311      	orrs	r1, r2
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013b86:	1a8a      	subs	r2, r1, r2
 8013b88:	9201      	str	r2, [sp, #4]
 8013b8a:	9300      	str	r3, [sp, #0]
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	4622      	mov	r2, r4
 8013b90:	4601      	mov	r1, r0
 8013b92:	482d      	ldr	r0, [pc, #180]	@ (8013c48 <prvSetOptions+0x178>)
 8013b94:	f00e f828 	bl	8021be8 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	3380      	adds	r3, #128	@ 0x80
 8013b9c:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	3314      	adds	r3, #20
 8013ba2:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8013ba4:	69fa      	ldr	r2, [r7, #28]
 8013ba6:	68f9      	ldr	r1, [r7, #12]
 8013ba8:	68b8      	ldr	r0, [r7, #8]
 8013baa:	f00e fa39 	bl	8022020 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	b2db      	uxtb	r3, r3
 8013bb2:	3314      	adds	r3, #20
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	009b      	lsls	r3, r3, #2
 8013bb8:	b2da      	uxtb	r2, r3
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	731a      	strb	r2, [r3, #12]
 8013bbe:	e03c      	b.n	8013c3a <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013bc6:	2b04      	cmp	r3, #4
 8013bc8:	d937      	bls.n	8013c3a <prvSetOptions+0x16a>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013bd0:	f003 0301 	and.w	r3, r3, #1
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d02f      	beq.n	8013c3a <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013be0:	f36f 0300 	bfc	r3, #0, #1
 8013be4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8013be8:	4b16      	ldr	r3, [pc, #88]	@ (8013c44 <prvSetOptions+0x174>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	db06      	blt.n	8013bfe <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	4814      	ldr	r0, [pc, #80]	@ (8013c4c <prvSetOptions+0x17c>)
 8013bfa:	f00d fff5 	bl	8021be8 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	2202      	movs	r2, #2
 8013c02:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	2204      	movs	r2, #4
 8013c08:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013c10:	0a1b      	lsrs	r3, r3, #8
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	b2da      	uxtb	r2, r3
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013c20:	b2da      	uxtb	r2, r3
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8013c26:	2304      	movs	r3, #4
 8013c28:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013c2a:	69fb      	ldr	r3, [r7, #28]
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	3314      	adds	r3, #20
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	009b      	lsls	r3, r3, #2
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 8013c3a:	69fb      	ldr	r3, [r7, #28]
    }
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3724      	adds	r7, #36	@ 0x24
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd90      	pop	{r4, r7, pc}
 8013c44:	20001488 	.word	0x20001488
 8013c48:	08026444 	.word	0x08026444
 8013c4c:	0802646c 	.word	0x0802646c

08013c50 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c52:	b093      	sub	sp, #76	@ 0x4c
 8013c54:	af04      	add	r7, sp, #16
 8013c56:	60f8      	str	r0, [r7, #12]
 8013c58:	60b9      	str	r1, [r7, #8]
 8013c5a:	607a      	str	r2, [r7, #4]
 8013c5c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7f5 ff05 	bl	8009a78 <uxIPHeaderSizePacket>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013c72:	4423      	add	r3, r4
 8013c74:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013c80:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7f5 fef4 	bl	8009a78 <uxIPHeaderSizePacket>
 8013c90:	4603      	mov	r3, r0
 8013c92:	3314      	adds	r3, #20
 8013c94:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8013c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c98:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ca0:	691b      	ldr	r3, [r3, #16]
 8013ca2:	1ad3      	subs	r3, r2, r3
 8013ca4:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013cb0:	005b      	lsls	r3, r3, #1
 8013cb2:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d079      	beq.n	8013dae <prvSendData+0x15e>
 8013cba:	69ba      	ldr	r2, [r7, #24]
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	db75      	blt.n	8013dae <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ccc:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d16d      	bne.n	8013dae <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013cd4:	6a3b      	ldr	r3, [r7, #32]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d169      	bne.n	8013dae <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8013ce0:	2b05      	cmp	r3, #5
 8013ce2:	d164      	bne.n	8013dae <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8013ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce6:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013ce8:	2b10      	cmp	r3, #16
 8013cea:	d160      	bne.n	8013dae <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013cf2:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d00f      	beq.n	8013d22 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d005      	beq.n	8013d18 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013d12:	4618      	mov	r0, r3
 8013d14:	f003 f8c0 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d204      	bcs.n	8013d34 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8013d32:	e00c      	b.n	8013d4e <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2214      	movs	r2, #20
 8013d38:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d103      	bne.n	8013d4e <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	2201      	movs	r2, #1
 8013d4a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8013e44 <prvSendData+0x1f4>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	2b01      	cmp	r3, #1
 8013d54:	dd25      	ble.n	8013da2 <prvSendData+0x152>
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013d5a:	2b17      	cmp	r3, #23
 8013d5c:	d021      	beq.n	8013da2 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013d62:	461d      	mov	r5, r3
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013d6a:	461e      	mov	r6, r3
 8013d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d6e:	691a      	ldr	r2, [r3, #16]
 8013d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	1ad0      	subs	r0, r2, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8013d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d7e:	69db      	ldr	r3, [r3, #28]
 8013d80:	1ad3      	subs	r3, r2, r3
 8013d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d84:	68f9      	ldr	r1, [r7, #12]
 8013d86:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	69b9      	ldr	r1, [r7, #24]
 8013d8e:	9103      	str	r1, [sp, #12]
 8013d90:	9402      	str	r4, [sp, #8]
 8013d92:	9201      	str	r2, [sp, #4]
 8013d94:	9300      	str	r3, [sp, #0]
 8013d96:	4603      	mov	r3, r0
 8013d98:	4632      	mov	r2, r6
 8013d9a:	4629      	mov	r1, r5
 8013d9c:	482a      	ldr	r0, [pc, #168]	@ (8013e48 <prvSendData+0x1f8>)
 8013d9e:	f00d ff23 	bl	8021be8 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	2200      	movs	r2, #0
 8013da6:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8013da8:	2300      	movs	r3, #0
 8013daa:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8013dac:	e015      	b.n	8013dda <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d010      	beq.n	8013dda <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d005      	beq.n	8013dd2 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f003 f863 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8013dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d02b      	beq.n	8013e38 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013de0:	4b18      	ldr	r3, [pc, #96]	@ (8013e44 <prvSendData+0x1f4>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	dd1d      	ble.n	8013e24 <prvSendData+0x1d4>
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013dec:	2b17      	cmp	r3, #23
 8013dee:	d019      	beq.n	8013e24 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013df4:	4618      	mov	r0, r3
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013dfc:	461c      	mov	r4, r3
 8013dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e00:	691a      	ldr	r2, [r3, #16]
 8013e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e04:	68db      	ldr	r3, [r3, #12]
 8013e06:	1ad1      	subs	r1, r2, r3
 8013e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0e:	69db      	ldr	r3, [r3, #28]
 8013e10:	1ad3      	subs	r3, r2, r3
 8013e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e14:	9201      	str	r2, [sp, #4]
 8013e16:	9300      	str	r3, [sp, #0]
 8013e18:	460b      	mov	r3, r1
 8013e1a:	4622      	mov	r2, r4
 8013e1c:	4601      	mov	r1, r0
 8013e1e:	480b      	ldr	r0, [pc, #44]	@ (8013e4c <prvSendData+0x1fc>)
 8013e20:	f00d fee2 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	6819      	ldr	r1, [r3, #0]
 8013e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f7ff f8ff 	bl	8013030 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	2200      	movs	r2, #0
 8013e36:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8013e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	373c      	adds	r7, #60	@ 0x3c
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e42:	bf00      	nop
 8013e44:	20001488 	.word	0x20001488
 8013e48:	08026480 	.word	0x08026480
 8013e4c:	080264b8 	.word	0x080264b8

08013e50 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b084      	sub	sp, #16
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	460b      	mov	r3, r1
 8013e5a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f7f5 fe09 	bl	8009a78 <uxIPHeaderSizePacket>
 8013e66:	4603      	mov	r3, r0
 8013e68:	2b14      	cmp	r3, #20
 8013e6a:	d002      	beq.n	8013e72 <prvTCPSendSpecialPacketHelper+0x22>
 8013e6c:	2b28      	cmp	r3, #40	@ 0x28
 8013e6e:	d007      	beq.n	8013e80 <prvTCPSendSpecialPacketHelper+0x30>
 8013e70:	e00d      	b.n	8013e8e <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8013e72:	78fb      	ldrb	r3, [r7, #3]
 8013e74:	4619      	mov	r1, r3
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f000 fb18 	bl	80144ac <prvTCPSendSpecialPktHelper_IPV4>
 8013e7c:	60f8      	str	r0, [r7, #12]
                        break;
 8013e7e:	e009      	b.n	8013e94 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8013e80:	78fb      	ldrb	r3, [r7, #3]
 8013e82:	4619      	mov	r1, r3
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f000 fe8b 	bl	8014ba0 <prvTCPSendSpecialPktHelper_IPV6>
 8013e8a:	60f8      	str	r0, [r7, #12]
                        break;
 8013e8c:	e002      	b.n	8013e94 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	60fb      	str	r3, [r7, #12]
                    break;
 8013e92:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8013e94:	68fb      	ldr	r3, [r7, #12]
    }
 8013e96:	4618      	mov	r0, r3
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}

08013e9e <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013e9e:	b580      	push	{r7, lr}
 8013ea0:	b082      	sub	sp, #8
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8013ea6:	2110      	movs	r1, #16
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7ff ffd1 	bl	8013e50 <prvTCPSendSpecialPacketHelper>
 8013eae:	4603      	mov	r3, r0
    }
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8013ec0:	2114      	movs	r1, #20
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f7ff ffc4 	bl	8013e50 <prvTCPSendSpecialPacketHelper>
 8013ec8:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
	...

08013ed4 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b0a6      	sub	sp, #152	@ 0x98
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	607a      	str	r2, [r7, #4]
 8013ee0:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013f02:	2300      	movs	r3, #0
 8013f04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8013f0c:	2314      	movs	r3, #20
 8013f0e:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013f10:	2300      	movs	r3, #0
 8013f12:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d117      	bne.n	8013f4c <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8013f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013f28:	2238      	movs	r2, #56	@ 0x38
 8013f2a:	2100      	movs	r1, #0
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f00e f984 	bl	802223a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f3c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f42:	225a      	movs	r2, #90	@ 0x5a
 8013f44:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013f46:	2300      	movs	r3, #0
 8013f48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8013f4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d114      	bne.n	8013f7e <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013f60:	f7f6 f83c 	bl	8009fdc <pxDuplicateNetworkBufferWithDescriptor>
 8013f64:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8013f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d003      	beq.n	8013f78 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8013f70:	2301      	movs	r3, #1
 8013f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013f76:	e002      	b.n	8013f7e <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013f78:	48bc      	ldr	r0, [pc, #752]	@ (801426c <prvTCPReturnPacket_IPV4+0x398>)
 8013f7a:	f00d fe35 	bl	8021be8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8013f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f000 8166 	beq.w	8014254 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f8e:	330e      	adds	r3, #14
 8013f90:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8013f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013fa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013faa:	330e      	adds	r3, #14
 8013fac:	4413      	add	r3, r2
 8013fae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d10b      	bne.n	8013fd4 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013fbc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013fbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013fc2:	68f8      	ldr	r0, [r7, #12]
 8013fc4:	f7ff faf6 	bl	80135b4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f000 813d 	beq.w	801424e <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d028      	beq.n	801402c <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013fda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013fdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f7ff f865 	bl	80130b0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013fee:	68f8      	ldr	r0, [r7, #12]
 8013ff0:	f7ff f8d8 	bl	80131a4 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ff8:	061a      	lsls	r2, r3, #24
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ffe:	021b      	lsls	r3, r3, #8
 8014000:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014004:	431a      	orrs	r2, r3
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801400a:	0a1b      	lsrs	r3, r3, #8
 801400c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014010:	431a      	orrs	r2, r3
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014016:	0e1b      	lsrs	r3, r3, #24
 8014018:	431a      	orrs	r2, r3
 801401a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801401c:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801401e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014024:	681a      	ldr	r2, [r3, #0]
 8014026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014028:	60da      	str	r2, [r3, #12]
 801402a:	e017      	b.n	801405c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801402c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014038:	689a      	ldr	r2, [r3, #8]
 801403a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801403e:	605a      	str	r2, [r3, #4]
 8014040:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014044:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014046:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8014048:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801404a:	691b      	ldr	r3, [r3, #16]
 801404c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801404e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014050:	68da      	ldr	r2, [r3, #12]
 8014052:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014054:	611a      	str	r2, [r3, #16]
 8014056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014058:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801405a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 801405c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801405e:	2280      	movs	r2, #128	@ 0x80
 8014060:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	b29b      	uxth	r3, r3
 8014066:	021b      	lsls	r3, r3, #8
 8014068:	b29a      	uxth	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	0a1b      	lsrs	r3, r3, #8
 801406e:	b29b      	uxth	r3, r3
 8014070:	4313      	orrs	r3, r2
 8014072:	b29a      	uxth	r2, r3
 8014074:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014076:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8014078:	4b7d      	ldr	r3, [pc, #500]	@ (8014270 <prvTCPReturnPacket_IPV4+0x39c>)
 801407a:	881b      	ldrh	r3, [r3, #0]
 801407c:	021b      	lsls	r3, r3, #8
 801407e:	b21a      	sxth	r2, r3
 8014080:	4b7b      	ldr	r3, [pc, #492]	@ (8014270 <prvTCPReturnPacket_IPV4+0x39c>)
 8014082:	881b      	ldrh	r3, [r3, #0]
 8014084:	0a1b      	lsrs	r3, r3, #8
 8014086:	b29b      	uxth	r3, r3
 8014088:	b21b      	sxth	r3, r3
 801408a:	4313      	orrs	r3, r2
 801408c:	b21b      	sxth	r3, r3
 801408e:	b29a      	uxth	r2, r3
 8014090:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014092:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8014094:	4b76      	ldr	r3, [pc, #472]	@ (8014270 <prvTCPReturnPacket_IPV4+0x39c>)
 8014096:	881b      	ldrh	r3, [r3, #0]
 8014098:	3301      	adds	r3, #1
 801409a:	b29a      	uxth	r2, r3
 801409c:	4b74      	ldr	r3, [pc, #464]	@ (8014270 <prvTCPReturnPacket_IPV4+0x39c>)
 801409e:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 80140a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80140a2:	2200      	movs	r2, #0
 80140a4:	719a      	strb	r2, [r3, #6]
 80140a6:	2200      	movs	r2, #0
 80140a8:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80140aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80140ae:	781a      	ldrb	r2, [r3, #0]
 80140b0:	785b      	ldrb	r3, [r3, #1]
 80140b2:	021b      	lsls	r3, r3, #8
 80140b4:	4313      	orrs	r3, r2
 80140b6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80140ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80140be:	885b      	ldrh	r3, [r3, #2]
 80140c0:	b29a      	uxth	r2, r3
 80140c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80140c6:	801a      	strh	r2, [r3, #0]
 80140c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80140cc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80140d0:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 80140d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 80140da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140e0:	f103 020e 	add.w	r2, r3, #14
 80140e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140e8:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 80140ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80140ec:	3306      	adds	r3, #6
 80140ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 80140f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80140f4:	691b      	ldr	r3, [r3, #16]
 80140f6:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 80140f8:	f107 0214 	add.w	r2, r7, #20
 80140fc:	f107 011c 	add.w	r1, r7, #28
 8014100:	f107 0318 	add.w	r3, r7, #24
 8014104:	4618      	mov	r0, r3
 8014106:	f7f2 fe9d 	bl	8006e44 <eARPGetCacheEntry>
 801410a:	4603      	mov	r3, r0
 801410c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014110:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014114:	2b01      	cmp	r3, #1
 8014116:	d108      	bne.n	801412a <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014118:	f107 031c 	add.w	r3, r7, #28
 801411c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014120:	697a      	ldr	r2, [r7, #20]
 8014122:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014126:	631a      	str	r2, [r3, #48]	@ 0x30
 8014128:	e003      	b.n	8014132 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 801412a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801412c:	3306      	adds	r3, #6
 801412e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014132:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014138:	2b00      	cmp	r3, #0
 801413a:	f000 808a 	beq.w	8014252 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801413e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014140:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014142:	2206      	movs	r2, #6
 8014144:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014148:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801414a:	f00d ff69 	bl	8022020 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 801414e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014154:	33e8      	adds	r3, #232	@ 0xe8
 8014156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801415a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801415c:	3306      	adds	r3, #6
 801415e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014160:	2206      	movs	r2, #6
 8014162:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014166:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014168:	f00d ff5a 	bl	8022020 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801416c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014172:	2b3b      	cmp	r3, #59	@ 0x3b
 8014174:	d81a      	bhi.n	80141ac <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801417a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801417c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014180:	e00c      	b.n	801419c <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014182:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014188:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801418c:	4413      	add	r3, r2
 801418e:	2200      	movs	r2, #0
 8014190:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014192:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014196:	3301      	adds	r3, #1
 8014198:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801419c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80141a0:	2b3b      	cmp	r3, #59	@ 0x3b
 80141a2:	ddee      	ble.n	8014182 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80141a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80141a8:	223c      	movs	r2, #60	@ 0x3c
 80141aa:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 80141ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80141b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d104      	bne.n	80141c4 <prvTCPReturnPacket_IPV4+0x2f0>
 80141ba:	f240 111d 	movw	r1, #285	@ 0x11d
 80141be:	482d      	ldr	r0, [pc, #180]	@ (8014274 <prvTCPReturnPacket_IPV4+0x3a0>)
 80141c0:	f7ed fad4 	bl	800176c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80141c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80141c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80141ce:	68db      	ldr	r3, [r3, #12]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d104      	bne.n	80141de <prvTCPReturnPacket_IPV4+0x30a>
 80141d4:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80141d8:	4826      	ldr	r0, [pc, #152]	@ (8014274 <prvTCPReturnPacket_IPV4+0x3a0>)
 80141da:	f7ed fac7 	bl	800176c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80141de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80141e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80141e8:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 80141ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80141ec:	68db      	ldr	r3, [r3, #12]
 80141ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80141f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80141f6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80141f8:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 80141fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d121      	bne.n	8014246 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014202:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014206:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801420a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801420e:	021b      	lsls	r3, r3, #8
 8014210:	4313      	orrs	r3, r2
 8014212:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014216:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801421a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801421c:	b29a      	uxth	r2, r3
 801421e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014222:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014228:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 801422c:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 801422e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014230:	691a      	ldr	r2, [r3, #16]
 8014232:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014234:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014236:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014238:	3306      	adds	r3, #6
 801423a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801423c:	2206      	movs	r2, #6
 801423e:	4618      	mov	r0, r3
 8014240:	f00d feee 	bl	8022020 <memcpy>
 8014244:	e006      	b.n	8014254 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8014246:	2300      	movs	r3, #0
 8014248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801424c:	e002      	b.n	8014254 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 801424e:	bf00      	nop
 8014250:	e000      	b.n	8014254 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014252:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014254:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014258:	2b01      	cmp	r3, #1
 801425a:	d103      	bne.n	8014264 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801425c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014260:	f002 fe1a 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014264:	bf00      	nop
 8014266:	3798      	adds	r7, #152	@ 0x98
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	080264e4 	.word	0x080264e4
 8014270:	20000fe0 	.word	0x20000fe0
 8014274:	0802650c 	.word	0x0802650c

08014278 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801427a:	b093      	sub	sp, #76	@ 0x4c
 801427c:	af06      	add	r7, sp, #24
 801427e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014280:	2301      	movs	r3, #1
 8014282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014284:	2300      	movs	r3, #0
 8014286:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014288:	f107 030c 	add.w	r3, r7, #12
 801428c:	2206      	movs	r2, #6
 801428e:	2100      	movs	r1, #0
 8014290:	4618      	mov	r0, r3
 8014292:	f00d ffd2 	bl	802223a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801429a:	061a      	lsls	r2, r3, #24
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142a0:	021b      	lsls	r3, r3, #8
 80142a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80142a6:	431a      	orrs	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142ac:	0a1b      	lsrs	r3, r3, #8
 80142ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80142b2:	431a      	orrs	r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142b8:	0e1b      	lsrs	r3, r3, #24
 80142ba:	4313      	orrs	r3, r2
 80142bc:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80142c4:	f107 010c 	add.w	r1, r7, #12
 80142c8:	f107 0314 	add.w	r3, r7, #20
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7f2 fdb9 	bl	8006e44 <eARPGetCacheEntry>
 80142d2:	4603      	mov	r3, r0
 80142d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 80142d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d037      	beq.n	8014350 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80142e6:	3301      	adds	r3, #1
 80142e8:	b2da      	uxtb	r2, r3
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	061a      	lsls	r2, r3, #24
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	021b      	lsls	r3, r3, #8
 80142fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014300:	431a      	orrs	r2, r3
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	0a1b      	lsrs	r3, r3, #8
 8014306:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801430a:	431a      	orrs	r2, r3
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	0e1b      	lsrs	r3, r3, #24
 8014310:	431a      	orrs	r2, r3
 8014312:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8014316:	7b38      	ldrb	r0, [r7, #12]
 8014318:	7b7c      	ldrb	r4, [r7, #13]
 801431a:	7bbd      	ldrb	r5, [r7, #14]
 801431c:	7bfe      	ldrb	r6, [r7, #15]
 801431e:	f897 c010 	ldrb.w	ip, [r7, #16]
 8014322:	f8c7 c000 	str.w	ip, [r7]
 8014326:	f897 c011 	ldrb.w	ip, [r7, #17]
 801432a:	4663      	mov	r3, ip
 801432c:	9305      	str	r3, [sp, #20]
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	9304      	str	r3, [sp, #16]
 8014332:	9603      	str	r6, [sp, #12]
 8014334:	9502      	str	r5, [sp, #8]
 8014336:	9401      	str	r4, [sp, #4]
 8014338:	9000      	str	r0, [sp, #0]
 801433a:	4673      	mov	r3, lr
 801433c:	485a      	ldr	r0, [pc, #360]	@ (80144a8 <prvTCPPrepareConnect_IPV4+0x230>)
 801433e:	f00d fc53 	bl	8021be8 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	4618      	mov	r0, r3
 8014346:	f7f2 ffd1 	bl	80072ec <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 801434a:	2300      	movs	r3, #0
 801434c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 801434e:	e000      	b.n	8014352 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014350:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014354:	2b00      	cmp	r3, #0
 8014356:	d010      	beq.n	801437a <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801436a:	f7ed fa1f 	bl	80017ac <ulApplicationGetNextSequenceNumber>
 801436e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014372:	2b00      	cmp	r3, #0
 8014374:	d101      	bne.n	801437a <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014376:	2300      	movs	r3, #0
 8014378:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801437c:	2b00      	cmp	r3, #0
 801437e:	f000 808d 	beq.w	801449c <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	33aa      	adds	r3, #170	@ 0xaa
 8014386:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	330e      	adds	r3, #14
 801438c:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2200      	movs	r2, #0
 8014392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801439c:	f043 0308 	orr.w	r3, r3, #8
 80143a0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	33aa      	adds	r3, #170	@ 0xaa
 80143a8:	225a      	movs	r2, #90	@ 0x5a
 80143aa:	2100      	movs	r1, #0
 80143ac:	4618      	mov	r0, r3
 80143ae:	f00d ff44 	bl	802223a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 80143b2:	6a3b      	ldr	r3, [r7, #32]
 80143b4:	3306      	adds	r3, #6
 80143b6:	461a      	mov	r2, r3
 80143b8:	f107 030c 	add.w	r3, r7, #12
 80143bc:	6818      	ldr	r0, [r3, #0]
 80143be:	6010      	str	r0, [r2, #0]
 80143c0:	889b      	ldrh	r3, [r3, #4]
 80143c2:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 80143c4:	6a3b      	ldr	r3, [r7, #32]
 80143c6:	2200      	movs	r2, #0
 80143c8:	f042 0208 	orr.w	r2, r2, #8
 80143cc:	731a      	strb	r2, [r3, #12]
 80143ce:	2200      	movs	r2, #0
 80143d0:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	2245      	movs	r2, #69	@ 0x45
 80143d6:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 80143d8:	2338      	movs	r3, #56	@ 0x38
 80143da:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 80143dc:	8b7b      	ldrh	r3, [r7, #26]
 80143de:	021b      	lsls	r3, r3, #8
 80143e0:	b21a      	sxth	r2, r3
 80143e2:	8b7b      	ldrh	r3, [r7, #26]
 80143e4:	0a1b      	lsrs	r3, r3, #8
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	b21b      	sxth	r3, r3
 80143ea:	4313      	orrs	r3, r2
 80143ec:	b21b      	sxth	r3, r3
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	69fb      	ldr	r3, [r7, #28]
 80143f2:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80143f4:	69fb      	ldr	r3, [r7, #28]
 80143f6:	2280      	movs	r2, #128	@ 0x80
 80143f8:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 80143fa:	69fb      	ldr	r3, [r7, #28]
 80143fc:	2206      	movs	r2, #6
 80143fe:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014404:	061a      	lsls	r2, r3, #24
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801440a:	021b      	lsls	r3, r3, #8
 801440c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014410:	431a      	orrs	r2, r3
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014416:	0a1b      	lsrs	r3, r3, #8
 8014418:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801441c:	431a      	orrs	r2, r3
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014422:	0e1b      	lsrs	r3, r3, #24
 8014424:	431a      	orrs	r2, r3
 8014426:	69fb      	ldr	r3, [r7, #28]
 8014428:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014430:	021b      	lsls	r3, r3, #8
 8014432:	b21a      	sxth	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801443a:	0a1b      	lsrs	r3, r3, #8
 801443c:	b29b      	uxth	r3, r3
 801443e:	b21b      	sxth	r3, r3
 8014440:	4313      	orrs	r3, r2
 8014442:	b21b      	sxth	r3, r3
 8014444:	b29a      	uxth	r2, r3
 8014446:	6a3b      	ldr	r3, [r7, #32]
 8014448:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801444e:	021b      	lsls	r3, r3, #8
 8014450:	b21a      	sxth	r2, r3
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014456:	0a1b      	lsrs	r3, r3, #8
 8014458:	b29b      	uxth	r3, r3
 801445a:	b21b      	sxth	r3, r3
 801445c:	4313      	orrs	r3, r2
 801445e:	b21b      	sxth	r3, r3
 8014460:	b29a      	uxth	r2, r3
 8014462:	6a3b      	ldr	r3, [r7, #32]
 8014464:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2200      	movs	r2, #0
 801446a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014472:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8014476:	6a3b      	ldr	r3, [r7, #32]
 8014478:	2250      	movs	r2, #80	@ 0x50
 801447a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801447e:	6a3b      	ldr	r3, [r7, #32]
 8014480:	2202      	movs	r2, #2
 8014482:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f000 fc3c 	bl	8014d04 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7fe ff2b 	bl	80132e8 <prvTCPCreateWindow>
 8014492:	4603      	mov	r3, r0
 8014494:	2b01      	cmp	r3, #1
 8014496:	d001      	beq.n	801449c <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8014498:	2300      	movs	r3, #0
 801449a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 801449c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3734      	adds	r7, #52	@ 0x34
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a6:	bf00      	nop
 80144a8:	0802654c 	.word	0x0802654c

080144ac <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b086      	sub	sp, #24
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	460b      	mov	r3, r1
 80144b6:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144bc:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 80144be:	2328      	movs	r3, #40	@ 0x28
 80144c0:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80144c8:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	78fa      	ldrb	r2, [r7, #3]
 80144ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	2250      	movs	r2, #80	@ 0x50
 80144d6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80144da:	7bfb      	ldrb	r3, [r7, #15]
 80144dc:	f003 0302 	and.w	r3, r3, #2
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d02c      	beq.n	801453e <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80144ea:	061a      	lsls	r2, r3, #24
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80144f2:	021b      	lsls	r3, r3, #8
 80144f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80144f8:	431a      	orrs	r2, r3
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014500:	0a1b      	lsrs	r3, r3, #8
 8014502:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014506:	431a      	orrs	r2, r3
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801450e:	0e1b      	lsrs	r3, r3, #24
 8014510:	4313      	orrs	r3, r2
 8014512:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	3301      	adds	r3, #1
 8014518:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	061a      	lsls	r2, r3, #24
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	021b      	lsls	r3, r3, #8
 8014522:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014526:	431a      	orrs	r2, r3
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	0a1b      	lsrs	r3, r3, #8
 801452c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014530:	431a      	orrs	r2, r3
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	0e1b      	lsrs	r3, r3, #24
 8014536:	431a      	orrs	r2, r3
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801453e:	2300      	movs	r3, #0
 8014540:	693a      	ldr	r2, [r7, #16]
 8014542:	6879      	ldr	r1, [r7, #4]
 8014544:	2000      	movs	r0, #0
 8014546:	f7fe fd73 	bl	8013030 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801454a:	2300      	movs	r3, #0
}
 801454c:	4618      	mov	r0, r3
 801454e:	3718      	adds	r7, #24
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014554:	b5b0      	push	{r4, r5, r7, lr}
 8014556:	b0aa      	sub	sp, #168	@ 0xa8
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	60b9      	str	r1, [r7, #8]
 801455e:	607a      	str	r2, [r7, #4]
 8014560:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014562:	2300      	movs	r3, #0
 8014564:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014568:	2300      	movs	r3, #0
 801456a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 801456e:	2300      	movs	r3, #0
 8014570:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 801457a:	2300      	movs	r3, #0
 801457c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014586:	2300      	movs	r3, #0
 8014588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 801458c:	2300      	movs	r3, #0
 801458e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8014592:	2328      	movs	r3, #40	@ 0x28
 8014594:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8014598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d103      	bne.n	80145a8 <prvTCPReturnPacket_IPV6+0x54>
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	f000 81ae 	beq.w	8014904 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 80145a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d117      	bne.n	80145e0 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 80145b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80145b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 80145b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80145bc:	2238      	movs	r2, #56	@ 0x38
 80145be:	2100      	movs	r1, #0
 80145c0:	4618      	mov	r0, r3
 80145c2:	f00d fe3a 	bl	802223a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 80145cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145d0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80145d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145d6:	225a      	movs	r2, #90	@ 0x5a
 80145d8:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 80145da:	2300      	movs	r3, #0
 80145dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 80145e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d114      	bne.n	8014612 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80145e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145ee:	4619      	mov	r1, r3
 80145f0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80145f4:	f7f5 fcf2 	bl	8009fdc <pxDuplicateNetworkBufferWithDescriptor>
 80145f8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 80145fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014600:	2b00      	cmp	r3, #0
 8014602:	d003      	beq.n	801460c <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8014604:	2301      	movs	r3, #1
 8014606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801460a:	e002      	b.n	8014612 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 801460c:	48c0      	ldr	r0, [pc, #768]	@ (8014910 <prvTCPReturnPacket_IPV6+0x3bc>)
 801460e:	f00d faeb 	bl	8021be8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8014612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014616:	2b00      	cmp	r3, #0
 8014618:	f000 8175 	beq.w	8014906 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801461c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014622:	2b00      	cmp	r3, #0
 8014624:	d103      	bne.n	801462e <prvTCPReturnPacket_IPV6+0xda>
 8014626:	219d      	movs	r1, #157	@ 0x9d
 8014628:	48ba      	ldr	r0, [pc, #744]	@ (8014914 <prvTCPReturnPacket_IPV6+0x3c0>)
 801462a:	f7ed f89f 	bl	800176c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801462e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014634:	330e      	adds	r3, #14
 8014636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 801463a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014640:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014644:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 801464c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014656:	330e      	adds	r3, #14
 8014658:	4413      	add	r3, r2
 801465a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801465e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014664:	2b00      	cmp	r3, #0
 8014666:	d117      	bne.n	8014698 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014668:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801466c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014670:	68f8      	ldr	r0, [r7, #12]
 8014672:	f7fe ff9f 	bl	80135b4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801467a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801467c:	2b00      	cmp	r3, #0
 801467e:	d10b      	bne.n	8014698 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8014680:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014684:	2b00      	cmp	r3, #0
 8014686:	d003      	beq.n	8014690 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014688:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801468c:	f002 fc04 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8014690:	2300      	movs	r3, #0
 8014692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8014696:	e136      	b.n	8014906 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d025      	beq.n	80146ea <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801469e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80146a2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80146a6:	68f8      	ldr	r0, [r7, #12]
 80146a8:	f7fe fd02 	bl	80130b0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80146b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80146b6:	68f8      	ldr	r0, [r7, #12]
 80146b8:	f7fe fd74 	bl	80131a4 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80146bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80146c0:	f103 0018 	add.w	r0, r3, #24
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	3354      	adds	r3, #84	@ 0x54
 80146c8:	2210      	movs	r2, #16
 80146ca:	4619      	mov	r1, r3
 80146cc:	f00d fca8 	bl	8022020 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80146d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80146d4:	f103 0008 	add.w	r0, r3, #8
 80146d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80146dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146de:	3338      	adds	r3, #56	@ 0x38
 80146e0:	2210      	movs	r2, #16
 80146e2:	4619      	mov	r1, r3
 80146e4:	f00d fc9c 	bl	8022020 <memcpy>
 80146e8:	e02d      	b.n	8014746 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 80146ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80146f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146f6:	689a      	ldr	r2, [r3, #8]
 80146f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80146fc:	605a      	str	r2, [r3, #4]
 80146fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014702:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014704:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801470a:	3318      	adds	r3, #24
 801470c:	f107 0410 	add.w	r4, r7, #16
 8014710:	6818      	ldr	r0, [r3, #0]
 8014712:	6859      	ldr	r1, [r3, #4]
 8014714:	689a      	ldr	r2, [r3, #8]
 8014716:	68db      	ldr	r3, [r3, #12]
 8014718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801471a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801471e:	f103 0018 	add.w	r0, r3, #24
 8014722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014726:	3308      	adds	r3, #8
 8014728:	2210      	movs	r2, #16
 801472a:	4619      	mov	r1, r3
 801472c:	f00d fc78 	bl	8022020 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014734:	3308      	adds	r3, #8
 8014736:	461d      	mov	r5, r3
 8014738:	f107 0410 	add.w	r4, r7, #16
 801473c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801473e:	6028      	str	r0, [r5, #0]
 8014740:	6069      	str	r1, [r5, #4]
 8014742:	60aa      	str	r2, [r5, #8]
 8014744:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	b29b      	uxth	r3, r3
 801474a:	3b28      	subs	r3, #40	@ 0x28
 801474c:	b29b      	uxth	r3, r3
 801474e:	021b      	lsls	r3, r3, #8
 8014750:	b29a      	uxth	r2, r3
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	3b28      	subs	r3, #40	@ 0x28
 8014756:	0a1b      	lsrs	r3, r3, #8
 8014758:	b29b      	uxth	r3, r3
 801475a:	4313      	orrs	r3, r2
 801475c:	b29a      	uxth	r2, r3
 801475e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014762:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014764:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014768:	781a      	ldrb	r2, [r3, #0]
 801476a:	785b      	ldrb	r3, [r3, #1]
 801476c:	021b      	lsls	r3, r3, #8
 801476e:	4313      	orrs	r3, r2
 8014770:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8014774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014778:	885b      	ldrh	r3, [r3, #2]
 801477a:	b29a      	uxth	r2, r3
 801477c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014780:	801a      	strh	r2, [r3, #0]
 8014782:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014786:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 801478a:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 801478c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801479a:	f103 020e 	add.w	r2, r3, #14
 801479e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80147a2:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80147a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80147a8:	3318      	adds	r3, #24
 80147aa:	f107 0420 	add.w	r4, r7, #32
 80147ae:	6818      	ldr	r0, [r3, #0]
 80147b0:	6859      	ldr	r1, [r3, #4]
 80147b2:	689a      	ldr	r2, [r3, #8]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 80147b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80147bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80147c0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80147c4:	f107 0320 	add.w	r3, r7, #32
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7f6 ffa7 	bl	800b71c <eNDGetCacheEntry>
 80147ce:	4603      	mov	r3, r0
 80147d0:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 80147d4:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d104      	bne.n	80147e6 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 80147dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80147e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80147e4:	e004      	b.n	80147f0 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 80147e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80147ea:	3306      	adds	r3, #6
 80147ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 80147f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80147f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80147f8:	2206      	movs	r2, #6
 80147fa:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80147fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014802:	f00d fc0d 	bl	8022020 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801480c:	33e8      	adds	r3, #232	@ 0xe8
 801480e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014812:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014816:	3306      	adds	r3, #6
 8014818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 801481c:	2206      	movs	r2, #6
 801481e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8014822:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014826:	f00d fbfb 	bl	8022020 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801482a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014830:	2b3b      	cmp	r3, #59	@ 0x3b
 8014832:	d81a      	bhi.n	801486a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801483a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801483e:	e00c      	b.n	801485a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014840:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014844:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014846:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801484a:	4413      	add	r3, r2
 801484c:	2200      	movs	r2, #0
 801484e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014854:	3301      	adds	r3, #1
 8014856:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801485a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801485e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014860:	ddee      	ble.n	8014840 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014866:	223c      	movs	r2, #60	@ 0x3c
 8014868:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801486a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801486e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014870:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014874:	2b00      	cmp	r3, #0
 8014876:	d104      	bne.n	8014882 <prvTCPReturnPacket_IPV6+0x32e>
 8014878:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801487c:	4825      	ldr	r0, [pc, #148]	@ (8014914 <prvTCPReturnPacket_IPV6+0x3c0>)
 801487e:	f7ec ff75 	bl	800176c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014888:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d104      	bne.n	801489c <prvTCPReturnPacket_IPV6+0x348>
 8014892:	f240 1119 	movw	r1, #281	@ 0x119
 8014896:	481f      	ldr	r0, [pc, #124]	@ (8014914 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014898:	f7ec ff68 	bl	800176c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801489c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80148a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80148a6:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 80148a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80148aa:	68db      	ldr	r3, [r3, #12]
 80148ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80148b0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80148b4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80148b6:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 80148b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d122      	bne.n	8014906 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80148c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80148c4:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 80148c8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80148cc:	021b      	lsls	r3, r3, #8
 80148ce:	4313      	orrs	r3, r2
 80148d0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 80148d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80148d8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80148da:	b29a      	uxth	r2, r3
 80148dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80148e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80148e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80148e6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80148ea:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80148ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80148f0:	f103 0008 	add.w	r0, r3, #8
 80148f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80148f8:	3318      	adds	r3, #24
 80148fa:	2210      	movs	r2, #16
 80148fc:	4619      	mov	r1, r3
 80148fe:	f00d fb8f 	bl	8022020 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 8014902:	e000      	b.n	8014906 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8014904:	bf00      	nop
}
 8014906:	bf00      	nop
 8014908:	37a8      	adds	r7, #168	@ 0xa8
 801490a:	46bd      	mov	sp, r7
 801490c:	bdb0      	pop	{r4, r5, r7, pc}
 801490e:	bf00      	nop
 8014910:	0802658c 	.word	0x0802658c
 8014914:	080265b4 	.word	0x080265b4

08014918 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014918:	b590      	push	{r4, r7, lr}
 801491a:	b093      	sub	sp, #76	@ 0x4c
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014920:	2300      	movs	r3, #0
 8014922:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8014924:	2300      	movs	r3, #0
 8014926:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014928:	2301      	movs	r3, #1
 801492a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 801492c:	2300      	movs	r3, #0
 801492e:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014930:	2300      	movs	r3, #0
 8014932:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014934:	2300      	movs	r3, #0
 8014936:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014938:	f107 0310 	add.w	r3, r7, #16
 801493c:	2206      	movs	r2, #6
 801493e:	2100      	movs	r1, #0
 8014940:	4618      	mov	r0, r3
 8014942:	f00d fc7a 	bl	802223a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8014946:	f107 0318 	add.w	r3, r7, #24
 801494a:	2210      	movs	r2, #16
 801494c:	2100      	movs	r1, #0
 801494e:	4618      	mov	r0, r3
 8014950:	f00d fc73 	bl	802223a <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	3354      	adds	r3, #84	@ 0x54
 8014958:	f107 0418 	add.w	r4, r7, #24
 801495c:	6818      	ldr	r0, [r3, #0]
 801495e:	6859      	ldr	r1, [r3, #4]
 8014960:	689a      	ldr	r2, [r3, #8]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8014966:	f107 020c 	add.w	r2, r7, #12
 801496a:	f107 0110 	add.w	r1, r7, #16
 801496e:	f107 0318 	add.w	r3, r7, #24
 8014972:	4618      	mov	r0, r3
 8014974:	f7f6 fed2 	bl	800b71c <eNDGetCacheEntry>
 8014978:	4603      	mov	r3, r0
 801497a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 801497e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	4619      	mov	r1, r3
 8014986:	4881      	ldr	r0, [pc, #516]	@ (8014b8c <prvTCPPrepareConnect_IPV6+0x274>)
 8014988:	f00d f92e 	bl	8021be8 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d002      	beq.n	8014998 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014992:	68fa      	ldr	r2, [r7, #12]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f7f5 f887 	bl	8009aac <uxIPHeaderSizeSocket>
 801499e:	4603      	mov	r3, r0
 80149a0:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80149a2:	33a0      	adds	r3, #160	@ 0xa0
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	4413      	add	r3, r2
 80149a8:	330a      	adds	r3, #10
 80149aa:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 80149ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	d02c      	beq.n	8014a0e <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80149ba:	3301      	adds	r3, #1
 80149bc:	b2da      	uxtb	r2, r3
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d001      	beq.n	80149ce <prvTCPPrepareConnect_IPV6+0xb6>
 80149ca:	4a71      	ldr	r2, [pc, #452]	@ (8014b90 <prvTCPPrepareConnect_IPV6+0x278>)
 80149cc:	e000      	b.n	80149d0 <prvTCPPrepareConnect_IPV6+0xb8>
 80149ce:	4a71      	ldr	r2, [pc, #452]	@ (8014b94 <prvTCPPrepareConnect_IPV6+0x27c>)
 80149d0:	f107 0318 	add.w	r3, r7, #24
 80149d4:	4619      	mov	r1, r3
 80149d6:	4870      	ldr	r0, [pc, #448]	@ (8014b98 <prvTCPPrepareConnect_IPV6+0x280>)
 80149d8:	f00d f906 	bl	8021be8 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d012      	beq.n	8014a08 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 80149e2:	2356      	movs	r3, #86	@ 0x56
 80149e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 80149e6:	2100      	movs	r1, #0
 80149e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80149ea:	f002 f9ed 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 80149ee:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 80149f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d008      	beq.n	8014a08 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149fa:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 80149fc:	f107 0318 	add.w	r3, r7, #24
 8014a00:	4619      	mov	r1, r3
 8014a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014a04:	f7f7 f8f6 	bl	800bbf4 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8014a0c:	e000      	b.n	8014a10 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 8014a0e:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d010      	beq.n	8014a38 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014a28:	f7ec fec0 	bl	80017ac <ulApplicationGetNextSequenceNumber>
 8014a2c:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d101      	bne.n	8014a38 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8014a34:	2300      	movs	r3, #0
 8014a36:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8014a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d05d      	beq.n	8014afa <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	33aa      	adds	r3, #170	@ 0xaa
 8014a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8014a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a46:	330e      	adds	r3, #14
 8014a48:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014a58:	f043 0308 	orr.w	r3, r3, #8
 8014a5c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	33aa      	adds	r3, #170	@ 0xaa
 8014a64:	225a      	movs	r2, #90	@ 0x5a
 8014a66:	2100      	movs	r1, #0
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f00d fbe6 	bl	802223a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a70:	3306      	adds	r3, #6
 8014a72:	461a      	mov	r2, r3
 8014a74:	f107 0310 	add.w	r3, r7, #16
 8014a78:	6818      	ldr	r0, [r3, #0]
 8014a7a:	6010      	str	r0, [r2, #0]
 8014a7c:	889b      	ldrh	r3, [r3, #4]
 8014a7e:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	7a1b      	ldrb	r3, [r3, #8]
 8014a84:	f003 0301 	and.w	r3, r3, #1
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d035      	beq.n	8014afa <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 8014a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a90:	2200      	movs	r2, #0
 8014a92:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8014a96:	731a      	strb	r2, [r3, #12]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	f062 0222 	orn	r2, r2, #34	@ 0x22
 8014a9e:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8014aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aa2:	2260      	movs	r2, #96	@ 0x60
 8014aa4:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8014aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8014aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aae:	2200      	movs	r2, #0
 8014ab0:	709a      	strb	r2, [r3, #2]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8014ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ab8:	2200      	movs	r2, #0
 8014aba:	711a      	strb	r2, [r3, #4]
 8014abc:	2200      	movs	r2, #0
 8014abe:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8014ac2:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8014ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ac6:	2206      	movs	r2, #6
 8014ac8:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8014aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014acc:	2280      	movs	r2, #128	@ 0x80
 8014ace:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8014ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ad2:	f103 0008 	add.w	r0, r3, #8
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	3354      	adds	r3, #84	@ 0x54
 8014ada:	2210      	movs	r2, #16
 8014adc:	4619      	mov	r1, r3
 8014ade:	f00d fa9f 	bl	8022020 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8014ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ae4:	f103 0018 	add.w	r0, r3, #24
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	3328      	adds	r3, #40	@ 0x28
 8014aec:	2210      	movs	r2, #16
 8014aee:	4619      	mov	r1, r3
 8014af0:	f00d fa96 	bl	8022020 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014af8:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d03a      	beq.n	8014b76 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014b00:	68fa      	ldr	r2, [r7, #12]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014b0c:	021b      	lsls	r3, r3, #8
 8014b0e:	b21a      	sxth	r2, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014b16:	0a1b      	lsrs	r3, r3, #8
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	b21b      	sxth	r3, r3
 8014b1c:	4313      	orrs	r3, r2
 8014b1e:	b21b      	sxth	r3, r3
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b24:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014b2a:	021b      	lsls	r3, r3, #8
 8014b2c:	b21a      	sxth	r2, r3
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014b32:	0a1b      	lsrs	r3, r3, #8
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	b21b      	sxth	r3, r3
 8014b38:	4313      	orrs	r3, r2
 8014b3a:	b21b      	sxth	r3, r3
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b40:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2200      	movs	r2, #0
 8014b46:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014b4e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b54:	2250      	movs	r2, #80	@ 0x50
 8014b56:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b5a:	2202      	movs	r2, #2
 8014b5c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f000 f8d0 	bl	8014d04 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7fe fbbf 	bl	80132e8 <prvTCPCreateWindow>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d007      	beq.n	8014b80 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 8014b70:	2300      	movs	r3, #0
 8014b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8014b74:	e004      	b.n	8014b80 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8014b76:	4809      	ldr	r0, [pc, #36]	@ (8014b9c <prvTCPPrepareConnect_IPV6+0x284>)
 8014b78:	f00d f836 	bl	8021be8 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 8014b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	374c      	adds	r7, #76	@ 0x4c
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd90      	pop	{r4, r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	080265f4 	.word	0x080265f4
 8014b90:	0802661c 	.word	0x0802661c
 8014b94:	08026620 	.word	0x08026620
 8014b98:	08026624 	.word	0x08026624
 8014b9c:	08026648 	.word	0x08026648

08014ba0 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b086      	sub	sp, #24
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	460b      	mov	r3, r1
 8014baa:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bb0:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014bb2:	233c      	movs	r3, #60	@ 0x3c
 8014bb4:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014bbc:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	78fa      	ldrb	r2, [r7, #3]
 8014bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	2250      	movs	r2, #80	@ 0x50
 8014bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8014bce:	7bfb      	ldrb	r3, [r7, #15]
 8014bd0:	f003 0302 	and.w	r3, r3, #2
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d02c      	beq.n	8014c32 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014bde:	061a      	lsls	r2, r3, #24
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014be6:	021b      	lsls	r3, r3, #8
 8014be8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014bec:	431a      	orrs	r2, r3
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014bf4:	0a1b      	lsrs	r3, r3, #8
 8014bf6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014bfa:	431a      	orrs	r2, r3
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014c02:	0e1b      	lsrs	r3, r3, #24
 8014c04:	4313      	orrs	r3, r2
 8014c06:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	061a      	lsls	r2, r3, #24
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	021b      	lsls	r3, r3, #8
 8014c16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014c1a:	431a      	orrs	r2, r3
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	0a1b      	lsrs	r3, r3, #8
 8014c20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014c24:	431a      	orrs	r2, r3
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	0e1b      	lsrs	r3, r3, #24
 8014c2a:	431a      	orrs	r2, r3
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8014c32:	2300      	movs	r3, #0
 8014c34:	693a      	ldr	r2, [r7, #16]
 8014c36:	6879      	ldr	r1, [r7, #4]
 8014c38:	2000      	movs	r0, #0
 8014c3a:	f7fe f9f9 	bl	8013030 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3718      	adds	r7, #24
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8014c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c4a:	b08d      	sub	sp, #52	@ 0x34
 8014c4c:	af08      	add	r7, sp, #32
 8014c4e:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d002      	beq.n	8014c64 <prvTCPFlagMeaning+0x1c>
 8014c5e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014c62:	e001      	b.n	8014c68 <prvTCPFlagMeaning+0x20>
 8014c64:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d001      	beq.n	8014c76 <prvTCPFlagMeaning+0x2e>
 8014c72:	2353      	movs	r3, #83	@ 0x53
 8014c74:	e000      	b.n	8014c78 <prvTCPFlagMeaning+0x30>
 8014c76:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8014c78:	68fa      	ldr	r2, [r7, #12]
 8014c7a:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 8014c7e:	2a00      	cmp	r2, #0
 8014c80:	d001      	beq.n	8014c86 <prvTCPFlagMeaning+0x3e>
 8014c82:	2252      	movs	r2, #82	@ 0x52
 8014c84:	e000      	b.n	8014c88 <prvTCPFlagMeaning+0x40>
 8014c86:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8014c88:	68f9      	ldr	r1, [r7, #12]
 8014c8a:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 8014c8e:	2900      	cmp	r1, #0
 8014c90:	d001      	beq.n	8014c96 <prvTCPFlagMeaning+0x4e>
 8014c92:	2150      	movs	r1, #80	@ 0x50
 8014c94:	e000      	b.n	8014c98 <prvTCPFlagMeaning+0x50>
 8014c96:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 8014c9e:	2800      	cmp	r0, #0
 8014ca0:	d001      	beq.n	8014ca6 <prvTCPFlagMeaning+0x5e>
 8014ca2:	2041      	movs	r0, #65	@ 0x41
 8014ca4:	e000      	b.n	8014ca8 <prvTCPFlagMeaning+0x60>
 8014ca6:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8014ca8:	68fc      	ldr	r4, [r7, #12]
 8014caa:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 8014cae:	2c00      	cmp	r4, #0
 8014cb0:	d001      	beq.n	8014cb6 <prvTCPFlagMeaning+0x6e>
 8014cb2:	2455      	movs	r4, #85	@ 0x55
 8014cb4:	e000      	b.n	8014cb8 <prvTCPFlagMeaning+0x70>
 8014cb6:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8014cb8:	68fd      	ldr	r5, [r7, #12]
 8014cba:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 8014cbe:	2d00      	cmp	r5, #0
 8014cc0:	d001      	beq.n	8014cc6 <prvTCPFlagMeaning+0x7e>
 8014cc2:	2545      	movs	r5, #69	@ 0x45
 8014cc4:	e000      	b.n	8014cc8 <prvTCPFlagMeaning+0x80>
 8014cc6:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8014cc8:	68fe      	ldr	r6, [r7, #12]
 8014cca:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 8014cce:	2e00      	cmp	r6, #0
 8014cd0:	d001      	beq.n	8014cd6 <prvTCPFlagMeaning+0x8e>
 8014cd2:	2643      	movs	r6, #67	@ 0x43
 8014cd4:	e000      	b.n	8014cd8 <prvTCPFlagMeaning+0x90>
 8014cd6:	262e      	movs	r6, #46	@ 0x2e
 8014cd8:	9606      	str	r6, [sp, #24]
 8014cda:	9505      	str	r5, [sp, #20]
 8014cdc:	9404      	str	r4, [sp, #16]
 8014cde:	9003      	str	r0, [sp, #12]
 8014ce0:	9102      	str	r1, [sp, #8]
 8014ce2:	9201      	str	r2, [sp, #4]
 8014ce4:	9300      	str	r3, [sp, #0]
 8014ce6:	4663      	mov	r3, ip
 8014ce8:	4a04      	ldr	r2, [pc, #16]	@ (8014cfc <prvTCPFlagMeaning+0xb4>)
 8014cea:	210a      	movs	r1, #10
 8014cec:	4804      	ldr	r0, [pc, #16]	@ (8014d00 <prvTCPFlagMeaning+0xb8>)
 8014cee:	f00d ffa7 	bl	8022c40 <snprintf>
            return retString;
 8014cf2:	4b03      	ldr	r3, [pc, #12]	@ (8014d00 <prvTCPFlagMeaning+0xb8>)
        }
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3714      	adds	r7, #20
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cfc:	08026674 	.word	0x08026674
 8014d00:	20001464 	.word	0x20001464

08014d04 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	7a1b      	ldrb	r3, [r3, #8]
 8014d10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014d14:	b2db      	uxtb	r3, r3
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d002      	beq.n	8014d20 <prvSocketSetMSS+0x1c>
 8014d1a:	2b01      	cmp	r3, #1
 8014d1c:	d004      	beq.n	8014d28 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8014d1e:	e007      	b.n	8014d30 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f000 f809 	bl	8014d38 <prvSocketSetMSS_IPV4>
                    break;
 8014d26:	e003      	b.n	8014d30 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f000 f84b 	bl	8014dc4 <prvSocketSetMSS_IPV6>
                    break;
 8014d2e:	bf00      	nop
        }
    }
 8014d30:	bf00      	nop
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b084      	sub	sp, #16
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014d40:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014d44:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d4a:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d023      	beq.n	8014d9a <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8014d52:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014d56:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d5c:	061a      	lsls	r2, r3, #24
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d62:	021b      	lsls	r3, r3, #8
 8014d64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014d68:	431a      	orrs	r2, r3
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d6e:	0a1b      	lsrs	r3, r3, #8
 8014d70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014d74:	431a      	orrs	r2, r3
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d7a:	0e1b      	lsrs	r3, r3, #24
 8014d7c:	431a      	orrs	r2, r3
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	405a      	eors	r2, r3
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	4013      	ands	r3, r2
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d005      	beq.n	8014d9a <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014d8e:	68f9      	ldr	r1, [r7, #12]
 8014d90:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014d94:	f7f5 fbbe 	bl	800a514 <FreeRTOS_min_uint32>
 8014d98:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014da4:	68f9      	ldr	r1, [r7, #12]
 8014da6:	4806      	ldr	r0, [pc, #24]	@ (8014dc0 <prvSocketSetMSS_IPV4+0x88>)
 8014da8:	f00c ff1e 	bl	8021be8 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	b29a      	uxth	r2, r3
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8014db6:	bf00      	nop
 8014db8:	3710      	adds	r7, #16
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	08026688 	.word	0x08026688

08014dc4 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b090      	sub	sp, #64	@ 0x40
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014dcc:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d103      	bne.n	8014de4 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8014ddc:	481f      	ldr	r0, [pc, #124]	@ (8014e5c <prvSocketSetMSS_IPV6+0x98>)
 8014dde:	f00c ff03 	bl	8021be8 <lUDPLoggingPrintf>

            break;
 8014de2:	e036      	b.n	8014e52 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014de8:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 8014dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d018      	beq.n	8014e22 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8014df0:	2314      	movs	r3, #20
 8014df2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8014df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014df6:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014dfa:	1a9b      	subs	r3, r3, r2
 8014dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	3354      	adds	r3, #84	@ 0x54
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7f8 fdb4 	bl	800d970 <xIPv6_GetIPType>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 8014e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d105      	bne.n	8014e22 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014e18:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014e1c:	f7f5 fb7a 	bl	800a514 <FreeRTOS_min_uint32>
 8014e20:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014e28:	f107 0208 	add.w	r2, r7, #8
 8014e2c:	2328      	movs	r3, #40	@ 0x28
 8014e2e:	200a      	movs	r0, #10
 8014e30:	f7fa f8c0 	bl	800efb4 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014e3a:	f107 0208 	add.w	r2, r7, #8
 8014e3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014e40:	4807      	ldr	r0, [pc, #28]	@ (8014e60 <prvSocketSetMSS_IPV6+0x9c>)
 8014e42:	f00c fed1 	bl	8021be8 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8014e50:	bf00      	nop
 8014e52:	bf00      	nop
 8014e54:	3740      	adds	r7, #64	@ 0x40
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	080266b4 	.word	0x080266b4
 8014e60:	080266e0 	.word	0x080266e0

08014e64 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8014e64:	b480      	push	{r7}
 8014e66:	b085      	sub	sp, #20
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8014e72:	683a      	ldr	r2, [r7, #0]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	1ad3      	subs	r3, r2, r3
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	db01      	blt.n	8014e80 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8014e80:	68fb      	ldr	r3, [r7, #12]
        }
 8014e82:	4618      	mov	r0, r3
 8014e84:	3714      	adds	r7, #20
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr

08014e8e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 8014e8e:	b480      	push	{r7}
 8014e90:	b085      	sub	sp, #20
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
 8014e96:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8014e9c:	683a      	ldr	r2, [r7, #0]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	1ad3      	subs	r3, r2, r3
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	db01      	blt.n	8014eac <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014eac:	68fb      	ldr	r3, [r7, #12]
    }
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3714      	adds	r7, #20
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb8:	4770      	bx	lr

08014eba <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8014eba:	b480      	push	{r7}
 8014ebc:	b085      	sub	sp, #20
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	6078      	str	r0, [r7, #4]
 8014ec2:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	1ad3      	subs	r3, r2, r3
 8014ece:	3b01      	subs	r3, #1
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	db01      	blt.n	8014ed8 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
    }
 8014eda:	4618      	mov	r0, r3
 8014edc:	3714      	adds	r7, #20
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr

08014ee6 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8014ee6:	b480      	push	{r7}
 8014ee8:	b085      	sub	sp, #20
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
 8014eee:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	db01      	blt.n	8014f02 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8014efe:	2301      	movs	r3, #1
 8014f00:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014f02:	68fb      	ldr	r3, [r7, #12]
    }
 8014f04:	4618      	mov	r0, r3
 8014f06:	3714      	adds	r7, #20
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr

08014f10 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b082      	sub	sp, #8
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	3308      	adds	r3, #8
 8014f1e:	461a      	mov	r2, r3
 8014f20:	6839      	ldr	r1, [r7, #0]
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f000 f822 	bl	8014f6c <vListInsertGeneric>
        }
 8014f28:	bf00      	nop
 8014f2a:	3708      	adds	r7, #8
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8014f38:	f7ef fa04 	bl	8004344 <xTaskGetTickCount>
 8014f3c:	4602      	mov	r2, r0
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	601a      	str	r2, [r3, #0]
    }
 8014f42:	bf00      	nop
 8014f44:	3708      	adds	r7, #8
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}

08014f4a <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8014f4a:	b580      	push	{r7, lr}
 8014f4c:	b084      	sub	sp, #16
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8014f52:	f7ef f9f7 	bl	8004344 <xTaskGetTickCount>
 8014f56:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8014f62:	68bb      	ldr	r3, [r7, #8]
    }
 8014f64:	4618      	mov	r0, r3
 8014f66:	3710      	adds	r7, #16
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8014f6c:	b480      	push	{r7}
 8014f6e:	b085      	sub	sp, #20
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	60f8      	str	r0, [r7, #12]
 8014f74:	60b9      	str	r1, [r7, #8]
 8014f76:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	689a      	ldr	r2, [r3, #8]
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	689b      	ldr	r3, [r3, #8]
 8014f8a:	68ba      	ldr	r2, [r7, #8]
 8014f8c:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	68ba      	ldr	r2, [r7, #8]
 8014f92:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	68fa      	ldr	r2, [r7, #12]
 8014f98:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	1c5a      	adds	r2, r3, #1
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	601a      	str	r2, [r3, #0]
        }
 8014fa4:	bf00      	nop
 8014fa6:	3714      	adds	r7, #20
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fae:	4770      	bx	lr

08014fb0 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b082      	sub	sp, #8
 8014fb4:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8014fb6:	4827      	ldr	r0, [pc, #156]	@ (8015054 <prvCreateSectors+0xa4>)
 8014fb8:	f7ed ffde 	bl	8002f78 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8014fbc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8014fc0:	f7f1 f830 	bl	8006024 <pvPortMalloc>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	4a24      	ldr	r2, [pc, #144]	@ (8015058 <prvCreateSectors+0xa8>)
 8014fc8:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8014fca:	4b23      	ldr	r3, [pc, #140]	@ (8015058 <prvCreateSectors+0xa8>)
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d107      	bne.n	8014fe2 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8014fd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014fd6:	4821      	ldr	r0, [pc, #132]	@ (801505c <prvCreateSectors+0xac>)
 8014fd8:	f00c fe06 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8014fdc:	2300      	movs	r3, #0
 8014fde:	603b      	str	r3, [r7, #0]
 8014fe0:	e032      	b.n	8015048 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8014fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8015058 <prvCreateSectors+0xa8>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014fea:	2100      	movs	r1, #0
 8014fec:	4618      	mov	r0, r3
 8014fee:	f00d f924 	bl	802223a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	607b      	str	r3, [r7, #4]
 8014ff6:	e022      	b.n	801503e <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014ff8:	4b17      	ldr	r3, [pc, #92]	@ (8015058 <prvCreateSectors+0xa8>)
 8014ffa:	6819      	ldr	r1, [r3, #0]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	019a      	lsls	r2, r3, #6
 8015000:	4b15      	ldr	r3, [pc, #84]	@ (8015058 <prvCreateSectors+0xa8>)
 8015002:	6818      	ldr	r0, [r3, #0]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	019b      	lsls	r3, r3, #6
 8015008:	4403      	add	r3, r0
 801500a:	440a      	add	r2, r1
 801500c:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 801500e:	4b12      	ldr	r3, [pc, #72]	@ (8015058 <prvCreateSectors+0xa8>)
 8015010:	6819      	ldr	r1, [r3, #0]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	019a      	lsls	r2, r3, #6
 8015016:	4b10      	ldr	r3, [pc, #64]	@ (8015058 <prvCreateSectors+0xa8>)
 8015018:	6818      	ldr	r0, [r3, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	019b      	lsls	r3, r3, #6
 801501e:	4403      	add	r3, r0
 8015020:	440a      	add	r2, r1
 8015022:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015024:	4b0c      	ldr	r3, [pc, #48]	@ (8015058 <prvCreateSectors+0xa8>)
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	019b      	lsls	r3, r3, #6
 801502c:	4413      	add	r3, r2
 801502e:	332c      	adds	r3, #44	@ 0x2c
 8015030:	4619      	mov	r1, r3
 8015032:	4808      	ldr	r0, [pc, #32]	@ (8015054 <prvCreateSectors+0xa4>)
 8015034:	f7ff ff6c 	bl	8014f10 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	3301      	adds	r3, #1
 801503c:	607b      	str	r3, [r7, #4]
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2b3f      	cmp	r3, #63	@ 0x3f
 8015042:	ddd9      	ble.n	8014ff8 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8015044:	2301      	movs	r3, #1
 8015046:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8015048:	683b      	ldr	r3, [r7, #0]
        }
 801504a:	4618      	mov	r0, r3
 801504c:	3708      	adds	r7, #8
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
 8015052:	bf00      	nop
 8015054:	20001474 	.word	0x20001474
 8015058:	20001470 	.word	0x20001470
 801505c:	08026710 	.word	0x08026710

08015060 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8015060:	b480      	push	{r7}
 8015062:	b087      	sub	sp, #28
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 801506a:	2300      	movs	r3, #0
 801506c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	33ac      	adds	r3, #172	@ 0xac
 8015072:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	617b      	str	r3, [r7, #20]
 801507a:	e00d      	b.n	8015098 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	68db      	ldr	r3, [r3, #12]
 8015080:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	683a      	ldr	r2, [r7, #0]
 8015088:	429a      	cmp	r2, r3
 801508a:	d102      	bne.n	8015092 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	613b      	str	r3, [r7, #16]
                    break;
 8015090:	e006      	b.n	80150a0 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8015098:	697a      	ldr	r2, [r7, #20]
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	429a      	cmp	r2, r3
 801509e:	d1ed      	bne.n	801507c <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 80150a0:	693b      	ldr	r3, [r7, #16]
        }
 80150a2:	4618      	mov	r0, r3
 80150a4:	371c      	adds	r7, #28
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
	...

080150b0 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b088      	sub	sp, #32
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	607a      	str	r2, [r7, #4]
 80150bc:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 80150be:	4b33      	ldr	r3, [pc, #204]	@ (801518c <xTCPWindowNew+0xdc>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d10c      	bne.n	80150e0 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d001      	beq.n	80150d0 <xTCPWindowNew+0x20>
 80150cc:	2352      	movs	r3, #82	@ 0x52
 80150ce:	e000      	b.n	80150d2 <xTCPWindowNew+0x22>
 80150d0:	2354      	movs	r3, #84	@ 0x54
 80150d2:	4619      	mov	r1, r3
 80150d4:	482e      	ldr	r0, [pc, #184]	@ (8015190 <xTCPWindowNew+0xe0>)
 80150d6:	f00c fd87 	bl	8021be8 <lUDPLoggingPrintf>
                pxSegment = NULL;
 80150da:	2300      	movs	r3, #0
 80150dc:	61fb      	str	r3, [r7, #28]
 80150de:	e04f      	b.n	8015180 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 80150e0:	4b2a      	ldr	r3, [pc, #168]	@ (801518c <xTCPWindowNew+0xdc>)
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 80150e6:	69bb      	ldr	r3, [r7, #24]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 80150ec:	69bb      	ldr	r3, [r7, #24]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d104      	bne.n	80150fc <xTCPWindowNew+0x4c>
 80150f2:	f240 2125 	movw	r1, #549	@ 0x225
 80150f6:	4827      	ldr	r0, [pc, #156]	@ (8015194 <xTCPWindowNew+0xe4>)
 80150f8:	f7ec fb38 	bl	800176c <vAssertCalled>
                configASSERT( pxSegment != NULL );
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d104      	bne.n	801510c <xTCPWindowNew+0x5c>
 8015102:	f240 2126 	movw	r1, #550	@ 0x226
 8015106:	4823      	ldr	r0, [pc, #140]	@ (8015194 <xTCPWindowNew+0xe4>)
 8015108:	f7ec fb30 	bl	800176c <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 801510c:	69b8      	ldr	r0, [r7, #24]
 801510e:	f7ed ffbd 	bl	800308c <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d006      	beq.n	8015126 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	33a4      	adds	r3, #164	@ 0xa4
 801511c:	69b9      	ldr	r1, [r7, #24]
 801511e:	4618      	mov	r0, r3
 8015120:	f7ff fef6 	bl	8014f10 <vListInsertFifo>
 8015124:	e005      	b.n	8015132 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	3390      	adds	r3, #144	@ 0x90
 801512a:	69b9      	ldr	r1, [r7, #24]
 801512c:	4618      	mov	r0, r3
 801512e:	f7ff feef 	bl	8014f10 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015132:	69fb      	ldr	r3, [r7, #28]
 8015134:	3310      	adds	r3, #16
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff fefa 	bl	8014f30 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 801513c:	69fb      	ldr	r3, [r7, #28]
 801513e:	2200      	movs	r2, #0
 8015140:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d001      	beq.n	801514c <xTCPWindowNew+0x9c>
 8015148:	2101      	movs	r1, #1
 801514a:	e000      	b.n	801514e <xTCPWindowNew+0x9e>
 801514c:	2100      	movs	r1, #0
 801514e:	69fa      	ldr	r2, [r7, #28]
 8015150:	7d93      	ldrb	r3, [r2, #22]
 8015152:	f361 0382 	bfi	r3, r1, #2, #1
 8015156:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 801515e:	69fb      	ldr	r3, [r7, #28]
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	68ba      	ldr	r2, [r7, #8]
 8015168:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 801516a:	4b08      	ldr	r3, [pc, #32]	@ (801518c <xTCPWindowNew+0xdc>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8015170:	4b09      	ldr	r3, [pc, #36]	@ (8015198 <xTCPWindowNew+0xe8>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	697a      	ldr	r2, [r7, #20]
 8015176:	429a      	cmp	r2, r3
 8015178:	d202      	bcs.n	8015180 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 801517a:	4a07      	ldr	r2, [pc, #28]	@ (8015198 <xTCPWindowNew+0xe8>)
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8015180:	69fb      	ldr	r3, [r7, #28]
        }
 8015182:	4618      	mov	r0, r3
 8015184:	3720      	adds	r7, #32
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	20001474 	.word	0x20001474
 8015190:	08026734 	.word	0x08026734
 8015194:	08026764 	.word	0x08026764
 8015198:	2000001c 	.word	0x2000001c

0801519c <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d002      	beq.n	80151b4 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 80151ae:	2300      	movs	r3, #0
 80151b0:	60fb      	str	r3, [r7, #12]
 80151b2:	e01e      	b.n	80151f2 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	691b      	ldr	r3, [r3, #16]
 80151b8:	1c5a      	adds	r2, r3, #1
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	699b      	ldr	r3, [r3, #24]
 80151be:	4619      	mov	r1, r3
 80151c0:	4610      	mov	r0, r2
 80151c2:	f7ff fe90 	bl	8014ee6 <xSequenceGreaterThanOrEqual>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d002      	beq.n	80151d2 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 80151cc:	2301      	movs	r3, #1
 80151ce:	60fb      	str	r3, [r7, #12]
 80151d0:	e00f      	b.n	80151f2 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	691a      	ldr	r2, [r3, #16]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	68db      	ldr	r3, [r3, #12]
 80151da:	1ad1      	subs	r1, r2, r3
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	699a      	ldr	r2, [r3, #24]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	461a      	mov	r2, r3
 80151e8:	4804      	ldr	r0, [pc, #16]	@ (80151fc <xTCPWindowRxEmpty+0x60>)
 80151ea:	f00c fcfd 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 80151ee:	2300      	movs	r3, #0
 80151f0:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 80151f2:	68fb      	ldr	r3, [r7, #12]
        }
 80151f4:	4618      	mov	r0, r3
 80151f6:	3710      	adds	r7, #16
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	08026794 	.word	0x08026794

08015200 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d102      	bne.n	8015216 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015210:	2300      	movs	r3, #0
 8015212:	60fb      	str	r3, [r7, #12]
 8015214:	e008      	b.n	8015228 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	68db      	ldr	r3, [r3, #12]
 801521a:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015222:	68b8      	ldr	r0, [r7, #8]
 8015224:	f7ed ff32 	bl	800308c <uxListRemove>
            }

            return pxSegment;
 8015228:	68fb      	ldr	r3, [r7, #12]
        }
 801522a:	4618      	mov	r0, r3
 801522c:	3710      	adds	r7, #16
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}

08015232 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015232:	b480      	push	{r7}
 8015234:	b085      	sub	sp, #20
 8015236:	af00      	add	r7, sp, #0
 8015238:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d102      	bne.n	8015248 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8015242:	2300      	movs	r3, #0
 8015244:	60fb      	str	r3, [r7, #12]
 8015246:	e005      	b.n	8015254 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015254:	68fb      	ldr	r3, [r7, #12]
        }
 8015256:	4618      	mov	r0, r3
 8015258:	3714      	adds	r7, #20
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr
	...

08015264 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015270:	2b00      	cmp	r3, #0
 8015272:	d004      	beq.n	801527e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	3318      	adds	r3, #24
 8015278:	4618      	mov	r0, r3
 801527a:	f7ed ff07 	bl	800308c <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2200      	movs	r2, #0
 8015282:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2200      	movs	r2, #0
 8015288:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2200      	movs	r2, #0
 801528e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015294:	2b00      	cmp	r3, #0
 8015296:	d004      	beq.n	80152a2 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	332c      	adds	r3, #44	@ 0x2c
 801529c:	4618      	mov	r0, r3
 801529e:	f7ed fef5 	bl	800308c <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	332c      	adds	r3, #44	@ 0x2c
 80152a6:	4619      	mov	r1, r3
 80152a8:	4803      	ldr	r0, [pc, #12]	@ (80152b8 <vTCPWindowFree+0x54>)
 80152aa:	f7ff fe31 	bl	8014f10 <vListInsertFifo>
        }
 80152ae:	bf00      	nop
 80152b0:	3708      	adds	r7, #8
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	20001474 	.word	0x20001474

080152bc <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 80152bc:	b580      	push	{r7, lr}
 80152be:	b086      	sub	sp, #24
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 80152c4:	2300      	movs	r3, #0
 80152c6:	613b      	str	r3, [r7, #16]
 80152c8:	e01d      	b.n	8015306 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d003      	beq.n	80152d8 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	33a4      	adds	r3, #164	@ 0xa4
 80152d4:	617b      	str	r3, [r7, #20]
 80152d6:	e002      	b.n	80152de <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	3390      	adds	r3, #144	@ 0x90
 80152dc:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	689b      	ldr	r3, [r3, #8]
 80152e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152e6:	d10b      	bne.n	8015300 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80152e8:	e006      	b.n	80152f8 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	68db      	ldr	r3, [r3, #12]
 80152ee:	68db      	ldr	r3, [r3, #12]
 80152f0:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 80152f2:	68f8      	ldr	r0, [r7, #12]
 80152f4:	f7ff ffb6 	bl	8015264 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d1f4      	bne.n	80152ea <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8015300:	693b      	ldr	r3, [r7, #16]
 8015302:	3301      	adds	r3, #1
 8015304:	613b      	str	r3, [r7, #16]
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	2b01      	cmp	r3, #1
 801530a:	ddde      	ble.n	80152ca <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 801530c:	bf00      	nop
 801530e:	bf00      	nop
 8015310:	3718      	adds	r7, #24
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
	...

08015318 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
 8015324:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8015326:	2301      	movs	r3, #1
 8015328:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 801532a:	4b1d      	ldr	r3, [pc, #116]	@ (80153a0 <xTCPWindowCreate+0x88>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d102      	bne.n	8015338 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015332:	f7ff fe3d 	bl	8014fb0 <prvCreateSectors>
 8015336:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	3390      	adds	r3, #144	@ 0x90
 801533c:	4618      	mov	r0, r3
 801533e:	f7ed fe1b 	bl	8002f78 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	33a4      	adds	r3, #164	@ 0xa4
 8015346:	4618      	mov	r0, r3
 8015348:	f7ed fe16 	bl	8002f78 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	3340      	adds	r3, #64	@ 0x40
 8015350:	4618      	mov	r0, r3
 8015352:	f7ed fe11 	bl	8002f78 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	3354      	adds	r3, #84	@ 0x54
 801535a:	4618      	mov	r0, r3
 801535c:	f7ed fe0c 	bl	8002f78 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	3368      	adds	r3, #104	@ 0x68
 8015364:	4618      	mov	r0, r3
 8015366:	f7ed fe07 	bl	8002f78 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 801536a:	4b0e      	ldr	r3, [pc, #56]	@ (80153a4 <xTCPWindowCreate+0x8c>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d004      	beq.n	801537c <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	68b9      	ldr	r1, [r7, #8]
 8015376:	480c      	ldr	r0, [pc, #48]	@ (80153a8 <xTCPWindowCreate+0x90>)
 8015378:	f00c fc36 	bl	8021be8 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	68ba      	ldr	r2, [r7, #8]
 8015380:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	687a      	ldr	r2, [r7, #4]
 8015386:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801538a:	6a3a      	ldr	r2, [r7, #32]
 801538c:	6839      	ldr	r1, [r7, #0]
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f000 f80c 	bl	80153ac <vTCPWindowInit>

        return xReturn;
 8015394:	697b      	ldr	r3, [r7, #20]
    }
 8015396:	4618      	mov	r0, r3
 8015398:	3718      	adds	r7, #24
 801539a:	46bd      	mov	sp, r7
 801539c:	bd80      	pop	{r7, pc}
 801539e:	bf00      	nop
 80153a0:	20001470 	.word	0x20001470
 80153a4:	20001488 	.word	0x20001488
 80153a8:	080267c4 	.word	0x080267c4

080153ac <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 80153ac:	b480      	push	{r7}
 80153ae:	b087      	sub	sp, #28
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	607a      	str	r2, [r7, #4]
 80153b8:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 80153ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80153be:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2200      	movs	r2, #0
 80153c4:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 80153c6:	68fa      	ldr	r2, [r7, #12]
 80153c8:	7813      	ldrb	r3, [r2, #0]
 80153ca:	f043 0301 	orr.w	r3, r3, #1
 80153ce:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d024      	beq.n	8015420 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d004      	beq.n	80153ea <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80153f0:	461a      	mov	r2, r3
 80153f2:	683b      	ldr	r3, [r7, #0]
 80153f4:	4293      	cmp	r3, r2
 80153f6:	d304      	bcc.n	8015402 <vTCPWindowInit+0x56>
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d10e      	bne.n	8015420 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	685a      	ldr	r2, [r3, #4]
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	fbb2 f3f3 	udiv	r3, r2, r3
 801540c:	683a      	ldr	r2, [r7, #0]
 801540e:	fb03 f202 	mul.w	r2, r3, r2
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	b29a      	uxth	r2, r3
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	697a      	ldr	r2, [r7, #20]
 8015424:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	68ba      	ldr	r2, [r7, #8]
 801542a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	68ba      	ldr	r2, [r7, #8]
 8015430:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	68ba      	ldr	r2, [r7, #8]
 8015436:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	687a      	ldr	r2, [r7, #4]
 8015448:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	687a      	ldr	r2, [r7, #4]
 801544e:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8015456:	bf00      	nop
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
	...

08015464 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8015464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015466:	b08f      	sub	sp, #60	@ 0x3c
 8015468:	af04      	add	r7, sp, #16
 801546a:	60f8      	str	r0, [r7, #12]
 801546c:	60b9      	str	r1, [r7, #8]
 801546e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8015470:	2300      	movs	r3, #0
 8015472:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015474:	68ba      	ldr	r2, [r7, #8]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	4413      	add	r3, r2
 801547a:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	33ac      	adds	r3, #172	@ 0xac
 8015480:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	623b      	str	r3, [r7, #32]
 8015488:	e027      	b.n	80154da <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801548a:	6a3b      	ldr	r3, [r7, #32]
 801548c:	68db      	ldr	r3, [r3, #12]
 801548e:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	68b9      	ldr	r1, [r7, #8]
 8015496:	4618      	mov	r0, r3
 8015498:	f7ff fd25 	bl	8014ee6 <xSequenceGreaterThanOrEqual>
 801549c:	4603      	mov	r3, r0
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d018      	beq.n	80154d4 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	69f9      	ldr	r1, [r7, #28]
 80154a8:	4618      	mov	r0, r3
 80154aa:	f7ff fcf0 	bl	8014e8e <xSequenceLessThan>
 80154ae:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d00f      	beq.n	80154d4 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 80154b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00a      	beq.n	80154d0 <xTCPWindowRxConfirm+0x6c>
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	4619      	mov	r1, r3
 80154c4:	4610      	mov	r0, r2
 80154c6:	f7ff fce2 	bl	8014e8e <xSequenceLessThan>
 80154ca:	4603      	mov	r3, r0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d001      	beq.n	80154d4 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80154d4:	6a3b      	ldr	r3, [r7, #32]
 80154d6:	685b      	ldr	r3, [r3, #4]
 80154d8:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80154da:	6a3a      	ldr	r2, [r7, #32]
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	429a      	cmp	r2, r3
 80154e0:	d1d3      	bne.n	801548a <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 80154e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d030      	beq.n	801554a <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80154e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ea:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80154ec:	68ba      	ldr	r2, [r7, #8]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d104      	bne.n	80154fc <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80154f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154f4:	689a      	ldr	r2, [r3, #8]
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d026      	beq.n	801554a <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015502:	461e      	mov	r6, r3
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	68db      	ldr	r3, [r3, #12]
 8015508:	68ba      	ldr	r2, [r7, #8]
 801550a:	1ad5      	subs	r5, r2, r3
 801550c:	68ba      	ldr	r2, [r7, #8]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	441a      	add	r2, r3
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	68db      	ldr	r3, [r3, #12]
 8015516:	1ad3      	subs	r3, r2, r3
 8015518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801551a:	6811      	ldr	r1, [r2, #0]
 801551c:	68fa      	ldr	r2, [r7, #12]
 801551e:	68d2      	ldr	r2, [r2, #12]
 8015520:	1a8a      	subs	r2, r1, r2
 8015522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015524:	6889      	ldr	r1, [r1, #8]
 8015526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015528:	6800      	ldr	r0, [r0, #0]
 801552a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 801552c:	68a4      	ldr	r4, [r4, #8]
 801552e:	4404      	add	r4, r0
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	68c0      	ldr	r0, [r0, #12]
 8015534:	1a20      	subs	r0, r4, r0
 8015536:	9003      	str	r0, [sp, #12]
 8015538:	9102      	str	r1, [sp, #8]
 801553a:	9201      	str	r2, [sp, #4]
 801553c:	9300      	str	r3, [sp, #0]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	462a      	mov	r2, r5
 8015542:	4631      	mov	r1, r6
 8015544:	4803      	ldr	r0, [pc, #12]	@ (8015554 <xTCPWindowRxConfirm+0xf0>)
 8015546:	f00c fb4f 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 801554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801554c:	4618      	mov	r0, r3
 801554e:	372c      	adds	r7, #44	@ 0x2c
 8015550:	46bd      	mov	sp, r7
 8015552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015554:	080267f4 	.word	0x080267f4

08015558 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8015558:	b5b0      	push	{r4, r5, r7, lr}
 801555a:	b08a      	sub	sp, #40	@ 0x28
 801555c:	af04      	add	r7, sp, #16
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	691b      	ldr	r3, [r3, #16]
 8015566:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8015568:	693a      	ldr	r2, [r7, #16]
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	4413      	add	r3, r2
 801556e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015576:	2b00      	cmp	r3, #0
 8015578:	d04e      	beq.n	8015618 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801557e:	683a      	ldr	r2, [r7, #0]
 8015580:	6939      	ldr	r1, [r7, #16]
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	f7ff ff6e 	bl	8015464 <xTCPWindowRxConfirm>
 8015588:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d002      	beq.n	8015596 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8015590:	68b8      	ldr	r0, [r7, #8]
 8015592:	f7ff fe67 	bl	8015264 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d1f0      	bne.n	801557e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801559c:	6979      	ldr	r1, [r7, #20]
 801559e:	6878      	ldr	r0, [r7, #4]
 80155a0:	f7ff fd5e 	bl	8015060 <xTCPWindowRxFind>
 80155a4:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d009      	beq.n	80155c0 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	689b      	ldr	r3, [r3, #8]
 80155b0:	461a      	mov	r2, r3
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	4413      	add	r3, r2
 80155b6:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 80155b8:	68b8      	ldr	r0, [r7, #8]
 80155ba:	f7ff fe53 	bl	8015264 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 80155be:	e7ed      	b.n	801559c <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 80155c0:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 80155c2:	68fa      	ldr	r2, [r7, #12]
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d026      	beq.n	8015618 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 80155ca:	697a      	ldr	r2, [r7, #20]
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	1ad2      	subs	r2, r2, r3
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 80155d4:	4b14      	ldr	r3, [pc, #80]	@ (8015628 <prvTCPWindowRx_ExpectedRX+0xd0>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	dd1d      	ble.n	8015618 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80155e2:	461c      	mov	r4, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80155ea:	461d      	mov	r5, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	693a      	ldr	r2, [r7, #16]
 80155f2:	1ad0      	subs	r0, r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	68d2      	ldr	r2, [r2, #12]
 80155fc:	68f9      	ldr	r1, [r7, #12]
 80155fe:	1a8a      	subs	r2, r1, r2
 8015600:	6879      	ldr	r1, [r7, #4]
 8015602:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8015606:	9102      	str	r1, [sp, #8]
 8015608:	9201      	str	r2, [sp, #4]
 801560a:	9300      	str	r3, [sp, #0]
 801560c:	4603      	mov	r3, r0
 801560e:	462a      	mov	r2, r5
 8015610:	4621      	mov	r1, r4
 8015612:	4806      	ldr	r0, [pc, #24]	@ (801562c <prvTCPWindowRx_ExpectedRX+0xd4>)
 8015614:	f00c fae8 	bl	8021be8 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	697a      	ldr	r2, [r7, #20]
 801561c:	611a      	str	r2, [r3, #16]
        }
 801561e:	bf00      	nop
 8015620:	3718      	adds	r7, #24
 8015622:	46bd      	mov	sp, r7
 8015624:	bdb0      	pop	{r4, r5, r7, pc}
 8015626:	bf00      	nop
 8015628:	20001488 	.word	0x20001488
 801562c:	08026834 	.word	0x08026834

08015630 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8015630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015632:	b08f      	sub	sp, #60	@ 0x3c
 8015634:	af04      	add	r7, sp, #16
 8015636:	60f8      	str	r0, [r7, #12]
 8015638:	60b9      	str	r1, [r7, #8]
 801563a:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 801563c:	f04f 33ff 	mov.w	r3, #4294967295
 8015640:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8015642:	68ba      	ldr	r2, [r7, #8]
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	4413      	add	r3, r2
 8015648:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	691b      	ldr	r3, [r3, #16]
 801564e:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8015650:	6a39      	ldr	r1, [r7, #32]
 8015652:	68f8      	ldr	r0, [r7, #12]
 8015654:	f7ff fd04 	bl	8015060 <xTCPWindowRxFind>
 8015658:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801565a:	69bb      	ldr	r3, [r7, #24]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d006      	beq.n	801566e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8015660:	69bb      	ldr	r3, [r7, #24]
 8015662:	689b      	ldr	r3, [r3, #8]
 8015664:	461a      	mov	r2, r3
 8015666:	6a3b      	ldr	r3, [r7, #32]
 8015668:	4413      	add	r3, r2
 801566a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801566c:	e7f0      	b.n	8015650 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801566e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8015670:	4b45      	ldr	r3, [pc, #276]	@ (8015788 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	2b00      	cmp	r3, #0
 8015676:	dd20      	ble.n	80156ba <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801567e:	461d      	mov	r5, r3
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015686:	461e      	mov	r6, r3
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	68ba      	ldr	r2, [r7, #8]
 801568e:	1ad0      	subs	r0, r2, r3
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	69fa      	ldr	r2, [r7, #28]
 8015696:	1ad3      	subs	r3, r2, r3
 8015698:	68b9      	ldr	r1, [r7, #8]
 801569a:	69fa      	ldr	r2, [r7, #28]
 801569c:	1a8a      	subs	r2, r1, r2
 801569e:	4614      	mov	r4, r2
 80156a0:	68fa      	ldr	r2, [r7, #12]
 80156a2:	68d2      	ldr	r2, [r2, #12]
 80156a4:	6a39      	ldr	r1, [r7, #32]
 80156a6:	1a8a      	subs	r2, r1, r2
 80156a8:	9202      	str	r2, [sp, #8]
 80156aa:	9401      	str	r4, [sp, #4]
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	4603      	mov	r3, r0
 80156b0:	4632      	mov	r2, r6
 80156b2:	4629      	mov	r1, r5
 80156b4:	4835      	ldr	r0, [pc, #212]	@ (801578c <prvTCPWindowRx_UnexpectedRX+0x15c>)
 80156b6:	f00c fa97 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	4a34      	ldr	r2, [pc, #208]	@ (8015790 <prvTCPWindowRx_UnexpectedRX+0x160>)
 80156be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	061a      	lsls	r2, r3, #24
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	021b      	lsls	r3, r3, #8
 80156ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80156ce:	431a      	orrs	r2, r3
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	0a1b      	lsrs	r3, r3, #8
 80156d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80156d8:	431a      	orrs	r2, r3
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	0e1b      	lsrs	r3, r3, #24
 80156de:	431a      	orrs	r2, r3
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80156e6:	6a3b      	ldr	r3, [r7, #32]
 80156e8:	061a      	lsls	r2, r3, #24
 80156ea:	6a3b      	ldr	r3, [r7, #32]
 80156ec:	021b      	lsls	r3, r3, #8
 80156ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80156f2:	431a      	orrs	r2, r3
 80156f4:	6a3b      	ldr	r3, [r7, #32]
 80156f6:	0a1b      	lsrs	r3, r3, #8
 80156f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80156fc:	431a      	orrs	r2, r3
 80156fe:	6a3b      	ldr	r3, [r7, #32]
 8015700:	0e1b      	lsrs	r3, r3, #24
 8015702:	431a      	orrs	r2, r3
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	220c      	movs	r2, #12
 801570e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8015712:	68b9      	ldr	r1, [r7, #8]
 8015714:	68f8      	ldr	r0, [r7, #12]
 8015716:	f7ff fca3 	bl	8015060 <xTCPWindowRxFind>
 801571a:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 801571c:	69bb      	ldr	r3, [r7, #24]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d12d      	bne.n	801577e <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	2301      	movs	r3, #1
 8015726:	68b9      	ldr	r1, [r7, #8]
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f7ff fcc1 	bl	80150b0 <xTCPWindowNew>
 801572e:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8015730:	69bb      	ldr	r3, [r7, #24]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d104      	bne.n	8015740 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2200      	movs	r2, #0
 801573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801573e:	e01e      	b.n	801577e <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 8015740:	4b11      	ldr	r3, [pc, #68]	@ (8015788 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d014      	beq.n	8015772 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801574e:	4619      	mov	r1, r3
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015756:	4618      	mov	r0, r3
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	68ba      	ldr	r2, [r7, #8]
 801575e:	1ad2      	subs	r2, r2, r3
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	4613      	mov	r3, r2
 801576a:	4602      	mov	r2, r0
 801576c:	4809      	ldr	r0, [pc, #36]	@ (8015794 <prvTCPWindowRx_UnexpectedRX+0x164>)
 801576e:	f00c fa3b 	bl	8021be8 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8015772:	68ba      	ldr	r2, [r7, #8]
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	1ad3      	subs	r3, r2, r3
 8015778:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 801577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015780:	4618      	mov	r0, r3
 8015782:	372c      	adds	r7, #44	@ 0x2c
 8015784:	46bd      	mov	sp, r7
 8015786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015788:	20001488 	.word	0x20001488
 801578c:	08026878 	.word	0x08026878
 8015790:	0a050101 	.word	0x0a050101
 8015794:	080268b8 	.word	0x080268b8

08015798 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8015798:	b580      	push	{r7, lr}
 801579a:	b08c      	sub	sp, #48	@ 0x30
 801579c:	af00      	add	r7, sp, #0
 801579e:	60f8      	str	r0, [r7, #12]
 80157a0:	60b9      	str	r1, [r7, #8]
 80157a2:	607a      	str	r2, [r7, #4]
 80157a4:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 80157a6:	f04f 33ff 	mov.w	r3, #4294967295
 80157aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 80157b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b6:	2200      	movs	r2, #0
 80157b8:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	691b      	ldr	r3, [r3, #16]
 80157be:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 80157c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80157c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c4:	4413      	add	r3, r2
 80157c6:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 80157c8:	69fa      	ldr	r2, [r7, #28]
 80157ca:	6a3b      	ldr	r3, [r7, #32]
 80157cc:	1ad3      	subs	r3, r2, r3
 80157ce:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 80157d0:	69bb      	ldr	r3, [r7, #24]
 80157d2:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 80157d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80157d6:	6a3b      	ldr	r3, [r7, #32]
 80157d8:	1ad3      	subs	r3, r2, r3
 80157da:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 80157dc:	69bb      	ldr	r3, [r7, #24]
 80157de:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	da18      	bge.n	8015818 <lTCPWindowRxCheck+0x80>
 80157e6:	697b      	ldr	r3, [r7, #20]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	dd15      	ble.n	8015818 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80157f2:	1ad2      	subs	r2, r2, r3
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80157f8:	4824      	ldr	r0, [pc, #144]	@ (801588c <lTCPWindowRxCheck+0xf4>)
 80157fa:	f00c f9f5 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 80157fe:	693b      	ldr	r3, [r7, #16]
 8015800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015802:	1ad3      	subs	r3, r2, r3
 8015804:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801580a:	4413      	add	r3, r2
 801580c:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	425b      	negs	r3, r3
 8015812:	461a      	mov	r2, r3
 8015814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015816:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	2200      	movs	r2, #0
 801581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	2200      	movs	r2, #0
 8015824:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8015826:	6a3a      	ldr	r2, [r7, #32]
 8015828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801582a:	429a      	cmp	r2, r3
 801582c:	d110      	bne.n	8015850 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 801582e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	429a      	cmp	r2, r3
 8015834:	d905      	bls.n	8015842 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8015836:	683a      	ldr	r2, [r7, #0]
 8015838:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801583a:	4815      	ldr	r0, [pc, #84]	@ (8015890 <lTCPWindowRxCheck+0xf8>)
 801583c:	f00c f9d4 	bl	8021be8 <lUDPLoggingPrintf>
 8015840:	e01f      	b.n	8015882 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8015842:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	f7ff fe87 	bl	8015558 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 801584a:	2300      	movs	r3, #0
 801584c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801584e:	e018      	b.n	8015882 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8015850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015852:	3301      	adds	r3, #1
 8015854:	6a3a      	ldr	r2, [r7, #32]
 8015856:	429a      	cmp	r2, r3
 8015858:	d013      	beq.n	8015882 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	2b00      	cmp	r3, #0
 801585e:	dd10      	ble.n	8015882 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	697a      	ldr	r2, [r7, #20]
 8015864:	429a      	cmp	r2, r3
 8015866:	dd06      	ble.n	8015876 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801586c:	6979      	ldr	r1, [r7, #20]
 801586e:	4809      	ldr	r0, [pc, #36]	@ (8015894 <lTCPWindowRxCheck+0xfc>)
 8015870:	f00c f9ba 	bl	8021be8 <lUDPLoggingPrintf>
 8015874:	e005      	b.n	8015882 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8015876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f7ff fed8 	bl	8015630 <prvTCPWindowRx_UnexpectedRX>
 8015880:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8015882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015884:	4618      	mov	r0, r3
 8015886:	3730      	adds	r7, #48	@ 0x30
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}
 801588c:	080268e8 	.word	0x080268e8
 8015890:	08026928 	.word	0x08026928
 8015894:	08026968 	.word	0x08026968

08015898 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8015898:	b480      	push	{r7}
 801589a:	b087      	sub	sp, #28
 801589c:	af00      	add	r7, sp, #0
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 80158a4:	68fa      	ldr	r2, [r7, #12]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	4413      	add	r3, r2
 80158aa:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 80158ac:	697a      	ldr	r2, [r7, #20]
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	429a      	cmp	r2, r3
 80158b2:	db03      	blt.n	80158bc <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 80158b4:	697a      	ldr	r2, [r7, #20]
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	1ad3      	subs	r3, r2, r3
 80158ba:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 80158bc:	697b      	ldr	r3, [r7, #20]
        }
 80158be:	4618      	mov	r0, r3
 80158c0:	371c      	adds	r7, #28
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr
	...

080158cc <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b088      	sub	sp, #32
 80158d0:	af02      	add	r7, sp, #8
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	685a      	ldr	r2, [r3, #4]
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	689b      	ldr	r3, [r3, #8]
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	4619      	mov	r1, r3
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f7f4 fe05 	bl	800a4f4 <FreeRTOS_min_int32>
 80158ea:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 80158ec:	68bb      	ldr	r3, [r7, #8]
 80158ee:	689a      	ldr	r2, [r3, #8]
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	441a      	add	r2, r3
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	689a      	ldr	r2, [r3, #8]
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	429a      	cmp	r2, r3
 8015902:	db02      	blt.n	801590a <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	2200      	movs	r2, #0
 8015908:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	441a      	add	r2, r3
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8015916:	4b12      	ldr	r3, [pc, #72]	@ (8015960 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2b01      	cmp	r3, #1
 801591c:	dd1a      	ble.n	8015954 <prvTCPWindowTxAdd_FrontSegment+0x88>
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015924:	2b17      	cmp	r3, #23
 8015926:	d015      	beq.n	8015954 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	681a      	ldr	r2, [r3, #0]
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	69db      	ldr	r3, [r3, #28]
 8015930:	1ad1      	subs	r1, r2, r3
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	6898      	ldr	r0, [r3, #8]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	69db      	ldr	r3, [r3, #28]
 801593e:	1ad3      	subs	r3, r2, r3
 8015940:	68ba      	ldr	r2, [r7, #8]
 8015942:	68d2      	ldr	r2, [r2, #12]
 8015944:	9201      	str	r2, [sp, #4]
 8015946:	9300      	str	r3, [sp, #0]
 8015948:	4603      	mov	r3, r0
 801594a:	460a      	mov	r2, r1
 801594c:	6879      	ldr	r1, [r7, #4]
 801594e:	4805      	ldr	r0, [pc, #20]	@ (8015964 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8015950:	f00c f94a 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8015954:	697b      	ldr	r3, [r7, #20]
        }
 8015956:	4618      	mov	r0, r3
 8015958:	3718      	adds	r7, #24
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	20001488 	.word	0x20001488
 8015964:	080269ac 	.word	0x080269ac

08015968 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8015968:	b580      	push	{r7, lr}
 801596a:	b08a      	sub	sp, #40	@ 0x28
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
 8015974:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 801597a:	2300      	movs	r3, #0
 801597c:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015986:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d073      	beq.n	8015a76 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	689a      	ldr	r2, [r3, #8]
 8015992:	69bb      	ldr	r3, [r7, #24]
 8015994:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8015996:	429a      	cmp	r2, r3
 8015998:	da6d      	bge.n	8015a76 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	7d9b      	ldrb	r3, [r3, #22]
 801599e:	f003 0301 	and.w	r3, r3, #1
 80159a2:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d166      	bne.n	8015a76 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d062      	beq.n	8015a76 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 80159b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159b2:	69b9      	ldr	r1, [r7, #24]
 80159b4:	68f8      	ldr	r0, [r7, #12]
 80159b6:	f7ff ff89 	bl	80158cc <prvTCPWindowTxAdd_FrontSegment>
 80159ba:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 80159bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	1ad3      	subs	r3, r2, r3
 80159c2:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 80159c4:	6a3a      	ldr	r2, [r7, #32]
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	4413      	add	r3, r2
 80159ca:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80159cc:	697a      	ldr	r2, [r7, #20]
 80159ce:	6839      	ldr	r1, [r7, #0]
 80159d0:	69f8      	ldr	r0, [r7, #28]
 80159d2:	f7ff ff61 	bl	8015898 <lTCPIncrementTxPosition>
 80159d6:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 80159d8:	e04d      	b.n	8015a76 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80159e4:	461a      	mov	r2, r3
 80159e6:	2300      	movs	r3, #0
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	f7ff fb61 	bl	80150b0 <xTCPWindowNew>
 80159ee:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80159f0:	69bb      	ldr	r3, [r7, #24]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d037      	beq.n	8015a66 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80159f6:	69bb      	ldr	r3, [r7, #24]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	4619      	mov	r1, r3
 80159fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80159fe:	f7f4 fd79 	bl	800a4f4 <FreeRTOS_min_int32>
 8015a02:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8015a04:	69bb      	ldr	r3, [r7, #24]
 8015a06:	697a      	ldr	r2, [r7, #20]
 8015a08:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	69fa      	ldr	r2, [r7, #28]
 8015a0e:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8015a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	1ad3      	subs	r3, r2, r3
 8015a16:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8015a18:	697a      	ldr	r2, [r7, #20]
 8015a1a:	6839      	ldr	r1, [r7, #0]
 8015a1c:	69f8      	ldr	r0, [r7, #28]
 8015a1e:	f7ff ff3b 	bl	8015898 <lTCPIncrementTxPosition>
 8015a22:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	441a      	add	r2, r3
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8015a30:	6a3a      	ldr	r2, [r7, #32]
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	4413      	add	r3, r2
 8015a36:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	3318      	adds	r3, #24
 8015a42:	4619      	mov	r1, r3
 8015a44:	4610      	mov	r0, r2
 8015a46:	f7ff fa63 	bl	8014f10 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8015a4a:	69bb      	ldr	r3, [r7, #24]
 8015a4c:	689a      	ldr	r2, [r3, #8]
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	da03      	bge.n	8015a5e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	69ba      	ldr	r2, [r7, #24]
 8015a5a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015a5c:	e00b      	b.n	8015a76 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2200      	movs	r2, #0
 8015a62:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015a64:	e007      	b.n	8015a76 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8015a66:	6a3b      	ldr	r3, [r7, #32]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d008      	beq.n	8015a7e <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 8015a6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015a6e:	4807      	ldr	r0, [pc, #28]	@ (8015a8c <lTCPWindowTxAdd+0x124>)
 8015a70:	f00c f8ba 	bl	8021be8 <lUDPLoggingPrintf>
                    }

                    break;
 8015a74:	e003      	b.n	8015a7e <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8015a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	dcae      	bgt.n	80159da <lTCPWindowTxAdd+0x72>
 8015a7c:	e000      	b.n	8015a80 <lTCPWindowTxAdd+0x118>
                    break;
 8015a7e:	bf00      	nop
                }
            }

            return lDone;
 8015a80:	6a3b      	ldr	r3, [r7, #32]
        }
 8015a82:	4618      	mov	r0, r3
 8015a84:	3728      	adds	r7, #40	@ 0x28
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}
 8015a8a:	bf00      	nop
 8015a8c:	080269f4 	.word	0x080269f4

08015a90 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8015a90:	b480      	push	{r7}
 8015a92:	b083      	sub	sp, #12
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d101      	bne.n	8015aa6 <xTCPWindowTxDone+0x16>
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	e000      	b.n	8015aa8 <xTCPWindowTxDone+0x18>
 8015aa6:	2300      	movs	r3, #0
        }
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	370c      	adds	r7, #12
 8015aac:	46bd      	mov	sp, r7
 8015aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab2:	4770      	bx	lr

08015ab4 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b086      	sub	sp, #24
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	3354      	adds	r3, #84	@ 0x54
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7ff fbb5 	bl	8015232 <xTCPWindowPeekHead>
 8015ac8:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d102      	bne.n	8015ad6 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	613b      	str	r3, [r7, #16]
 8015ad4:	e02f      	b.n	8015b36 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	6a1b      	ldr	r3, [r3, #32]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d306      	bcc.n	8015af0 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6a1b      	ldr	r3, [r3, #32]
 8015aea:	1ad3      	subs	r3, r2, r3
 8015aec:	617b      	str	r3, [r7, #20]
 8015aee:	e001      	b.n	8015af4 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 8015af0:	2300      	movs	r3, #0
 8015af2:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8015af4:	6979      	ldr	r1, [r7, #20]
 8015af6:	6838      	ldr	r0, [r7, #0]
 8015af8:	f7f4 fd0c 	bl	800a514 <FreeRTOS_min_uint32>
 8015afc:	4602      	mov	r2, r0
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	1a9b      	subs	r3, r3, r2
 8015b02:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	689b      	ldr	r3, [r3, #8]
 8015b08:	461a      	mov	r2, r3
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	4293      	cmp	r3, r2
 8015b0e:	d302      	bcc.n	8015b16 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8015b10:	2301      	movs	r3, #1
 8015b12:	613b      	str	r3, [r7, #16]
 8015b14:	e001      	b.n	8015b1a <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8015b16:	2300      	movs	r3, #0
 8015b18:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d00a      	beq.n	8015b36 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	689b      	ldr	r3, [r3, #8]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d201      	bcs.n	8015b36 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8015b32:	2300      	movs	r3, #0
 8015b34:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8015b36:	693b      	ldr	r3, [r7, #16]
        }
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3718      	adds	r7, #24
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b08a      	sub	sp, #40	@ 0x28
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d002      	beq.n	8015b60 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8015b5e:	e050      	b.n	8015c02 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	3368      	adds	r3, #104	@ 0x68
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7ff fb64 	bl	8015232 <xTCPWindowPeekHead>
 8015b6a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 8015b6c:	6a3b      	ldr	r3, [r7, #32]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d01f      	beq.n	8015bb2 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b76:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015b78:	6a3b      	ldr	r3, [r7, #32]
 8015b7a:	3310      	adds	r3, #16
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7ff f9e4 	bl	8014f4a <ulTimerGetAge>
 8015b82:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8015b84:	6a3b      	ldr	r3, [r7, #32]
 8015b86:	7d1b      	ldrb	r3, [r3, #20]
 8015b88:	461a      	mov	r2, r3
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	4093      	lsls	r3, r2
 8015b8e:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	69fa      	ldr	r2, [r7, #28]
 8015b94:	fb02 f303 	mul.w	r3, r2, r3
 8015b98:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 8015b9a:	697a      	ldr	r2, [r7, #20]
 8015b9c:	69bb      	ldr	r3, [r7, #24]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d904      	bls.n	8015bac <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8015ba2:	697a      	ldr	r2, [r7, #20]
 8015ba4:	69bb      	ldr	r3, [r7, #24]
 8015ba6:	1ad2      	subs	r2, r2, r3
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8015bac:	2301      	movs	r3, #1
 8015bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8015bb0:	e027      	b.n	8015c02 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3354      	adds	r3, #84	@ 0x54
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f7ff fb3b 	bl	8015232 <xTCPWindowPeekHead>
 8015bbc:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 8015bbe:	6a3b      	ldr	r3, [r7, #32]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d102      	bne.n	8015bca <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8015bc8:	e01b      	b.n	8015c02 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8015bca:	68b9      	ldr	r1, [r7, #8]
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f7ff ff71 	bl	8015ab4 <prvTCPWindowTxHasSpace>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d102      	bne.n	8015bde <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8015bdc:	e011      	b.n	8015c02 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	f003 0302 	and.w	r3, r3, #2
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d008      	beq.n	8015bfe <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8015bec:	6a3b      	ldr	r3, [r7, #32]
 8015bee:	689a      	ldr	r2, [r3, #8]
 8015bf0:	6a3b      	ldr	r3, [r7, #32]
 8015bf2:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	da02      	bge.n	8015bfe <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8015bfc:	e001      	b.n	8015c02 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 8015bfe:	2301      	movs	r3, #1
 8015c00:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 8015c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015c04:	4618      	mov	r0, r3
 8015c06:	3728      	adds	r7, #40	@ 0x28
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}

08015c0c <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 8015c0c:	b590      	push	{r4, r7, lr}
 8015c0e:	b087      	sub	sp, #28
 8015c10:	af02      	add	r7, sp, #8
 8015c12:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	3368      	adds	r3, #104	@ 0x68
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7ff fb0a 	bl	8015232 <xTCPWindowPeekHead>
 8015c1e:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d043      	beq.n	8015cae <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	7d1b      	ldrb	r3, [r3, #20]
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	4093      	lsls	r3, r2
 8015c30:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c36:	461a      	mov	r2, r3
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	fb02 f303 	mul.w	r3, r2, r3
 8015c3e:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	3310      	adds	r3, #16
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7ff f980 	bl	8014f4a <ulTimerGetAge>
 8015c4a:	4602      	mov	r2, r0
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	d22b      	bcs.n	8015caa <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	3368      	adds	r3, #104	@ 0x68
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7ff fad2 	bl	8015200 <xTCPWindowGetHead>
 8015c5c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	2200      	movs	r2, #0
 8015c62:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015c64:	4b14      	ldr	r3, [pc, #80]	@ (8015cb8 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d020      	beq.n	8015cae <pxTCPWindowTx_GetWaitQueue+0xa2>
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015c72:	2b17      	cmp	r3, #23
 8015c74:	d01b      	beq.n	8015cae <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015c84:	461c      	mov	r4, r3
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	6899      	ldr	r1, [r3, #8]
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	681a      	ldr	r2, [r3, #0]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	69db      	ldr	r3, [r3, #28]
 8015c92:	1ad3      	subs	r3, r2, r3
 8015c94:	68fa      	ldr	r2, [r7, #12]
 8015c96:	6812      	ldr	r2, [r2, #0]
 8015c98:	9201      	str	r2, [sp, #4]
 8015c9a:	9300      	str	r3, [sp, #0]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	4601      	mov	r1, r0
 8015ca2:	4806      	ldr	r0, [pc, #24]	@ (8015cbc <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8015ca4:	f00b ffa0 	bl	8021be8 <lUDPLoggingPrintf>
 8015ca8:	e001      	b.n	8015cae <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8015caa:	2300      	movs	r3, #0
 8015cac:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 8015cae:	68fb      	ldr	r3, [r7, #12]
        }
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3714      	adds	r7, #20
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd90      	pop	{r4, r7, pc}
 8015cb8:	20001488 	.word	0x20001488
 8015cbc:	08026a30 	.word	0x08026a30

08015cc0 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8015cc0:	b590      	push	{r4, r7, lr}
 8015cc2:	b087      	sub	sp, #28
 8015cc4:	af02      	add	r7, sp, #8
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	3354      	adds	r3, #84	@ 0x54
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7ff faaf 	bl	8015232 <xTCPWindowPeekHead>
 8015cd4:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d04f      	beq.n	8015d7c <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	781b      	ldrb	r3, [r3, #0]
 8015ce0:	f003 0302 	and.w	r3, r3, #2
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d008      	beq.n	8015cfc <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	689a      	ldr	r2, [r3, #8]
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	da02      	bge.n	8015cfc <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	60fb      	str	r3, [r7, #12]
 8015cfa:	e03f      	b.n	8015d7c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7ff fed8 	bl	8015ab4 <prvTCPWindowTxHasSpace>
 8015d04:	4603      	mov	r3, r0
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d102      	bne.n	8015d10 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	60fb      	str	r3, [r7, #12]
 8015d0e:	e035      	b.n	8015d7c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	3354      	adds	r3, #84	@ 0x54
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7ff fa73 	bl	8015200 <xTCPWindowGetHead>
 8015d1a:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d20:	68fa      	ldr	r2, [r7, #12]
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d102      	bne.n	8015d2c <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	68fa      	ldr	r2, [r7, #12]
 8015d32:	6892      	ldr	r2, [r2, #8]
 8015d34:	441a      	add	r2, r3
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015d3a:	4b13      	ldr	r3, [pc, #76]	@ (8015d88 <pxTCPWindowTx_GetTXQueue+0xc8>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	2b01      	cmp	r3, #1
 8015d40:	dd1c      	ble.n	8015d7c <pxTCPWindowTx_GetTXQueue+0xbc>
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015d48:	2b17      	cmp	r3, #23
 8015d4a:	d017      	beq.n	8015d7c <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015d52:	4618      	mov	r0, r3
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015d5a:	461c      	mov	r4, r3
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	6899      	ldr	r1, [r3, #8]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	69db      	ldr	r3, [r3, #28]
 8015d68:	1ad3      	subs	r3, r2, r3
 8015d6a:	683a      	ldr	r2, [r7, #0]
 8015d6c:	9201      	str	r2, [sp, #4]
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	460b      	mov	r3, r1
 8015d72:	4622      	mov	r2, r4
 8015d74:	4601      	mov	r1, r0
 8015d76:	4805      	ldr	r0, [pc, #20]	@ (8015d8c <pxTCPWindowTx_GetTXQueue+0xcc>)
 8015d78:	f00b ff36 	bl	8021be8 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
        }
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3714      	adds	r7, #20
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd90      	pop	{r4, r7, pc}
 8015d86:	bf00      	nop
 8015d88:	20001488 	.word	0x20001488
 8015d8c:	08026a7c 	.word	0x08026a7c

08015d90 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8015d90:	b590      	push	{r4, r7, lr}
 8015d92:	b08b      	sub	sp, #44	@ 0x2c
 8015d94:	af02      	add	r7, sp, #8
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	3340      	adds	r3, #64	@ 0x40
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7ff fa2b 	bl	8015200 <xTCPWindowGetHead>
 8015daa:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8015db4:	69fb      	ldr	r3, [r7, #28]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d01c      	beq.n	8015df4 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8015dba:	4b41      	ldr	r3, [pc, #260]	@ (8015ec0 <ulTCPWindowTxGet+0x130>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d024      	beq.n	8015e0c <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015dc8:	4618      	mov	r0, r3
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015dd0:	461c      	mov	r4, r3
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	6899      	ldr	r1, [r3, #8]
 8015dd6:	69fb      	ldr	r3, [r7, #28]
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	69db      	ldr	r3, [r3, #28]
 8015dde:	1ad3      	subs	r3, r2, r3
 8015de0:	68ba      	ldr	r2, [r7, #8]
 8015de2:	9201      	str	r2, [sp, #4]
 8015de4:	9300      	str	r3, [sp, #0]
 8015de6:	460b      	mov	r3, r1
 8015de8:	4622      	mov	r2, r4
 8015dea:	4601      	mov	r1, r0
 8015dec:	4835      	ldr	r0, [pc, #212]	@ (8015ec4 <ulTCPWindowTxGet+0x134>)
 8015dee:	f00b fefb 	bl	8021be8 <lUDPLoggingPrintf>
 8015df2:	e00b      	b.n	8015e0c <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8015df4:	68f8      	ldr	r0, [r7, #12]
 8015df6:	f7ff ff09 	bl	8015c0c <pxTCPWindowTx_GetWaitQueue>
 8015dfa:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d104      	bne.n	8015e0c <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8015e02:	68b9      	ldr	r1, [r7, #8]
 8015e04:	68f8      	ldr	r0, [r7, #12]
 8015e06:	f7ff ff5b 	bl	8015cc0 <pxTCPWindowTx_GetTXQueue>
 8015e0a:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8015e0c:	69fb      	ldr	r3, [r7, #28]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d051      	beq.n	8015eb6 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8015e12:	69fb      	ldr	r3, [r7, #28]
 8015e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d004      	beq.n	8015e24 <ulTCPWindowTxGet+0x94>
 8015e1a:	f240 7136 	movw	r1, #1846	@ 0x736
 8015e1e:	482a      	ldr	r0, [pc, #168]	@ (8015ec8 <ulTCPWindowTxGet+0x138>)
 8015e20:	f7eb fca4 	bl	800176c <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	3318      	adds	r3, #24
 8015e2e:	4619      	mov	r1, r3
 8015e30:	4610      	mov	r0, r2
 8015e32:	f7ff f86d 	bl	8014f10 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8015e36:	69fa      	ldr	r2, [r7, #28]
 8015e38:	7d93      	ldrb	r3, [r2, #22]
 8015e3a:	f043 0301 	orr.w	r3, r3, #1
 8015e3e:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8015e40:	69fb      	ldr	r3, [r7, #28]
 8015e42:	7d1b      	ldrb	r3, [r3, #20]
 8015e44:	3301      	adds	r3, #1
 8015e46:	b2da      	uxtb	r2, r3
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	7d1b      	ldrb	r3, [r3, #20]
 8015e50:	2b04      	cmp	r3, #4
 8015e52:	d120      	bne.n	8015e96 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	689a      	ldr	r2, [r3, #8]
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015e5e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d918      	bls.n	8015e96 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015e6a:	005b      	lsls	r3, r3, #1
 8015e6c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015e74:	4619      	mov	r1, r3
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	689a      	ldr	r2, [r3, #8]
 8015e82:	8afb      	ldrh	r3, [r7, #22]
 8015e84:	9300      	str	r3, [sp, #0]
 8015e86:	4613      	mov	r3, r2
 8015e88:	4602      	mov	r2, r0
 8015e8a:	4810      	ldr	r0, [pc, #64]	@ (8015ecc <ulTCPWindowTxGet+0x13c>)
 8015e8c:	f00b feac 	bl	8021be8 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8015e90:	8afa      	ldrh	r2, [r7, #22]
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	3310      	adds	r3, #16
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7ff f848 	bl	8014f30 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8015ea8:	69fb      	ldr	r3, [r7, #28]
 8015eaa:	68da      	ldr	r2, [r3, #12]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	689b      	ldr	r3, [r3, #8]
 8015eb4:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8015eb6:	69bb      	ldr	r3, [r7, #24]
        }
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3724      	adds	r7, #36	@ 0x24
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd90      	pop	{r4, r7, pc}
 8015ec0:	20001488 	.word	0x20001488
 8015ec4:	08026ac8 	.word	0x08026ac8
 8015ec8:	08026764 	.word	0x08026764
 8015ecc:	08026b14 	.word	0x08026b14

08015ed0 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b084      	sub	sp, #16
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
 8015ed8:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	3310      	adds	r3, #16
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7ff f833 	bl	8014f4a <ulTimerGetAge>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	dc0e      	bgt.n	8015f10 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ef6:	4613      	mov	r3, r2
 8015ef8:	00db      	lsls	r3, r3, #3
 8015efa:	1a9a      	subs	r2, r3, r2
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	4413      	add	r3, r2
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	da00      	bge.n	8015f06 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8015f04:	3307      	adds	r3, #7
 8015f06:	10db      	asrs	r3, r3, #3
 8015f08:	461a      	mov	r2, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8015f0e:	e00d      	b.n	8015f2c <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f14:	4613      	mov	r3, r2
 8015f16:	005b      	lsls	r3, r3, #1
 8015f18:	441a      	add	r2, r3
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	4413      	add	r3, r2
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	da00      	bge.n	8015f24 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8015f22:	3303      	adds	r3, #3
 8015f24:	109b      	asrs	r3, r3, #2
 8015f26:	461a      	mov	r2, r3
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f30:	2b31      	cmp	r3, #49	@ 0x31
 8015f32:	dc02      	bgt.n	8015f3a <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2232      	movs	r2, #50	@ 0x32
 8015f38:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8015f3a:	bf00      	nop
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
	...

08015f44 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8015f44:	b5b0      	push	{r4, r5, r7, lr}
 8015f46:	b090      	sub	sp, #64	@ 0x40
 8015f48:	af04      	add	r7, sp, #16
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8015f50:	2300      	movs	r3, #0
 8015f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	3398      	adds	r3, #152	@ 0x98
 8015f5c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8015f5e:	69fb      	ldr	r3, [r7, #28]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015f64:	e0a6      	b.n	80160b4 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8015f66:	2300      	movs	r3, #0
 8015f68:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f6c:	68db      	ldr	r3, [r3, #12]
 8015f6e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8015f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	4619      	mov	r1, r3
 8015f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f7e:	f7fe ff9c 	bl	8014eba <xSequenceGreaterThan>
 8015f82:	4603      	mov	r3, r0
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	f040 8094 	bne.w	80160b2 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f90:	429a      	cmp	r2, r3
 8015f92:	f040 809c 	bne.w	80160ce <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015f9c:	69bb      	ldr	r3, [r7, #24]
 8015f9e:	7d9b      	ldrb	r3, [r3, #22]
 8015fa0:	f003 0302 	and.w	r3, r3, #2
 8015fa4:	b2db      	uxtb	r3, r3
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d144      	bne.n	8016034 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8015faa:	69bb      	ldr	r3, [r7, #24]
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	697b      	ldr	r3, [r7, #20]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	6879      	ldr	r1, [r7, #4]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7fe ff80 	bl	8014eba <xSequenceGreaterThan>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d023      	beq.n	8016008 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	681a      	ldr	r2, [r3, #0]
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	69db      	ldr	r3, [r3, #28]
 8015fc8:	1ad3      	subs	r3, r2, r3
 8015fca:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015fd2:	461c      	mov	r4, r3
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015fda:	461d      	mov	r5, r3
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	69db      	ldr	r3, [r3, #28]
 8015fe0:	693a      	ldr	r2, [r7, #16]
 8015fe2:	1ad0      	subs	r0, r2, r3
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	69db      	ldr	r3, [r3, #28]
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	1ad3      	subs	r3, r2, r3
 8015fec:	6939      	ldr	r1, [r7, #16]
 8015fee:	697a      	ldr	r2, [r7, #20]
 8015ff0:	440a      	add	r2, r1
 8015ff2:	9202      	str	r2, [sp, #8]
 8015ff4:	693a      	ldr	r2, [r7, #16]
 8015ff6:	9201      	str	r2, [sp, #4]
 8015ff8:	9300      	str	r3, [sp, #0]
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	462a      	mov	r2, r5
 8015ffe:	4621      	mov	r1, r4
 8016000:	4836      	ldr	r0, [pc, #216]	@ (80160dc <prvTCPWindowTxCheckAck+0x198>)
 8016002:	f00b fdf1 	bl	8021be8 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016006:	e063      	b.n	80160d0 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016008:	69ba      	ldr	r2, [r7, #24]
 801600a:	7d93      	ldrb	r3, [r2, #22]
 801600c:	f043 0302 	orr.w	r3, r3, #2
 8016010:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	7d1b      	ldrb	r3, [r3, #20]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d10a      	bne.n	8016030 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	681a      	ldr	r2, [r3, #0]
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	429a      	cmp	r2, r3
 8016026:	d103      	bne.n	8016030 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016028:	69b9      	ldr	r1, [r7, #24]
 801602a:	68f8      	ldr	r0, [r7, #12]
 801602c:	f7ff ff50 	bl	8015ed0 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016030:	2301      	movs	r3, #1
 8016032:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	6a1b      	ldr	r3, [r3, #32]
 8016038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801603a:	429a      	cmp	r2, r3
 801603c:	d128      	bne.n	8016090 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801603e:	4b28      	ldr	r3, [pc, #160]	@ (80160e0 <prvTCPWindowTxCheckAck+0x19c>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	2b01      	cmp	r3, #1
 8016044:	dd15      	ble.n	8016072 <prvTCPWindowTxCheckAck+0x12e>
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801604c:	2b17      	cmp	r3, #23
 801604e:	d010      	beq.n	8016072 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	69db      	ldr	r3, [r3, #28]
 8016054:	68ba      	ldr	r2, [r7, #8]
 8016056:	1ad1      	subs	r1, r2, r3
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	69db      	ldr	r3, [r3, #28]
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	1ad0      	subs	r0, r2, r3
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	681a      	ldr	r2, [r3, #0]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	69db      	ldr	r3, [r3, #28]
 8016068:	1ad3      	subs	r3, r2, r3
 801606a:	4602      	mov	r2, r0
 801606c:	481d      	ldr	r0, [pc, #116]	@ (80160e4 <prvTCPWindowTxCheckAck+0x1a0>)
 801606e:	f00b fdbb 	bl	8021be8 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	6a1a      	ldr	r2, [r3, #32]
 8016076:	697b      	ldr	r3, [r7, #20]
 8016078:	441a      	add	r2, r3
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 801607e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	4413      	add	r3, r2
 8016084:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8016086:	69b8      	ldr	r0, [r7, #24]
 8016088:	f7ff f8ec 	bl	8015264 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 801608c:	2300      	movs	r3, #0
 801608e:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8016090:	6a3b      	ldr	r3, [r7, #32]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d008      	beq.n	80160a8 <prvTCPWindowTxCheckAck+0x164>
 8016096:	69bb      	ldr	r3, [r7, #24]
 8016098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801609a:	2b00      	cmp	r3, #0
 801609c:	d004      	beq.n	80160a8 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 801609e:	69bb      	ldr	r3, [r7, #24]
 80160a0:	3318      	adds	r3, #24
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7ec fff2 	bl	800308c <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 80160a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	4413      	add	r3, r2
 80160ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80160b0:	e000      	b.n	80160b4 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 80160b2:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80160b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160b6:	69fb      	ldr	r3, [r7, #28]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d009      	beq.n	80160d0 <prvTCPWindowTxCheckAck+0x18c>
 80160bc:	6879      	ldr	r1, [r7, #4]
 80160be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80160c0:	f7fe fee5 	bl	8014e8e <xSequenceLessThan>
 80160c4:	4603      	mov	r3, r0
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	f47f af4d 	bne.w	8015f66 <prvTCPWindowTxCheckAck+0x22>
 80160cc:	e000      	b.n	80160d0 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 80160ce:	bf00      	nop
            }

            return ulBytesConfirmed;
 80160d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80160d2:	4618      	mov	r0, r3
 80160d4:	3730      	adds	r7, #48	@ 0x30
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bdb0      	pop	{r4, r5, r7, pc}
 80160da:	bf00      	nop
 80160dc:	08026b4c 	.word	0x08026b4c
 80160e0:	20001488 	.word	0x20001488
 80160e4:	08026b94 	.word	0x08026b94

080160e8 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b086      	sub	sp, #24
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
 80160f0:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 80160f2:	2300      	movs	r3, #0
 80160f4:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	3370      	adds	r3, #112	@ 0x70
 80160fa:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016102:	e049      	b.n	8016198 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	7d9b      	ldrb	r3, [r3, #22]
 8016114:	f003 0302 	and.w	r3, r3, #2
 8016118:	b2db      	uxtb	r3, r3
 801611a:	2b00      	cmp	r3, #0
 801611c:	d13c      	bne.n	8016198 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	6839      	ldr	r1, [r7, #0]
 8016124:	4618      	mov	r0, r3
 8016126:	f7fe feb2 	bl	8014e8e <xSequenceLessThan>
 801612a:	4603      	mov	r3, r0
 801612c:	2b00      	cmp	r3, #0
 801612e:	d033      	beq.n	8016198 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	7d5b      	ldrb	r3, [r3, #21]
 8016134:	3301      	adds	r3, #1
 8016136:	b2da      	uxtb	r2, r3
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	7d5b      	ldrb	r3, [r3, #21]
 8016140:	2b03      	cmp	r3, #3
 8016142:	d129      	bne.n	8016198 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	2200      	movs	r2, #0
 8016148:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801614a:	4b18      	ldr	r3, [pc, #96]	@ (80161ac <prvTCPWindowFastRetransmit+0xc4>)
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	db11      	blt.n	8016176 <prvTCPWindowFastRetransmit+0x8e>
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016158:	2b17      	cmp	r3, #23
 801615a:	d00c      	beq.n	8016176 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	69db      	ldr	r3, [r3, #28]
 8016164:	1ad1      	subs	r1, r2, r3
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	69db      	ldr	r3, [r3, #28]
 801616a:	683a      	ldr	r2, [r7, #0]
 801616c:	1ad3      	subs	r3, r2, r3
 801616e:	461a      	mov	r2, r3
 8016170:	480f      	ldr	r0, [pc, #60]	@ (80161b0 <prvTCPWindowFastRetransmit+0xc8>)
 8016172:	f00b fd39 	bl	8021be8 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	3318      	adds	r3, #24
 801617a:	4618      	mov	r0, r3
 801617c:	f7ec ff86 	bl	800308c <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	3318      	adds	r3, #24
 801618a:	4619      	mov	r1, r3
 801618c:	4610      	mov	r0, r2
 801618e:	f7fe febf 	bl	8014f10 <vListInsertFifo>
                            ulCount++;
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	3301      	adds	r3, #1
 8016196:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8016198:	697a      	ldr	r2, [r7, #20]
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	429a      	cmp	r2, r3
 801619e:	d1b1      	bne.n	8016104 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 80161a0:	693b      	ldr	r3, [r7, #16]
        }
 80161a2:	4618      	mov	r0, r3
 80161a4:	3718      	adds	r7, #24
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	20001488 	.word	0x20001488
 80161b0:	08026bd0 	.word	0x08026bd0

080161b4 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b084      	sub	sp, #16
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6a1b      	ldr	r3, [r3, #32]
 80161c2:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 80161c4:	68b9      	ldr	r1, [r7, #8]
 80161c6:	6838      	ldr	r0, [r7, #0]
 80161c8:	f7fe fe4c 	bl	8014e64 <xSequenceLessThanOrEqual>
 80161cc:	4603      	mov	r3, r0
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d002      	beq.n	80161d8 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 80161d2:	2300      	movs	r3, #0
 80161d4:	60fb      	str	r3, [r7, #12]
 80161d6:	e005      	b.n	80161e4 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 80161d8:	683a      	ldr	r2, [r7, #0]
 80161da:	68b9      	ldr	r1, [r7, #8]
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7ff feb1 	bl	8015f44 <prvTCPWindowTxCheckAck>
 80161e2:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 80161e4:	68fb      	ldr	r3, [r7, #12]
        }
 80161e6:	4618      	mov	r0, r3
 80161e8:	3710      	adds	r7, #16
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}
	...

080161f0 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 80161f0:	b5b0      	push	{r4, r5, r7, lr}
 80161f2:	b088      	sub	sp, #32
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	6a1b      	ldr	r3, [r3, #32]
 8016200:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	68b9      	ldr	r1, [r7, #8]
 8016206:	68f8      	ldr	r0, [r7, #12]
 8016208:	f7ff fe9c 	bl	8015f44 <prvTCPWindowTxCheckAck>
 801620c:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 801620e:	68b9      	ldr	r1, [r7, #8]
 8016210:	68f8      	ldr	r0, [r7, #12]
 8016212:	f7ff ff69 	bl	80160e8 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016216:	4b16      	ldr	r3, [pc, #88]	@ (8016270 <ulTCPWindowTxSack+0x80>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	dd23      	ble.n	8016266 <ulTCPWindowTxSack+0x76>
 801621e:	6979      	ldr	r1, [r7, #20]
 8016220:	68b8      	ldr	r0, [r7, #8]
 8016222:	f7fe fe4a 	bl	8014eba <xSequenceGreaterThan>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d01c      	beq.n	8016266 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016232:	461c      	mov	r4, r3
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801623a:	461d      	mov	r5, r3
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	69db      	ldr	r3, [r3, #28]
 8016240:	68ba      	ldr	r2, [r7, #8]
 8016242:	1ad0      	subs	r0, r2, r3
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	69db      	ldr	r3, [r3, #28]
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	68fa      	ldr	r2, [r7, #12]
 801624e:	6a11      	ldr	r1, [r2, #32]
 8016250:	68fa      	ldr	r2, [r7, #12]
 8016252:	69d2      	ldr	r2, [r2, #28]
 8016254:	1a8a      	subs	r2, r1, r2
 8016256:	9201      	str	r2, [sp, #4]
 8016258:	9300      	str	r3, [sp, #0]
 801625a:	4603      	mov	r3, r0
 801625c:	462a      	mov	r2, r5
 801625e:	4621      	mov	r1, r4
 8016260:	4804      	ldr	r0, [pc, #16]	@ (8016274 <ulTCPWindowTxSack+0x84>)
 8016262:	f00b fcc1 	bl	8021be8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016266:	693b      	ldr	r3, [r7, #16]
        }
 8016268:	4618      	mov	r0, r3
 801626a:	3718      	adds	r7, #24
 801626c:	46bd      	mov	sp, r7
 801626e:	bdb0      	pop	{r4, r5, r7, pc}
 8016270:	20001488 	.word	0x20001488
 8016274:	08026c10 	.word	0x08026c10

08016278 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b084      	sub	sp, #16
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d014      	beq.n	80162b0 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801628a:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	899b      	ldrh	r3, [r3, #12]
 8016290:	b29b      	uxth	r3, r3
 8016292:	2b08      	cmp	r3, #8
 8016294:	d004      	beq.n	80162a0 <vProcessGeneratedUDPPacket+0x28>
 8016296:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 801629a:	4293      	cmp	r3, r2
 801629c:	d004      	beq.n	80162a8 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 801629e:	e007      	b.n	80162b0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f000 f845 	bl	8016330 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 80162a6:	e003      	b.n	80162b0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f000 fae3 	bl	8016874 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 80162ae:	bf00      	nop
        }
    }
}
 80162b0:	bf00      	nop
 80162b2:	3710      	adds	r7, #16
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}

080162b8 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b086      	sub	sp, #24
 80162bc:	af00      	add	r7, sp, #0
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	460b      	mov	r3, r1
 80162c2:	607a      	str	r2, [r7, #4]
 80162c4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 80162c6:	2300      	movs	r3, #0
 80162c8:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d103      	bne.n	80162d8 <xProcessReceivedUDPPacket+0x20>
 80162d0:	2178      	movs	r1, #120	@ 0x78
 80162d2:	4816      	ldr	r0, [pc, #88]	@ (801632c <xProcessReceivedUDPPacket+0x74>)
 80162d4:	f7eb fa4a 	bl	800176c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d103      	bne.n	80162e8 <xProcessReceivedUDPPacket+0x30>
 80162e0:	2179      	movs	r1, #121	@ 0x79
 80162e2:	4812      	ldr	r0, [pc, #72]	@ (801632c <xProcessReceivedUDPPacket+0x74>)
 80162e4:	f7eb fa42 	bl	800176c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162ec:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	899b      	ldrh	r3, [r3, #12]
 80162f2:	b29b      	uxth	r3, r3
 80162f4:	2b08      	cmp	r3, #8
 80162f6:	d004      	beq.n	8016302 <xProcessReceivedUDPPacket+0x4a>
 80162f8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80162fc:	4293      	cmp	r3, r2
 80162fe:	d008      	beq.n	8016312 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8016300:	e00f      	b.n	8016322 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8016302:	897b      	ldrh	r3, [r7, #10]
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	4619      	mov	r1, r3
 8016308:	68f8      	ldr	r0, [r7, #12]
 801630a:	f000 f92f 	bl	801656c <xProcessReceivedUDPPacket_IPv4>
 801630e:	6178      	str	r0, [r7, #20]
                break;
 8016310:	e007      	b.n	8016322 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8016312:	897b      	ldrh	r3, [r7, #10]
 8016314:	687a      	ldr	r2, [r7, #4]
 8016316:	4619      	mov	r1, r3
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f000 fbdd 	bl	8016ad8 <xProcessReceivedUDPPacket_IPv6>
 801631e:	6178      	str	r0, [r7, #20]
                break;
 8016320:	bf00      	nop
    }

    return xReturn;
 8016322:	697b      	ldr	r3, [r7, #20]
}
 8016324:	4618      	mov	r0, r3
 8016326:	3718      	adds	r7, #24
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}
 801632c:	08026c44 	.word	0x08026c44

08016330 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b08e      	sub	sp, #56	@ 0x38
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	695b      	ldr	r3, [r3, #20]
 801633c:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016342:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016348:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801634e:	2b00      	cmp	r3, #0
 8016350:	d104      	bne.n	801635c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016356:	3b2a      	subs	r3, #42	@ 0x2a
 8016358:	633b      	str	r3, [r7, #48]	@ 0x30
 801635a:	e003      	b.n	8016364 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016360:	3b2a      	subs	r3, #42	@ 0x2a
 8016362:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016366:	f107 0208 	add.w	r2, r7, #8
 801636a:	f107 030c 	add.w	r3, r7, #12
 801636e:	4618      	mov	r0, r3
 8016370:	f7f0 fd68 	bl	8006e44 <eARPGetCacheEntry>
 8016374:	4603      	mov	r3, r0
 8016376:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801637e:	2b00      	cmp	r3, #0
 8016380:	d102      	bne.n	8016388 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016382:	68ba      	ldr	r2, [r7, #8]
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016388:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801638c:	2b02      	cmp	r3, #2
 801638e:	f000 80a0 	beq.w	80164d2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016392:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016396:	2b01      	cmp	r3, #1
 8016398:	d176      	bne.n	8016488 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 801639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801639c:	330e      	adds	r3, #14
 801639e:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d025      	beq.n	80163f4 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 80163a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163aa:	3322      	adds	r3, #34	@ 0x22
 80163ac:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80163b2:	6a3b      	ldr	r3, [r7, #32]
 80163b4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80163ba:	6a3b      	ldr	r3, [r7, #32]
 80163bc:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 80163be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	3308      	adds	r3, #8
 80163c4:	b29a      	uxth	r2, r3
 80163c6:	6a3b      	ldr	r3, [r7, #32]
 80163c8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80163ca:	6a3b      	ldr	r3, [r7, #32]
 80163cc:	889b      	ldrh	r3, [r3, #4]
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	021b      	lsls	r3, r3, #8
 80163d2:	b21a      	sxth	r2, r3
 80163d4:	6a3b      	ldr	r3, [r7, #32]
 80163d6:	889b      	ldrh	r3, [r3, #4]
 80163d8:	b29b      	uxth	r3, r3
 80163da:	0a1b      	lsrs	r3, r3, #8
 80163dc:	b29b      	uxth	r3, r3
 80163de:	b21b      	sxth	r3, r3
 80163e0:	4313      	orrs	r3, r2
 80163e2:	b21b      	sxth	r3, r3
 80163e4:	b29a      	uxth	r2, r3
 80163e6:	6a3b      	ldr	r3, [r7, #32]
 80163e8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 80163ea:	6a3b      	ldr	r3, [r7, #32]
 80163ec:	2200      	movs	r2, #0
 80163ee:	719a      	strb	r2, [r3, #6]
 80163f0:	2200      	movs	r2, #0
 80163f2:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 80163f4:	4b5b      	ldr	r3, [pc, #364]	@ (8016564 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 80163f6:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163fc:	3306      	adds	r3, #6
 80163fe:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8016400:	2218      	movs	r2, #24
 8016402:	69f9      	ldr	r1, [r7, #28]
 8016404:	69b8      	ldr	r0, [r7, #24]
 8016406:	f00b fe0b 	bl	8022020 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801640e:	2b00      	cmp	r3, #0
 8016410:	d109      	bne.n	8016426 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8016412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016414:	2201      	movs	r2, #1
 8016416:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8016418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801641a:	b29b      	uxth	r3, r3
 801641c:	331c      	adds	r3, #28
 801641e:	b29a      	uxth	r2, r3
 8016420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016422:	805a      	strh	r2, [r3, #2]
 8016424:	e005      	b.n	8016432 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8016426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016428:	b29b      	uxth	r3, r3
 801642a:	331c      	adds	r3, #28
 801642c:	b29a      	uxth	r2, r3
 801642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016430:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8016432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016434:	885b      	ldrh	r3, [r3, #2]
 8016436:	b29b      	uxth	r3, r3
 8016438:	021b      	lsls	r3, r3, #8
 801643a:	b21a      	sxth	r2, r3
 801643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801643e:	885b      	ldrh	r3, [r3, #2]
 8016440:	b29b      	uxth	r3, r3
 8016442:	0a1b      	lsrs	r3, r3, #8
 8016444:	b29b      	uxth	r3, r3
 8016446:	b21b      	sxth	r3, r3
 8016448:	4313      	orrs	r3, r2
 801644a:	b21b      	sxth	r3, r3
 801644c:	b29a      	uxth	r2, r3
 801644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016450:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	695a      	ldr	r2, [r3, #20]
 8016456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016458:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801645e:	2b00      	cmp	r3, #0
 8016460:	d004      	beq.n	801646c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016466:	681a      	ldr	r2, [r3, #0]
 8016468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801646a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801646e:	2200      	movs	r2, #0
 8016470:	719a      	strb	r2, [r3, #6]
 8016472:	2200      	movs	r2, #0
 8016474:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	695b      	ldr	r3, [r3, #20]
 801647a:	4a3b      	ldr	r2, [pc, #236]	@ (8016568 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 801647c:	4293      	cmp	r3, r2
 801647e:	d128      	bne.n	80164d2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8016480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016482:	2201      	movs	r2, #1
 8016484:	721a      	strb	r2, [r3, #8]
 8016486:	e024      	b.n	80164d2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016488:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801648c:	2b00      	cmp	r3, #0
 801648e:	d11d      	bne.n	80164cc <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2200      	movs	r2, #0
 8016494:	4619      	mov	r1, r3
 8016496:	2000      	movs	r0, #0
 8016498:	f7f0 fbc0 	bl	8006c1c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	695b      	ldr	r3, [r3, #20]
 80164a0:	210b      	movs	r1, #11
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7f6 ff58 	bl	800d358 <FreeRTOS_FindEndPointOnNetMask>
 80164a8:	4602      	mov	r2, r0
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d103      	bne.n	80164be <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 80164b6:	2302      	movs	r3, #2
 80164b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80164bc:	e009      	b.n	80164d2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 80164be:	68fa      	ldr	r2, [r7, #12]
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7f0 ff25 	bl	8007314 <vARPGenerateRequestPacket>
 80164ca:	e002      	b.n	80164d2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80164cc:	2302      	movs	r3, #2
 80164ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 80164d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80164d6:	2b02      	cmp	r3, #2
 80164d8:	d03d      	beq.n	8016556 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d035      	beq.n	801654e <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164e6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80164ea:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164f0:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80164f2:	693b      	ldr	r3, [r7, #16]
 80164f4:	1d98      	adds	r0, r3, #6
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164fa:	33e8      	adds	r3, #232	@ 0xe8
 80164fc:	2206      	movs	r2, #6
 80164fe:	4619      	mov	r1, r3
 8016500:	f00b fd8e 	bl	8022020 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016508:	2b3b      	cmp	r3, #59	@ 0x3b
 801650a:	d812      	bhi.n	8016532 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016512:	e008      	b.n	8016526 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801651a:	4413      	add	r3, r2
 801651c:	2200      	movs	r2, #0
 801651e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016522:	3301      	adds	r3, #1
 8016524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016528:	2b3b      	cmp	r3, #59	@ 0x3b
 801652a:	ddf3      	ble.n	8016514 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	223c      	movs	r2, #60	@ 0x3c
 8016530:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d011      	beq.n	801655c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8016538:	697b      	ldr	r3, [r7, #20]
 801653a:	68db      	ldr	r3, [r3, #12]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d00d      	beq.n	801655c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	2201      	movs	r2, #1
 8016546:	6879      	ldr	r1, [r7, #4]
 8016548:	6978      	ldr	r0, [r7, #20]
 801654a:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801654c:	e006      	b.n	801655c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f000 fca2 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
}
 8016554:	e002      	b.n	801655c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fc9e 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
}
 801655c:	bf00      	nop
 801655e:	3738      	adds	r7, #56	@ 0x38
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}
 8016564:	08027368 	.word	0x08027368
 8016568:	fc0000e0 	.word	0xfc0000e0

0801656c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 801656c:	b590      	push	{r4, r7, lr}
 801656e:	b099      	sub	sp, #100	@ 0x64
 8016570:	af02      	add	r7, sp, #8
 8016572:	60f8      	str	r0, [r7, #12]
 8016574:	460b      	mov	r3, r1
 8016576:	607a      	str	r2, [r7, #4]
 8016578:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 801657a:	2301      	movs	r3, #1
 801657c:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d104      	bne.n	801658e <xProcessReceivedUDPPacket_IPv4+0x22>
 8016584:	f240 116f 	movw	r1, #367	@ 0x16f
 8016588:	4872      	ldr	r0, [pc, #456]	@ (8016754 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801658a:	f7eb f8ef 	bl	800176c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016592:	2b00      	cmp	r3, #0
 8016594:	d104      	bne.n	80165a0 <xProcessReceivedUDPPacket_IPv4+0x34>
 8016596:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 801659a:	486e      	ldr	r0, [pc, #440]	@ (8016754 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801659c:	f7eb f8e6 	bl	800176c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165a4:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80165ac:	897b      	ldrh	r3, [r7, #10]
 80165ae:	4618      	mov	r0, r3
 80165b0:	f7f8 fc60 	bl	800ee74 <pxUDPSocketLookup>
 80165b4:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2200      	movs	r2, #0
 80165ba:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 80165bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80165be:	2b00      	cmp	r3, #0
 80165c0:	f000 8085 	beq.w	80166ce <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 80165c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d018      	beq.n	80165fc <xProcessReceivedUDPPacket_IPv4+0x90>
 80165ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d014      	beq.n	80165fc <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f7f0 fa0c 	bl	80069f0 <xCheckRequiresARPResolution>
 80165d8:	4603      	mov	r3, r0
 80165da:	2b01      	cmp	r3, #1
 80165dc:	d105      	bne.n	80165ea <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	2201      	movs	r2, #1
 80165e2:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 80165e4:	2300      	movs	r3, #0
 80165e6:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 80165e8:	e0ae      	b.n	8016748 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80165ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165ec:	1d9a      	adds	r2, r3, #6
 80165ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165f0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80165f4:	4619      	mov	r1, r3
 80165f6:	4610      	mov	r0, r2
 80165f8:	f7f0 fada 	bl	8006bb0 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80165fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80165fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016600:	2b00      	cmp	r3, #0
 8016602:	d02f      	beq.n	8016664 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016608:	332a      	adds	r3, #42	@ 0x2a
 801660a:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 801660c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801660e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016610:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016616:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	695b      	ldr	r3, [r3, #20]
 801661c:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801661e:	2302      	movs	r3, #2
 8016620:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8016624:	2318      	movs	r3, #24
 8016626:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 801662a:	897b      	ldrh	r3, [r7, #10]
 801662c:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 801662e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016630:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8016634:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8016636:	2302      	movs	r3, #2
 8016638:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 801663a:	2318      	movs	r3, #24
 801663c:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016642:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8016646:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801664a:	f107 0310 	add.w	r3, r7, #16
 801664e:	9300      	str	r3, [sp, #0]
 8016650:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8016652:	460b      	mov	r3, r1
 8016654:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016656:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016658:	47a0      	blx	r4
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d001      	beq.n	8016664 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016660:	2300      	movs	r3, #0
 8016662:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016666:	2b01      	cmp	r3, #1
 8016668:	d16e      	bne.n	8016748 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 801666a:	f7ed fd59 	bl	8004120 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801666e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016670:	3354      	adds	r3, #84	@ 0x54
 8016672:	68fa      	ldr	r2, [r7, #12]
 8016674:	4611      	mov	r1, r2
 8016676:	4618      	mov	r0, r3
 8016678:	f7ec fcab 	bl	8002fd2 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 801667c:	f7ed fd5e 	bl	800413c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016682:	685b      	ldr	r3, [r3, #4]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d005      	beq.n	8016694 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	2101      	movs	r1, #1
 801668e:	4618      	mov	r0, r3
 8016690:	f7ec fb9a 	bl	8002dc8 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016698:	2b00      	cmp	r3, #0
 801669a:	d00c      	beq.n	80166b6 <xProcessReceivedUDPPacket_IPv4+0x14a>
 801669c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801669e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166a0:	f003 0301 	and.w	r3, r3, #1
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d006      	beq.n	80166b6 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80166a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80166aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2101      	movs	r1, #1
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7ec fb89 	bl	8002dc8 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80166b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80166b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d044      	beq.n	8016748 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80166be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80166c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80166c2:	2300      	movs	r3, #0
 80166c4:	2200      	movs	r2, #0
 80166c6:	2100      	movs	r1, #0
 80166c8:	f7ec fe5a 	bl	8003380 <xQueueGenericSend>
 80166cc:	e03c      	b.n	8016748 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80166ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166d0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	021b      	lsls	r3, r3, #8
 80166d6:	b21a      	sxth	r2, r3
 80166d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166da:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80166dc:	b29b      	uxth	r3, r3
 80166de:	0a1b      	lsrs	r3, r3, #8
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	b21b      	sxth	r3, r3
 80166e4:	4313      	orrs	r3, r2
 80166e6:	b21b      	sxth	r3, r3
 80166e8:	2b35      	cmp	r3, #53	@ 0x35
 80166ea:	d10f      	bne.n	801670c <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80166ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166ee:	1d98      	adds	r0, r3, #6
 80166f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166f2:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166fa:	461a      	mov	r2, r3
 80166fc:	f7f0 fa8e 	bl	8006c1c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016700:	68f8      	ldr	r0, [r7, #12]
 8016702:	f7f0 ff20 	bl	8007546 <ulDNSHandlePacket>
 8016706:	4603      	mov	r3, r0
 8016708:	657b      	str	r3, [r7, #84]	@ 0x54
 801670a:	e01d      	b.n	8016748 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 801670c:	897b      	ldrh	r3, [r7, #10]
 801670e:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016712:	4293      	cmp	r3, r2
 8016714:	d006      	beq.n	8016724 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8016716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016718:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801671a:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 801671c:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016720:	4293      	cmp	r3, r2
 8016722:	d10f      	bne.n	8016744 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8016724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016726:	1d98      	adds	r0, r3, #6
 8016728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801672a:	f8d3 101a 	ldr.w	r1, [r3, #26]
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016732:	461a      	mov	r2, r3
 8016734:	f7f0 fa72 	bl	8006c1c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016738:	68f8      	ldr	r0, [r7, #12]
 801673a:	f7f0 ff04 	bl	8007546 <ulDNSHandlePacket>
 801673e:	4603      	mov	r3, r0
 8016740:	657b      	str	r3, [r7, #84]	@ 0x54
 8016742:	e001      	b.n	8016748 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016744:	2300      	movs	r3, #0
 8016746:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801674a:	4618      	mov	r0, r3
 801674c:	375c      	adds	r7, #92	@ 0x5c
 801674e:	46bd      	mov	sp, r7
 8016750:	bd90      	pop	{r4, r7, pc}
 8016752:	bf00      	nop
 8016754:	08026c74 	.word	0x08026c74

08016758 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b086      	sub	sp, #24
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8016762:	2000      	movs	r0, #0
 8016764:	f7f6 fd20 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 8016768:	6178      	str	r0, [r7, #20]
 801676a:	e021      	b.n	80167b0 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2b60      	cmp	r3, #96	@ 0x60
 8016770:	d119      	bne.n	80167a6 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016778:	f003 0304 	and.w	r3, r3, #4
 801677c:	b2db      	uxtb	r3, r3
 801677e:	2b00      	cmp	r3, #0
 8016780:	d011      	beq.n	80167a6 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	3338      	adds	r3, #56	@ 0x38
 8016786:	4618      	mov	r0, r3
 8016788:	f7f7 f8f2 	bl	800d970 <xIPv6_GetIPType>
 801678c:	4603      	mov	r3, r0
 801678e:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016790:	7cfb      	ldrb	r3, [r7, #19]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d101      	bne.n	801679a <pxGetEndpoint+0x42>
 8016796:	2301      	movs	r3, #1
 8016798:	e000      	b.n	801679c <pxGetEndpoint+0x44>
 801679a:	2300      	movs	r3, #0
 801679c:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801679e:	68fa      	ldr	r2, [r7, #12]
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d008      	beq.n	80167b8 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 80167a6:	6979      	ldr	r1, [r7, #20]
 80167a8:	2000      	movs	r0, #0
 80167aa:	f7f6 fd1f 	bl	800d1ec <FreeRTOS_NextEndPoint>
 80167ae:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d1da      	bne.n	801676c <pxGetEndpoint+0x14>
 80167b6:	e000      	b.n	80167ba <pxGetEndpoint+0x62>
                {
                    break;
 80167b8:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 80167ba:	697b      	ldr	r3, [r7, #20]
}
 80167bc:	4618      	mov	r0, r3
 80167be:	3718      	adds	r7, #24
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}

080167c4 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 80167ce:	2300      	movs	r3, #0
 80167d0:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f103 0114 	add.w	r1, r3, #20
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d001      	beq.n	80167e4 <prvStartLookup+0x20>
 80167e0:	4b1e      	ldr	r3, [pc, #120]	@ (801685c <prvStartLookup+0x98>)
 80167e2:	e000      	b.n	80167e6 <prvStartLookup+0x22>
 80167e4:	4b1e      	ldr	r3, [pc, #120]	@ (8016860 <prvStartLookup+0x9c>)
 80167e6:	461a      	mov	r2, r3
 80167e8:	481e      	ldr	r0, [pc, #120]	@ (8016864 <prvStartLookup+0xa0>)
 80167ea:	f00b f9fd 	bl	8021be8 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d11f      	bne.n	8016836 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	3314      	adds	r3, #20
 80167fa:	4618      	mov	r0, r3
 80167fc:	f7f7 f8b8 	bl	800d970 <xIPv6_GetIPType>
 8016800:	4603      	mov	r3, r0
 8016802:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016804:	7bbb      	ldrb	r3, [r7, #14]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d101      	bne.n	801680e <prvStartLookup+0x4a>
 801680a:	2301      	movs	r3, #1
 801680c:	e000      	b.n	8016810 <prvStartLookup+0x4c>
 801680e:	2300      	movs	r3, #0
 8016810:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 8016812:	68b9      	ldr	r1, [r7, #8]
 8016814:	2060      	movs	r0, #96	@ 0x60
 8016816:	f7ff ff9f 	bl	8016758 <pxGetEndpoint>
 801681a:	4602      	mov	r2, r0
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016824:	2b00      	cmp	r3, #0
 8016826:	d001      	beq.n	801682c <prvStartLookup+0x68>
 8016828:	4b0f      	ldr	r3, [pc, #60]	@ (8016868 <prvStartLookup+0xa4>)
 801682a:	e000      	b.n	801682e <prvStartLookup+0x6a>
 801682c:	4b0f      	ldr	r3, [pc, #60]	@ (801686c <prvStartLookup+0xa8>)
 801682e:	4619      	mov	r1, r3
 8016830:	480f      	ldr	r0, [pc, #60]	@ (8016870 <prvStartLookup+0xac>)
 8016832:	f00b f9d9 	bl	8021be8 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801683a:	2b00      	cmp	r3, #0
 801683c:	d008      	beq.n	8016850 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	3314      	adds	r3, #20
 8016842:	4619      	mov	r1, r3
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f7f5 f9d5 	bl	800bbf4 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	2201      	movs	r2, #1
 801684e:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8016850:	7bfb      	ldrb	r3, [r7, #15]
}
 8016852:	4618      	mov	r0, r3
 8016854:	3710      	adds	r7, #16
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	08026ca8 	.word	0x08026ca8
 8016860:	08026cac 	.word	0x08026cac
 8016864:	08026cb0 	.word	0x08026cb0
 8016868:	08026cd4 	.word	0x08026cd4
 801686c:	08026cd8 	.word	0x08026cd8
 8016870:	08026cdc 	.word	0x08026cdc

08016874 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016874:	b590      	push	{r4, r7, lr}
 8016876:	b093      	sub	sp, #76	@ 0x4c
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 801687c:	2300      	movs	r3, #0
 801687e:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8016880:	2300      	movs	r3, #0
 8016882:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8016884:	2300      	movs	r3, #0
 8016886:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8016888:	2300      	movs	r3, #0
 801688a:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016890:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8016892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016894:	330e      	adds	r3, #14
 8016896:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	3314      	adds	r3, #20
 801689c:	f107 040c 	add.w	r4, r7, #12
 80168a0:	6818      	ldr	r0, [r3, #0]
 80168a2:	6859      	ldr	r1, [r3, #4]
 80168a4:	689a      	ldr	r2, [r3, #8]
 80168a6:	68db      	ldr	r3, [r3, #12]
 80168a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d107      	bne.n	80168c2 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 80168b2:	233e      	movs	r3, #62	@ 0x3e
 80168b4:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80168ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168bc:	1ad3      	subs	r3, r2, r3
 80168be:	643b      	str	r3, [r7, #64]	@ 0x40
 80168c0:	e003      	b.n	80168ca <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168c6:	3b3e      	subs	r3, #62	@ 0x3e
 80168c8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	3314      	adds	r3, #20
 80168ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80168d0:	f107 021c 	add.w	r2, r7, #28
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7f4 ff21 	bl	800b71c <eNDGetCacheEntry>
 80168da:	4603      	mov	r3, r0
 80168dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 80168e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80168e4:	2b02      	cmp	r3, #2
 80168e6:	f000 80b1 	beq.w	8016a4c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 80168ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80168ee:	2b01      	cmp	r3, #1
 80168f0:	f040 8095 	bne.w	8016a1e <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80168f4:	69fa      	ldr	r2, [r7, #28]
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d109      	bne.n	8016916 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016904:	2260      	movs	r2, #96	@ 0x60
 8016906:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8016908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801690a:	223a      	movs	r2, #58	@ 0x3a
 801690c:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 801690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016910:	2280      	movs	r2, #128	@ 0x80
 8016912:	71da      	strb	r2, [r3, #7]
 8016914:	e05e      	b.n	80169d4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8016916:	2300      	movs	r3, #0
 8016918:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 801691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801691c:	3336      	adds	r3, #54	@ 0x36
 801691e:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016922:	2260      	movs	r2, #96	@ 0x60
 8016924:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8016926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016928:	2200      	movs	r2, #0
 801692a:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 801692c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801692e:	2200      	movs	r2, #0
 8016930:	709a      	strb	r2, [r3, #2]
 8016932:	2200      	movs	r2, #0
 8016934:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8016936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016938:	22ff      	movs	r2, #255	@ 0xff
 801693a:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016940:	b29b      	uxth	r3, r3
 8016942:	3b36      	subs	r3, #54	@ 0x36
 8016944:	b29a      	uxth	r2, r3
 8016946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016948:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 801694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801694c:	2211      	movs	r2, #17
 801694e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016954:	b29b      	uxth	r3, r3
 8016956:	3b36      	subs	r3, #54	@ 0x36
 8016958:	b29a      	uxth	r2, r3
 801695a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801695c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 801695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016960:	889b      	ldrh	r3, [r3, #4]
 8016962:	b29b      	uxth	r3, r3
 8016964:	021b      	lsls	r3, r3, #8
 8016966:	b21a      	sxth	r2, r3
 8016968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801696a:	889b      	ldrh	r3, [r3, #4]
 801696c:	b29b      	uxth	r3, r3
 801696e:	0a1b      	lsrs	r3, r3, #8
 8016970:	b29b      	uxth	r3, r3
 8016972:	b21b      	sxth	r3, r3
 8016974:	4313      	orrs	r3, r2
 8016976:	b21b      	sxth	r3, r3
 8016978:	b29a      	uxth	r2, r3
 801697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801697c:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016984:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801698c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016990:	889b      	ldrh	r3, [r3, #4]
 8016992:	b29b      	uxth	r3, r3
 8016994:	021b      	lsls	r3, r3, #8
 8016996:	b21a      	sxth	r2, r3
 8016998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801699a:	889b      	ldrh	r3, [r3, #4]
 801699c:	b29b      	uxth	r3, r3
 801699e:	0a1b      	lsrs	r3, r3, #8
 80169a0:	b29b      	uxth	r3, r3
 80169a2:	b21b      	sxth	r3, r3
 80169a4:	4313      	orrs	r3, r2
 80169a6:	b21b      	sxth	r3, r3
 80169a8:	b29a      	uxth	r2, r3
 80169aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ac:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 80169ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b0:	2200      	movs	r2, #0
 80169b2:	719a      	strb	r2, [r3, #6]
 80169b4:	2200      	movs	r2, #0
 80169b6:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d009      	beq.n	80169d4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 80169c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169c2:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169ca:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 80169cc:	2210      	movs	r2, #16
 80169ce:	4619      	mov	r1, r3
 80169d0:	f00b fb26 	bl	8022020 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d10e      	bne.n	80169fa <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 80169dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80169de:	b29b      	uxth	r3, r3
 80169e0:	3308      	adds	r3, #8
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	021b      	lsls	r3, r3, #8
 80169e6:	b29a      	uxth	r2, r3
 80169e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80169ea:	3308      	adds	r3, #8
 80169ec:	0a1b      	lsrs	r3, r3, #8
 80169ee:	b29b      	uxth	r3, r3
 80169f0:	4313      	orrs	r3, r2
 80169f2:	b29a      	uxth	r2, r3
 80169f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169f6:	809a      	strh	r2, [r3, #4]
 80169f8:	e028      	b.n	8016a4c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80169fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169fc:	2211      	movs	r2, #17
 80169fe:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 8016a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	3308      	adds	r3, #8
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	021b      	lsls	r3, r3, #8
 8016a0a:	b29a      	uxth	r2, r3
 8016a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a0e:	3308      	adds	r3, #8
 8016a10:	0a1b      	lsrs	r3, r3, #8
 8016a12:	b29b      	uxth	r3, r3
 8016a14:	4313      	orrs	r3, r2
 8016a16:	b29a      	uxth	r2, r3
 8016a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a1a:	809a      	strh	r2, [r3, #4]
 8016a1c:	e016      	b.n	8016a4c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016a1e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d10f      	bne.n	8016a46 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d002      	beq.n	8016a32 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016a2c:	69fa      	ldr	r2, [r7, #28]
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 8016a32:	f107 0320 	add.w	r3, r7, #32
 8016a36:	4619      	mov	r1, r3
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f7ff fec3 	bl	80167c4 <prvStartLookup>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016a44:	e002      	b.n	8016a4c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8016a46:	2302      	movs	r3, #2
 8016a48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 8016a4c:	6a3b      	ldr	r3, [r7, #32]
 8016a4e:	2b01      	cmp	r3, #1
 8016a50:	d03d      	beq.n	8016ace <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8016a52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016a56:	2b02      	cmp	r3, #2
 8016a58:	d036      	beq.n	8016ac8 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d02e      	beq.n	8016ac0 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a66:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a70:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a74:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a7a:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016a7c:	2206      	movs	r2, #6
 8016a7e:	4619      	mov	r1, r3
 8016a80:	f00b face 	bl	8022020 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a88:	2b3b      	cmp	r3, #59	@ 0x3b
 8016a8a:	d812      	bhi.n	8016ab2 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016a92:	e008      	b.n	8016aa6 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a9a:	4413      	add	r3, r2
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016aa8:	2b3b      	cmp	r3, #59	@ 0x3b
 8016aaa:	ddf3      	ble.n	8016a94 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	223c      	movs	r2, #60	@ 0x3c
 8016ab0:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ab4:	68db      	ldr	r3, [r3, #12]
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	6879      	ldr	r1, [r7, #4]
 8016aba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016abc:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8016abe:	e006      	b.n	8016ace <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 f9e9 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
}
 8016ac6:	e002      	b.n	8016ace <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f000 f9e5 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
}
 8016ace:	bf00      	nop
 8016ad0:	374c      	adds	r7, #76	@ 0x4c
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd90      	pop	{r4, r7, pc}
	...

08016ad8 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8016ad8:	b590      	push	{r4, r7, lr}
 8016ada:	b09b      	sub	sp, #108	@ 0x6c
 8016adc:	af02      	add	r7, sp, #8
 8016ade:	60f8      	str	r0, [r7, #12]
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	607a      	str	r2, [r7, #4]
 8016ae4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d104      	bne.n	8016afa <xProcessReceivedUDPPacket_IPv6+0x22>
 8016af0:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8016af4:	4874      	ldr	r0, [pc, #464]	@ (8016cc8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016af6:	f7ea fe39 	bl	800176c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d104      	bne.n	8016b0c <xProcessReceivedUDPPacket_IPv6+0x34>
 8016b02:	f240 1187 	movw	r1, #391	@ 0x187
 8016b06:	4870      	ldr	r0, [pc, #448]	@ (8016cc8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016b08:	f7ea fe30 	bl	800176c <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b10:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8016b12:	897b      	ldrh	r3, [r7, #10]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7f8 f9ad 	bl	800ee74 <pxUDPSocketLookup>
 8016b1a:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 8016b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016b24:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d109      	bne.n	8016b40 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 8016b2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016b2e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016b30:	b29b      	uxth	r3, r3
 8016b32:	4619      	mov	r1, r3
 8016b34:	4865      	ldr	r0, [pc, #404]	@ (8016ccc <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8016b36:	f00b f857 	bl	8021be8 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8016b3e:	e0bd      	b.n	8016cbc <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 8016b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	f000 8091 	beq.w	8016c6a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016b48:	68f8      	ldr	r0, [r7, #12]
 8016b4a:	f7ef ff51 	bl	80069f0 <xCheckRequiresARPResolution>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	2b01      	cmp	r3, #1
 8016b52:	d105      	bne.n	8016b60 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2201      	movs	r2, #1
 8016b58:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 8016b5e:	e0ad      	b.n	8016cbc <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016b62:	1d98      	adds	r0, r3, #6
 8016b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016b66:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016b6e:	461a      	mov	r2, r3
 8016b70:	f7f4 fe82 	bl	800b878 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8016b74:	68f8      	ldr	r0, [r7, #12]
 8016b76:	f7f2 ff7f 	bl	8009a78 <uxIPHeaderSizePacket>
 8016b7a:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8016b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d03d      	beq.n	8016c00 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016b8a:	3316      	adds	r3, #22
 8016b8c:	4413      	add	r3, r2
 8016b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8016b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b94:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016b9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 8016b9c:	897b      	ldrh	r3, [r7, #10]
 8016b9e:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016ba2:	3316      	adds	r3, #22
 8016ba4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8016ba8:	6818      	ldr	r0, [r3, #0]
 8016baa:	6859      	ldr	r1, [r3, #4]
 8016bac:	689a      	ldr	r2, [r3, #8]
 8016bae:	68db      	ldr	r3, [r3, #12]
 8016bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016bb4:	3326      	adds	r3, #38	@ 0x26
 8016bb6:	f107 041c 	add.w	r4, r7, #28
 8016bba:	6818      	ldr	r0, [r3, #0]
 8016bbc:	6859      	ldr	r1, [r3, #4]
 8016bbe:	689a      	ldr	r2, [r3, #8]
 8016bc0:	68db      	ldr	r3, [r3, #12]
 8016bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016bc4:	230a      	movs	r3, #10
 8016bc6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016bca:	230a      	movs	r3, #10
 8016bcc:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8016bce:	2318      	movs	r3, #24
 8016bd0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8016bd4:	2318      	movs	r3, #24
 8016bd6:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016bdc:	3b3e      	subs	r3, #62	@ 0x3e
 8016bde:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 8016be0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016be4:	f107 0314 	add.w	r3, r7, #20
 8016be8:	9300      	str	r3, [sp, #0]
 8016bea:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8016bec:	4613      	mov	r3, r2
 8016bee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016bf0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016bf2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016bf4:	47a0      	blx	r4
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d001      	beq.n	8016c00 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016c00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016c02:	2b01      	cmp	r3, #1
 8016c04:	d15a      	bne.n	8016cbc <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8016c06:	f7ed fa8b 	bl	8004120 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8016c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c0c:	3354      	adds	r3, #84	@ 0x54
 8016c0e:	68fa      	ldr	r2, [r7, #12]
 8016c10:	4611      	mov	r1, r2
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7ec f9dd 	bl	8002fd2 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8016c18:	f7ed fa90 	bl	800413c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d005      	beq.n	8016c30 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	2101      	movs	r1, #1
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7ec f8cc 	bl	8002dc8 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d00c      	beq.n	8016c52 <xProcessReceivedUDPPacket_IPv6+0x17a>
 8016c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c3c:	f003 0301 	and.w	r3, r3, #1
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d006      	beq.n	8016c52 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2101      	movs	r1, #1
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7ec f8bb 	bl	8002dc8 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d030      	beq.n	8016cbc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8016c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c5c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016c5e:	2300      	movs	r3, #0
 8016c60:	2200      	movs	r2, #0
 8016c62:	2100      	movs	r1, #0
 8016c64:	f7ec fb8c 	bl	8003380 <xQueueGenericSend>
 8016c68:	e028      	b.n	8016cbc <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8016c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016c6e:	b29b      	uxth	r3, r3
 8016c70:	021b      	lsls	r3, r3, #8
 8016c72:	b21a      	sxth	r2, r3
 8016c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016c76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	0a1b      	lsrs	r3, r3, #8
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	b21b      	sxth	r3, r3
 8016c80:	4313      	orrs	r3, r2
 8016c82:	b21b      	sxth	r3, r3
 8016c84:	2b35      	cmp	r3, #53	@ 0x35
 8016c86:	d105      	bne.n	8016c94 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016c88:	68f8      	ldr	r0, [r7, #12]
 8016c8a:	f7f0 fc5c 	bl	8007546 <ulDNSHandlePacket>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016c92:	e013      	b.n	8016cbc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016c94:	897b      	ldrh	r3, [r7, #10]
 8016c96:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016c9a:	4293      	cmp	r3, r2
 8016c9c:	d006      	beq.n	8016cac <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 8016c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016ca2:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016ca4:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016ca8:	4293      	cmp	r3, r2
 8016caa:	d105      	bne.n	8016cb8 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016cac:	68f8      	ldr	r0, [r7, #12]
 8016cae:	f7f0 fc4a 	bl	8007546 <ulDNSHandlePacket>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016cb6:	e001      	b.n	8016cbc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3764      	adds	r7, #100	@ 0x64
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd90      	pop	{r4, r7, pc}
 8016cc6:	bf00      	nop
 8016cc8:	08026d04 	.word	0x08026d04
 8016ccc:	08026d38 	.word	0x08026d38

08016cd0 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8016cd0:	b480      	push	{r7}
 8016cd2:	b083      	sub	sp, #12
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8016cd8:	2301      	movs	r3, #1
    }
 8016cda:	4618      	mov	r0, r3
 8016cdc:	370c      	adds	r7, #12
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr

08016ce6 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8016ce6:	b480      	push	{r7}
 8016ce8:	af00      	add	r7, sp, #0
    }
 8016cea:	bf00      	nop
 8016cec:	46bd      	mov	sp, r7
 8016cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf2:	4770      	bx	lr

08016cf4 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b082      	sub	sp, #8
 8016cf8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8016cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8016db4 <xNetworkBuffersInitialise+0xc0>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d149      	bne.n	8016d96 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8016d02:	2140      	movs	r1, #64	@ 0x40
 8016d04:	2040      	movs	r0, #64	@ 0x40
 8016d06:	f7ec fb11 	bl	800332c <xQueueCreateCountingSemaphore>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	4a29      	ldr	r2, [pc, #164]	@ (8016db4 <xNetworkBuffersInitialise+0xc0>)
 8016d0e:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8016d10:	4b28      	ldr	r3, [pc, #160]	@ (8016db4 <xNetworkBuffersInitialise+0xc0>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d103      	bne.n	8016d20 <xNetworkBuffersInitialise+0x2c>
 8016d18:	21c3      	movs	r1, #195	@ 0xc3
 8016d1a:	4827      	ldr	r0, [pc, #156]	@ (8016db8 <xNetworkBuffersInitialise+0xc4>)
 8016d1c:	f7ea fd26 	bl	800176c <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 8016d20:	4b24      	ldr	r3, [pc, #144]	@ (8016db4 <xNetworkBuffersInitialise+0xc0>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d036      	beq.n	8016d96 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8016d28:	4824      	ldr	r0, [pc, #144]	@ (8016dbc <xNetworkBuffersInitialise+0xc8>)
 8016d2a:	f7ec f925 	bl	8002f78 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 8016d2e:	4824      	ldr	r0, [pc, #144]	@ (8016dc0 <xNetworkBuffersInitialise+0xcc>)
 8016d30:	f001 fa24 	bl	801817c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016d34:	2300      	movs	r3, #0
 8016d36:	603b      	str	r3, [r7, #0]
 8016d38:	e027      	b.n	8016d8a <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 8016d3a:	683a      	ldr	r2, [r7, #0]
 8016d3c:	4613      	mov	r3, r2
 8016d3e:	00db      	lsls	r3, r3, #3
 8016d40:	1a9b      	subs	r3, r3, r2
 8016d42:	00db      	lsls	r3, r3, #3
 8016d44:	4a1e      	ldr	r2, [pc, #120]	@ (8016dc0 <xNetworkBuffersInitialise+0xcc>)
 8016d46:	4413      	add	r3, r2
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7ec f935 	bl	8002fb8 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 8016d4e:	683a      	ldr	r2, [r7, #0]
 8016d50:	4613      	mov	r3, r2
 8016d52:	00db      	lsls	r3, r3, #3
 8016d54:	1a9b      	subs	r3, r3, r2
 8016d56:	00db      	lsls	r3, r3, #3
 8016d58:	4a19      	ldr	r2, [pc, #100]	@ (8016dc0 <xNetworkBuffersInitialise+0xcc>)
 8016d5a:	1899      	adds	r1, r3, r2
 8016d5c:	4818      	ldr	r0, [pc, #96]	@ (8016dc0 <xNetworkBuffersInitialise+0xcc>)
 8016d5e:	683a      	ldr	r2, [r7, #0]
 8016d60:	4613      	mov	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	1a9b      	subs	r3, r3, r2
 8016d66:	00db      	lsls	r3, r3, #3
 8016d68:	4403      	add	r3, r0
 8016d6a:	330c      	adds	r3, #12
 8016d6c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8016d6e:	683a      	ldr	r2, [r7, #0]
 8016d70:	4613      	mov	r3, r2
 8016d72:	00db      	lsls	r3, r3, #3
 8016d74:	1a9b      	subs	r3, r3, r2
 8016d76:	00db      	lsls	r3, r3, #3
 8016d78:	4a11      	ldr	r2, [pc, #68]	@ (8016dc0 <xNetworkBuffersInitialise+0xcc>)
 8016d7a:	4413      	add	r3, r2
 8016d7c:	4619      	mov	r1, r3
 8016d7e:	480f      	ldr	r0, [pc, #60]	@ (8016dbc <xNetworkBuffersInitialise+0xc8>)
 8016d80:	f7ec f94b 	bl	800301a <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016d84:	683b      	ldr	r3, [r7, #0]
 8016d86:	3301      	adds	r3, #1
 8016d88:	603b      	str	r3, [r7, #0]
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8016d8e:	d9d4      	bls.n	8016d3a <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8016d90:	4b0c      	ldr	r3, [pc, #48]	@ (8016dc4 <xNetworkBuffersInitialise+0xd0>)
 8016d92:	2240      	movs	r2, #64	@ 0x40
 8016d94:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8016d96:	4b07      	ldr	r3, [pc, #28]	@ (8016db4 <xNetworkBuffersInitialise+0xc0>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d102      	bne.n	8016da4 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	607b      	str	r3, [r7, #4]
 8016da2:	e001      	b.n	8016da8 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8016da4:	2301      	movs	r3, #1
 8016da6:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8016da8:	687b      	ldr	r3, [r7, #4]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3708      	adds	r7, #8
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}
 8016db2:	bf00      	nop
 8016db4:	200022a4 	.word	0x200022a4
 8016db8:	08026d78 	.word	0x08026d78
 8016dbc:	2000148c 	.word	0x2000148c
 8016dc0:	200014a4 	.word	0x200014a4
 8016dc4:	200014a0 	.word	0x200014a0

08016dc8 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b086      	sub	sp, #24
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
 8016dd0:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8016dda:	4b2a      	ldr	r3, [pc, #168]	@ (8016e84 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d04b      	beq.n	8016e7a <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8016de2:	4b28      	ldr	r3, [pc, #160]	@ (8016e84 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	6839      	ldr	r1, [r7, #0]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ec fc81 	bl	80036f0 <xQueueSemaphoreTake>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b01      	cmp	r3, #1
 8016df2:	d13d      	bne.n	8016e70 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8016df4:	f7ef f814 	bl	8005e20 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8016df8:	4b23      	ldr	r3, [pc, #140]	@ (8016e88 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016dfa:	68db      	ldr	r3, [r3, #12]
 8016dfc:	68db      	ldr	r3, [r3, #12]
 8016dfe:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016e00:	6978      	ldr	r0, [r7, #20]
 8016e02:	f7ff ff65 	bl	8016cd0 <bIsValidNetworkDescriptor>
 8016e06:	4603      	mov	r3, r0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d009      	beq.n	8016e20 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 8016e0c:	697b      	ldr	r3, [r7, #20]
 8016e0e:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016e10:	4a1d      	ldr	r2, [pc, #116]	@ (8016e88 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016e12:	4293      	cmp	r3, r2
 8016e14:	d104      	bne.n	8016e20 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8016e16:	697b      	ldr	r3, [r7, #20]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7ec f937 	bl	800308c <uxListRemove>
 8016e1e:	e001      	b.n	8016e24 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8016e20:	2301      	movs	r3, #1
 8016e22:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8016e24:	f7ef f828 	bl	8005e78 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8016e28:	693b      	ldr	r3, [r7, #16]
 8016e2a:	2b01      	cmp	r3, #1
 8016e2c:	d10b      	bne.n	8016e46 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 8016e2e:	6978      	ldr	r0, [r7, #20]
 8016e30:	f7ff ff4e 	bl	8016cd0 <bIsValidNetworkDescriptor>
 8016e34:	4603      	mov	r3, r0
 8016e36:	461a      	mov	r2, r3
 8016e38:	6979      	ldr	r1, [r7, #20]
 8016e3a:	4814      	ldr	r0, [pc, #80]	@ (8016e8c <pxGetNetworkBufferWithDescriptor+0xc4>)
 8016e3c:	f00a fed4 	bl	8021be8 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8016e40:	2300      	movs	r3, #0
 8016e42:	617b      	str	r3, [r7, #20]
 8016e44:	e019      	b.n	8016e7a <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016e46:	4b10      	ldr	r3, [pc, #64]	@ (8016e88 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8016e4c:	4b10      	ldr	r3, [pc, #64]	@ (8016e90 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	68fa      	ldr	r2, [r7, #12]
 8016e52:	429a      	cmp	r2, r3
 8016e54:	d202      	bcs.n	8016e5c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8016e56:	4a0e      	ldr	r2, [pc, #56]	@ (8016e90 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	687a      	ldr	r2, [r7, #4]
 8016e60:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8016e62:	697b      	ldr	r3, [r7, #20]
 8016e64:	2200      	movs	r2, #0
 8016e66:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8016e6e:	e004      	b.n	8016e7a <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8016e70:	f240 113b 	movw	r1, #315	@ 0x13b
 8016e74:	4807      	ldr	r0, [pc, #28]	@ (8016e94 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8016e76:	f7ea fc79 	bl	800176c <vAssertCalled>
        }
    }

    return pxReturn;
 8016e7a:	697b      	ldr	r3, [r7, #20]
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3718      	adds	r7, #24
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}
 8016e84:	200022a4 	.word	0x200022a4
 8016e88:	2000148c 	.word	0x2000148c
 8016e8c:	08026dc4 	.word	0x08026dc4
 8016e90:	200014a0 	.word	0x200014a0
 8016e94:	08026d78 	.word	0x08026d78

08016e98 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b084      	sub	sp, #16
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7ff ff15 	bl	8016cd0 <bIsValidNetworkDescriptor>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d104      	bne.n	8016eb6 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8016eac:	6879      	ldr	r1, [r7, #4]
 8016eae:	4819      	ldr	r0, [pc, #100]	@ (8016f14 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8016eb0:	f00a fe9a 	bl	8021be8 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8016eb4:	e029      	b.n	8016f0a <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8016eb6:	f7ee ffb3 	bl	8005e20 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	691b      	ldr	r3, [r3, #16]
 8016ebe:	4a16      	ldr	r2, [pc, #88]	@ (8016f18 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016ec0:	4293      	cmp	r3, r2
 8016ec2:	d101      	bne.n	8016ec8 <vReleaseNetworkBufferAndDescriptor+0x30>
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	e000      	b.n	8016eca <vReleaseNetworkBufferAndDescriptor+0x32>
 8016ec8:	2300      	movs	r3, #0
 8016eca:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d104      	bne.n	8016edc <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	4619      	mov	r1, r3
 8016ed6:	4810      	ldr	r0, [pc, #64]	@ (8016f18 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016ed8:	f7ec f87b 	bl	8002fd2 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8016edc:	f7ee ffcc 	bl	8005e78 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d008      	beq.n	8016ef8 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8016ee6:	f000 f829 	bl	8016f3c <uxGetNumberOfFreeNetworkBuffers>
 8016eea:	4603      	mov	r3, r0
 8016eec:	461a      	mov	r2, r3
 8016eee:	6879      	ldr	r1, [r7, #4]
 8016ef0:	480a      	ldr	r0, [pc, #40]	@ (8016f1c <vReleaseNetworkBufferAndDescriptor+0x84>)
 8016ef2:	f00a fe79 	bl	8021be8 <lUDPLoggingPrintf>
}
 8016ef6:	e008      	b.n	8016f0a <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8016ef8:	4b09      	ldr	r3, [pc, #36]	@ (8016f20 <vReleaseNetworkBufferAndDescriptor+0x88>)
 8016efa:	6818      	ldr	r0, [r3, #0]
 8016efc:	2300      	movs	r3, #0
 8016efe:	2200      	movs	r2, #0
 8016f00:	2100      	movs	r1, #0
 8016f02:	f7ec fa3d 	bl	8003380 <xQueueGenericSend>
            prvShowWarnings();
 8016f06:	f7ff feee 	bl	8016ce6 <prvShowWarnings>
}
 8016f0a:	bf00      	nop
 8016f0c:	3710      	adds	r7, #16
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}
 8016f12:	bf00      	nop
 8016f14:	08026e08 	.word	0x08026e08
 8016f18:	2000148c 	.word	0x2000148c
 8016f1c:	08026e40 	.word	0x08026e40
 8016f20:	200022a4 	.word	0x200022a4

08016f24 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8016f24:	b480      	push	{r7}
 8016f26:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8016f28:	4b03      	ldr	r3, [pc, #12]	@ (8016f38 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f34:	4770      	bx	lr
 8016f36:	bf00      	nop
 8016f38:	200014a0 	.word	0x200014a0

08016f3c <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016f40:	4b03      	ldr	r3, [pc, #12]	@ (8016f50 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8016f42:	681b      	ldr	r3, [r3, #0]
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	46bd      	mov	sp, r7
 8016f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4c:	4770      	bx	lr
 8016f4e:	bf00      	nop
 8016f50:	2000148c 	.word	0x2000148c

08016f54 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016f54:	b480      	push	{r7}
 8016f56:	b085      	sub	sp, #20
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	4a11      	ldr	r2, [pc, #68]	@ (8016fa8 <xHas_1F_PHYSPCS+0x54>)
 8016f64:	4293      	cmp	r3, r2
 8016f66:	d016      	beq.n	8016f96 <xHas_1F_PHYSPCS+0x42>
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8016fa8 <xHas_1F_PHYSPCS+0x54>)
 8016f6c:	4293      	cmp	r3, r2
 8016f6e:	d80f      	bhi.n	8016f90 <xHas_1F_PHYSPCS+0x3c>
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	4a0e      	ldr	r2, [pc, #56]	@ (8016fac <xHas_1F_PHYSPCS+0x58>)
 8016f74:	4293      	cmp	r3, r2
 8016f76:	d00e      	beq.n	8016f96 <xHas_1F_PHYSPCS+0x42>
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8016fac <xHas_1F_PHYSPCS+0x58>)
 8016f7c:	4293      	cmp	r3, r2
 8016f7e:	d807      	bhi.n	8016f90 <xHas_1F_PHYSPCS+0x3c>
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	4a0b      	ldr	r2, [pc, #44]	@ (8016fb0 <xHas_1F_PHYSPCS+0x5c>)
 8016f84:	4293      	cmp	r3, r2
 8016f86:	d006      	beq.n	8016f96 <xHas_1F_PHYSPCS+0x42>
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8016fb4 <xHas_1F_PHYSPCS+0x60>)
 8016f8c:	4293      	cmp	r3, r2
 8016f8e:	d002      	beq.n	8016f96 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8016f90:	2301      	movs	r3, #1
 8016f92:	60fb      	str	r3, [r7, #12]
            break;
 8016f94:	e000      	b.n	8016f98 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8016f96:	bf00      	nop
    }

    return xResult;
 8016f98:	68fb      	ldr	r3, [r7, #12]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3714      	adds	r7, #20
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa4:	4770      	bx	lr
 8016fa6:	bf00      	nop
 8016fa8:	ff000710 	.word	0xff000710
 8016fac:	2000a250 	.word	0x2000a250
 8016fb0:	20005c90 	.word	0x20005c90
 8016fb4:	2000a221 	.word	0x2000a221

08016fb8 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8016fb8:	b480      	push	{r7}
 8016fba:	b085      	sub	sp, #20
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8016ffc <xHas_19_PHYCR+0x44>)
 8016fc8:	4293      	cmp	r3, r2
 8016fca:	d00b      	beq.n	8016fe4 <xHas_19_PHYCR+0x2c>
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	4a0b      	ldr	r2, [pc, #44]	@ (8016ffc <xHas_19_PHYCR+0x44>)
 8016fd0:	4293      	cmp	r3, r2
 8016fd2:	d80a      	bhi.n	8016fea <xHas_19_PHYCR+0x32>
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8017000 <xHas_19_PHYCR+0x48>)
 8016fd8:	4293      	cmp	r3, r2
 8016fda:	d003      	beq.n	8016fe4 <xHas_19_PHYCR+0x2c>
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	4a09      	ldr	r2, [pc, #36]	@ (8017004 <xHas_19_PHYCR+0x4c>)
 8016fe0:	4293      	cmp	r3, r2
 8016fe2:	d102      	bne.n	8016fea <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	60fb      	str	r3, [r7, #12]
            break;
 8016fe8:	e000      	b.n	8016fec <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8016fea:	bf00      	nop
    }

    return xResult;
 8016fec:	68fb      	ldr	r3, [r7, #12]
}
 8016fee:	4618      	mov	r0, r3
 8016ff0:	3714      	adds	r7, #20
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff8:	4770      	bx	lr
 8016ffa:	bf00      	nop
 8016ffc:	2000a221 	.word	0x2000a221
 8017000:	0007c130 	.word	0x0007c130
 8017004:	20005c90 	.word	0x20005c90

08017008 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b084      	sub	sp, #16
 801700c:	af00      	add	r7, sp, #0
 801700e:	60f8      	str	r0, [r7, #12]
 8017010:	60b9      	str	r1, [r7, #8]
 8017012:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017014:	2240      	movs	r2, #64	@ 0x40
 8017016:	2100      	movs	r1, #0
 8017018:	68f8      	ldr	r0, [r7, #12]
 801701a:	f00b f90e 	bl	802223a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	68ba      	ldr	r2, [r7, #8]
 8017022:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	605a      	str	r2, [r3, #4]
}
 801702a:	bf00      	nop
 801702c:	3710      	adds	r7, #16
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
	...

08017034 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b086      	sub	sp, #24
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	2200      	movs	r2, #0
 8017040:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017042:	2300      	movs	r3, #0
 8017044:	617b      	str	r3, [r7, #20]
 8017046:	e03a      	b.n	80170be <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8017048:	2300      	movs	r3, #0
 801704a:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	f107 020c 	add.w	r2, r7, #12
 8017054:	2103      	movs	r1, #3
 8017056:	6978      	ldr	r0, [r7, #20]
 8017058:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017060:	4293      	cmp	r3, r2
 8017062:	d029      	beq.n	80170b8 <xPhyDiscover+0x84>
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d026      	beq.n	80170b8 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	f107 0208 	add.w	r2, r7, #8
 8017072:	2102      	movs	r1, #2
 8017074:	6978      	ldr	r0, [r7, #20]
 8017076:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	041a      	lsls	r2, r3, #16
 801707c:	68f9      	ldr	r1, [r7, #12]
 801707e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8017082:	400b      	ands	r3, r1
 8017084:	4313      	orrs	r3, r2
 8017086:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801708c:	697a      	ldr	r2, [r7, #20]
 801708e:	b2d1      	uxtb	r1, r2
 8017090:	687a      	ldr	r2, [r7, #4]
 8017092:	4413      	add	r3, r2
 8017094:	460a      	mov	r2, r1
 8017096:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	3202      	adds	r2, #2
 80170a0:	6939      	ldr	r1, [r7, #16]
 80170a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170aa:	1c5a      	adds	r2, r3, #1
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170b4:	2b04      	cmp	r3, #4
 80170b6:	d005      	beq.n	80170c4 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	3301      	adds	r3, #1
 80170bc:	617b      	str	r3, [r7, #20]
 80170be:	697b      	ldr	r3, [r7, #20]
 80170c0:	2b1f      	cmp	r3, #31
 80170c2:	ddc1      	ble.n	8017048 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	dd05      	ble.n	80170d8 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	689b      	ldr	r3, [r3, #8]
 80170d0:	4619      	mov	r1, r3
 80170d2:	4804      	ldr	r0, [pc, #16]	@ (80170e4 <xPhyDiscover+0xb0>)
 80170d4:	f00a fd88 	bl	8021be8 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3718      	adds	r7, #24
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	08026e84 	.word	0x08026e84

080170e8 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b08c      	sub	sp, #48	@ 0x30
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
 80170f0:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 80170f2:	2300      	movs	r3, #0
 80170f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80170f6:	2300      	movs	r3, #0
 80170f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80170fa:	e017      	b.n	801712c <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80170fc:	687a      	ldr	r2, [r7, #4]
 80170fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017100:	4413      	add	r3, r2
 8017102:	3318      	adds	r3, #24
 8017104:	781b      	ldrb	r3, [r3, #0]
 8017106:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	f107 0218 	add.w	r2, r7, #24
 8017110:	2100      	movs	r1, #0
 8017112:	69f8      	ldr	r0, [r7, #28]
 8017114:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	685b      	ldr	r3, [r3, #4]
 801711a:	69ba      	ldr	r2, [r7, #24]
 801711c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017120:	2100      	movs	r1, #0
 8017122:	69f8      	ldr	r0, [r7, #28]
 8017124:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017128:	3301      	adds	r3, #1
 801712a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017132:	429a      	cmp	r2, r3
 8017134:	dbe2      	blt.n	80170fc <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801713a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 801713c:	f107 030c 	add.w	r3, r7, #12
 8017140:	4618      	mov	r0, r3
 8017142:	f7ed fca9 	bl	8004a98 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017146:	2300      	movs	r3, #0
 8017148:	62bb      	str	r3, [r7, #40]	@ 0x28
 801714a:	e01f      	b.n	801718c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801714c:	687a      	ldr	r2, [r7, #4]
 801714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017150:	4413      	add	r3, r2
 8017152:	3318      	adds	r3, #24
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	f107 0218 	add.w	r2, r7, #24
 8017160:	2100      	movs	r1, #0
 8017162:	6a38      	ldr	r0, [r7, #32]
 8017164:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8017166:	69bb      	ldr	r3, [r7, #24]
 8017168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801716c:	2b00      	cmp	r3, #0
 801716e:	d10a      	bne.n	8017186 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8017170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017172:	482d      	ldr	r0, [pc, #180]	@ (8017228 <xPhyReset+0x140>)
 8017174:	f00a fd38 	bl	8021be8 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8017178:	2201      	movs	r2, #1
 801717a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801717c:	fa02 f303 	lsl.w	r3, r2, r3
 8017180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017182:	4313      	orrs	r3, r2
 8017184:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017188:	3301      	adds	r3, #1
 801718a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017192:	429a      	cmp	r2, r3
 8017194:	dbda      	blt.n	801714c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8017196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	429a      	cmp	r2, r3
 801719c:	d013      	beq.n	80171c6 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 801719e:	f107 0214 	add.w	r2, r7, #20
 80171a2:	f107 030c 	add.w	r3, r7, #12
 80171a6:	4611      	mov	r1, r2
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7ed fcad 	bl	8004b08 <xTaskCheckForTimeOut>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d004      	beq.n	80171be <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80171b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80171b6:	481d      	ldr	r0, [pc, #116]	@ (801722c <xPhyReset+0x144>)
 80171b8:	f00a fd16 	bl	8021be8 <lUDPLoggingPrintf>
            break;
 80171bc:	e004      	b.n	80171c8 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80171be:	2032      	movs	r0, #50	@ 0x32
 80171c0:	f7ec fef6 	bl	8003fb0 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80171c4:	e7bf      	b.n	8017146 <xPhyReset+0x5e>
            break;
 80171c6:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80171c8:	2300      	movs	r3, #0
 80171ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80171cc:	e01e      	b.n	801720c <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 80171ce:	2201      	movs	r2, #1
 80171d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171d2:	409a      	lsls	r2, r3
 80171d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171d6:	4013      	ands	r3, r2
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d114      	bne.n	8017206 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80171dc:	687a      	ldr	r2, [r7, #4]
 80171de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171e0:	4413      	add	r3, r2
 80171e2:	3318      	adds	r3, #24
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	f107 0218 	add.w	r2, r7, #24
 80171f0:	2100      	movs	r1, #0
 80171f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80171f4:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	69ba      	ldr	r2, [r7, #24]
 80171fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017200:	2100      	movs	r1, #0
 8017202:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017204:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017208:	3301      	adds	r3, #1
 801720a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017212:	429a      	cmp	r2, r3
 8017214:	dbdb      	blt.n	80171ce <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017216:	2032      	movs	r0, #50	@ 0x32
 8017218:	f7ec feca 	bl	8003fb0 <vTaskDelay>

    return ulDoneMask;
 801721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801721e:	4618      	mov	r0, r3
 8017220:	3730      	adds	r7, #48	@ 0x30
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	08026e90 	.word	0x08026e90
 801722c:	08026eb4 	.word	0x08026eb4

08017230 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b088      	sub	sp, #32
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801723e:	2b00      	cmp	r3, #0
 8017240:	dc05      	bgt.n	801724e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8017242:	487c      	ldr	r0, [pc, #496]	@ (8017434 <xPhyConfigure+0x204>)
 8017244:	f00a fcd0 	bl	8021be8 <lUDPLoggingPrintf>
        return -1;
 8017248:	f04f 33ff 	mov.w	r3, #4294967295
 801724c:	e0ed      	b.n	801742a <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	2b03      	cmp	r3, #3
 8017254:	d107      	bne.n	8017266 <xPhyConfigure+0x36>
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	789b      	ldrb	r3, [r3, #2]
 801725a:	2b03      	cmp	r3, #3
 801725c:	d103      	bne.n	8017266 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 801725e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017262:	61fb      	str	r3, [r7, #28]
 8017264:	e044      	b.n	80172f0 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017266:	2301      	movs	r3, #1
 8017268:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	2b03      	cmp	r3, #3
 8017270:	d10d      	bne.n	801728e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	789b      	ldrb	r3, [r3, #2]
 8017276:	2b02      	cmp	r3, #2
 8017278:	d104      	bne.n	8017284 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 801727a:	69fb      	ldr	r3, [r7, #28]
 801727c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017280:	61fb      	str	r3, [r7, #28]
 8017282:	e035      	b.n	80172f0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017284:	69fb      	ldr	r3, [r7, #28]
 8017286:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 801728a:	61fb      	str	r3, [r7, #28]
 801728c:	e030      	b.n	80172f0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	789b      	ldrb	r3, [r3, #2]
 8017292:	2b03      	cmp	r3, #3
 8017294:	d10d      	bne.n	80172b2 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	781b      	ldrb	r3, [r3, #0]
 801729a:	2b01      	cmp	r3, #1
 801729c:	d104      	bne.n	80172a8 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 801729e:	69fb      	ldr	r3, [r7, #28]
 80172a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80172a4:	61fb      	str	r3, [r7, #28]
 80172a6:	e023      	b.n	80172f0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 80172a8:	69fb      	ldr	r3, [r7, #28]
 80172aa:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80172ae:	61fb      	str	r3, [r7, #28]
 80172b0:	e01e      	b.n	80172f0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	781b      	ldrb	r3, [r3, #0]
 80172b6:	2b02      	cmp	r3, #2
 80172b8:	d10d      	bne.n	80172d6 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	789b      	ldrb	r3, [r3, #2]
 80172be:	2b02      	cmp	r3, #2
 80172c0:	d104      	bne.n	80172cc <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80172c8:	61fb      	str	r3, [r7, #28]
 80172ca:	e011      	b.n	80172f0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 80172cc:	69fb      	ldr	r3, [r7, #28]
 80172ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80172d2:	61fb      	str	r3, [r7, #28]
 80172d4:	e00c      	b.n	80172f0 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80172d6:	683b      	ldr	r3, [r7, #0]
 80172d8:	789b      	ldrb	r3, [r3, #2]
 80172da:	2b02      	cmp	r3, #2
 80172dc:	d104      	bne.n	80172e8 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 80172de:	69fb      	ldr	r3, [r7, #28]
 80172e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172e4:	61fb      	str	r3, [r7, #28]
 80172e6:	e003      	b.n	80172f0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	f043 0320 	orr.w	r3, r3, #32
 80172ee:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172f4:	2201      	movs	r2, #1
 80172f6:	fa02 f303 	lsl.w	r3, r2, r3
 80172fa:	3b01      	subs	r3, #1
 80172fc:	4619      	mov	r1, r3
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f7ff fef2 	bl	80170e8 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017304:	2300      	movs	r3, #0
 8017306:	61bb      	str	r3, [r7, #24]
 8017308:	e080      	b.n	801740c <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801730a:	687a      	ldr	r2, [r7, #4]
 801730c:	69bb      	ldr	r3, [r7, #24]
 801730e:	4413      	add	r3, r2
 8017310:	3318      	adds	r3, #24
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	69ba      	ldr	r2, [r7, #24]
 801731a:	3202      	adds	r2, #2
 801731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017320:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	685b      	ldr	r3, [r3, #4]
 8017326:	69fa      	ldr	r2, [r7, #28]
 8017328:	2104      	movs	r1, #4
 801732a:	6978      	ldr	r0, [r7, #20]
 801732c:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	f107 020c 	add.w	r2, r7, #12
 8017336:	2100      	movs	r1, #0
 8017338:	6978      	ldr	r0, [r7, #20]
 801733a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8017342:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801734a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	2b02      	cmp	r3, #2
 8017352:	d003      	beq.n	801735c <xPhyConfigure+0x12c>
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	781b      	ldrb	r3, [r3, #0]
 8017358:	2b03      	cmp	r3, #3
 801735a:	d104      	bne.n	8017366 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017362:	60fb      	str	r3, [r7, #12]
 8017364:	e007      	b.n	8017376 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	2b01      	cmp	r3, #1
 801736c:	d103      	bne.n	8017376 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017374:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	789b      	ldrb	r3, [r3, #2]
 801737a:	2b02      	cmp	r3, #2
 801737c:	d003      	beq.n	8017386 <xPhyConfigure+0x156>
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	789b      	ldrb	r3, [r3, #2]
 8017382:	2b03      	cmp	r3, #3
 8017384:	d104      	bne.n	8017390 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801738c:	60fb      	str	r3, [r7, #12]
 801738e:	e007      	b.n	80173a0 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	789b      	ldrb	r3, [r3, #2]
 8017394:	2b01      	cmp	r3, #1
 8017396:	d103      	bne.n	80173a0 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801739e:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 80173a0:	6938      	ldr	r0, [r7, #16]
 80173a2:	f7ff fe09 	bl	8016fb8 <xHas_19_PHYCR>
 80173a6:	4603      	mov	r3, r0
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d026      	beq.n	80173fa <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	f107 0208 	add.w	r2, r7, #8
 80173b4:	2119      	movs	r1, #25
 80173b6:	6978      	ldr	r0, [r7, #20]
 80173b8:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80173c0:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 80173c2:	683b      	ldr	r3, [r7, #0]
 80173c4:	785b      	ldrb	r3, [r3, #1]
 80173c6:	2b03      	cmp	r3, #3
 80173c8:	d104      	bne.n	80173d4 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80173d0:	60bb      	str	r3, [r7, #8]
 80173d2:	e00c      	b.n	80173ee <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	785b      	ldrb	r3, [r3, #1]
 80173d8:	2b02      	cmp	r3, #2
 80173da:	d104      	bne.n	80173e6 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80173e2:	60bb      	str	r3, [r7, #8]
 80173e4:	e003      	b.n	80173ee <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 80173e6:	68bb      	ldr	r3, [r7, #8]
 80173e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80173ec:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	685b      	ldr	r3, [r3, #4]
 80173f2:	68ba      	ldr	r2, [r7, #8]
 80173f4:	2119      	movs	r1, #25
 80173f6:	6978      	ldr	r0, [r7, #20]
 80173f8:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	461a      	mov	r2, r3
 80173fe:	69f9      	ldr	r1, [r7, #28]
 8017400:	480d      	ldr	r0, [pc, #52]	@ (8017438 <xPhyConfigure+0x208>)
 8017402:	f00a fbf1 	bl	8021be8 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017406:	69bb      	ldr	r3, [r7, #24]
 8017408:	3301      	adds	r3, #1
 801740a:	61bb      	str	r3, [r7, #24]
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017410:	69ba      	ldr	r2, [r7, #24]
 8017412:	429a      	cmp	r2, r3
 8017414:	f6ff af79 	blt.w	801730a <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	69fa      	ldr	r2, [r7, #28]
 8017426:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8017428:	2300      	movs	r3, #0
}
 801742a:	4618      	mov	r0, r3
 801742c:	3720      	adds	r7, #32
 801742e:	46bd      	mov	sp, r7
 8017430:	bd80      	pop	{r7, pc}
 8017432:	bf00      	nop
 8017434:	08026ee8 	.word	0x08026ee8
 8017438:	08026f0c 	.word	0x08026f0c

0801743c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 801743c:	b590      	push	{r4, r7, lr}
 801743e:	b095      	sub	sp, #84	@ 0x54
 8017440:	af02      	add	r7, sp, #8
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d101      	bne.n	8017450 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 801744c:	2300      	movs	r3, #0
 801744e:	e18d      	b.n	801776c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017450:	2300      	movs	r3, #0
 8017452:	647b      	str	r3, [r7, #68]	@ 0x44
 8017454:	e020      	b.n	8017498 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8017456:	683a      	ldr	r2, [r7, #0]
 8017458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801745a:	fa22 f303 	lsr.w	r3, r2, r3
 801745e:	f003 0301 	and.w	r3, r3, #1
 8017462:	2b00      	cmp	r3, #0
 8017464:	d015      	beq.n	8017492 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801746a:	4413      	add	r3, r2
 801746c:	3318      	adds	r3, #24
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	687a      	ldr	r2, [r7, #4]
 8017478:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801747a:	2104      	movs	r1, #4
 801747c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801747e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	685b      	ldr	r3, [r3, #4]
 8017484:	687a      	ldr	r2, [r7, #4]
 8017486:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801748c:	2100      	movs	r1, #0
 801748e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017490:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017494:	3301      	adds	r3, #1
 8017496:	647b      	str	r3, [r7, #68]	@ 0x44
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801749c:	461a      	mov	r2, r3
 801749e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174a0:	4293      	cmp	r3, r2
 80174a2:	d3d8      	bcc.n	8017456 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 80174a4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80174a8:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 80174aa:	f107 0318 	add.w	r3, r7, #24
 80174ae:	4618      	mov	r0, r3
 80174b0:	f7ed faf2 	bl	8004a98 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 80174b4:	2300      	movs	r3, #0
 80174b6:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 80174b8:	2301      	movs	r3, #1
 80174ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80174bc:	2300      	movs	r3, #0
 80174be:	647b      	str	r3, [r7, #68]	@ 0x44
 80174c0:	e025      	b.n	801750e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 80174c2:	683a      	ldr	r2, [r7, #0]
 80174c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174c6:	4013      	ands	r3, r2
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d01a      	beq.n	8017502 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 80174cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80174ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174d0:	4013      	ands	r3, r2
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d115      	bne.n	8017502 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80174d6:	687a      	ldr	r2, [r7, #4]
 80174d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174da:	4413      	add	r3, r2
 80174dc:	3318      	adds	r3, #24
 80174de:	781b      	ldrb	r3, [r3, #0]
 80174e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80174ea:	2101      	movs	r1, #1
 80174ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80174ee:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80174f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174f2:	f003 0320 	and.w	r3, r3, #32
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d003      	beq.n	8017502 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80174fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80174fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174fe:	4313      	orrs	r3, r2
 8017500:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017504:	3301      	adds	r3, #1
 8017506:	647b      	str	r3, [r7, #68]	@ 0x44
 8017508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801750a:	005b      	lsls	r3, r3, #1
 801750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017512:	461a      	mov	r2, r3
 8017514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017516:	4293      	cmp	r3, r2
 8017518:	d3d3      	bcc.n	80174c2 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 801751a:	683a      	ldr	r2, [r7, #0]
 801751c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801751e:	429a      	cmp	r2, r3
 8017520:	d013      	beq.n	801754a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017522:	f107 0220 	add.w	r2, r7, #32
 8017526:	f107 0318 	add.w	r3, r7, #24
 801752a:	4611      	mov	r1, r2
 801752c:	4618      	mov	r0, r3
 801752e:	f7ed faeb 	bl	8004b08 <xTaskCheckForTimeOut>
 8017532:	4603      	mov	r3, r0
 8017534:	2b00      	cmp	r3, #0
 8017536:	d004      	beq.n	8017542 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017538:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801753a:	488e      	ldr	r0, [pc, #568]	@ (8017774 <xPhyStartAutoNegotiation+0x338>)
 801753c:	f00a fb54 	bl	8021be8 <lUDPLoggingPrintf>
            break;
 8017540:	e004      	b.n	801754c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017542:	2032      	movs	r0, #50	@ 0x32
 8017544:	f7ec fd34 	bl	8003fb0 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8017548:	e7b6      	b.n	80174b8 <xPhyStartAutoNegotiation+0x7c>
            break;
 801754a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 801754c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801754e:	2b00      	cmp	r3, #0
 8017550:	f000 810b 	beq.w	801776a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8017554:	2301      	movs	r3, #1
 8017556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801755c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801755e:	43db      	mvns	r3, r3
 8017560:	401a      	ands	r2, r3
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017566:	2300      	movs	r3, #0
 8017568:	647b      	str	r3, [r7, #68]	@ 0x44
 801756a:	e0f7      	b.n	801775c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801756c:	687a      	ldr	r2, [r7, #4]
 801756e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017570:	4413      	add	r3, r2
 8017572:	3318      	adds	r3, #24
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801757c:	3202      	adds	r2, #2
 801757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017582:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8017584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017588:	4013      	ands	r3, r2
 801758a:	2b00      	cmp	r3, #0
 801758c:	f000 80df 	beq.w	801774e <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	685b      	ldr	r3, [r3, #4]
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017598:	2100      	movs	r1, #0
 801759a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801759c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80175a6:	2101      	movs	r1, #1
 80175a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80175aa:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 80175ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175ae:	f003 0304 	and.w	r3, r3, #4
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d005      	beq.n	80175c2 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80175ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80175bc:	431a      	orrs	r2, r3
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 80175c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175c4:	4a6c      	ldr	r2, [pc, #432]	@ (8017778 <xPhyStartAutoNegotiation+0x33c>)
 80175c6:	4293      	cmp	r3, r2
 80175c8:	d130      	bne.n	801762c <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	f107 0214 	add.w	r2, r7, #20
 80175d2:	211e      	movs	r1, #30
 80175d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80175d6:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	f003 0307 	and.w	r3, r3, #7
 80175de:	3b01      	subs	r3, #1
 80175e0:	2b05      	cmp	r3, #5
 80175e2:	d814      	bhi.n	801760e <xPhyStartAutoNegotiation+0x1d2>
 80175e4:	a201      	add	r2, pc, #4	@ (adr r2, 80175ec <xPhyStartAutoNegotiation+0x1b0>)
 80175e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175ea:	bf00      	nop
 80175ec:	08017605 	.word	0x08017605
 80175f0:	0801760f 	.word	0x0801760f
 80175f4:	0801760f 	.word	0x0801760f
 80175f8:	0801760f 	.word	0x0801760f
 80175fc:	08017605 	.word	0x08017605
 8017600:	0801760f 	.word	0x0801760f
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017606:	f043 0302 	orr.w	r3, r3, #2
 801760a:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 801760c:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	f003 0307 	and.w	r3, r3, #7
 8017614:	2b02      	cmp	r3, #2
 8017616:	d801      	bhi.n	801761c <xPhyStartAutoNegotiation+0x1e0>
 8017618:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 801761a:	e05b      	b.n	80176d4 <xPhyStartAutoNegotiation+0x298>
 801761c:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 801761e:	2b01      	cmp	r3, #1
 8017620:	d858      	bhi.n	80176d4 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017624:	f043 0304 	orr.w	r3, r3, #4
 8017628:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 801762a:	e053      	b.n	80176d4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 801762c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801762e:	4a53      	ldr	r2, [pc, #332]	@ (801777c <xPhyStartAutoNegotiation+0x340>)
 8017630:	4293      	cmp	r3, r2
 8017632:	d126      	bne.n	8017682 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8017634:	2300      	movs	r3, #0
 8017636:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8017638:	2300      	movs	r3, #0
 801763a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	f107 0210 	add.w	r2, r7, #16
 8017644:	211f      	movs	r1, #31
 8017646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017648:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	0a1b      	lsrs	r3, r3, #8
 801764e:	f003 0307 	and.w	r3, r3, #7
 8017652:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8017654:	2300      	movs	r3, #0
 8017656:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8017658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801765a:	2b02      	cmp	r3, #2
 801765c:	d002      	beq.n	8017664 <xPhyStartAutoNegotiation+0x228>
 801765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017660:	2b05      	cmp	r3, #5
 8017662:	d103      	bne.n	801766c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017666:	f043 0302 	orr.w	r3, r3, #2
 801766a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 801766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801766e:	2b05      	cmp	r3, #5
 8017670:	d002      	beq.n	8017678 <xPhyStartAutoNegotiation+0x23c>
 8017672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017674:	2b06      	cmp	r3, #6
 8017676:	d12d      	bne.n	80176d4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801767a:	f043 0304 	orr.w	r3, r3, #4
 801767e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017680:	e028      	b.n	80176d4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8017682:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017684:	f7ff fc66 	bl	8016f54 <xHas_1F_PHYSPCS>
 8017688:	4603      	mov	r3, r0
 801768a:	2b00      	cmp	r3, #0
 801768c:	d01b      	beq.n	80176c6 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	f107 020c 	add.w	r2, r7, #12
 8017696:	211f      	movs	r1, #31
 8017698:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801769a:	4798      	blx	r3
                ulRegValue = 0;
 801769c:	2300      	movs	r3, #0
 801769e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	f003 0310 	and.w	r3, r3, #16
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d003      	beq.n	80176b2 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80176aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ac:	f043 0304 	orr.w	r3, r3, #4
 80176b0:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	f003 030c 	and.w	r3, r3, #12
 80176b8:	2b04      	cmp	r3, #4
 80176ba:	d10b      	bne.n	80176d4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80176bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176be:	f043 0302 	orr.w	r3, r3, #2
 80176c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80176c4:	e006      	b.n	80176d4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80176ce:	2110      	movs	r1, #16
 80176d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80176d2:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 80176d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80176d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176d8:	f003 0304 	and.w	r3, r3, #4
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d001      	beq.n	80176e4 <xPhyStartAutoNegotiation+0x2a8>
 80176e0:	4827      	ldr	r0, [pc, #156]	@ (8017780 <xPhyStartAutoNegotiation+0x344>)
 80176e2:	e000      	b.n	80176e6 <xPhyStartAutoNegotiation+0x2aa>
 80176e4:	4827      	ldr	r0, [pc, #156]	@ (8017784 <xPhyStartAutoNegotiation+0x348>)
 80176e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e8:	f003 0302 	and.w	r3, r3, #2
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d001      	beq.n	80176f4 <xPhyStartAutoNegotiation+0x2b8>
 80176f0:	240a      	movs	r4, #10
 80176f2:	e000      	b.n	80176f6 <xPhyStartAutoNegotiation+0x2ba>
 80176f4:	2464      	movs	r4, #100	@ 0x64
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80176fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176fc:	4013      	ands	r3, r2
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d001      	beq.n	8017706 <xPhyStartAutoNegotiation+0x2ca>
 8017702:	4b21      	ldr	r3, [pc, #132]	@ (8017788 <xPhyStartAutoNegotiation+0x34c>)
 8017704:	e000      	b.n	8017708 <xPhyStartAutoNegotiation+0x2cc>
 8017706:	4b21      	ldr	r3, [pc, #132]	@ (801778c <xPhyStartAutoNegotiation+0x350>)
 8017708:	9300      	str	r3, [sp, #0]
 801770a:	4623      	mov	r3, r4
 801770c:	4602      	mov	r2, r0
 801770e:	4820      	ldr	r0, [pc, #128]	@ (8017790 <xPhyStartAutoNegotiation+0x354>)
 8017710:	f00a fa6a 	bl	8021be8 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8017714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017716:	f003 0304 	and.w	r3, r3, #4
 801771a:	2b00      	cmp	r3, #0
 801771c:	d004      	beq.n	8017728 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2202      	movs	r2, #2
 8017722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017726:	e003      	b.n	8017730 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	2201      	movs	r2, #1
 801772c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8017730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017732:	f003 0302 	and.w	r3, r3, #2
 8017736:	2b00      	cmp	r3, #0
 8017738:	d004      	beq.n	8017744 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	2201      	movs	r2, #1
 801773e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017742:	e005      	b.n	8017750 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	2202      	movs	r2, #2
 8017748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801774c:	e000      	b.n	8017750 <xPhyStartAutoNegotiation+0x314>
                continue;
 801774e:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017752:	3301      	adds	r3, #1
 8017754:	647b      	str	r3, [r7, #68]	@ 0x44
 8017756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017758:	005b      	lsls	r3, r3, #1
 801775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017760:	461a      	mov	r2, r3
 8017762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017764:	4293      	cmp	r3, r2
 8017766:	f4ff af01 	bcc.w	801756c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 801776a:	2300      	movs	r3, #0
}
 801776c:	4618      	mov	r0, r3
 801776e:	374c      	adds	r7, #76	@ 0x4c
 8017770:	46bd      	mov	sp, r7
 8017772:	bd90      	pop	{r4, r7, pc}
 8017774:	08026f30 	.word	0x08026f30
 8017778:	00221560 	.word	0x00221560
 801777c:	00221550 	.word	0x00221550
 8017780:	08026f7c 	.word	0x08026f7c
 8017784:	08026f84 	.word	0x08026f84
 8017788:	08026f8c 	.word	0x08026f8c
 801778c:	08026f94 	.word	0x08026f94
 8017790:	08026f98 	.word	0x08026f98

08017794 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b088      	sub	sp, #32
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801779e:	2301      	movs	r3, #1
 80177a0:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 80177a2:	2300      	movs	r3, #0
 80177a4:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 80177a6:	683b      	ldr	r3, [r7, #0]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	dd2b      	ble.n	8017804 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	331c      	adds	r3, #28
 80177b0:	4618      	mov	r0, r3
 80177b2:	f7ed f971 	bl	8004a98 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80177bc:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80177be:	2300      	movs	r3, #0
 80177c0:	61bb      	str	r3, [r7, #24]
 80177c2:	e019      	b.n	80177f8 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80177c8:	69fb      	ldr	r3, [r7, #28]
 80177ca:	4013      	ands	r3, r2
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d10d      	bne.n	80177ec <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	431a      	orrs	r2, r3
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80177e0:	4619      	mov	r1, r3
 80177e2:	4842      	ldr	r0, [pc, #264]	@ (80178ec <xPhyCheckLinkStatus+0x158>)
 80177e4:	f00a fa00 	bl	8021be8 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 80177e8:	2301      	movs	r3, #1
 80177ea:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80177ec:	69bb      	ldr	r3, [r7, #24]
 80177ee:	3301      	adds	r3, #1
 80177f0:	61bb      	str	r3, [r7, #24]
 80177f2:	69fb      	ldr	r3, [r7, #28]
 80177f4:	005b      	lsls	r3, r3, #1
 80177f6:	61fb      	str	r3, [r7, #28]
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177fc:	69ba      	ldr	r2, [r7, #24]
 80177fe:	429a      	cmp	r2, r3
 8017800:	dbe0      	blt.n	80177c4 <xPhyCheckLinkStatus+0x30>
 8017802:	e06e      	b.n	80178e2 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f103 021c 	add.w	r2, r3, #28
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	3324      	adds	r3, #36	@ 0x24
 801780e:	4619      	mov	r1, r3
 8017810:	4610      	mov	r0, r2
 8017812:	f7ed f979 	bl	8004b08 <xTaskCheckForTimeOut>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d062      	beq.n	80178e2 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801781c:	2300      	movs	r3, #0
 801781e:	61bb      	str	r3, [r7, #24]
 8017820:	e045      	b.n	80178ae <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017822:	687a      	ldr	r2, [r7, #4]
 8017824:	69bb      	ldr	r3, [r7, #24]
 8017826:	4413      	add	r3, r2
 8017828:	3318      	adds	r3, #24
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f107 020c 	add.w	r2, r7, #12
 8017836:	2101      	movs	r1, #1
 8017838:	6938      	ldr	r0, [r7, #16]
 801783a:	4798      	blx	r3
 801783c:	4603      	mov	r3, r0
 801783e:	2b00      	cmp	r3, #0
 8017840:	d12f      	bne.n	80178a2 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	4013      	ands	r3, r2
 801784a:	2b00      	cmp	r3, #0
 801784c:	bf14      	ite	ne
 801784e:	2301      	movne	r3, #1
 8017850:	2300      	moveq	r3, #0
 8017852:	b2da      	uxtb	r2, r3
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	f003 0304 	and.w	r3, r3, #4
 801785a:	2b00      	cmp	r3, #0
 801785c:	bf14      	ite	ne
 801785e:	2301      	movne	r3, #1
 8017860:	2300      	moveq	r3, #0
 8017862:	b2db      	uxtb	r3, r3
 8017864:	4053      	eors	r3, r2
 8017866:	b2db      	uxtb	r3, r3
 8017868:	2b00      	cmp	r3, #0
 801786a:	d01a      	beq.n	80178a2 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	f003 0304 	and.w	r3, r3, #4
 8017872:	2b00      	cmp	r3, #0
 8017874:	d006      	beq.n	8017884 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801787a:	69fb      	ldr	r3, [r7, #28]
 801787c:	431a      	orrs	r2, r3
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	635a      	str	r2, [r3, #52]	@ 0x34
 8017882:	e006      	b.n	8017892 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017888:	69fb      	ldr	r3, [r7, #28]
 801788a:	43db      	mvns	r3, r3
 801788c:	401a      	ands	r2, r3
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017896:	4619      	mov	r1, r3
 8017898:	4814      	ldr	r0, [pc, #80]	@ (80178ec <xPhyCheckLinkStatus+0x158>)
 801789a:	f00a f9a5 	bl	8021be8 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801789e:	2301      	movs	r3, #1
 80178a0:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80178a2:	69bb      	ldr	r3, [r7, #24]
 80178a4:	3301      	adds	r3, #1
 80178a6:	61bb      	str	r3, [r7, #24]
 80178a8:	69fb      	ldr	r3, [r7, #28]
 80178aa:	005b      	lsls	r3, r3, #1
 80178ac:	61fb      	str	r3, [r7, #28]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178b2:	69ba      	ldr	r2, [r7, #24]
 80178b4:	429a      	cmp	r2, r3
 80178b6:	dbb4      	blt.n	8017822 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	331c      	adds	r3, #28
 80178bc:	4618      	mov	r0, r3
 80178be:	f7ed f8eb 	bl	8004a98 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80178c6:	69fb      	ldr	r3, [r7, #28]
 80178c8:	085b      	lsrs	r3, r3, #1
 80178ca:	4013      	ands	r3, r2
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d004      	beq.n	80178da <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80178d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80178d8:	e003      	b.n	80178e2 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80178e0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 80178e2:	697b      	ldr	r3, [r7, #20]
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	3720      	adds	r7, #32
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	08026fcc 	.word	0x08026fcc

080178f0 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 80178f0:	b480      	push	{r7}
 80178f2:	b085      	sub	sp, #20
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 80178f8:	2300      	movs	r3, #0
 80178fa:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 80178fc:	2300      	movs	r3, #0
 80178fe:	60bb      	str	r3, [r7, #8]
 8017900:	e013      	b.n	801792a <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 8017902:	2201      	movs	r2, #1
 8017904:	68bb      	ldr	r3, [r7, #8]
 8017906:	fa02 f303 	lsl.w	r3, r2, r3
 801790a:	461a      	mov	r2, r3
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	4013      	ands	r3, r2
 8017910:	2b00      	cmp	r3, #0
 8017912:	d007      	beq.n	8017924 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8017914:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017918:	68bb      	ldr	r3, [r7, #8]
 801791a:	fa22 f303 	lsr.w	r3, r2, r3
 801791e:	68fa      	ldr	r2, [r7, #12]
 8017920:	4313      	orrs	r3, r2
 8017922:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	3301      	adds	r3, #1
 8017928:	60bb      	str	r3, [r7, #8]
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	2b1f      	cmp	r3, #31
 801792e:	dde8      	ble.n	8017902 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 8017930:	68fb      	ldr	r3, [r7, #12]
}
 8017932:	4618      	mov	r0, r3
 8017934:	3714      	adds	r7, #20
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr
	...

08017940 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 8017940:	b590      	push	{r4, r7, lr}
 8017942:	b087      	sub	sp, #28
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8017948:	f04f 33ff 	mov.w	r3, #4294967295
 801794c:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 801794e:	2300      	movs	r3, #0
 8017950:	613b      	str	r3, [r7, #16]
 8017952:	e024      	b.n	801799e <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8017954:	693b      	ldr	r3, [r7, #16]
 8017956:	687a      	ldr	r2, [r7, #4]
 8017958:	4413      	add	r3, r2
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	461a      	mov	r2, r3
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	4053      	eors	r3, r2
 8017962:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017964:	2300      	movs	r3, #0
 8017966:	617b      	str	r3, [r7, #20]
 8017968:	e013      	b.n	8017992 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	f003 0301 	and.w	r3, r3, #1
 8017970:	2b00      	cmp	r3, #0
 8017972:	d008      	beq.n	8017986 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	085c      	lsrs	r4, r3, #1
 8017978:	480e      	ldr	r0, [pc, #56]	@ (80179b4 <prvComputeCRC32_MAC+0x74>)
 801797a:	f7ff ffb9 	bl	80178f0 <prvRevBits32>
 801797e:	4603      	mov	r3, r0
 8017980:	4063      	eors	r3, r4
 8017982:	60fb      	str	r3, [r7, #12]
 8017984:	e002      	b.n	801798c <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	085b      	lsrs	r3, r3, #1
 801798a:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 801798c:	697b      	ldr	r3, [r7, #20]
 801798e:	3301      	adds	r3, #1
 8017990:	617b      	str	r3, [r7, #20]
 8017992:	697b      	ldr	r3, [r7, #20]
 8017994:	2b07      	cmp	r3, #7
 8017996:	dde8      	ble.n	801796a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017998:	693b      	ldr	r3, [r7, #16]
 801799a:	3301      	adds	r3, #1
 801799c:	613b      	str	r3, [r7, #16]
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	2b05      	cmp	r3, #5
 80179a2:	ddd7      	ble.n	8017954 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	43db      	mvns	r3, r3
 80179a8:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 80179aa:	68fb      	ldr	r3, [r7, #12]
}
 80179ac:	4618      	mov	r0, r3
 80179ae:	371c      	adds	r7, #28
 80179b0:	46bd      	mov	sp, r7
 80179b2:	bd90      	pop	{r4, r7, pc}
 80179b4:	04c11db7 	.word	0x04c11db7

080179b8 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b084      	sub	sp, #16
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f7ff ffbd 	bl	8017940 <prvComputeCRC32_MAC>
 80179c6:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 80179c8:	68f8      	ldr	r0, [r7, #12]
 80179ca:	f7ff ff91 	bl	80178f0 <prvRevBits32>
 80179ce:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	0e9b      	lsrs	r3, r3, #26
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3710      	adds	r7, #16
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}

080179dc <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 80179e6:	6838      	ldr	r0, [r7, #0]
 80179e8:	f7ff ffe6 	bl	80179b8 <prvComputeEthernet_MACHash>
 80179ec:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	2b1f      	cmp	r3, #31
 80179f2:	d80c      	bhi.n	8017a0e <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	691a      	ldr	r2, [r3, #16]
 80179fa:	2101      	movs	r1, #1
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	fa01 f303 	lsl.w	r3, r1, r3
 8017a02:	4619      	mov	r1, r3
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	430a      	orrs	r2, r1
 8017a0a:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8017a0c:	e00d      	b.n	8017a2a <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	695a      	ldr	r2, [r3, #20]
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	f003 031f 	and.w	r3, r3, #31
 8017a1a:	2101      	movs	r1, #1
 8017a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8017a20:	4619      	mov	r1, r3
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	430a      	orrs	r2, r1
 8017a28:	615a      	str	r2, [r3, #20]
}
 8017a2a:	bf00      	nop
 8017a2c:	3710      	adds	r7, #16
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}

08017a32 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 8017a32:	b580      	push	{r7, lr}
 8017a34:	b086      	sub	sp, #24
 8017a36:	af00      	add	r7, sp, #0
 8017a38:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 8017a3a:	230a      	movs	r3, #10
 8017a3c:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8017a42:	6939      	ldr	r1, [r7, #16]
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f7ff f9bf 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 8017a4a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d002      	beq.n	8017a58 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a56:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8017a58:	697b      	ldr	r3, [r7, #20]
}
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	3718      	adds	r7, #24
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}
	...

08017a64 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b08e      	sub	sp, #56	@ 0x38
 8017a68:	af02      	add	r7, sp, #8
 8017a6a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8017a70:	2300      	movs	r3, #0
 8017a72:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8017a74:	4b8d      	ldr	r3, [pc, #564]	@ (8017cac <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	f040 8104 	bne.w	8017c86 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 8017a7e:	4a8c      	ldr	r2, [pc, #560]	@ (8017cb0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	f7f5 fb8f 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 8017a8a:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 8017a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d104      	bne.n	8017a9c <xSTM32H_NetworkInterfaceInitialise+0x38>
 8017a92:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8017a96:	4887      	ldr	r0, [pc, #540]	@ (8017cb4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017a98:	f7e9 fe68 	bl	800176c <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8017a9c:	4b86      	ldr	r3, [pc, #536]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017a9e:	4a87      	ldr	r2, [pc, #540]	@ (8017cbc <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8017aa0:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8017aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aa4:	33e8      	adds	r3, #232	@ 0xe8
 8017aa6:	4a84      	ldr	r2, [pc, #528]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017aa8:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8017aaa:	4b83      	ldr	r3, [pc, #524]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017aac:	2201      	movs	r2, #1
 8017aae:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8017ab0:	4b81      	ldr	r3, [pc, #516]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017ab2:	4a83      	ldr	r2, [pc, #524]	@ (8017cc0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8017ab4:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8017ab6:	4b80      	ldr	r3, [pc, #512]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017ab8:	4a82      	ldr	r2, [pc, #520]	@ (8017cc4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8017aba:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8017abc:	4b7e      	ldr	r3, [pc, #504]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017abe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8017ac2:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017ac4:	2260      	movs	r2, #96	@ 0x60
 8017ac6:	2100      	movs	r1, #0
 8017ac8:	487d      	ldr	r0, [pc, #500]	@ (8017cc0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8017aca:	f00a fbb6 	bl	802223a <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 8017ace:	2260      	movs	r2, #96	@ 0x60
 8017ad0:	2100      	movs	r1, #0
 8017ad2:	487c      	ldr	r0, [pc, #496]	@ (8017cc4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8017ad4:	f00a fbb1 	bl	802223a <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8017ad8:	4877      	ldr	r0, [pc, #476]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017ada:	f000 fc71 	bl	80183c0 <HAL_ETH_Init>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8017ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	f040 80c9 	bne.w	8017c80 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 8017aee:	4b72      	ldr	r3, [pc, #456]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	6899      	ldr	r1, [r3, #8]
 8017af4:	4b70      	ldr	r3, [pc, #448]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017af6:	681a      	ldr	r2, [r3, #0]
 8017af8:	f240 4316 	movw	r3, #1046	@ 0x416
 8017afc:	430b      	orrs	r3, r1
 8017afe:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 8017b00:	2234      	movs	r2, #52	@ 0x34
 8017b02:	2100      	movs	r1, #0
 8017b04:	4870      	ldr	r0, [pc, #448]	@ (8017cc8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017b06:	f00a fb98 	bl	802223a <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 8017b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8017cc8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017b0c:	2220      	movs	r2, #32
 8017b0e:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 8017b10:	4b6d      	ldr	r3, [pc, #436]	@ (8017cc8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	f043 0301 	orr.w	r3, r3, #1
 8017b18:	4a6b      	ldr	r2, [pc, #428]	@ (8017cc8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017b1a:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8017b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8017cc8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017b1e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8017b22:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8017b24:	4b68      	ldr	r3, [pc, #416]	@ (8017cc8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017b26:	2200      	movs	r2, #0
 8017b28:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 8017b2a:	2104      	movs	r1, #4
 8017b2c:	2004      	movs	r0, #4
 8017b2e:	f7eb fbfd 	bl	800332c <xQueueCreateCountingSemaphore>
 8017b32:	4603      	mov	r3, r0
 8017b34:	4a65      	ldr	r2, [pc, #404]	@ (8017ccc <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8017b36:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8017b38:	4b64      	ldr	r3, [pc, #400]	@ (8017ccc <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d104      	bne.n	8017b4a <xSTM32H_NetworkInterfaceInitialise+0xe6>
 8017b40:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8017b44:	485b      	ldr	r0, [pc, #364]	@ (8017cb4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017b46:	f7e9 fe11 	bl	800176c <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 8017b4a:	2001      	movs	r0, #1
 8017b4c:	f7eb fbd5 	bl	80032fa <xQueueCreateMutex>
 8017b50:	4603      	mov	r3, r0
 8017b52:	4a5f      	ldr	r2, [pc, #380]	@ (8017cd0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017b54:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017b56:	4b5e      	ldr	r3, [pc, #376]	@ (8017cd0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d104      	bne.n	8017b68 <xSTM32H_NetworkInterfaceInitialise+0x104>
 8017b5e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017b62:	4854      	ldr	r0, [pc, #336]	@ (8017cb4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017b64:	f7e9 fe02 	bl	800176c <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017b68:	2300      	movs	r3, #0
 8017b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b6c:	e015      	b.n	8017b9a <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 8017b6e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8017b72:	f7ff ff5e 	bl	8017a32 <pucGetRXBuffer>
 8017b76:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8017b78:	69fb      	ldr	r3, [r7, #28]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d104      	bne.n	8017b88 <xSTM32H_NetworkInterfaceInitialise+0x124>
 8017b7e:	f240 1189 	movw	r1, #393	@ 0x189
 8017b82:	484c      	ldr	r0, [pc, #304]	@ (8017cb4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017b84:	f7e9 fdf2 	bl	800176c <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8017b88:	2300      	movs	r3, #0
 8017b8a:	69fa      	ldr	r2, [r7, #28]
 8017b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017b8e:	484a      	ldr	r0, [pc, #296]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017b90:	f000 fd02 	bl	8018598 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b96:	3301      	adds	r3, #1
 8017b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b9c:	2b03      	cmp	r3, #3
 8017b9e:	d9e6      	bls.n	8017b6e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 8017ba0:	494c      	ldr	r1, [pc, #304]	@ (8017cd4 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 8017ba2:	4845      	ldr	r0, [pc, #276]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017ba4:	f7ff ff1a 	bl	80179dc <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8017ba8:	494b      	ldr	r1, [pc, #300]	@ (8017cd8 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 8017baa:	4843      	ldr	r0, [pc, #268]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017bac:	f7ff ff16 	bl	80179dc <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 8017bb0:	e03a      	b.n	8017c28 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 8017bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bb4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017bb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017bbc:	b2db      	uxtb	r3, r3
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d002      	beq.n	8017bc8 <xSTM32H_NetworkInterfaceInitialise+0x164>
 8017bc2:	2b01      	cmp	r3, #1
 8017bc4:	d00d      	beq.n	8017be2 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8017bc6:	e028      	b.n	8017c1a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8017bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017bca:	685a      	ldr	r2, [r3, #4]
 8017bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bce:	33e8      	adds	r3, #232	@ 0xe8
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d021      	beq.n	8017c18 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8017bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bd6:	33e8      	adds	r3, #232	@ 0xe8
 8017bd8:	4619      	mov	r1, r3
 8017bda:	4837      	ldr	r0, [pc, #220]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017bdc:	f7ff fefe 	bl	80179dc <prvSetMAC_HashFilter>
                                break;
 8017be0:	e01a      	b.n	8017c18 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 8017be2:	4a3e      	ldr	r2, [pc, #248]	@ (8017cdc <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8017be4:	f107 0314 	add.w	r3, r7, #20
 8017be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017bec:	6018      	str	r0, [r3, #0]
 8017bee:	3304      	adds	r3, #4
 8017bf0:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 8017bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017bf8:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 8017bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bfc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017c00:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 8017c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c04:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8017c08:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 8017c0a:	f107 0314 	add.w	r3, r7, #20
 8017c0e:	4619      	mov	r1, r3
 8017c10:	4829      	ldr	r0, [pc, #164]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017c12:	f7ff fee3 	bl	80179dc <prvSetMAC_HashFilter>
                               break;
 8017c16:	e000      	b.n	8017c1a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8017c18:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 8017c1a:	4b25      	ldr	r3, [pc, #148]	@ (8017cb0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017c20:	4618      	mov	r0, r3
 8017c22:	f7f5 fae3 	bl	800d1ec <FreeRTOS_NextEndPoint>
 8017c26:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8017c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d1c1      	bne.n	8017bb2 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 8017c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8017ce0 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 8017c30:	f107 030c 	add.w	r3, r7, #12
 8017c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c38:	6018      	str	r0, [r3, #0]
 8017c3a:	3304      	adds	r3, #4
 8017c3c:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 8017c3e:	f107 030c 	add.w	r3, r7, #12
 8017c42:	4619      	mov	r1, r3
 8017c44:	481c      	ldr	r0, [pc, #112]	@ (8017cb8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017c46:	f7ff fec9 	bl	80179dc <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 8017c4a:	f000 f911 	bl	8017e70 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 8017c4e:	2001      	movs	r0, #1
 8017c50:	f000 f926 	bl	8017ea0 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017c54:	4b23      	ldr	r3, [pc, #140]	@ (8017ce4 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017c56:	9301      	str	r3, [sp, #4]
 8017c58:	2305      	movs	r3, #5
 8017c5a:	9300      	str	r3, [sp, #0]
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017c62:	4921      	ldr	r1, [pc, #132]	@ (8017ce8 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017c64:	4821      	ldr	r0, [pc, #132]	@ (8017cec <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017c66:	f7ec f863 	bl	8003d30 <xTaskCreate>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d103      	bne.n	8017c78 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 8017c70:	4b0e      	ldr	r3, [pc, #56]	@ (8017cac <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017c72:	2201      	movs	r2, #1
 8017c74:	701a      	strb	r2, [r3, #0]
 8017c76:	e006      	b.n	8017c86 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8017c78:	4b0c      	ldr	r3, [pc, #48]	@ (8017cac <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017c7a:	2202      	movs	r2, #2
 8017c7c:	701a      	strb	r2, [r3, #0]
 8017c7e:	e002      	b.n	8017c86 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 8017c80:	4b0a      	ldr	r3, [pc, #40]	@ (8017cac <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017c82:	2202      	movs	r2, #2
 8017c84:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8017c86:	4b09      	ldr	r3, [pc, #36]	@ (8017cac <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017c88:	781b      	ldrb	r3, [r3, #0]
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	d108      	bne.n	8017ca0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 8017c8e:	4b18      	ldr	r3, [pc, #96]	@ (8017cf0 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 8017c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d004      	beq.n	8017ca0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8017c96:	2301      	movs	r3, #1
 8017c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8017c9a:	4816      	ldr	r0, [pc, #88]	@ (8017cf4 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 8017c9c:	f009 ffa4 	bl	8021be8 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8017ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3730      	adds	r7, #48	@ 0x30
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	200022ac 	.word	0x200022ac
 8017cb0:	20002360 	.word	0x20002360
 8017cb4:	08026ff4 	.word	0x08026ff4
 8017cb8:	200022b8 	.word	0x200022b8
 8017cbc:	40028000 	.word	0x40028000
 8017cc0:	24040060 	.word	0x24040060
 8017cc4:	24040000 	.word	0x24040000
 8017cc8:	2000232c 	.word	0x2000232c
 8017ccc:	200022b0 	.word	0x200022b0
 8017cd0:	200022b4 	.word	0x200022b4
 8017cd4:	08027284 	.word	0x08027284
 8017cd8:	0802728c 	.word	0x0802728c
 8017cdc:	0802706c 	.word	0x0802706c
 8017ce0:	08027074 	.word	0x08027074
 8017ce4:	20002364 	.word	0x20002364
 8017ce8:	08027048 	.word	0x08027048
 8017cec:	08018255 	.word	0x08018255
 8017cf0:	20002368 	.word	0x20002368
 8017cf4:	08027054 	.word	0x08027054

08017cf8 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8017cf8:	b480      	push	{r7}
 8017cfa:	b085      	sub	sp, #20
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 8017d00:	4b07      	ldr	r3, [pc, #28]	@ (8017d20 <xSTM32H_GetPhyLinkStatus+0x28>)
 8017d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d002      	beq.n	8017d0e <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8017d08:	2301      	movs	r3, #1
 8017d0a:	60fb      	str	r3, [r7, #12]
 8017d0c:	e001      	b.n	8017d12 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8017d12:	68fb      	ldr	r3, [r7, #12]
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3714      	adds	r7, #20
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	4770      	bx	lr
 8017d20:	20002368 	.word	0x20002368

08017d24 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b082      	sub	sp, #8
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	4a10      	ldr	r2, [pc, #64]	@ (8017d74 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8017d32:	2111      	movs	r1, #17
 8017d34:	4810      	ldr	r0, [pc, #64]	@ (8017d78 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017d36:	f00a ff83 	bl	8022c40 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8017d3a:	2228      	movs	r2, #40	@ 0x28
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	6838      	ldr	r0, [r7, #0]
 8017d40:	f00a fa7b 	bl	802223a <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8017d44:	683b      	ldr	r3, [r7, #0]
 8017d46:	4a0c      	ldr	r2, [pc, #48]	@ (8017d78 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017d48:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 8017d4a:	687a      	ldr	r2, [r7, #4]
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	4a0a      	ldr	r2, [pc, #40]	@ (8017d7c <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8017d54:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8017d56:	683b      	ldr	r3, [r7, #0]
 8017d58:	4a09      	ldr	r2, [pc, #36]	@ (8017d80 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 8017d5a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	4a09      	ldr	r2, [pc, #36]	@ (8017d84 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8017d60:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8017d62:	6838      	ldr	r0, [r7, #0]
 8017d64:	f7f5 f94c 	bl	800d000 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8017d68:	683b      	ldr	r3, [r7, #0]
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	3708      	adds	r7, #8
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}
 8017d72:	bf00      	nop
 8017d74:	0802707c 	.word	0x0802707c
 8017d78:	200023a8 	.word	0x200023a8
 8017d7c:	08017a65 	.word	0x08017a65
 8017d80:	08017d89 	.word	0x08017d89
 8017d84:	08017cf9 	.word	0x08017cf9

08017d88 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b08a      	sub	sp, #40	@ 0x28
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017d94:	2300      	movs	r3, #0
 8017d96:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8017d98:	2364      	movs	r3, #100	@ 0x64
 8017d9a:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8017d9c:	68f8      	ldr	r0, [r7, #12]
 8017d9e:	f7ff ffab 	bl	8017cf8 <xSTM32H_GetPhyLinkStatus>
 8017da2:	4603      	mov	r3, r0
 8017da4:	2b01      	cmp	r3, #1
 8017da6:	d14c      	bne.n	8017e42 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dac:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d104      	bne.n	8017dbe <xSTM32H_NetworkInterfaceOutput+0x36>
 8017db4:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8017db8:	4827      	ldr	r0, [pc, #156]	@ (8017e58 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8017dba:	f7e9 fcd7 	bl	800176c <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 8017dbe:	69fb      	ldr	r3, [r7, #28]
 8017dc0:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8017dc6:	617b      	str	r3, [r7, #20]
 8017dc8:	2300      	movs	r3, #0
 8017dca:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dd0:	4a22      	ldr	r2, [pc, #136]	@ (8017e5c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017dd2:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8017dd4:	4a21      	ldr	r2, [pc, #132]	@ (8017e5c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017dd6:	f107 0310 	add.w	r3, r7, #16
 8017dda:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8017ddc:	4b20      	ldr	r3, [pc, #128]	@ (8017e60 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	6a39      	ldr	r1, [r7, #32]
 8017de2:	4618      	mov	r0, r3
 8017de4:	f7eb fc84 	bl	80036f0 <xQueueSemaphoreTake>
 8017de8:	4603      	mov	r3, r0
 8017dea:	2b01      	cmp	r3, #1
 8017dec:	d003      	beq.n	8017df6 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 8017dee:	481d      	ldr	r0, [pc, #116]	@ (8017e64 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8017df0:	f009 fefa 	bl	8021be8 <lUDPLoggingPrintf>
 8017df4:	e025      	b.n	8017e42 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8017df6:	f3bf 8f4f 	dsb	sy
}
 8017dfa:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 8017dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8017e68 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	6a39      	ldr	r1, [r7, #32]
 8017e02:	4618      	mov	r0, r3
 8017e04:	f7eb fc74 	bl	80036f0 <xQueueSemaphoreTake>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d019      	beq.n	8017e42 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8017e12:	4912      	ldr	r1, [pc, #72]	@ (8017e5c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017e14:	4815      	ldr	r0, [pc, #84]	@ (8017e6c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8017e16:	f000 fcef 	bl	80187f8 <HAL_ETH_Transmit_IT>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d102      	bne.n	8017e26 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8017e20:	2301      	movs	r3, #1
 8017e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e24:	e006      	b.n	8017e34 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8017e26:	4b0e      	ldr	r3, [pc, #56]	@ (8017e60 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017e28:	6818      	ldr	r0, [r3, #0]
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	2100      	movs	r1, #0
 8017e30:	f7eb faa6 	bl	8003380 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8017e34:	4b0c      	ldr	r3, [pc, #48]	@ (8017e68 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017e36:	6818      	ldr	r0, [r3, #0]
 8017e38:	2300      	movs	r3, #0
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	2100      	movs	r1, #0
 8017e3e:	f7eb fa9f 	bl	8003380 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d002      	beq.n	8017e4e <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8017e48:	68b8      	ldr	r0, [r7, #8]
 8017e4a:	f7ff f825 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 8017e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017e50:	4618      	mov	r0, r3
 8017e52:	3728      	adds	r7, #40	@ 0x28
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}
 8017e58:	08026ff4 	.word	0x08026ff4
 8017e5c:	2000232c 	.word	0x2000232c
 8017e60:	200022b0 	.word	0x200022b0
 8017e64:	08027084 	.word	0x08027084
 8017e68:	200022b4 	.word	0x200022b4
 8017e6c:	200022b8 	.word	0x200022b8

08017e70 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8017e74:	4a06      	ldr	r2, [pc, #24]	@ (8017e90 <prvMACBProbePhy+0x20>)
 8017e76:	4907      	ldr	r1, [pc, #28]	@ (8017e94 <prvMACBProbePhy+0x24>)
 8017e78:	4807      	ldr	r0, [pc, #28]	@ (8017e98 <prvMACBProbePhy+0x28>)
 8017e7a:	f7ff f8c5 	bl	8017008 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 8017e7e:	4806      	ldr	r0, [pc, #24]	@ (8017e98 <prvMACBProbePhy+0x28>)
 8017e80:	f7ff f8d8 	bl	8017034 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8017e84:	4905      	ldr	r1, [pc, #20]	@ (8017e9c <prvMACBProbePhy+0x2c>)
 8017e86:	4804      	ldr	r0, [pc, #16]	@ (8017e98 <prvMACBProbePhy+0x28>)
 8017e88:	f7ff f9d2 	bl	8017230 <xPhyConfigure>
}
 8017e8c:	bf00      	nop
 8017e8e:	bd80      	pop	{r7, pc}
 8017e90:	08018091 	.word	0x08018091
 8017e94:	08018059 	.word	0x08018059
 8017e98:	20002368 	.word	0x20002368
 8017e9c:	08027384 	.word	0x08027384

08017ea0 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b09e      	sub	sp, #120	@ 0x78
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	677b      	str	r3, [r7, #116]	@ 0x74
 8017eac:	2300      	movs	r3, #0
 8017eae:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8017eb0:	4b25      	ldr	r3, [pc, #148]	@ (8017f48 <prvEthernetUpdateConfig+0xa8>)
 8017eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017eb4:	687a      	ldr	r2, [r7, #4]
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	4824      	ldr	r0, [pc, #144]	@ (8017f4c <prvEthernetUpdateConfig+0xac>)
 8017eba:	f009 fe95 	bl	8021be8 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d103      	bne.n	8017ecc <prvEthernetUpdateConfig+0x2c>
 8017ec4:	4b20      	ldr	r3, [pc, #128]	@ (8017f48 <prvEthernetUpdateConfig+0xa8>)
 8017ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d035      	beq.n	8017f38 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8017ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8017f48 <prvEthernetUpdateConfig+0xa8>)
 8017ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8017ed6:	3b01      	subs	r3, #1
 8017ed8:	4619      	mov	r1, r3
 8017eda:	481b      	ldr	r0, [pc, #108]	@ (8017f48 <prvEthernetUpdateConfig+0xa8>)
 8017edc:	f7ff faae 	bl	801743c <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8017ee0:	4b19      	ldr	r3, [pc, #100]	@ (8017f48 <prvEthernetUpdateConfig+0xa8>)
 8017ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8017ee6:	2b02      	cmp	r3, #2
 8017ee8:	d103      	bne.n	8017ef2 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8017eea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017eee:	673b      	str	r3, [r7, #112]	@ 0x70
 8017ef0:	e001      	b.n	8017ef6 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8017ef6:	4b14      	ldr	r3, [pc, #80]	@ (8017f48 <prvEthernetUpdateConfig+0xa8>)
 8017ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017efc:	2b01      	cmp	r3, #1
 8017efe:	d102      	bne.n	8017f06 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8017f00:	2300      	movs	r3, #0
 8017f02:	677b      	str	r3, [r7, #116]	@ 0x74
 8017f04:	e002      	b.n	8017f0c <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8017f06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017f0a:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017f0c:	f107 030c 	add.w	r3, r7, #12
 8017f10:	4619      	mov	r1, r3
 8017f12:	480f      	ldr	r0, [pc, #60]	@ (8017f50 <prvEthernetUpdateConfig+0xb0>)
 8017f14:	f000 ffcc 	bl	8018eb0 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8017f18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8017f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017f1e:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017f20:	f107 030c 	add.w	r3, r7, #12
 8017f24:	4619      	mov	r1, r3
 8017f26:	480a      	ldr	r0, [pc, #40]	@ (8017f50 <prvEthernetUpdateConfig+0xb0>)
 8017f28:	f001 f996 	bl	8019258 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8017f30:	4807      	ldr	r0, [pc, #28]	@ (8017f50 <prvEthernetUpdateConfig+0xb0>)
 8017f32:	f000 fb64 	bl	80185fe <HAL_ETH_Start_IT>
 8017f36:	e003      	b.n	8017f40 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017f38:	4805      	ldr	r0, [pc, #20]	@ (8017f50 <prvEthernetUpdateConfig+0xb0>)
 8017f3a:	f000 fbe5 	bl	8018708 <HAL_ETH_Stop_IT>
    }
}
 8017f3e:	bf00      	nop
 8017f40:	bf00      	nop
 8017f42:	3778      	adds	r7, #120	@ 0x78
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}
 8017f48:	20002368 	.word	0x20002368
 8017f4c:	080270bc 	.word	0x080270bc
 8017f50:	200022b8 	.word	0x200022b8

08017f54 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b08c      	sub	sp, #48	@ 0x30
 8017f58:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8017f62:	f107 0308 	add.w	r3, r7, #8
 8017f66:	4619      	mov	r1, r3
 8017f68:	4838      	ldr	r0, [pc, #224]	@ (801804c <prvNetworkInterfaceInput+0xf8>)
 8017f6a:	f000 fd19 	bl	80189a0 <HAL_ETH_GetRxData>
 8017f6e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8017f70:	69fb      	ldr	r3, [r7, #28]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d101      	bne.n	8017f7a <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8017f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f78:	e064      	b.n	8018044 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8017f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f7c:	3301      	adds	r3, #1
 8017f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8017f80:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8017f84:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d004      	beq.n	8017f96 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	4618      	mov	r0, r3
 8017f90:	f7f2 f8ab 	bl	800a0ea <pxPacketBuffer_to_NetworkBuffer>
 8017f94:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8017f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8017f9c:	482c      	ldr	r0, [pc, #176]	@ (8018050 <prvNetworkInterfaceInput+0xfc>)
 8017f9e:	f009 fe23 	bl	8021be8 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8017fa2:	2100      	movs	r1, #0
 8017fa4:	69b8      	ldr	r0, [r7, #24]
 8017fa6:	f7fe ff0f 	bl	8016dc8 <pxGetNetworkBufferWithDescriptor>
 8017faa:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8017fac:	697b      	ldr	r3, [r7, #20]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d102      	bne.n	8017fb8 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017fb6:	e005      	b.n	8017fc4 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8017fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d002      	beq.n	8017fc4 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8017fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fc0:	69fa      	ldr	r2, [r7, #28]
 8017fc2:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d002      	beq.n	8017fd4 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8017fce:	697b      	ldr	r3, [r7, #20]
 8017fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fd2:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8017fd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017fd6:	481d      	ldr	r0, [pc, #116]	@ (801804c <prvNetworkInterfaceInput+0xf8>)
 8017fd8:	f000 fd2a 	bl	8018a30 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8017fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d0bd      	beq.n	8017f5e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8017fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7f1 f9e4 	bl	80093b8 <eConsiderFrameForProcessing>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	d002      	beq.n	8017ffc <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8017ff6:	2301      	movs	r3, #1
 8017ff8:	623b      	str	r3, [r7, #32]
 8017ffa:	e01c      	b.n	8018036 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	703b      	strb	r3, [r7, #0]
 8018000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018002:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018004:	4b13      	ldr	r3, [pc, #76]	@ (8018054 <prvNetworkInterfaceInput+0x100>)
 8018006:	681a      	ldr	r2, [r3, #0]
 8018008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801800a:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 801800c:	4b11      	ldr	r3, [pc, #68]	@ (8018054 <prvNetworkInterfaceInput+0x100>)
 801800e:	681a      	ldr	r2, [r3, #0]
 8018010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018014:	4619      	mov	r1, r3
 8018016:	4610      	mov	r0, r2
 8018018:	f7f5 fb96 	bl	800d748 <FreeRTOS_MatchingEndpoint>
 801801c:	4602      	mov	r2, r0
 801801e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018020:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018022:	463b      	mov	r3, r7
 8018024:	2100      	movs	r1, #0
 8018026:	4618      	mov	r0, r3
 8018028:	f7f1 f972 	bl	8009310 <xSendEventStructToIPTask>
 801802c:	4603      	mov	r3, r0
 801802e:	2b00      	cmp	r3, #0
 8018030:	d101      	bne.n	8018036 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018032:	2301      	movs	r3, #1
 8018034:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018036:	6a3b      	ldr	r3, [r7, #32]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d090      	beq.n	8017f5e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 801803c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801803e:	f7fe ff2b 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
    {
 8018042:	e78c      	b.n	8017f5e <prvNetworkInterfaceInput+0xa>
}
 8018044:	4618      	mov	r0, r3
 8018046:	3730      	adds	r7, #48	@ 0x30
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}
 801804c:	200022b8 	.word	0x200022b8
 8018050:	080270f0 	.word	0x080270f0
 8018054:	20002360 	.word	0x20002360

08018058 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b086      	sub	sp, #24
 801805c:	af00      	add	r7, sp, #0
 801805e:	60f8      	str	r0, [r7, #12]
 8018060:	60b9      	str	r1, [r7, #8]
 8018062:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018064:	f04f 33ff 	mov.w	r3, #4294967295
 8018068:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	68ba      	ldr	r2, [r7, #8]
 801806e:	68f9      	ldr	r1, [r7, #12]
 8018070:	4806      	ldr	r0, [pc, #24]	@ (801808c <ETH_PHY_IO_ReadReg+0x34>)
 8018072:	f000 fe75 	bl	8018d60 <HAL_ETH_ReadPHYRegister>
 8018076:	4603      	mov	r3, r0
 8018078:	2b00      	cmp	r3, #0
 801807a:	d101      	bne.n	8018080 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 801807c:	2300      	movs	r3, #0
 801807e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018080:	697b      	ldr	r3, [r7, #20]
}
 8018082:	4618      	mov	r0, r3
 8018084:	3718      	adds	r7, #24
 8018086:	46bd      	mov	sp, r7
 8018088:	bd80      	pop	{r7, pc}
 801808a:	bf00      	nop
 801808c:	200022b8 	.word	0x200022b8

08018090 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b086      	sub	sp, #24
 8018094:	af00      	add	r7, sp, #0
 8018096:	60f8      	str	r0, [r7, #12]
 8018098:	60b9      	str	r1, [r7, #8]
 801809a:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 801809c:	f04f 33ff 	mov.w	r3, #4294967295
 80180a0:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	68ba      	ldr	r2, [r7, #8]
 80180a6:	68f9      	ldr	r1, [r7, #12]
 80180a8:	4806      	ldr	r0, [pc, #24]	@ (80180c4 <ETH_PHY_IO_WriteReg+0x34>)
 80180aa:	f000 fead 	bl	8018e08 <HAL_ETH_WritePHYRegister>
 80180ae:	4603      	mov	r3, r0
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d101      	bne.n	80180b8 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 80180b4:	2300      	movs	r3, #0
 80180b6:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 80180b8:	697b      	ldr	r3, [r7, #20]
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3718      	adds	r7, #24
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
 80180c2:	bf00      	nop
 80180c4:	200022b8 	.word	0x200022b8

080180c8 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 80180cc:	4802      	ldr	r0, [pc, #8]	@ (80180d8 <ETH_IRQHandler+0x10>)
 80180ce:	f000 fd27 	bl	8018b20 <HAL_ETH_IRQHandler>
}
 80180d2:	bf00      	nop
 80180d4:	bd80      	pop	{r7, pc}
 80180d6:	bf00      	nop
 80180d8:	200022b8 	.word	0x200022b8

080180dc <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80180e4:	2300      	movs	r3, #0
 80180e6:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 80180e8:	4b10      	ldr	r3, [pc, #64]	@ (801812c <prvSetFlagsAndNotify+0x50>)
 80180ea:	681a      	ldr	r2, [r3, #0]
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	4313      	orrs	r3, r2
 80180f0:	4a0e      	ldr	r2, [pc, #56]	@ (801812c <prvSetFlagsAndNotify+0x50>)
 80180f2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80180f4:	4b0e      	ldr	r3, [pc, #56]	@ (8018130 <prvSetFlagsAndNotify+0x54>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d012      	beq.n	8018122 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 80180fc:	4b0c      	ldr	r3, [pc, #48]	@ (8018130 <prvSetFlagsAndNotify+0x54>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f107 020c 	add.w	r2, r7, #12
 8018104:	2100      	movs	r1, #0
 8018106:	4618      	mov	r0, r3
 8018108:	f7ed fbd2 	bl	80058b0 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d007      	beq.n	8018122 <prvSetFlagsAndNotify+0x46>
 8018112:	4b08      	ldr	r3, [pc, #32]	@ (8018134 <prvSetFlagsAndNotify+0x58>)
 8018114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018118:	601a      	str	r2, [r3, #0]
 801811a:	f3bf 8f4f 	dsb	sy
 801811e:	f3bf 8f6f 	isb	sy
    }
}
 8018122:	bf00      	nop
 8018124:	3710      	adds	r7, #16
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	200022a8 	.word	0x200022a8
 8018130:	20002364 	.word	0x20002364
 8018134:	e000ed04 	.word	0xe000ed04

08018138 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b082      	sub	sp, #8
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8018140:	2002      	movs	r0, #2
 8018142:	f7ff ffcb 	bl	80180dc <prvSetFlagsAndNotify>
}
 8018146:	bf00      	nop
 8018148:	3708      	adds	r7, #8
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}

0801814e <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 801814e:	b580      	push	{r7, lr}
 8018150:	b082      	sub	sp, #8
 8018152:	af00      	add	r7, sp, #0
 8018154:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8018156:	2001      	movs	r0, #1
 8018158:	f7ff ffc0 	bl	80180dc <prvSetFlagsAndNotify>
}
 801815c:	bf00      	nop
 801815e:	3708      	adds	r7, #8
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}

08018164 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b082      	sub	sp, #8
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 801816c:	2004      	movs	r0, #4
 801816e:	f7ff ffb5 	bl	80180dc <prvSetFlagsAndNotify>
}
 8018172:	bf00      	nop
 8018174:	3708      	adds	r7, #8
 8018176:	46bd      	mov	sp, r7
 8018178:	bd80      	pop	{r7, pc}
	...

0801817c <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 801817c:	b480      	push	{r7}
 801817e:	b085      	sub	sp, #20
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8018184:	4b15      	ldr	r3, [pc, #84]	@ (80181dc <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8018186:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018188:	2300      	movs	r3, #0
 801818a:	60bb      	str	r3, [r7, #8]
 801818c:	e01c      	b.n	80181c8 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 801818e:	68ba      	ldr	r2, [r7, #8]
 8018190:	4613      	mov	r3, r2
 8018192:	00db      	lsls	r3, r3, #3
 8018194:	1a9b      	subs	r3, r3, r2
 8018196:	00db      	lsls	r3, r3, #3
 8018198:	461a      	mov	r2, r3
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	4413      	add	r3, r2
 801819e:	68fa      	ldr	r2, [r7, #12]
 80181a0:	320a      	adds	r2, #10
 80181a2:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 80181a4:	68ba      	ldr	r2, [r7, #8]
 80181a6:	4613      	mov	r3, r2
 80181a8:	00db      	lsls	r3, r3, #3
 80181aa:	1a9b      	subs	r3, r3, r2
 80181ac:	00db      	lsls	r3, r3, #3
 80181ae:	461a      	mov	r2, r3
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	4413      	add	r3, r2
 80181b4:	461a      	mov	r2, r3
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80181c0:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	3301      	adds	r3, #1
 80181c6:	60bb      	str	r3, [r7, #8]
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80181cc:	d9df      	bls.n	801818e <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 80181ce:	bf00      	nop
 80181d0:	bf00      	nop
 80181d2:	3714      	adds	r7, #20
 80181d4:	46bd      	mov	sp, r7
 80181d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181da:	4770      	bx	lr
 80181dc:	240400c0 	.word	0x240400c0

080181e0 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 80181ea:	f7ed fe19 	bl	8005e20 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681a      	ldr	r2, [r3, #0]
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	43db      	mvns	r3, r3
 80181f6:	401a      	ands	r2, r3
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 80181fc:	f7ed fe3c 	bl	8005e78 <vPortExitCritical>
}
 8018200:	bf00      	nop
 8018202:	3708      	adds	r7, #8
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}

08018208 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018208:	b480      	push	{r7}
 801820a:	b087      	sub	sp, #28
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018210:	2300      	movs	r3, #0
 8018212:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	3330      	adds	r3, #48	@ 0x30
 8018218:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 801821a:	2300      	movs	r3, #0
 801821c:	617b      	str	r3, [r7, #20]
 801821e:	e00e      	b.n	801823e <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	697a      	ldr	r2, [r7, #20]
 8018224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018228:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	68db      	ldr	r3, [r3, #12]
 801822e:	2b00      	cmp	r3, #0
 8018230:	da02      	bge.n	8018238 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	3301      	adds	r3, #1
 8018236:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018238:	697b      	ldr	r3, [r7, #20]
 801823a:	3301      	adds	r3, #1
 801823c:	617b      	str	r3, [r7, #20]
 801823e:	697b      	ldr	r3, [r7, #20]
 8018240:	2b03      	cmp	r3, #3
 8018242:	d9ed      	bls.n	8018220 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8018244:	693b      	ldr	r3, [r7, #16]
    }
 8018246:	4618      	mov	r0, r3
 8018248:	371c      	adds	r7, #28
 801824a:	46bd      	mov	sp, r7
 801824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018250:	4770      	bx	lr
	...

08018254 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b088      	sub	sp, #32
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 801825c:	2364      	movs	r3, #100	@ 0x64
 801825e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018260:	2300      	movs	r3, #0
 8018262:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018264:	2304      	movs	r3, #4
 8018266:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018268:	2300      	movs	r3, #0
 801826a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 801826c:	f7f2 f8d6 	bl	800a41c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018270:	4b43      	ldr	r3, [pc, #268]	@ (8018380 <prvEMACHandlerTask+0x12c>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4618      	mov	r0, r3
 8018276:	f7eb fb29 	bl	80038cc <uxQueueMessagesWaiting>
 801827a:	4603      	mov	r3, r0
 801827c:	f1c3 0304 	rsb	r3, r3, #4
 8018280:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018282:	69fa      	ldr	r2, [r7, #28]
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	429a      	cmp	r2, r3
 8018288:	d206      	bcs.n	8018298 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 801828e:	2204      	movs	r2, #4
 8018290:	69f9      	ldr	r1, [r7, #28]
 8018292:	483c      	ldr	r0, [pc, #240]	@ (8018384 <prvEMACHandlerTask+0x130>)
 8018294:	f009 fca8 	bl	8021be8 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8018298:	483b      	ldr	r0, [pc, #236]	@ (8018388 <prvEMACHandlerTask+0x134>)
 801829a:	f7ff ffb5 	bl	8018208 <uxGetOwnCount>
 801829e:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 80182a0:	69ba      	ldr	r2, [r7, #24]
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	429a      	cmp	r2, r3
 80182a6:	d906      	bls.n	80182b6 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 80182ac:	2204      	movs	r2, #4
 80182ae:	69b9      	ldr	r1, [r7, #24]
 80182b0:	4836      	ldr	r0, [pc, #216]	@ (801838c <prvEMACHandlerTask+0x138>)
 80182b2:	f009 fc99 	bl	8021be8 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 80182b6:	693a      	ldr	r2, [r7, #16]
 80182b8:	2100      	movs	r1, #0
 80182ba:	2000      	movs	r0, #0
 80182bc:	f7ec ff88 	bl	80051d0 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 80182c0:	4b33      	ldr	r3, [pc, #204]	@ (8018390 <prvEMACHandlerTask+0x13c>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	f003 0301 	and.w	r3, r3, #1
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d006      	beq.n	80182da <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 80182cc:	2101      	movs	r1, #1
 80182ce:	4830      	ldr	r0, [pc, #192]	@ (8018390 <prvEMACHandlerTask+0x13c>)
 80182d0:	f7ff ff86 	bl	80181e0 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 80182d4:	f7ff fe3e 	bl	8017f54 <prvNetworkInterfaceInput>
 80182d8:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 80182da:	4b2d      	ldr	r3, [pc, #180]	@ (8018390 <prvEMACHandlerTask+0x13c>)
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	f003 0302 	and.w	r3, r3, #2
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d017      	beq.n	8018316 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 80182e6:	2102      	movs	r1, #2
 80182e8:	4829      	ldr	r0, [pc, #164]	@ (8018390 <prvEMACHandlerTask+0x13c>)
 80182ea:	f7ff ff79 	bl	80181e0 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 80182ee:	4b29      	ldr	r3, [pc, #164]	@ (8018394 <prvEMACHandlerTask+0x140>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7eb f9fa 	bl	80036f0 <xQueueSemaphoreTake>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d009      	beq.n	8018316 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018302:	4821      	ldr	r0, [pc, #132]	@ (8018388 <prvEMACHandlerTask+0x134>)
 8018304:	f001 fb04 	bl	8019910 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8018308:	4b22      	ldr	r3, [pc, #136]	@ (8018394 <prvEMACHandlerTask+0x140>)
 801830a:	6818      	ldr	r0, [r3, #0]
 801830c:	2300      	movs	r3, #0
 801830e:	2200      	movs	r2, #0
 8018310:	2100      	movs	r1, #0
 8018312:	f7eb f835 	bl	8003380 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8018316:	4b1e      	ldr	r3, [pc, #120]	@ (8018390 <prvEMACHandlerTask+0x13c>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	f003 0304 	and.w	r3, r3, #4
 801831e:	2b00      	cmp	r3, #0
 8018320:	d00f      	beq.n	8018342 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8018322:	2104      	movs	r1, #4
 8018324:	481a      	ldr	r0, [pc, #104]	@ (8018390 <prvEMACHandlerTask+0x13c>)
 8018326:	f7ff ff5b 	bl	80181e0 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 801832a:	4b17      	ldr	r3, [pc, #92]	@ (8018388 <prvEMACHandlerTask+0x134>)
 801832c:	2210      	movs	r2, #16
 801832e:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018330:	4815      	ldr	r0, [pc, #84]	@ (8018388 <prvEMACHandlerTask+0x134>)
 8018332:	f000 f964 	bl	80185fe <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018336:	f7ff fe0d 	bl	8017f54 <prvNetworkInterfaceInput>
 801833a:	4602      	mov	r2, r0
 801833c:	697b      	ldr	r3, [r7, #20]
 801833e:	4413      	add	r3, r2
 8018340:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8018342:	6979      	ldr	r1, [r7, #20]
 8018344:	4814      	ldr	r0, [pc, #80]	@ (8018398 <prvEMACHandlerTask+0x144>)
 8018346:	f7ff fa25 	bl	8017794 <xPhyCheckLinkStatus>
 801834a:	4603      	mov	r3, r0
 801834c:	2b00      	cmp	r3, #0
 801834e:	d08b      	beq.n	8018268 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018350:	4b12      	ldr	r3, [pc, #72]	@ (801839c <prvEMACHandlerTask+0x148>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4618      	mov	r0, r3
 8018356:	f7ff fccf 	bl	8017cf8 <xSTM32H_GetPhyLinkStatus>
 801835a:	4603      	mov	r3, r0
 801835c:	2b00      	cmp	r3, #0
 801835e:	d10b      	bne.n	8018378 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018360:	4809      	ldr	r0, [pc, #36]	@ (8018388 <prvEMACHandlerTask+0x134>)
 8018362:	f000 f9d1 	bl	8018708 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018366:	2260      	movs	r2, #96	@ 0x60
 8018368:	2100      	movs	r1, #0
 801836a:	480d      	ldr	r0, [pc, #52]	@ (80183a0 <prvEMACHandlerTask+0x14c>)
 801836c:	f009 ff65 	bl	802223a <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018370:	4805      	ldr	r0, [pc, #20]	@ (8018388 <prvEMACHandlerTask+0x134>)
 8018372:	f001 facd 	bl	8019910 <ETH_Clear_Tx_Descriptors>
 8018376:	e777      	b.n	8018268 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018378:	2000      	movs	r0, #0
 801837a:	f7ff fd91 	bl	8017ea0 <prvEthernetUpdateConfig>
    {
 801837e:	e773      	b.n	8018268 <prvEMACHandlerTask+0x14>
 8018380:	200022b0 	.word	0x200022b0
 8018384:	08027114 	.word	0x08027114
 8018388:	200022b8 	.word	0x200022b8
 801838c:	0802712c 	.word	0x0802712c
 8018390:	200022a8 	.word	0x200022a8
 8018394:	200022b4 	.word	0x200022b4
 8018398:	20002368 	.word	0x20002368
 801839c:	20002360 	.word	0x20002360
 80183a0:	24040060 	.word	0x24040060

080183a4 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 80183a4:	b480      	push	{r7}
 80183a6:	b083      	sub	sp, #12
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	6078      	str	r0, [r7, #4]
 80183ac:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	683a      	ldr	r2, [r7, #0]
 80183b2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 80183b4:	bf00      	nop
 80183b6:	370c      	adds	r7, #12
 80183b8:	46bd      	mov	sp, r7
 80183ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183be:	4770      	bx	lr

080183c0 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b084      	sub	sp, #16
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d101      	bne.n	80183d2 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 80183ce:	2301      	movs	r3, #1
 80183d0:	e0d4      	b.n	801857c <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d102      	bne.n	80183e0 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 80183da:	6878      	ldr	r0, [r7, #4]
 80183dc:	f7e9 fce0 	bl	8001da0 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	2223      	movs	r2, #35	@ 0x23
 80183e4:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 80183e6:	4b67      	ldr	r3, [pc, #412]	@ (8018584 <HAL_ETH_Init+0x1c4>)
 80183e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80183ec:	4a65      	ldr	r2, [pc, #404]	@ (8018584 <HAL_ETH_Init+0x1c4>)
 80183ee:	f043 0302 	orr.w	r3, r3, #2
 80183f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80183f6:	4b63      	ldr	r3, [pc, #396]	@ (8018584 <HAL_ETH_Init+0x1c4>)
 80183f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80183fc:	f003 0302 	and.w	r3, r3, #2
 8018400:	60bb      	str	r3, [r7, #8]
 8018402:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	7a1b      	ldrb	r3, [r3, #8]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d103      	bne.n	8018414 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 801840c:	2000      	movs	r0, #0
 801840e:	f001 fc17 	bl	8019c40 <HAL_SYSCFG_ETHInterfaceSelect>
 8018412:	e003      	b.n	801841c <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8018414:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018418:	f001 fc12 	bl	8019c40 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	687a      	ldr	r2, [r7, #4]
 8018428:	6812      	ldr	r2, [r2, #0]
 801842a:	f043 0301 	orr.w	r3, r3, #1
 801842e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018432:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8018434:	f001 fbc8 	bl	8019bc8 <HAL_GetTick>
 8018438:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801843a:	e010      	b.n	801845e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 801843c:	f001 fbc4 	bl	8019bc8 <HAL_GetTick>
 8018440:	4602      	mov	r2, r0
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	1ad3      	subs	r3, r2, r3
 8018446:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801844a:	d908      	bls.n	801845e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2204      	movs	r2, #4
 8018450:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018452:	21e0      	movs	r1, #224	@ 0xe0
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	f7ff ffa5 	bl	80183a4 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 801845a:	2301      	movs	r3, #1
 801845c:	e08e      	b.n	801857c <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	f003 0301 	and.w	r3, r3, #1
 801846c:	2b00      	cmp	r3, #0
 801846e:	d1e5      	bne.n	801843c <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8018470:	6878      	ldr	r0, [r7, #4]
 8018472:	f001 f94b 	bl	801970c <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8018476:	f004 ff49 	bl	801d30c <HAL_RCC_GetHCLKFreq>
 801847a:	4603      	mov	r3, r0
 801847c:	4a42      	ldr	r2, [pc, #264]	@ (8018588 <HAL_ETH_Init+0x1c8>)
 801847e:	fba2 2303 	umull	r2, r3, r2, r3
 8018482:	0c9a      	lsrs	r2, r3, #18
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	3a01      	subs	r2, #1
 801848a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801848e:	6878      	ldr	r0, [r7, #4]
 8018490:	f001 f89e 	bl	80195d0 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801849c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80184a0:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	6812      	ldr	r2, [r2, #0]
 80184a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80184ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80184b0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	695b      	ldr	r3, [r3, #20]
 80184b8:	f003 0303 	and.w	r3, r3, #3
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d008      	beq.n	80184d2 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2201      	movs	r2, #1
 80184c4:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80184c6:	21e0      	movs	r1, #224	@ 0xe0
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f7ff ff6b 	bl	80183a4 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 80184ce:	2301      	movs	r3, #1
 80184d0:	e054      	b.n	801857c <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184da:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80184de:	4b2b      	ldr	r3, [pc, #172]	@ (801858c <HAL_ETH_Init+0x1cc>)
 80184e0:	4013      	ands	r3, r2
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	6952      	ldr	r2, [r2, #20]
 80184e6:	0051      	lsls	r1, r2, #1
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	6812      	ldr	r2, [r2, #0]
 80184ec:	430b      	orrs	r3, r1
 80184ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80184f2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f001 f960 	bl	80197bc <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	f001 f9a9 	bl	8019854 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	685b      	ldr	r3, [r3, #4]
 8018506:	3305      	adds	r3, #5
 8018508:	781b      	ldrb	r3, [r3, #0]
 801850a:	021a      	lsls	r2, r3, #8
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	3304      	adds	r3, #4
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	4619      	mov	r1, r3
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	430a      	orrs	r2, r1
 801851c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	685b      	ldr	r3, [r3, #4]
 8018524:	3303      	adds	r3, #3
 8018526:	781b      	ldrb	r3, [r3, #0]
 8018528:	061a      	lsls	r2, r3, #24
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	685b      	ldr	r3, [r3, #4]
 801852e:	3302      	adds	r3, #2
 8018530:	781b      	ldrb	r3, [r3, #0]
 8018532:	041b      	lsls	r3, r3, #16
 8018534:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	685b      	ldr	r3, [r3, #4]
 801853a:	3301      	adds	r3, #1
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018540:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	685b      	ldr	r3, [r3, #4]
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801854e:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018550:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2200      	movs	r2, #0
 8018558:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	2210      	movs	r2, #16
 801855e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2210      	movs	r2, #16
 8018564:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4a09      	ldr	r2, [pc, #36]	@ (8018590 <HAL_ETH_Init+0x1d0>)
 801856c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4a07      	ldr	r2, [pc, #28]	@ (8018594 <HAL_ETH_Init+0x1d4>)
 8018576:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 801857a:	2300      	movs	r3, #0
        }
 801857c:	4618      	mov	r0, r3
 801857e:	3710      	adds	r7, #16
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	58024400 	.word	0x58024400
 8018588:	431bde83 	.word	0x431bde83
 801858c:	ffff8001 	.word	0xffff8001
 8018590:	0c020060 	.word	0x0c020060
 8018594:	0c20c000 	.word	0x0c20c000

08018598 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8018598:	b480      	push	{r7}
 801859a:	b087      	sub	sp, #28
 801859c:	af00      	add	r7, sp, #0
 801859e:	60f8      	str	r0, [r7, #12]
 80185a0:	60b9      	str	r1, [r7, #8]
 80185a2:	607a      	str	r2, [r7, #4]
 80185a4:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	68ba      	ldr	r2, [r7, #8]
 80185aa:	320c      	adds	r2, #12
 80185ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185b0:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d002      	beq.n	80185be <HAL_ETH_DescAssignMemory+0x26>
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	2b03      	cmp	r3, #3
 80185bc:	d904      	bls.n	80185c8 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	2201      	movs	r2, #1
 80185c2:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 80185c4:	2301      	movs	r3, #1
 80185c6:	e014      	b.n	80185f2 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 80185c8:	687a      	ldr	r2, [r7, #4]
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 80185ce:	687a      	ldr	r2, [r7, #4]
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	68db      	ldr	r3, [r3, #12]
 80185d8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80185dc:	697b      	ldr	r3, [r7, #20]
 80185de:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 80185e0:	697b      	ldr	r3, [r7, #20]
 80185e2:	68db      	ldr	r3, [r3, #12]
 80185e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 80185f0:	2300      	movs	r3, #0
        }
 80185f2:	4618      	mov	r0, r3
 80185f4:	371c      	adds	r7, #28
 80185f6:	46bd      	mov	sp, r7
 80185f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fc:	4770      	bx	lr

080185fe <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 80185fe:	b480      	push	{r7}
 8018600:	b085      	sub	sp, #20
 8018602:	af00      	add	r7, sp, #0
 8018604:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801860a:	2b10      	cmp	r3, #16
 801860c:	d175      	bne.n	80186fa <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2223      	movs	r2, #35	@ 0x23
 8018612:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8018614:	2300      	movs	r3, #0
 8018616:	60fb      	str	r3, [r7, #12]
 8018618:	e00e      	b.n	8018638 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	68fa      	ldr	r2, [r7, #12]
 801861e:	320c      	adds	r2, #12
 8018620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018624:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018626:	68bb      	ldr	r3, [r7, #8]
 8018628:	68db      	ldr	r3, [r3, #12]
 801862a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801862e:	68bb      	ldr	r3, [r7, #8]
 8018630:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	3301      	adds	r3, #1
 8018636:	60fb      	str	r3, [r7, #12]
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2b03      	cmp	r3, #3
 801863c:	d9ed      	bls.n	801861a <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2201      	movs	r2, #1
 8018642:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	681a      	ldr	r2, [r3, #0]
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	f042 0202 	orr.w	r2, r2, #2
 8018652:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	681a      	ldr	r2, [r3, #0]
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	f042 0201 	orr.w	r2, r2, #1
 8018662:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	f042 0201 	orr.w	r2, r2, #1
 8018674:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018680:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	6812      	ldr	r2, [r2, #0]
 8018688:	f043 0301 	orr.w	r3, r3, #1
 801868c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018690:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801869c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80186a0:	687a      	ldr	r2, [r7, #4]
 80186a2:	6812      	ldr	r2, [r2, #0]
 80186a4:	f043 0301 	orr.w	r3, r3, #1
 80186a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80186ac:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80186b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80186bc:	687a      	ldr	r2, [r7, #4]
 80186be:	6812      	ldr	r2, [r2, #0]
 80186c0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80186c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80186c8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80186d4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681a      	ldr	r2, [r3, #0]
 80186dc:	f24d 0341 	movw	r3, #53313	@ 0xd041
 80186e0:	430b      	orrs	r3, r1
 80186e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80186e6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	2210      	movs	r2, #16
 80186ee:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2222      	movs	r2, #34	@ 0x22
 80186f4:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 80186f6:	2300      	movs	r3, #0
 80186f8:	e000      	b.n	80186fc <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 80186fa:	2301      	movs	r3, #1
            }
        }
 80186fc:	4618      	mov	r0, r3
 80186fe:	3714      	adds	r7, #20
 8018700:	46bd      	mov	sp, r7
 8018702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018706:	4770      	bx	lr

08018708 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8018708:	b480      	push	{r7}
 801870a:	b085      	sub	sp, #20
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018714:	2b00      	cmp	r3, #0
 8018716:	d066      	beq.n	80187e6 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2223      	movs	r2, #35	@ 0x23
 801871c:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018726:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681a      	ldr	r2, [r3, #0]
 801872e:	4b31      	ldr	r3, [pc, #196]	@ (80187f4 <HAL_ETH_Stop_IT+0xec>)
 8018730:	400b      	ands	r3, r1
 8018732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018736:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018742:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018746:	687a      	ldr	r2, [r7, #4]
 8018748:	6812      	ldr	r2, [r2, #0]
 801874a:	f023 0301 	bic.w	r3, r3, #1
 801874e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018752:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801875e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018762:	687a      	ldr	r2, [r7, #4]
 8018764:	6812      	ldr	r2, [r2, #0]
 8018766:	f023 0301 	bic.w	r3, r3, #1
 801876a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801876e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	681a      	ldr	r2, [r3, #0]
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	f022 0201 	bic.w	r2, r2, #1
 8018780:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	f042 0201 	orr.w	r2, r2, #1
 8018792:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	681a      	ldr	r2, [r3, #0]
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	f022 0202 	bic.w	r2, r2, #2
 80187a4:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 80187a6:	2300      	movs	r3, #0
 80187a8:	60fb      	str	r3, [r7, #12]
 80187aa:	e00e      	b.n	80187ca <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	68fa      	ldr	r2, [r7, #12]
 80187b0:	320c      	adds	r2, #12
 80187b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187b6:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 80187b8:	68bb      	ldr	r3, [r7, #8]
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	3301      	adds	r3, #1
 80187c8:	60fb      	str	r3, [r7, #12]
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	2b03      	cmp	r3, #3
 80187ce:	d9ed      	bls.n	80187ac <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2200      	movs	r2, #0
 80187d4:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	2210      	movs	r2, #16
 80187da:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2210      	movs	r2, #16
 80187e0:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 80187e2:	2300      	movs	r3, #0
 80187e4:	e000      	b.n	80187e8 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 80187e6:	2301      	movs	r3, #1
            }
        }
 80187e8:	4618      	mov	r0, r3
 80187ea:	3714      	adds	r7, #20
 80187ec:	46bd      	mov	sp, r7
 80187ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f2:	4770      	bx	lr
 80187f4:	ffff2fbe 	.word	0xffff2fbe

080187f8 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
 8018800:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 8018802:	683b      	ldr	r3, [r7, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d107      	bne.n	8018818 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801880c:	f043 0201 	orr.w	r2, r3, #1
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8018814:	2301      	movs	r3, #1
 8018816:	e039      	b.n	801888c <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801881c:	2b10      	cmp	r3, #16
 801881e:	d134      	bne.n	801888a <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 8018820:	2201      	movs	r2, #1
 8018822:	6839      	ldr	r1, [r7, #0]
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f001 f8c1 	bl	80199ac <ETH_Prepare_Tx_Descriptors>
 801882a:	4603      	mov	r3, r0
 801882c:	2b00      	cmp	r3, #0
 801882e:	d007      	beq.n	8018840 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018834:	f043 0202 	orr.w	r2, r3, #2
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 801883c:	2301      	movs	r3, #1
 801883e:	e025      	b.n	801888c <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018844:	1c5a      	adds	r2, r3, #1
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	629a      	str	r2, [r3, #40]	@ 0x28
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801884e:	2b03      	cmp	r3, #3
 8018850:	d904      	bls.n	801885c <HAL_ETH_Transmit_IT+0x64>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018856:	1f1a      	subs	r2, r3, #4
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681a      	ldr	r2, [r3, #0]
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	3106      	adds	r1, #6
 8018868:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801886c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018870:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8018874:	f3bf 8f4f 	dsb	sy
}
 8018878:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018882:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8018886:	2300      	movs	r3, #0
 8018888:	e000      	b.n	801888c <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 801888a:	2301      	movs	r3, #1
            }
        }
 801888c:	4618      	mov	r0, r3
 801888e:	3708      	adds	r7, #8
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}

08018894 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8018894:	b580      	push	{r7, lr}
 8018896:	b08a      	sub	sp, #40	@ 0x28
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	3330      	adds	r3, #48	@ 0x30
 80188a0:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	691b      	ldr	r3, [r3, #16]
 80188a6:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80188a8:	69bb      	ldr	r3, [r7, #24]
 80188aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188b0:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 80188b2:	2300      	movs	r3, #0
 80188b4:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 80188b6:	2300      	movs	r3, #0
 80188b8:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 80188ba:	2300      	movs	r3, #0
 80188bc:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 80188be:	e055      	b.n	801896c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 80188c6:	6a3b      	ldr	r3, [r7, #32]
 80188c8:	3301      	adds	r3, #1
 80188ca:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d006      	beq.n	80188e4 <HAL_ETH_IsRxDataAvailable+0x50>
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d001      	beq.n	80188e4 <HAL_ETH_IsRxDataAvailable+0x50>
 80188e0:	2301      	movs	r3, #1
 80188e2:	e000      	b.n	80188e6 <HAL_ETH_IsRxDataAvailable+0x52>
 80188e4:	2300      	movs	r3, #0
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d104      	bne.n	80188f4 <HAL_ETH_IsRxDataAvailable+0x60>
 80188ea:	f240 4195 	movw	r1, #1173	@ 0x495
 80188ee:	482b      	ldr	r0, [pc, #172]	@ (801899c <HAL_ETH_IsRxDataAvailable+0x108>)
 80188f0:	f7e8 ff3c 	bl	800176c <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d036      	beq.n	801896c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 80188fe:	693b      	ldr	r3, [r7, #16]
 8018900:	3301      	adds	r3, #1
 8018902:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8018904:	693b      	ldr	r3, [r7, #16]
 8018906:	2b01      	cmp	r3, #1
 8018908:	d101      	bne.n	801890e <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 801890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801890c:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 801890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018910:	3301      	adds	r3, #1
 8018912:	627b      	str	r3, [r7, #36]	@ 0x24
 8018914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018916:	2b03      	cmp	r3, #3
 8018918:	d902      	bls.n	8018920 <HAL_ETH_IsRxDataAvailable+0x8c>
 801891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801891c:	3b04      	subs	r3, #4
 801891e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018920:	69bb      	ldr	r3, [r7, #24]
 8018922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018928:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 801892a:	697b      	ldr	r3, [r7, #20]
 801892c:	68db      	ldr	r3, [r3, #12]
 801892e:	2b00      	cmp	r3, #0
 8018930:	db11      	blt.n	8018956 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8018932:	697b      	ldr	r3, [r7, #20]
 8018934:	68db      	ldr	r3, [r3, #12]
 8018936:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801893a:	2b00      	cmp	r3, #0
 801893c:	d00b      	beq.n	8018956 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 801893e:	69bb      	ldr	r3, [r7, #24]
 8018940:	2201      	movs	r2, #1
 8018942:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8018944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018946:	3301      	adds	r3, #1
 8018948:	627b      	str	r3, [r7, #36]	@ 0x24
 801894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801894c:	2b03      	cmp	r3, #3
 801894e:	d902      	bls.n	8018956 <HAL_ETH_IsRxDataAvailable+0xc2>
 8018950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018952:	3b04      	subs	r3, #4
 8018954:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8018956:	69bb      	ldr	r3, [r7, #24]
 8018958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801895a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 801895c:	69bb      	ldr	r3, [r7, #24]
 801895e:	69fa      	ldr	r2, [r7, #28]
 8018960:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8018962:	69bb      	ldr	r3, [r7, #24]
 8018964:	693a      	ldr	r2, [r7, #16]
 8018966:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8018968:	2301      	movs	r3, #1
 801896a:	e012      	b.n	8018992 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	68db      	ldr	r3, [r3, #12]
 8018970:	2b00      	cmp	r3, #0
 8018972:	db02      	blt.n	801897a <HAL_ETH_IsRxDataAvailable+0xe6>
 8018974:	6a3b      	ldr	r3, [r7, #32]
 8018976:	2b03      	cmp	r3, #3
 8018978:	d9a2      	bls.n	80188c0 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 801897a:	693b      	ldr	r3, [r7, #16]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d004      	beq.n	801898a <HAL_ETH_IsRxDataAvailable+0xf6>
 8018980:	f240 41db 	movw	r1, #1243	@ 0x4db
 8018984:	4805      	ldr	r0, [pc, #20]	@ (801899c <HAL_ETH_IsRxDataAvailable+0x108>)
 8018986:	f7e8 fef1 	bl	800176c <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 801898a:	69bb      	ldr	r3, [r7, #24]
 801898c:	2200      	movs	r2, #0
 801898e:	619a      	str	r2, [r3, #24]

            return 0;
 8018990:	2300      	movs	r3, #0
        }
 8018992:	4618      	mov	r0, r3
 8018994:	3728      	adds	r7, #40	@ 0x28
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}
 801899a:	bf00      	nop
 801899c:	08027144 	.word	0x08027144

080189a0 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b086      	sub	sp, #24
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
 80189a8:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	3330      	adds	r3, #48	@ 0x30
 80189ae:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d104      	bne.n	80189c0 <HAL_ETH_GetRxData+0x20>
 80189b6:	f240 511f 	movw	r1, #1311	@ 0x51f
 80189ba:	481c      	ldr	r0, [pc, #112]	@ (8018a2c <HAL_ETH_GetRxData+0x8c>)
 80189bc:	f7e8 fed6 	bl	800176c <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f7ff ff67 	bl	8018894 <HAL_ETH_IsRxDataAvailable>
 80189c6:	4603      	mov	r3, r0
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d101      	bne.n	80189d0 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 80189cc:	2300      	movs	r3, #0
 80189ce:	e028      	b.n	8018a22 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	695b      	ldr	r3, [r3, #20]
 80189d4:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80189d6:	697b      	ldr	r3, [r7, #20]
 80189d8:	693a      	ldr	r2, [r7, #16]
 80189da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80189de:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 80189e0:	697b      	ldr	r3, [r7, #20]
 80189e2:	699b      	ldr	r3, [r3, #24]
 80189e4:	2b01      	cmp	r3, #1
 80189e6:	d004      	beq.n	80189f2 <HAL_ETH_GetRxData+0x52>
 80189e8:	f240 512a 	movw	r1, #1322	@ 0x52a
 80189ec:	480f      	ldr	r0, [pc, #60]	@ (8018a2c <HAL_ETH_GetRxData+0x8c>)
 80189ee:	f7e8 febd 	bl	800176c <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	68db      	ldr	r3, [r3, #12]
 80189f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80189fa:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	691b      	ldr	r3, [r3, #16]
 8018a00:	461a      	mov	r2, r3
 8018a02:	683b      	ldr	r3, [r7, #0]
 8018a04:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	68ba      	ldr	r2, [r7, #8]
 8018a0a:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	695b      	ldr	r3, [r3, #20]
 8018a10:	68ba      	ldr	r2, [r7, #8]
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d904      	bls.n	8018a20 <HAL_ETH_GetRxData+0x80>
 8018a16:	f240 5133 	movw	r1, #1331	@ 0x533
 8018a1a:	4804      	ldr	r0, [pc, #16]	@ (8018a2c <HAL_ETH_GetRxData+0x8c>)
 8018a1c:	f7e8 fea6 	bl	800176c <vAssertCalled>

            return packet_length;
 8018a20:	68bb      	ldr	r3, [r7, #8]
        }
 8018a22:	4618      	mov	r0, r3
 8018a24:	3718      	adds	r7, #24
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}
 8018a2a:	bf00      	nop
 8018a2c:	08027144 	.word	0x08027144

08018a30 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 8018a30:	b480      	push	{r7}
 8018a32:	b08b      	sub	sp, #44	@ 0x2c
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
 8018a38:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	3330      	adds	r3, #48	@ 0x30
 8018a3e:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	695b      	ldr	r3, [r3, #20]
 8018a44:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a4e:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	699b      	ldr	r3, [r3, #24]
 8018a54:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	699b      	ldr	r3, [r3, #24]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d101      	bne.n	8018a62 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 8018a5e:	2301      	movs	r3, #1
 8018a60:	e057      	b.n	8018b12 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	69db      	ldr	r3, [r3, #28]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d002      	beq.n	8018a70 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 8018a6a:	69fb      	ldr	r3, [r7, #28]
 8018a6c:	3301      	adds	r3, #1
 8018a6e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018a70:	2300      	movs	r3, #0
 8018a72:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8018a74:	683b      	ldr	r3, [r7, #0]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d005      	beq.n	8018a86 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 8018a7e:	683a      	ldr	r2, [r7, #0]
 8018a80:	6a3b      	ldr	r3, [r7, #32]
 8018a82:	611a      	str	r2, [r3, #16]
 8018a84:	e002      	b.n	8018a8c <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8018a86:	6a3b      	ldr	r3, [r7, #32]
 8018a88:	691b      	ldr	r3, [r3, #16]
 8018a8a:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8018a8c:	693a      	ldr	r2, [r7, #16]
 8018a8e:	6a3b      	ldr	r3, [r7, #32]
 8018a90:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8018a92:	6a3b      	ldr	r3, [r7, #32]
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018a9c:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	6a1b      	ldr	r3, [r3, #32]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d003      	beq.n	8018aae <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8018aac:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018ab4:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8018ab6:	6a3b      	ldr	r3, [r7, #32]
 8018ab8:	697a      	ldr	r2, [r7, #20]
 8018aba:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8018abc:	f3bf 8f4f 	dsb	sy
}
 8018ac0:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8018ac2:	6a3b      	ldr	r3, [r7, #32]
 8018ac4:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8018ac6:	69fb      	ldr	r3, [r7, #28]
 8018ac8:	3b01      	subs	r3, #1
 8018aca:	69ba      	ldr	r2, [r7, #24]
 8018acc:	429a      	cmp	r2, r3
 8018ace:	d211      	bcs.n	8018af4 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8018ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad2:	3301      	adds	r3, #1
 8018ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad8:	2b03      	cmp	r3, #3
 8018ada:	d902      	bls.n	8018ae2 <HAL_ETH_BuildRxDescriptors+0xb2>
 8018adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ade:	3b04      	subs	r3, #4
 8018ae0:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018aea:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018aec:	69bb      	ldr	r3, [r7, #24]
 8018aee:	3301      	adds	r3, #1
 8018af0:	61bb      	str	r3, [r7, #24]
            {
 8018af2:	e7bf      	b.n	8018a74 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8018af4:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681a      	ldr	r2, [r3, #0]
 8018afa:	6a3b      	ldr	r3, [r7, #32]
 8018afc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018b00:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	2200      	movs	r2, #0
 8018b08:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 8018b10:	2300      	movs	r3, #0
        }
 8018b12:	4618      	mov	r0, r3
 8018b14:	372c      	adds	r7, #44	@ 0x2c
 8018b16:	46bd      	mov	sp, r7
 8018b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1c:	4770      	bx	lr
	...

08018b20 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b082      	sub	sp, #8
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b30:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018b38:	2b40      	cmp	r3, #64	@ 0x40
 8018b3a:	d115      	bne.n	8018b68 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b44:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018b4c:	2b40      	cmp	r3, #64	@ 0x40
 8018b4e:	d10b      	bne.n	8018b68 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018b50:	6878      	ldr	r0, [r7, #4]
 8018b52:	f7ff fafc 	bl	801814e <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b5e:	461a      	mov	r2, r3
 8018b60:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018b64:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b70:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018b74:	f003 0301 	and.w	r3, r3, #1
 8018b78:	2b01      	cmp	r3, #1
 8018b7a:	d115      	bne.n	8018ba8 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b84:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018b88:	f003 0301 	and.w	r3, r3, #1
 8018b8c:	2b01      	cmp	r3, #1
 8018b8e:	d10b      	bne.n	8018ba8 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	f7ff fad1 	bl	8018138 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b9e:	461a      	mov	r2, r3
 8018ba0:	f248 0301 	movw	r3, #32769	@ 0x8001
 8018ba4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018bb0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018bb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018bbc:	d14f      	bne.n	8018c5e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018bc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018bce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018bd2:	d144      	bne.n	8018c5e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018bd8:	f043 0208 	orr.w	r2, r3, #8
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018be8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018bf4:	d11d      	bne.n	8018c32 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018bfe:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8018c02:	f241 1302 	movw	r3, #4354	@ 0x1102
 8018c06:	4013      	ands	r3, r2
 8018c08:	687a      	ldr	r2, [r7, #4]
 8018c0a:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c14:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018c18:	687a      	ldr	r2, [r7, #4]
 8018c1a:	6812      	ldr	r2, [r2, #0]
 8018c1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8018c20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c24:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018c28:	21e0      	movs	r1, #224	@ 0xe0
 8018c2a:	6878      	ldr	r0, [r7, #4]
 8018c2c:	f7ff fbba 	bl	80183a4 <set_error_state>
 8018c30:	e012      	b.n	8018c58 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c3a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018c3e:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c4e:	461a      	mov	r2, r3
 8018c50:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018c54:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f7ff fa83 	bl	8018164 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018c66:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8018c6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8018c6e:	d10f      	bne.n	8018c90 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018c7c:	21e0      	movs	r1, #224	@ 0xe0
 8018c7e:	6878      	ldr	r0, [r7, #4]
 8018c80:	f7ff fb90 	bl	80183a4 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f000 f843 	bl	8018d10 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018c98:	f003 0310 	and.w	r3, r3, #16
 8018c9c:	2b10      	cmp	r3, #16
 8018c9e:	d10d      	bne.n	8018cbc <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018ca8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f000 f837 	bl	8018d24 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	2200      	movs	r2, #0
 8018cba:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018cc4:	f003 0320 	and.w	r3, r3, #32
 8018cc8:	2b20      	cmp	r3, #32
 8018cca:	d10d      	bne.n	8018ce8 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018cd4:	f003 020f 	and.w	r2, r3, #15
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 8018cdc:	6878      	ldr	r0, [r7, #4]
 8018cde:	f000 f82b 	bl	8018d38 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8018ce8:	4b08      	ldr	r3, [pc, #32]	@ (8018d0c <HAL_ETH_IRQHandler+0x1ec>)
 8018cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d006      	beq.n	8018d02 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8018cf4:	4b05      	ldr	r3, [pc, #20]	@ (8018d0c <HAL_ETH_IRQHandler+0x1ec>)
 8018cf6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8018cfa:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 8018cfc:	6878      	ldr	r0, [r7, #4]
 8018cfe:	f000 f825 	bl	8018d4c <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8018d02:	bf00      	nop
 8018d04:	3708      	adds	r7, #8
 8018d06:	46bd      	mov	sp, r7
 8018d08:	bd80      	pop	{r7, pc}
 8018d0a:	bf00      	nop
 8018d0c:	58000080 	.word	0x58000080

08018d10 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8018d10:	b480      	push	{r7}
 8018d12:	b083      	sub	sp, #12
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8018d18:	bf00      	nop
 8018d1a:	370c      	adds	r7, #12
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d22:	4770      	bx	lr

08018d24 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8018d24:	b480      	push	{r7}
 8018d26:	b083      	sub	sp, #12
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8018d2c:	bf00      	nop
 8018d2e:	370c      	adds	r7, #12
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr

08018d38 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8018d38:	b480      	push	{r7}
 8018d3a:	b083      	sub	sp, #12
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8018d40:	bf00      	nop
 8018d42:	370c      	adds	r7, #12
 8018d44:	46bd      	mov	sp, r7
 8018d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4a:	4770      	bx	lr

08018d4c <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8018d4c:	b480      	push	{r7}
 8018d4e:	b083      	sub	sp, #12
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8018d54:	bf00      	nop
 8018d56:	370c      	adds	r7, #12
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5e:	4770      	bx	lr

08018d60 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b086      	sub	sp, #24
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	60f8      	str	r0, [r7, #12]
 8018d68:	60b9      	str	r1, [r7, #8]
 8018d6a:	607a      	str	r2, [r7, #4]
 8018d6c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018d76:	f003 0301 	and.w	r3, r3, #1
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d001      	beq.n	8018d82 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 8018d7e:	2301      	movs	r3, #1
 8018d80:	e03e      	b.n	8018e00 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018d8a:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	055b      	lsls	r3, r3, #21
 8018d96:	4313      	orrs	r3, r2
 8018d98:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	041b      	lsls	r3, r3, #16
 8018da4:	4313      	orrs	r3, r2
 8018da6:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	f043 030c 	orr.w	r3, r3, #12
 8018dae:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018db0:	697b      	ldr	r3, [r7, #20]
 8018db2:	f043 0301 	orr.w	r3, r3, #1
 8018db6:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	697a      	ldr	r2, [r7, #20]
 8018dbe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018dc2:	f000 ff01 	bl	8019bc8 <HAL_GetTick>
 8018dc6:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018dc8:	e009      	b.n	8018dde <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018dca:	f000 fefd 	bl	8019bc8 <HAL_GetTick>
 8018dce:	4602      	mov	r2, r0
 8018dd0:	693b      	ldr	r3, [r7, #16]
 8018dd2:	1ad3      	subs	r3, r2, r3
 8018dd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018dd8:	d901      	bls.n	8018dde <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8018dda:	2301      	movs	r3, #1
 8018ddc:	e010      	b.n	8018e00 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018de6:	f003 0301 	and.w	r3, r3, #1
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d1ed      	bne.n	8018dca <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018df6:	b29b      	uxth	r3, r3
 8018df8:	461a      	mov	r2, r3
 8018dfa:	683b      	ldr	r3, [r7, #0]
 8018dfc:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 8018dfe:	2300      	movs	r3, #0
        }
 8018e00:	4618      	mov	r0, r3
 8018e02:	3718      	adds	r7, #24
 8018e04:	46bd      	mov	sp, r7
 8018e06:	bd80      	pop	{r7, pc}

08018e08 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b086      	sub	sp, #24
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	60f8      	str	r0, [r7, #12]
 8018e10:	60b9      	str	r1, [r7, #8]
 8018e12:	607a      	str	r2, [r7, #4]
 8018e14:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018e1e:	f003 0301 	and.w	r3, r3, #1
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d001      	beq.n	8018e2a <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8018e26:	2301      	movs	r3, #1
 8018e28:	e03c      	b.n	8018ea4 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018e32:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018e3a:	68bb      	ldr	r3, [r7, #8]
 8018e3c:	055b      	lsls	r3, r3, #21
 8018e3e:	4313      	orrs	r3, r2
 8018e40:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018e42:	697b      	ldr	r3, [r7, #20]
 8018e44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	041b      	lsls	r3, r3, #16
 8018e4c:	4313      	orrs	r3, r2
 8018e4e:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8018e50:	697b      	ldr	r3, [r7, #20]
 8018e52:	f023 030c 	bic.w	r3, r3, #12
 8018e56:	f043 0304 	orr.w	r3, r3, #4
 8018e5a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	f043 0301 	orr.w	r3, r3, #1
 8018e62:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8018e64:	683b      	ldr	r3, [r7, #0]
 8018e66:	b29a      	uxth	r2, r3
 8018e68:	4b10      	ldr	r3, [pc, #64]	@ (8018eac <HAL_ETH_WritePHYRegister+0xa4>)
 8018e6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8018e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8018eac <HAL_ETH_WritePHYRegister+0xa4>)
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018e76:	f000 fea7 	bl	8019bc8 <HAL_GetTick>
 8018e7a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018e7c:	e009      	b.n	8018e92 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018e7e:	f000 fea3 	bl	8019bc8 <HAL_GetTick>
 8018e82:	4602      	mov	r2, r0
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	1ad3      	subs	r3, r2, r3
 8018e88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018e8c:	d901      	bls.n	8018e92 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8018e8e:	2301      	movs	r3, #1
 8018e90:	e008      	b.n	8018ea4 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018e9a:	f003 0301 	and.w	r3, r3, #1
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d1ed      	bne.n	8018e7e <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8018ea2:	2300      	movs	r3, #0
        }
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3718      	adds	r7, #24
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}
 8018eac:	40028000 	.word	0x40028000

08018eb0 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018eb0:	b480      	push	{r7}
 8018eb2:	b083      	sub	sp, #12
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
 8018eb8:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d101      	bne.n	8018ec4 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	e1c3      	b.n	801924c <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	f003 020c 	and.w	r2, r3, #12
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	f003 0310 	and.w	r3, r3, #16
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	bf14      	ite	ne
 8018ee0:	2301      	movne	r3, #1
 8018ee2:	2300      	moveq	r3, #0
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	461a      	mov	r2, r3
 8018ee8:	683b      	ldr	r3, [r7, #0]
 8018eea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	bf0c      	ite	eq
 8018f0a:	2301      	moveq	r3, #1
 8018f0c:	2300      	movne	r3, #0
 8018f0e:	b2db      	uxtb	r3, r3
 8018f10:	461a      	mov	r2, r3
 8018f12:	683b      	ldr	r3, [r7, #0]
 8018f14:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	bf14      	ite	ne
 8018f26:	2301      	movne	r3, #1
 8018f28:	2300      	moveq	r3, #0
 8018f2a:	b2db      	uxtb	r3, r3
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	bf0c      	ite	eq
 8018f40:	2301      	moveq	r3, #1
 8018f42:	2300      	movne	r3, #0
 8018f44:	b2db      	uxtb	r3, r3
 8018f46:	461a      	mov	r2, r3
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	bf14      	ite	ne
 8018f5a:	2301      	movne	r3, #1
 8018f5c:	2300      	moveq	r3, #0
 8018f5e:	b2db      	uxtb	r3, r3
 8018f60:	461a      	mov	r2, r3
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	bf14      	ite	ne
 8018f74:	2301      	movne	r3, #1
 8018f76:	2300      	moveq	r3, #0
 8018f78:	b2db      	uxtb	r3, r3
 8018f7a:	461a      	mov	r2, r3
 8018f7c:	683b      	ldr	r3, [r7, #0]
 8018f7e:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	bf14      	ite	ne
 8018faa:	2301      	movne	r3, #1
 8018fac:	2300      	moveq	r3, #0
 8018fae:	b2db      	uxtb	r3, r3
 8018fb0:	461a      	mov	r2, r3
 8018fb2:	683b      	ldr	r3, [r7, #0]
 8018fb4:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	bf0c      	ite	eq
 8018fc4:	2301      	moveq	r3, #1
 8018fc6:	2300      	movne	r3, #0
 8018fc8:	b2db      	uxtb	r3, r3
 8018fca:	461a      	mov	r2, r3
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	bf0c      	ite	eq
 8018fde:	2301      	moveq	r3, #1
 8018fe0:	2300      	movne	r3, #0
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	bf14      	ite	ne
 8018ff8:	2301      	movne	r3, #1
 8018ffa:	2300      	moveq	r3, #0
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	461a      	mov	r2, r3
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801900e:	2b00      	cmp	r3, #0
 8019010:	bf14      	ite	ne
 8019012:	2301      	movne	r3, #1
 8019014:	2300      	moveq	r3, #0
 8019016:	b2db      	uxtb	r3, r3
 8019018:	461a      	mov	r2, r3
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019028:	2b00      	cmp	r3, #0
 801902a:	bf14      	ite	ne
 801902c:	2301      	movne	r3, #1
 801902e:	2300      	moveq	r3, #0
 8019030:	b2db      	uxtb	r3, r3
 8019032:	461a      	mov	r2, r3
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019042:	2b00      	cmp	r3, #0
 8019044:	bf14      	ite	ne
 8019046:	2301      	movne	r3, #1
 8019048:	2300      	moveq	r3, #0
 801904a:	b2db      	uxtb	r3, r3
 801904c:	461a      	mov	r2, r3
 801904e:	683b      	ldr	r3, [r7, #0]
 8019050:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801906a:	2b00      	cmp	r3, #0
 801906c:	bf14      	ite	ne
 801906e:	2301      	movne	r3, #1
 8019070:	2300      	moveq	r3, #0
 8019072:	b2db      	uxtb	r3, r3
 8019074:	461a      	mov	r2, r3
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8019084:	683b      	ldr	r3, [r7, #0]
 8019086:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	685b      	ldr	r3, [r3, #4]
 801908e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	685b      	ldr	r3, [r3, #4]
 801909c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	bf0c      	ite	eq
 80190a4:	2301      	moveq	r3, #1
 80190a6:	2300      	movne	r3, #0
 80190a8:	b2db      	uxtb	r3, r3
 80190aa:	461a      	mov	r2, r3
 80190ac:	683b      	ldr	r3, [r7, #0]
 80190ae:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	685b      	ldr	r3, [r3, #4]
 80190b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80190bc:	2b00      	cmp	r3, #0
 80190be:	bf14      	ite	ne
 80190c0:	2301      	movne	r3, #1
 80190c2:	2300      	moveq	r3, #0
 80190c4:	b2db      	uxtb	r3, r3
 80190c6:	461a      	mov	r2, r3
 80190c8:	683b      	ldr	r3, [r7, #0]
 80190ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	685b      	ldr	r3, [r3, #4]
 80190d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80190d8:	2b00      	cmp	r3, #0
 80190da:	bf14      	ite	ne
 80190dc:	2301      	movne	r3, #1
 80190de:	2300      	moveq	r3, #0
 80190e0:	b2db      	uxtb	r3, r3
 80190e2:	461a      	mov	r2, r3
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	685b      	ldr	r3, [r3, #4]
 80190f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	bf14      	ite	ne
 80190f8:	2301      	movne	r3, #1
 80190fa:	2300      	moveq	r3, #0
 80190fc:	b2db      	uxtb	r3, r3
 80190fe:	461a      	mov	r2, r3
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	685b      	ldr	r3, [r3, #4]
 801910c:	0e5b      	lsrs	r3, r3, #25
 801910e:	f003 021f 	and.w	r2, r3, #31
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	68db      	ldr	r3, [r3, #12]
 801911c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019120:	2b00      	cmp	r3, #0
 8019122:	bf14      	ite	ne
 8019124:	2301      	movne	r3, #1
 8019126:	2300      	moveq	r3, #0
 8019128:	b2db      	uxtb	r3, r3
 801912a:	461a      	mov	r2, r3
 801912c:	683b      	ldr	r3, [r7, #0]
 801912e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	68db      	ldr	r3, [r3, #12]
 8019138:	f003 020f 	and.w	r2, r3, #15
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019146:	f003 0302 	and.w	r3, r3, #2
 801914a:	2b00      	cmp	r3, #0
 801914c:	bf14      	ite	ne
 801914e:	2301      	movne	r3, #1
 8019150:	2300      	moveq	r3, #0
 8019152:	b2db      	uxtb	r3, r3
 8019154:	461a      	mov	r2, r3
 8019156:	683b      	ldr	r3, [r7, #0]
 8019158:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019166:	2b00      	cmp	r3, #0
 8019168:	bf0c      	ite	eq
 801916a:	2301      	moveq	r3, #1
 801916c:	2300      	movne	r3, #0
 801916e:	b2db      	uxtb	r3, r3
 8019170:	461a      	mov	r2, r3
 8019172:	683b      	ldr	r3, [r7, #0]
 8019174:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801917e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019182:	683b      	ldr	r3, [r7, #0]
 8019184:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801918c:	0c1b      	lsrs	r3, r3, #16
 801918e:	b29a      	uxth	r2, r3
 8019190:	683b      	ldr	r3, [r7, #0]
 8019192:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801919c:	f003 0301 	and.w	r3, r3, #1
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	bf14      	ite	ne
 80191a4:	2301      	movne	r3, #1
 80191a6:	2300      	moveq	r3, #0
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	461a      	mov	r2, r3
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80191ba:	f003 0302 	and.w	r3, r3, #2
 80191be:	2b00      	cmp	r3, #0
 80191c0:	bf14      	ite	ne
 80191c2:	2301      	movne	r3, #1
 80191c4:	2300      	moveq	r3, #0
 80191c6:	b2db      	uxtb	r3, r3
 80191c8:	461a      	mov	r2, r3
 80191ca:	683b      	ldr	r3, [r7, #0]
 80191cc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80191d8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80191dc:	683b      	ldr	r3, [r7, #0]
 80191de:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80191e8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80191ec:	683b      	ldr	r3, [r7, #0]
 80191ee:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80191f8:	f003 0308 	and.w	r3, r3, #8
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	bf14      	ite	ne
 8019200:	2301      	movne	r3, #1
 8019202:	2300      	moveq	r3, #0
 8019204:	b2db      	uxtb	r3, r3
 8019206:	461a      	mov	r2, r3
 8019208:	683b      	ldr	r3, [r7, #0]
 801920a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019216:	f003 0310 	and.w	r3, r3, #16
 801921a:	2b00      	cmp	r3, #0
 801921c:	bf14      	ite	ne
 801921e:	2301      	movne	r3, #1
 8019220:	2300      	moveq	r3, #0
 8019222:	b2db      	uxtb	r3, r3
 8019224:	461a      	mov	r2, r3
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019238:	2b00      	cmp	r3, #0
 801923a:	bf0c      	ite	eq
 801923c:	2301      	moveq	r3, #1
 801923e:	2300      	movne	r3, #0
 8019240:	b2db      	uxtb	r3, r3
 8019242:	461a      	mov	r2, r3
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 801924a:	2300      	movs	r3, #0
        }
 801924c:	4618      	mov	r0, r3
 801924e:	370c      	adds	r7, #12
 8019250:	46bd      	mov	sp, r7
 8019252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019256:	4770      	bx	lr

08019258 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019258:	b580      	push	{r7, lr}
 801925a:	b082      	sub	sp, #8
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
 8019260:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019262:	683b      	ldr	r3, [r7, #0]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d101      	bne.n	801926c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019268:	2301      	movs	r3, #1
 801926a:	e00a      	b.n	8019282 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019270:	2b10      	cmp	r3, #16
 8019272:	d105      	bne.n	8019280 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019274:	6839      	ldr	r1, [r7, #0]
 8019276:	6878      	ldr	r0, [r7, #4]
 8019278:	f000 f808 	bl	801928c <ETH_SetMACConfig>

                return HAL_OK;
 801927c:	2300      	movs	r3, #0
 801927e:	e000      	b.n	8019282 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019280:	2301      	movs	r3, #1
            }
        }
 8019282:	4618      	mov	r0, r3
 8019284:	3708      	adds	r7, #8
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}
	...

0801928c <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 801928c:	b480      	push	{r7}
 801928e:	b085      	sub	sp, #20
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 801929a:	683b      	ldr	r3, [r7, #0]
 801929c:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 801929e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	791b      	ldrb	r3, [r3, #4]
 80192a4:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 80192a6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	7b1b      	ldrb	r3, [r3, #12]
 80192ac:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80192ae:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80192b0:	683b      	ldr	r3, [r7, #0]
 80192b2:	7b5b      	ldrb	r3, [r3, #13]
 80192b4:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80192b6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	7b9b      	ldrb	r3, [r3, #14]
 80192bc:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80192be:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80192c0:	683b      	ldr	r3, [r7, #0]
 80192c2:	7bdb      	ldrb	r3, [r3, #15]
 80192c4:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80192c6:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80192c8:	683a      	ldr	r2, [r7, #0]
 80192ca:	7c12      	ldrb	r2, [r2, #16]
 80192cc:	2a00      	cmp	r2, #0
 80192ce:	d102      	bne.n	80192d6 <ETH_SetMACConfig+0x4a>
 80192d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80192d4:	e000      	b.n	80192d8 <ETH_SetMACConfig+0x4c>
 80192d6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80192d8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80192da:	683a      	ldr	r2, [r7, #0]
 80192dc:	7c52      	ldrb	r2, [r2, #17]
 80192de:	2a00      	cmp	r2, #0
 80192e0:	d102      	bne.n	80192e8 <ETH_SetMACConfig+0x5c>
 80192e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80192e6:	e000      	b.n	80192ea <ETH_SetMACConfig+0x5e>
 80192e8:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80192ea:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	7c9b      	ldrb	r3, [r3, #18]
 80192f0:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80192f2:	431a      	orrs	r2, r3
                          macconf->Speed |
 80192f4:	683b      	ldr	r3, [r7, #0]
 80192f6:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80192f8:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 80192fe:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019300:	683b      	ldr	r3, [r7, #0]
 8019302:	7f1b      	ldrb	r3, [r3, #28]
 8019304:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8019306:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	7f5b      	ldrb	r3, [r3, #29]
 801930c:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 801930e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019310:	683a      	ldr	r2, [r7, #0]
 8019312:	7f92      	ldrb	r2, [r2, #30]
 8019314:	2a00      	cmp	r2, #0
 8019316:	d102      	bne.n	801931e <ETH_SetMACConfig+0x92>
 8019318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801931c:	e000      	b.n	8019320 <ETH_SetMACConfig+0x94>
 801931e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019320:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	7fdb      	ldrb	r3, [r3, #31]
 8019326:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019328:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 801932a:	683a      	ldr	r2, [r7, #0]
 801932c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019330:	2a00      	cmp	r2, #0
 8019332:	d102      	bne.n	801933a <ETH_SetMACConfig+0xae>
 8019334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019338:	e000      	b.n	801933c <ETH_SetMACConfig+0xb0>
 801933a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 801933c:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019342:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8019344:	683b      	ldr	r3, [r7, #0]
 8019346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801934a:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 801934c:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 801934e:	683b      	ldr	r3, [r7, #0]
 8019350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019352:	4313      	orrs	r3, r2
 8019354:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	681a      	ldr	r2, [r3, #0]
 801935c:	4b56      	ldr	r3, [pc, #344]	@ (80194b8 <ETH_SetMACConfig+0x22c>)
 801935e:	4013      	ands	r3, r2
 8019360:	687a      	ldr	r2, [r7, #4]
 8019362:	6812      	ldr	r2, [r2, #0]
 8019364:	68f9      	ldr	r1, [r7, #12]
 8019366:	430b      	orrs	r3, r1
 8019368:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801936e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019376:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019378:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019380:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019382:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019384:	683b      	ldr	r3, [r7, #0]
 8019386:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801938a:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801938c:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 801938e:	683a      	ldr	r2, [r7, #0]
 8019390:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019394:	2a00      	cmp	r2, #0
 8019396:	d102      	bne.n	801939e <ETH_SetMACConfig+0x112>
 8019398:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801939c:	e000      	b.n	80193a0 <ETH_SetMACConfig+0x114>
 801939e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 80193a0:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 80193a6:	4313      	orrs	r3, r2
 80193a8:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	685a      	ldr	r2, [r3, #4]
 80193b0:	4b42      	ldr	r3, [pc, #264]	@ (80194bc <ETH_SetMACConfig+0x230>)
 80193b2:	4013      	ands	r3, r2
 80193b4:	687a      	ldr	r2, [r7, #4]
 80193b6:	6812      	ldr	r2, [r2, #0]
 80193b8:	68f9      	ldr	r1, [r7, #12]
 80193ba:	430b      	orrs	r3, r1
 80193bc:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80193c4:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 80193c6:	683b      	ldr	r3, [r7, #0]
 80193c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80193ca:	4313      	orrs	r3, r2
 80193cc:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	68da      	ldr	r2, [r3, #12]
 80193d4:	4b3a      	ldr	r3, [pc, #232]	@ (80194c0 <ETH_SetMACConfig+0x234>)
 80193d6:	4013      	ands	r3, r2
 80193d8:	687a      	ldr	r2, [r7, #4]
 80193da:	6812      	ldr	r2, [r2, #0]
 80193dc:	68f9      	ldr	r1, [r7, #12]
 80193de:	430b      	orrs	r3, r1
 80193e0:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80193e8:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80193ee:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80193f0:	683a      	ldr	r2, [r7, #0]
 80193f2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80193f6:	2a00      	cmp	r2, #0
 80193f8:	d101      	bne.n	80193fe <ETH_SetMACConfig+0x172>
 80193fa:	2280      	movs	r2, #128	@ 0x80
 80193fc:	e000      	b.n	8019400 <ETH_SetMACConfig+0x174>
 80193fe:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8019400:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019406:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019408:	4313      	orrs	r3, r2
 801940a:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019412:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019416:	4013      	ands	r3, r2
 8019418:	687a      	ldr	r2, [r7, #4]
 801941a:	6812      	ldr	r2, [r2, #0]
 801941c:	68f9      	ldr	r1, [r7, #12]
 801941e:	430b      	orrs	r3, r1
 8019420:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019428:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 801942a:	683b      	ldr	r3, [r7, #0]
 801942c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019430:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019432:	4313      	orrs	r3, r2
 8019434:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801943e:	f023 0103 	bic.w	r1, r3, #3
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	68fa      	ldr	r2, [r7, #12]
 8019448:	430a      	orrs	r2, r1
 801944a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019456:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	430a      	orrs	r2, r1
 8019464:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8019468:	683b      	ldr	r3, [r7, #0]
 801946a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801946c:	683a      	ldr	r2, [r7, #0]
 801946e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019472:	2a00      	cmp	r2, #0
 8019474:	d101      	bne.n	801947a <ETH_SetMACConfig+0x1ee>
 8019476:	2240      	movs	r2, #64	@ 0x40
 8019478:	e000      	b.n	801947c <ETH_SetMACConfig+0x1f0>
 801947a:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801947c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801947e:	683b      	ldr	r3, [r7, #0]
 8019480:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019484:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019486:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801948e:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8019490:	4313      	orrs	r3, r2
 8019492:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801949c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	68fa      	ldr	r2, [r7, #12]
 80194a6:	430a      	orrs	r2, r1
 80194a8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 80194ac:	bf00      	nop
 80194ae:	3714      	adds	r7, #20
 80194b0:	46bd      	mov	sp, r7
 80194b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b6:	4770      	bx	lr
 80194b8:	00048083 	.word	0x00048083
 80194bc:	c0f88000 	.word	0xc0f88000
 80194c0:	fffffef0 	.word	0xfffffef0

080194c4 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 80194c4:	b480      	push	{r7}
 80194c6:	b085      	sub	sp, #20
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
 80194cc:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	4b38      	ldr	r3, [pc, #224]	@ (80195bc <ETH_SetDMAConfig+0xf8>)
 80194da:	4013      	ands	r3, r2
 80194dc:	683a      	ldr	r2, [r7, #0]
 80194de:	6811      	ldr	r1, [r2, #0]
 80194e0:	687a      	ldr	r2, [r7, #4]
 80194e2:	6812      	ldr	r2, [r2, #0]
 80194e4:	430b      	orrs	r3, r1
 80194e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80194ea:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	791b      	ldrb	r3, [r3, #4]
 80194f0:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 80194f2:	683b      	ldr	r3, [r7, #0]
 80194f4:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80194f6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80194f8:	683b      	ldr	r3, [r7, #0]
 80194fa:	7b1b      	ldrb	r3, [r3, #12]
 80194fc:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80194fe:	4313      	orrs	r3, r2
 8019500:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801950a:	685a      	ldr	r2, [r3, #4]
 801950c:	4b2c      	ldr	r3, [pc, #176]	@ (80195c0 <ETH_SetDMAConfig+0xfc>)
 801950e:	4013      	ands	r3, r2
 8019510:	687a      	ldr	r2, [r7, #4]
 8019512:	6812      	ldr	r2, [r2, #0]
 8019514:	68f9      	ldr	r1, [r7, #12]
 8019516:	430b      	orrs	r3, r1
 8019518:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801951c:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801951e:	683b      	ldr	r3, [r7, #0]
 8019520:	7b5b      	ldrb	r3, [r3, #13]
 8019522:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 8019524:	683b      	ldr	r3, [r7, #0]
 8019526:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8019528:	4313      	orrs	r3, r2
 801952a:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019534:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8019538:	4b22      	ldr	r3, [pc, #136]	@ (80195c4 <ETH_SetDMAConfig+0x100>)
 801953a:	4013      	ands	r3, r2
 801953c:	687a      	ldr	r2, [r7, #4]
 801953e:	6812      	ldr	r2, [r2, #0]
 8019540:	68f9      	ldr	r1, [r7, #12]
 8019542:	430b      	orrs	r3, r1
 8019544:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019548:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 801954c:	683b      	ldr	r3, [r7, #0]
 801954e:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	7d1b      	ldrb	r3, [r3, #20]
 8019554:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019556:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	7f5b      	ldrb	r3, [r3, #29]
 801955c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801955e:	4313      	orrs	r3, r2
 8019560:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801956a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801956e:	4b16      	ldr	r3, [pc, #88]	@ (80195c8 <ETH_SetDMAConfig+0x104>)
 8019570:	4013      	ands	r3, r2
 8019572:	687a      	ldr	r2, [r7, #4]
 8019574:	6812      	ldr	r2, [r2, #0]
 8019576:	68f9      	ldr	r1, [r7, #12]
 8019578:	430b      	orrs	r3, r1
 801957a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801957e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	7f1b      	ldrb	r3, [r3, #28]
 8019586:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8019588:	683b      	ldr	r3, [r7, #0]
 801958a:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801958c:	4313      	orrs	r3, r2
 801958e:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019598:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801959c:	4b0b      	ldr	r3, [pc, #44]	@ (80195cc <ETH_SetDMAConfig+0x108>)
 801959e:	4013      	ands	r3, r2
 80195a0:	687a      	ldr	r2, [r7, #4]
 80195a2:	6812      	ldr	r2, [r2, #0]
 80195a4:	68f9      	ldr	r1, [r7, #12]
 80195a6:	430b      	orrs	r3, r1
 80195a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80195ac:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 80195b0:	bf00      	nop
 80195b2:	3714      	adds	r7, #20
 80195b4:	46bd      	mov	sp, r7
 80195b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ba:	4770      	bx	lr
 80195bc:	ffff87fd 	.word	0xffff87fd
 80195c0:	ffff2ffe 	.word	0xffff2ffe
 80195c4:	fffec000 	.word	0xfffec000
 80195c8:	ffc0efef 	.word	0xffc0efef
 80195cc:	7fc0ffff 	.word	0x7fc0ffff

080195d0 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b0a4      	sub	sp, #144	@ 0x90
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80195d8:	2301      	movs	r3, #1
 80195da:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80195de:	2300      	movs	r3, #0
 80195e0:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80195e2:	2300      	movs	r3, #0
 80195e4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80195e8:	2300      	movs	r3, #0
 80195ea:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 80195ee:	2301      	movs	r3, #1
 80195f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80195f4:	2301      	movs	r3, #1
 80195f6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 80195fa:	2301      	movs	r3, #1
 80195fc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 8019600:	2300      	movs	r3, #0
 8019602:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8019606:	2301      	movs	r3, #1
 8019608:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801960c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019610:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8019612:	2300      	movs	r3, #0
 8019614:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8019618:	2300      	movs	r3, #0
 801961a:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801961c:	2300      	movs	r3, #0
 801961e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8019622:	2300      	movs	r3, #0
 8019624:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8019628:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801962c:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801962e:	2300      	movs	r3, #0
 8019630:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8019634:	2300      	movs	r3, #0
 8019636:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 8019638:	2301      	movs	r3, #1
 801963a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801963e:	2300      	movs	r3, #0
 8019640:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8019644:	2300      	movs	r3, #0
 8019646:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801964a:	2300      	movs	r3, #0
 801964c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801964e:	2300      	movs	r3, #0
 8019650:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8019652:	2300      	movs	r3, #0
 8019654:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8019656:	2300      	movs	r3, #0
 8019658:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801965c:	2300      	movs	r3, #0
 801965e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8019662:	2301      	movs	r3, #1
 8019664:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8019668:	2320      	movs	r3, #32
 801966a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801966e:	2301      	movs	r3, #1
 8019670:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8019674:	2300      	movs	r3, #0
 8019676:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801967a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8019680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019684:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8019686:	2300      	movs	r3, #0
 8019688:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801968c:	2302      	movs	r3, #2
 801968e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8019692:	2300      	movs	r3, #0
 8019694:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8019698:	2300      	movs	r3, #0
 801969a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801969e:	2300      	movs	r3, #0
 80196a0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 80196a4:	2301      	movs	r3, #1
 80196a6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 80196aa:	2300      	movs	r3, #0
 80196ac:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 80196ae:	2301      	movs	r3, #1
 80196b0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 80196b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80196b8:	4619      	mov	r1, r3
 80196ba:	6878      	ldr	r0, [r7, #4]
 80196bc:	f7ff fde6 	bl	801928c <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80196c0:	2301      	movs	r3, #1
 80196c2:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80196c4:	2301      	movs	r3, #1
 80196c6:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80196c8:	2300      	movs	r3, #0
 80196ca:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 80196cc:	2300      	movs	r3, #0
 80196ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 80196d2:	2300      	movs	r3, #0
 80196d4:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80196d6:	2300      	movs	r3, #0
 80196d8:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80196da:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80196de:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 80196e0:	2300      	movs	r3, #0
 80196e2:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80196e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80196e8:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 80196ea:	2300      	movs	r3, #0
 80196ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 80196f0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80196f4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 80196f6:	f107 0308 	add.w	r3, r7, #8
 80196fa:	4619      	mov	r1, r3
 80196fc:	6878      	ldr	r0, [r7, #4]
 80196fe:	f7ff fee1 	bl	80194c4 <ETH_SetDMAConfig>
        }
 8019702:	bf00      	nop
 8019704:	3790      	adds	r7, #144	@ 0x90
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
	...

0801970c <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 801970c:	b580      	push	{r7, lr}
 801970e:	b084      	sub	sp, #16
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801971c:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8019724:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8019726:	f003 fdf1 	bl	801d30c <HAL_RCC_GetHCLKFreq>
 801972a:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 801972c:	68bb      	ldr	r3, [r7, #8]
 801972e:	4a1e      	ldr	r2, [pc, #120]	@ (80197a8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8019730:	4293      	cmp	r3, r2
 8019732:	d908      	bls.n	8019746 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	4a1d      	ldr	r2, [pc, #116]	@ (80197ac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8019738:	4293      	cmp	r3, r2
 801973a:	d804      	bhi.n	8019746 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019742:	60fb      	str	r3, [r7, #12]
 8019744:	e027      	b.n	8019796 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8019746:	68bb      	ldr	r3, [r7, #8]
 8019748:	4a18      	ldr	r2, [pc, #96]	@ (80197ac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801974a:	4293      	cmp	r3, r2
 801974c:	d908      	bls.n	8019760 <ETH_MAC_MDIO_ClkConfig+0x54>
 801974e:	68bb      	ldr	r3, [r7, #8]
 8019750:	4a17      	ldr	r2, [pc, #92]	@ (80197b0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019752:	4293      	cmp	r3, r2
 8019754:	d204      	bcs.n	8019760 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801975c:	60fb      	str	r3, [r7, #12]
 801975e:	e01a      	b.n	8019796 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8019760:	68bb      	ldr	r3, [r7, #8]
 8019762:	4a13      	ldr	r2, [pc, #76]	@ (80197b0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019764:	4293      	cmp	r3, r2
 8019766:	d303      	bcc.n	8019770 <ETH_MAC_MDIO_ClkConfig+0x64>
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	4a12      	ldr	r2, [pc, #72]	@ (80197b4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801976c:	4293      	cmp	r3, r2
 801976e:	d911      	bls.n	8019794 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	4a10      	ldr	r2, [pc, #64]	@ (80197b4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019774:	4293      	cmp	r3, r2
 8019776:	d908      	bls.n	801978a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8019778:	68bb      	ldr	r3, [r7, #8]
 801977a:	4a0f      	ldr	r2, [pc, #60]	@ (80197b8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801977c:	4293      	cmp	r3, r2
 801977e:	d804      	bhi.n	801978a <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019786:	60fb      	str	r3, [r7, #12]
 8019788:	e005      	b.n	8019796 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019790:	60fb      	str	r3, [r7, #12]
 8019792:	e000      	b.n	8019796 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8019794:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	68fa      	ldr	r2, [r7, #12]
 801979c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 80197a0:	bf00      	nop
 80197a2:	3710      	adds	r7, #16
 80197a4:	46bd      	mov	sp, r7
 80197a6:	bd80      	pop	{r7, pc}
 80197a8:	01312cff 	.word	0x01312cff
 80197ac:	02160ebf 	.word	0x02160ebf
 80197b0:	03938700 	.word	0x03938700
 80197b4:	05f5e0ff 	.word	0x05f5e0ff
 80197b8:	08f0d17f 	.word	0x08f0d17f

080197bc <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 80197bc:	b480      	push	{r7}
 80197be:	b085      	sub	sp, #20
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80197c4:	2300      	movs	r3, #0
 80197c6:	60fb      	str	r3, [r7, #12]
 80197c8:	e01d      	b.n	8019806 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	68d9      	ldr	r1, [r3, #12]
 80197ce:	68fa      	ldr	r2, [r7, #12]
 80197d0:	4613      	mov	r3, r2
 80197d2:	005b      	lsls	r3, r3, #1
 80197d4:	4413      	add	r3, r2
 80197d6:	00db      	lsls	r3, r3, #3
 80197d8:	440b      	add	r3, r1
 80197da:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 80197dc:	68bb      	ldr	r3, [r7, #8]
 80197de:	2200      	movs	r2, #0
 80197e0:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80197e2:	68bb      	ldr	r3, [r7, #8]
 80197e4:	2200      	movs	r2, #0
 80197e6:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	2200      	movs	r2, #0
 80197ec:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	2200      	movs	r2, #0
 80197f2:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 80197f4:	68b9      	ldr	r1, [r7, #8]
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	68fa      	ldr	r2, [r7, #12]
 80197fa:	3206      	adds	r2, #6
 80197fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	3301      	adds	r3, #1
 8019804:	60fb      	str	r3, [r7, #12]
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	2b03      	cmp	r3, #3
 801980a:	d9de      	bls.n	80197ca <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	2200      	movs	r2, #0
 8019810:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2200      	movs	r2, #0
 8019816:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019820:	461a      	mov	r2, r3
 8019822:	2303      	movs	r3, #3
 8019824:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	68da      	ldr	r2, [r3, #12]
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019834:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	68da      	ldr	r2, [r3, #12]
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019844:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 8019848:	bf00      	nop
 801984a:	3714      	adds	r7, #20
 801984c:	46bd      	mov	sp, r7
 801984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019852:	4770      	bx	lr

08019854 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019854:	b480      	push	{r7}
 8019856:	b085      	sub	sp, #20
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801985c:	2300      	movs	r3, #0
 801985e:	60fb      	str	r3, [r7, #12]
 8019860:	e023      	b.n	80198aa <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	6919      	ldr	r1, [r3, #16]
 8019866:	68fa      	ldr	r2, [r7, #12]
 8019868:	4613      	mov	r3, r2
 801986a:	005b      	lsls	r3, r3, #1
 801986c:	4413      	add	r3, r2
 801986e:	00db      	lsls	r3, r3, #3
 8019870:	440b      	add	r3, r1
 8019872:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8019874:	68bb      	ldr	r3, [r7, #8]
 8019876:	2200      	movs	r2, #0
 8019878:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	2200      	movs	r2, #0
 801987e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8019880:	68bb      	ldr	r3, [r7, #8]
 8019882:	2200      	movs	r2, #0
 8019884:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	2200      	movs	r2, #0
 801988a:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801988c:	68bb      	ldr	r3, [r7, #8]
 801988e:	2200      	movs	r2, #0
 8019890:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	2200      	movs	r2, #0
 8019896:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8019898:	68b9      	ldr	r1, [r7, #8]
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	68fa      	ldr	r2, [r7, #12]
 801989e:	320c      	adds	r2, #12
 80198a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	3301      	adds	r3, #1
 80198a8:	60fb      	str	r3, [r7, #12]
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	2b03      	cmp	r3, #3
 80198ae:	d9d8      	bls.n	8019862 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	2200      	movs	r2, #0
 80198b4:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	2200      	movs	r2, #0
 80198ba:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	2200      	movs	r2, #0
 80198c0:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	2200      	movs	r2, #0
 80198c6:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2200      	movs	r2, #0
 80198cc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198d6:	461a      	mov	r2, r3
 80198d8:	2303      	movs	r3, #3
 80198da:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	691a      	ldr	r2, [r3, #16]
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198ea:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	691b      	ldr	r3, [r3, #16]
 80198f2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198fe:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 8019902:	bf00      	nop
 8019904:	3714      	adds	r7, #20
 8019906:	46bd      	mov	sp, r7
 8019908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990c:	4770      	bx	lr
	...

08019910 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 8019910:	b580      	push	{r7, lr}
 8019912:	b086      	sub	sp, #24
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801991c:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801991e:	e032      	b.n	8019986 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	697a      	ldr	r2, [r7, #20]
 8019924:	3206      	adds	r2, #6
 8019926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801992a:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 801992c:	693b      	ldr	r3, [r7, #16]
 801992e:	68db      	ldr	r3, [r3, #12]
 8019930:	2b00      	cmp	r3, #0
 8019932:	db31      	blt.n	8019998 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 8019934:	693b      	ldr	r3, [r7, #16]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d02d      	beq.n	801999c <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8019940:	68f8      	ldr	r0, [r7, #12]
 8019942:	f7f0 fbd2 	bl	800a0ea <pxPacketBuffer_to_NetworkBuffer>
 8019946:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 8019948:	68bb      	ldr	r3, [r7, #8]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d002      	beq.n	8019954 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801994e:	68b8      	ldr	r0, [r7, #8]
 8019950:	f7fd faa2 	bl	8016e98 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8019954:	693b      	ldr	r3, [r7, #16]
 8019956:	2200      	movs	r2, #0
 8019958:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801995a:	697b      	ldr	r3, [r7, #20]
 801995c:	3301      	adds	r3, #1
 801995e:	617b      	str	r3, [r7, #20]
 8019960:	697b      	ldr	r3, [r7, #20]
 8019962:	2b03      	cmp	r3, #3
 8019964:	d902      	bls.n	801996c <ETH_Clear_Tx_Descriptors+0x5c>
 8019966:	697b      	ldr	r3, [r7, #20]
 8019968:	3b04      	subs	r3, #4
 801996a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	697a      	ldr	r2, [r7, #20]
 8019970:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8019972:	f3bf 8f4f 	dsb	sy
}
 8019976:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8019978:	4b0b      	ldr	r3, [pc, #44]	@ (80199a8 <ETH_Clear_Tx_Descriptors+0x98>)
 801997a:	6818      	ldr	r0, [r3, #0]
 801997c:	2300      	movs	r3, #0
 801997e:	2200      	movs	r2, #0
 8019980:	2100      	movs	r1, #0
 8019982:	f7e9 fcfd 	bl	8003380 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019986:	4b08      	ldr	r3, [pc, #32]	@ (80199a8 <ETH_Clear_Tx_Descriptors+0x98>)
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	4618      	mov	r0, r3
 801998c:	f7e9 ff9e 	bl	80038cc <uxQueueMessagesWaiting>
 8019990:	4603      	mov	r3, r0
 8019992:	2b04      	cmp	r3, #4
 8019994:	d1c4      	bne.n	8019920 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8019996:	e002      	b.n	801999e <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8019998:	bf00      	nop
 801999a:	e000      	b.n	801999e <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801999c:	bf00      	nop
        }
 801999e:	bf00      	nop
 80199a0:	3718      	adds	r7, #24
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	200022b0 	.word	0x200022b0

080199ac <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 80199ac:	b480      	push	{r7}
 80199ae:	b08b      	sub	sp, #44	@ 0x2c
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	60f8      	str	r0, [r7, #12]
 80199b4:	60b9      	str	r1, [r7, #8]
 80199b6:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	3318      	adds	r3, #24
 80199bc:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80199be:	6a3b      	ldr	r3, [r7, #32]
 80199c0:	691b      	ldr	r3, [r3, #16]
 80199c2:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 80199c4:	6a3b      	ldr	r3, [r7, #32]
 80199c6:	69fa      	ldr	r2, [r7, #28]
 80199c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80199cc:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 80199ce:	68bb      	ldr	r3, [r7, #8]
 80199d0:	689b      	ldr	r3, [r3, #8]
 80199d2:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	2200      	movs	r2, #0
 80199d8:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 80199da:	69bb      	ldr	r3, [r7, #24]
 80199dc:	68db      	ldr	r3, [r3, #12]
 80199de:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 80199e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	da01      	bge.n	80199ea <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 80199e6:	2302      	movs	r3, #2
 80199e8:	e05c      	b.n	8019aa4 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	461a      	mov	r2, r3
 80199f0:	69bb      	ldr	r3, [r7, #24]
 80199f2:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80199f4:	69bb      	ldr	r3, [r7, #24]
 80199f6:	689a      	ldr	r2, [r3, #8]
 80199f8:	4b2d      	ldr	r3, [pc, #180]	@ (8019ab0 <ETH_Prepare_Tx_Descriptors+0x104>)
 80199fa:	4013      	ands	r3, r2
 80199fc:	697a      	ldr	r2, [r7, #20]
 80199fe:	6852      	ldr	r2, [r2, #4]
 8019a00:	431a      	orrs	r2, r3
 8019a02:	69bb      	ldr	r3, [r7, #24]
 8019a04:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019a06:	69bb      	ldr	r3, [r7, #24]
 8019a08:	2200      	movs	r2, #0
 8019a0a:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 8019a0c:	69bb      	ldr	r3, [r7, #24]
 8019a0e:	689a      	ldr	r2, [r3, #8]
 8019a10:	4b28      	ldr	r3, [pc, #160]	@ (8019ab4 <ETH_Prepare_Tx_Descriptors+0x108>)
 8019a12:	4013      	ands	r3, r2
 8019a14:	69ba      	ldr	r2, [r7, #24]
 8019a16:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 8019a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a1a:	4b27      	ldr	r3, [pc, #156]	@ (8019ab8 <ETH_Prepare_Tx_Descriptors+0x10c>)
 8019a1c:	4013      	ands	r3, r2
 8019a1e:	68ba      	ldr	r2, [r7, #8]
 8019a20:	6852      	ldr	r2, [r2, #4]
 8019a22:	4313      	orrs	r3, r2
 8019a24:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 8019a26:	68bb      	ldr	r3, [r7, #8]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	f003 0301 	and.w	r3, r3, #1
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d006      	beq.n	8019a40 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8019a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8019a38:	68bb      	ldr	r3, [r7, #8]
 8019a3a:	695b      	ldr	r3, [r3, #20]
 8019a3c:	4313      	orrs	r3, r2
 8019a3e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	f003 0320 	and.w	r3, r3, #32
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d006      	beq.n	8019a5a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 8019a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019a52:	68bb      	ldr	r3, [r7, #8]
 8019a54:	691b      	ldr	r3, [r3, #16]
 8019a56:	4313      	orrs	r3, r2
 8019a58:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 8019a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a5c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8019a60:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8019a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8019a68:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 8019a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019a70:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d006      	beq.n	8019a86 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019a78:	69bb      	ldr	r3, [r7, #24]
 8019a7a:	689b      	ldr	r3, [r3, #8]
 8019a7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019a80:	69bb      	ldr	r3, [r7, #24]
 8019a82:	609a      	str	r2, [r3, #8]
 8019a84:	e005      	b.n	8019a92 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019a86:	69bb      	ldr	r3, [r7, #24]
 8019a88:	689b      	ldr	r3, [r3, #8]
 8019a8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019a8e:	69bb      	ldr	r3, [r7, #24]
 8019a90:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8019a92:	69bb      	ldr	r3, [r7, #24]
 8019a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a96:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019a9c:	f3bf 8f4f 	dsb	sy
}
 8019aa0:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8019aa2:	2300      	movs	r3, #0
        }
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	372c      	adds	r7, #44	@ 0x2c
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aae:	4770      	bx	lr
 8019ab0:	ffffc000 	.word	0xffffc000
 8019ab4:	c000ffff 	.word	0xc000ffff
 8019ab8:	ffff8000 	.word	0xffff8000

08019abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b082      	sub	sp, #8
 8019ac0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019ac2:	2003      	movs	r0, #3
 8019ac4:	f000 f9a0 	bl	8019e08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019ac8:	f003 faa6 	bl	801d018 <HAL_RCC_GetSysClockFreq>
 8019acc:	4602      	mov	r2, r0
 8019ace:	4b15      	ldr	r3, [pc, #84]	@ (8019b24 <HAL_Init+0x68>)
 8019ad0:	699b      	ldr	r3, [r3, #24]
 8019ad2:	0a1b      	lsrs	r3, r3, #8
 8019ad4:	f003 030f 	and.w	r3, r3, #15
 8019ad8:	4913      	ldr	r1, [pc, #76]	@ (8019b28 <HAL_Init+0x6c>)
 8019ada:	5ccb      	ldrb	r3, [r1, r3]
 8019adc:	f003 031f 	and.w	r3, r3, #31
 8019ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8019ae4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8019ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8019b24 <HAL_Init+0x68>)
 8019ae8:	699b      	ldr	r3, [r3, #24]
 8019aea:	f003 030f 	and.w	r3, r3, #15
 8019aee:	4a0e      	ldr	r2, [pc, #56]	@ (8019b28 <HAL_Init+0x6c>)
 8019af0:	5cd3      	ldrb	r3, [r2, r3]
 8019af2:	f003 031f 	and.w	r3, r3, #31
 8019af6:	687a      	ldr	r2, [r7, #4]
 8019af8:	fa22 f303 	lsr.w	r3, r2, r3
 8019afc:	4a0b      	ldr	r2, [pc, #44]	@ (8019b2c <HAL_Init+0x70>)
 8019afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8019b00:	4a0b      	ldr	r2, [pc, #44]	@ (8019b30 <HAL_Init+0x74>)
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8019b06:	200f      	movs	r0, #15
 8019b08:	f000 f814 	bl	8019b34 <HAL_InitTick>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d001      	beq.n	8019b16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8019b12:	2301      	movs	r3, #1
 8019b14:	e002      	b.n	8019b1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8019b16:	f7e8 f929 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8019b1a:	2300      	movs	r3, #0
}
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3708      	adds	r7, #8
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	58024400 	.word	0x58024400
 8019b28:	0802724c 	.word	0x0802724c
 8019b2c:	20000004 	.word	0x20000004
 8019b30:	20000000 	.word	0x20000000

08019b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b082      	sub	sp, #8
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8019b3c:	4b15      	ldr	r3, [pc, #84]	@ (8019b94 <HAL_InitTick+0x60>)
 8019b3e:	781b      	ldrb	r3, [r3, #0]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d101      	bne.n	8019b48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8019b44:	2301      	movs	r3, #1
 8019b46:	e021      	b.n	8019b8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8019b48:	4b13      	ldr	r3, [pc, #76]	@ (8019b98 <HAL_InitTick+0x64>)
 8019b4a:	681a      	ldr	r2, [r3, #0]
 8019b4c:	4b11      	ldr	r3, [pc, #68]	@ (8019b94 <HAL_InitTick+0x60>)
 8019b4e:	781b      	ldrb	r3, [r3, #0]
 8019b50:	4619      	mov	r1, r3
 8019b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8019b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f000 f985 	bl	8019e6e <HAL_SYSTICK_Config>
 8019b64:	4603      	mov	r3, r0
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d001      	beq.n	8019b6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8019b6a:	2301      	movs	r3, #1
 8019b6c:	e00e      	b.n	8019b8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	2b0f      	cmp	r3, #15
 8019b72:	d80a      	bhi.n	8019b8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019b74:	2200      	movs	r2, #0
 8019b76:	6879      	ldr	r1, [r7, #4]
 8019b78:	f04f 30ff 	mov.w	r0, #4294967295
 8019b7c:	f000 f94f 	bl	8019e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019b80:	4a06      	ldr	r2, [pc, #24]	@ (8019b9c <HAL_InitTick+0x68>)
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019b86:	2300      	movs	r3, #0
 8019b88:	e000      	b.n	8019b8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8019b8a:	2301      	movs	r3, #1
}
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	3708      	adds	r7, #8
 8019b90:	46bd      	mov	sp, r7
 8019b92:	bd80      	pop	{r7, pc}
 8019b94:	20000024 	.word	0x20000024
 8019b98:	20000000 	.word	0x20000000
 8019b9c:	20000020 	.word	0x20000020

08019ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019ba0:	b480      	push	{r7}
 8019ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8019ba4:	4b06      	ldr	r3, [pc, #24]	@ (8019bc0 <HAL_IncTick+0x20>)
 8019ba6:	781b      	ldrb	r3, [r3, #0]
 8019ba8:	461a      	mov	r2, r3
 8019baa:	4b06      	ldr	r3, [pc, #24]	@ (8019bc4 <HAL_IncTick+0x24>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	4413      	add	r3, r2
 8019bb0:	4a04      	ldr	r2, [pc, #16]	@ (8019bc4 <HAL_IncTick+0x24>)
 8019bb2:	6013      	str	r3, [r2, #0]
}
 8019bb4:	bf00      	nop
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbc:	4770      	bx	lr
 8019bbe:	bf00      	nop
 8019bc0:	20000024 	.word	0x20000024
 8019bc4:	200023bc 	.word	0x200023bc

08019bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019bc8:	b480      	push	{r7}
 8019bca:	af00      	add	r7, sp, #0
  return uwTick;
 8019bcc:	4b03      	ldr	r3, [pc, #12]	@ (8019bdc <HAL_GetTick+0x14>)
 8019bce:	681b      	ldr	r3, [r3, #0]
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd8:	4770      	bx	lr
 8019bda:	bf00      	nop
 8019bdc:	200023bc 	.word	0x200023bc

08019be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b084      	sub	sp, #16
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019be8:	f7ff ffee 	bl	8019bc8 <HAL_GetTick>
 8019bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bf8:	d005      	beq.n	8019c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8019bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8019c24 <HAL_Delay+0x44>)
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	461a      	mov	r2, r3
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	4413      	add	r3, r2
 8019c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019c06:	bf00      	nop
 8019c08:	f7ff ffde 	bl	8019bc8 <HAL_GetTick>
 8019c0c:	4602      	mov	r2, r0
 8019c0e:	68bb      	ldr	r3, [r7, #8]
 8019c10:	1ad3      	subs	r3, r2, r3
 8019c12:	68fa      	ldr	r2, [r7, #12]
 8019c14:	429a      	cmp	r2, r3
 8019c16:	d8f7      	bhi.n	8019c08 <HAL_Delay+0x28>
  {
  }
}
 8019c18:	bf00      	nop
 8019c1a:	bf00      	nop
 8019c1c:	3710      	adds	r7, #16
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bd80      	pop	{r7, pc}
 8019c22:	bf00      	nop
 8019c24:	20000024 	.word	0x20000024

08019c28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8019c28:	b480      	push	{r7}
 8019c2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8019c2c:	4b03      	ldr	r3, [pc, #12]	@ (8019c3c <HAL_GetREVID+0x14>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	0c1b      	lsrs	r3, r3, #16
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	46bd      	mov	sp, r7
 8019c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3a:	4770      	bx	lr
 8019c3c:	5c001000 	.word	0x5c001000

08019c40 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8019c40:	b480      	push	{r7}
 8019c42:	b083      	sub	sp, #12
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8019c48:	4b06      	ldr	r3, [pc, #24]	@ (8019c64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019c4a:	685b      	ldr	r3, [r3, #4]
 8019c4c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8019c50:	4904      	ldr	r1, [pc, #16]	@ (8019c64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	4313      	orrs	r3, r2
 8019c56:	604b      	str	r3, [r1, #4]
}
 8019c58:	bf00      	nop
 8019c5a:	370c      	adds	r7, #12
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c62:	4770      	bx	lr
 8019c64:	58000400 	.word	0x58000400

08019c68 <__NVIC_SetPriorityGrouping>:
{
 8019c68:	b480      	push	{r7}
 8019c6a:	b085      	sub	sp, #20
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	f003 0307 	and.w	r3, r3, #7
 8019c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019c78:	4b0b      	ldr	r3, [pc, #44]	@ (8019ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8019c7a:	68db      	ldr	r3, [r3, #12]
 8019c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019c7e:	68ba      	ldr	r2, [r7, #8]
 8019c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019c84:	4013      	ands	r3, r2
 8019c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019c90:	4b06      	ldr	r3, [pc, #24]	@ (8019cac <__NVIC_SetPriorityGrouping+0x44>)
 8019c92:	4313      	orrs	r3, r2
 8019c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019c96:	4a04      	ldr	r2, [pc, #16]	@ (8019ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	60d3      	str	r3, [r2, #12]
}
 8019c9c:	bf00      	nop
 8019c9e:	3714      	adds	r7, #20
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca6:	4770      	bx	lr
 8019ca8:	e000ed00 	.word	0xe000ed00
 8019cac:	05fa0000 	.word	0x05fa0000

08019cb0 <__NVIC_GetPriorityGrouping>:
{
 8019cb0:	b480      	push	{r7}
 8019cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019cb4:	4b04      	ldr	r3, [pc, #16]	@ (8019cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8019cb6:	68db      	ldr	r3, [r3, #12]
 8019cb8:	0a1b      	lsrs	r3, r3, #8
 8019cba:	f003 0307 	and.w	r3, r3, #7
}
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc6:	4770      	bx	lr
 8019cc8:	e000ed00 	.word	0xe000ed00

08019ccc <__NVIC_EnableIRQ>:
{
 8019ccc:	b480      	push	{r7}
 8019cce:	b083      	sub	sp, #12
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	db0b      	blt.n	8019cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019cde:	88fb      	ldrh	r3, [r7, #6]
 8019ce0:	f003 021f 	and.w	r2, r3, #31
 8019ce4:	4907      	ldr	r1, [pc, #28]	@ (8019d04 <__NVIC_EnableIRQ+0x38>)
 8019ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019cea:	095b      	lsrs	r3, r3, #5
 8019cec:	2001      	movs	r0, #1
 8019cee:	fa00 f202 	lsl.w	r2, r0, r2
 8019cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019cf6:	bf00      	nop
 8019cf8:	370c      	adds	r7, #12
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d00:	4770      	bx	lr
 8019d02:	bf00      	nop
 8019d04:	e000e100 	.word	0xe000e100

08019d08 <__NVIC_SetPriority>:
{
 8019d08:	b480      	push	{r7}
 8019d0a:	b083      	sub	sp, #12
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	4603      	mov	r3, r0
 8019d10:	6039      	str	r1, [r7, #0]
 8019d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	db0a      	blt.n	8019d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	b2da      	uxtb	r2, r3
 8019d20:	490c      	ldr	r1, [pc, #48]	@ (8019d54 <__NVIC_SetPriority+0x4c>)
 8019d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019d26:	0112      	lsls	r2, r2, #4
 8019d28:	b2d2      	uxtb	r2, r2
 8019d2a:	440b      	add	r3, r1
 8019d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8019d30:	e00a      	b.n	8019d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	b2da      	uxtb	r2, r3
 8019d36:	4908      	ldr	r1, [pc, #32]	@ (8019d58 <__NVIC_SetPriority+0x50>)
 8019d38:	88fb      	ldrh	r3, [r7, #6]
 8019d3a:	f003 030f 	and.w	r3, r3, #15
 8019d3e:	3b04      	subs	r3, #4
 8019d40:	0112      	lsls	r2, r2, #4
 8019d42:	b2d2      	uxtb	r2, r2
 8019d44:	440b      	add	r3, r1
 8019d46:	761a      	strb	r2, [r3, #24]
}
 8019d48:	bf00      	nop
 8019d4a:	370c      	adds	r7, #12
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d52:	4770      	bx	lr
 8019d54:	e000e100 	.word	0xe000e100
 8019d58:	e000ed00 	.word	0xe000ed00

08019d5c <NVIC_EncodePriority>:
{
 8019d5c:	b480      	push	{r7}
 8019d5e:	b089      	sub	sp, #36	@ 0x24
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	60f8      	str	r0, [r7, #12]
 8019d64:	60b9      	str	r1, [r7, #8]
 8019d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	f003 0307 	and.w	r3, r3, #7
 8019d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019d70:	69fb      	ldr	r3, [r7, #28]
 8019d72:	f1c3 0307 	rsb	r3, r3, #7
 8019d76:	2b04      	cmp	r3, #4
 8019d78:	bf28      	it	cs
 8019d7a:	2304      	movcs	r3, #4
 8019d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019d7e:	69fb      	ldr	r3, [r7, #28]
 8019d80:	3304      	adds	r3, #4
 8019d82:	2b06      	cmp	r3, #6
 8019d84:	d902      	bls.n	8019d8c <NVIC_EncodePriority+0x30>
 8019d86:	69fb      	ldr	r3, [r7, #28]
 8019d88:	3b03      	subs	r3, #3
 8019d8a:	e000      	b.n	8019d8e <NVIC_EncodePriority+0x32>
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019d90:	f04f 32ff 	mov.w	r2, #4294967295
 8019d94:	69bb      	ldr	r3, [r7, #24]
 8019d96:	fa02 f303 	lsl.w	r3, r2, r3
 8019d9a:	43da      	mvns	r2, r3
 8019d9c:	68bb      	ldr	r3, [r7, #8]
 8019d9e:	401a      	ands	r2, r3
 8019da0:	697b      	ldr	r3, [r7, #20]
 8019da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019da4:	f04f 31ff 	mov.w	r1, #4294967295
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	fa01 f303 	lsl.w	r3, r1, r3
 8019dae:	43d9      	mvns	r1, r3
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019db4:	4313      	orrs	r3, r2
}
 8019db6:	4618      	mov	r0, r3
 8019db8:	3724      	adds	r7, #36	@ 0x24
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc0:	4770      	bx	lr
	...

08019dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	3b01      	subs	r3, #1
 8019dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019dd4:	d301      	bcc.n	8019dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019dd6:	2301      	movs	r3, #1
 8019dd8:	e00f      	b.n	8019dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019dda:	4a0a      	ldr	r2, [pc, #40]	@ (8019e04 <SysTick_Config+0x40>)
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	3b01      	subs	r3, #1
 8019de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019de2:	210f      	movs	r1, #15
 8019de4:	f04f 30ff 	mov.w	r0, #4294967295
 8019de8:	f7ff ff8e 	bl	8019d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019dec:	4b05      	ldr	r3, [pc, #20]	@ (8019e04 <SysTick_Config+0x40>)
 8019dee:	2200      	movs	r2, #0
 8019df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019df2:	4b04      	ldr	r3, [pc, #16]	@ (8019e04 <SysTick_Config+0x40>)
 8019df4:	2207      	movs	r2, #7
 8019df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019df8:	2300      	movs	r3, #0
}
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	3708      	adds	r7, #8
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bd80      	pop	{r7, pc}
 8019e02:	bf00      	nop
 8019e04:	e000e010 	.word	0xe000e010

08019e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b082      	sub	sp, #8
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019e10:	6878      	ldr	r0, [r7, #4]
 8019e12:	f7ff ff29 	bl	8019c68 <__NVIC_SetPriorityGrouping>
}
 8019e16:	bf00      	nop
 8019e18:	3708      	adds	r7, #8
 8019e1a:	46bd      	mov	sp, r7
 8019e1c:	bd80      	pop	{r7, pc}

08019e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019e1e:	b580      	push	{r7, lr}
 8019e20:	b086      	sub	sp, #24
 8019e22:	af00      	add	r7, sp, #0
 8019e24:	4603      	mov	r3, r0
 8019e26:	60b9      	str	r1, [r7, #8]
 8019e28:	607a      	str	r2, [r7, #4]
 8019e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019e2c:	f7ff ff40 	bl	8019cb0 <__NVIC_GetPriorityGrouping>
 8019e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019e32:	687a      	ldr	r2, [r7, #4]
 8019e34:	68b9      	ldr	r1, [r7, #8]
 8019e36:	6978      	ldr	r0, [r7, #20]
 8019e38:	f7ff ff90 	bl	8019d5c <NVIC_EncodePriority>
 8019e3c:	4602      	mov	r2, r0
 8019e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019e42:	4611      	mov	r1, r2
 8019e44:	4618      	mov	r0, r3
 8019e46:	f7ff ff5f 	bl	8019d08 <__NVIC_SetPriority>
}
 8019e4a:	bf00      	nop
 8019e4c:	3718      	adds	r7, #24
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}

08019e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019e52:	b580      	push	{r7, lr}
 8019e54:	b082      	sub	sp, #8
 8019e56:	af00      	add	r7, sp, #0
 8019e58:	4603      	mov	r3, r0
 8019e5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019e60:	4618      	mov	r0, r3
 8019e62:	f7ff ff33 	bl	8019ccc <__NVIC_EnableIRQ>
}
 8019e66:	bf00      	nop
 8019e68:	3708      	adds	r7, #8
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}

08019e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019e6e:	b580      	push	{r7, lr}
 8019e70:	b082      	sub	sp, #8
 8019e72:	af00      	add	r7, sp, #0
 8019e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019e76:	6878      	ldr	r0, [r7, #4]
 8019e78:	f7ff ffa4 	bl	8019dc4 <SysTick_Config>
 8019e7c:	4603      	mov	r3, r0
}
 8019e7e:	4618      	mov	r0, r3
 8019e80:	3708      	adds	r7, #8
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}
	...

08019e88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019e88:	b480      	push	{r7}
 8019e8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019e8c:	f3bf 8f5f 	dmb	sy
}
 8019e90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019e92:	4b07      	ldr	r3, [pc, #28]	@ (8019eb0 <HAL_MPU_Disable+0x28>)
 8019e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e96:	4a06      	ldr	r2, [pc, #24]	@ (8019eb0 <HAL_MPU_Disable+0x28>)
 8019e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019e9c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019e9e:	4b05      	ldr	r3, [pc, #20]	@ (8019eb4 <HAL_MPU_Disable+0x2c>)
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	605a      	str	r2, [r3, #4]
}
 8019ea4:	bf00      	nop
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eac:	4770      	bx	lr
 8019eae:	bf00      	nop
 8019eb0:	e000ed00 	.word	0xe000ed00
 8019eb4:	e000ed90 	.word	0xe000ed90

08019eb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8019eb8:	b480      	push	{r7}
 8019eba:	b083      	sub	sp, #12
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8019ef0 <HAL_MPU_Enable+0x38>)
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f043 0301 	orr.w	r3, r3, #1
 8019ec8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8019eca:	4b0a      	ldr	r3, [pc, #40]	@ (8019ef4 <HAL_MPU_Enable+0x3c>)
 8019ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ece:	4a09      	ldr	r2, [pc, #36]	@ (8019ef4 <HAL_MPU_Enable+0x3c>)
 8019ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019ed4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8019ed6:	f3bf 8f4f 	dsb	sy
}
 8019eda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019edc:	f3bf 8f6f 	isb	sy
}
 8019ee0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8019ee2:	bf00      	nop
 8019ee4:	370c      	adds	r7, #12
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eec:	4770      	bx	lr
 8019eee:	bf00      	nop
 8019ef0:	e000ed90 	.word	0xe000ed90
 8019ef4:	e000ed00 	.word	0xe000ed00

08019ef8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8019ef8:	b480      	push	{r7}
 8019efa:	b083      	sub	sp, #12
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	785a      	ldrb	r2, [r3, #1]
 8019f04:	4b1b      	ldr	r3, [pc, #108]	@ (8019f74 <HAL_MPU_ConfigRegion+0x7c>)
 8019f06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019f08:	4b1a      	ldr	r3, [pc, #104]	@ (8019f74 <HAL_MPU_ConfigRegion+0x7c>)
 8019f0a:	691b      	ldr	r3, [r3, #16]
 8019f0c:	4a19      	ldr	r2, [pc, #100]	@ (8019f74 <HAL_MPU_ConfigRegion+0x7c>)
 8019f0e:	f023 0301 	bic.w	r3, r3, #1
 8019f12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8019f14:	4a17      	ldr	r2, [pc, #92]	@ (8019f74 <HAL_MPU_ConfigRegion+0x7c>)
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	685b      	ldr	r3, [r3, #4]
 8019f1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	7b1b      	ldrb	r3, [r3, #12]
 8019f20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	7adb      	ldrb	r3, [r3, #11]
 8019f26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019f28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	7a9b      	ldrb	r3, [r3, #10]
 8019f2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019f30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	7b5b      	ldrb	r3, [r3, #13]
 8019f36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019f38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	7b9b      	ldrb	r3, [r3, #14]
 8019f3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019f40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	7bdb      	ldrb	r3, [r3, #15]
 8019f46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019f48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	7a5b      	ldrb	r3, [r3, #9]
 8019f4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019f50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	7a1b      	ldrb	r3, [r3, #8]
 8019f56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019f58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019f5a:	687a      	ldr	r2, [r7, #4]
 8019f5c:	7812      	ldrb	r2, [r2, #0]
 8019f5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019f60:	4a04      	ldr	r2, [pc, #16]	@ (8019f74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019f62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019f64:	6113      	str	r3, [r2, #16]
}
 8019f66:	bf00      	nop
 8019f68:	370c      	adds	r7, #12
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f70:	4770      	bx	lr
 8019f72:	bf00      	nop
 8019f74:	e000ed90 	.word	0xe000ed90

08019f78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b086      	sub	sp, #24
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8019f80:	f7ff fe22 	bl	8019bc8 <HAL_GetTick>
 8019f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d101      	bne.n	8019f90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	e316      	b.n	801a5be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	4a66      	ldr	r2, [pc, #408]	@ (801a130 <HAL_DMA_Init+0x1b8>)
 8019f96:	4293      	cmp	r3, r2
 8019f98:	d04a      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	4a65      	ldr	r2, [pc, #404]	@ (801a134 <HAL_DMA_Init+0x1bc>)
 8019fa0:	4293      	cmp	r3, r2
 8019fa2:	d045      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	4a63      	ldr	r2, [pc, #396]	@ (801a138 <HAL_DMA_Init+0x1c0>)
 8019faa:	4293      	cmp	r3, r2
 8019fac:	d040      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	4a62      	ldr	r2, [pc, #392]	@ (801a13c <HAL_DMA_Init+0x1c4>)
 8019fb4:	4293      	cmp	r3, r2
 8019fb6:	d03b      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	4a60      	ldr	r2, [pc, #384]	@ (801a140 <HAL_DMA_Init+0x1c8>)
 8019fbe:	4293      	cmp	r3, r2
 8019fc0:	d036      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	4a5f      	ldr	r2, [pc, #380]	@ (801a144 <HAL_DMA_Init+0x1cc>)
 8019fc8:	4293      	cmp	r3, r2
 8019fca:	d031      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	4a5d      	ldr	r2, [pc, #372]	@ (801a148 <HAL_DMA_Init+0x1d0>)
 8019fd2:	4293      	cmp	r3, r2
 8019fd4:	d02c      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	4a5c      	ldr	r2, [pc, #368]	@ (801a14c <HAL_DMA_Init+0x1d4>)
 8019fdc:	4293      	cmp	r3, r2
 8019fde:	d027      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	4a5a      	ldr	r2, [pc, #360]	@ (801a150 <HAL_DMA_Init+0x1d8>)
 8019fe6:	4293      	cmp	r3, r2
 8019fe8:	d022      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	4a59      	ldr	r2, [pc, #356]	@ (801a154 <HAL_DMA_Init+0x1dc>)
 8019ff0:	4293      	cmp	r3, r2
 8019ff2:	d01d      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	4a57      	ldr	r2, [pc, #348]	@ (801a158 <HAL_DMA_Init+0x1e0>)
 8019ffa:	4293      	cmp	r3, r2
 8019ffc:	d018      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	4a56      	ldr	r2, [pc, #344]	@ (801a15c <HAL_DMA_Init+0x1e4>)
 801a004:	4293      	cmp	r3, r2
 801a006:	d013      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	4a54      	ldr	r2, [pc, #336]	@ (801a160 <HAL_DMA_Init+0x1e8>)
 801a00e:	4293      	cmp	r3, r2
 801a010:	d00e      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	4a53      	ldr	r2, [pc, #332]	@ (801a164 <HAL_DMA_Init+0x1ec>)
 801a018:	4293      	cmp	r3, r2
 801a01a:	d009      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	4a51      	ldr	r2, [pc, #324]	@ (801a168 <HAL_DMA_Init+0x1f0>)
 801a022:	4293      	cmp	r3, r2
 801a024:	d004      	beq.n	801a030 <HAL_DMA_Init+0xb8>
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	4a50      	ldr	r2, [pc, #320]	@ (801a16c <HAL_DMA_Init+0x1f4>)
 801a02c:	4293      	cmp	r3, r2
 801a02e:	d101      	bne.n	801a034 <HAL_DMA_Init+0xbc>
 801a030:	2301      	movs	r3, #1
 801a032:	e000      	b.n	801a036 <HAL_DMA_Init+0xbe>
 801a034:	2300      	movs	r3, #0
 801a036:	2b00      	cmp	r3, #0
 801a038:	f000 813b 	beq.w	801a2b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2202      	movs	r2, #2
 801a040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	2200      	movs	r2, #0
 801a048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	4a37      	ldr	r2, [pc, #220]	@ (801a130 <HAL_DMA_Init+0x1b8>)
 801a052:	4293      	cmp	r3, r2
 801a054:	d04a      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	4a36      	ldr	r2, [pc, #216]	@ (801a134 <HAL_DMA_Init+0x1bc>)
 801a05c:	4293      	cmp	r3, r2
 801a05e:	d045      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	4a34      	ldr	r2, [pc, #208]	@ (801a138 <HAL_DMA_Init+0x1c0>)
 801a066:	4293      	cmp	r3, r2
 801a068:	d040      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	4a33      	ldr	r2, [pc, #204]	@ (801a13c <HAL_DMA_Init+0x1c4>)
 801a070:	4293      	cmp	r3, r2
 801a072:	d03b      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	4a31      	ldr	r2, [pc, #196]	@ (801a140 <HAL_DMA_Init+0x1c8>)
 801a07a:	4293      	cmp	r3, r2
 801a07c:	d036      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	4a30      	ldr	r2, [pc, #192]	@ (801a144 <HAL_DMA_Init+0x1cc>)
 801a084:	4293      	cmp	r3, r2
 801a086:	d031      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	4a2e      	ldr	r2, [pc, #184]	@ (801a148 <HAL_DMA_Init+0x1d0>)
 801a08e:	4293      	cmp	r3, r2
 801a090:	d02c      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	4a2d      	ldr	r2, [pc, #180]	@ (801a14c <HAL_DMA_Init+0x1d4>)
 801a098:	4293      	cmp	r3, r2
 801a09a:	d027      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4a2b      	ldr	r2, [pc, #172]	@ (801a150 <HAL_DMA_Init+0x1d8>)
 801a0a2:	4293      	cmp	r3, r2
 801a0a4:	d022      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	4a2a      	ldr	r2, [pc, #168]	@ (801a154 <HAL_DMA_Init+0x1dc>)
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	d01d      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	4a28      	ldr	r2, [pc, #160]	@ (801a158 <HAL_DMA_Init+0x1e0>)
 801a0b6:	4293      	cmp	r3, r2
 801a0b8:	d018      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	4a27      	ldr	r2, [pc, #156]	@ (801a15c <HAL_DMA_Init+0x1e4>)
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	d013      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	4a25      	ldr	r2, [pc, #148]	@ (801a160 <HAL_DMA_Init+0x1e8>)
 801a0ca:	4293      	cmp	r3, r2
 801a0cc:	d00e      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	4a24      	ldr	r2, [pc, #144]	@ (801a164 <HAL_DMA_Init+0x1ec>)
 801a0d4:	4293      	cmp	r3, r2
 801a0d6:	d009      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	4a22      	ldr	r2, [pc, #136]	@ (801a168 <HAL_DMA_Init+0x1f0>)
 801a0de:	4293      	cmp	r3, r2
 801a0e0:	d004      	beq.n	801a0ec <HAL_DMA_Init+0x174>
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	4a21      	ldr	r2, [pc, #132]	@ (801a16c <HAL_DMA_Init+0x1f4>)
 801a0e8:	4293      	cmp	r3, r2
 801a0ea:	d108      	bne.n	801a0fe <HAL_DMA_Init+0x186>
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	681a      	ldr	r2, [r3, #0]
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	f022 0201 	bic.w	r2, r2, #1
 801a0fa:	601a      	str	r2, [r3, #0]
 801a0fc:	e007      	b.n	801a10e <HAL_DMA_Init+0x196>
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	681a      	ldr	r2, [r3, #0]
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	f022 0201 	bic.w	r2, r2, #1
 801a10c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a10e:	e02f      	b.n	801a170 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801a110:	f7ff fd5a 	bl	8019bc8 <HAL_GetTick>
 801a114:	4602      	mov	r2, r0
 801a116:	693b      	ldr	r3, [r7, #16]
 801a118:	1ad3      	subs	r3, r2, r3
 801a11a:	2b05      	cmp	r3, #5
 801a11c:	d928      	bls.n	801a170 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2220      	movs	r2, #32
 801a122:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	2203      	movs	r2, #3
 801a128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801a12c:	2301      	movs	r3, #1
 801a12e:	e246      	b.n	801a5be <HAL_DMA_Init+0x646>
 801a130:	40020010 	.word	0x40020010
 801a134:	40020028 	.word	0x40020028
 801a138:	40020040 	.word	0x40020040
 801a13c:	40020058 	.word	0x40020058
 801a140:	40020070 	.word	0x40020070
 801a144:	40020088 	.word	0x40020088
 801a148:	400200a0 	.word	0x400200a0
 801a14c:	400200b8 	.word	0x400200b8
 801a150:	40020410 	.word	0x40020410
 801a154:	40020428 	.word	0x40020428
 801a158:	40020440 	.word	0x40020440
 801a15c:	40020458 	.word	0x40020458
 801a160:	40020470 	.word	0x40020470
 801a164:	40020488 	.word	0x40020488
 801a168:	400204a0 	.word	0x400204a0
 801a16c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	f003 0301 	and.w	r3, r3, #1
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d1c8      	bne.n	801a110 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801a186:	697a      	ldr	r2, [r7, #20]
 801a188:	4b83      	ldr	r3, [pc, #524]	@ (801a398 <HAL_DMA_Init+0x420>)
 801a18a:	4013      	ands	r3, r2
 801a18c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801a196:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	691b      	ldr	r3, [r3, #16]
 801a19c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a1a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	699b      	ldr	r3, [r3, #24]
 801a1a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a1ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	6a1b      	ldr	r3, [r3, #32]
 801a1b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801a1b6:	697a      	ldr	r2, [r7, #20]
 801a1b8:	4313      	orrs	r3, r2
 801a1ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1c0:	2b04      	cmp	r3, #4
 801a1c2:	d107      	bne.n	801a1d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a1cc:	4313      	orrs	r3, r2
 801a1ce:	697a      	ldr	r2, [r7, #20]
 801a1d0:	4313      	orrs	r3, r2
 801a1d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801a1d4:	4b71      	ldr	r3, [pc, #452]	@ (801a39c <HAL_DMA_Init+0x424>)
 801a1d6:	681a      	ldr	r2, [r3, #0]
 801a1d8:	4b71      	ldr	r3, [pc, #452]	@ (801a3a0 <HAL_DMA_Init+0x428>)
 801a1da:	4013      	ands	r3, r2
 801a1dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a1e0:	d328      	bcc.n	801a234 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	685b      	ldr	r3, [r3, #4]
 801a1e6:	2b28      	cmp	r3, #40	@ 0x28
 801a1e8:	d903      	bls.n	801a1f2 <HAL_DMA_Init+0x27a>
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	685b      	ldr	r3, [r3, #4]
 801a1ee:	2b2e      	cmp	r3, #46	@ 0x2e
 801a1f0:	d917      	bls.n	801a222 <HAL_DMA_Init+0x2aa>
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	685b      	ldr	r3, [r3, #4]
 801a1f6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a1f8:	d903      	bls.n	801a202 <HAL_DMA_Init+0x28a>
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	685b      	ldr	r3, [r3, #4]
 801a1fe:	2b42      	cmp	r3, #66	@ 0x42
 801a200:	d90f      	bls.n	801a222 <HAL_DMA_Init+0x2aa>
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	685b      	ldr	r3, [r3, #4]
 801a206:	2b46      	cmp	r3, #70	@ 0x46
 801a208:	d903      	bls.n	801a212 <HAL_DMA_Init+0x29a>
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	685b      	ldr	r3, [r3, #4]
 801a20e:	2b48      	cmp	r3, #72	@ 0x48
 801a210:	d907      	bls.n	801a222 <HAL_DMA_Init+0x2aa>
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	685b      	ldr	r3, [r3, #4]
 801a216:	2b4e      	cmp	r3, #78	@ 0x4e
 801a218:	d905      	bls.n	801a226 <HAL_DMA_Init+0x2ae>
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	685b      	ldr	r3, [r3, #4]
 801a21e:	2b52      	cmp	r3, #82	@ 0x52
 801a220:	d801      	bhi.n	801a226 <HAL_DMA_Init+0x2ae>
 801a222:	2301      	movs	r3, #1
 801a224:	e000      	b.n	801a228 <HAL_DMA_Init+0x2b0>
 801a226:	2300      	movs	r3, #0
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d003      	beq.n	801a234 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a232:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	697a      	ldr	r2, [r7, #20]
 801a23a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	695b      	ldr	r3, [r3, #20]
 801a242:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801a244:	697b      	ldr	r3, [r7, #20]
 801a246:	f023 0307 	bic.w	r3, r3, #7
 801a24a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a250:	697a      	ldr	r2, [r7, #20]
 801a252:	4313      	orrs	r3, r2
 801a254:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a25a:	2b04      	cmp	r3, #4
 801a25c:	d117      	bne.n	801a28e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a262:	697a      	ldr	r2, [r7, #20]
 801a264:	4313      	orrs	r3, r2
 801a266:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d00e      	beq.n	801a28e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801a270:	6878      	ldr	r0, [r7, #4]
 801a272:	f001 fbff 	bl	801ba74 <DMA_CheckFifoParam>
 801a276:	4603      	mov	r3, r0
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d008      	beq.n	801a28e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	2240      	movs	r2, #64	@ 0x40
 801a280:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	2201      	movs	r2, #1
 801a286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801a28a:	2301      	movs	r3, #1
 801a28c:	e197      	b.n	801a5be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	697a      	ldr	r2, [r7, #20]
 801a294:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a296:	6878      	ldr	r0, [r7, #4]
 801a298:	f001 fb3a 	bl	801b910 <DMA_CalcBaseAndBitshift>
 801a29c:	4603      	mov	r3, r0
 801a29e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a2a4:	f003 031f 	and.w	r3, r3, #31
 801a2a8:	223f      	movs	r2, #63	@ 0x3f
 801a2aa:	409a      	lsls	r2, r3
 801a2ac:	68bb      	ldr	r3, [r7, #8]
 801a2ae:	609a      	str	r2, [r3, #8]
 801a2b0:	e0cd      	b.n	801a44e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	4a3b      	ldr	r2, [pc, #236]	@ (801a3a4 <HAL_DMA_Init+0x42c>)
 801a2b8:	4293      	cmp	r3, r2
 801a2ba:	d022      	beq.n	801a302 <HAL_DMA_Init+0x38a>
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	4a39      	ldr	r2, [pc, #228]	@ (801a3a8 <HAL_DMA_Init+0x430>)
 801a2c2:	4293      	cmp	r3, r2
 801a2c4:	d01d      	beq.n	801a302 <HAL_DMA_Init+0x38a>
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	4a38      	ldr	r2, [pc, #224]	@ (801a3ac <HAL_DMA_Init+0x434>)
 801a2cc:	4293      	cmp	r3, r2
 801a2ce:	d018      	beq.n	801a302 <HAL_DMA_Init+0x38a>
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4a36      	ldr	r2, [pc, #216]	@ (801a3b0 <HAL_DMA_Init+0x438>)
 801a2d6:	4293      	cmp	r3, r2
 801a2d8:	d013      	beq.n	801a302 <HAL_DMA_Init+0x38a>
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	4a35      	ldr	r2, [pc, #212]	@ (801a3b4 <HAL_DMA_Init+0x43c>)
 801a2e0:	4293      	cmp	r3, r2
 801a2e2:	d00e      	beq.n	801a302 <HAL_DMA_Init+0x38a>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	4a33      	ldr	r2, [pc, #204]	@ (801a3b8 <HAL_DMA_Init+0x440>)
 801a2ea:	4293      	cmp	r3, r2
 801a2ec:	d009      	beq.n	801a302 <HAL_DMA_Init+0x38a>
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	4a32      	ldr	r2, [pc, #200]	@ (801a3bc <HAL_DMA_Init+0x444>)
 801a2f4:	4293      	cmp	r3, r2
 801a2f6:	d004      	beq.n	801a302 <HAL_DMA_Init+0x38a>
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	4a30      	ldr	r2, [pc, #192]	@ (801a3c0 <HAL_DMA_Init+0x448>)
 801a2fe:	4293      	cmp	r3, r2
 801a300:	d101      	bne.n	801a306 <HAL_DMA_Init+0x38e>
 801a302:	2301      	movs	r3, #1
 801a304:	e000      	b.n	801a308 <HAL_DMA_Init+0x390>
 801a306:	2300      	movs	r3, #0
 801a308:	2b00      	cmp	r3, #0
 801a30a:	f000 8097 	beq.w	801a43c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	4a24      	ldr	r2, [pc, #144]	@ (801a3a4 <HAL_DMA_Init+0x42c>)
 801a314:	4293      	cmp	r3, r2
 801a316:	d021      	beq.n	801a35c <HAL_DMA_Init+0x3e4>
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	4a22      	ldr	r2, [pc, #136]	@ (801a3a8 <HAL_DMA_Init+0x430>)
 801a31e:	4293      	cmp	r3, r2
 801a320:	d01c      	beq.n	801a35c <HAL_DMA_Init+0x3e4>
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4a21      	ldr	r2, [pc, #132]	@ (801a3ac <HAL_DMA_Init+0x434>)
 801a328:	4293      	cmp	r3, r2
 801a32a:	d017      	beq.n	801a35c <HAL_DMA_Init+0x3e4>
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	4a1f      	ldr	r2, [pc, #124]	@ (801a3b0 <HAL_DMA_Init+0x438>)
 801a332:	4293      	cmp	r3, r2
 801a334:	d012      	beq.n	801a35c <HAL_DMA_Init+0x3e4>
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	4a1e      	ldr	r2, [pc, #120]	@ (801a3b4 <HAL_DMA_Init+0x43c>)
 801a33c:	4293      	cmp	r3, r2
 801a33e:	d00d      	beq.n	801a35c <HAL_DMA_Init+0x3e4>
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	4a1c      	ldr	r2, [pc, #112]	@ (801a3b8 <HAL_DMA_Init+0x440>)
 801a346:	4293      	cmp	r3, r2
 801a348:	d008      	beq.n	801a35c <HAL_DMA_Init+0x3e4>
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	4a1b      	ldr	r2, [pc, #108]	@ (801a3bc <HAL_DMA_Init+0x444>)
 801a350:	4293      	cmp	r3, r2
 801a352:	d003      	beq.n	801a35c <HAL_DMA_Init+0x3e4>
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	4a19      	ldr	r2, [pc, #100]	@ (801a3c0 <HAL_DMA_Init+0x448>)
 801a35a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	2202      	movs	r2, #2
 801a360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	2200      	movs	r2, #0
 801a368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801a374:	697a      	ldr	r2, [r7, #20]
 801a376:	4b13      	ldr	r3, [pc, #76]	@ (801a3c4 <HAL_DMA_Init+0x44c>)
 801a378:	4013      	ands	r3, r2
 801a37a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	689b      	ldr	r3, [r3, #8]
 801a380:	2b40      	cmp	r3, #64	@ 0x40
 801a382:	d021      	beq.n	801a3c8 <HAL_DMA_Init+0x450>
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	689b      	ldr	r3, [r3, #8]
 801a388:	2b80      	cmp	r3, #128	@ 0x80
 801a38a:	d102      	bne.n	801a392 <HAL_DMA_Init+0x41a>
 801a38c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a390:	e01b      	b.n	801a3ca <HAL_DMA_Init+0x452>
 801a392:	2300      	movs	r3, #0
 801a394:	e019      	b.n	801a3ca <HAL_DMA_Init+0x452>
 801a396:	bf00      	nop
 801a398:	fe10803f 	.word	0xfe10803f
 801a39c:	5c001000 	.word	0x5c001000
 801a3a0:	ffff0000 	.word	0xffff0000
 801a3a4:	58025408 	.word	0x58025408
 801a3a8:	5802541c 	.word	0x5802541c
 801a3ac:	58025430 	.word	0x58025430
 801a3b0:	58025444 	.word	0x58025444
 801a3b4:	58025458 	.word	0x58025458
 801a3b8:	5802546c 	.word	0x5802546c
 801a3bc:	58025480 	.word	0x58025480
 801a3c0:	58025494 	.word	0x58025494
 801a3c4:	fffe000f 	.word	0xfffe000f
 801a3c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a3ca:	687a      	ldr	r2, [r7, #4]
 801a3cc:	68d2      	ldr	r2, [r2, #12]
 801a3ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a3d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	691b      	ldr	r3, [r3, #16]
 801a3d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a3d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	695b      	ldr	r3, [r3, #20]
 801a3de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a3e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	699b      	ldr	r3, [r3, #24]
 801a3e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a3e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	69db      	ldr	r3, [r3, #28]
 801a3ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a3f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	6a1b      	ldr	r3, [r3, #32]
 801a3f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a3f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a3fa:	697a      	ldr	r2, [r7, #20]
 801a3fc:	4313      	orrs	r3, r2
 801a3fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	697a      	ldr	r2, [r7, #20]
 801a406:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	461a      	mov	r2, r3
 801a40e:	4b6e      	ldr	r3, [pc, #440]	@ (801a5c8 <HAL_DMA_Init+0x650>)
 801a410:	4413      	add	r3, r2
 801a412:	4a6e      	ldr	r2, [pc, #440]	@ (801a5cc <HAL_DMA_Init+0x654>)
 801a414:	fba2 2303 	umull	r2, r3, r2, r3
 801a418:	091b      	lsrs	r3, r3, #4
 801a41a:	009a      	lsls	r2, r3, #2
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a420:	6878      	ldr	r0, [r7, #4]
 801a422:	f001 fa75 	bl	801b910 <DMA_CalcBaseAndBitshift>
 801a426:	4603      	mov	r3, r0
 801a428:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a42e:	f003 031f 	and.w	r3, r3, #31
 801a432:	2201      	movs	r2, #1
 801a434:	409a      	lsls	r2, r3
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	605a      	str	r2, [r3, #4]
 801a43a:	e008      	b.n	801a44e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2240      	movs	r2, #64	@ 0x40
 801a440:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	2203      	movs	r2, #3
 801a446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801a44a:	2301      	movs	r3, #1
 801a44c:	e0b7      	b.n	801a5be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	4a5f      	ldr	r2, [pc, #380]	@ (801a5d0 <HAL_DMA_Init+0x658>)
 801a454:	4293      	cmp	r3, r2
 801a456:	d072      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	4a5d      	ldr	r2, [pc, #372]	@ (801a5d4 <HAL_DMA_Init+0x65c>)
 801a45e:	4293      	cmp	r3, r2
 801a460:	d06d      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	4a5c      	ldr	r2, [pc, #368]	@ (801a5d8 <HAL_DMA_Init+0x660>)
 801a468:	4293      	cmp	r3, r2
 801a46a:	d068      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	4a5a      	ldr	r2, [pc, #360]	@ (801a5dc <HAL_DMA_Init+0x664>)
 801a472:	4293      	cmp	r3, r2
 801a474:	d063      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	4a59      	ldr	r2, [pc, #356]	@ (801a5e0 <HAL_DMA_Init+0x668>)
 801a47c:	4293      	cmp	r3, r2
 801a47e:	d05e      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	4a57      	ldr	r2, [pc, #348]	@ (801a5e4 <HAL_DMA_Init+0x66c>)
 801a486:	4293      	cmp	r3, r2
 801a488:	d059      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	4a56      	ldr	r2, [pc, #344]	@ (801a5e8 <HAL_DMA_Init+0x670>)
 801a490:	4293      	cmp	r3, r2
 801a492:	d054      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	4a54      	ldr	r2, [pc, #336]	@ (801a5ec <HAL_DMA_Init+0x674>)
 801a49a:	4293      	cmp	r3, r2
 801a49c:	d04f      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	4a53      	ldr	r2, [pc, #332]	@ (801a5f0 <HAL_DMA_Init+0x678>)
 801a4a4:	4293      	cmp	r3, r2
 801a4a6:	d04a      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	4a51      	ldr	r2, [pc, #324]	@ (801a5f4 <HAL_DMA_Init+0x67c>)
 801a4ae:	4293      	cmp	r3, r2
 801a4b0:	d045      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	4a50      	ldr	r2, [pc, #320]	@ (801a5f8 <HAL_DMA_Init+0x680>)
 801a4b8:	4293      	cmp	r3, r2
 801a4ba:	d040      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	4a4e      	ldr	r2, [pc, #312]	@ (801a5fc <HAL_DMA_Init+0x684>)
 801a4c2:	4293      	cmp	r3, r2
 801a4c4:	d03b      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4a4d      	ldr	r2, [pc, #308]	@ (801a600 <HAL_DMA_Init+0x688>)
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	d036      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	4a4b      	ldr	r2, [pc, #300]	@ (801a604 <HAL_DMA_Init+0x68c>)
 801a4d6:	4293      	cmp	r3, r2
 801a4d8:	d031      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	4a4a      	ldr	r2, [pc, #296]	@ (801a608 <HAL_DMA_Init+0x690>)
 801a4e0:	4293      	cmp	r3, r2
 801a4e2:	d02c      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	4a48      	ldr	r2, [pc, #288]	@ (801a60c <HAL_DMA_Init+0x694>)
 801a4ea:	4293      	cmp	r3, r2
 801a4ec:	d027      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	4a47      	ldr	r2, [pc, #284]	@ (801a610 <HAL_DMA_Init+0x698>)
 801a4f4:	4293      	cmp	r3, r2
 801a4f6:	d022      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	4a45      	ldr	r2, [pc, #276]	@ (801a614 <HAL_DMA_Init+0x69c>)
 801a4fe:	4293      	cmp	r3, r2
 801a500:	d01d      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	4a44      	ldr	r2, [pc, #272]	@ (801a618 <HAL_DMA_Init+0x6a0>)
 801a508:	4293      	cmp	r3, r2
 801a50a:	d018      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	4a42      	ldr	r2, [pc, #264]	@ (801a61c <HAL_DMA_Init+0x6a4>)
 801a512:	4293      	cmp	r3, r2
 801a514:	d013      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	4a41      	ldr	r2, [pc, #260]	@ (801a620 <HAL_DMA_Init+0x6a8>)
 801a51c:	4293      	cmp	r3, r2
 801a51e:	d00e      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	4a3f      	ldr	r2, [pc, #252]	@ (801a624 <HAL_DMA_Init+0x6ac>)
 801a526:	4293      	cmp	r3, r2
 801a528:	d009      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	4a3e      	ldr	r2, [pc, #248]	@ (801a628 <HAL_DMA_Init+0x6b0>)
 801a530:	4293      	cmp	r3, r2
 801a532:	d004      	beq.n	801a53e <HAL_DMA_Init+0x5c6>
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	4a3c      	ldr	r2, [pc, #240]	@ (801a62c <HAL_DMA_Init+0x6b4>)
 801a53a:	4293      	cmp	r3, r2
 801a53c:	d101      	bne.n	801a542 <HAL_DMA_Init+0x5ca>
 801a53e:	2301      	movs	r3, #1
 801a540:	e000      	b.n	801a544 <HAL_DMA_Init+0x5cc>
 801a542:	2300      	movs	r3, #0
 801a544:	2b00      	cmp	r3, #0
 801a546:	d032      	beq.n	801a5ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a548:	6878      	ldr	r0, [r7, #4]
 801a54a:	f001 fb0f 	bl	801bb6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	689b      	ldr	r3, [r3, #8]
 801a552:	2b80      	cmp	r3, #128	@ 0x80
 801a554:	d102      	bne.n	801a55c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	2200      	movs	r2, #0
 801a55a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	685a      	ldr	r2, [r3, #4]
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a564:	b2d2      	uxtb	r2, r2
 801a566:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a56c:	687a      	ldr	r2, [r7, #4]
 801a56e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a570:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	685b      	ldr	r3, [r3, #4]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d010      	beq.n	801a59c <HAL_DMA_Init+0x624>
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	685b      	ldr	r3, [r3, #4]
 801a57e:	2b08      	cmp	r3, #8
 801a580:	d80c      	bhi.n	801a59c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	f001 fb8c 	bl	801bca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a58c:	2200      	movs	r2, #0
 801a58e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a594:	687a      	ldr	r2, [r7, #4]
 801a596:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a598:	605a      	str	r2, [r3, #4]
 801a59a:	e008      	b.n	801a5ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	2200      	movs	r2, #0
 801a5a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	2200      	movs	r2, #0
 801a5a6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2201      	movs	r2, #1
 801a5b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801a5bc:	2300      	movs	r3, #0
}
 801a5be:	4618      	mov	r0, r3
 801a5c0:	3718      	adds	r7, #24
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd80      	pop	{r7, pc}
 801a5c6:	bf00      	nop
 801a5c8:	a7fdabf8 	.word	0xa7fdabf8
 801a5cc:	cccccccd 	.word	0xcccccccd
 801a5d0:	40020010 	.word	0x40020010
 801a5d4:	40020028 	.word	0x40020028
 801a5d8:	40020040 	.word	0x40020040
 801a5dc:	40020058 	.word	0x40020058
 801a5e0:	40020070 	.word	0x40020070
 801a5e4:	40020088 	.word	0x40020088
 801a5e8:	400200a0 	.word	0x400200a0
 801a5ec:	400200b8 	.word	0x400200b8
 801a5f0:	40020410 	.word	0x40020410
 801a5f4:	40020428 	.word	0x40020428
 801a5f8:	40020440 	.word	0x40020440
 801a5fc:	40020458 	.word	0x40020458
 801a600:	40020470 	.word	0x40020470
 801a604:	40020488 	.word	0x40020488
 801a608:	400204a0 	.word	0x400204a0
 801a60c:	400204b8 	.word	0x400204b8
 801a610:	58025408 	.word	0x58025408
 801a614:	5802541c 	.word	0x5802541c
 801a618:	58025430 	.word	0x58025430
 801a61c:	58025444 	.word	0x58025444
 801a620:	58025458 	.word	0x58025458
 801a624:	5802546c 	.word	0x5802546c
 801a628:	58025480 	.word	0x58025480
 801a62c:	58025494 	.word	0x58025494

0801a630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b084      	sub	sp, #16
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d101      	bne.n	801a642 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801a63e:	2301      	movs	r3, #1
 801a640:	e237      	b.n	801aab2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a648:	b2db      	uxtb	r3, r3
 801a64a:	2b02      	cmp	r3, #2
 801a64c:	d004      	beq.n	801a658 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	2280      	movs	r2, #128	@ 0x80
 801a652:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801a654:	2301      	movs	r3, #1
 801a656:	e22c      	b.n	801aab2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	4a5c      	ldr	r2, [pc, #368]	@ (801a7d0 <HAL_DMA_Abort_IT+0x1a0>)
 801a65e:	4293      	cmp	r3, r2
 801a660:	d04a      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	4a5b      	ldr	r2, [pc, #364]	@ (801a7d4 <HAL_DMA_Abort_IT+0x1a4>)
 801a668:	4293      	cmp	r3, r2
 801a66a:	d045      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	4a59      	ldr	r2, [pc, #356]	@ (801a7d8 <HAL_DMA_Abort_IT+0x1a8>)
 801a672:	4293      	cmp	r3, r2
 801a674:	d040      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	4a58      	ldr	r2, [pc, #352]	@ (801a7dc <HAL_DMA_Abort_IT+0x1ac>)
 801a67c:	4293      	cmp	r3, r2
 801a67e:	d03b      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	4a56      	ldr	r2, [pc, #344]	@ (801a7e0 <HAL_DMA_Abort_IT+0x1b0>)
 801a686:	4293      	cmp	r3, r2
 801a688:	d036      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	4a55      	ldr	r2, [pc, #340]	@ (801a7e4 <HAL_DMA_Abort_IT+0x1b4>)
 801a690:	4293      	cmp	r3, r2
 801a692:	d031      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	4a53      	ldr	r2, [pc, #332]	@ (801a7e8 <HAL_DMA_Abort_IT+0x1b8>)
 801a69a:	4293      	cmp	r3, r2
 801a69c:	d02c      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	4a52      	ldr	r2, [pc, #328]	@ (801a7ec <HAL_DMA_Abort_IT+0x1bc>)
 801a6a4:	4293      	cmp	r3, r2
 801a6a6:	d027      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	4a50      	ldr	r2, [pc, #320]	@ (801a7f0 <HAL_DMA_Abort_IT+0x1c0>)
 801a6ae:	4293      	cmp	r3, r2
 801a6b0:	d022      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	4a4f      	ldr	r2, [pc, #316]	@ (801a7f4 <HAL_DMA_Abort_IT+0x1c4>)
 801a6b8:	4293      	cmp	r3, r2
 801a6ba:	d01d      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	4a4d      	ldr	r2, [pc, #308]	@ (801a7f8 <HAL_DMA_Abort_IT+0x1c8>)
 801a6c2:	4293      	cmp	r3, r2
 801a6c4:	d018      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	4a4c      	ldr	r2, [pc, #304]	@ (801a7fc <HAL_DMA_Abort_IT+0x1cc>)
 801a6cc:	4293      	cmp	r3, r2
 801a6ce:	d013      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	4a4a      	ldr	r2, [pc, #296]	@ (801a800 <HAL_DMA_Abort_IT+0x1d0>)
 801a6d6:	4293      	cmp	r3, r2
 801a6d8:	d00e      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	4a49      	ldr	r2, [pc, #292]	@ (801a804 <HAL_DMA_Abort_IT+0x1d4>)
 801a6e0:	4293      	cmp	r3, r2
 801a6e2:	d009      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	4a47      	ldr	r2, [pc, #284]	@ (801a808 <HAL_DMA_Abort_IT+0x1d8>)
 801a6ea:	4293      	cmp	r3, r2
 801a6ec:	d004      	beq.n	801a6f8 <HAL_DMA_Abort_IT+0xc8>
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	4a46      	ldr	r2, [pc, #280]	@ (801a80c <HAL_DMA_Abort_IT+0x1dc>)
 801a6f4:	4293      	cmp	r3, r2
 801a6f6:	d101      	bne.n	801a6fc <HAL_DMA_Abort_IT+0xcc>
 801a6f8:	2301      	movs	r3, #1
 801a6fa:	e000      	b.n	801a6fe <HAL_DMA_Abort_IT+0xce>
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	f000 8086 	beq.w	801a810 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2204      	movs	r2, #4
 801a708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	4a2f      	ldr	r2, [pc, #188]	@ (801a7d0 <HAL_DMA_Abort_IT+0x1a0>)
 801a712:	4293      	cmp	r3, r2
 801a714:	d04a      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	4a2e      	ldr	r2, [pc, #184]	@ (801a7d4 <HAL_DMA_Abort_IT+0x1a4>)
 801a71c:	4293      	cmp	r3, r2
 801a71e:	d045      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	4a2c      	ldr	r2, [pc, #176]	@ (801a7d8 <HAL_DMA_Abort_IT+0x1a8>)
 801a726:	4293      	cmp	r3, r2
 801a728:	d040      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	4a2b      	ldr	r2, [pc, #172]	@ (801a7dc <HAL_DMA_Abort_IT+0x1ac>)
 801a730:	4293      	cmp	r3, r2
 801a732:	d03b      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	4a29      	ldr	r2, [pc, #164]	@ (801a7e0 <HAL_DMA_Abort_IT+0x1b0>)
 801a73a:	4293      	cmp	r3, r2
 801a73c:	d036      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	4a28      	ldr	r2, [pc, #160]	@ (801a7e4 <HAL_DMA_Abort_IT+0x1b4>)
 801a744:	4293      	cmp	r3, r2
 801a746:	d031      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	4a26      	ldr	r2, [pc, #152]	@ (801a7e8 <HAL_DMA_Abort_IT+0x1b8>)
 801a74e:	4293      	cmp	r3, r2
 801a750:	d02c      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	4a25      	ldr	r2, [pc, #148]	@ (801a7ec <HAL_DMA_Abort_IT+0x1bc>)
 801a758:	4293      	cmp	r3, r2
 801a75a:	d027      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	4a23      	ldr	r2, [pc, #140]	@ (801a7f0 <HAL_DMA_Abort_IT+0x1c0>)
 801a762:	4293      	cmp	r3, r2
 801a764:	d022      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	4a22      	ldr	r2, [pc, #136]	@ (801a7f4 <HAL_DMA_Abort_IT+0x1c4>)
 801a76c:	4293      	cmp	r3, r2
 801a76e:	d01d      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	4a20      	ldr	r2, [pc, #128]	@ (801a7f8 <HAL_DMA_Abort_IT+0x1c8>)
 801a776:	4293      	cmp	r3, r2
 801a778:	d018      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	4a1f      	ldr	r2, [pc, #124]	@ (801a7fc <HAL_DMA_Abort_IT+0x1cc>)
 801a780:	4293      	cmp	r3, r2
 801a782:	d013      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	4a1d      	ldr	r2, [pc, #116]	@ (801a800 <HAL_DMA_Abort_IT+0x1d0>)
 801a78a:	4293      	cmp	r3, r2
 801a78c:	d00e      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	4a1c      	ldr	r2, [pc, #112]	@ (801a804 <HAL_DMA_Abort_IT+0x1d4>)
 801a794:	4293      	cmp	r3, r2
 801a796:	d009      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	4a1a      	ldr	r2, [pc, #104]	@ (801a808 <HAL_DMA_Abort_IT+0x1d8>)
 801a79e:	4293      	cmp	r3, r2
 801a7a0:	d004      	beq.n	801a7ac <HAL_DMA_Abort_IT+0x17c>
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	4a19      	ldr	r2, [pc, #100]	@ (801a80c <HAL_DMA_Abort_IT+0x1dc>)
 801a7a8:	4293      	cmp	r3, r2
 801a7aa:	d108      	bne.n	801a7be <HAL_DMA_Abort_IT+0x18e>
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	f022 0201 	bic.w	r2, r2, #1
 801a7ba:	601a      	str	r2, [r3, #0]
 801a7bc:	e178      	b.n	801aab0 <HAL_DMA_Abort_IT+0x480>
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	681a      	ldr	r2, [r3, #0]
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	f022 0201 	bic.w	r2, r2, #1
 801a7cc:	601a      	str	r2, [r3, #0]
 801a7ce:	e16f      	b.n	801aab0 <HAL_DMA_Abort_IT+0x480>
 801a7d0:	40020010 	.word	0x40020010
 801a7d4:	40020028 	.word	0x40020028
 801a7d8:	40020040 	.word	0x40020040
 801a7dc:	40020058 	.word	0x40020058
 801a7e0:	40020070 	.word	0x40020070
 801a7e4:	40020088 	.word	0x40020088
 801a7e8:	400200a0 	.word	0x400200a0
 801a7ec:	400200b8 	.word	0x400200b8
 801a7f0:	40020410 	.word	0x40020410
 801a7f4:	40020428 	.word	0x40020428
 801a7f8:	40020440 	.word	0x40020440
 801a7fc:	40020458 	.word	0x40020458
 801a800:	40020470 	.word	0x40020470
 801a804:	40020488 	.word	0x40020488
 801a808:	400204a0 	.word	0x400204a0
 801a80c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	681a      	ldr	r2, [r3, #0]
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	f022 020e 	bic.w	r2, r2, #14
 801a81e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	4a6c      	ldr	r2, [pc, #432]	@ (801a9d8 <HAL_DMA_Abort_IT+0x3a8>)
 801a826:	4293      	cmp	r3, r2
 801a828:	d04a      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	4a6b      	ldr	r2, [pc, #428]	@ (801a9dc <HAL_DMA_Abort_IT+0x3ac>)
 801a830:	4293      	cmp	r3, r2
 801a832:	d045      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	4a69      	ldr	r2, [pc, #420]	@ (801a9e0 <HAL_DMA_Abort_IT+0x3b0>)
 801a83a:	4293      	cmp	r3, r2
 801a83c:	d040      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	4a68      	ldr	r2, [pc, #416]	@ (801a9e4 <HAL_DMA_Abort_IT+0x3b4>)
 801a844:	4293      	cmp	r3, r2
 801a846:	d03b      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	4a66      	ldr	r2, [pc, #408]	@ (801a9e8 <HAL_DMA_Abort_IT+0x3b8>)
 801a84e:	4293      	cmp	r3, r2
 801a850:	d036      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	4a65      	ldr	r2, [pc, #404]	@ (801a9ec <HAL_DMA_Abort_IT+0x3bc>)
 801a858:	4293      	cmp	r3, r2
 801a85a:	d031      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	4a63      	ldr	r2, [pc, #396]	@ (801a9f0 <HAL_DMA_Abort_IT+0x3c0>)
 801a862:	4293      	cmp	r3, r2
 801a864:	d02c      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	4a62      	ldr	r2, [pc, #392]	@ (801a9f4 <HAL_DMA_Abort_IT+0x3c4>)
 801a86c:	4293      	cmp	r3, r2
 801a86e:	d027      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	4a60      	ldr	r2, [pc, #384]	@ (801a9f8 <HAL_DMA_Abort_IT+0x3c8>)
 801a876:	4293      	cmp	r3, r2
 801a878:	d022      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	4a5f      	ldr	r2, [pc, #380]	@ (801a9fc <HAL_DMA_Abort_IT+0x3cc>)
 801a880:	4293      	cmp	r3, r2
 801a882:	d01d      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	4a5d      	ldr	r2, [pc, #372]	@ (801aa00 <HAL_DMA_Abort_IT+0x3d0>)
 801a88a:	4293      	cmp	r3, r2
 801a88c:	d018      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	4a5c      	ldr	r2, [pc, #368]	@ (801aa04 <HAL_DMA_Abort_IT+0x3d4>)
 801a894:	4293      	cmp	r3, r2
 801a896:	d013      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	4a5a      	ldr	r2, [pc, #360]	@ (801aa08 <HAL_DMA_Abort_IT+0x3d8>)
 801a89e:	4293      	cmp	r3, r2
 801a8a0:	d00e      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	4a59      	ldr	r2, [pc, #356]	@ (801aa0c <HAL_DMA_Abort_IT+0x3dc>)
 801a8a8:	4293      	cmp	r3, r2
 801a8aa:	d009      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	4a57      	ldr	r2, [pc, #348]	@ (801aa10 <HAL_DMA_Abort_IT+0x3e0>)
 801a8b2:	4293      	cmp	r3, r2
 801a8b4:	d004      	beq.n	801a8c0 <HAL_DMA_Abort_IT+0x290>
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	4a56      	ldr	r2, [pc, #344]	@ (801aa14 <HAL_DMA_Abort_IT+0x3e4>)
 801a8bc:	4293      	cmp	r3, r2
 801a8be:	d108      	bne.n	801a8d2 <HAL_DMA_Abort_IT+0x2a2>
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	681a      	ldr	r2, [r3, #0]
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	f022 0201 	bic.w	r2, r2, #1
 801a8ce:	601a      	str	r2, [r3, #0]
 801a8d0:	e007      	b.n	801a8e2 <HAL_DMA_Abort_IT+0x2b2>
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	681a      	ldr	r2, [r3, #0]
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	f022 0201 	bic.w	r2, r2, #1
 801a8e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	4a3c      	ldr	r2, [pc, #240]	@ (801a9d8 <HAL_DMA_Abort_IT+0x3a8>)
 801a8e8:	4293      	cmp	r3, r2
 801a8ea:	d072      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	4a3a      	ldr	r2, [pc, #232]	@ (801a9dc <HAL_DMA_Abort_IT+0x3ac>)
 801a8f2:	4293      	cmp	r3, r2
 801a8f4:	d06d      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	4a39      	ldr	r2, [pc, #228]	@ (801a9e0 <HAL_DMA_Abort_IT+0x3b0>)
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	d068      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	4a37      	ldr	r2, [pc, #220]	@ (801a9e4 <HAL_DMA_Abort_IT+0x3b4>)
 801a906:	4293      	cmp	r3, r2
 801a908:	d063      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	4a36      	ldr	r2, [pc, #216]	@ (801a9e8 <HAL_DMA_Abort_IT+0x3b8>)
 801a910:	4293      	cmp	r3, r2
 801a912:	d05e      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	4a34      	ldr	r2, [pc, #208]	@ (801a9ec <HAL_DMA_Abort_IT+0x3bc>)
 801a91a:	4293      	cmp	r3, r2
 801a91c:	d059      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	4a33      	ldr	r2, [pc, #204]	@ (801a9f0 <HAL_DMA_Abort_IT+0x3c0>)
 801a924:	4293      	cmp	r3, r2
 801a926:	d054      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	4a31      	ldr	r2, [pc, #196]	@ (801a9f4 <HAL_DMA_Abort_IT+0x3c4>)
 801a92e:	4293      	cmp	r3, r2
 801a930:	d04f      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	4a30      	ldr	r2, [pc, #192]	@ (801a9f8 <HAL_DMA_Abort_IT+0x3c8>)
 801a938:	4293      	cmp	r3, r2
 801a93a:	d04a      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	4a2e      	ldr	r2, [pc, #184]	@ (801a9fc <HAL_DMA_Abort_IT+0x3cc>)
 801a942:	4293      	cmp	r3, r2
 801a944:	d045      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	4a2d      	ldr	r2, [pc, #180]	@ (801aa00 <HAL_DMA_Abort_IT+0x3d0>)
 801a94c:	4293      	cmp	r3, r2
 801a94e:	d040      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	4a2b      	ldr	r2, [pc, #172]	@ (801aa04 <HAL_DMA_Abort_IT+0x3d4>)
 801a956:	4293      	cmp	r3, r2
 801a958:	d03b      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	4a2a      	ldr	r2, [pc, #168]	@ (801aa08 <HAL_DMA_Abort_IT+0x3d8>)
 801a960:	4293      	cmp	r3, r2
 801a962:	d036      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	4a28      	ldr	r2, [pc, #160]	@ (801aa0c <HAL_DMA_Abort_IT+0x3dc>)
 801a96a:	4293      	cmp	r3, r2
 801a96c:	d031      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	4a27      	ldr	r2, [pc, #156]	@ (801aa10 <HAL_DMA_Abort_IT+0x3e0>)
 801a974:	4293      	cmp	r3, r2
 801a976:	d02c      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	4a25      	ldr	r2, [pc, #148]	@ (801aa14 <HAL_DMA_Abort_IT+0x3e4>)
 801a97e:	4293      	cmp	r3, r2
 801a980:	d027      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	4a24      	ldr	r2, [pc, #144]	@ (801aa18 <HAL_DMA_Abort_IT+0x3e8>)
 801a988:	4293      	cmp	r3, r2
 801a98a:	d022      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	4a22      	ldr	r2, [pc, #136]	@ (801aa1c <HAL_DMA_Abort_IT+0x3ec>)
 801a992:	4293      	cmp	r3, r2
 801a994:	d01d      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	4a21      	ldr	r2, [pc, #132]	@ (801aa20 <HAL_DMA_Abort_IT+0x3f0>)
 801a99c:	4293      	cmp	r3, r2
 801a99e:	d018      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	4a1f      	ldr	r2, [pc, #124]	@ (801aa24 <HAL_DMA_Abort_IT+0x3f4>)
 801a9a6:	4293      	cmp	r3, r2
 801a9a8:	d013      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	4a1e      	ldr	r2, [pc, #120]	@ (801aa28 <HAL_DMA_Abort_IT+0x3f8>)
 801a9b0:	4293      	cmp	r3, r2
 801a9b2:	d00e      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	4a1c      	ldr	r2, [pc, #112]	@ (801aa2c <HAL_DMA_Abort_IT+0x3fc>)
 801a9ba:	4293      	cmp	r3, r2
 801a9bc:	d009      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	4a1b      	ldr	r2, [pc, #108]	@ (801aa30 <HAL_DMA_Abort_IT+0x400>)
 801a9c4:	4293      	cmp	r3, r2
 801a9c6:	d004      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x3a2>
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	4a19      	ldr	r2, [pc, #100]	@ (801aa34 <HAL_DMA_Abort_IT+0x404>)
 801a9ce:	4293      	cmp	r3, r2
 801a9d0:	d132      	bne.n	801aa38 <HAL_DMA_Abort_IT+0x408>
 801a9d2:	2301      	movs	r3, #1
 801a9d4:	e031      	b.n	801aa3a <HAL_DMA_Abort_IT+0x40a>
 801a9d6:	bf00      	nop
 801a9d8:	40020010 	.word	0x40020010
 801a9dc:	40020028 	.word	0x40020028
 801a9e0:	40020040 	.word	0x40020040
 801a9e4:	40020058 	.word	0x40020058
 801a9e8:	40020070 	.word	0x40020070
 801a9ec:	40020088 	.word	0x40020088
 801a9f0:	400200a0 	.word	0x400200a0
 801a9f4:	400200b8 	.word	0x400200b8
 801a9f8:	40020410 	.word	0x40020410
 801a9fc:	40020428 	.word	0x40020428
 801aa00:	40020440 	.word	0x40020440
 801aa04:	40020458 	.word	0x40020458
 801aa08:	40020470 	.word	0x40020470
 801aa0c:	40020488 	.word	0x40020488
 801aa10:	400204a0 	.word	0x400204a0
 801aa14:	400204b8 	.word	0x400204b8
 801aa18:	58025408 	.word	0x58025408
 801aa1c:	5802541c 	.word	0x5802541c
 801aa20:	58025430 	.word	0x58025430
 801aa24:	58025444 	.word	0x58025444
 801aa28:	58025458 	.word	0x58025458
 801aa2c:	5802546c 	.word	0x5802546c
 801aa30:	58025480 	.word	0x58025480
 801aa34:	58025494 	.word	0x58025494
 801aa38:	2300      	movs	r3, #0
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d028      	beq.n	801aa90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801aa42:	681a      	ldr	r2, [r3, #0]
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801aa48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801aa4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aa52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa58:	f003 031f 	and.w	r3, r3, #31
 801aa5c:	2201      	movs	r2, #1
 801aa5e:	409a      	lsls	r2, r3
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801aa68:	687a      	ldr	r2, [r7, #4]
 801aa6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801aa6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d00c      	beq.n	801aa90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa7a:	681a      	ldr	r2, [r3, #0]
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801aa84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aa8a:	687a      	ldr	r2, [r7, #4]
 801aa8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801aa8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	2201      	movs	r2, #1
 801aa94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d003      	beq.n	801aab0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aaac:	6878      	ldr	r0, [r7, #4]
 801aaae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801aab0:	2300      	movs	r3, #0
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3710      	adds	r7, #16
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
 801aaba:	bf00      	nop

0801aabc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b08a      	sub	sp, #40	@ 0x28
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801aac4:	2300      	movs	r3, #0
 801aac6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801aac8:	4b67      	ldr	r3, [pc, #412]	@ (801ac68 <HAL_DMA_IRQHandler+0x1ac>)
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	4a67      	ldr	r2, [pc, #412]	@ (801ac6c <HAL_DMA_IRQHandler+0x1b0>)
 801aace:	fba2 2303 	umull	r2, r3, r2, r3
 801aad2:	0a9b      	lsrs	r3, r3, #10
 801aad4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aada:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aae0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801aae2:	6a3b      	ldr	r3, [r7, #32]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801aae8:	69fb      	ldr	r3, [r7, #28]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	4a5f      	ldr	r2, [pc, #380]	@ (801ac70 <HAL_DMA_IRQHandler+0x1b4>)
 801aaf4:	4293      	cmp	r3, r2
 801aaf6:	d04a      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	4a5d      	ldr	r2, [pc, #372]	@ (801ac74 <HAL_DMA_IRQHandler+0x1b8>)
 801aafe:	4293      	cmp	r3, r2
 801ab00:	d045      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	4a5c      	ldr	r2, [pc, #368]	@ (801ac78 <HAL_DMA_IRQHandler+0x1bc>)
 801ab08:	4293      	cmp	r3, r2
 801ab0a:	d040      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	4a5a      	ldr	r2, [pc, #360]	@ (801ac7c <HAL_DMA_IRQHandler+0x1c0>)
 801ab12:	4293      	cmp	r3, r2
 801ab14:	d03b      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	4a59      	ldr	r2, [pc, #356]	@ (801ac80 <HAL_DMA_IRQHandler+0x1c4>)
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	d036      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	4a57      	ldr	r2, [pc, #348]	@ (801ac84 <HAL_DMA_IRQHandler+0x1c8>)
 801ab26:	4293      	cmp	r3, r2
 801ab28:	d031      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	4a56      	ldr	r2, [pc, #344]	@ (801ac88 <HAL_DMA_IRQHandler+0x1cc>)
 801ab30:	4293      	cmp	r3, r2
 801ab32:	d02c      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	4a54      	ldr	r2, [pc, #336]	@ (801ac8c <HAL_DMA_IRQHandler+0x1d0>)
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	d027      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	4a53      	ldr	r2, [pc, #332]	@ (801ac90 <HAL_DMA_IRQHandler+0x1d4>)
 801ab44:	4293      	cmp	r3, r2
 801ab46:	d022      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	4a51      	ldr	r2, [pc, #324]	@ (801ac94 <HAL_DMA_IRQHandler+0x1d8>)
 801ab4e:	4293      	cmp	r3, r2
 801ab50:	d01d      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	4a50      	ldr	r2, [pc, #320]	@ (801ac98 <HAL_DMA_IRQHandler+0x1dc>)
 801ab58:	4293      	cmp	r3, r2
 801ab5a:	d018      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	4a4e      	ldr	r2, [pc, #312]	@ (801ac9c <HAL_DMA_IRQHandler+0x1e0>)
 801ab62:	4293      	cmp	r3, r2
 801ab64:	d013      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	4a4d      	ldr	r2, [pc, #308]	@ (801aca0 <HAL_DMA_IRQHandler+0x1e4>)
 801ab6c:	4293      	cmp	r3, r2
 801ab6e:	d00e      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	4a4b      	ldr	r2, [pc, #300]	@ (801aca4 <HAL_DMA_IRQHandler+0x1e8>)
 801ab76:	4293      	cmp	r3, r2
 801ab78:	d009      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	4a4a      	ldr	r2, [pc, #296]	@ (801aca8 <HAL_DMA_IRQHandler+0x1ec>)
 801ab80:	4293      	cmp	r3, r2
 801ab82:	d004      	beq.n	801ab8e <HAL_DMA_IRQHandler+0xd2>
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	4a48      	ldr	r2, [pc, #288]	@ (801acac <HAL_DMA_IRQHandler+0x1f0>)
 801ab8a:	4293      	cmp	r3, r2
 801ab8c:	d101      	bne.n	801ab92 <HAL_DMA_IRQHandler+0xd6>
 801ab8e:	2301      	movs	r3, #1
 801ab90:	e000      	b.n	801ab94 <HAL_DMA_IRQHandler+0xd8>
 801ab92:	2300      	movs	r3, #0
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	f000 842b 	beq.w	801b3f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab9e:	f003 031f 	and.w	r3, r3, #31
 801aba2:	2208      	movs	r2, #8
 801aba4:	409a      	lsls	r2, r3
 801aba6:	69bb      	ldr	r3, [r7, #24]
 801aba8:	4013      	ands	r3, r2
 801abaa:	2b00      	cmp	r3, #0
 801abac:	f000 80a2 	beq.w	801acf4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	4a2e      	ldr	r2, [pc, #184]	@ (801ac70 <HAL_DMA_IRQHandler+0x1b4>)
 801abb6:	4293      	cmp	r3, r2
 801abb8:	d04a      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	4a2d      	ldr	r2, [pc, #180]	@ (801ac74 <HAL_DMA_IRQHandler+0x1b8>)
 801abc0:	4293      	cmp	r3, r2
 801abc2:	d045      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	4a2b      	ldr	r2, [pc, #172]	@ (801ac78 <HAL_DMA_IRQHandler+0x1bc>)
 801abca:	4293      	cmp	r3, r2
 801abcc:	d040      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	4a2a      	ldr	r2, [pc, #168]	@ (801ac7c <HAL_DMA_IRQHandler+0x1c0>)
 801abd4:	4293      	cmp	r3, r2
 801abd6:	d03b      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	4a28      	ldr	r2, [pc, #160]	@ (801ac80 <HAL_DMA_IRQHandler+0x1c4>)
 801abde:	4293      	cmp	r3, r2
 801abe0:	d036      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	4a27      	ldr	r2, [pc, #156]	@ (801ac84 <HAL_DMA_IRQHandler+0x1c8>)
 801abe8:	4293      	cmp	r3, r2
 801abea:	d031      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	4a25      	ldr	r2, [pc, #148]	@ (801ac88 <HAL_DMA_IRQHandler+0x1cc>)
 801abf2:	4293      	cmp	r3, r2
 801abf4:	d02c      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	4a24      	ldr	r2, [pc, #144]	@ (801ac8c <HAL_DMA_IRQHandler+0x1d0>)
 801abfc:	4293      	cmp	r3, r2
 801abfe:	d027      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	4a22      	ldr	r2, [pc, #136]	@ (801ac90 <HAL_DMA_IRQHandler+0x1d4>)
 801ac06:	4293      	cmp	r3, r2
 801ac08:	d022      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	4a21      	ldr	r2, [pc, #132]	@ (801ac94 <HAL_DMA_IRQHandler+0x1d8>)
 801ac10:	4293      	cmp	r3, r2
 801ac12:	d01d      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	4a1f      	ldr	r2, [pc, #124]	@ (801ac98 <HAL_DMA_IRQHandler+0x1dc>)
 801ac1a:	4293      	cmp	r3, r2
 801ac1c:	d018      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	4a1e      	ldr	r2, [pc, #120]	@ (801ac9c <HAL_DMA_IRQHandler+0x1e0>)
 801ac24:	4293      	cmp	r3, r2
 801ac26:	d013      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	4a1c      	ldr	r2, [pc, #112]	@ (801aca0 <HAL_DMA_IRQHandler+0x1e4>)
 801ac2e:	4293      	cmp	r3, r2
 801ac30:	d00e      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	4a1b      	ldr	r2, [pc, #108]	@ (801aca4 <HAL_DMA_IRQHandler+0x1e8>)
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	d009      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4a19      	ldr	r2, [pc, #100]	@ (801aca8 <HAL_DMA_IRQHandler+0x1ec>)
 801ac42:	4293      	cmp	r3, r2
 801ac44:	d004      	beq.n	801ac50 <HAL_DMA_IRQHandler+0x194>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4a18      	ldr	r2, [pc, #96]	@ (801acac <HAL_DMA_IRQHandler+0x1f0>)
 801ac4c:	4293      	cmp	r3, r2
 801ac4e:	d12f      	bne.n	801acb0 <HAL_DMA_IRQHandler+0x1f4>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	f003 0304 	and.w	r3, r3, #4
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	bf14      	ite	ne
 801ac5e:	2301      	movne	r3, #1
 801ac60:	2300      	moveq	r3, #0
 801ac62:	b2db      	uxtb	r3, r3
 801ac64:	e02e      	b.n	801acc4 <HAL_DMA_IRQHandler+0x208>
 801ac66:	bf00      	nop
 801ac68:	20000000 	.word	0x20000000
 801ac6c:	1b4e81b5 	.word	0x1b4e81b5
 801ac70:	40020010 	.word	0x40020010
 801ac74:	40020028 	.word	0x40020028
 801ac78:	40020040 	.word	0x40020040
 801ac7c:	40020058 	.word	0x40020058
 801ac80:	40020070 	.word	0x40020070
 801ac84:	40020088 	.word	0x40020088
 801ac88:	400200a0 	.word	0x400200a0
 801ac8c:	400200b8 	.word	0x400200b8
 801ac90:	40020410 	.word	0x40020410
 801ac94:	40020428 	.word	0x40020428
 801ac98:	40020440 	.word	0x40020440
 801ac9c:	40020458 	.word	0x40020458
 801aca0:	40020470 	.word	0x40020470
 801aca4:	40020488 	.word	0x40020488
 801aca8:	400204a0 	.word	0x400204a0
 801acac:	400204b8 	.word	0x400204b8
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	f003 0308 	and.w	r3, r3, #8
 801acba:	2b00      	cmp	r3, #0
 801acbc:	bf14      	ite	ne
 801acbe:	2301      	movne	r3, #1
 801acc0:	2300      	moveq	r3, #0
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d015      	beq.n	801acf4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	681a      	ldr	r2, [r3, #0]
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	f022 0204 	bic.w	r2, r2, #4
 801acd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801acdc:	f003 031f 	and.w	r3, r3, #31
 801ace0:	2208      	movs	r2, #8
 801ace2:	409a      	lsls	r2, r3
 801ace4:	6a3b      	ldr	r3, [r7, #32]
 801ace6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801acec:	f043 0201 	orr.w	r2, r3, #1
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801acf8:	f003 031f 	and.w	r3, r3, #31
 801acfc:	69ba      	ldr	r2, [r7, #24]
 801acfe:	fa22 f303 	lsr.w	r3, r2, r3
 801ad02:	f003 0301 	and.w	r3, r3, #1
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d06e      	beq.n	801ade8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	4a69      	ldr	r2, [pc, #420]	@ (801aeb4 <HAL_DMA_IRQHandler+0x3f8>)
 801ad10:	4293      	cmp	r3, r2
 801ad12:	d04a      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	4a67      	ldr	r2, [pc, #412]	@ (801aeb8 <HAL_DMA_IRQHandler+0x3fc>)
 801ad1a:	4293      	cmp	r3, r2
 801ad1c:	d045      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	4a66      	ldr	r2, [pc, #408]	@ (801aebc <HAL_DMA_IRQHandler+0x400>)
 801ad24:	4293      	cmp	r3, r2
 801ad26:	d040      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	4a64      	ldr	r2, [pc, #400]	@ (801aec0 <HAL_DMA_IRQHandler+0x404>)
 801ad2e:	4293      	cmp	r3, r2
 801ad30:	d03b      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	4a63      	ldr	r2, [pc, #396]	@ (801aec4 <HAL_DMA_IRQHandler+0x408>)
 801ad38:	4293      	cmp	r3, r2
 801ad3a:	d036      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	4a61      	ldr	r2, [pc, #388]	@ (801aec8 <HAL_DMA_IRQHandler+0x40c>)
 801ad42:	4293      	cmp	r3, r2
 801ad44:	d031      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	4a60      	ldr	r2, [pc, #384]	@ (801aecc <HAL_DMA_IRQHandler+0x410>)
 801ad4c:	4293      	cmp	r3, r2
 801ad4e:	d02c      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	4a5e      	ldr	r2, [pc, #376]	@ (801aed0 <HAL_DMA_IRQHandler+0x414>)
 801ad56:	4293      	cmp	r3, r2
 801ad58:	d027      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	4a5d      	ldr	r2, [pc, #372]	@ (801aed4 <HAL_DMA_IRQHandler+0x418>)
 801ad60:	4293      	cmp	r3, r2
 801ad62:	d022      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	4a5b      	ldr	r2, [pc, #364]	@ (801aed8 <HAL_DMA_IRQHandler+0x41c>)
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d01d      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	4a5a      	ldr	r2, [pc, #360]	@ (801aedc <HAL_DMA_IRQHandler+0x420>)
 801ad74:	4293      	cmp	r3, r2
 801ad76:	d018      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	4a58      	ldr	r2, [pc, #352]	@ (801aee0 <HAL_DMA_IRQHandler+0x424>)
 801ad7e:	4293      	cmp	r3, r2
 801ad80:	d013      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	4a57      	ldr	r2, [pc, #348]	@ (801aee4 <HAL_DMA_IRQHandler+0x428>)
 801ad88:	4293      	cmp	r3, r2
 801ad8a:	d00e      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	4a55      	ldr	r2, [pc, #340]	@ (801aee8 <HAL_DMA_IRQHandler+0x42c>)
 801ad92:	4293      	cmp	r3, r2
 801ad94:	d009      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	4a54      	ldr	r2, [pc, #336]	@ (801aeec <HAL_DMA_IRQHandler+0x430>)
 801ad9c:	4293      	cmp	r3, r2
 801ad9e:	d004      	beq.n	801adaa <HAL_DMA_IRQHandler+0x2ee>
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	4a52      	ldr	r2, [pc, #328]	@ (801aef0 <HAL_DMA_IRQHandler+0x434>)
 801ada6:	4293      	cmp	r3, r2
 801ada8:	d10a      	bne.n	801adc0 <HAL_DMA_IRQHandler+0x304>
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	695b      	ldr	r3, [r3, #20]
 801adb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	bf14      	ite	ne
 801adb8:	2301      	movne	r3, #1
 801adba:	2300      	moveq	r3, #0
 801adbc:	b2db      	uxtb	r3, r3
 801adbe:	e003      	b.n	801adc8 <HAL_DMA_IRQHandler+0x30c>
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	2300      	movs	r3, #0
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d00d      	beq.n	801ade8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801add0:	f003 031f 	and.w	r3, r3, #31
 801add4:	2201      	movs	r2, #1
 801add6:	409a      	lsls	r2, r3
 801add8:	6a3b      	ldr	r3, [r7, #32]
 801adda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ade0:	f043 0202 	orr.w	r2, r3, #2
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801adec:	f003 031f 	and.w	r3, r3, #31
 801adf0:	2204      	movs	r2, #4
 801adf2:	409a      	lsls	r2, r3
 801adf4:	69bb      	ldr	r3, [r7, #24]
 801adf6:	4013      	ands	r3, r2
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	f000 808f 	beq.w	801af1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4a2c      	ldr	r2, [pc, #176]	@ (801aeb4 <HAL_DMA_IRQHandler+0x3f8>)
 801ae04:	4293      	cmp	r3, r2
 801ae06:	d04a      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	4a2a      	ldr	r2, [pc, #168]	@ (801aeb8 <HAL_DMA_IRQHandler+0x3fc>)
 801ae0e:	4293      	cmp	r3, r2
 801ae10:	d045      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	4a29      	ldr	r2, [pc, #164]	@ (801aebc <HAL_DMA_IRQHandler+0x400>)
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d040      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	4a27      	ldr	r2, [pc, #156]	@ (801aec0 <HAL_DMA_IRQHandler+0x404>)
 801ae22:	4293      	cmp	r3, r2
 801ae24:	d03b      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4a26      	ldr	r2, [pc, #152]	@ (801aec4 <HAL_DMA_IRQHandler+0x408>)
 801ae2c:	4293      	cmp	r3, r2
 801ae2e:	d036      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	4a24      	ldr	r2, [pc, #144]	@ (801aec8 <HAL_DMA_IRQHandler+0x40c>)
 801ae36:	4293      	cmp	r3, r2
 801ae38:	d031      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	4a23      	ldr	r2, [pc, #140]	@ (801aecc <HAL_DMA_IRQHandler+0x410>)
 801ae40:	4293      	cmp	r3, r2
 801ae42:	d02c      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	4a21      	ldr	r2, [pc, #132]	@ (801aed0 <HAL_DMA_IRQHandler+0x414>)
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d027      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	4a20      	ldr	r2, [pc, #128]	@ (801aed4 <HAL_DMA_IRQHandler+0x418>)
 801ae54:	4293      	cmp	r3, r2
 801ae56:	d022      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	4a1e      	ldr	r2, [pc, #120]	@ (801aed8 <HAL_DMA_IRQHandler+0x41c>)
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	d01d      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	4a1d      	ldr	r2, [pc, #116]	@ (801aedc <HAL_DMA_IRQHandler+0x420>)
 801ae68:	4293      	cmp	r3, r2
 801ae6a:	d018      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	4a1b      	ldr	r2, [pc, #108]	@ (801aee0 <HAL_DMA_IRQHandler+0x424>)
 801ae72:	4293      	cmp	r3, r2
 801ae74:	d013      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	4a1a      	ldr	r2, [pc, #104]	@ (801aee4 <HAL_DMA_IRQHandler+0x428>)
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	d00e      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	4a18      	ldr	r2, [pc, #96]	@ (801aee8 <HAL_DMA_IRQHandler+0x42c>)
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d009      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	4a17      	ldr	r2, [pc, #92]	@ (801aeec <HAL_DMA_IRQHandler+0x430>)
 801ae90:	4293      	cmp	r3, r2
 801ae92:	d004      	beq.n	801ae9e <HAL_DMA_IRQHandler+0x3e2>
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	4a15      	ldr	r2, [pc, #84]	@ (801aef0 <HAL_DMA_IRQHandler+0x434>)
 801ae9a:	4293      	cmp	r3, r2
 801ae9c:	d12a      	bne.n	801aef4 <HAL_DMA_IRQHandler+0x438>
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	f003 0302 	and.w	r3, r3, #2
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	bf14      	ite	ne
 801aeac:	2301      	movne	r3, #1
 801aeae:	2300      	moveq	r3, #0
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	e023      	b.n	801aefc <HAL_DMA_IRQHandler+0x440>
 801aeb4:	40020010 	.word	0x40020010
 801aeb8:	40020028 	.word	0x40020028
 801aebc:	40020040 	.word	0x40020040
 801aec0:	40020058 	.word	0x40020058
 801aec4:	40020070 	.word	0x40020070
 801aec8:	40020088 	.word	0x40020088
 801aecc:	400200a0 	.word	0x400200a0
 801aed0:	400200b8 	.word	0x400200b8
 801aed4:	40020410 	.word	0x40020410
 801aed8:	40020428 	.word	0x40020428
 801aedc:	40020440 	.word	0x40020440
 801aee0:	40020458 	.word	0x40020458
 801aee4:	40020470 	.word	0x40020470
 801aee8:	40020488 	.word	0x40020488
 801aeec:	400204a0 	.word	0x400204a0
 801aef0:	400204b8 	.word	0x400204b8
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	2300      	movs	r3, #0
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d00d      	beq.n	801af1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801af04:	f003 031f 	and.w	r3, r3, #31
 801af08:	2204      	movs	r2, #4
 801af0a:	409a      	lsls	r2, r3
 801af0c:	6a3b      	ldr	r3, [r7, #32]
 801af0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801af14:	f043 0204 	orr.w	r2, r3, #4
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801af20:	f003 031f 	and.w	r3, r3, #31
 801af24:	2210      	movs	r2, #16
 801af26:	409a      	lsls	r2, r3
 801af28:	69bb      	ldr	r3, [r7, #24]
 801af2a:	4013      	ands	r3, r2
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	f000 80a6 	beq.w	801b07e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	4a85      	ldr	r2, [pc, #532]	@ (801b14c <HAL_DMA_IRQHandler+0x690>)
 801af38:	4293      	cmp	r3, r2
 801af3a:	d04a      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	4a83      	ldr	r2, [pc, #524]	@ (801b150 <HAL_DMA_IRQHandler+0x694>)
 801af42:	4293      	cmp	r3, r2
 801af44:	d045      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	4a82      	ldr	r2, [pc, #520]	@ (801b154 <HAL_DMA_IRQHandler+0x698>)
 801af4c:	4293      	cmp	r3, r2
 801af4e:	d040      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	4a80      	ldr	r2, [pc, #512]	@ (801b158 <HAL_DMA_IRQHandler+0x69c>)
 801af56:	4293      	cmp	r3, r2
 801af58:	d03b      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	4a7f      	ldr	r2, [pc, #508]	@ (801b15c <HAL_DMA_IRQHandler+0x6a0>)
 801af60:	4293      	cmp	r3, r2
 801af62:	d036      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	4a7d      	ldr	r2, [pc, #500]	@ (801b160 <HAL_DMA_IRQHandler+0x6a4>)
 801af6a:	4293      	cmp	r3, r2
 801af6c:	d031      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	4a7c      	ldr	r2, [pc, #496]	@ (801b164 <HAL_DMA_IRQHandler+0x6a8>)
 801af74:	4293      	cmp	r3, r2
 801af76:	d02c      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	4a7a      	ldr	r2, [pc, #488]	@ (801b168 <HAL_DMA_IRQHandler+0x6ac>)
 801af7e:	4293      	cmp	r3, r2
 801af80:	d027      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	4a79      	ldr	r2, [pc, #484]	@ (801b16c <HAL_DMA_IRQHandler+0x6b0>)
 801af88:	4293      	cmp	r3, r2
 801af8a:	d022      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	4a77      	ldr	r2, [pc, #476]	@ (801b170 <HAL_DMA_IRQHandler+0x6b4>)
 801af92:	4293      	cmp	r3, r2
 801af94:	d01d      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	4a76      	ldr	r2, [pc, #472]	@ (801b174 <HAL_DMA_IRQHandler+0x6b8>)
 801af9c:	4293      	cmp	r3, r2
 801af9e:	d018      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	4a74      	ldr	r2, [pc, #464]	@ (801b178 <HAL_DMA_IRQHandler+0x6bc>)
 801afa6:	4293      	cmp	r3, r2
 801afa8:	d013      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	4a73      	ldr	r2, [pc, #460]	@ (801b17c <HAL_DMA_IRQHandler+0x6c0>)
 801afb0:	4293      	cmp	r3, r2
 801afb2:	d00e      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	4a71      	ldr	r2, [pc, #452]	@ (801b180 <HAL_DMA_IRQHandler+0x6c4>)
 801afba:	4293      	cmp	r3, r2
 801afbc:	d009      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	4a70      	ldr	r2, [pc, #448]	@ (801b184 <HAL_DMA_IRQHandler+0x6c8>)
 801afc4:	4293      	cmp	r3, r2
 801afc6:	d004      	beq.n	801afd2 <HAL_DMA_IRQHandler+0x516>
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	4a6e      	ldr	r2, [pc, #440]	@ (801b188 <HAL_DMA_IRQHandler+0x6cc>)
 801afce:	4293      	cmp	r3, r2
 801afd0:	d10a      	bne.n	801afe8 <HAL_DMA_IRQHandler+0x52c>
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	f003 0308 	and.w	r3, r3, #8
 801afdc:	2b00      	cmp	r3, #0
 801afde:	bf14      	ite	ne
 801afe0:	2301      	movne	r3, #1
 801afe2:	2300      	moveq	r3, #0
 801afe4:	b2db      	uxtb	r3, r3
 801afe6:	e009      	b.n	801affc <HAL_DMA_IRQHandler+0x540>
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	f003 0304 	and.w	r3, r3, #4
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	bf14      	ite	ne
 801aff6:	2301      	movne	r3, #1
 801aff8:	2300      	moveq	r3, #0
 801affa:	b2db      	uxtb	r3, r3
 801affc:	2b00      	cmp	r3, #0
 801affe:	d03e      	beq.n	801b07e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b004:	f003 031f 	and.w	r3, r3, #31
 801b008:	2210      	movs	r2, #16
 801b00a:	409a      	lsls	r2, r3
 801b00c:	6a3b      	ldr	r3, [r7, #32]
 801b00e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d018      	beq.n	801b050 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d108      	bne.n	801b03e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b030:	2b00      	cmp	r3, #0
 801b032:	d024      	beq.n	801b07e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b038:	6878      	ldr	r0, [r7, #4]
 801b03a:	4798      	blx	r3
 801b03c:	e01f      	b.n	801b07e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b042:	2b00      	cmp	r3, #0
 801b044:	d01b      	beq.n	801b07e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b04a:	6878      	ldr	r0, [r7, #4]
 801b04c:	4798      	blx	r3
 801b04e:	e016      	b.n	801b07e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d107      	bne.n	801b06e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	681a      	ldr	r2, [r3, #0]
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	f022 0208 	bic.w	r2, r2, #8
 801b06c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b072:	2b00      	cmp	r3, #0
 801b074:	d003      	beq.n	801b07e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b07a:	6878      	ldr	r0, [r7, #4]
 801b07c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b082:	f003 031f 	and.w	r3, r3, #31
 801b086:	2220      	movs	r2, #32
 801b088:	409a      	lsls	r2, r3
 801b08a:	69bb      	ldr	r3, [r7, #24]
 801b08c:	4013      	ands	r3, r2
 801b08e:	2b00      	cmp	r3, #0
 801b090:	f000 8110 	beq.w	801b2b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	4a2c      	ldr	r2, [pc, #176]	@ (801b14c <HAL_DMA_IRQHandler+0x690>)
 801b09a:	4293      	cmp	r3, r2
 801b09c:	d04a      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	4a2b      	ldr	r2, [pc, #172]	@ (801b150 <HAL_DMA_IRQHandler+0x694>)
 801b0a4:	4293      	cmp	r3, r2
 801b0a6:	d045      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	4a29      	ldr	r2, [pc, #164]	@ (801b154 <HAL_DMA_IRQHandler+0x698>)
 801b0ae:	4293      	cmp	r3, r2
 801b0b0:	d040      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	4a28      	ldr	r2, [pc, #160]	@ (801b158 <HAL_DMA_IRQHandler+0x69c>)
 801b0b8:	4293      	cmp	r3, r2
 801b0ba:	d03b      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	4a26      	ldr	r2, [pc, #152]	@ (801b15c <HAL_DMA_IRQHandler+0x6a0>)
 801b0c2:	4293      	cmp	r3, r2
 801b0c4:	d036      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	4a25      	ldr	r2, [pc, #148]	@ (801b160 <HAL_DMA_IRQHandler+0x6a4>)
 801b0cc:	4293      	cmp	r3, r2
 801b0ce:	d031      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	4a23      	ldr	r2, [pc, #140]	@ (801b164 <HAL_DMA_IRQHandler+0x6a8>)
 801b0d6:	4293      	cmp	r3, r2
 801b0d8:	d02c      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	4a22      	ldr	r2, [pc, #136]	@ (801b168 <HAL_DMA_IRQHandler+0x6ac>)
 801b0e0:	4293      	cmp	r3, r2
 801b0e2:	d027      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	4a20      	ldr	r2, [pc, #128]	@ (801b16c <HAL_DMA_IRQHandler+0x6b0>)
 801b0ea:	4293      	cmp	r3, r2
 801b0ec:	d022      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	4a1f      	ldr	r2, [pc, #124]	@ (801b170 <HAL_DMA_IRQHandler+0x6b4>)
 801b0f4:	4293      	cmp	r3, r2
 801b0f6:	d01d      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	4a1d      	ldr	r2, [pc, #116]	@ (801b174 <HAL_DMA_IRQHandler+0x6b8>)
 801b0fe:	4293      	cmp	r3, r2
 801b100:	d018      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	4a1c      	ldr	r2, [pc, #112]	@ (801b178 <HAL_DMA_IRQHandler+0x6bc>)
 801b108:	4293      	cmp	r3, r2
 801b10a:	d013      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	4a1a      	ldr	r2, [pc, #104]	@ (801b17c <HAL_DMA_IRQHandler+0x6c0>)
 801b112:	4293      	cmp	r3, r2
 801b114:	d00e      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	4a19      	ldr	r2, [pc, #100]	@ (801b180 <HAL_DMA_IRQHandler+0x6c4>)
 801b11c:	4293      	cmp	r3, r2
 801b11e:	d009      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	4a17      	ldr	r2, [pc, #92]	@ (801b184 <HAL_DMA_IRQHandler+0x6c8>)
 801b126:	4293      	cmp	r3, r2
 801b128:	d004      	beq.n	801b134 <HAL_DMA_IRQHandler+0x678>
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	4a16      	ldr	r2, [pc, #88]	@ (801b188 <HAL_DMA_IRQHandler+0x6cc>)
 801b130:	4293      	cmp	r3, r2
 801b132:	d12b      	bne.n	801b18c <HAL_DMA_IRQHandler+0x6d0>
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	f003 0310 	and.w	r3, r3, #16
 801b13e:	2b00      	cmp	r3, #0
 801b140:	bf14      	ite	ne
 801b142:	2301      	movne	r3, #1
 801b144:	2300      	moveq	r3, #0
 801b146:	b2db      	uxtb	r3, r3
 801b148:	e02a      	b.n	801b1a0 <HAL_DMA_IRQHandler+0x6e4>
 801b14a:	bf00      	nop
 801b14c:	40020010 	.word	0x40020010
 801b150:	40020028 	.word	0x40020028
 801b154:	40020040 	.word	0x40020040
 801b158:	40020058 	.word	0x40020058
 801b15c:	40020070 	.word	0x40020070
 801b160:	40020088 	.word	0x40020088
 801b164:	400200a0 	.word	0x400200a0
 801b168:	400200b8 	.word	0x400200b8
 801b16c:	40020410 	.word	0x40020410
 801b170:	40020428 	.word	0x40020428
 801b174:	40020440 	.word	0x40020440
 801b178:	40020458 	.word	0x40020458
 801b17c:	40020470 	.word	0x40020470
 801b180:	40020488 	.word	0x40020488
 801b184:	400204a0 	.word	0x400204a0
 801b188:	400204b8 	.word	0x400204b8
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	f003 0302 	and.w	r3, r3, #2
 801b196:	2b00      	cmp	r3, #0
 801b198:	bf14      	ite	ne
 801b19a:	2301      	movne	r3, #1
 801b19c:	2300      	moveq	r3, #0
 801b19e:	b2db      	uxtb	r3, r3
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	f000 8087 	beq.w	801b2b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b1aa:	f003 031f 	and.w	r3, r3, #31
 801b1ae:	2220      	movs	r2, #32
 801b1b0:	409a      	lsls	r2, r3
 801b1b2:	6a3b      	ldr	r3, [r7, #32]
 801b1b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b1bc:	b2db      	uxtb	r3, r3
 801b1be:	2b04      	cmp	r3, #4
 801b1c0:	d139      	bne.n	801b236 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	681a      	ldr	r2, [r3, #0]
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	f022 0216 	bic.w	r2, r2, #22
 801b1d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	695a      	ldr	r2, [r3, #20]
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b1e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d103      	bne.n	801b1f2 <HAL_DMA_IRQHandler+0x736>
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d007      	beq.n	801b202 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	681a      	ldr	r2, [r3, #0]
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	f022 0208 	bic.w	r2, r2, #8
 801b200:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b206:	f003 031f 	and.w	r3, r3, #31
 801b20a:	223f      	movs	r2, #63	@ 0x3f
 801b20c:	409a      	lsls	r2, r3
 801b20e:	6a3b      	ldr	r3, [r7, #32]
 801b210:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	2201      	movs	r2, #1
 801b216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	2200      	movs	r2, #0
 801b21e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b226:	2b00      	cmp	r3, #0
 801b228:	f000 834a 	beq.w	801b8c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b230:	6878      	ldr	r0, [r7, #4]
 801b232:	4798      	blx	r3
          }
          return;
 801b234:	e344      	b.n	801b8c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b240:	2b00      	cmp	r3, #0
 801b242:	d018      	beq.n	801b276 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d108      	bne.n	801b264 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b256:	2b00      	cmp	r3, #0
 801b258:	d02c      	beq.n	801b2b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b25e:	6878      	ldr	r0, [r7, #4]
 801b260:	4798      	blx	r3
 801b262:	e027      	b.n	801b2b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d023      	beq.n	801b2b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	4798      	blx	r3
 801b274:	e01e      	b.n	801b2b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b280:	2b00      	cmp	r3, #0
 801b282:	d10f      	bne.n	801b2a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	681a      	ldr	r2, [r3, #0]
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	f022 0210 	bic.w	r2, r2, #16
 801b292:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	2201      	movs	r2, #1
 801b298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	2200      	movs	r2, #0
 801b2a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d003      	beq.n	801b2b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	f000 8306 	beq.w	801b8ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b2c2:	f003 0301 	and.w	r3, r3, #1
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	f000 8088 	beq.w	801b3dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	2204      	movs	r2, #4
 801b2d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	4a7a      	ldr	r2, [pc, #488]	@ (801b4c4 <HAL_DMA_IRQHandler+0xa08>)
 801b2da:	4293      	cmp	r3, r2
 801b2dc:	d04a      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	4a79      	ldr	r2, [pc, #484]	@ (801b4c8 <HAL_DMA_IRQHandler+0xa0c>)
 801b2e4:	4293      	cmp	r3, r2
 801b2e6:	d045      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	4a77      	ldr	r2, [pc, #476]	@ (801b4cc <HAL_DMA_IRQHandler+0xa10>)
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	d040      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	4a76      	ldr	r2, [pc, #472]	@ (801b4d0 <HAL_DMA_IRQHandler+0xa14>)
 801b2f8:	4293      	cmp	r3, r2
 801b2fa:	d03b      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	4a74      	ldr	r2, [pc, #464]	@ (801b4d4 <HAL_DMA_IRQHandler+0xa18>)
 801b302:	4293      	cmp	r3, r2
 801b304:	d036      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	4a73      	ldr	r2, [pc, #460]	@ (801b4d8 <HAL_DMA_IRQHandler+0xa1c>)
 801b30c:	4293      	cmp	r3, r2
 801b30e:	d031      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	4a71      	ldr	r2, [pc, #452]	@ (801b4dc <HAL_DMA_IRQHandler+0xa20>)
 801b316:	4293      	cmp	r3, r2
 801b318:	d02c      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	4a70      	ldr	r2, [pc, #448]	@ (801b4e0 <HAL_DMA_IRQHandler+0xa24>)
 801b320:	4293      	cmp	r3, r2
 801b322:	d027      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	4a6e      	ldr	r2, [pc, #440]	@ (801b4e4 <HAL_DMA_IRQHandler+0xa28>)
 801b32a:	4293      	cmp	r3, r2
 801b32c:	d022      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	4a6d      	ldr	r2, [pc, #436]	@ (801b4e8 <HAL_DMA_IRQHandler+0xa2c>)
 801b334:	4293      	cmp	r3, r2
 801b336:	d01d      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	4a6b      	ldr	r2, [pc, #428]	@ (801b4ec <HAL_DMA_IRQHandler+0xa30>)
 801b33e:	4293      	cmp	r3, r2
 801b340:	d018      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	4a6a      	ldr	r2, [pc, #424]	@ (801b4f0 <HAL_DMA_IRQHandler+0xa34>)
 801b348:	4293      	cmp	r3, r2
 801b34a:	d013      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4a68      	ldr	r2, [pc, #416]	@ (801b4f4 <HAL_DMA_IRQHandler+0xa38>)
 801b352:	4293      	cmp	r3, r2
 801b354:	d00e      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	4a67      	ldr	r2, [pc, #412]	@ (801b4f8 <HAL_DMA_IRQHandler+0xa3c>)
 801b35c:	4293      	cmp	r3, r2
 801b35e:	d009      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	4a65      	ldr	r2, [pc, #404]	@ (801b4fc <HAL_DMA_IRQHandler+0xa40>)
 801b366:	4293      	cmp	r3, r2
 801b368:	d004      	beq.n	801b374 <HAL_DMA_IRQHandler+0x8b8>
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	4a64      	ldr	r2, [pc, #400]	@ (801b500 <HAL_DMA_IRQHandler+0xa44>)
 801b370:	4293      	cmp	r3, r2
 801b372:	d108      	bne.n	801b386 <HAL_DMA_IRQHandler+0x8ca>
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	681a      	ldr	r2, [r3, #0]
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	f022 0201 	bic.w	r2, r2, #1
 801b382:	601a      	str	r2, [r3, #0]
 801b384:	e007      	b.n	801b396 <HAL_DMA_IRQHandler+0x8da>
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	681a      	ldr	r2, [r3, #0]
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	f022 0201 	bic.w	r2, r2, #1
 801b394:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	3301      	adds	r3, #1
 801b39a:	60fb      	str	r3, [r7, #12]
 801b39c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b39e:	429a      	cmp	r2, r3
 801b3a0:	d307      	bcc.n	801b3b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	f003 0301 	and.w	r3, r3, #1
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d1f2      	bne.n	801b396 <HAL_DMA_IRQHandler+0x8da>
 801b3b0:	e000      	b.n	801b3b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801b3b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	f003 0301 	and.w	r3, r3, #1
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d004      	beq.n	801b3cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	2203      	movs	r2, #3
 801b3c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801b3ca:	e003      	b.n	801b3d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2201      	movs	r2, #1
 801b3d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	f000 8272 	beq.w	801b8ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b3ea:	6878      	ldr	r0, [r7, #4]
 801b3ec:	4798      	blx	r3
 801b3ee:	e26c      	b.n	801b8ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	4a43      	ldr	r2, [pc, #268]	@ (801b504 <HAL_DMA_IRQHandler+0xa48>)
 801b3f6:	4293      	cmp	r3, r2
 801b3f8:	d022      	beq.n	801b440 <HAL_DMA_IRQHandler+0x984>
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	4a42      	ldr	r2, [pc, #264]	@ (801b508 <HAL_DMA_IRQHandler+0xa4c>)
 801b400:	4293      	cmp	r3, r2
 801b402:	d01d      	beq.n	801b440 <HAL_DMA_IRQHandler+0x984>
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	4a40      	ldr	r2, [pc, #256]	@ (801b50c <HAL_DMA_IRQHandler+0xa50>)
 801b40a:	4293      	cmp	r3, r2
 801b40c:	d018      	beq.n	801b440 <HAL_DMA_IRQHandler+0x984>
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	4a3f      	ldr	r2, [pc, #252]	@ (801b510 <HAL_DMA_IRQHandler+0xa54>)
 801b414:	4293      	cmp	r3, r2
 801b416:	d013      	beq.n	801b440 <HAL_DMA_IRQHandler+0x984>
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	4a3d      	ldr	r2, [pc, #244]	@ (801b514 <HAL_DMA_IRQHandler+0xa58>)
 801b41e:	4293      	cmp	r3, r2
 801b420:	d00e      	beq.n	801b440 <HAL_DMA_IRQHandler+0x984>
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	4a3c      	ldr	r2, [pc, #240]	@ (801b518 <HAL_DMA_IRQHandler+0xa5c>)
 801b428:	4293      	cmp	r3, r2
 801b42a:	d009      	beq.n	801b440 <HAL_DMA_IRQHandler+0x984>
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	4a3a      	ldr	r2, [pc, #232]	@ (801b51c <HAL_DMA_IRQHandler+0xa60>)
 801b432:	4293      	cmp	r3, r2
 801b434:	d004      	beq.n	801b440 <HAL_DMA_IRQHandler+0x984>
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	4a39      	ldr	r2, [pc, #228]	@ (801b520 <HAL_DMA_IRQHandler+0xa64>)
 801b43c:	4293      	cmp	r3, r2
 801b43e:	d101      	bne.n	801b444 <HAL_DMA_IRQHandler+0x988>
 801b440:	2301      	movs	r3, #1
 801b442:	e000      	b.n	801b446 <HAL_DMA_IRQHandler+0x98a>
 801b444:	2300      	movs	r3, #0
 801b446:	2b00      	cmp	r3, #0
 801b448:	f000 823f 	beq.w	801b8ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b458:	f003 031f 	and.w	r3, r3, #31
 801b45c:	2204      	movs	r2, #4
 801b45e:	409a      	lsls	r2, r3
 801b460:	697b      	ldr	r3, [r7, #20]
 801b462:	4013      	ands	r3, r2
 801b464:	2b00      	cmp	r3, #0
 801b466:	f000 80cd 	beq.w	801b604 <HAL_DMA_IRQHandler+0xb48>
 801b46a:	693b      	ldr	r3, [r7, #16]
 801b46c:	f003 0304 	and.w	r3, r3, #4
 801b470:	2b00      	cmp	r3, #0
 801b472:	f000 80c7 	beq.w	801b604 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b47a:	f003 031f 	and.w	r3, r3, #31
 801b47e:	2204      	movs	r2, #4
 801b480:	409a      	lsls	r2, r3
 801b482:	69fb      	ldr	r3, [r7, #28]
 801b484:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b486:	693b      	ldr	r3, [r7, #16]
 801b488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d049      	beq.n	801b524 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b496:	2b00      	cmp	r3, #0
 801b498:	d109      	bne.n	801b4ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	f000 8210 	beq.w	801b8c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b4a8:	6878      	ldr	r0, [r7, #4]
 801b4aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b4ac:	e20a      	b.n	801b8c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	f000 8206 	beq.w	801b8c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b4c0:	e200      	b.n	801b8c4 <HAL_DMA_IRQHandler+0xe08>
 801b4c2:	bf00      	nop
 801b4c4:	40020010 	.word	0x40020010
 801b4c8:	40020028 	.word	0x40020028
 801b4cc:	40020040 	.word	0x40020040
 801b4d0:	40020058 	.word	0x40020058
 801b4d4:	40020070 	.word	0x40020070
 801b4d8:	40020088 	.word	0x40020088
 801b4dc:	400200a0 	.word	0x400200a0
 801b4e0:	400200b8 	.word	0x400200b8
 801b4e4:	40020410 	.word	0x40020410
 801b4e8:	40020428 	.word	0x40020428
 801b4ec:	40020440 	.word	0x40020440
 801b4f0:	40020458 	.word	0x40020458
 801b4f4:	40020470 	.word	0x40020470
 801b4f8:	40020488 	.word	0x40020488
 801b4fc:	400204a0 	.word	0x400204a0
 801b500:	400204b8 	.word	0x400204b8
 801b504:	58025408 	.word	0x58025408
 801b508:	5802541c 	.word	0x5802541c
 801b50c:	58025430 	.word	0x58025430
 801b510:	58025444 	.word	0x58025444
 801b514:	58025458 	.word	0x58025458
 801b518:	5802546c 	.word	0x5802546c
 801b51c:	58025480 	.word	0x58025480
 801b520:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b524:	693b      	ldr	r3, [r7, #16]
 801b526:	f003 0320 	and.w	r3, r3, #32
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d160      	bne.n	801b5f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	4a7f      	ldr	r2, [pc, #508]	@ (801b730 <HAL_DMA_IRQHandler+0xc74>)
 801b534:	4293      	cmp	r3, r2
 801b536:	d04a      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	4a7d      	ldr	r2, [pc, #500]	@ (801b734 <HAL_DMA_IRQHandler+0xc78>)
 801b53e:	4293      	cmp	r3, r2
 801b540:	d045      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	4a7c      	ldr	r2, [pc, #496]	@ (801b738 <HAL_DMA_IRQHandler+0xc7c>)
 801b548:	4293      	cmp	r3, r2
 801b54a:	d040      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	4a7a      	ldr	r2, [pc, #488]	@ (801b73c <HAL_DMA_IRQHandler+0xc80>)
 801b552:	4293      	cmp	r3, r2
 801b554:	d03b      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	4a79      	ldr	r2, [pc, #484]	@ (801b740 <HAL_DMA_IRQHandler+0xc84>)
 801b55c:	4293      	cmp	r3, r2
 801b55e:	d036      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	4a77      	ldr	r2, [pc, #476]	@ (801b744 <HAL_DMA_IRQHandler+0xc88>)
 801b566:	4293      	cmp	r3, r2
 801b568:	d031      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	4a76      	ldr	r2, [pc, #472]	@ (801b748 <HAL_DMA_IRQHandler+0xc8c>)
 801b570:	4293      	cmp	r3, r2
 801b572:	d02c      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	4a74      	ldr	r2, [pc, #464]	@ (801b74c <HAL_DMA_IRQHandler+0xc90>)
 801b57a:	4293      	cmp	r3, r2
 801b57c:	d027      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	4a73      	ldr	r2, [pc, #460]	@ (801b750 <HAL_DMA_IRQHandler+0xc94>)
 801b584:	4293      	cmp	r3, r2
 801b586:	d022      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	4a71      	ldr	r2, [pc, #452]	@ (801b754 <HAL_DMA_IRQHandler+0xc98>)
 801b58e:	4293      	cmp	r3, r2
 801b590:	d01d      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	4a70      	ldr	r2, [pc, #448]	@ (801b758 <HAL_DMA_IRQHandler+0xc9c>)
 801b598:	4293      	cmp	r3, r2
 801b59a:	d018      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	4a6e      	ldr	r2, [pc, #440]	@ (801b75c <HAL_DMA_IRQHandler+0xca0>)
 801b5a2:	4293      	cmp	r3, r2
 801b5a4:	d013      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	4a6d      	ldr	r2, [pc, #436]	@ (801b760 <HAL_DMA_IRQHandler+0xca4>)
 801b5ac:	4293      	cmp	r3, r2
 801b5ae:	d00e      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	4a6b      	ldr	r2, [pc, #428]	@ (801b764 <HAL_DMA_IRQHandler+0xca8>)
 801b5b6:	4293      	cmp	r3, r2
 801b5b8:	d009      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	4a6a      	ldr	r2, [pc, #424]	@ (801b768 <HAL_DMA_IRQHandler+0xcac>)
 801b5c0:	4293      	cmp	r3, r2
 801b5c2:	d004      	beq.n	801b5ce <HAL_DMA_IRQHandler+0xb12>
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	4a68      	ldr	r2, [pc, #416]	@ (801b76c <HAL_DMA_IRQHandler+0xcb0>)
 801b5ca:	4293      	cmp	r3, r2
 801b5cc:	d108      	bne.n	801b5e0 <HAL_DMA_IRQHandler+0xb24>
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	681a      	ldr	r2, [r3, #0]
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	f022 0208 	bic.w	r2, r2, #8
 801b5dc:	601a      	str	r2, [r3, #0]
 801b5de:	e007      	b.n	801b5f0 <HAL_DMA_IRQHandler+0xb34>
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	681a      	ldr	r2, [r3, #0]
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	f022 0204 	bic.w	r2, r2, #4
 801b5ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	f000 8165 	beq.w	801b8c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b5fe:	6878      	ldr	r0, [r7, #4]
 801b600:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b602:	e15f      	b.n	801b8c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b608:	f003 031f 	and.w	r3, r3, #31
 801b60c:	2202      	movs	r2, #2
 801b60e:	409a      	lsls	r2, r3
 801b610:	697b      	ldr	r3, [r7, #20]
 801b612:	4013      	ands	r3, r2
 801b614:	2b00      	cmp	r3, #0
 801b616:	f000 80c5 	beq.w	801b7a4 <HAL_DMA_IRQHandler+0xce8>
 801b61a:	693b      	ldr	r3, [r7, #16]
 801b61c:	f003 0302 	and.w	r3, r3, #2
 801b620:	2b00      	cmp	r3, #0
 801b622:	f000 80bf 	beq.w	801b7a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b62a:	f003 031f 	and.w	r3, r3, #31
 801b62e:	2202      	movs	r2, #2
 801b630:	409a      	lsls	r2, r3
 801b632:	69fb      	ldr	r3, [r7, #28]
 801b634:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b636:	693b      	ldr	r3, [r7, #16]
 801b638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d018      	beq.n	801b672 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b640:	693b      	ldr	r3, [r7, #16]
 801b642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b646:	2b00      	cmp	r3, #0
 801b648:	d109      	bne.n	801b65e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b64e:	2b00      	cmp	r3, #0
 801b650:	f000 813a 	beq.w	801b8c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b658:	6878      	ldr	r0, [r7, #4]
 801b65a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b65c:	e134      	b.n	801b8c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b662:	2b00      	cmp	r3, #0
 801b664:	f000 8130 	beq.w	801b8c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b66c:	6878      	ldr	r0, [r7, #4]
 801b66e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b670:	e12a      	b.n	801b8c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b672:	693b      	ldr	r3, [r7, #16]
 801b674:	f003 0320 	and.w	r3, r3, #32
 801b678:	2b00      	cmp	r3, #0
 801b67a:	f040 8089 	bne.w	801b790 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	4a2b      	ldr	r2, [pc, #172]	@ (801b730 <HAL_DMA_IRQHandler+0xc74>)
 801b684:	4293      	cmp	r3, r2
 801b686:	d04a      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	4a29      	ldr	r2, [pc, #164]	@ (801b734 <HAL_DMA_IRQHandler+0xc78>)
 801b68e:	4293      	cmp	r3, r2
 801b690:	d045      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	4a28      	ldr	r2, [pc, #160]	@ (801b738 <HAL_DMA_IRQHandler+0xc7c>)
 801b698:	4293      	cmp	r3, r2
 801b69a:	d040      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	4a26      	ldr	r2, [pc, #152]	@ (801b73c <HAL_DMA_IRQHandler+0xc80>)
 801b6a2:	4293      	cmp	r3, r2
 801b6a4:	d03b      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	4a25      	ldr	r2, [pc, #148]	@ (801b740 <HAL_DMA_IRQHandler+0xc84>)
 801b6ac:	4293      	cmp	r3, r2
 801b6ae:	d036      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	4a23      	ldr	r2, [pc, #140]	@ (801b744 <HAL_DMA_IRQHandler+0xc88>)
 801b6b6:	4293      	cmp	r3, r2
 801b6b8:	d031      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	4a22      	ldr	r2, [pc, #136]	@ (801b748 <HAL_DMA_IRQHandler+0xc8c>)
 801b6c0:	4293      	cmp	r3, r2
 801b6c2:	d02c      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	4a20      	ldr	r2, [pc, #128]	@ (801b74c <HAL_DMA_IRQHandler+0xc90>)
 801b6ca:	4293      	cmp	r3, r2
 801b6cc:	d027      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	4a1f      	ldr	r2, [pc, #124]	@ (801b750 <HAL_DMA_IRQHandler+0xc94>)
 801b6d4:	4293      	cmp	r3, r2
 801b6d6:	d022      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	4a1d      	ldr	r2, [pc, #116]	@ (801b754 <HAL_DMA_IRQHandler+0xc98>)
 801b6de:	4293      	cmp	r3, r2
 801b6e0:	d01d      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	4a1c      	ldr	r2, [pc, #112]	@ (801b758 <HAL_DMA_IRQHandler+0xc9c>)
 801b6e8:	4293      	cmp	r3, r2
 801b6ea:	d018      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	4a1a      	ldr	r2, [pc, #104]	@ (801b75c <HAL_DMA_IRQHandler+0xca0>)
 801b6f2:	4293      	cmp	r3, r2
 801b6f4:	d013      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	4a19      	ldr	r2, [pc, #100]	@ (801b760 <HAL_DMA_IRQHandler+0xca4>)
 801b6fc:	4293      	cmp	r3, r2
 801b6fe:	d00e      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	4a17      	ldr	r2, [pc, #92]	@ (801b764 <HAL_DMA_IRQHandler+0xca8>)
 801b706:	4293      	cmp	r3, r2
 801b708:	d009      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	4a16      	ldr	r2, [pc, #88]	@ (801b768 <HAL_DMA_IRQHandler+0xcac>)
 801b710:	4293      	cmp	r3, r2
 801b712:	d004      	beq.n	801b71e <HAL_DMA_IRQHandler+0xc62>
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	4a14      	ldr	r2, [pc, #80]	@ (801b76c <HAL_DMA_IRQHandler+0xcb0>)
 801b71a:	4293      	cmp	r3, r2
 801b71c:	d128      	bne.n	801b770 <HAL_DMA_IRQHandler+0xcb4>
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	681a      	ldr	r2, [r3, #0]
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	f022 0214 	bic.w	r2, r2, #20
 801b72c:	601a      	str	r2, [r3, #0]
 801b72e:	e027      	b.n	801b780 <HAL_DMA_IRQHandler+0xcc4>
 801b730:	40020010 	.word	0x40020010
 801b734:	40020028 	.word	0x40020028
 801b738:	40020040 	.word	0x40020040
 801b73c:	40020058 	.word	0x40020058
 801b740:	40020070 	.word	0x40020070
 801b744:	40020088 	.word	0x40020088
 801b748:	400200a0 	.word	0x400200a0
 801b74c:	400200b8 	.word	0x400200b8
 801b750:	40020410 	.word	0x40020410
 801b754:	40020428 	.word	0x40020428
 801b758:	40020440 	.word	0x40020440
 801b75c:	40020458 	.word	0x40020458
 801b760:	40020470 	.word	0x40020470
 801b764:	40020488 	.word	0x40020488
 801b768:	400204a0 	.word	0x400204a0
 801b76c:	400204b8 	.word	0x400204b8
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	681a      	ldr	r2, [r3, #0]
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	f022 020a 	bic.w	r2, r2, #10
 801b77e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	2201      	movs	r2, #1
 801b784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2200      	movs	r2, #0
 801b78c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b794:	2b00      	cmp	r3, #0
 801b796:	f000 8097 	beq.w	801b8c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b79e:	6878      	ldr	r0, [r7, #4]
 801b7a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b7a2:	e091      	b.n	801b8c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b7a8:	f003 031f 	and.w	r3, r3, #31
 801b7ac:	2208      	movs	r2, #8
 801b7ae:	409a      	lsls	r2, r3
 801b7b0:	697b      	ldr	r3, [r7, #20]
 801b7b2:	4013      	ands	r3, r2
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	f000 8088 	beq.w	801b8ca <HAL_DMA_IRQHandler+0xe0e>
 801b7ba:	693b      	ldr	r3, [r7, #16]
 801b7bc:	f003 0308 	and.w	r3, r3, #8
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	f000 8082 	beq.w	801b8ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	4a41      	ldr	r2, [pc, #260]	@ (801b8d0 <HAL_DMA_IRQHandler+0xe14>)
 801b7cc:	4293      	cmp	r3, r2
 801b7ce:	d04a      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	4a3f      	ldr	r2, [pc, #252]	@ (801b8d4 <HAL_DMA_IRQHandler+0xe18>)
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	d045      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	4a3e      	ldr	r2, [pc, #248]	@ (801b8d8 <HAL_DMA_IRQHandler+0xe1c>)
 801b7e0:	4293      	cmp	r3, r2
 801b7e2:	d040      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	4a3c      	ldr	r2, [pc, #240]	@ (801b8dc <HAL_DMA_IRQHandler+0xe20>)
 801b7ea:	4293      	cmp	r3, r2
 801b7ec:	d03b      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	4a3b      	ldr	r2, [pc, #236]	@ (801b8e0 <HAL_DMA_IRQHandler+0xe24>)
 801b7f4:	4293      	cmp	r3, r2
 801b7f6:	d036      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	4a39      	ldr	r2, [pc, #228]	@ (801b8e4 <HAL_DMA_IRQHandler+0xe28>)
 801b7fe:	4293      	cmp	r3, r2
 801b800:	d031      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	4a38      	ldr	r2, [pc, #224]	@ (801b8e8 <HAL_DMA_IRQHandler+0xe2c>)
 801b808:	4293      	cmp	r3, r2
 801b80a:	d02c      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	4a36      	ldr	r2, [pc, #216]	@ (801b8ec <HAL_DMA_IRQHandler+0xe30>)
 801b812:	4293      	cmp	r3, r2
 801b814:	d027      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	4a35      	ldr	r2, [pc, #212]	@ (801b8f0 <HAL_DMA_IRQHandler+0xe34>)
 801b81c:	4293      	cmp	r3, r2
 801b81e:	d022      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	4a33      	ldr	r2, [pc, #204]	@ (801b8f4 <HAL_DMA_IRQHandler+0xe38>)
 801b826:	4293      	cmp	r3, r2
 801b828:	d01d      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	4a32      	ldr	r2, [pc, #200]	@ (801b8f8 <HAL_DMA_IRQHandler+0xe3c>)
 801b830:	4293      	cmp	r3, r2
 801b832:	d018      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	4a30      	ldr	r2, [pc, #192]	@ (801b8fc <HAL_DMA_IRQHandler+0xe40>)
 801b83a:	4293      	cmp	r3, r2
 801b83c:	d013      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	681b      	ldr	r3, [r3, #0]
 801b842:	4a2f      	ldr	r2, [pc, #188]	@ (801b900 <HAL_DMA_IRQHandler+0xe44>)
 801b844:	4293      	cmp	r3, r2
 801b846:	d00e      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	4a2d      	ldr	r2, [pc, #180]	@ (801b904 <HAL_DMA_IRQHandler+0xe48>)
 801b84e:	4293      	cmp	r3, r2
 801b850:	d009      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	4a2c      	ldr	r2, [pc, #176]	@ (801b908 <HAL_DMA_IRQHandler+0xe4c>)
 801b858:	4293      	cmp	r3, r2
 801b85a:	d004      	beq.n	801b866 <HAL_DMA_IRQHandler+0xdaa>
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	4a2a      	ldr	r2, [pc, #168]	@ (801b90c <HAL_DMA_IRQHandler+0xe50>)
 801b862:	4293      	cmp	r3, r2
 801b864:	d108      	bne.n	801b878 <HAL_DMA_IRQHandler+0xdbc>
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	681a      	ldr	r2, [r3, #0]
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	f022 021c 	bic.w	r2, r2, #28
 801b874:	601a      	str	r2, [r3, #0]
 801b876:	e007      	b.n	801b888 <HAL_DMA_IRQHandler+0xdcc>
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	681a      	ldr	r2, [r3, #0]
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	f022 020e 	bic.w	r2, r2, #14
 801b886:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b88c:	f003 031f 	and.w	r3, r3, #31
 801b890:	2201      	movs	r2, #1
 801b892:	409a      	lsls	r2, r3
 801b894:	69fb      	ldr	r3, [r7, #28]
 801b896:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2201      	movs	r2, #1
 801b89c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	2201      	movs	r2, #1
 801b8a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d009      	beq.n	801b8ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b8ba:	6878      	ldr	r0, [r7, #4]
 801b8bc:	4798      	blx	r3
 801b8be:	e004      	b.n	801b8ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 801b8c0:	bf00      	nop
 801b8c2:	e002      	b.n	801b8ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b8c4:	bf00      	nop
 801b8c6:	e000      	b.n	801b8ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b8c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801b8ca:	3728      	adds	r7, #40	@ 0x28
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	bd80      	pop	{r7, pc}
 801b8d0:	40020010 	.word	0x40020010
 801b8d4:	40020028 	.word	0x40020028
 801b8d8:	40020040 	.word	0x40020040
 801b8dc:	40020058 	.word	0x40020058
 801b8e0:	40020070 	.word	0x40020070
 801b8e4:	40020088 	.word	0x40020088
 801b8e8:	400200a0 	.word	0x400200a0
 801b8ec:	400200b8 	.word	0x400200b8
 801b8f0:	40020410 	.word	0x40020410
 801b8f4:	40020428 	.word	0x40020428
 801b8f8:	40020440 	.word	0x40020440
 801b8fc:	40020458 	.word	0x40020458
 801b900:	40020470 	.word	0x40020470
 801b904:	40020488 	.word	0x40020488
 801b908:	400204a0 	.word	0x400204a0
 801b90c:	400204b8 	.word	0x400204b8

0801b910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801b910:	b480      	push	{r7}
 801b912:	b085      	sub	sp, #20
 801b914:	af00      	add	r7, sp, #0
 801b916:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	4a42      	ldr	r2, [pc, #264]	@ (801ba28 <DMA_CalcBaseAndBitshift+0x118>)
 801b91e:	4293      	cmp	r3, r2
 801b920:	d04a      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	4a41      	ldr	r2, [pc, #260]	@ (801ba2c <DMA_CalcBaseAndBitshift+0x11c>)
 801b928:	4293      	cmp	r3, r2
 801b92a:	d045      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	4a3f      	ldr	r2, [pc, #252]	@ (801ba30 <DMA_CalcBaseAndBitshift+0x120>)
 801b932:	4293      	cmp	r3, r2
 801b934:	d040      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	4a3e      	ldr	r2, [pc, #248]	@ (801ba34 <DMA_CalcBaseAndBitshift+0x124>)
 801b93c:	4293      	cmp	r3, r2
 801b93e:	d03b      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	4a3c      	ldr	r2, [pc, #240]	@ (801ba38 <DMA_CalcBaseAndBitshift+0x128>)
 801b946:	4293      	cmp	r3, r2
 801b948:	d036      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	4a3b      	ldr	r2, [pc, #236]	@ (801ba3c <DMA_CalcBaseAndBitshift+0x12c>)
 801b950:	4293      	cmp	r3, r2
 801b952:	d031      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	4a39      	ldr	r2, [pc, #228]	@ (801ba40 <DMA_CalcBaseAndBitshift+0x130>)
 801b95a:	4293      	cmp	r3, r2
 801b95c:	d02c      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	4a38      	ldr	r2, [pc, #224]	@ (801ba44 <DMA_CalcBaseAndBitshift+0x134>)
 801b964:	4293      	cmp	r3, r2
 801b966:	d027      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	4a36      	ldr	r2, [pc, #216]	@ (801ba48 <DMA_CalcBaseAndBitshift+0x138>)
 801b96e:	4293      	cmp	r3, r2
 801b970:	d022      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	4a35      	ldr	r2, [pc, #212]	@ (801ba4c <DMA_CalcBaseAndBitshift+0x13c>)
 801b978:	4293      	cmp	r3, r2
 801b97a:	d01d      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	4a33      	ldr	r2, [pc, #204]	@ (801ba50 <DMA_CalcBaseAndBitshift+0x140>)
 801b982:	4293      	cmp	r3, r2
 801b984:	d018      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	4a32      	ldr	r2, [pc, #200]	@ (801ba54 <DMA_CalcBaseAndBitshift+0x144>)
 801b98c:	4293      	cmp	r3, r2
 801b98e:	d013      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	4a30      	ldr	r2, [pc, #192]	@ (801ba58 <DMA_CalcBaseAndBitshift+0x148>)
 801b996:	4293      	cmp	r3, r2
 801b998:	d00e      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	4a2f      	ldr	r2, [pc, #188]	@ (801ba5c <DMA_CalcBaseAndBitshift+0x14c>)
 801b9a0:	4293      	cmp	r3, r2
 801b9a2:	d009      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	4a2d      	ldr	r2, [pc, #180]	@ (801ba60 <DMA_CalcBaseAndBitshift+0x150>)
 801b9aa:	4293      	cmp	r3, r2
 801b9ac:	d004      	beq.n	801b9b8 <DMA_CalcBaseAndBitshift+0xa8>
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	4a2c      	ldr	r2, [pc, #176]	@ (801ba64 <DMA_CalcBaseAndBitshift+0x154>)
 801b9b4:	4293      	cmp	r3, r2
 801b9b6:	d101      	bne.n	801b9bc <DMA_CalcBaseAndBitshift+0xac>
 801b9b8:	2301      	movs	r3, #1
 801b9ba:	e000      	b.n	801b9be <DMA_CalcBaseAndBitshift+0xae>
 801b9bc:	2300      	movs	r3, #0
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d024      	beq.n	801ba0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	b2db      	uxtb	r3, r3
 801b9c8:	3b10      	subs	r3, #16
 801b9ca:	4a27      	ldr	r2, [pc, #156]	@ (801ba68 <DMA_CalcBaseAndBitshift+0x158>)
 801b9cc:	fba2 2303 	umull	r2, r3, r2, r3
 801b9d0:	091b      	lsrs	r3, r3, #4
 801b9d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	f003 0307 	and.w	r3, r3, #7
 801b9da:	4a24      	ldr	r2, [pc, #144]	@ (801ba6c <DMA_CalcBaseAndBitshift+0x15c>)
 801b9dc:	5cd3      	ldrb	r3, [r2, r3]
 801b9de:	461a      	mov	r2, r3
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	2b03      	cmp	r3, #3
 801b9e8:	d908      	bls.n	801b9fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	461a      	mov	r2, r3
 801b9f0:	4b1f      	ldr	r3, [pc, #124]	@ (801ba70 <DMA_CalcBaseAndBitshift+0x160>)
 801b9f2:	4013      	ands	r3, r2
 801b9f4:	1d1a      	adds	r2, r3, #4
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	659a      	str	r2, [r3, #88]	@ 0x58
 801b9fa:	e00d      	b.n	801ba18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	461a      	mov	r2, r3
 801ba02:	4b1b      	ldr	r3, [pc, #108]	@ (801ba70 <DMA_CalcBaseAndBitshift+0x160>)
 801ba04:	4013      	ands	r3, r2
 801ba06:	687a      	ldr	r2, [r7, #4]
 801ba08:	6593      	str	r3, [r2, #88]	@ 0x58
 801ba0a:	e005      	b.n	801ba18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801ba1c:	4618      	mov	r0, r3
 801ba1e:	3714      	adds	r7, #20
 801ba20:	46bd      	mov	sp, r7
 801ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba26:	4770      	bx	lr
 801ba28:	40020010 	.word	0x40020010
 801ba2c:	40020028 	.word	0x40020028
 801ba30:	40020040 	.word	0x40020040
 801ba34:	40020058 	.word	0x40020058
 801ba38:	40020070 	.word	0x40020070
 801ba3c:	40020088 	.word	0x40020088
 801ba40:	400200a0 	.word	0x400200a0
 801ba44:	400200b8 	.word	0x400200b8
 801ba48:	40020410 	.word	0x40020410
 801ba4c:	40020428 	.word	0x40020428
 801ba50:	40020440 	.word	0x40020440
 801ba54:	40020458 	.word	0x40020458
 801ba58:	40020470 	.word	0x40020470
 801ba5c:	40020488 	.word	0x40020488
 801ba60:	400204a0 	.word	0x400204a0
 801ba64:	400204b8 	.word	0x400204b8
 801ba68:	aaaaaaab 	.word	0xaaaaaaab
 801ba6c:	08027388 	.word	0x08027388
 801ba70:	fffffc00 	.word	0xfffffc00

0801ba74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801ba74:	b480      	push	{r7}
 801ba76:	b085      	sub	sp, #20
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	699b      	ldr	r3, [r3, #24]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d120      	bne.n	801baca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba8c:	2b03      	cmp	r3, #3
 801ba8e:	d858      	bhi.n	801bb42 <DMA_CheckFifoParam+0xce>
 801ba90:	a201      	add	r2, pc, #4	@ (adr r2, 801ba98 <DMA_CheckFifoParam+0x24>)
 801ba92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba96:	bf00      	nop
 801ba98:	0801baa9 	.word	0x0801baa9
 801ba9c:	0801babb 	.word	0x0801babb
 801baa0:	0801baa9 	.word	0x0801baa9
 801baa4:	0801bb43 	.word	0x0801bb43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801baac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d048      	beq.n	801bb46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801bab4:	2301      	movs	r3, #1
 801bab6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801bab8:	e045      	b.n	801bb46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801babe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801bac2:	d142      	bne.n	801bb4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801bac4:	2301      	movs	r3, #1
 801bac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801bac8:	e03f      	b.n	801bb4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	699b      	ldr	r3, [r3, #24]
 801bace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801bad2:	d123      	bne.n	801bb1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bad8:	2b03      	cmp	r3, #3
 801bada:	d838      	bhi.n	801bb4e <DMA_CheckFifoParam+0xda>
 801badc:	a201      	add	r2, pc, #4	@ (adr r2, 801bae4 <DMA_CheckFifoParam+0x70>)
 801bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bae2:	bf00      	nop
 801bae4:	0801baf5 	.word	0x0801baf5
 801bae8:	0801bafb 	.word	0x0801bafb
 801baec:	0801baf5 	.word	0x0801baf5
 801baf0:	0801bb0d 	.word	0x0801bb0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801baf4:	2301      	movs	r3, #1
 801baf6:	73fb      	strb	r3, [r7, #15]
        break;
 801baf8:	e030      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bafe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d025      	beq.n	801bb52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801bb06:	2301      	movs	r3, #1
 801bb08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801bb0a:	e022      	b.n	801bb52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801bb14:	d11f      	bne.n	801bb56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801bb16:	2301      	movs	r3, #1
 801bb18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801bb1a:	e01c      	b.n	801bb56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb20:	2b02      	cmp	r3, #2
 801bb22:	d902      	bls.n	801bb2a <DMA_CheckFifoParam+0xb6>
 801bb24:	2b03      	cmp	r3, #3
 801bb26:	d003      	beq.n	801bb30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801bb28:	e018      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801bb2a:	2301      	movs	r3, #1
 801bb2c:	73fb      	strb	r3, [r7, #15]
        break;
 801bb2e:	e015      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d00e      	beq.n	801bb5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801bb3c:	2301      	movs	r3, #1
 801bb3e:	73fb      	strb	r3, [r7, #15]
    break;
 801bb40:	e00b      	b.n	801bb5a <DMA_CheckFifoParam+0xe6>
        break;
 801bb42:	bf00      	nop
 801bb44:	e00a      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
        break;
 801bb46:	bf00      	nop
 801bb48:	e008      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
        break;
 801bb4a:	bf00      	nop
 801bb4c:	e006      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
        break;
 801bb4e:	bf00      	nop
 801bb50:	e004      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
        break;
 801bb52:	bf00      	nop
 801bb54:	e002      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
        break;
 801bb56:	bf00      	nop
 801bb58:	e000      	b.n	801bb5c <DMA_CheckFifoParam+0xe8>
    break;
 801bb5a:	bf00      	nop
    }
  }

  return status;
 801bb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb5e:	4618      	mov	r0, r3
 801bb60:	3714      	adds	r7, #20
 801bb62:	46bd      	mov	sp, r7
 801bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb68:	4770      	bx	lr
 801bb6a:	bf00      	nop

0801bb6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801bb6c:	b480      	push	{r7}
 801bb6e:	b085      	sub	sp, #20
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	4a38      	ldr	r2, [pc, #224]	@ (801bc60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801bb80:	4293      	cmp	r3, r2
 801bb82:	d022      	beq.n	801bbca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	4a36      	ldr	r2, [pc, #216]	@ (801bc64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801bb8a:	4293      	cmp	r3, r2
 801bb8c:	d01d      	beq.n	801bbca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	4a35      	ldr	r2, [pc, #212]	@ (801bc68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801bb94:	4293      	cmp	r3, r2
 801bb96:	d018      	beq.n	801bbca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	4a33      	ldr	r2, [pc, #204]	@ (801bc6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801bb9e:	4293      	cmp	r3, r2
 801bba0:	d013      	beq.n	801bbca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	4a32      	ldr	r2, [pc, #200]	@ (801bc70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801bba8:	4293      	cmp	r3, r2
 801bbaa:	d00e      	beq.n	801bbca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	4a30      	ldr	r2, [pc, #192]	@ (801bc74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801bbb2:	4293      	cmp	r3, r2
 801bbb4:	d009      	beq.n	801bbca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	4a2f      	ldr	r2, [pc, #188]	@ (801bc78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801bbbc:	4293      	cmp	r3, r2
 801bbbe:	d004      	beq.n	801bbca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	4a2d      	ldr	r2, [pc, #180]	@ (801bc7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801bbc6:	4293      	cmp	r3, r2
 801bbc8:	d101      	bne.n	801bbce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801bbca:	2301      	movs	r3, #1
 801bbcc:	e000      	b.n	801bbd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801bbce:	2300      	movs	r3, #0
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d01a      	beq.n	801bc0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	b2db      	uxtb	r3, r3
 801bbda:	3b08      	subs	r3, #8
 801bbdc:	4a28      	ldr	r2, [pc, #160]	@ (801bc80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801bbde:	fba2 2303 	umull	r2, r3, r2, r3
 801bbe2:	091b      	lsrs	r3, r3, #4
 801bbe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801bbe6:	68fa      	ldr	r2, [r7, #12]
 801bbe8:	4b26      	ldr	r3, [pc, #152]	@ (801bc84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801bbea:	4413      	add	r3, r2
 801bbec:	009b      	lsls	r3, r3, #2
 801bbee:	461a      	mov	r2, r3
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	4a24      	ldr	r2, [pc, #144]	@ (801bc88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801bbf8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	f003 031f 	and.w	r3, r3, #31
 801bc00:	2201      	movs	r2, #1
 801bc02:	409a      	lsls	r2, r3
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801bc08:	e024      	b.n	801bc54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	b2db      	uxtb	r3, r3
 801bc10:	3b10      	subs	r3, #16
 801bc12:	4a1e      	ldr	r2, [pc, #120]	@ (801bc8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801bc14:	fba2 2303 	umull	r2, r3, r2, r3
 801bc18:	091b      	lsrs	r3, r3, #4
 801bc1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801bc1c:	68bb      	ldr	r3, [r7, #8]
 801bc1e:	4a1c      	ldr	r2, [pc, #112]	@ (801bc90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801bc20:	4293      	cmp	r3, r2
 801bc22:	d806      	bhi.n	801bc32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	4a1b      	ldr	r2, [pc, #108]	@ (801bc94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801bc28:	4293      	cmp	r3, r2
 801bc2a:	d902      	bls.n	801bc32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	3308      	adds	r3, #8
 801bc30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801bc32:	68fa      	ldr	r2, [r7, #12]
 801bc34:	4b18      	ldr	r3, [pc, #96]	@ (801bc98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801bc36:	4413      	add	r3, r2
 801bc38:	009b      	lsls	r3, r3, #2
 801bc3a:	461a      	mov	r2, r3
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	4a16      	ldr	r2, [pc, #88]	@ (801bc9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801bc44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	f003 031f 	and.w	r3, r3, #31
 801bc4c:	2201      	movs	r2, #1
 801bc4e:	409a      	lsls	r2, r3
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801bc54:	bf00      	nop
 801bc56:	3714      	adds	r7, #20
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc5e:	4770      	bx	lr
 801bc60:	58025408 	.word	0x58025408
 801bc64:	5802541c 	.word	0x5802541c
 801bc68:	58025430 	.word	0x58025430
 801bc6c:	58025444 	.word	0x58025444
 801bc70:	58025458 	.word	0x58025458
 801bc74:	5802546c 	.word	0x5802546c
 801bc78:	58025480 	.word	0x58025480
 801bc7c:	58025494 	.word	0x58025494
 801bc80:	cccccccd 	.word	0xcccccccd
 801bc84:	16009600 	.word	0x16009600
 801bc88:	58025880 	.word	0x58025880
 801bc8c:	aaaaaaab 	.word	0xaaaaaaab
 801bc90:	400204b8 	.word	0x400204b8
 801bc94:	4002040f 	.word	0x4002040f
 801bc98:	10008200 	.word	0x10008200
 801bc9c:	40020880 	.word	0x40020880

0801bca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801bca0:	b480      	push	{r7}
 801bca2:	b085      	sub	sp, #20
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	685b      	ldr	r3, [r3, #4]
 801bcac:	b2db      	uxtb	r3, r3
 801bcae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d04a      	beq.n	801bd4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801bcb6:	68fb      	ldr	r3, [r7, #12]
 801bcb8:	2b08      	cmp	r3, #8
 801bcba:	d847      	bhi.n	801bd4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	4a25      	ldr	r2, [pc, #148]	@ (801bd58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801bcc2:	4293      	cmp	r3, r2
 801bcc4:	d022      	beq.n	801bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	4a24      	ldr	r2, [pc, #144]	@ (801bd5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801bccc:	4293      	cmp	r3, r2
 801bcce:	d01d      	beq.n	801bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	4a22      	ldr	r2, [pc, #136]	@ (801bd60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801bcd6:	4293      	cmp	r3, r2
 801bcd8:	d018      	beq.n	801bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	4a21      	ldr	r2, [pc, #132]	@ (801bd64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801bce0:	4293      	cmp	r3, r2
 801bce2:	d013      	beq.n	801bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	4a1f      	ldr	r2, [pc, #124]	@ (801bd68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801bcea:	4293      	cmp	r3, r2
 801bcec:	d00e      	beq.n	801bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	4a1e      	ldr	r2, [pc, #120]	@ (801bd6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	d009      	beq.n	801bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	4a1c      	ldr	r2, [pc, #112]	@ (801bd70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801bcfe:	4293      	cmp	r3, r2
 801bd00:	d004      	beq.n	801bd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	4a1b      	ldr	r2, [pc, #108]	@ (801bd74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801bd08:	4293      	cmp	r3, r2
 801bd0a:	d101      	bne.n	801bd10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801bd0c:	2301      	movs	r3, #1
 801bd0e:	e000      	b.n	801bd12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801bd10:	2300      	movs	r3, #0
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d00a      	beq.n	801bd2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801bd16:	68fa      	ldr	r2, [r7, #12]
 801bd18:	4b17      	ldr	r3, [pc, #92]	@ (801bd78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801bd1a:	4413      	add	r3, r2
 801bd1c:	009b      	lsls	r3, r3, #2
 801bd1e:	461a      	mov	r2, r3
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	4a15      	ldr	r2, [pc, #84]	@ (801bd7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801bd28:	671a      	str	r2, [r3, #112]	@ 0x70
 801bd2a:	e009      	b.n	801bd40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801bd2c:	68fa      	ldr	r2, [r7, #12]
 801bd2e:	4b14      	ldr	r3, [pc, #80]	@ (801bd80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801bd30:	4413      	add	r3, r2
 801bd32:	009b      	lsls	r3, r3, #2
 801bd34:	461a      	mov	r2, r3
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	4a11      	ldr	r2, [pc, #68]	@ (801bd84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801bd3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	3b01      	subs	r3, #1
 801bd44:	2201      	movs	r2, #1
 801bd46:	409a      	lsls	r2, r3
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801bd4c:	bf00      	nop
 801bd4e:	3714      	adds	r7, #20
 801bd50:	46bd      	mov	sp, r7
 801bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd56:	4770      	bx	lr
 801bd58:	58025408 	.word	0x58025408
 801bd5c:	5802541c 	.word	0x5802541c
 801bd60:	58025430 	.word	0x58025430
 801bd64:	58025444 	.word	0x58025444
 801bd68:	58025458 	.word	0x58025458
 801bd6c:	5802546c 	.word	0x5802546c
 801bd70:	58025480 	.word	0x58025480
 801bd74:	58025494 	.word	0x58025494
 801bd78:	1600963f 	.word	0x1600963f
 801bd7c:	58025940 	.word	0x58025940
 801bd80:	1000823f 	.word	0x1000823f
 801bd84:	40020940 	.word	0x40020940

0801bd88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bd88:	b480      	push	{r7}
 801bd8a:	b089      	sub	sp, #36	@ 0x24
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	6078      	str	r0, [r7, #4]
 801bd90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bd92:	2300      	movs	r3, #0
 801bd94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801bd96:	4b89      	ldr	r3, [pc, #548]	@ (801bfbc <HAL_GPIO_Init+0x234>)
 801bd98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801bd9a:	e194      	b.n	801c0c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bd9c:	683b      	ldr	r3, [r7, #0]
 801bd9e:	681a      	ldr	r2, [r3, #0]
 801bda0:	2101      	movs	r1, #1
 801bda2:	69fb      	ldr	r3, [r7, #28]
 801bda4:	fa01 f303 	lsl.w	r3, r1, r3
 801bda8:	4013      	ands	r3, r2
 801bdaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801bdac:	693b      	ldr	r3, [r7, #16]
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	f000 8186 	beq.w	801c0c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bdb4:	683b      	ldr	r3, [r7, #0]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	f003 0303 	and.w	r3, r3, #3
 801bdbc:	2b01      	cmp	r3, #1
 801bdbe:	d005      	beq.n	801bdcc <HAL_GPIO_Init+0x44>
 801bdc0:	683b      	ldr	r3, [r7, #0]
 801bdc2:	685b      	ldr	r3, [r3, #4]
 801bdc4:	f003 0303 	and.w	r3, r3, #3
 801bdc8:	2b02      	cmp	r3, #2
 801bdca:	d130      	bne.n	801be2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	689b      	ldr	r3, [r3, #8]
 801bdd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bdd2:	69fb      	ldr	r3, [r7, #28]
 801bdd4:	005b      	lsls	r3, r3, #1
 801bdd6:	2203      	movs	r2, #3
 801bdd8:	fa02 f303 	lsl.w	r3, r2, r3
 801bddc:	43db      	mvns	r3, r3
 801bdde:	69ba      	ldr	r2, [r7, #24]
 801bde0:	4013      	ands	r3, r2
 801bde2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bde4:	683b      	ldr	r3, [r7, #0]
 801bde6:	68da      	ldr	r2, [r3, #12]
 801bde8:	69fb      	ldr	r3, [r7, #28]
 801bdea:	005b      	lsls	r3, r3, #1
 801bdec:	fa02 f303 	lsl.w	r3, r2, r3
 801bdf0:	69ba      	ldr	r2, [r7, #24]
 801bdf2:	4313      	orrs	r3, r2
 801bdf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	69ba      	ldr	r2, [r7, #24]
 801bdfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	685b      	ldr	r3, [r3, #4]
 801be00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801be02:	2201      	movs	r2, #1
 801be04:	69fb      	ldr	r3, [r7, #28]
 801be06:	fa02 f303 	lsl.w	r3, r2, r3
 801be0a:	43db      	mvns	r3, r3
 801be0c:	69ba      	ldr	r2, [r7, #24]
 801be0e:	4013      	ands	r3, r2
 801be10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801be12:	683b      	ldr	r3, [r7, #0]
 801be14:	685b      	ldr	r3, [r3, #4]
 801be16:	091b      	lsrs	r3, r3, #4
 801be18:	f003 0201 	and.w	r2, r3, #1
 801be1c:	69fb      	ldr	r3, [r7, #28]
 801be1e:	fa02 f303 	lsl.w	r3, r2, r3
 801be22:	69ba      	ldr	r2, [r7, #24]
 801be24:	4313      	orrs	r3, r2
 801be26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	69ba      	ldr	r2, [r7, #24]
 801be2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801be2e:	683b      	ldr	r3, [r7, #0]
 801be30:	685b      	ldr	r3, [r3, #4]
 801be32:	f003 0303 	and.w	r3, r3, #3
 801be36:	2b03      	cmp	r3, #3
 801be38:	d017      	beq.n	801be6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	68db      	ldr	r3, [r3, #12]
 801be3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801be40:	69fb      	ldr	r3, [r7, #28]
 801be42:	005b      	lsls	r3, r3, #1
 801be44:	2203      	movs	r2, #3
 801be46:	fa02 f303 	lsl.w	r3, r2, r3
 801be4a:	43db      	mvns	r3, r3
 801be4c:	69ba      	ldr	r2, [r7, #24]
 801be4e:	4013      	ands	r3, r2
 801be50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	689a      	ldr	r2, [r3, #8]
 801be56:	69fb      	ldr	r3, [r7, #28]
 801be58:	005b      	lsls	r3, r3, #1
 801be5a:	fa02 f303 	lsl.w	r3, r2, r3
 801be5e:	69ba      	ldr	r2, [r7, #24]
 801be60:	4313      	orrs	r3, r2
 801be62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	69ba      	ldr	r2, [r7, #24]
 801be68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801be6a:	683b      	ldr	r3, [r7, #0]
 801be6c:	685b      	ldr	r3, [r3, #4]
 801be6e:	f003 0303 	and.w	r3, r3, #3
 801be72:	2b02      	cmp	r3, #2
 801be74:	d123      	bne.n	801bebe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801be76:	69fb      	ldr	r3, [r7, #28]
 801be78:	08da      	lsrs	r2, r3, #3
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	3208      	adds	r2, #8
 801be7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801be84:	69fb      	ldr	r3, [r7, #28]
 801be86:	f003 0307 	and.w	r3, r3, #7
 801be8a:	009b      	lsls	r3, r3, #2
 801be8c:	220f      	movs	r2, #15
 801be8e:	fa02 f303 	lsl.w	r3, r2, r3
 801be92:	43db      	mvns	r3, r3
 801be94:	69ba      	ldr	r2, [r7, #24]
 801be96:	4013      	ands	r3, r2
 801be98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	691a      	ldr	r2, [r3, #16]
 801be9e:	69fb      	ldr	r3, [r7, #28]
 801bea0:	f003 0307 	and.w	r3, r3, #7
 801bea4:	009b      	lsls	r3, r3, #2
 801bea6:	fa02 f303 	lsl.w	r3, r2, r3
 801beaa:	69ba      	ldr	r2, [r7, #24]
 801beac:	4313      	orrs	r3, r2
 801beae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801beb0:	69fb      	ldr	r3, [r7, #28]
 801beb2:	08da      	lsrs	r2, r3, #3
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	3208      	adds	r2, #8
 801beb8:	69b9      	ldr	r1, [r7, #24]
 801beba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bec4:	69fb      	ldr	r3, [r7, #28]
 801bec6:	005b      	lsls	r3, r3, #1
 801bec8:	2203      	movs	r2, #3
 801beca:	fa02 f303 	lsl.w	r3, r2, r3
 801bece:	43db      	mvns	r3, r3
 801bed0:	69ba      	ldr	r2, [r7, #24]
 801bed2:	4013      	ands	r3, r2
 801bed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bed6:	683b      	ldr	r3, [r7, #0]
 801bed8:	685b      	ldr	r3, [r3, #4]
 801beda:	f003 0203 	and.w	r2, r3, #3
 801bede:	69fb      	ldr	r3, [r7, #28]
 801bee0:	005b      	lsls	r3, r3, #1
 801bee2:	fa02 f303 	lsl.w	r3, r2, r3
 801bee6:	69ba      	ldr	r2, [r7, #24]
 801bee8:	4313      	orrs	r3, r2
 801beea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	69ba      	ldr	r2, [r7, #24]
 801bef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801bef2:	683b      	ldr	r3, [r7, #0]
 801bef4:	685b      	ldr	r3, [r3, #4]
 801bef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801befa:	2b00      	cmp	r3, #0
 801befc:	f000 80e0 	beq.w	801c0c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bf00:	4b2f      	ldr	r3, [pc, #188]	@ (801bfc0 <HAL_GPIO_Init+0x238>)
 801bf02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bf06:	4a2e      	ldr	r2, [pc, #184]	@ (801bfc0 <HAL_GPIO_Init+0x238>)
 801bf08:	f043 0302 	orr.w	r3, r3, #2
 801bf0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801bf10:	4b2b      	ldr	r3, [pc, #172]	@ (801bfc0 <HAL_GPIO_Init+0x238>)
 801bf12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bf16:	f003 0302 	and.w	r3, r3, #2
 801bf1a:	60fb      	str	r3, [r7, #12]
 801bf1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bf1e:	4a29      	ldr	r2, [pc, #164]	@ (801bfc4 <HAL_GPIO_Init+0x23c>)
 801bf20:	69fb      	ldr	r3, [r7, #28]
 801bf22:	089b      	lsrs	r3, r3, #2
 801bf24:	3302      	adds	r3, #2
 801bf26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bf2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bf2c:	69fb      	ldr	r3, [r7, #28]
 801bf2e:	f003 0303 	and.w	r3, r3, #3
 801bf32:	009b      	lsls	r3, r3, #2
 801bf34:	220f      	movs	r2, #15
 801bf36:	fa02 f303 	lsl.w	r3, r2, r3
 801bf3a:	43db      	mvns	r3, r3
 801bf3c:	69ba      	ldr	r2, [r7, #24]
 801bf3e:	4013      	ands	r3, r2
 801bf40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	4a20      	ldr	r2, [pc, #128]	@ (801bfc8 <HAL_GPIO_Init+0x240>)
 801bf46:	4293      	cmp	r3, r2
 801bf48:	d052      	beq.n	801bff0 <HAL_GPIO_Init+0x268>
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	4a1f      	ldr	r2, [pc, #124]	@ (801bfcc <HAL_GPIO_Init+0x244>)
 801bf4e:	4293      	cmp	r3, r2
 801bf50:	d031      	beq.n	801bfb6 <HAL_GPIO_Init+0x22e>
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	4a1e      	ldr	r2, [pc, #120]	@ (801bfd0 <HAL_GPIO_Init+0x248>)
 801bf56:	4293      	cmp	r3, r2
 801bf58:	d02b      	beq.n	801bfb2 <HAL_GPIO_Init+0x22a>
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	4a1d      	ldr	r2, [pc, #116]	@ (801bfd4 <HAL_GPIO_Init+0x24c>)
 801bf5e:	4293      	cmp	r3, r2
 801bf60:	d025      	beq.n	801bfae <HAL_GPIO_Init+0x226>
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	4a1c      	ldr	r2, [pc, #112]	@ (801bfd8 <HAL_GPIO_Init+0x250>)
 801bf66:	4293      	cmp	r3, r2
 801bf68:	d01f      	beq.n	801bfaa <HAL_GPIO_Init+0x222>
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	4a1b      	ldr	r2, [pc, #108]	@ (801bfdc <HAL_GPIO_Init+0x254>)
 801bf6e:	4293      	cmp	r3, r2
 801bf70:	d019      	beq.n	801bfa6 <HAL_GPIO_Init+0x21e>
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	4a1a      	ldr	r2, [pc, #104]	@ (801bfe0 <HAL_GPIO_Init+0x258>)
 801bf76:	4293      	cmp	r3, r2
 801bf78:	d013      	beq.n	801bfa2 <HAL_GPIO_Init+0x21a>
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	4a19      	ldr	r2, [pc, #100]	@ (801bfe4 <HAL_GPIO_Init+0x25c>)
 801bf7e:	4293      	cmp	r3, r2
 801bf80:	d00d      	beq.n	801bf9e <HAL_GPIO_Init+0x216>
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	4a18      	ldr	r2, [pc, #96]	@ (801bfe8 <HAL_GPIO_Init+0x260>)
 801bf86:	4293      	cmp	r3, r2
 801bf88:	d007      	beq.n	801bf9a <HAL_GPIO_Init+0x212>
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	4a17      	ldr	r2, [pc, #92]	@ (801bfec <HAL_GPIO_Init+0x264>)
 801bf8e:	4293      	cmp	r3, r2
 801bf90:	d101      	bne.n	801bf96 <HAL_GPIO_Init+0x20e>
 801bf92:	2309      	movs	r3, #9
 801bf94:	e02d      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bf96:	230a      	movs	r3, #10
 801bf98:	e02b      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bf9a:	2308      	movs	r3, #8
 801bf9c:	e029      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bf9e:	2307      	movs	r3, #7
 801bfa0:	e027      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bfa2:	2306      	movs	r3, #6
 801bfa4:	e025      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bfa6:	2305      	movs	r3, #5
 801bfa8:	e023      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bfaa:	2304      	movs	r3, #4
 801bfac:	e021      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bfae:	2303      	movs	r3, #3
 801bfb0:	e01f      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bfb2:	2302      	movs	r3, #2
 801bfb4:	e01d      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bfb6:	2301      	movs	r3, #1
 801bfb8:	e01b      	b.n	801bff2 <HAL_GPIO_Init+0x26a>
 801bfba:	bf00      	nop
 801bfbc:	58000080 	.word	0x58000080
 801bfc0:	58024400 	.word	0x58024400
 801bfc4:	58000400 	.word	0x58000400
 801bfc8:	58020000 	.word	0x58020000
 801bfcc:	58020400 	.word	0x58020400
 801bfd0:	58020800 	.word	0x58020800
 801bfd4:	58020c00 	.word	0x58020c00
 801bfd8:	58021000 	.word	0x58021000
 801bfdc:	58021400 	.word	0x58021400
 801bfe0:	58021800 	.word	0x58021800
 801bfe4:	58021c00 	.word	0x58021c00
 801bfe8:	58022000 	.word	0x58022000
 801bfec:	58022400 	.word	0x58022400
 801bff0:	2300      	movs	r3, #0
 801bff2:	69fa      	ldr	r2, [r7, #28]
 801bff4:	f002 0203 	and.w	r2, r2, #3
 801bff8:	0092      	lsls	r2, r2, #2
 801bffa:	4093      	lsls	r3, r2
 801bffc:	69ba      	ldr	r2, [r7, #24]
 801bffe:	4313      	orrs	r3, r2
 801c000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c002:	4938      	ldr	r1, [pc, #224]	@ (801c0e4 <HAL_GPIO_Init+0x35c>)
 801c004:	69fb      	ldr	r3, [r7, #28]
 801c006:	089b      	lsrs	r3, r3, #2
 801c008:	3302      	adds	r3, #2
 801c00a:	69ba      	ldr	r2, [r7, #24]
 801c00c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c018:	693b      	ldr	r3, [r7, #16]
 801c01a:	43db      	mvns	r3, r3
 801c01c:	69ba      	ldr	r2, [r7, #24]
 801c01e:	4013      	ands	r3, r2
 801c020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c022:	683b      	ldr	r3, [r7, #0]
 801c024:	685b      	ldr	r3, [r3, #4]
 801c026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d003      	beq.n	801c036 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c02e:	69ba      	ldr	r2, [r7, #24]
 801c030:	693b      	ldr	r3, [r7, #16]
 801c032:	4313      	orrs	r3, r2
 801c034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801c036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c03a:	69bb      	ldr	r3, [r7, #24]
 801c03c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801c03e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c042:	685b      	ldr	r3, [r3, #4]
 801c044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c046:	693b      	ldr	r3, [r7, #16]
 801c048:	43db      	mvns	r3, r3
 801c04a:	69ba      	ldr	r2, [r7, #24]
 801c04c:	4013      	ands	r3, r2
 801c04e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c050:	683b      	ldr	r3, [r7, #0]
 801c052:	685b      	ldr	r3, [r3, #4]
 801c054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d003      	beq.n	801c064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801c05c:	69ba      	ldr	r2, [r7, #24]
 801c05e:	693b      	ldr	r3, [r7, #16]
 801c060:	4313      	orrs	r3, r2
 801c062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801c064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c068:	69bb      	ldr	r3, [r7, #24]
 801c06a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801c06c:	697b      	ldr	r3, [r7, #20]
 801c06e:	685b      	ldr	r3, [r3, #4]
 801c070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c072:	693b      	ldr	r3, [r7, #16]
 801c074:	43db      	mvns	r3, r3
 801c076:	69ba      	ldr	r2, [r7, #24]
 801c078:	4013      	ands	r3, r2
 801c07a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c07c:	683b      	ldr	r3, [r7, #0]
 801c07e:	685b      	ldr	r3, [r3, #4]
 801c080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c084:	2b00      	cmp	r3, #0
 801c086:	d003      	beq.n	801c090 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801c088:	69ba      	ldr	r2, [r7, #24]
 801c08a:	693b      	ldr	r3, [r7, #16]
 801c08c:	4313      	orrs	r3, r2
 801c08e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801c090:	697b      	ldr	r3, [r7, #20]
 801c092:	69ba      	ldr	r2, [r7, #24]
 801c094:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801c096:	697b      	ldr	r3, [r7, #20]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c09c:	693b      	ldr	r3, [r7, #16]
 801c09e:	43db      	mvns	r3, r3
 801c0a0:	69ba      	ldr	r2, [r7, #24]
 801c0a2:	4013      	ands	r3, r2
 801c0a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c0a6:	683b      	ldr	r3, [r7, #0]
 801c0a8:	685b      	ldr	r3, [r3, #4]
 801c0aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d003      	beq.n	801c0ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801c0b2:	69ba      	ldr	r2, [r7, #24]
 801c0b4:	693b      	ldr	r3, [r7, #16]
 801c0b6:	4313      	orrs	r3, r2
 801c0b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801c0ba:	697b      	ldr	r3, [r7, #20]
 801c0bc:	69ba      	ldr	r2, [r7, #24]
 801c0be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801c0c0:	69fb      	ldr	r3, [r7, #28]
 801c0c2:	3301      	adds	r3, #1
 801c0c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c0c6:	683b      	ldr	r3, [r7, #0]
 801c0c8:	681a      	ldr	r2, [r3, #0]
 801c0ca:	69fb      	ldr	r3, [r7, #28]
 801c0cc:	fa22 f303 	lsr.w	r3, r2, r3
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	f47f ae63 	bne.w	801bd9c <HAL_GPIO_Init+0x14>
  }
}
 801c0d6:	bf00      	nop
 801c0d8:	bf00      	nop
 801c0da:	3724      	adds	r7, #36	@ 0x24
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0e2:	4770      	bx	lr
 801c0e4:	58000400 	.word	0x58000400

0801c0e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c0e8:	b480      	push	{r7}
 801c0ea:	b083      	sub	sp, #12
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	6078      	str	r0, [r7, #4]
 801c0f0:	460b      	mov	r3, r1
 801c0f2:	807b      	strh	r3, [r7, #2]
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c0f8:	787b      	ldrb	r3, [r7, #1]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d003      	beq.n	801c106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c0fe:	887a      	ldrh	r2, [r7, #2]
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801c104:	e003      	b.n	801c10e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801c106:	887b      	ldrh	r3, [r7, #2]
 801c108:	041a      	lsls	r2, r3, #16
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	619a      	str	r2, [r3, #24]
}
 801c10e:	bf00      	nop
 801c110:	370c      	adds	r7, #12
 801c112:	46bd      	mov	sp, r7
 801c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c118:	4770      	bx	lr
	...

0801c11c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b082      	sub	sp, #8
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d101      	bne.n	801c12e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c12a:	2301      	movs	r3, #1
 801c12c:	e08b      	b.n	801c246 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c134:	b2db      	uxtb	r3, r3
 801c136:	2b00      	cmp	r3, #0
 801c138:	d106      	bne.n	801c148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	2200      	movs	r2, #0
 801c13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801c142:	6878      	ldr	r0, [r7, #4]
 801c144:	f7e5 ff08 	bl	8001f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	2224      	movs	r2, #36	@ 0x24
 801c14c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	681a      	ldr	r2, [r3, #0]
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	f022 0201 	bic.w	r2, r2, #1
 801c15e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	685a      	ldr	r2, [r3, #4]
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801c16c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	689a      	ldr	r2, [r3, #8]
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801c17c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	68db      	ldr	r3, [r3, #12]
 801c182:	2b01      	cmp	r3, #1
 801c184:	d107      	bne.n	801c196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	689a      	ldr	r2, [r3, #8]
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801c192:	609a      	str	r2, [r3, #8]
 801c194:	e006      	b.n	801c1a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	689a      	ldr	r2, [r3, #8]
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801c1a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	68db      	ldr	r3, [r3, #12]
 801c1a8:	2b02      	cmp	r3, #2
 801c1aa:	d108      	bne.n	801c1be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	685a      	ldr	r2, [r3, #4]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801c1ba:	605a      	str	r2, [r3, #4]
 801c1bc:	e007      	b.n	801c1ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	685a      	ldr	r2, [r3, #4]
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801c1cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	6859      	ldr	r1, [r3, #4]
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	681a      	ldr	r2, [r3, #0]
 801c1d8:	4b1d      	ldr	r3, [pc, #116]	@ (801c250 <HAL_I2C_Init+0x134>)
 801c1da:	430b      	orrs	r3, r1
 801c1dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	68da      	ldr	r2, [r3, #12]
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801c1ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	691a      	ldr	r2, [r3, #16]
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	695b      	ldr	r3, [r3, #20]
 801c1f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	699b      	ldr	r3, [r3, #24]
 801c1fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	430a      	orrs	r2, r1
 801c206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	69d9      	ldr	r1, [r3, #28]
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	6a1a      	ldr	r2, [r3, #32]
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	430a      	orrs	r2, r1
 801c216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	681a      	ldr	r2, [r3, #0]
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	f042 0201 	orr.w	r2, r2, #1
 801c226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	2200      	movs	r2, #0
 801c22c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	2220      	movs	r2, #32
 801c232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	2200      	movs	r2, #0
 801c23a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	2200      	movs	r2, #0
 801c240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801c244:	2300      	movs	r3, #0
}
 801c246:	4618      	mov	r0, r3
 801c248:	3708      	adds	r7, #8
 801c24a:	46bd      	mov	sp, r7
 801c24c:	bd80      	pop	{r7, pc}
 801c24e:	bf00      	nop
 801c250:	02008000 	.word	0x02008000

0801c254 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801c254:	b480      	push	{r7}
 801c256:	b083      	sub	sp, #12
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
 801c25c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c264:	b2db      	uxtb	r3, r3
 801c266:	2b20      	cmp	r3, #32
 801c268:	d138      	bne.n	801c2dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c270:	2b01      	cmp	r3, #1
 801c272:	d101      	bne.n	801c278 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801c274:	2302      	movs	r3, #2
 801c276:	e032      	b.n	801c2de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	2201      	movs	r2, #1
 801c27c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	2224      	movs	r2, #36	@ 0x24
 801c284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	681a      	ldr	r2, [r3, #0]
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	f022 0201 	bic.w	r2, r2, #1
 801c296:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	681a      	ldr	r2, [r3, #0]
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801c2a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	6819      	ldr	r1, [r3, #0]
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	683a      	ldr	r2, [r7, #0]
 801c2b4:	430a      	orrs	r2, r1
 801c2b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	681a      	ldr	r2, [r3, #0]
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	f042 0201 	orr.w	r2, r2, #1
 801c2c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	2220      	movs	r2, #32
 801c2cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c2d8:	2300      	movs	r3, #0
 801c2da:	e000      	b.n	801c2de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c2dc:	2302      	movs	r3, #2
  }
}
 801c2de:	4618      	mov	r0, r3
 801c2e0:	370c      	adds	r7, #12
 801c2e2:	46bd      	mov	sp, r7
 801c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e8:	4770      	bx	lr

0801c2ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801c2ea:	b480      	push	{r7}
 801c2ec:	b085      	sub	sp, #20
 801c2ee:	af00      	add	r7, sp, #0
 801c2f0:	6078      	str	r0, [r7, #4]
 801c2f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c2fa:	b2db      	uxtb	r3, r3
 801c2fc:	2b20      	cmp	r3, #32
 801c2fe:	d139      	bne.n	801c374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c306:	2b01      	cmp	r3, #1
 801c308:	d101      	bne.n	801c30e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801c30a:	2302      	movs	r3, #2
 801c30c:	e033      	b.n	801c376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	2201      	movs	r2, #1
 801c312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	2224      	movs	r2, #36	@ 0x24
 801c31a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	681a      	ldr	r2, [r3, #0]
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	f022 0201 	bic.w	r2, r2, #1
 801c32c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801c33c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801c33e:	683b      	ldr	r3, [r7, #0]
 801c340:	021b      	lsls	r3, r3, #8
 801c342:	68fa      	ldr	r2, [r7, #12]
 801c344:	4313      	orrs	r3, r2
 801c346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	68fa      	ldr	r2, [r7, #12]
 801c34e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	681a      	ldr	r2, [r3, #0]
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	f042 0201 	orr.w	r2, r2, #1
 801c35e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	2220      	movs	r2, #32
 801c364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	2200      	movs	r2, #0
 801c36c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c370:	2300      	movs	r3, #0
 801c372:	e000      	b.n	801c376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c374:	2302      	movs	r3, #2
  }
}
 801c376:	4618      	mov	r0, r3
 801c378:	3714      	adds	r7, #20
 801c37a:	46bd      	mov	sp, r7
 801c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c380:	4770      	bx	lr
	...

0801c384 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c384:	b580      	push	{r7, lr}
 801c386:	b084      	sub	sp, #16
 801c388:	af00      	add	r7, sp, #0
 801c38a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801c38c:	4b19      	ldr	r3, [pc, #100]	@ (801c3f4 <HAL_PWREx_ConfigSupply+0x70>)
 801c38e:	68db      	ldr	r3, [r3, #12]
 801c390:	f003 0304 	and.w	r3, r3, #4
 801c394:	2b04      	cmp	r3, #4
 801c396:	d00a      	beq.n	801c3ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c398:	4b16      	ldr	r3, [pc, #88]	@ (801c3f4 <HAL_PWREx_ConfigSupply+0x70>)
 801c39a:	68db      	ldr	r3, [r3, #12]
 801c39c:	f003 0307 	and.w	r3, r3, #7
 801c3a0:	687a      	ldr	r2, [r7, #4]
 801c3a2:	429a      	cmp	r2, r3
 801c3a4:	d001      	beq.n	801c3aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c3a6:	2301      	movs	r3, #1
 801c3a8:	e01f      	b.n	801c3ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	e01d      	b.n	801c3ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c3ae:	4b11      	ldr	r3, [pc, #68]	@ (801c3f4 <HAL_PWREx_ConfigSupply+0x70>)
 801c3b0:	68db      	ldr	r3, [r3, #12]
 801c3b2:	f023 0207 	bic.w	r2, r3, #7
 801c3b6:	490f      	ldr	r1, [pc, #60]	@ (801c3f4 <HAL_PWREx_ConfigSupply+0x70>)
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	4313      	orrs	r3, r2
 801c3bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c3be:	f7fd fc03 	bl	8019bc8 <HAL_GetTick>
 801c3c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c3c4:	e009      	b.n	801c3da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c3c6:	f7fd fbff 	bl	8019bc8 <HAL_GetTick>
 801c3ca:	4602      	mov	r2, r0
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	1ad3      	subs	r3, r2, r3
 801c3d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c3d4:	d901      	bls.n	801c3da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c3d6:	2301      	movs	r3, #1
 801c3d8:	e007      	b.n	801c3ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c3da:	4b06      	ldr	r3, [pc, #24]	@ (801c3f4 <HAL_PWREx_ConfigSupply+0x70>)
 801c3dc:	685b      	ldr	r3, [r3, #4]
 801c3de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c3e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c3e6:	d1ee      	bne.n	801c3c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c3e8:	2300      	movs	r3, #0
}
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	3710      	adds	r7, #16
 801c3ee:	46bd      	mov	sp, r7
 801c3f0:	bd80      	pop	{r7, pc}
 801c3f2:	bf00      	nop
 801c3f4:	58024800 	.word	0x58024800

0801c3f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b08c      	sub	sp, #48	@ 0x30
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	2b00      	cmp	r3, #0
 801c404:	d102      	bne.n	801c40c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c406:	2301      	movs	r3, #1
 801c408:	f000 bc48 	b.w	801cc9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	f003 0301 	and.w	r3, r3, #1
 801c414:	2b00      	cmp	r3, #0
 801c416:	f000 8088 	beq.w	801c52a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c41a:	4b99      	ldr	r3, [pc, #612]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c41c:	691b      	ldr	r3, [r3, #16]
 801c41e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c424:	4b96      	ldr	r3, [pc, #600]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c428:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c42c:	2b10      	cmp	r3, #16
 801c42e:	d007      	beq.n	801c440 <HAL_RCC_OscConfig+0x48>
 801c430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c432:	2b18      	cmp	r3, #24
 801c434:	d111      	bne.n	801c45a <HAL_RCC_OscConfig+0x62>
 801c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c438:	f003 0303 	and.w	r3, r3, #3
 801c43c:	2b02      	cmp	r3, #2
 801c43e:	d10c      	bne.n	801c45a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c440:	4b8f      	ldr	r3, [pc, #572]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d06d      	beq.n	801c528 <HAL_RCC_OscConfig+0x130>
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	685b      	ldr	r3, [r3, #4]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d169      	bne.n	801c528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c454:	2301      	movs	r3, #1
 801c456:	f000 bc21 	b.w	801cc9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	685b      	ldr	r3, [r3, #4]
 801c45e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c462:	d106      	bne.n	801c472 <HAL_RCC_OscConfig+0x7a>
 801c464:	4b86      	ldr	r3, [pc, #536]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	4a85      	ldr	r2, [pc, #532]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c46a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c46e:	6013      	str	r3, [r2, #0]
 801c470:	e02e      	b.n	801c4d0 <HAL_RCC_OscConfig+0xd8>
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	685b      	ldr	r3, [r3, #4]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d10c      	bne.n	801c494 <HAL_RCC_OscConfig+0x9c>
 801c47a:	4b81      	ldr	r3, [pc, #516]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	4a80      	ldr	r2, [pc, #512]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c484:	6013      	str	r3, [r2, #0]
 801c486:	4b7e      	ldr	r3, [pc, #504]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	4a7d      	ldr	r2, [pc, #500]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c48c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c490:	6013      	str	r3, [r2, #0]
 801c492:	e01d      	b.n	801c4d0 <HAL_RCC_OscConfig+0xd8>
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	685b      	ldr	r3, [r3, #4]
 801c498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c49c:	d10c      	bne.n	801c4b8 <HAL_RCC_OscConfig+0xc0>
 801c49e:	4b78      	ldr	r3, [pc, #480]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	4a77      	ldr	r2, [pc, #476]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c4a8:	6013      	str	r3, [r2, #0]
 801c4aa:	4b75      	ldr	r3, [pc, #468]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	4a74      	ldr	r2, [pc, #464]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c4b4:	6013      	str	r3, [r2, #0]
 801c4b6:	e00b      	b.n	801c4d0 <HAL_RCC_OscConfig+0xd8>
 801c4b8:	4b71      	ldr	r3, [pc, #452]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	4a70      	ldr	r2, [pc, #448]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c4c2:	6013      	str	r3, [r2, #0]
 801c4c4:	4b6e      	ldr	r3, [pc, #440]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	4a6d      	ldr	r2, [pc, #436]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c4ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	685b      	ldr	r3, [r3, #4]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d013      	beq.n	801c500 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4d8:	f7fd fb76 	bl	8019bc8 <HAL_GetTick>
 801c4dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c4de:	e008      	b.n	801c4f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c4e0:	f7fd fb72 	bl	8019bc8 <HAL_GetTick>
 801c4e4:	4602      	mov	r2, r0
 801c4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4e8:	1ad3      	subs	r3, r2, r3
 801c4ea:	2b64      	cmp	r3, #100	@ 0x64
 801c4ec:	d901      	bls.n	801c4f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c4ee:	2303      	movs	r3, #3
 801c4f0:	e3d4      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c4f2:	4b63      	ldr	r3, [pc, #396]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d0f0      	beq.n	801c4e0 <HAL_RCC_OscConfig+0xe8>
 801c4fe:	e014      	b.n	801c52a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c500:	f7fd fb62 	bl	8019bc8 <HAL_GetTick>
 801c504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c506:	e008      	b.n	801c51a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c508:	f7fd fb5e 	bl	8019bc8 <HAL_GetTick>
 801c50c:	4602      	mov	r2, r0
 801c50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c510:	1ad3      	subs	r3, r2, r3
 801c512:	2b64      	cmp	r3, #100	@ 0x64
 801c514:	d901      	bls.n	801c51a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c516:	2303      	movs	r3, #3
 801c518:	e3c0      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c51a:	4b59      	ldr	r3, [pc, #356]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c522:	2b00      	cmp	r3, #0
 801c524:	d1f0      	bne.n	801c508 <HAL_RCC_OscConfig+0x110>
 801c526:	e000      	b.n	801c52a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	f003 0302 	and.w	r3, r3, #2
 801c532:	2b00      	cmp	r3, #0
 801c534:	f000 80ca 	beq.w	801c6cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c538:	4b51      	ldr	r3, [pc, #324]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c53a:	691b      	ldr	r3, [r3, #16]
 801c53c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c540:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c542:	4b4f      	ldr	r3, [pc, #316]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c546:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c548:	6a3b      	ldr	r3, [r7, #32]
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d007      	beq.n	801c55e <HAL_RCC_OscConfig+0x166>
 801c54e:	6a3b      	ldr	r3, [r7, #32]
 801c550:	2b18      	cmp	r3, #24
 801c552:	d156      	bne.n	801c602 <HAL_RCC_OscConfig+0x20a>
 801c554:	69fb      	ldr	r3, [r7, #28]
 801c556:	f003 0303 	and.w	r3, r3, #3
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d151      	bne.n	801c602 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c55e:	4b48      	ldr	r3, [pc, #288]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	f003 0304 	and.w	r3, r3, #4
 801c566:	2b00      	cmp	r3, #0
 801c568:	d005      	beq.n	801c576 <HAL_RCC_OscConfig+0x17e>
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	68db      	ldr	r3, [r3, #12]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d101      	bne.n	801c576 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c572:	2301      	movs	r3, #1
 801c574:	e392      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c576:	4b42      	ldr	r3, [pc, #264]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	f023 0219 	bic.w	r2, r3, #25
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	68db      	ldr	r3, [r3, #12]
 801c582:	493f      	ldr	r1, [pc, #252]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c584:	4313      	orrs	r3, r2
 801c586:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c588:	f7fd fb1e 	bl	8019bc8 <HAL_GetTick>
 801c58c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c58e:	e008      	b.n	801c5a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c590:	f7fd fb1a 	bl	8019bc8 <HAL_GetTick>
 801c594:	4602      	mov	r2, r0
 801c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c598:	1ad3      	subs	r3, r2, r3
 801c59a:	2b02      	cmp	r3, #2
 801c59c:	d901      	bls.n	801c5a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c59e:	2303      	movs	r3, #3
 801c5a0:	e37c      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c5a2:	4b37      	ldr	r3, [pc, #220]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	f003 0304 	and.w	r3, r3, #4
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d0f0      	beq.n	801c590 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c5ae:	f7fd fb3b 	bl	8019c28 <HAL_GetREVID>
 801c5b2:	4603      	mov	r3, r0
 801c5b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c5b8:	4293      	cmp	r3, r2
 801c5ba:	d817      	bhi.n	801c5ec <HAL_RCC_OscConfig+0x1f4>
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	691b      	ldr	r3, [r3, #16]
 801c5c0:	2b40      	cmp	r3, #64	@ 0x40
 801c5c2:	d108      	bne.n	801c5d6 <HAL_RCC_OscConfig+0x1de>
 801c5c4:	4b2e      	ldr	r3, [pc, #184]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c5c6:	685b      	ldr	r3, [r3, #4]
 801c5c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c5cc:	4a2c      	ldr	r2, [pc, #176]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c5ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c5d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c5d4:	e07a      	b.n	801c6cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c5d6:	4b2a      	ldr	r3, [pc, #168]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c5d8:	685b      	ldr	r3, [r3, #4]
 801c5da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	691b      	ldr	r3, [r3, #16]
 801c5e2:	031b      	lsls	r3, r3, #12
 801c5e4:	4926      	ldr	r1, [pc, #152]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c5e6:	4313      	orrs	r3, r2
 801c5e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c5ea:	e06f      	b.n	801c6cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c5ec:	4b24      	ldr	r3, [pc, #144]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c5ee:	685b      	ldr	r3, [r3, #4]
 801c5f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	691b      	ldr	r3, [r3, #16]
 801c5f8:	061b      	lsls	r3, r3, #24
 801c5fa:	4921      	ldr	r1, [pc, #132]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c5fc:	4313      	orrs	r3, r2
 801c5fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c600:	e064      	b.n	801c6cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	68db      	ldr	r3, [r3, #12]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d047      	beq.n	801c69a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c60a:	4b1d      	ldr	r3, [pc, #116]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	f023 0219 	bic.w	r2, r3, #25
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	68db      	ldr	r3, [r3, #12]
 801c616:	491a      	ldr	r1, [pc, #104]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c618:	4313      	orrs	r3, r2
 801c61a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c61c:	f7fd fad4 	bl	8019bc8 <HAL_GetTick>
 801c620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c622:	e008      	b.n	801c636 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c624:	f7fd fad0 	bl	8019bc8 <HAL_GetTick>
 801c628:	4602      	mov	r2, r0
 801c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c62c:	1ad3      	subs	r3, r2, r3
 801c62e:	2b02      	cmp	r3, #2
 801c630:	d901      	bls.n	801c636 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c632:	2303      	movs	r3, #3
 801c634:	e332      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c636:	4b12      	ldr	r3, [pc, #72]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	f003 0304 	and.w	r3, r3, #4
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d0f0      	beq.n	801c624 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c642:	f7fd faf1 	bl	8019c28 <HAL_GetREVID>
 801c646:	4603      	mov	r3, r0
 801c648:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c64c:	4293      	cmp	r3, r2
 801c64e:	d819      	bhi.n	801c684 <HAL_RCC_OscConfig+0x28c>
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	691b      	ldr	r3, [r3, #16]
 801c654:	2b40      	cmp	r3, #64	@ 0x40
 801c656:	d108      	bne.n	801c66a <HAL_RCC_OscConfig+0x272>
 801c658:	4b09      	ldr	r3, [pc, #36]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c65a:	685b      	ldr	r3, [r3, #4]
 801c65c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c660:	4a07      	ldr	r2, [pc, #28]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c666:	6053      	str	r3, [r2, #4]
 801c668:	e030      	b.n	801c6cc <HAL_RCC_OscConfig+0x2d4>
 801c66a:	4b05      	ldr	r3, [pc, #20]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c66c:	685b      	ldr	r3, [r3, #4]
 801c66e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	691b      	ldr	r3, [r3, #16]
 801c676:	031b      	lsls	r3, r3, #12
 801c678:	4901      	ldr	r1, [pc, #4]	@ (801c680 <HAL_RCC_OscConfig+0x288>)
 801c67a:	4313      	orrs	r3, r2
 801c67c:	604b      	str	r3, [r1, #4]
 801c67e:	e025      	b.n	801c6cc <HAL_RCC_OscConfig+0x2d4>
 801c680:	58024400 	.word	0x58024400
 801c684:	4b9a      	ldr	r3, [pc, #616]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c686:	685b      	ldr	r3, [r3, #4]
 801c688:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	691b      	ldr	r3, [r3, #16]
 801c690:	061b      	lsls	r3, r3, #24
 801c692:	4997      	ldr	r1, [pc, #604]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c694:	4313      	orrs	r3, r2
 801c696:	604b      	str	r3, [r1, #4]
 801c698:	e018      	b.n	801c6cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c69a:	4b95      	ldr	r3, [pc, #596]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	4a94      	ldr	r2, [pc, #592]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c6a0:	f023 0301 	bic.w	r3, r3, #1
 801c6a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c6a6:	f7fd fa8f 	bl	8019bc8 <HAL_GetTick>
 801c6aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c6ac:	e008      	b.n	801c6c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c6ae:	f7fd fa8b 	bl	8019bc8 <HAL_GetTick>
 801c6b2:	4602      	mov	r2, r0
 801c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6b6:	1ad3      	subs	r3, r2, r3
 801c6b8:	2b02      	cmp	r3, #2
 801c6ba:	d901      	bls.n	801c6c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c6bc:	2303      	movs	r3, #3
 801c6be:	e2ed      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c6c0:	4b8b      	ldr	r3, [pc, #556]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	f003 0304 	and.w	r3, r3, #4
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d1f0      	bne.n	801c6ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	f003 0310 	and.w	r3, r3, #16
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	f000 80a9 	beq.w	801c82c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c6da:	4b85      	ldr	r3, [pc, #532]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c6dc:	691b      	ldr	r3, [r3, #16]
 801c6de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c6e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c6e4:	4b82      	ldr	r3, [pc, #520]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c6ea:	69bb      	ldr	r3, [r7, #24]
 801c6ec:	2b08      	cmp	r3, #8
 801c6ee:	d007      	beq.n	801c700 <HAL_RCC_OscConfig+0x308>
 801c6f0:	69bb      	ldr	r3, [r7, #24]
 801c6f2:	2b18      	cmp	r3, #24
 801c6f4:	d13a      	bne.n	801c76c <HAL_RCC_OscConfig+0x374>
 801c6f6:	697b      	ldr	r3, [r7, #20]
 801c6f8:	f003 0303 	and.w	r3, r3, #3
 801c6fc:	2b01      	cmp	r3, #1
 801c6fe:	d135      	bne.n	801c76c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c700:	4b7b      	ldr	r3, [pc, #492]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d005      	beq.n	801c718 <HAL_RCC_OscConfig+0x320>
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	69db      	ldr	r3, [r3, #28]
 801c710:	2b80      	cmp	r3, #128	@ 0x80
 801c712:	d001      	beq.n	801c718 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c714:	2301      	movs	r3, #1
 801c716:	e2c1      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c718:	f7fd fa86 	bl	8019c28 <HAL_GetREVID>
 801c71c:	4603      	mov	r3, r0
 801c71e:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c722:	4293      	cmp	r3, r2
 801c724:	d817      	bhi.n	801c756 <HAL_RCC_OscConfig+0x35e>
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	6a1b      	ldr	r3, [r3, #32]
 801c72a:	2b20      	cmp	r3, #32
 801c72c:	d108      	bne.n	801c740 <HAL_RCC_OscConfig+0x348>
 801c72e:	4b70      	ldr	r3, [pc, #448]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c730:	685b      	ldr	r3, [r3, #4]
 801c732:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c736:	4a6e      	ldr	r2, [pc, #440]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c738:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c73c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c73e:	e075      	b.n	801c82c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c740:	4b6b      	ldr	r3, [pc, #428]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c742:	685b      	ldr	r3, [r3, #4]
 801c744:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	6a1b      	ldr	r3, [r3, #32]
 801c74c:	069b      	lsls	r3, r3, #26
 801c74e:	4968      	ldr	r1, [pc, #416]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c750:	4313      	orrs	r3, r2
 801c752:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c754:	e06a      	b.n	801c82c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c756:	4b66      	ldr	r3, [pc, #408]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c758:	68db      	ldr	r3, [r3, #12]
 801c75a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	6a1b      	ldr	r3, [r3, #32]
 801c762:	061b      	lsls	r3, r3, #24
 801c764:	4962      	ldr	r1, [pc, #392]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c766:	4313      	orrs	r3, r2
 801c768:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c76a:	e05f      	b.n	801c82c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	69db      	ldr	r3, [r3, #28]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d042      	beq.n	801c7fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c774:	4b5e      	ldr	r3, [pc, #376]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	4a5d      	ldr	r2, [pc, #372]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c77e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c780:	f7fd fa22 	bl	8019bc8 <HAL_GetTick>
 801c784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c786:	e008      	b.n	801c79a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c788:	f7fd fa1e 	bl	8019bc8 <HAL_GetTick>
 801c78c:	4602      	mov	r2, r0
 801c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c790:	1ad3      	subs	r3, r2, r3
 801c792:	2b02      	cmp	r3, #2
 801c794:	d901      	bls.n	801c79a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c796:	2303      	movs	r3, #3
 801c798:	e280      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c79a:	4b55      	ldr	r3, [pc, #340]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d0f0      	beq.n	801c788 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c7a6:	f7fd fa3f 	bl	8019c28 <HAL_GetREVID>
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c7b0:	4293      	cmp	r3, r2
 801c7b2:	d817      	bhi.n	801c7e4 <HAL_RCC_OscConfig+0x3ec>
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	6a1b      	ldr	r3, [r3, #32]
 801c7b8:	2b20      	cmp	r3, #32
 801c7ba:	d108      	bne.n	801c7ce <HAL_RCC_OscConfig+0x3d6>
 801c7bc:	4b4c      	ldr	r3, [pc, #304]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c7c4:	4a4a      	ldr	r2, [pc, #296]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c7c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c7ca:	6053      	str	r3, [r2, #4]
 801c7cc:	e02e      	b.n	801c82c <HAL_RCC_OscConfig+0x434>
 801c7ce:	4b48      	ldr	r3, [pc, #288]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c7d0:	685b      	ldr	r3, [r3, #4]
 801c7d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	6a1b      	ldr	r3, [r3, #32]
 801c7da:	069b      	lsls	r3, r3, #26
 801c7dc:	4944      	ldr	r1, [pc, #272]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c7de:	4313      	orrs	r3, r2
 801c7e0:	604b      	str	r3, [r1, #4]
 801c7e2:	e023      	b.n	801c82c <HAL_RCC_OscConfig+0x434>
 801c7e4:	4b42      	ldr	r3, [pc, #264]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c7e6:	68db      	ldr	r3, [r3, #12]
 801c7e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	6a1b      	ldr	r3, [r3, #32]
 801c7f0:	061b      	lsls	r3, r3, #24
 801c7f2:	493f      	ldr	r1, [pc, #252]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c7f4:	4313      	orrs	r3, r2
 801c7f6:	60cb      	str	r3, [r1, #12]
 801c7f8:	e018      	b.n	801c82c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c7fa:	4b3d      	ldr	r3, [pc, #244]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	4a3c      	ldr	r2, [pc, #240]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c800:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c806:	f7fd f9df 	bl	8019bc8 <HAL_GetTick>
 801c80a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c80c:	e008      	b.n	801c820 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c80e:	f7fd f9db 	bl	8019bc8 <HAL_GetTick>
 801c812:	4602      	mov	r2, r0
 801c814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c816:	1ad3      	subs	r3, r2, r3
 801c818:	2b02      	cmp	r3, #2
 801c81a:	d901      	bls.n	801c820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c81c:	2303      	movs	r3, #3
 801c81e:	e23d      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c820:	4b33      	ldr	r3, [pc, #204]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d1f0      	bne.n	801c80e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	f003 0308 	and.w	r3, r3, #8
 801c834:	2b00      	cmp	r3, #0
 801c836:	d036      	beq.n	801c8a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	695b      	ldr	r3, [r3, #20]
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d019      	beq.n	801c874 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c840:	4b2b      	ldr	r3, [pc, #172]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c844:	4a2a      	ldr	r2, [pc, #168]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c846:	f043 0301 	orr.w	r3, r3, #1
 801c84a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c84c:	f7fd f9bc 	bl	8019bc8 <HAL_GetTick>
 801c850:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c852:	e008      	b.n	801c866 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c854:	f7fd f9b8 	bl	8019bc8 <HAL_GetTick>
 801c858:	4602      	mov	r2, r0
 801c85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c85c:	1ad3      	subs	r3, r2, r3
 801c85e:	2b02      	cmp	r3, #2
 801c860:	d901      	bls.n	801c866 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c862:	2303      	movs	r3, #3
 801c864:	e21a      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c866:	4b22      	ldr	r3, [pc, #136]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c86a:	f003 0302 	and.w	r3, r3, #2
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d0f0      	beq.n	801c854 <HAL_RCC_OscConfig+0x45c>
 801c872:	e018      	b.n	801c8a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c874:	4b1e      	ldr	r3, [pc, #120]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c878:	4a1d      	ldr	r2, [pc, #116]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c87a:	f023 0301 	bic.w	r3, r3, #1
 801c87e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c880:	f7fd f9a2 	bl	8019bc8 <HAL_GetTick>
 801c884:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c886:	e008      	b.n	801c89a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c888:	f7fd f99e 	bl	8019bc8 <HAL_GetTick>
 801c88c:	4602      	mov	r2, r0
 801c88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c890:	1ad3      	subs	r3, r2, r3
 801c892:	2b02      	cmp	r3, #2
 801c894:	d901      	bls.n	801c89a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801c896:	2303      	movs	r3, #3
 801c898:	e200      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c89a:	4b15      	ldr	r3, [pc, #84]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c89c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c89e:	f003 0302 	and.w	r3, r3, #2
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d1f0      	bne.n	801c888 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	f003 0320 	and.w	r3, r3, #32
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d039      	beq.n	801c926 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	699b      	ldr	r3, [r3, #24]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d01c      	beq.n	801c8f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c8ba:	4b0d      	ldr	r3, [pc, #52]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	4a0c      	ldr	r2, [pc, #48]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c8c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801c8c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c8c6:	f7fd f97f 	bl	8019bc8 <HAL_GetTick>
 801c8ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c8cc:	e008      	b.n	801c8e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c8ce:	f7fd f97b 	bl	8019bc8 <HAL_GetTick>
 801c8d2:	4602      	mov	r2, r0
 801c8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8d6:	1ad3      	subs	r3, r2, r3
 801c8d8:	2b02      	cmp	r3, #2
 801c8da:	d901      	bls.n	801c8e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801c8dc:	2303      	movs	r3, #3
 801c8de:	e1dd      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c8e0:	4b03      	ldr	r3, [pc, #12]	@ (801c8f0 <HAL_RCC_OscConfig+0x4f8>)
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d0f0      	beq.n	801c8ce <HAL_RCC_OscConfig+0x4d6>
 801c8ec:	e01b      	b.n	801c926 <HAL_RCC_OscConfig+0x52e>
 801c8ee:	bf00      	nop
 801c8f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c8f4:	4b9b      	ldr	r3, [pc, #620]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	4a9a      	ldr	r2, [pc, #616]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c8fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c8fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c900:	f7fd f962 	bl	8019bc8 <HAL_GetTick>
 801c904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c906:	e008      	b.n	801c91a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c908:	f7fd f95e 	bl	8019bc8 <HAL_GetTick>
 801c90c:	4602      	mov	r2, r0
 801c90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c910:	1ad3      	subs	r3, r2, r3
 801c912:	2b02      	cmp	r3, #2
 801c914:	d901      	bls.n	801c91a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801c916:	2303      	movs	r3, #3
 801c918:	e1c0      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c91a:	4b92      	ldr	r3, [pc, #584]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c922:	2b00      	cmp	r3, #0
 801c924:	d1f0      	bne.n	801c908 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	f003 0304 	and.w	r3, r3, #4
 801c92e:	2b00      	cmp	r3, #0
 801c930:	f000 8081 	beq.w	801ca36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c934:	4b8c      	ldr	r3, [pc, #560]	@ (801cb68 <HAL_RCC_OscConfig+0x770>)
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	4a8b      	ldr	r2, [pc, #556]	@ (801cb68 <HAL_RCC_OscConfig+0x770>)
 801c93a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c93e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c940:	f7fd f942 	bl	8019bc8 <HAL_GetTick>
 801c944:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c946:	e008      	b.n	801c95a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c948:	f7fd f93e 	bl	8019bc8 <HAL_GetTick>
 801c94c:	4602      	mov	r2, r0
 801c94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c950:	1ad3      	subs	r3, r2, r3
 801c952:	2b64      	cmp	r3, #100	@ 0x64
 801c954:	d901      	bls.n	801c95a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c956:	2303      	movs	r3, #3
 801c958:	e1a0      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c95a:	4b83      	ldr	r3, [pc, #524]	@ (801cb68 <HAL_RCC_OscConfig+0x770>)
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c962:	2b00      	cmp	r3, #0
 801c964:	d0f0      	beq.n	801c948 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	689b      	ldr	r3, [r3, #8]
 801c96a:	2b01      	cmp	r3, #1
 801c96c:	d106      	bne.n	801c97c <HAL_RCC_OscConfig+0x584>
 801c96e:	4b7d      	ldr	r3, [pc, #500]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c972:	4a7c      	ldr	r2, [pc, #496]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c974:	f043 0301 	orr.w	r3, r3, #1
 801c978:	6713      	str	r3, [r2, #112]	@ 0x70
 801c97a:	e02d      	b.n	801c9d8 <HAL_RCC_OscConfig+0x5e0>
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	689b      	ldr	r3, [r3, #8]
 801c980:	2b00      	cmp	r3, #0
 801c982:	d10c      	bne.n	801c99e <HAL_RCC_OscConfig+0x5a6>
 801c984:	4b77      	ldr	r3, [pc, #476]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c988:	4a76      	ldr	r2, [pc, #472]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c98a:	f023 0301 	bic.w	r3, r3, #1
 801c98e:	6713      	str	r3, [r2, #112]	@ 0x70
 801c990:	4b74      	ldr	r3, [pc, #464]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c994:	4a73      	ldr	r2, [pc, #460]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c996:	f023 0304 	bic.w	r3, r3, #4
 801c99a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c99c:	e01c      	b.n	801c9d8 <HAL_RCC_OscConfig+0x5e0>
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	689b      	ldr	r3, [r3, #8]
 801c9a2:	2b05      	cmp	r3, #5
 801c9a4:	d10c      	bne.n	801c9c0 <HAL_RCC_OscConfig+0x5c8>
 801c9a6:	4b6f      	ldr	r3, [pc, #444]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9aa:	4a6e      	ldr	r2, [pc, #440]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9ac:	f043 0304 	orr.w	r3, r3, #4
 801c9b0:	6713      	str	r3, [r2, #112]	@ 0x70
 801c9b2:	4b6c      	ldr	r3, [pc, #432]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9b6:	4a6b      	ldr	r2, [pc, #428]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9b8:	f043 0301 	orr.w	r3, r3, #1
 801c9bc:	6713      	str	r3, [r2, #112]	@ 0x70
 801c9be:	e00b      	b.n	801c9d8 <HAL_RCC_OscConfig+0x5e0>
 801c9c0:	4b68      	ldr	r3, [pc, #416]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9c4:	4a67      	ldr	r2, [pc, #412]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9c6:	f023 0301 	bic.w	r3, r3, #1
 801c9ca:	6713      	str	r3, [r2, #112]	@ 0x70
 801c9cc:	4b65      	ldr	r3, [pc, #404]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c9d0:	4a64      	ldr	r2, [pc, #400]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801c9d2:	f023 0304 	bic.w	r3, r3, #4
 801c9d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	689b      	ldr	r3, [r3, #8]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d015      	beq.n	801ca0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c9e0:	f7fd f8f2 	bl	8019bc8 <HAL_GetTick>
 801c9e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c9e6:	e00a      	b.n	801c9fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c9e8:	f7fd f8ee 	bl	8019bc8 <HAL_GetTick>
 801c9ec:	4602      	mov	r2, r0
 801c9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9f0:	1ad3      	subs	r3, r2, r3
 801c9f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c9f6:	4293      	cmp	r3, r2
 801c9f8:	d901      	bls.n	801c9fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c9fa:	2303      	movs	r3, #3
 801c9fc:	e14e      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c9fe:	4b59      	ldr	r3, [pc, #356]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801ca00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ca02:	f003 0302 	and.w	r3, r3, #2
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d0ee      	beq.n	801c9e8 <HAL_RCC_OscConfig+0x5f0>
 801ca0a:	e014      	b.n	801ca36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ca0c:	f7fd f8dc 	bl	8019bc8 <HAL_GetTick>
 801ca10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ca12:	e00a      	b.n	801ca2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ca14:	f7fd f8d8 	bl	8019bc8 <HAL_GetTick>
 801ca18:	4602      	mov	r2, r0
 801ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca1c:	1ad3      	subs	r3, r2, r3
 801ca1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ca22:	4293      	cmp	r3, r2
 801ca24:	d901      	bls.n	801ca2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801ca26:	2303      	movs	r3, #3
 801ca28:	e138      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ca2a:	4b4e      	ldr	r3, [pc, #312]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801ca2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ca2e:	f003 0302 	and.w	r3, r3, #2
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d1ee      	bne.n	801ca14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f000 812d 	beq.w	801cc9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801ca40:	4b48      	ldr	r3, [pc, #288]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801ca42:	691b      	ldr	r3, [r3, #16]
 801ca44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ca48:	2b18      	cmp	r3, #24
 801ca4a:	f000 80bd 	beq.w	801cbc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca52:	2b02      	cmp	r3, #2
 801ca54:	f040 809e 	bne.w	801cb94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ca58:	4b42      	ldr	r3, [pc, #264]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	4a41      	ldr	r2, [pc, #260]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801ca5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801ca62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca64:	f7fd f8b0 	bl	8019bc8 <HAL_GetTick>
 801ca68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ca6a:	e008      	b.n	801ca7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ca6c:	f7fd f8ac 	bl	8019bc8 <HAL_GetTick>
 801ca70:	4602      	mov	r2, r0
 801ca72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca74:	1ad3      	subs	r3, r2, r3
 801ca76:	2b02      	cmp	r3, #2
 801ca78:	d901      	bls.n	801ca7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801ca7a:	2303      	movs	r3, #3
 801ca7c:	e10e      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ca7e:	4b39      	ldr	r3, [pc, #228]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d1f0      	bne.n	801ca6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ca8a:	4b36      	ldr	r3, [pc, #216]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801ca8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ca8e:	4b37      	ldr	r3, [pc, #220]	@ (801cb6c <HAL_RCC_OscConfig+0x774>)
 801ca90:	4013      	ands	r3, r2
 801ca92:	687a      	ldr	r2, [r7, #4]
 801ca94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801ca96:	687a      	ldr	r2, [r7, #4]
 801ca98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801ca9a:	0112      	lsls	r2, r2, #4
 801ca9c:	430a      	orrs	r2, r1
 801ca9e:	4931      	ldr	r1, [pc, #196]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801caa0:	4313      	orrs	r3, r2
 801caa2:	628b      	str	r3, [r1, #40]	@ 0x28
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801caa8:	3b01      	subs	r3, #1
 801caaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cab2:	3b01      	subs	r3, #1
 801cab4:	025b      	lsls	r3, r3, #9
 801cab6:	b29b      	uxth	r3, r3
 801cab8:	431a      	orrs	r2, r3
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cabe:	3b01      	subs	r3, #1
 801cac0:	041b      	lsls	r3, r3, #16
 801cac2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801cac6:	431a      	orrs	r2, r3
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cacc:	3b01      	subs	r3, #1
 801cace:	061b      	lsls	r3, r3, #24
 801cad0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801cad4:	4923      	ldr	r1, [pc, #140]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cad6:	4313      	orrs	r3, r2
 801cad8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801cada:	4b22      	ldr	r3, [pc, #136]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cade:	4a21      	ldr	r2, [pc, #132]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cae0:	f023 0301 	bic.w	r3, r3, #1
 801cae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cae6:	4b1f      	ldr	r3, [pc, #124]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801caea:	4b21      	ldr	r3, [pc, #132]	@ (801cb70 <HAL_RCC_OscConfig+0x778>)
 801caec:	4013      	ands	r3, r2
 801caee:	687a      	ldr	r2, [r7, #4]
 801caf0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801caf2:	00d2      	lsls	r2, r2, #3
 801caf4:	491b      	ldr	r1, [pc, #108]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801caf6:	4313      	orrs	r3, r2
 801caf8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801cafa:	4b1a      	ldr	r3, [pc, #104]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cafe:	f023 020c 	bic.w	r2, r3, #12
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cb06:	4917      	ldr	r1, [pc, #92]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb08:	4313      	orrs	r3, r2
 801cb0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801cb0c:	4b15      	ldr	r3, [pc, #84]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb10:	f023 0202 	bic.w	r2, r3, #2
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cb18:	4912      	ldr	r1, [pc, #72]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb1a:	4313      	orrs	r3, r2
 801cb1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801cb1e:	4b11      	ldr	r3, [pc, #68]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb22:	4a10      	ldr	r2, [pc, #64]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cb28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cb2a:	4b0e      	ldr	r3, [pc, #56]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb2e:	4a0d      	ldr	r2, [pc, #52]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cb34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801cb36:	4b0b      	ldr	r3, [pc, #44]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb3a:	4a0a      	ldr	r2, [pc, #40]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cb40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801cb42:	4b08      	ldr	r3, [pc, #32]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb46:	4a07      	ldr	r2, [pc, #28]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb48:	f043 0301 	orr.w	r3, r3, #1
 801cb4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801cb4e:	4b05      	ldr	r3, [pc, #20]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	4a04      	ldr	r2, [pc, #16]	@ (801cb64 <HAL_RCC_OscConfig+0x76c>)
 801cb54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801cb58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb5a:	f7fd f835 	bl	8019bc8 <HAL_GetTick>
 801cb5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cb60:	e011      	b.n	801cb86 <HAL_RCC_OscConfig+0x78e>
 801cb62:	bf00      	nop
 801cb64:	58024400 	.word	0x58024400
 801cb68:	58024800 	.word	0x58024800
 801cb6c:	fffffc0c 	.word	0xfffffc0c
 801cb70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cb74:	f7fd f828 	bl	8019bc8 <HAL_GetTick>
 801cb78:	4602      	mov	r2, r0
 801cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb7c:	1ad3      	subs	r3, r2, r3
 801cb7e:	2b02      	cmp	r3, #2
 801cb80:	d901      	bls.n	801cb86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801cb82:	2303      	movs	r3, #3
 801cb84:	e08a      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cb86:	4b47      	ldr	r3, [pc, #284]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d0f0      	beq.n	801cb74 <HAL_RCC_OscConfig+0x77c>
 801cb92:	e082      	b.n	801cc9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cb94:	4b43      	ldr	r3, [pc, #268]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	4a42      	ldr	r2, [pc, #264]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cb9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cb9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cba0:	f7fd f812 	bl	8019bc8 <HAL_GetTick>
 801cba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cba6:	e008      	b.n	801cbba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cba8:	f7fd f80e 	bl	8019bc8 <HAL_GetTick>
 801cbac:	4602      	mov	r2, r0
 801cbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbb0:	1ad3      	subs	r3, r2, r3
 801cbb2:	2b02      	cmp	r3, #2
 801cbb4:	d901      	bls.n	801cbba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801cbb6:	2303      	movs	r3, #3
 801cbb8:	e070      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cbba:	4b3a      	ldr	r3, [pc, #232]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d1f0      	bne.n	801cba8 <HAL_RCC_OscConfig+0x7b0>
 801cbc6:	e068      	b.n	801cc9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801cbc8:	4b36      	ldr	r3, [pc, #216]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cbcc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801cbce:	4b35      	ldr	r3, [pc, #212]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cbd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbd8:	2b01      	cmp	r3, #1
 801cbda:	d031      	beq.n	801cc40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cbdc:	693b      	ldr	r3, [r7, #16]
 801cbde:	f003 0203 	and.w	r2, r3, #3
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	d12a      	bne.n	801cc40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cbea:	693b      	ldr	r3, [r7, #16]
 801cbec:	091b      	lsrs	r3, r3, #4
 801cbee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cbf6:	429a      	cmp	r2, r3
 801cbf8:	d122      	bne.n	801cc40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cc04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cc06:	429a      	cmp	r2, r3
 801cc08:	d11a      	bne.n	801cc40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	0a5b      	lsrs	r3, r3, #9
 801cc0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cc18:	429a      	cmp	r2, r3
 801cc1a:	d111      	bne.n	801cc40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	0c1b      	lsrs	r3, r3, #16
 801cc20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cc28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cc2a:	429a      	cmp	r2, r3
 801cc2c:	d108      	bne.n	801cc40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	0e1b      	lsrs	r3, r3, #24
 801cc32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cc3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	d001      	beq.n	801cc44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801cc40:	2301      	movs	r3, #1
 801cc42:	e02b      	b.n	801cc9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801cc44:	4b17      	ldr	r3, [pc, #92]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc48:	08db      	lsrs	r3, r3, #3
 801cc4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cc54:	693a      	ldr	r2, [r7, #16]
 801cc56:	429a      	cmp	r2, r3
 801cc58:	d01f      	beq.n	801cc9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801cc5a:	4b12      	ldr	r3, [pc, #72]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc5e:	4a11      	ldr	r2, [pc, #68]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cc60:	f023 0301 	bic.w	r3, r3, #1
 801cc64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801cc66:	f7fc ffaf 	bl	8019bc8 <HAL_GetTick>
 801cc6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801cc6c:	bf00      	nop
 801cc6e:	f7fc ffab 	bl	8019bc8 <HAL_GetTick>
 801cc72:	4602      	mov	r2, r0
 801cc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc76:	4293      	cmp	r3, r2
 801cc78:	d0f9      	beq.n	801cc6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cc7a:	4b0a      	ldr	r3, [pc, #40]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cc7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cc7e:	4b0a      	ldr	r3, [pc, #40]	@ (801cca8 <HAL_RCC_OscConfig+0x8b0>)
 801cc80:	4013      	ands	r3, r2
 801cc82:	687a      	ldr	r2, [r7, #4]
 801cc84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801cc86:	00d2      	lsls	r2, r2, #3
 801cc88:	4906      	ldr	r1, [pc, #24]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cc8a:	4313      	orrs	r3, r2
 801cc8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801cc8e:	4b05      	ldr	r3, [pc, #20]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc92:	4a04      	ldr	r2, [pc, #16]	@ (801cca4 <HAL_RCC_OscConfig+0x8ac>)
 801cc94:	f043 0301 	orr.w	r3, r3, #1
 801cc98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801cc9a:	2300      	movs	r3, #0
}
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	3730      	adds	r7, #48	@ 0x30
 801cca0:	46bd      	mov	sp, r7
 801cca2:	bd80      	pop	{r7, pc}
 801cca4:	58024400 	.word	0x58024400
 801cca8:	ffff0007 	.word	0xffff0007

0801ccac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ccac:	b580      	push	{r7, lr}
 801ccae:	b086      	sub	sp, #24
 801ccb0:	af00      	add	r7, sp, #0
 801ccb2:	6078      	str	r0, [r7, #4]
 801ccb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d101      	bne.n	801ccc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ccbc:	2301      	movs	r3, #1
 801ccbe:	e19c      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ccc0:	4b8a      	ldr	r3, [pc, #552]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	f003 030f 	and.w	r3, r3, #15
 801ccc8:	683a      	ldr	r2, [r7, #0]
 801ccca:	429a      	cmp	r2, r3
 801cccc:	d910      	bls.n	801ccf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ccce:	4b87      	ldr	r3, [pc, #540]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	f023 020f 	bic.w	r2, r3, #15
 801ccd6:	4985      	ldr	r1, [pc, #532]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801ccd8:	683b      	ldr	r3, [r7, #0]
 801ccda:	4313      	orrs	r3, r2
 801ccdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ccde:	4b83      	ldr	r3, [pc, #524]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	f003 030f 	and.w	r3, r3, #15
 801cce6:	683a      	ldr	r2, [r7, #0]
 801cce8:	429a      	cmp	r2, r3
 801ccea:	d001      	beq.n	801ccf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801ccec:	2301      	movs	r3, #1
 801ccee:	e184      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	f003 0304 	and.w	r3, r3, #4
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d010      	beq.n	801cd1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	691a      	ldr	r2, [r3, #16]
 801cd00:	4b7b      	ldr	r3, [pc, #492]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd02:	699b      	ldr	r3, [r3, #24]
 801cd04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cd08:	429a      	cmp	r2, r3
 801cd0a:	d908      	bls.n	801cd1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cd0c:	4b78      	ldr	r3, [pc, #480]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd0e:	699b      	ldr	r3, [r3, #24]
 801cd10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	691b      	ldr	r3, [r3, #16]
 801cd18:	4975      	ldr	r1, [pc, #468]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd1a:	4313      	orrs	r3, r2
 801cd1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	f003 0308 	and.w	r3, r3, #8
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d010      	beq.n	801cd4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	695a      	ldr	r2, [r3, #20]
 801cd2e:	4b70      	ldr	r3, [pc, #448]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd30:	69db      	ldr	r3, [r3, #28]
 801cd32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cd36:	429a      	cmp	r2, r3
 801cd38:	d908      	bls.n	801cd4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801cd3a:	4b6d      	ldr	r3, [pc, #436]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd3c:	69db      	ldr	r3, [r3, #28]
 801cd3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	695b      	ldr	r3, [r3, #20]
 801cd46:	496a      	ldr	r1, [pc, #424]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd48:	4313      	orrs	r3, r2
 801cd4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	f003 0310 	and.w	r3, r3, #16
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d010      	beq.n	801cd7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	699a      	ldr	r2, [r3, #24]
 801cd5c:	4b64      	ldr	r3, [pc, #400]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd5e:	69db      	ldr	r3, [r3, #28]
 801cd60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cd64:	429a      	cmp	r2, r3
 801cd66:	d908      	bls.n	801cd7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cd68:	4b61      	ldr	r3, [pc, #388]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd6a:	69db      	ldr	r3, [r3, #28]
 801cd6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	699b      	ldr	r3, [r3, #24]
 801cd74:	495e      	ldr	r1, [pc, #376]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd76:	4313      	orrs	r3, r2
 801cd78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	f003 0320 	and.w	r3, r3, #32
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d010      	beq.n	801cda8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	69da      	ldr	r2, [r3, #28]
 801cd8a:	4b59      	ldr	r3, [pc, #356]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd8c:	6a1b      	ldr	r3, [r3, #32]
 801cd8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cd92:	429a      	cmp	r2, r3
 801cd94:	d908      	bls.n	801cda8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cd96:	4b56      	ldr	r3, [pc, #344]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cd98:	6a1b      	ldr	r3, [r3, #32]
 801cd9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	69db      	ldr	r3, [r3, #28]
 801cda2:	4953      	ldr	r1, [pc, #332]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cda4:	4313      	orrs	r3, r2
 801cda6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	f003 0302 	and.w	r3, r3, #2
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d010      	beq.n	801cdd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	68da      	ldr	r2, [r3, #12]
 801cdb8:	4b4d      	ldr	r3, [pc, #308]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cdba:	699b      	ldr	r3, [r3, #24]
 801cdbc:	f003 030f 	and.w	r3, r3, #15
 801cdc0:	429a      	cmp	r2, r3
 801cdc2:	d908      	bls.n	801cdd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cdc4:	4b4a      	ldr	r3, [pc, #296]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cdc6:	699b      	ldr	r3, [r3, #24]
 801cdc8:	f023 020f 	bic.w	r2, r3, #15
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	68db      	ldr	r3, [r3, #12]
 801cdd0:	4947      	ldr	r1, [pc, #284]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cdd2:	4313      	orrs	r3, r2
 801cdd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	f003 0301 	and.w	r3, r3, #1
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d055      	beq.n	801ce8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801cde2:	4b43      	ldr	r3, [pc, #268]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cde4:	699b      	ldr	r3, [r3, #24]
 801cde6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	689b      	ldr	r3, [r3, #8]
 801cdee:	4940      	ldr	r1, [pc, #256]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cdf0:	4313      	orrs	r3, r2
 801cdf2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	685b      	ldr	r3, [r3, #4]
 801cdf8:	2b02      	cmp	r3, #2
 801cdfa:	d107      	bne.n	801ce0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cdfc:	4b3c      	ldr	r3, [pc, #240]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d121      	bne.n	801ce4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ce08:	2301      	movs	r3, #1
 801ce0a:	e0f6      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	685b      	ldr	r3, [r3, #4]
 801ce10:	2b03      	cmp	r3, #3
 801ce12:	d107      	bne.n	801ce24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ce14:	4b36      	ldr	r3, [pc, #216]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d115      	bne.n	801ce4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ce20:	2301      	movs	r3, #1
 801ce22:	e0ea      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	685b      	ldr	r3, [r3, #4]
 801ce28:	2b01      	cmp	r3, #1
 801ce2a:	d107      	bne.n	801ce3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ce2c:	4b30      	ldr	r3, [pc, #192]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d109      	bne.n	801ce4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ce38:	2301      	movs	r3, #1
 801ce3a:	e0de      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ce3c:	4b2c      	ldr	r3, [pc, #176]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	f003 0304 	and.w	r3, r3, #4
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d101      	bne.n	801ce4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ce48:	2301      	movs	r3, #1
 801ce4a:	e0d6      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801ce4c:	4b28      	ldr	r3, [pc, #160]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ce4e:	691b      	ldr	r3, [r3, #16]
 801ce50:	f023 0207 	bic.w	r2, r3, #7
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	685b      	ldr	r3, [r3, #4]
 801ce58:	4925      	ldr	r1, [pc, #148]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ce5a:	4313      	orrs	r3, r2
 801ce5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ce5e:	f7fc feb3 	bl	8019bc8 <HAL_GetTick>
 801ce62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ce64:	e00a      	b.n	801ce7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ce66:	f7fc feaf 	bl	8019bc8 <HAL_GetTick>
 801ce6a:	4602      	mov	r2, r0
 801ce6c:	697b      	ldr	r3, [r7, #20]
 801ce6e:	1ad3      	subs	r3, r2, r3
 801ce70:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ce74:	4293      	cmp	r3, r2
 801ce76:	d901      	bls.n	801ce7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801ce78:	2303      	movs	r3, #3
 801ce7a:	e0be      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ce7c:	4b1c      	ldr	r3, [pc, #112]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ce7e:	691b      	ldr	r3, [r3, #16]
 801ce80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	685b      	ldr	r3, [r3, #4]
 801ce88:	00db      	lsls	r3, r3, #3
 801ce8a:	429a      	cmp	r2, r3
 801ce8c:	d1eb      	bne.n	801ce66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	f003 0302 	and.w	r3, r3, #2
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d010      	beq.n	801cebc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	68da      	ldr	r2, [r3, #12]
 801ce9e:	4b14      	ldr	r3, [pc, #80]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801cea0:	699b      	ldr	r3, [r3, #24]
 801cea2:	f003 030f 	and.w	r3, r3, #15
 801cea6:	429a      	cmp	r2, r3
 801cea8:	d208      	bcs.n	801cebc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ceaa:	4b11      	ldr	r3, [pc, #68]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ceac:	699b      	ldr	r3, [r3, #24]
 801ceae:	f023 020f 	bic.w	r2, r3, #15
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	68db      	ldr	r3, [r3, #12]
 801ceb6:	490e      	ldr	r1, [pc, #56]	@ (801cef0 <HAL_RCC_ClockConfig+0x244>)
 801ceb8:	4313      	orrs	r3, r2
 801ceba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cebc:	4b0b      	ldr	r3, [pc, #44]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	f003 030f 	and.w	r3, r3, #15
 801cec4:	683a      	ldr	r2, [r7, #0]
 801cec6:	429a      	cmp	r2, r3
 801cec8:	d214      	bcs.n	801cef4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ceca:	4b08      	ldr	r3, [pc, #32]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	f023 020f 	bic.w	r2, r3, #15
 801ced2:	4906      	ldr	r1, [pc, #24]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801ced4:	683b      	ldr	r3, [r7, #0]
 801ced6:	4313      	orrs	r3, r2
 801ced8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ceda:	4b04      	ldr	r3, [pc, #16]	@ (801ceec <HAL_RCC_ClockConfig+0x240>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	f003 030f 	and.w	r3, r3, #15
 801cee2:	683a      	ldr	r2, [r7, #0]
 801cee4:	429a      	cmp	r2, r3
 801cee6:	d005      	beq.n	801cef4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801cee8:	2301      	movs	r3, #1
 801ceea:	e086      	b.n	801cffa <HAL_RCC_ClockConfig+0x34e>
 801ceec:	52002000 	.word	0x52002000
 801cef0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	f003 0304 	and.w	r3, r3, #4
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d010      	beq.n	801cf22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	691a      	ldr	r2, [r3, #16]
 801cf04:	4b3f      	ldr	r3, [pc, #252]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf06:	699b      	ldr	r3, [r3, #24]
 801cf08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cf0c:	429a      	cmp	r2, r3
 801cf0e:	d208      	bcs.n	801cf22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cf10:	4b3c      	ldr	r3, [pc, #240]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf12:	699b      	ldr	r3, [r3, #24]
 801cf14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	691b      	ldr	r3, [r3, #16]
 801cf1c:	4939      	ldr	r1, [pc, #228]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf1e:	4313      	orrs	r3, r2
 801cf20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	f003 0308 	and.w	r3, r3, #8
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d010      	beq.n	801cf50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	695a      	ldr	r2, [r3, #20]
 801cf32:	4b34      	ldr	r3, [pc, #208]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf34:	69db      	ldr	r3, [r3, #28]
 801cf36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cf3a:	429a      	cmp	r2, r3
 801cf3c:	d208      	bcs.n	801cf50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801cf3e:	4b31      	ldr	r3, [pc, #196]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf40:	69db      	ldr	r3, [r3, #28]
 801cf42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	695b      	ldr	r3, [r3, #20]
 801cf4a:	492e      	ldr	r1, [pc, #184]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf4c:	4313      	orrs	r3, r2
 801cf4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	f003 0310 	and.w	r3, r3, #16
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d010      	beq.n	801cf7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	699a      	ldr	r2, [r3, #24]
 801cf60:	4b28      	ldr	r3, [pc, #160]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf62:	69db      	ldr	r3, [r3, #28]
 801cf64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cf68:	429a      	cmp	r2, r3
 801cf6a:	d208      	bcs.n	801cf7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cf6c:	4b25      	ldr	r3, [pc, #148]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf6e:	69db      	ldr	r3, [r3, #28]
 801cf70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	699b      	ldr	r3, [r3, #24]
 801cf78:	4922      	ldr	r1, [pc, #136]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf7a:	4313      	orrs	r3, r2
 801cf7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	f003 0320 	and.w	r3, r3, #32
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	d010      	beq.n	801cfac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	69da      	ldr	r2, [r3, #28]
 801cf8e:	4b1d      	ldr	r3, [pc, #116]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf90:	6a1b      	ldr	r3, [r3, #32]
 801cf92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cf96:	429a      	cmp	r2, r3
 801cf98:	d208      	bcs.n	801cfac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cf9a:	4b1a      	ldr	r3, [pc, #104]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cf9c:	6a1b      	ldr	r3, [r3, #32]
 801cf9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	69db      	ldr	r3, [r3, #28]
 801cfa6:	4917      	ldr	r1, [pc, #92]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cfa8:	4313      	orrs	r3, r2
 801cfaa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801cfac:	f000 f834 	bl	801d018 <HAL_RCC_GetSysClockFreq>
 801cfb0:	4602      	mov	r2, r0
 801cfb2:	4b14      	ldr	r3, [pc, #80]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cfb4:	699b      	ldr	r3, [r3, #24]
 801cfb6:	0a1b      	lsrs	r3, r3, #8
 801cfb8:	f003 030f 	and.w	r3, r3, #15
 801cfbc:	4912      	ldr	r1, [pc, #72]	@ (801d008 <HAL_RCC_ClockConfig+0x35c>)
 801cfbe:	5ccb      	ldrb	r3, [r1, r3]
 801cfc0:	f003 031f 	and.w	r3, r3, #31
 801cfc4:	fa22 f303 	lsr.w	r3, r2, r3
 801cfc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cfca:	4b0e      	ldr	r3, [pc, #56]	@ (801d004 <HAL_RCC_ClockConfig+0x358>)
 801cfcc:	699b      	ldr	r3, [r3, #24]
 801cfce:	f003 030f 	and.w	r3, r3, #15
 801cfd2:	4a0d      	ldr	r2, [pc, #52]	@ (801d008 <HAL_RCC_ClockConfig+0x35c>)
 801cfd4:	5cd3      	ldrb	r3, [r2, r3]
 801cfd6:	f003 031f 	and.w	r3, r3, #31
 801cfda:	693a      	ldr	r2, [r7, #16]
 801cfdc:	fa22 f303 	lsr.w	r3, r2, r3
 801cfe0:	4a0a      	ldr	r2, [pc, #40]	@ (801d00c <HAL_RCC_ClockConfig+0x360>)
 801cfe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801cfe4:	4a0a      	ldr	r2, [pc, #40]	@ (801d010 <HAL_RCC_ClockConfig+0x364>)
 801cfe6:	693b      	ldr	r3, [r7, #16]
 801cfe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801cfea:	4b0a      	ldr	r3, [pc, #40]	@ (801d014 <HAL_RCC_ClockConfig+0x368>)
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	4618      	mov	r0, r3
 801cff0:	f7fc fda0 	bl	8019b34 <HAL_InitTick>
 801cff4:	4603      	mov	r3, r0
 801cff6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801cff8:	7bfb      	ldrb	r3, [r7, #15]
}
 801cffa:	4618      	mov	r0, r3
 801cffc:	3718      	adds	r7, #24
 801cffe:	46bd      	mov	sp, r7
 801d000:	bd80      	pop	{r7, pc}
 801d002:	bf00      	nop
 801d004:	58024400 	.word	0x58024400
 801d008:	0802724c 	.word	0x0802724c
 801d00c:	20000004 	.word	0x20000004
 801d010:	20000000 	.word	0x20000000
 801d014:	20000020 	.word	0x20000020

0801d018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d018:	b480      	push	{r7}
 801d01a:	b089      	sub	sp, #36	@ 0x24
 801d01c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d01e:	4bb3      	ldr	r3, [pc, #716]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d020:	691b      	ldr	r3, [r3, #16]
 801d022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d026:	2b18      	cmp	r3, #24
 801d028:	f200 8155 	bhi.w	801d2d6 <HAL_RCC_GetSysClockFreq+0x2be>
 801d02c:	a201      	add	r2, pc, #4	@ (adr r2, 801d034 <HAL_RCC_GetSysClockFreq+0x1c>)
 801d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d032:	bf00      	nop
 801d034:	0801d099 	.word	0x0801d099
 801d038:	0801d2d7 	.word	0x0801d2d7
 801d03c:	0801d2d7 	.word	0x0801d2d7
 801d040:	0801d2d7 	.word	0x0801d2d7
 801d044:	0801d2d7 	.word	0x0801d2d7
 801d048:	0801d2d7 	.word	0x0801d2d7
 801d04c:	0801d2d7 	.word	0x0801d2d7
 801d050:	0801d2d7 	.word	0x0801d2d7
 801d054:	0801d0bf 	.word	0x0801d0bf
 801d058:	0801d2d7 	.word	0x0801d2d7
 801d05c:	0801d2d7 	.word	0x0801d2d7
 801d060:	0801d2d7 	.word	0x0801d2d7
 801d064:	0801d2d7 	.word	0x0801d2d7
 801d068:	0801d2d7 	.word	0x0801d2d7
 801d06c:	0801d2d7 	.word	0x0801d2d7
 801d070:	0801d2d7 	.word	0x0801d2d7
 801d074:	0801d0c5 	.word	0x0801d0c5
 801d078:	0801d2d7 	.word	0x0801d2d7
 801d07c:	0801d2d7 	.word	0x0801d2d7
 801d080:	0801d2d7 	.word	0x0801d2d7
 801d084:	0801d2d7 	.word	0x0801d2d7
 801d088:	0801d2d7 	.word	0x0801d2d7
 801d08c:	0801d2d7 	.word	0x0801d2d7
 801d090:	0801d2d7 	.word	0x0801d2d7
 801d094:	0801d0cb 	.word	0x0801d0cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d098:	4b94      	ldr	r3, [pc, #592]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	f003 0320 	and.w	r3, r3, #32
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d009      	beq.n	801d0b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d0a4:	4b91      	ldr	r3, [pc, #580]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	08db      	lsrs	r3, r3, #3
 801d0aa:	f003 0303 	and.w	r3, r3, #3
 801d0ae:	4a90      	ldr	r2, [pc, #576]	@ (801d2f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d0b0:	fa22 f303 	lsr.w	r3, r2, r3
 801d0b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801d0b6:	e111      	b.n	801d2dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801d0b8:	4b8d      	ldr	r3, [pc, #564]	@ (801d2f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d0ba:	61bb      	str	r3, [r7, #24]
      break;
 801d0bc:	e10e      	b.n	801d2dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801d0be:	4b8d      	ldr	r3, [pc, #564]	@ (801d2f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d0c0:	61bb      	str	r3, [r7, #24]
      break;
 801d0c2:	e10b      	b.n	801d2dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801d0c4:	4b8c      	ldr	r3, [pc, #560]	@ (801d2f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801d0c6:	61bb      	str	r3, [r7, #24]
      break;
 801d0c8:	e108      	b.n	801d2dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d0ca:	4b88      	ldr	r3, [pc, #544]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d0ce:	f003 0303 	and.w	r3, r3, #3
 801d0d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801d0d4:	4b85      	ldr	r3, [pc, #532]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d0d8:	091b      	lsrs	r3, r3, #4
 801d0da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d0de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801d0e0:	4b82      	ldr	r3, [pc, #520]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0e4:	f003 0301 	and.w	r3, r3, #1
 801d0e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d0ea:	4b80      	ldr	r3, [pc, #512]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d0ee:	08db      	lsrs	r3, r3, #3
 801d0f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d0f4:	68fa      	ldr	r2, [r7, #12]
 801d0f6:	fb02 f303 	mul.w	r3, r2, r3
 801d0fa:	ee07 3a90 	vmov	s15, r3
 801d0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d102:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801d106:	693b      	ldr	r3, [r7, #16]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	f000 80e1 	beq.w	801d2d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 801d10e:	697b      	ldr	r3, [r7, #20]
 801d110:	2b02      	cmp	r3, #2
 801d112:	f000 8083 	beq.w	801d21c <HAL_RCC_GetSysClockFreq+0x204>
 801d116:	697b      	ldr	r3, [r7, #20]
 801d118:	2b02      	cmp	r3, #2
 801d11a:	f200 80a1 	bhi.w	801d260 <HAL_RCC_GetSysClockFreq+0x248>
 801d11e:	697b      	ldr	r3, [r7, #20]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d003      	beq.n	801d12c <HAL_RCC_GetSysClockFreq+0x114>
 801d124:	697b      	ldr	r3, [r7, #20]
 801d126:	2b01      	cmp	r3, #1
 801d128:	d056      	beq.n	801d1d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 801d12a:	e099      	b.n	801d260 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d12c:	4b6f      	ldr	r3, [pc, #444]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	f003 0320 	and.w	r3, r3, #32
 801d134:	2b00      	cmp	r3, #0
 801d136:	d02d      	beq.n	801d194 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d138:	4b6c      	ldr	r3, [pc, #432]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	08db      	lsrs	r3, r3, #3
 801d13e:	f003 0303 	and.w	r3, r3, #3
 801d142:	4a6b      	ldr	r2, [pc, #428]	@ (801d2f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d144:	fa22 f303 	lsr.w	r3, r2, r3
 801d148:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	ee07 3a90 	vmov	s15, r3
 801d150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d154:	693b      	ldr	r3, [r7, #16]
 801d156:	ee07 3a90 	vmov	s15, r3
 801d15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d162:	4b62      	ldr	r3, [pc, #392]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d16a:	ee07 3a90 	vmov	s15, r3
 801d16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d172:	ed97 6a02 	vldr	s12, [r7, #8]
 801d176:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801d2fc <HAL_RCC_GetSysClockFreq+0x2e4>
 801d17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d18e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801d192:	e087      	b.n	801d2a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d194:	693b      	ldr	r3, [r7, #16]
 801d196:	ee07 3a90 	vmov	s15, r3
 801d19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d19e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801d300 <HAL_RCC_GetSysClockFreq+0x2e8>
 801d1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d1a6:	4b51      	ldr	r3, [pc, #324]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1ae:	ee07 3a90 	vmov	s15, r3
 801d1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1b6:	ed97 6a02 	vldr	s12, [r7, #8]
 801d1ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801d2fc <HAL_RCC_GetSysClockFreq+0x2e4>
 801d1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d1c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d1d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d1d6:	e065      	b.n	801d2a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d1d8:	693b      	ldr	r3, [r7, #16]
 801d1da:	ee07 3a90 	vmov	s15, r3
 801d1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d1e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801d304 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d1ea:	4b40      	ldr	r3, [pc, #256]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1f2:	ee07 3a90 	vmov	s15, r3
 801d1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1fa:	ed97 6a02 	vldr	s12, [r7, #8]
 801d1fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d2fc <HAL_RCC_GetSysClockFreq+0x2e4>
 801d202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d20a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d212:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d21a:	e043      	b.n	801d2a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d21c:	693b      	ldr	r3, [r7, #16]
 801d21e:	ee07 3a90 	vmov	s15, r3
 801d222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d226:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801d308 <HAL_RCC_GetSysClockFreq+0x2f0>
 801d22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d22e:	4b2f      	ldr	r3, [pc, #188]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d236:	ee07 3a90 	vmov	s15, r3
 801d23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d23e:	ed97 6a02 	vldr	s12, [r7, #8]
 801d242:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801d2fc <HAL_RCC_GetSysClockFreq+0x2e4>
 801d246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d24e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d256:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d25a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d25e:	e021      	b.n	801d2a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d260:	693b      	ldr	r3, [r7, #16]
 801d262:	ee07 3a90 	vmov	s15, r3
 801d266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d26a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801d304 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d272:	4b1e      	ldr	r3, [pc, #120]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d27a:	ee07 3a90 	vmov	s15, r3
 801d27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d282:	ed97 6a02 	vldr	s12, [r7, #8]
 801d286:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801d2fc <HAL_RCC_GetSysClockFreq+0x2e4>
 801d28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d29e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d2a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801d2a4:	4b11      	ldr	r3, [pc, #68]	@ (801d2ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d2a8:	0a5b      	lsrs	r3, r3, #9
 801d2aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d2ae:	3301      	adds	r3, #1
 801d2b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	ee07 3a90 	vmov	s15, r3
 801d2b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 801d2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d2c8:	ee17 3a90 	vmov	r3, s15
 801d2cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801d2ce:	e005      	b.n	801d2dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	61bb      	str	r3, [r7, #24]
      break;
 801d2d4:	e002      	b.n	801d2dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801d2d6:	4b07      	ldr	r3, [pc, #28]	@ (801d2f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d2d8:	61bb      	str	r3, [r7, #24]
      break;
 801d2da:	bf00      	nop
  }

  return sysclockfreq;
 801d2dc:	69bb      	ldr	r3, [r7, #24]
}
 801d2de:	4618      	mov	r0, r3
 801d2e0:	3724      	adds	r7, #36	@ 0x24
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2e8:	4770      	bx	lr
 801d2ea:	bf00      	nop
 801d2ec:	58024400 	.word	0x58024400
 801d2f0:	03d09000 	.word	0x03d09000
 801d2f4:	003d0900 	.word	0x003d0900
 801d2f8:	017d7840 	.word	0x017d7840
 801d2fc:	46000000 	.word	0x46000000
 801d300:	4c742400 	.word	0x4c742400
 801d304:	4a742400 	.word	0x4a742400
 801d308:	4bbebc20 	.word	0x4bbebc20

0801d30c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801d312:	f7ff fe81 	bl	801d018 <HAL_RCC_GetSysClockFreq>
 801d316:	4602      	mov	r2, r0
 801d318:	4b10      	ldr	r3, [pc, #64]	@ (801d35c <HAL_RCC_GetHCLKFreq+0x50>)
 801d31a:	699b      	ldr	r3, [r3, #24]
 801d31c:	0a1b      	lsrs	r3, r3, #8
 801d31e:	f003 030f 	and.w	r3, r3, #15
 801d322:	490f      	ldr	r1, [pc, #60]	@ (801d360 <HAL_RCC_GetHCLKFreq+0x54>)
 801d324:	5ccb      	ldrb	r3, [r1, r3]
 801d326:	f003 031f 	and.w	r3, r3, #31
 801d32a:	fa22 f303 	lsr.w	r3, r2, r3
 801d32e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d330:	4b0a      	ldr	r3, [pc, #40]	@ (801d35c <HAL_RCC_GetHCLKFreq+0x50>)
 801d332:	699b      	ldr	r3, [r3, #24]
 801d334:	f003 030f 	and.w	r3, r3, #15
 801d338:	4a09      	ldr	r2, [pc, #36]	@ (801d360 <HAL_RCC_GetHCLKFreq+0x54>)
 801d33a:	5cd3      	ldrb	r3, [r2, r3]
 801d33c:	f003 031f 	and.w	r3, r3, #31
 801d340:	687a      	ldr	r2, [r7, #4]
 801d342:	fa22 f303 	lsr.w	r3, r2, r3
 801d346:	4a07      	ldr	r2, [pc, #28]	@ (801d364 <HAL_RCC_GetHCLKFreq+0x58>)
 801d348:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d34a:	4a07      	ldr	r2, [pc, #28]	@ (801d368 <HAL_RCC_GetHCLKFreq+0x5c>)
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d350:	4b04      	ldr	r3, [pc, #16]	@ (801d364 <HAL_RCC_GetHCLKFreq+0x58>)
 801d352:	681b      	ldr	r3, [r3, #0]
}
 801d354:	4618      	mov	r0, r3
 801d356:	3708      	adds	r7, #8
 801d358:	46bd      	mov	sp, r7
 801d35a:	bd80      	pop	{r7, pc}
 801d35c:	58024400 	.word	0x58024400
 801d360:	0802724c 	.word	0x0802724c
 801d364:	20000004 	.word	0x20000004
 801d368:	20000000 	.word	0x20000000

0801d36c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d36c:	b580      	push	{r7, lr}
 801d36e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d370:	f7ff ffcc 	bl	801d30c <HAL_RCC_GetHCLKFreq>
 801d374:	4602      	mov	r2, r0
 801d376:	4b06      	ldr	r3, [pc, #24]	@ (801d390 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d378:	69db      	ldr	r3, [r3, #28]
 801d37a:	091b      	lsrs	r3, r3, #4
 801d37c:	f003 0307 	and.w	r3, r3, #7
 801d380:	4904      	ldr	r1, [pc, #16]	@ (801d394 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d382:	5ccb      	ldrb	r3, [r1, r3]
 801d384:	f003 031f 	and.w	r3, r3, #31
 801d388:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d38c:	4618      	mov	r0, r3
 801d38e:	bd80      	pop	{r7, pc}
 801d390:	58024400 	.word	0x58024400
 801d394:	0802724c 	.word	0x0802724c

0801d398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d398:	b580      	push	{r7, lr}
 801d39a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d39c:	f7ff ffb6 	bl	801d30c <HAL_RCC_GetHCLKFreq>
 801d3a0:	4602      	mov	r2, r0
 801d3a2:	4b06      	ldr	r3, [pc, #24]	@ (801d3bc <HAL_RCC_GetPCLK2Freq+0x24>)
 801d3a4:	69db      	ldr	r3, [r3, #28]
 801d3a6:	0a1b      	lsrs	r3, r3, #8
 801d3a8:	f003 0307 	and.w	r3, r3, #7
 801d3ac:	4904      	ldr	r1, [pc, #16]	@ (801d3c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d3ae:	5ccb      	ldrb	r3, [r1, r3]
 801d3b0:	f003 031f 	and.w	r3, r3, #31
 801d3b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d3b8:	4618      	mov	r0, r3
 801d3ba:	bd80      	pop	{r7, pc}
 801d3bc:	58024400 	.word	0x58024400
 801d3c0:	0802724c 	.word	0x0802724c

0801d3c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d3c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d3c8:	b0ca      	sub	sp, #296	@ 0x128
 801d3ca:	af00      	add	r7, sp, #0
 801d3cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d3d6:	2300      	movs	r3, #0
 801d3d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d3e8:	2500      	movs	r5, #0
 801d3ea:	ea54 0305 	orrs.w	r3, r4, r5
 801d3ee:	d049      	beq.n	801d484 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d3f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d3fa:	d02f      	beq.n	801d45c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d3fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d400:	d828      	bhi.n	801d454 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d406:	d01a      	beq.n	801d43e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d408:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d40c:	d822      	bhi.n	801d454 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d003      	beq.n	801d41a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d416:	d007      	beq.n	801d428 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d418:	e01c      	b.n	801d454 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d41a:	4bb8      	ldr	r3, [pc, #736]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d41e:	4ab7      	ldr	r2, [pc, #732]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d426:	e01a      	b.n	801d45e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d42c:	3308      	adds	r3, #8
 801d42e:	2102      	movs	r1, #2
 801d430:	4618      	mov	r0, r3
 801d432:	f001 fc8f 	bl	801ed54 <RCCEx_PLL2_Config>
 801d436:	4603      	mov	r3, r0
 801d438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d43c:	e00f      	b.n	801d45e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d442:	3328      	adds	r3, #40	@ 0x28
 801d444:	2102      	movs	r1, #2
 801d446:	4618      	mov	r0, r3
 801d448:	f001 fd36 	bl	801eeb8 <RCCEx_PLL3_Config>
 801d44c:	4603      	mov	r3, r0
 801d44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d452:	e004      	b.n	801d45e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d454:	2301      	movs	r3, #1
 801d456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d45a:	e000      	b.n	801d45e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d462:	2b00      	cmp	r3, #0
 801d464:	d10a      	bne.n	801d47c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d466:	4ba5      	ldr	r3, [pc, #660]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d46a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d474:	4aa1      	ldr	r2, [pc, #644]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d476:	430b      	orrs	r3, r1
 801d478:	6513      	str	r3, [r2, #80]	@ 0x50
 801d47a:	e003      	b.n	801d484 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d47c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d48c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d490:	f04f 0900 	mov.w	r9, #0
 801d494:	ea58 0309 	orrs.w	r3, r8, r9
 801d498:	d047      	beq.n	801d52a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d49e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d4a0:	2b04      	cmp	r3, #4
 801d4a2:	d82a      	bhi.n	801d4fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d4a4:	a201      	add	r2, pc, #4	@ (adr r2, 801d4ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d4aa:	bf00      	nop
 801d4ac:	0801d4c1 	.word	0x0801d4c1
 801d4b0:	0801d4cf 	.word	0x0801d4cf
 801d4b4:	0801d4e5 	.word	0x0801d4e5
 801d4b8:	0801d503 	.word	0x0801d503
 801d4bc:	0801d503 	.word	0x0801d503
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d4c0:	4b8e      	ldr	r3, [pc, #568]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d4c4:	4a8d      	ldr	r2, [pc, #564]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d4c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d4ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d4cc:	e01a      	b.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4d2:	3308      	adds	r3, #8
 801d4d4:	2100      	movs	r1, #0
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	f001 fc3c 	bl	801ed54 <RCCEx_PLL2_Config>
 801d4dc:	4603      	mov	r3, r0
 801d4de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d4e2:	e00f      	b.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4e8:	3328      	adds	r3, #40	@ 0x28
 801d4ea:	2100      	movs	r1, #0
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	f001 fce3 	bl	801eeb8 <RCCEx_PLL3_Config>
 801d4f2:	4603      	mov	r3, r0
 801d4f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d4f8:	e004      	b.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d4fa:	2301      	movs	r3, #1
 801d4fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d500:	e000      	b.n	801d504 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d502:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d10a      	bne.n	801d522 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d50c:	4b7b      	ldr	r3, [pc, #492]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d50e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d510:	f023 0107 	bic.w	r1, r3, #7
 801d514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d51a:	4a78      	ldr	r2, [pc, #480]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d51c:	430b      	orrs	r3, r1
 801d51e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d520:	e003      	b.n	801d52a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d532:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d536:	f04f 0b00 	mov.w	fp, #0
 801d53a:	ea5a 030b 	orrs.w	r3, sl, fp
 801d53e:	d04c      	beq.n	801d5da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d54a:	d030      	beq.n	801d5ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d54c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d550:	d829      	bhi.n	801d5a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d552:	2bc0      	cmp	r3, #192	@ 0xc0
 801d554:	d02d      	beq.n	801d5b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d556:	2bc0      	cmp	r3, #192	@ 0xc0
 801d558:	d825      	bhi.n	801d5a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d55a:	2b80      	cmp	r3, #128	@ 0x80
 801d55c:	d018      	beq.n	801d590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d55e:	2b80      	cmp	r3, #128	@ 0x80
 801d560:	d821      	bhi.n	801d5a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d562:	2b00      	cmp	r3, #0
 801d564:	d002      	beq.n	801d56c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d566:	2b40      	cmp	r3, #64	@ 0x40
 801d568:	d007      	beq.n	801d57a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d56a:	e01c      	b.n	801d5a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d56c:	4b63      	ldr	r3, [pc, #396]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d570:	4a62      	ldr	r2, [pc, #392]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d578:	e01c      	b.n	801d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d57e:	3308      	adds	r3, #8
 801d580:	2100      	movs	r1, #0
 801d582:	4618      	mov	r0, r3
 801d584:	f001 fbe6 	bl	801ed54 <RCCEx_PLL2_Config>
 801d588:	4603      	mov	r3, r0
 801d58a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d58e:	e011      	b.n	801d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d594:	3328      	adds	r3, #40	@ 0x28
 801d596:	2100      	movs	r1, #0
 801d598:	4618      	mov	r0, r3
 801d59a:	f001 fc8d 	bl	801eeb8 <RCCEx_PLL3_Config>
 801d59e:	4603      	mov	r3, r0
 801d5a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d5a4:	e006      	b.n	801d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d5a6:	2301      	movs	r3, #1
 801d5a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d5ac:	e002      	b.n	801d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d5ae:	bf00      	nop
 801d5b0:	e000      	b.n	801d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d5b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d5b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d10a      	bne.n	801d5d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d5bc:	4b4f      	ldr	r3, [pc, #316]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d5be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d5c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d5ca:	4a4c      	ldr	r2, [pc, #304]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d5cc:	430b      	orrs	r3, r1
 801d5ce:	6513      	str	r3, [r2, #80]	@ 0x50
 801d5d0:	e003      	b.n	801d5da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d5e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d5f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d5f4:	460b      	mov	r3, r1
 801d5f6:	4313      	orrs	r3, r2
 801d5f8:	d053      	beq.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d602:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d606:	d035      	beq.n	801d674 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d608:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d60c:	d82e      	bhi.n	801d66c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d60e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d612:	d031      	beq.n	801d678 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d614:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d618:	d828      	bhi.n	801d66c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d61a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d61e:	d01a      	beq.n	801d656 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d624:	d822      	bhi.n	801d66c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d626:	2b00      	cmp	r3, #0
 801d628:	d003      	beq.n	801d632 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d62a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d62e:	d007      	beq.n	801d640 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d630:	e01c      	b.n	801d66c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d632:	4b32      	ldr	r3, [pc, #200]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d636:	4a31      	ldr	r2, [pc, #196]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d63c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d63e:	e01c      	b.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d644:	3308      	adds	r3, #8
 801d646:	2100      	movs	r1, #0
 801d648:	4618      	mov	r0, r3
 801d64a:	f001 fb83 	bl	801ed54 <RCCEx_PLL2_Config>
 801d64e:	4603      	mov	r3, r0
 801d650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d654:	e011      	b.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d65a:	3328      	adds	r3, #40	@ 0x28
 801d65c:	2100      	movs	r1, #0
 801d65e:	4618      	mov	r0, r3
 801d660:	f001 fc2a 	bl	801eeb8 <RCCEx_PLL3_Config>
 801d664:	4603      	mov	r3, r0
 801d666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d66a:	e006      	b.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d66c:	2301      	movs	r3, #1
 801d66e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d672:	e002      	b.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d674:	bf00      	nop
 801d676:	e000      	b.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d678:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d67a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d10b      	bne.n	801d69a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d682:	4b1e      	ldr	r3, [pc, #120]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d686:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d68e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d692:	4a1a      	ldr	r2, [pc, #104]	@ (801d6fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d694:	430b      	orrs	r3, r1
 801d696:	6593      	str	r3, [r2, #88]	@ 0x58
 801d698:	e003      	b.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d69a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d69e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d6ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d6b2:	2300      	movs	r3, #0
 801d6b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d6b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d6bc:	460b      	mov	r3, r1
 801d6be:	4313      	orrs	r3, r2
 801d6c0:	d056      	beq.n	801d770 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d6ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d6ce:	d038      	beq.n	801d742 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d6d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d6d4:	d831      	bhi.n	801d73a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d6d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d6da:	d034      	beq.n	801d746 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d6dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d6e0:	d82b      	bhi.n	801d73a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d6e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d6e6:	d01d      	beq.n	801d724 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d6e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d6ec:	d825      	bhi.n	801d73a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d006      	beq.n	801d700 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d6f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d6f6:	d00a      	beq.n	801d70e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d6f8:	e01f      	b.n	801d73a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d6fa:	bf00      	nop
 801d6fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d700:	4ba2      	ldr	r3, [pc, #648]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d704:	4aa1      	ldr	r2, [pc, #644]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d70a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d70c:	e01c      	b.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d712:	3308      	adds	r3, #8
 801d714:	2100      	movs	r1, #0
 801d716:	4618      	mov	r0, r3
 801d718:	f001 fb1c 	bl	801ed54 <RCCEx_PLL2_Config>
 801d71c:	4603      	mov	r3, r0
 801d71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d722:	e011      	b.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d728:	3328      	adds	r3, #40	@ 0x28
 801d72a:	2100      	movs	r1, #0
 801d72c:	4618      	mov	r0, r3
 801d72e:	f001 fbc3 	bl	801eeb8 <RCCEx_PLL3_Config>
 801d732:	4603      	mov	r3, r0
 801d734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d738:	e006      	b.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d73a:	2301      	movs	r3, #1
 801d73c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d740:	e002      	b.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d742:	bf00      	nop
 801d744:	e000      	b.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d746:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d10b      	bne.n	801d768 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d750:	4b8e      	ldr	r3, [pc, #568]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d754:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d75c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d760:	4a8a      	ldr	r2, [pc, #552]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d762:	430b      	orrs	r3, r1
 801d764:	6593      	str	r3, [r2, #88]	@ 0x58
 801d766:	e003      	b.n	801d770 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d76c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d778:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d77c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d780:	2300      	movs	r3, #0
 801d782:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d786:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d78a:	460b      	mov	r3, r1
 801d78c:	4313      	orrs	r3, r2
 801d78e:	d03a      	beq.n	801d806 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d796:	2b30      	cmp	r3, #48	@ 0x30
 801d798:	d01f      	beq.n	801d7da <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d79a:	2b30      	cmp	r3, #48	@ 0x30
 801d79c:	d819      	bhi.n	801d7d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d79e:	2b20      	cmp	r3, #32
 801d7a0:	d00c      	beq.n	801d7bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d7a2:	2b20      	cmp	r3, #32
 801d7a4:	d815      	bhi.n	801d7d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d019      	beq.n	801d7de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d7aa:	2b10      	cmp	r3, #16
 801d7ac:	d111      	bne.n	801d7d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d7ae:	4b77      	ldr	r3, [pc, #476]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7b2:	4a76      	ldr	r2, [pc, #472]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d7b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d7ba:	e011      	b.n	801d7e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7c0:	3308      	adds	r3, #8
 801d7c2:	2102      	movs	r1, #2
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	f001 fac5 	bl	801ed54 <RCCEx_PLL2_Config>
 801d7ca:	4603      	mov	r3, r0
 801d7cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d7d0:	e006      	b.n	801d7e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d7d2:	2301      	movs	r3, #1
 801d7d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d7d8:	e002      	b.n	801d7e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d7da:	bf00      	nop
 801d7dc:	e000      	b.n	801d7e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d7de:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d10a      	bne.n	801d7fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d7e8:	4b68      	ldr	r3, [pc, #416]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d7ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d7f6:	4a65      	ldr	r2, [pc, #404]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7f8:	430b      	orrs	r3, r1
 801d7fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d7fc:	e003      	b.n	801d806 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d7fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d80e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d812:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d816:	2300      	movs	r3, #0
 801d818:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d81c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d820:	460b      	mov	r3, r1
 801d822:	4313      	orrs	r3, r2
 801d824:	d051      	beq.n	801d8ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d82a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d82c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d830:	d035      	beq.n	801d89e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d836:	d82e      	bhi.n	801d896 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d83c:	d031      	beq.n	801d8a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d83e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d842:	d828      	bhi.n	801d896 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d848:	d01a      	beq.n	801d880 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d84a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d84e:	d822      	bhi.n	801d896 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d850:	2b00      	cmp	r3, #0
 801d852:	d003      	beq.n	801d85c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d858:	d007      	beq.n	801d86a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d85a:	e01c      	b.n	801d896 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d85c:	4b4b      	ldr	r3, [pc, #300]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d860:	4a4a      	ldr	r2, [pc, #296]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d868:	e01c      	b.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d86e:	3308      	adds	r3, #8
 801d870:	2100      	movs	r1, #0
 801d872:	4618      	mov	r0, r3
 801d874:	f001 fa6e 	bl	801ed54 <RCCEx_PLL2_Config>
 801d878:	4603      	mov	r3, r0
 801d87a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d87e:	e011      	b.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d884:	3328      	adds	r3, #40	@ 0x28
 801d886:	2100      	movs	r1, #0
 801d888:	4618      	mov	r0, r3
 801d88a:	f001 fb15 	bl	801eeb8 <RCCEx_PLL3_Config>
 801d88e:	4603      	mov	r3, r0
 801d890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d894:	e006      	b.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d896:	2301      	movs	r3, #1
 801d898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d89c:	e002      	b.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d89e:	bf00      	nop
 801d8a0:	e000      	b.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d8a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	d10a      	bne.n	801d8c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801d8ac:	4b37      	ldr	r3, [pc, #220]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d8ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d8b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801d8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d8ba:	4a34      	ldr	r2, [pc, #208]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d8bc:	430b      	orrs	r3, r1
 801d8be:	6513      	str	r3, [r2, #80]	@ 0x50
 801d8c0:	e003      	b.n	801d8ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801d8d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d8da:	2300      	movs	r3, #0
 801d8dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801d8e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801d8e4:	460b      	mov	r3, r1
 801d8e6:	4313      	orrs	r3, r2
 801d8e8:	d056      	beq.n	801d998 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801d8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d8f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d8f4:	d033      	beq.n	801d95e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d8f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d8fa:	d82c      	bhi.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d8fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d900:	d02f      	beq.n	801d962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d902:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d906:	d826      	bhi.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d908:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d90c:	d02b      	beq.n	801d966 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d90e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d912:	d820      	bhi.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d918:	d012      	beq.n	801d940 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d91a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d91e:	d81a      	bhi.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d920:	2b00      	cmp	r3, #0
 801d922:	d022      	beq.n	801d96a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d928:	d115      	bne.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d92e:	3308      	adds	r3, #8
 801d930:	2101      	movs	r1, #1
 801d932:	4618      	mov	r0, r3
 801d934:	f001 fa0e 	bl	801ed54 <RCCEx_PLL2_Config>
 801d938:	4603      	mov	r3, r0
 801d93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d93e:	e015      	b.n	801d96c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d944:	3328      	adds	r3, #40	@ 0x28
 801d946:	2101      	movs	r1, #1
 801d948:	4618      	mov	r0, r3
 801d94a:	f001 fab5 	bl	801eeb8 <RCCEx_PLL3_Config>
 801d94e:	4603      	mov	r3, r0
 801d950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d954:	e00a      	b.n	801d96c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d956:	2301      	movs	r3, #1
 801d958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d95c:	e006      	b.n	801d96c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d95e:	bf00      	nop
 801d960:	e004      	b.n	801d96c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d962:	bf00      	nop
 801d964:	e002      	b.n	801d96c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d966:	bf00      	nop
 801d968:	e000      	b.n	801d96c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d96c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d970:	2b00      	cmp	r3, #0
 801d972:	d10d      	bne.n	801d990 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d974:	4b05      	ldr	r3, [pc, #20]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d978:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d982:	4a02      	ldr	r2, [pc, #8]	@ (801d98c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d984:	430b      	orrs	r3, r1
 801d986:	6513      	str	r3, [r2, #80]	@ 0x50
 801d988:	e006      	b.n	801d998 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801d98a:	bf00      	nop
 801d98c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801d9a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801d9a8:	2300      	movs	r3, #0
 801d9aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801d9ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801d9b2:	460b      	mov	r3, r1
 801d9b4:	4313      	orrs	r3, r2
 801d9b6:	d055      	beq.n	801da64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801d9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d9c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d9c4:	d033      	beq.n	801da2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801d9c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d9ca:	d82c      	bhi.n	801da26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d9d0:	d02f      	beq.n	801da32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801d9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d9d6:	d826      	bhi.n	801da26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d9d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d9dc:	d02b      	beq.n	801da36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801d9de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d9e2:	d820      	bhi.n	801da26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d9e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d9e8:	d012      	beq.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d9ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d9ee:	d81a      	bhi.n	801da26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d022      	beq.n	801da3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d9f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d9f8:	d115      	bne.n	801da26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9fe:	3308      	adds	r3, #8
 801da00:	2101      	movs	r1, #1
 801da02:	4618      	mov	r0, r3
 801da04:	f001 f9a6 	bl	801ed54 <RCCEx_PLL2_Config>
 801da08:	4603      	mov	r3, r0
 801da0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801da0e:	e015      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801da10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da14:	3328      	adds	r3, #40	@ 0x28
 801da16:	2101      	movs	r1, #1
 801da18:	4618      	mov	r0, r3
 801da1a:	f001 fa4d 	bl	801eeb8 <RCCEx_PLL3_Config>
 801da1e:	4603      	mov	r3, r0
 801da20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801da24:	e00a      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801da26:	2301      	movs	r3, #1
 801da28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801da2c:	e006      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801da2e:	bf00      	nop
 801da30:	e004      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801da32:	bf00      	nop
 801da34:	e002      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801da36:	bf00      	nop
 801da38:	e000      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801da3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da40:	2b00      	cmp	r3, #0
 801da42:	d10b      	bne.n	801da5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801da44:	4ba3      	ldr	r3, [pc, #652]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da48:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801da4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801da54:	4a9f      	ldr	r2, [pc, #636]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da56:	430b      	orrs	r3, r1
 801da58:	6593      	str	r3, [r2, #88]	@ 0x58
 801da5a:	e003      	b.n	801da64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801da64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801da70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801da74:	2300      	movs	r3, #0
 801da76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801da7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801da7e:	460b      	mov	r3, r1
 801da80:	4313      	orrs	r3, r2
 801da82:	d037      	beq.n	801daf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801da84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801da8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801da8e:	d00e      	beq.n	801daae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801da90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801da94:	d816      	bhi.n	801dac4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801da96:	2b00      	cmp	r3, #0
 801da98:	d018      	beq.n	801dacc <HAL_RCCEx_PeriphCLKConfig+0x708>
 801da9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801da9e:	d111      	bne.n	801dac4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801daa0:	4b8c      	ldr	r3, [pc, #560]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801daa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801daa4:	4a8b      	ldr	r2, [pc, #556]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801daa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801daaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801daac:	e00f      	b.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801daae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dab2:	3308      	adds	r3, #8
 801dab4:	2101      	movs	r1, #1
 801dab6:	4618      	mov	r0, r3
 801dab8:	f001 f94c 	bl	801ed54 <RCCEx_PLL2_Config>
 801dabc:	4603      	mov	r3, r0
 801dabe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801dac2:	e004      	b.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dac4:	2301      	movs	r3, #1
 801dac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801daca:	e000      	b.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801dacc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	d10a      	bne.n	801daec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801dad6:	4b7f      	ldr	r3, [pc, #508]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dada:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801dade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dae4:	4a7b      	ldr	r2, [pc, #492]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dae6:	430b      	orrs	r3, r1
 801dae8:	6513      	str	r3, [r2, #80]	@ 0x50
 801daea:	e003      	b.n	801daf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801daec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801daf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801daf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dafc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801db00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801db04:	2300      	movs	r3, #0
 801db06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801db0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801db0e:	460b      	mov	r3, r1
 801db10:	4313      	orrs	r3, r2
 801db12:	d039      	beq.n	801db88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801db14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801db1a:	2b03      	cmp	r3, #3
 801db1c:	d81c      	bhi.n	801db58 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801db1e:	a201      	add	r2, pc, #4	@ (adr r2, 801db24 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801db20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db24:	0801db61 	.word	0x0801db61
 801db28:	0801db35 	.word	0x0801db35
 801db2c:	0801db43 	.word	0x0801db43
 801db30:	0801db61 	.word	0x0801db61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801db34:	4b67      	ldr	r3, [pc, #412]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db38:	4a66      	ldr	r2, [pc, #408]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801db3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801db40:	e00f      	b.n	801db62 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801db42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db46:	3308      	adds	r3, #8
 801db48:	2102      	movs	r1, #2
 801db4a:	4618      	mov	r0, r3
 801db4c:	f001 f902 	bl	801ed54 <RCCEx_PLL2_Config>
 801db50:	4603      	mov	r3, r0
 801db52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801db56:	e004      	b.n	801db62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801db58:	2301      	movs	r3, #1
 801db5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801db5e:	e000      	b.n	801db62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801db60:	bf00      	nop
    }

    if (ret == HAL_OK)
 801db62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db66:	2b00      	cmp	r3, #0
 801db68:	d10a      	bne.n	801db80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801db6a:	4b5a      	ldr	r3, [pc, #360]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801db6e:	f023 0103 	bic.w	r1, r3, #3
 801db72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801db78:	4a56      	ldr	r2, [pc, #344]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db7a:	430b      	orrs	r3, r1
 801db7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801db7e:	e003      	b.n	801db88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801db88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801db94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801db98:	2300      	movs	r3, #0
 801db9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801db9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801dba2:	460b      	mov	r3, r1
 801dba4:	4313      	orrs	r3, r2
 801dba6:	f000 809f 	beq.w	801dce8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801dbaa:	4b4b      	ldr	r3, [pc, #300]	@ (801dcd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	4a4a      	ldr	r2, [pc, #296]	@ (801dcd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dbb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dbb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801dbb6:	f7fc f807 	bl	8019bc8 <HAL_GetTick>
 801dbba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dbbe:	e00b      	b.n	801dbd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801dbc0:	f7fc f802 	bl	8019bc8 <HAL_GetTick>
 801dbc4:	4602      	mov	r2, r0
 801dbc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dbca:	1ad3      	subs	r3, r2, r3
 801dbcc:	2b64      	cmp	r3, #100	@ 0x64
 801dbce:	d903      	bls.n	801dbd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801dbd0:	2303      	movs	r3, #3
 801dbd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dbd6:	e005      	b.n	801dbe4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dbd8:	4b3f      	ldr	r3, [pc, #252]	@ (801dcd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d0ed      	beq.n	801dbc0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801dbe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d179      	bne.n	801dce0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801dbec:	4b39      	ldr	r3, [pc, #228]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801dbf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dbf8:	4053      	eors	r3, r2
 801dbfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d015      	beq.n	801dc2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801dc02:	4b34      	ldr	r3, [pc, #208]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801dc0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801dc0e:	4b31      	ldr	r3, [pc, #196]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc12:	4a30      	ldr	r2, [pc, #192]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801dc18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801dc1a:	4b2e      	ldr	r3, [pc, #184]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc1e:	4a2d      	ldr	r2, [pc, #180]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dc24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801dc26:	4a2b      	ldr	r2, [pc, #172]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801dc2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801dc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dc36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dc3a:	d118      	bne.n	801dc6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801dc3c:	f7fb ffc4 	bl	8019bc8 <HAL_GetTick>
 801dc40:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801dc44:	e00d      	b.n	801dc62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801dc46:	f7fb ffbf 	bl	8019bc8 <HAL_GetTick>
 801dc4a:	4602      	mov	r2, r0
 801dc4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dc50:	1ad2      	subs	r2, r2, r3
 801dc52:	f241 3388 	movw	r3, #5000	@ 0x1388
 801dc56:	429a      	cmp	r2, r3
 801dc58:	d903      	bls.n	801dc62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801dc5a:	2303      	movs	r3, #3
 801dc5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801dc60:	e005      	b.n	801dc6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801dc62:	4b1c      	ldr	r3, [pc, #112]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc66:	f003 0302 	and.w	r3, r3, #2
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d0eb      	beq.n	801dc46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801dc6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d129      	bne.n	801dcca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801dc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dc7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dc82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dc86:	d10e      	bne.n	801dca6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801dc88:	4b12      	ldr	r3, [pc, #72]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc8a:	691b      	ldr	r3, [r3, #16]
 801dc8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801dc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dc98:	091a      	lsrs	r2, r3, #4
 801dc9a:	4b10      	ldr	r3, [pc, #64]	@ (801dcdc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801dc9c:	4013      	ands	r3, r2
 801dc9e:	4a0d      	ldr	r2, [pc, #52]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dca0:	430b      	orrs	r3, r1
 801dca2:	6113      	str	r3, [r2, #16]
 801dca4:	e005      	b.n	801dcb2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801dca6:	4b0b      	ldr	r3, [pc, #44]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dca8:	691b      	ldr	r3, [r3, #16]
 801dcaa:	4a0a      	ldr	r2, [pc, #40]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dcac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801dcb0:	6113      	str	r3, [r2, #16]
 801dcb2:	4b08      	ldr	r3, [pc, #32]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dcb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801dcb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dcbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801dcc2:	4a04      	ldr	r2, [pc, #16]	@ (801dcd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dcc4:	430b      	orrs	r3, r1
 801dcc6:	6713      	str	r3, [r2, #112]	@ 0x70
 801dcc8:	e00e      	b.n	801dce8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801dcca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801dcd2:	e009      	b.n	801dce8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801dcd4:	58024400 	.word	0x58024400
 801dcd8:	58024800 	.word	0x58024800
 801dcdc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801dce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcf0:	f002 0301 	and.w	r3, r2, #1
 801dcf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801dcfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801dd02:	460b      	mov	r3, r1
 801dd04:	4313      	orrs	r3, r2
 801dd06:	f000 8089 	beq.w	801de1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801dd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dd10:	2b28      	cmp	r3, #40	@ 0x28
 801dd12:	d86b      	bhi.n	801ddec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801dd14:	a201      	add	r2, pc, #4	@ (adr r2, 801dd1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801dd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd1a:	bf00      	nop
 801dd1c:	0801ddf5 	.word	0x0801ddf5
 801dd20:	0801dded 	.word	0x0801dded
 801dd24:	0801dded 	.word	0x0801dded
 801dd28:	0801dded 	.word	0x0801dded
 801dd2c:	0801dded 	.word	0x0801dded
 801dd30:	0801dded 	.word	0x0801dded
 801dd34:	0801dded 	.word	0x0801dded
 801dd38:	0801dded 	.word	0x0801dded
 801dd3c:	0801ddc1 	.word	0x0801ddc1
 801dd40:	0801dded 	.word	0x0801dded
 801dd44:	0801dded 	.word	0x0801dded
 801dd48:	0801dded 	.word	0x0801dded
 801dd4c:	0801dded 	.word	0x0801dded
 801dd50:	0801dded 	.word	0x0801dded
 801dd54:	0801dded 	.word	0x0801dded
 801dd58:	0801dded 	.word	0x0801dded
 801dd5c:	0801ddd7 	.word	0x0801ddd7
 801dd60:	0801dded 	.word	0x0801dded
 801dd64:	0801dded 	.word	0x0801dded
 801dd68:	0801dded 	.word	0x0801dded
 801dd6c:	0801dded 	.word	0x0801dded
 801dd70:	0801dded 	.word	0x0801dded
 801dd74:	0801dded 	.word	0x0801dded
 801dd78:	0801dded 	.word	0x0801dded
 801dd7c:	0801ddf5 	.word	0x0801ddf5
 801dd80:	0801dded 	.word	0x0801dded
 801dd84:	0801dded 	.word	0x0801dded
 801dd88:	0801dded 	.word	0x0801dded
 801dd8c:	0801dded 	.word	0x0801dded
 801dd90:	0801dded 	.word	0x0801dded
 801dd94:	0801dded 	.word	0x0801dded
 801dd98:	0801dded 	.word	0x0801dded
 801dd9c:	0801ddf5 	.word	0x0801ddf5
 801dda0:	0801dded 	.word	0x0801dded
 801dda4:	0801dded 	.word	0x0801dded
 801dda8:	0801dded 	.word	0x0801dded
 801ddac:	0801dded 	.word	0x0801dded
 801ddb0:	0801dded 	.word	0x0801dded
 801ddb4:	0801dded 	.word	0x0801dded
 801ddb8:	0801dded 	.word	0x0801dded
 801ddbc:	0801ddf5 	.word	0x0801ddf5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ddc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddc4:	3308      	adds	r3, #8
 801ddc6:	2101      	movs	r1, #1
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f000 ffc3 	bl	801ed54 <RCCEx_PLL2_Config>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801ddd4:	e00f      	b.n	801ddf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ddd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddda:	3328      	adds	r3, #40	@ 0x28
 801dddc:	2101      	movs	r1, #1
 801ddde:	4618      	mov	r0, r3
 801dde0:	f001 f86a 	bl	801eeb8 <RCCEx_PLL3_Config>
 801dde4:	4603      	mov	r3, r0
 801dde6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801ddea:	e004      	b.n	801ddf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ddec:	2301      	movs	r3, #1
 801ddee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ddf2:	e000      	b.n	801ddf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801ddf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ddf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d10a      	bne.n	801de14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801ddfe:	4bbf      	ldr	r3, [pc, #764]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801de00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801de02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801de06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de0c:	4abb      	ldr	r2, [pc, #748]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801de0e:	430b      	orrs	r3, r1
 801de10:	6553      	str	r3, [r2, #84]	@ 0x54
 801de12:	e003      	b.n	801de1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801de1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de24:	f002 0302 	and.w	r3, r2, #2
 801de28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801de2c:	2300      	movs	r3, #0
 801de2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801de32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801de36:	460b      	mov	r3, r1
 801de38:	4313      	orrs	r3, r2
 801de3a:	d041      	beq.n	801dec0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801de3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801de42:	2b05      	cmp	r3, #5
 801de44:	d824      	bhi.n	801de90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801de46:	a201      	add	r2, pc, #4	@ (adr r2, 801de4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801de48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de4c:	0801de99 	.word	0x0801de99
 801de50:	0801de65 	.word	0x0801de65
 801de54:	0801de7b 	.word	0x0801de7b
 801de58:	0801de99 	.word	0x0801de99
 801de5c:	0801de99 	.word	0x0801de99
 801de60:	0801de99 	.word	0x0801de99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801de64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de68:	3308      	adds	r3, #8
 801de6a:	2101      	movs	r1, #1
 801de6c:	4618      	mov	r0, r3
 801de6e:	f000 ff71 	bl	801ed54 <RCCEx_PLL2_Config>
 801de72:	4603      	mov	r3, r0
 801de74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801de78:	e00f      	b.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801de7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de7e:	3328      	adds	r3, #40	@ 0x28
 801de80:	2101      	movs	r1, #1
 801de82:	4618      	mov	r0, r3
 801de84:	f001 f818 	bl	801eeb8 <RCCEx_PLL3_Config>
 801de88:	4603      	mov	r3, r0
 801de8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801de8e:	e004      	b.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801de90:	2301      	movs	r3, #1
 801de92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de96:	e000      	b.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801de98:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d10a      	bne.n	801deb8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801dea2:	4b96      	ldr	r3, [pc, #600]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dea6:	f023 0107 	bic.w	r1, r3, #7
 801deaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801deae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801deb0:	4a92      	ldr	r2, [pc, #584]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801deb2:	430b      	orrs	r3, r1
 801deb4:	6553      	str	r3, [r2, #84]	@ 0x54
 801deb6:	e003      	b.n	801dec0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801deb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801debc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801dec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dec8:	f002 0304 	and.w	r3, r2, #4
 801decc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801ded0:	2300      	movs	r3, #0
 801ded2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801ded6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801deda:	460b      	mov	r3, r1
 801dedc:	4313      	orrs	r3, r2
 801dede:	d044      	beq.n	801df6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801dee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dee8:	2b05      	cmp	r3, #5
 801deea:	d825      	bhi.n	801df38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801deec:	a201      	add	r2, pc, #4	@ (adr r2, 801def4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801deee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801def2:	bf00      	nop
 801def4:	0801df41 	.word	0x0801df41
 801def8:	0801df0d 	.word	0x0801df0d
 801defc:	0801df23 	.word	0x0801df23
 801df00:	0801df41 	.word	0x0801df41
 801df04:	0801df41 	.word	0x0801df41
 801df08:	0801df41 	.word	0x0801df41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801df0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df10:	3308      	adds	r3, #8
 801df12:	2101      	movs	r1, #1
 801df14:	4618      	mov	r0, r3
 801df16:	f000 ff1d 	bl	801ed54 <RCCEx_PLL2_Config>
 801df1a:	4603      	mov	r3, r0
 801df1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801df20:	e00f      	b.n	801df42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801df22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df26:	3328      	adds	r3, #40	@ 0x28
 801df28:	2101      	movs	r1, #1
 801df2a:	4618      	mov	r0, r3
 801df2c:	f000 ffc4 	bl	801eeb8 <RCCEx_PLL3_Config>
 801df30:	4603      	mov	r3, r0
 801df32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801df36:	e004      	b.n	801df42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801df38:	2301      	movs	r3, #1
 801df3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801df3e:	e000      	b.n	801df42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801df40:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df46:	2b00      	cmp	r3, #0
 801df48:	d10b      	bne.n	801df62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801df4a:	4b6c      	ldr	r3, [pc, #432]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df4e:	f023 0107 	bic.w	r1, r3, #7
 801df52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801df5a:	4a68      	ldr	r2, [pc, #416]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df5c:	430b      	orrs	r3, r1
 801df5e:	6593      	str	r3, [r2, #88]	@ 0x58
 801df60:	e003      	b.n	801df6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801df62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801df6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df72:	f002 0320 	and.w	r3, r2, #32
 801df76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801df7a:	2300      	movs	r3, #0
 801df7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801df80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801df84:	460b      	mov	r3, r1
 801df86:	4313      	orrs	r3, r2
 801df88:	d055      	beq.n	801e036 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801df8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801df92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801df96:	d033      	beq.n	801e000 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801df98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801df9c:	d82c      	bhi.n	801dff8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801df9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dfa2:	d02f      	beq.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801dfa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dfa8:	d826      	bhi.n	801dff8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dfaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dfae:	d02b      	beq.n	801e008 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801dfb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dfb4:	d820      	bhi.n	801dff8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dfb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dfba:	d012      	beq.n	801dfe2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801dfbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dfc0:	d81a      	bhi.n	801dff8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	d022      	beq.n	801e00c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801dfc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dfca:	d115      	bne.n	801dff8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfd0:	3308      	adds	r3, #8
 801dfd2:	2100      	movs	r1, #0
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f000 febd 	bl	801ed54 <RCCEx_PLL2_Config>
 801dfda:	4603      	mov	r3, r0
 801dfdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dfe0:	e015      	b.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe6:	3328      	adds	r3, #40	@ 0x28
 801dfe8:	2102      	movs	r1, #2
 801dfea:	4618      	mov	r0, r3
 801dfec:	f000 ff64 	bl	801eeb8 <RCCEx_PLL3_Config>
 801dff0:	4603      	mov	r3, r0
 801dff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dff6:	e00a      	b.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dff8:	2301      	movs	r3, #1
 801dffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dffe:	e006      	b.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e000:	bf00      	nop
 801e002:	e004      	b.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e004:	bf00      	nop
 801e006:	e002      	b.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e008:	bf00      	nop
 801e00a:	e000      	b.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e00e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e012:	2b00      	cmp	r3, #0
 801e014:	d10b      	bne.n	801e02e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801e016:	4b39      	ldr	r3, [pc, #228]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e01a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e026:	4a35      	ldr	r2, [pc, #212]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e028:	430b      	orrs	r3, r1
 801e02a:	6553      	str	r3, [r2, #84]	@ 0x54
 801e02c:	e003      	b.n	801e036 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e02e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801e036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e03e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801e042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801e046:	2300      	movs	r3, #0
 801e048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801e04c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801e050:	460b      	mov	r3, r1
 801e052:	4313      	orrs	r3, r2
 801e054:	d058      	beq.n	801e108 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801e056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e05a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e05e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e062:	d033      	beq.n	801e0cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801e064:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e068:	d82c      	bhi.n	801e0c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e06a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e06e:	d02f      	beq.n	801e0d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801e070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e074:	d826      	bhi.n	801e0c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e076:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e07a:	d02b      	beq.n	801e0d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801e07c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e080:	d820      	bhi.n	801e0c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e086:	d012      	beq.n	801e0ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801e088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e08c:	d81a      	bhi.n	801e0c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d022      	beq.n	801e0d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801e092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e096:	d115      	bne.n	801e0c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e09c:	3308      	adds	r3, #8
 801e09e:	2100      	movs	r1, #0
 801e0a0:	4618      	mov	r0, r3
 801e0a2:	f000 fe57 	bl	801ed54 <RCCEx_PLL2_Config>
 801e0a6:	4603      	mov	r3, r0
 801e0a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e0ac:	e015      	b.n	801e0da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0b2:	3328      	adds	r3, #40	@ 0x28
 801e0b4:	2102      	movs	r1, #2
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	f000 fefe 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e0bc:	4603      	mov	r3, r0
 801e0be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e0c2:	e00a      	b.n	801e0da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e0c4:	2301      	movs	r3, #1
 801e0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0ca:	e006      	b.n	801e0da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e0cc:	bf00      	nop
 801e0ce:	e004      	b.n	801e0da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e0d0:	bf00      	nop
 801e0d2:	e002      	b.n	801e0da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e0d4:	bf00      	nop
 801e0d6:	e000      	b.n	801e0da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e0d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d10e      	bne.n	801e100 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801e0e2:	4b06      	ldr	r3, [pc, #24]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801e0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e0f2:	4a02      	ldr	r2, [pc, #8]	@ (801e0fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e0f4:	430b      	orrs	r3, r1
 801e0f6:	6593      	str	r3, [r2, #88]	@ 0x58
 801e0f8:	e006      	b.n	801e108 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801e0fa:	bf00      	nop
 801e0fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801e108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e110:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e118:	2300      	movs	r3, #0
 801e11a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e11e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e122:	460b      	mov	r3, r1
 801e124:	4313      	orrs	r3, r2
 801e126:	d055      	beq.n	801e1d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801e128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e12c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e130:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e134:	d033      	beq.n	801e19e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801e136:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e13a:	d82c      	bhi.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e13c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e140:	d02f      	beq.n	801e1a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801e142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e146:	d826      	bhi.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e148:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e14c:	d02b      	beq.n	801e1a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801e14e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e152:	d820      	bhi.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e158:	d012      	beq.n	801e180 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801e15a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e15e:	d81a      	bhi.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e160:	2b00      	cmp	r3, #0
 801e162:	d022      	beq.n	801e1aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801e164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e168:	d115      	bne.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e16e:	3308      	adds	r3, #8
 801e170:	2100      	movs	r1, #0
 801e172:	4618      	mov	r0, r3
 801e174:	f000 fdee 	bl	801ed54 <RCCEx_PLL2_Config>
 801e178:	4603      	mov	r3, r0
 801e17a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e17e:	e015      	b.n	801e1ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e184:	3328      	adds	r3, #40	@ 0x28
 801e186:	2102      	movs	r1, #2
 801e188:	4618      	mov	r0, r3
 801e18a:	f000 fe95 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e18e:	4603      	mov	r3, r0
 801e190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e194:	e00a      	b.n	801e1ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e196:	2301      	movs	r3, #1
 801e198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e19c:	e006      	b.n	801e1ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e19e:	bf00      	nop
 801e1a0:	e004      	b.n	801e1ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e1a2:	bf00      	nop
 801e1a4:	e002      	b.n	801e1ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e1a6:	bf00      	nop
 801e1a8:	e000      	b.n	801e1ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e1aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e1ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d10b      	bne.n	801e1cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801e1b4:	4ba1      	ldr	r3, [pc, #644]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e1b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e1b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801e1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e1c4:	4a9d      	ldr	r2, [pc, #628]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e1c6:	430b      	orrs	r3, r1
 801e1c8:	6593      	str	r3, [r2, #88]	@ 0x58
 801e1ca:	e003      	b.n	801e1d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801e1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1dc:	f002 0308 	and.w	r3, r2, #8
 801e1e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e1ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e1ee:	460b      	mov	r3, r1
 801e1f0:	4313      	orrs	r3, r2
 801e1f2:	d01e      	beq.n	801e232 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801e1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e200:	d10c      	bne.n	801e21c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e206:	3328      	adds	r3, #40	@ 0x28
 801e208:	2102      	movs	r1, #2
 801e20a:	4618      	mov	r0, r3
 801e20c:	f000 fe54 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e210:	4603      	mov	r3, r0
 801e212:	2b00      	cmp	r3, #0
 801e214:	d002      	beq.n	801e21c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801e216:	2301      	movs	r3, #1
 801e218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801e21c:	4b87      	ldr	r3, [pc, #540]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e220:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e22c:	4a83      	ldr	r2, [pc, #524]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e22e:	430b      	orrs	r3, r1
 801e230:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e23a:	f002 0310 	and.w	r3, r2, #16
 801e23e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e242:	2300      	movs	r3, #0
 801e244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e248:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e24c:	460b      	mov	r3, r1
 801e24e:	4313      	orrs	r3, r2
 801e250:	d01e      	beq.n	801e290 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e25e:	d10c      	bne.n	801e27a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e264:	3328      	adds	r3, #40	@ 0x28
 801e266:	2102      	movs	r1, #2
 801e268:	4618      	mov	r0, r3
 801e26a:	f000 fe25 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e26e:	4603      	mov	r3, r0
 801e270:	2b00      	cmp	r3, #0
 801e272:	d002      	beq.n	801e27a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e274:	2301      	movs	r3, #1
 801e276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e27a:	4b70      	ldr	r3, [pc, #448]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e27c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e27e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e28a:	4a6c      	ldr	r2, [pc, #432]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e28c:	430b      	orrs	r3, r1
 801e28e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e298:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e29c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e2a0:	2300      	movs	r3, #0
 801e2a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e2a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e2aa:	460b      	mov	r3, r1
 801e2ac:	4313      	orrs	r3, r2
 801e2ae:	d03e      	beq.n	801e32e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801e2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e2b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e2bc:	d022      	beq.n	801e304 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801e2be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e2c2:	d81b      	bhi.n	801e2fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d003      	beq.n	801e2d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801e2c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e2cc:	d00b      	beq.n	801e2e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801e2ce:	e015      	b.n	801e2fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2d4:	3308      	adds	r3, #8
 801e2d6:	2100      	movs	r1, #0
 801e2d8:	4618      	mov	r0, r3
 801e2da:	f000 fd3b 	bl	801ed54 <RCCEx_PLL2_Config>
 801e2de:	4603      	mov	r3, r0
 801e2e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e2e4:	e00f      	b.n	801e306 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ea:	3328      	adds	r3, #40	@ 0x28
 801e2ec:	2102      	movs	r1, #2
 801e2ee:	4618      	mov	r0, r3
 801e2f0:	f000 fde2 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e2f4:	4603      	mov	r3, r0
 801e2f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e2fa:	e004      	b.n	801e306 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e2fc:	2301      	movs	r3, #1
 801e2fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e302:	e000      	b.n	801e306 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801e304:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d10b      	bne.n	801e326 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801e30e:	4b4b      	ldr	r3, [pc, #300]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e312:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801e316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e31a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e31e:	4a47      	ldr	r2, [pc, #284]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e320:	430b      	orrs	r3, r1
 801e322:	6593      	str	r3, [r2, #88]	@ 0x58
 801e324:	e003      	b.n	801e32e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e32a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801e32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e336:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e33a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e33c:	2300      	movs	r3, #0
 801e33e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e340:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e344:	460b      	mov	r3, r1
 801e346:	4313      	orrs	r3, r2
 801e348:	d03b      	beq.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e352:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e356:	d01f      	beq.n	801e398 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e358:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e35c:	d818      	bhi.n	801e390 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e35e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e362:	d003      	beq.n	801e36c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e368:	d007      	beq.n	801e37a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e36a:	e011      	b.n	801e390 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e36c:	4b33      	ldr	r3, [pc, #204]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e370:	4a32      	ldr	r2, [pc, #200]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e378:	e00f      	b.n	801e39a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e37e:	3328      	adds	r3, #40	@ 0x28
 801e380:	2101      	movs	r1, #1
 801e382:	4618      	mov	r0, r3
 801e384:	f000 fd98 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e388:	4603      	mov	r3, r0
 801e38a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e38e:	e004      	b.n	801e39a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e390:	2301      	movs	r3, #1
 801e392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e396:	e000      	b.n	801e39a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e398:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e39a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d10b      	bne.n	801e3ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e3a2:	4b26      	ldr	r3, [pc, #152]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e3a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e3b2:	4a22      	ldr	r2, [pc, #136]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3b4:	430b      	orrs	r3, r1
 801e3b6:	6553      	str	r3, [r2, #84]	@ 0x54
 801e3b8:	e003      	b.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e3ce:	673b      	str	r3, [r7, #112]	@ 0x70
 801e3d0:	2300      	movs	r3, #0
 801e3d2:	677b      	str	r3, [r7, #116]	@ 0x74
 801e3d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e3d8:	460b      	mov	r3, r1
 801e3da:	4313      	orrs	r3, r2
 801e3dc:	d034      	beq.n	801e448 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d003      	beq.n	801e3f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e3e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e3ec:	d007      	beq.n	801e3fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e3ee:	e011      	b.n	801e414 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e3f0:	4b12      	ldr	r3, [pc, #72]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3f4:	4a11      	ldr	r2, [pc, #68]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e3fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e3fc:	e00e      	b.n	801e41c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e402:	3308      	adds	r3, #8
 801e404:	2102      	movs	r1, #2
 801e406:	4618      	mov	r0, r3
 801e408:	f000 fca4 	bl	801ed54 <RCCEx_PLL2_Config>
 801e40c:	4603      	mov	r3, r0
 801e40e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e412:	e003      	b.n	801e41c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e414:	2301      	movs	r3, #1
 801e416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e41a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e41c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e420:	2b00      	cmp	r3, #0
 801e422:	d10d      	bne.n	801e440 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e424:	4b05      	ldr	r3, [pc, #20]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e428:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e432:	4a02      	ldr	r2, [pc, #8]	@ (801e43c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e434:	430b      	orrs	r3, r1
 801e436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e438:	e006      	b.n	801e448 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e43a:	bf00      	nop
 801e43c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e450:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e454:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e456:	2300      	movs	r3, #0
 801e458:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e45a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e45e:	460b      	mov	r3, r1
 801e460:	4313      	orrs	r3, r2
 801e462:	d00c      	beq.n	801e47e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e468:	3328      	adds	r3, #40	@ 0x28
 801e46a:	2102      	movs	r1, #2
 801e46c:	4618      	mov	r0, r3
 801e46e:	f000 fd23 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e472:	4603      	mov	r3, r0
 801e474:	2b00      	cmp	r3, #0
 801e476:	d002      	beq.n	801e47e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e478:	2301      	movs	r3, #1
 801e47a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e486:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e48a:	663b      	str	r3, [r7, #96]	@ 0x60
 801e48c:	2300      	movs	r3, #0
 801e48e:	667b      	str	r3, [r7, #100]	@ 0x64
 801e490:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e494:	460b      	mov	r3, r1
 801e496:	4313      	orrs	r3, r2
 801e498:	d038      	beq.n	801e50c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e4a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e4a6:	d018      	beq.n	801e4da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e4a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e4ac:	d811      	bhi.n	801e4d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e4ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e4b2:	d014      	beq.n	801e4de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e4b8:	d80b      	bhi.n	801e4d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d011      	beq.n	801e4e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e4be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e4c2:	d106      	bne.n	801e4d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e4c4:	4bc3      	ldr	r3, [pc, #780]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4c8:	4ac2      	ldr	r2, [pc, #776]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e4ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e4d0:	e008      	b.n	801e4e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e4d2:	2301      	movs	r3, #1
 801e4d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e4d8:	e004      	b.n	801e4e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e4da:	bf00      	nop
 801e4dc:	e002      	b.n	801e4e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e4de:	bf00      	nop
 801e4e0:	e000      	b.n	801e4e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e4e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e4e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d10b      	bne.n	801e504 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e4ec:	4bb9      	ldr	r3, [pc, #740]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e4f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e4fc:	4ab5      	ldr	r2, [pc, #724]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4fe:	430b      	orrs	r3, r1
 801e500:	6553      	str	r3, [r2, #84]	@ 0x54
 801e502:	e003      	b.n	801e50c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e514:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e518:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e51a:	2300      	movs	r3, #0
 801e51c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e51e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e522:	460b      	mov	r3, r1
 801e524:	4313      	orrs	r3, r2
 801e526:	d009      	beq.n	801e53c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e528:	4baa      	ldr	r3, [pc, #680]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e52a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e52c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e536:	4aa7      	ldr	r2, [pc, #668]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e538:	430b      	orrs	r3, r1
 801e53a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e544:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e548:	653b      	str	r3, [r7, #80]	@ 0x50
 801e54a:	2300      	movs	r3, #0
 801e54c:	657b      	str	r3, [r7, #84]	@ 0x54
 801e54e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e552:	460b      	mov	r3, r1
 801e554:	4313      	orrs	r3, r2
 801e556:	d00a      	beq.n	801e56e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e558:	4b9e      	ldr	r3, [pc, #632]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e55a:	691b      	ldr	r3, [r3, #16]
 801e55c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e564:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e568:	4a9a      	ldr	r2, [pc, #616]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e56a:	430b      	orrs	r3, r1
 801e56c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e576:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e57a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e57c:	2300      	movs	r3, #0
 801e57e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e580:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e584:	460b      	mov	r3, r1
 801e586:	4313      	orrs	r3, r2
 801e588:	d009      	beq.n	801e59e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e58a:	4b92      	ldr	r3, [pc, #584]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e58c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e58e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e598:	4a8e      	ldr	r2, [pc, #568]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e59a:	430b      	orrs	r3, r1
 801e59c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e5aa:	643b      	str	r3, [r7, #64]	@ 0x40
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	647b      	str	r3, [r7, #68]	@ 0x44
 801e5b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e5b4:	460b      	mov	r3, r1
 801e5b6:	4313      	orrs	r3, r2
 801e5b8:	d00e      	beq.n	801e5d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e5ba:	4b86      	ldr	r3, [pc, #536]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5bc:	691b      	ldr	r3, [r3, #16]
 801e5be:	4a85      	ldr	r2, [pc, #532]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e5c4:	6113      	str	r3, [r2, #16]
 801e5c6:	4b83      	ldr	r3, [pc, #524]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5c8:	6919      	ldr	r1, [r3, #16]
 801e5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e5d2:	4a80      	ldr	r2, [pc, #512]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5d4:	430b      	orrs	r3, r1
 801e5d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e5e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e5e6:	2300      	movs	r3, #0
 801e5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e5ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e5ee:	460b      	mov	r3, r1
 801e5f0:	4313      	orrs	r3, r2
 801e5f2:	d009      	beq.n	801e608 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e5f4:	4b77      	ldr	r3, [pc, #476]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e5f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e5f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e602:	4a74      	ldr	r2, [pc, #464]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e604:	430b      	orrs	r3, r1
 801e606:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e610:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e614:	633b      	str	r3, [r7, #48]	@ 0x30
 801e616:	2300      	movs	r3, #0
 801e618:	637b      	str	r3, [r7, #52]	@ 0x34
 801e61a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e61e:	460b      	mov	r3, r1
 801e620:	4313      	orrs	r3, r2
 801e622:	d00a      	beq.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e624:	4b6b      	ldr	r3, [pc, #428]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e628:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e634:	4a67      	ldr	r2, [pc, #412]	@ (801e7d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e636:	430b      	orrs	r3, r1
 801e638:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e642:	2100      	movs	r1, #0
 801e644:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e646:	f003 0301 	and.w	r3, r3, #1
 801e64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e64c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e650:	460b      	mov	r3, r1
 801e652:	4313      	orrs	r3, r2
 801e654:	d011      	beq.n	801e67a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e65a:	3308      	adds	r3, #8
 801e65c:	2100      	movs	r1, #0
 801e65e:	4618      	mov	r0, r3
 801e660:	f000 fb78 	bl	801ed54 <RCCEx_PLL2_Config>
 801e664:	4603      	mov	r3, r0
 801e666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e66a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d003      	beq.n	801e67a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e682:	2100      	movs	r1, #0
 801e684:	6239      	str	r1, [r7, #32]
 801e686:	f003 0302 	and.w	r3, r3, #2
 801e68a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e68c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e690:	460b      	mov	r3, r1
 801e692:	4313      	orrs	r3, r2
 801e694:	d011      	beq.n	801e6ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e69a:	3308      	adds	r3, #8
 801e69c:	2101      	movs	r1, #1
 801e69e:	4618      	mov	r0, r3
 801e6a0:	f000 fb58 	bl	801ed54 <RCCEx_PLL2_Config>
 801e6a4:	4603      	mov	r3, r0
 801e6a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d003      	beq.n	801e6ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6c2:	2100      	movs	r1, #0
 801e6c4:	61b9      	str	r1, [r7, #24]
 801e6c6:	f003 0304 	and.w	r3, r3, #4
 801e6ca:	61fb      	str	r3, [r7, #28]
 801e6cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e6d0:	460b      	mov	r3, r1
 801e6d2:	4313      	orrs	r3, r2
 801e6d4:	d011      	beq.n	801e6fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6da:	3308      	adds	r3, #8
 801e6dc:	2102      	movs	r1, #2
 801e6de:	4618      	mov	r0, r3
 801e6e0:	f000 fb38 	bl	801ed54 <RCCEx_PLL2_Config>
 801e6e4:	4603      	mov	r3, r0
 801e6e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e6ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	d003      	beq.n	801e6fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e702:	2100      	movs	r1, #0
 801e704:	6139      	str	r1, [r7, #16]
 801e706:	f003 0308 	and.w	r3, r3, #8
 801e70a:	617b      	str	r3, [r7, #20]
 801e70c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e710:	460b      	mov	r3, r1
 801e712:	4313      	orrs	r3, r2
 801e714:	d011      	beq.n	801e73a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e71a:	3328      	adds	r3, #40	@ 0x28
 801e71c:	2100      	movs	r1, #0
 801e71e:	4618      	mov	r0, r3
 801e720:	f000 fbca 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e724:	4603      	mov	r3, r0
 801e726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e72a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d003      	beq.n	801e73a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e742:	2100      	movs	r1, #0
 801e744:	60b9      	str	r1, [r7, #8]
 801e746:	f003 0310 	and.w	r3, r3, #16
 801e74a:	60fb      	str	r3, [r7, #12]
 801e74c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e750:	460b      	mov	r3, r1
 801e752:	4313      	orrs	r3, r2
 801e754:	d011      	beq.n	801e77a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e75a:	3328      	adds	r3, #40	@ 0x28
 801e75c:	2101      	movs	r1, #1
 801e75e:	4618      	mov	r0, r3
 801e760:	f000 fbaa 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e764:	4603      	mov	r3, r0
 801e766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e76a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d003      	beq.n	801e77a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e782:	2100      	movs	r1, #0
 801e784:	6039      	str	r1, [r7, #0]
 801e786:	f003 0320 	and.w	r3, r3, #32
 801e78a:	607b      	str	r3, [r7, #4]
 801e78c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e790:	460b      	mov	r3, r1
 801e792:	4313      	orrs	r3, r2
 801e794:	d011      	beq.n	801e7ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e79a:	3328      	adds	r3, #40	@ 0x28
 801e79c:	2102      	movs	r1, #2
 801e79e:	4618      	mov	r0, r3
 801e7a0:	f000 fb8a 	bl	801eeb8 <RCCEx_PLL3_Config>
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e7aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d003      	beq.n	801e7ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e7b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e7ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d101      	bne.n	801e7c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	e000      	b.n	801e7c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e7c6:	2301      	movs	r3, #1
}
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e7ce:	46bd      	mov	sp, r7
 801e7d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e7d4:	58024400 	.word	0x58024400

0801e7d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e7d8:	b580      	push	{r7, lr}
 801e7da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e7dc:	f7fe fd96 	bl	801d30c <HAL_RCC_GetHCLKFreq>
 801e7e0:	4602      	mov	r2, r0
 801e7e2:	4b06      	ldr	r3, [pc, #24]	@ (801e7fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e7e4:	6a1b      	ldr	r3, [r3, #32]
 801e7e6:	091b      	lsrs	r3, r3, #4
 801e7e8:	f003 0307 	and.w	r3, r3, #7
 801e7ec:	4904      	ldr	r1, [pc, #16]	@ (801e800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e7ee:	5ccb      	ldrb	r3, [r1, r3]
 801e7f0:	f003 031f 	and.w	r3, r3, #31
 801e7f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	bd80      	pop	{r7, pc}
 801e7fc:	58024400 	.word	0x58024400
 801e800:	0802724c 	.word	0x0802724c

0801e804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e804:	b480      	push	{r7}
 801e806:	b089      	sub	sp, #36	@ 0x24
 801e808:	af00      	add	r7, sp, #0
 801e80a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e80c:	4ba1      	ldr	r3, [pc, #644]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e810:	f003 0303 	and.w	r3, r3, #3
 801e814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e816:	4b9f      	ldr	r3, [pc, #636]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e81a:	0b1b      	lsrs	r3, r3, #12
 801e81c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e822:	4b9c      	ldr	r3, [pc, #624]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e826:	091b      	lsrs	r3, r3, #4
 801e828:	f003 0301 	and.w	r3, r3, #1
 801e82c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e82e:	4b99      	ldr	r3, [pc, #612]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e832:	08db      	lsrs	r3, r3, #3
 801e834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e838:	693a      	ldr	r2, [r7, #16]
 801e83a:	fb02 f303 	mul.w	r3, r2, r3
 801e83e:	ee07 3a90 	vmov	s15, r3
 801e842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e84a:	697b      	ldr	r3, [r7, #20]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	f000 8111 	beq.w	801ea74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e852:	69bb      	ldr	r3, [r7, #24]
 801e854:	2b02      	cmp	r3, #2
 801e856:	f000 8083 	beq.w	801e960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e85a:	69bb      	ldr	r3, [r7, #24]
 801e85c:	2b02      	cmp	r3, #2
 801e85e:	f200 80a1 	bhi.w	801e9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e862:	69bb      	ldr	r3, [r7, #24]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d003      	beq.n	801e870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e868:	69bb      	ldr	r3, [r7, #24]
 801e86a:	2b01      	cmp	r3, #1
 801e86c:	d056      	beq.n	801e91c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e86e:	e099      	b.n	801e9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e870:	4b88      	ldr	r3, [pc, #544]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	f003 0320 	and.w	r3, r3, #32
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d02d      	beq.n	801e8d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e87c:	4b85      	ldr	r3, [pc, #532]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	08db      	lsrs	r3, r3, #3
 801e882:	f003 0303 	and.w	r3, r3, #3
 801e886:	4a84      	ldr	r2, [pc, #528]	@ (801ea98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e888:	fa22 f303 	lsr.w	r3, r2, r3
 801e88c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e88e:	68bb      	ldr	r3, [r7, #8]
 801e890:	ee07 3a90 	vmov	s15, r3
 801e894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e898:	697b      	ldr	r3, [r7, #20]
 801e89a:	ee07 3a90 	vmov	s15, r3
 801e89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e8a6:	4b7b      	ldr	r3, [pc, #492]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e8ae:	ee07 3a90 	vmov	s15, r3
 801e8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e8ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ea9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e8c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e8d6:	e087      	b.n	801e9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e8d8:	697b      	ldr	r3, [r7, #20]
 801e8da:	ee07 3a90 	vmov	s15, r3
 801e8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e8ea:	4b6a      	ldr	r3, [pc, #424]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e8f2:	ee07 3a90 	vmov	s15, r3
 801e8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 801e8fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ea9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e912:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e91a:	e065      	b.n	801e9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e91c:	697b      	ldr	r3, [r7, #20]
 801e91e:	ee07 3a90 	vmov	s15, r3
 801e922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e926:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801eaa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e92e:	4b59      	ldr	r3, [pc, #356]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e936:	ee07 3a90 	vmov	s15, r3
 801e93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e93e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e942:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ea9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e94e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e95e:	e043      	b.n	801e9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e960:	697b      	ldr	r3, [r7, #20]
 801e962:	ee07 3a90 	vmov	s15, r3
 801e966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e96a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e972:	4b48      	ldr	r3, [pc, #288]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e97a:	ee07 3a90 	vmov	s15, r3
 801e97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e982:	ed97 6a03 	vldr	s12, [r7, #12]
 801e986:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ea9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e99e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e9a2:	e021      	b.n	801e9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e9a4:	697b      	ldr	r3, [r7, #20]
 801e9a6:	ee07 3a90 	vmov	s15, r3
 801e9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801eaa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e9b6:	4b37      	ldr	r3, [pc, #220]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e9be:	ee07 3a90 	vmov	s15, r3
 801e9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e9ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ea9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e9e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801e9e8:	4b2a      	ldr	r3, [pc, #168]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e9ec:	0a5b      	lsrs	r3, r3, #9
 801e9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e9f2:	ee07 3a90 	vmov	s15, r3
 801e9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e9fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ea02:	edd7 6a07 	vldr	s13, [r7, #28]
 801ea06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ea0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ea0e:	ee17 2a90 	vmov	r2, s15
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801ea16:	4b1f      	ldr	r3, [pc, #124]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea1a:	0c1b      	lsrs	r3, r3, #16
 801ea1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ea20:	ee07 3a90 	vmov	s15, r3
 801ea24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ea2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ea30:	edd7 6a07 	vldr	s13, [r7, #28]
 801ea34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ea38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ea3c:	ee17 2a90 	vmov	r2, s15
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801ea44:	4b13      	ldr	r3, [pc, #76]	@ (801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea48:	0e1b      	lsrs	r3, r3, #24
 801ea4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ea4e:	ee07 3a90 	vmov	s15, r3
 801ea52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ea5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ea5e:	edd7 6a07 	vldr	s13, [r7, #28]
 801ea62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ea66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ea6a:	ee17 2a90 	vmov	r2, s15
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801ea72:	e008      	b.n	801ea86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2200      	movs	r2, #0
 801ea78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	2200      	movs	r2, #0
 801ea7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	2200      	movs	r2, #0
 801ea84:	609a      	str	r2, [r3, #8]
}
 801ea86:	bf00      	nop
 801ea88:	3724      	adds	r7, #36	@ 0x24
 801ea8a:	46bd      	mov	sp, r7
 801ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea90:	4770      	bx	lr
 801ea92:	bf00      	nop
 801ea94:	58024400 	.word	0x58024400
 801ea98:	03d09000 	.word	0x03d09000
 801ea9c:	46000000 	.word	0x46000000
 801eaa0:	4c742400 	.word	0x4c742400
 801eaa4:	4a742400 	.word	0x4a742400
 801eaa8:	4bbebc20 	.word	0x4bbebc20

0801eaac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801eaac:	b480      	push	{r7}
 801eaae:	b089      	sub	sp, #36	@ 0x24
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801eab4:	4ba1      	ldr	r3, [pc, #644]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eab8:	f003 0303 	and.w	r3, r3, #3
 801eabc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801eabe:	4b9f      	ldr	r3, [pc, #636]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eac2:	0d1b      	lsrs	r3, r3, #20
 801eac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801eaca:	4b9c      	ldr	r3, [pc, #624]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eace:	0a1b      	lsrs	r3, r3, #8
 801ead0:	f003 0301 	and.w	r3, r3, #1
 801ead4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801ead6:	4b99      	ldr	r3, [pc, #612]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ead8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801eada:	08db      	lsrs	r3, r3, #3
 801eadc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eae0:	693a      	ldr	r2, [r7, #16]
 801eae2:	fb02 f303 	mul.w	r3, r2, r3
 801eae6:	ee07 3a90 	vmov	s15, r3
 801eaea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eaee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801eaf2:	697b      	ldr	r3, [r7, #20]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	f000 8111 	beq.w	801ed1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801eafa:	69bb      	ldr	r3, [r7, #24]
 801eafc:	2b02      	cmp	r3, #2
 801eafe:	f000 8083 	beq.w	801ec08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801eb02:	69bb      	ldr	r3, [r7, #24]
 801eb04:	2b02      	cmp	r3, #2
 801eb06:	f200 80a1 	bhi.w	801ec4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801eb0a:	69bb      	ldr	r3, [r7, #24]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d003      	beq.n	801eb18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801eb10:	69bb      	ldr	r3, [r7, #24]
 801eb12:	2b01      	cmp	r3, #1
 801eb14:	d056      	beq.n	801ebc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801eb16:	e099      	b.n	801ec4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801eb18:	4b88      	ldr	r3, [pc, #544]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	f003 0320 	and.w	r3, r3, #32
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d02d      	beq.n	801eb80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801eb24:	4b85      	ldr	r3, [pc, #532]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	08db      	lsrs	r3, r3, #3
 801eb2a:	f003 0303 	and.w	r3, r3, #3
 801eb2e:	4a84      	ldr	r2, [pc, #528]	@ (801ed40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801eb30:	fa22 f303 	lsr.w	r3, r2, r3
 801eb34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801eb36:	68bb      	ldr	r3, [r7, #8]
 801eb38:	ee07 3a90 	vmov	s15, r3
 801eb3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eb40:	697b      	ldr	r3, [r7, #20]
 801eb42:	ee07 3a90 	vmov	s15, r3
 801eb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eb4e:	4b7b      	ldr	r3, [pc, #492]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eb56:	ee07 3a90 	vmov	s15, r3
 801eb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eb5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801eb62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ed44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801eb66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eb6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eb6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eb72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801eb7e:	e087      	b.n	801ec90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801eb80:	697b      	ldr	r3, [r7, #20]
 801eb82:	ee07 3a90 	vmov	s15, r3
 801eb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801ed48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801eb8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eb92:	4b6a      	ldr	r3, [pc, #424]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eb94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eb9a:	ee07 3a90 	vmov	s15, r3
 801eb9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eba2:	ed97 6a03 	vldr	s12, [r7, #12]
 801eba6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ed44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ebaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ebae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ebb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ebba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ebbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ebc2:	e065      	b.n	801ec90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ebc4:	697b      	ldr	r3, [r7, #20]
 801ebc6:	ee07 3a90 	vmov	s15, r3
 801ebca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801ed4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ebd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ebd6:	4b59      	ldr	r3, [pc, #356]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ebd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ebda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ebde:	ee07 3a90 	vmov	s15, r3
 801ebe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ebe6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ebea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ed44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ebee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ebf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ebf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ebfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ec06:	e043      	b.n	801ec90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ec08:	697b      	ldr	r3, [r7, #20]
 801ec0a:	ee07 3a90 	vmov	s15, r3
 801ec0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ed50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ec16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec1a:	4b48      	ldr	r3, [pc, #288]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ec1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec22:	ee07 3a90 	vmov	s15, r3
 801ec26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec2a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ed44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ec32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec42:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ec4a:	e021      	b.n	801ec90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ec4c:	697b      	ldr	r3, [r7, #20]
 801ec4e:	ee07 3a90 	vmov	s15, r3
 801ec52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ed4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ec5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec5e:	4b37      	ldr	r3, [pc, #220]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ec62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec66:	ee07 3a90 	vmov	s15, r3
 801ec6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec6e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ed44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ec76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ec8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801ec90:	4b2a      	ldr	r3, [pc, #168]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ec94:	0a5b      	lsrs	r3, r3, #9
 801ec96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ec9a:	ee07 3a90 	vmov	s15, r3
 801ec9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ecaa:	edd7 6a07 	vldr	s13, [r7, #28]
 801ecae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ecb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ecb6:	ee17 2a90 	vmov	r2, s15
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801ecbe:	4b1f      	ldr	r3, [pc, #124]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ecc2:	0c1b      	lsrs	r3, r3, #16
 801ecc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ecc8:	ee07 3a90 	vmov	s15, r3
 801eccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ecd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ecd8:	edd7 6a07 	vldr	s13, [r7, #28]
 801ecdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ece0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ece4:	ee17 2a90 	vmov	r2, s15
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801ecec:	4b13      	ldr	r3, [pc, #76]	@ (801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ecf0:	0e1b      	lsrs	r3, r3, #24
 801ecf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ecf6:	ee07 3a90 	vmov	s15, r3
 801ecfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed02:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ed06:	edd7 6a07 	vldr	s13, [r7, #28]
 801ed0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ed12:	ee17 2a90 	vmov	r2, s15
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801ed1a:	e008      	b.n	801ed2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	2200      	movs	r2, #0
 801ed20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	2200      	movs	r2, #0
 801ed26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	2200      	movs	r2, #0
 801ed2c:	609a      	str	r2, [r3, #8]
}
 801ed2e:	bf00      	nop
 801ed30:	3724      	adds	r7, #36	@ 0x24
 801ed32:	46bd      	mov	sp, r7
 801ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed38:	4770      	bx	lr
 801ed3a:	bf00      	nop
 801ed3c:	58024400 	.word	0x58024400
 801ed40:	03d09000 	.word	0x03d09000
 801ed44:	46000000 	.word	0x46000000
 801ed48:	4c742400 	.word	0x4c742400
 801ed4c:	4a742400 	.word	0x4a742400
 801ed50:	4bbebc20 	.word	0x4bbebc20

0801ed54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801ed54:	b580      	push	{r7, lr}
 801ed56:	b084      	sub	sp, #16
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	6078      	str	r0, [r7, #4]
 801ed5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ed5e:	2300      	movs	r3, #0
 801ed60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ed62:	4b53      	ldr	r3, [pc, #332]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ed64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed66:	f003 0303 	and.w	r3, r3, #3
 801ed6a:	2b03      	cmp	r3, #3
 801ed6c:	d101      	bne.n	801ed72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801ed6e:	2301      	movs	r3, #1
 801ed70:	e099      	b.n	801eea6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801ed72:	4b4f      	ldr	r3, [pc, #316]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	4a4e      	ldr	r2, [pc, #312]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ed78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801ed7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ed7e:	f7fa ff23 	bl	8019bc8 <HAL_GetTick>
 801ed82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ed84:	e008      	b.n	801ed98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801ed86:	f7fa ff1f 	bl	8019bc8 <HAL_GetTick>
 801ed8a:	4602      	mov	r2, r0
 801ed8c:	68bb      	ldr	r3, [r7, #8]
 801ed8e:	1ad3      	subs	r3, r2, r3
 801ed90:	2b02      	cmp	r3, #2
 801ed92:	d901      	bls.n	801ed98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ed94:	2303      	movs	r3, #3
 801ed96:	e086      	b.n	801eea6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ed98:	4b45      	ldr	r3, [pc, #276]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d1f0      	bne.n	801ed86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801eda4:	4b42      	ldr	r3, [pc, #264]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801eda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eda8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	681b      	ldr	r3, [r3, #0]
 801edb0:	031b      	lsls	r3, r3, #12
 801edb2:	493f      	ldr	r1, [pc, #252]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801edb4:	4313      	orrs	r3, r2
 801edb6:	628b      	str	r3, [r1, #40]	@ 0x28
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	685b      	ldr	r3, [r3, #4]
 801edbc:	3b01      	subs	r3, #1
 801edbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	689b      	ldr	r3, [r3, #8]
 801edc6:	3b01      	subs	r3, #1
 801edc8:	025b      	lsls	r3, r3, #9
 801edca:	b29b      	uxth	r3, r3
 801edcc:	431a      	orrs	r2, r3
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	68db      	ldr	r3, [r3, #12]
 801edd2:	3b01      	subs	r3, #1
 801edd4:	041b      	lsls	r3, r3, #16
 801edd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801edda:	431a      	orrs	r2, r3
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	691b      	ldr	r3, [r3, #16]
 801ede0:	3b01      	subs	r3, #1
 801ede2:	061b      	lsls	r3, r3, #24
 801ede4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ede8:	4931      	ldr	r1, [pc, #196]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801edea:	4313      	orrs	r3, r2
 801edec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801edee:	4b30      	ldr	r3, [pc, #192]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801edf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	695b      	ldr	r3, [r3, #20]
 801edfa:	492d      	ldr	r1, [pc, #180]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801edfc:	4313      	orrs	r3, r2
 801edfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801ee00:	4b2b      	ldr	r3, [pc, #172]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee04:	f023 0220 	bic.w	r2, r3, #32
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	699b      	ldr	r3, [r3, #24]
 801ee0c:	4928      	ldr	r1, [pc, #160]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee0e:	4313      	orrs	r3, r2
 801ee10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801ee12:	4b27      	ldr	r3, [pc, #156]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee16:	4a26      	ldr	r2, [pc, #152]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee18:	f023 0310 	bic.w	r3, r3, #16
 801ee1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801ee1e:	4b24      	ldr	r3, [pc, #144]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ee22:	4b24      	ldr	r3, [pc, #144]	@ (801eeb4 <RCCEx_PLL2_Config+0x160>)
 801ee24:	4013      	ands	r3, r2
 801ee26:	687a      	ldr	r2, [r7, #4]
 801ee28:	69d2      	ldr	r2, [r2, #28]
 801ee2a:	00d2      	lsls	r2, r2, #3
 801ee2c:	4920      	ldr	r1, [pc, #128]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee2e:	4313      	orrs	r3, r2
 801ee30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801ee32:	4b1f      	ldr	r3, [pc, #124]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee36:	4a1e      	ldr	r2, [pc, #120]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee38:	f043 0310 	orr.w	r3, r3, #16
 801ee3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801ee3e:	683b      	ldr	r3, [r7, #0]
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d106      	bne.n	801ee52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801ee44:	4b1a      	ldr	r3, [pc, #104]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee48:	4a19      	ldr	r2, [pc, #100]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ee4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ee50:	e00f      	b.n	801ee72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801ee52:	683b      	ldr	r3, [r7, #0]
 801ee54:	2b01      	cmp	r3, #1
 801ee56:	d106      	bne.n	801ee66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801ee58:	4b15      	ldr	r3, [pc, #84]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee5c:	4a14      	ldr	r2, [pc, #80]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ee62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ee64:	e005      	b.n	801ee72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801ee66:	4b12      	ldr	r3, [pc, #72]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee6a:	4a11      	ldr	r2, [pc, #68]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801ee70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801ee72:	4b0f      	ldr	r3, [pc, #60]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	4a0e      	ldr	r2, [pc, #56]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801ee7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ee7e:	f7fa fea3 	bl	8019bc8 <HAL_GetTick>
 801ee82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801ee84:	e008      	b.n	801ee98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801ee86:	f7fa fe9f 	bl	8019bc8 <HAL_GetTick>
 801ee8a:	4602      	mov	r2, r0
 801ee8c:	68bb      	ldr	r3, [r7, #8]
 801ee8e:	1ad3      	subs	r3, r2, r3
 801ee90:	2b02      	cmp	r3, #2
 801ee92:	d901      	bls.n	801ee98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801ee94:	2303      	movs	r3, #3
 801ee96:	e006      	b.n	801eea6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801ee98:	4b05      	ldr	r3, [pc, #20]	@ (801eeb0 <RCCEx_PLL2_Config+0x15c>)
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d0f0      	beq.n	801ee86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801eea4:	7bfb      	ldrb	r3, [r7, #15]
}
 801eea6:	4618      	mov	r0, r3
 801eea8:	3710      	adds	r7, #16
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	bd80      	pop	{r7, pc}
 801eeae:	bf00      	nop
 801eeb0:	58024400 	.word	0x58024400
 801eeb4:	ffff0007 	.word	0xffff0007

0801eeb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801eeb8:	b580      	push	{r7, lr}
 801eeba:	b084      	sub	sp, #16
 801eebc:	af00      	add	r7, sp, #0
 801eebe:	6078      	str	r0, [r7, #4]
 801eec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801eec2:	2300      	movs	r3, #0
 801eec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801eec6:	4b53      	ldr	r3, [pc, #332]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801eec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eeca:	f003 0303 	and.w	r3, r3, #3
 801eece:	2b03      	cmp	r3, #3
 801eed0:	d101      	bne.n	801eed6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801eed2:	2301      	movs	r3, #1
 801eed4:	e099      	b.n	801f00a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801eed6:	4b4f      	ldr	r3, [pc, #316]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	4a4e      	ldr	r2, [pc, #312]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801eedc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801eee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eee2:	f7fa fe71 	bl	8019bc8 <HAL_GetTick>
 801eee6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801eee8:	e008      	b.n	801eefc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801eeea:	f7fa fe6d 	bl	8019bc8 <HAL_GetTick>
 801eeee:	4602      	mov	r2, r0
 801eef0:	68bb      	ldr	r3, [r7, #8]
 801eef2:	1ad3      	subs	r3, r2, r3
 801eef4:	2b02      	cmp	r3, #2
 801eef6:	d901      	bls.n	801eefc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801eef8:	2303      	movs	r3, #3
 801eefa:	e086      	b.n	801f00a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801eefc:	4b45      	ldr	r3, [pc, #276]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	d1f0      	bne.n	801eeea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801ef08:	4b42      	ldr	r3, [pc, #264]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	051b      	lsls	r3, r3, #20
 801ef16:	493f      	ldr	r1, [pc, #252]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef18:	4313      	orrs	r3, r2
 801ef1a:	628b      	str	r3, [r1, #40]	@ 0x28
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	685b      	ldr	r3, [r3, #4]
 801ef20:	3b01      	subs	r3, #1
 801ef22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	689b      	ldr	r3, [r3, #8]
 801ef2a:	3b01      	subs	r3, #1
 801ef2c:	025b      	lsls	r3, r3, #9
 801ef2e:	b29b      	uxth	r3, r3
 801ef30:	431a      	orrs	r2, r3
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	68db      	ldr	r3, [r3, #12]
 801ef36:	3b01      	subs	r3, #1
 801ef38:	041b      	lsls	r3, r3, #16
 801ef3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801ef3e:	431a      	orrs	r2, r3
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	691b      	ldr	r3, [r3, #16]
 801ef44:	3b01      	subs	r3, #1
 801ef46:	061b      	lsls	r3, r3, #24
 801ef48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ef4c:	4931      	ldr	r1, [pc, #196]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef4e:	4313      	orrs	r3, r2
 801ef50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801ef52:	4b30      	ldr	r3, [pc, #192]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	695b      	ldr	r3, [r3, #20]
 801ef5e:	492d      	ldr	r1, [pc, #180]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef60:	4313      	orrs	r3, r2
 801ef62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801ef64:	4b2b      	ldr	r3, [pc, #172]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	699b      	ldr	r3, [r3, #24]
 801ef70:	4928      	ldr	r1, [pc, #160]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef72:	4313      	orrs	r3, r2
 801ef74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801ef76:	4b27      	ldr	r3, [pc, #156]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef7a:	4a26      	ldr	r2, [pc, #152]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ef80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801ef82:	4b24      	ldr	r3, [pc, #144]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ef86:	4b24      	ldr	r3, [pc, #144]	@ (801f018 <RCCEx_PLL3_Config+0x160>)
 801ef88:	4013      	ands	r3, r2
 801ef8a:	687a      	ldr	r2, [r7, #4]
 801ef8c:	69d2      	ldr	r2, [r2, #28]
 801ef8e:	00d2      	lsls	r2, r2, #3
 801ef90:	4920      	ldr	r1, [pc, #128]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef92:	4313      	orrs	r3, r2
 801ef94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801ef96:	4b1f      	ldr	r3, [pc, #124]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef9a:	4a1e      	ldr	r2, [pc, #120]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801ef9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801efa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801efa2:	683b      	ldr	r3, [r7, #0]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d106      	bne.n	801efb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801efa8:	4b1a      	ldr	r3, [pc, #104]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efac:	4a19      	ldr	r2, [pc, #100]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801efb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801efb4:	e00f      	b.n	801efd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801efb6:	683b      	ldr	r3, [r7, #0]
 801efb8:	2b01      	cmp	r3, #1
 801efba:	d106      	bne.n	801efca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801efbc:	4b15      	ldr	r3, [pc, #84]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efc0:	4a14      	ldr	r2, [pc, #80]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801efc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801efc8:	e005      	b.n	801efd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801efca:	4b12      	ldr	r3, [pc, #72]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efce:	4a11      	ldr	r2, [pc, #68]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801efd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801efd6:	4b0f      	ldr	r3, [pc, #60]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	4a0e      	ldr	r2, [pc, #56]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801efdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801efe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801efe2:	f7fa fdf1 	bl	8019bc8 <HAL_GetTick>
 801efe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801efe8:	e008      	b.n	801effc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801efea:	f7fa fded 	bl	8019bc8 <HAL_GetTick>
 801efee:	4602      	mov	r2, r0
 801eff0:	68bb      	ldr	r3, [r7, #8]
 801eff2:	1ad3      	subs	r3, r2, r3
 801eff4:	2b02      	cmp	r3, #2
 801eff6:	d901      	bls.n	801effc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801eff8:	2303      	movs	r3, #3
 801effa:	e006      	b.n	801f00a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801effc:	4b05      	ldr	r3, [pc, #20]	@ (801f014 <RCCEx_PLL3_Config+0x15c>)
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f004:	2b00      	cmp	r3, #0
 801f006:	d0f0      	beq.n	801efea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f008:	7bfb      	ldrb	r3, [r7, #15]
}
 801f00a:	4618      	mov	r0, r3
 801f00c:	3710      	adds	r7, #16
 801f00e:	46bd      	mov	sp, r7
 801f010:	bd80      	pop	{r7, pc}
 801f012:	bf00      	nop
 801f014:	58024400 	.word	0x58024400
 801f018:	ffff0007 	.word	0xffff0007

0801f01c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801f01c:	b580      	push	{r7, lr}
 801f01e:	b084      	sub	sp, #16
 801f020:	af00      	add	r7, sp, #0
 801f022:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	2b00      	cmp	r3, #0
 801f028:	d101      	bne.n	801f02e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801f02a:	2301      	movs	r3, #1
 801f02c:	e10f      	b.n	801f24e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	2200      	movs	r2, #0
 801f032:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	4a87      	ldr	r2, [pc, #540]	@ (801f258 <HAL_SPI_Init+0x23c>)
 801f03a:	4293      	cmp	r3, r2
 801f03c:	d00f      	beq.n	801f05e <HAL_SPI_Init+0x42>
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	4a86      	ldr	r2, [pc, #536]	@ (801f25c <HAL_SPI_Init+0x240>)
 801f044:	4293      	cmp	r3, r2
 801f046:	d00a      	beq.n	801f05e <HAL_SPI_Init+0x42>
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	4a84      	ldr	r2, [pc, #528]	@ (801f260 <HAL_SPI_Init+0x244>)
 801f04e:	4293      	cmp	r3, r2
 801f050:	d005      	beq.n	801f05e <HAL_SPI_Init+0x42>
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	68db      	ldr	r3, [r3, #12]
 801f056:	2b0f      	cmp	r3, #15
 801f058:	d901      	bls.n	801f05e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801f05a:	2301      	movs	r3, #1
 801f05c:	e0f7      	b.n	801f24e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801f05e:	6878      	ldr	r0, [r7, #4]
 801f060:	f000 fbba 	bl	801f7d8 <SPI_GetPacketSize>
 801f064:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	4a7b      	ldr	r2, [pc, #492]	@ (801f258 <HAL_SPI_Init+0x23c>)
 801f06c:	4293      	cmp	r3, r2
 801f06e:	d00c      	beq.n	801f08a <HAL_SPI_Init+0x6e>
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	4a79      	ldr	r2, [pc, #484]	@ (801f25c <HAL_SPI_Init+0x240>)
 801f076:	4293      	cmp	r3, r2
 801f078:	d007      	beq.n	801f08a <HAL_SPI_Init+0x6e>
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	4a78      	ldr	r2, [pc, #480]	@ (801f260 <HAL_SPI_Init+0x244>)
 801f080:	4293      	cmp	r3, r2
 801f082:	d002      	beq.n	801f08a <HAL_SPI_Init+0x6e>
 801f084:	68fb      	ldr	r3, [r7, #12]
 801f086:	2b08      	cmp	r3, #8
 801f088:	d811      	bhi.n	801f0ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f08e:	4a72      	ldr	r2, [pc, #456]	@ (801f258 <HAL_SPI_Init+0x23c>)
 801f090:	4293      	cmp	r3, r2
 801f092:	d009      	beq.n	801f0a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	4a70      	ldr	r2, [pc, #448]	@ (801f25c <HAL_SPI_Init+0x240>)
 801f09a:	4293      	cmp	r3, r2
 801f09c:	d004      	beq.n	801f0a8 <HAL_SPI_Init+0x8c>
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	4a6f      	ldr	r2, [pc, #444]	@ (801f260 <HAL_SPI_Init+0x244>)
 801f0a4:	4293      	cmp	r3, r2
 801f0a6:	d104      	bne.n	801f0b2 <HAL_SPI_Init+0x96>
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	2b10      	cmp	r3, #16
 801f0ac:	d901      	bls.n	801f0b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801f0ae:	2301      	movs	r3, #1
 801f0b0:	e0cd      	b.n	801f24e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f0b8:	b2db      	uxtb	r3, r3
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	d106      	bne.n	801f0cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801f0c6:	6878      	ldr	r0, [r7, #4]
 801f0c8:	f7e2 ffb0 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	2202      	movs	r2, #2
 801f0d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	681a      	ldr	r2, [r3, #0]
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	681b      	ldr	r3, [r3, #0]
 801f0de:	f022 0201 	bic.w	r2, r2, #1
 801f0e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	689b      	ldr	r3, [r3, #8]
 801f0ea:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801f0ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	699b      	ldr	r3, [r3, #24]
 801f0f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801f0f8:	d119      	bne.n	801f12e <HAL_SPI_Init+0x112>
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	685b      	ldr	r3, [r3, #4]
 801f0fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801f102:	d103      	bne.n	801f10c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d008      	beq.n	801f11e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f110:	2b00      	cmp	r3, #0
 801f112:	d10c      	bne.n	801f12e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f11c:	d107      	bne.n	801f12e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	681a      	ldr	r2, [r3, #0]
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801f12c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	685b      	ldr	r3, [r3, #4]
 801f132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f136:	2b00      	cmp	r3, #0
 801f138:	d00f      	beq.n	801f15a <HAL_SPI_Init+0x13e>
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	68db      	ldr	r3, [r3, #12]
 801f13e:	2b06      	cmp	r3, #6
 801f140:	d90b      	bls.n	801f15a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	681b      	ldr	r3, [r3, #0]
 801f148:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	430a      	orrs	r2, r1
 801f156:	601a      	str	r2, [r3, #0]
 801f158:	e007      	b.n	801f16a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	681a      	ldr	r2, [r3, #0]
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801f168:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	69da      	ldr	r2, [r3, #28]
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f172:	431a      	orrs	r2, r3
 801f174:	68bb      	ldr	r3, [r7, #8]
 801f176:	431a      	orrs	r2, r3
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f17c:	ea42 0103 	orr.w	r1, r2, r3
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	68da      	ldr	r2, [r3, #12]
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	430a      	orrs	r2, r1
 801f18a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f194:	431a      	orrs	r2, r3
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f19a:	431a      	orrs	r2, r3
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	699b      	ldr	r3, [r3, #24]
 801f1a0:	431a      	orrs	r2, r3
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	691b      	ldr	r3, [r3, #16]
 801f1a6:	431a      	orrs	r2, r3
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	695b      	ldr	r3, [r3, #20]
 801f1ac:	431a      	orrs	r2, r3
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	6a1b      	ldr	r3, [r3, #32]
 801f1b2:	431a      	orrs	r2, r3
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	685b      	ldr	r3, [r3, #4]
 801f1b8:	431a      	orrs	r2, r3
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f1be:	431a      	orrs	r2, r3
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	689b      	ldr	r3, [r3, #8]
 801f1c4:	431a      	orrs	r2, r3
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f1ca:	ea42 0103 	orr.w	r1, r2, r3
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	430a      	orrs	r2, r1
 801f1d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	685b      	ldr	r3, [r3, #4]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d113      	bne.n	801f20a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	689b      	ldr	r3, [r3, #8]
 801f1e8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f1f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	689b      	ldr	r3, [r3, #8]
 801f1fc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801f208:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	f022 0201 	bic.w	r2, r2, #1
 801f218:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	685b      	ldr	r3, [r3, #4]
 801f21e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f222:	2b00      	cmp	r3, #0
 801f224:	d00a      	beq.n	801f23c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	68db      	ldr	r3, [r3, #12]
 801f22c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	430a      	orrs	r2, r1
 801f23a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	2200      	movs	r2, #0
 801f240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	2201      	movs	r2, #1
 801f248:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801f24c:	2300      	movs	r3, #0
}
 801f24e:	4618      	mov	r0, r3
 801f250:	3710      	adds	r7, #16
 801f252:	46bd      	mov	sp, r7
 801f254:	bd80      	pop	{r7, pc}
 801f256:	bf00      	nop
 801f258:	40013000 	.word	0x40013000
 801f25c:	40003800 	.word	0x40003800
 801f260:	40003c00 	.word	0x40003c00

0801f264 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801f264:	b580      	push	{r7, lr}
 801f266:	b08a      	sub	sp, #40	@ 0x28
 801f268:	af00      	add	r7, sp, #0
 801f26a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	691b      	ldr	r3, [r3, #16]
 801f272:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	695b      	ldr	r3, [r3, #20]
 801f27a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801f27c:	6a3a      	ldr	r2, [r7, #32]
 801f27e:	69fb      	ldr	r3, [r7, #28]
 801f280:	4013      	ands	r3, r2
 801f282:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	689b      	ldr	r3, [r3, #8]
 801f28a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801f28c:	2300      	movs	r3, #0
 801f28e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f296:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	3330      	adds	r3, #48	@ 0x30
 801f29e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801f2a0:	69fb      	ldr	r3, [r7, #28]
 801f2a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d010      	beq.n	801f2cc <HAL_SPI_IRQHandler+0x68>
 801f2aa:	6a3b      	ldr	r3, [r7, #32]
 801f2ac:	f003 0308 	and.w	r3, r3, #8
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d00b      	beq.n	801f2cc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	699a      	ldr	r2, [r3, #24]
 801f2ba:	687b      	ldr	r3, [r7, #4]
 801f2bc:	681b      	ldr	r3, [r3, #0]
 801f2be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f2c2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801f2c4:	6878      	ldr	r0, [r7, #4]
 801f2c6:	f000 f9c3 	bl	801f650 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801f2ca:	e192      	b.n	801f5f2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f2cc:	69bb      	ldr	r3, [r7, #24]
 801f2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d113      	bne.n	801f2fe <HAL_SPI_IRQHandler+0x9a>
 801f2d6:	69bb      	ldr	r3, [r7, #24]
 801f2d8:	f003 0320 	and.w	r3, r3, #32
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d10e      	bne.n	801f2fe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801f2e0:	69bb      	ldr	r3, [r7, #24]
 801f2e2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d009      	beq.n	801f2fe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f2ee:	6878      	ldr	r0, [r7, #4]
 801f2f0:	4798      	blx	r3
    hspi->RxISR(hspi);
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f2f6:	6878      	ldr	r0, [r7, #4]
 801f2f8:	4798      	blx	r3
    handled = 1UL;
 801f2fa:	2301      	movs	r3, #1
 801f2fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f2fe:	69bb      	ldr	r3, [r7, #24]
 801f300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f304:	2b00      	cmp	r3, #0
 801f306:	d10f      	bne.n	801f328 <HAL_SPI_IRQHandler+0xc4>
 801f308:	69bb      	ldr	r3, [r7, #24]
 801f30a:	f003 0301 	and.w	r3, r3, #1
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d00a      	beq.n	801f328 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f312:	69bb      	ldr	r3, [r7, #24]
 801f314:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d105      	bne.n	801f328 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f320:	6878      	ldr	r0, [r7, #4]
 801f322:	4798      	blx	r3
    handled = 1UL;
 801f324:	2301      	movs	r3, #1
 801f326:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f328:	69bb      	ldr	r3, [r7, #24]
 801f32a:	f003 0320 	and.w	r3, r3, #32
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d10f      	bne.n	801f352 <HAL_SPI_IRQHandler+0xee>
 801f332:	69bb      	ldr	r3, [r7, #24]
 801f334:	f003 0302 	and.w	r3, r3, #2
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d00a      	beq.n	801f352 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f33c:	69bb      	ldr	r3, [r7, #24]
 801f33e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f342:	2b00      	cmp	r3, #0
 801f344:	d105      	bne.n	801f352 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f34a:	6878      	ldr	r0, [r7, #4]
 801f34c:	4798      	blx	r3
    handled = 1UL;
 801f34e:	2301      	movs	r3, #1
 801f350:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801f352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f354:	2b00      	cmp	r3, #0
 801f356:	f040 8147 	bne.w	801f5e8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801f35a:	69bb      	ldr	r3, [r7, #24]
 801f35c:	f003 0308 	and.w	r3, r3, #8
 801f360:	2b00      	cmp	r3, #0
 801f362:	f000 808b 	beq.w	801f47c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	681b      	ldr	r3, [r3, #0]
 801f36a:	699a      	ldr	r2, [r3, #24]
 801f36c:	687b      	ldr	r3, [r7, #4]
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	f042 0208 	orr.w	r2, r2, #8
 801f374:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	681b      	ldr	r3, [r3, #0]
 801f37a:	699a      	ldr	r2, [r3, #24]
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	f042 0210 	orr.w	r2, r2, #16
 801f384:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	699a      	ldr	r2, [r3, #24]
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f394:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801f396:	687b      	ldr	r3, [r7, #4]
 801f398:	681b      	ldr	r3, [r3, #0]
 801f39a:	691a      	ldr	r2, [r3, #16]
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	f022 0208 	bic.w	r2, r2, #8
 801f3a4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	689b      	ldr	r3, [r3, #8]
 801f3ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d13d      	bne.n	801f430 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801f3b4:	e036      	b.n	801f424 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	68db      	ldr	r3, [r3, #12]
 801f3ba:	2b0f      	cmp	r3, #15
 801f3bc:	d90b      	bls.n	801f3d6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	681a      	ldr	r2, [r3, #0]
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f3c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801f3c8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801f3ca:	687b      	ldr	r3, [r7, #4]
 801f3cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f3ce:	1d1a      	adds	r2, r3, #4
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	665a      	str	r2, [r3, #100]	@ 0x64
 801f3d4:	e01d      	b.n	801f412 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	68db      	ldr	r3, [r3, #12]
 801f3da:	2b07      	cmp	r3, #7
 801f3dc:	d90b      	bls.n	801f3f6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f3e2:	68fa      	ldr	r2, [r7, #12]
 801f3e4:	8812      	ldrh	r2, [r2, #0]
 801f3e6:	b292      	uxth	r2, r2
 801f3e8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f3ee:	1c9a      	adds	r2, r3, #2
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	665a      	str	r2, [r3, #100]	@ 0x64
 801f3f4:	e00d      	b.n	801f412 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f402:	7812      	ldrb	r2, [r2, #0]
 801f404:	b2d2      	uxtb	r2, r2
 801f406:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f40c:	1c5a      	adds	r2, r3, #1
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f418:	b29b      	uxth	r3, r3
 801f41a:	3b01      	subs	r3, #1
 801f41c:	b29a      	uxth	r2, r3
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f42a:	b29b      	uxth	r3, r3
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d1c2      	bne.n	801f3b6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801f430:	6878      	ldr	r0, [r7, #4]
 801f432:	f000 f931 	bl	801f698 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	2201      	movs	r2, #1
 801f43a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f444:	2b00      	cmp	r3, #0
 801f446:	d003      	beq.n	801f450 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801f448:	6878      	ldr	r0, [r7, #4]
 801f44a:	f000 f8f7 	bl	801f63c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801f44e:	e0d0      	b.n	801f5f2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801f450:	7cfb      	ldrb	r3, [r7, #19]
 801f452:	2b05      	cmp	r3, #5
 801f454:	d103      	bne.n	801f45e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801f456:	6878      	ldr	r0, [r7, #4]
 801f458:	f000 f8e6 	bl	801f628 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801f45c:	e0c6      	b.n	801f5ec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801f45e:	7cfb      	ldrb	r3, [r7, #19]
 801f460:	2b04      	cmp	r3, #4
 801f462:	d103      	bne.n	801f46c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801f464:	6878      	ldr	r0, [r7, #4]
 801f466:	f000 f8d5 	bl	801f614 <HAL_SPI_RxCpltCallback>
    return;
 801f46a:	e0bf      	b.n	801f5ec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801f46c:	7cfb      	ldrb	r3, [r7, #19]
 801f46e:	2b03      	cmp	r3, #3
 801f470:	f040 80bc 	bne.w	801f5ec <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801f474:	6878      	ldr	r0, [r7, #4]
 801f476:	f000 f8c3 	bl	801f600 <HAL_SPI_TxCpltCallback>
    return;
 801f47a:	e0b7      	b.n	801f5ec <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801f47c:	69bb      	ldr	r3, [r7, #24]
 801f47e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801f482:	2b00      	cmp	r3, #0
 801f484:	f000 80b5 	beq.w	801f5f2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801f488:	69bb      	ldr	r3, [r7, #24]
 801f48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d00f      	beq.n	801f4b2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f498:	f043 0204 	orr.w	r2, r3, #4
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	681b      	ldr	r3, [r3, #0]
 801f4a6:	699a      	ldr	r2, [r3, #24]
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	681b      	ldr	r3, [r3, #0]
 801f4ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f4b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801f4b2:	69bb      	ldr	r3, [r7, #24]
 801f4b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d00f      	beq.n	801f4dc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f4c2:	f043 0201 	orr.w	r2, r3, #1
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	681b      	ldr	r3, [r3, #0]
 801f4d0:	699a      	ldr	r2, [r3, #24]
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	681b      	ldr	r3, [r3, #0]
 801f4d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f4da:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801f4dc:	69bb      	ldr	r3, [r7, #24]
 801f4de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d00f      	beq.n	801f506 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f4ec:	f043 0208 	orr.w	r2, r3, #8
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	699a      	ldr	r2, [r3, #24]
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f504:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801f506:	69bb      	ldr	r3, [r7, #24]
 801f508:	f003 0320 	and.w	r3, r3, #32
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d00f      	beq.n	801f530 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f516:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	699a      	ldr	r2, [r3, #24]
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	f042 0220 	orr.w	r2, r2, #32
 801f52e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f536:	2b00      	cmp	r3, #0
 801f538:	d05a      	beq.n	801f5f0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	681a      	ldr	r2, [r3, #0]
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	f022 0201 	bic.w	r2, r2, #1
 801f548:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	6919      	ldr	r1, [r3, #16]
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	681a      	ldr	r2, [r3, #0]
 801f554:	4b28      	ldr	r3, [pc, #160]	@ (801f5f8 <HAL_SPI_IRQHandler+0x394>)
 801f556:	400b      	ands	r3, r1
 801f558:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f55a:	697b      	ldr	r3, [r7, #20]
 801f55c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f560:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801f564:	d138      	bne.n	801f5d8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	689a      	ldr	r2, [r3, #8]
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f574:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	d013      	beq.n	801f5a6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801f57e:	687b      	ldr	r3, [r7, #4]
 801f580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f582:	4a1e      	ldr	r2, [pc, #120]	@ (801f5fc <HAL_SPI_IRQHandler+0x398>)
 801f584:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f58a:	4618      	mov	r0, r3
 801f58c:	f7fb f850 	bl	801a630 <HAL_DMA_Abort_IT>
 801f590:	4603      	mov	r3, r0
 801f592:	2b00      	cmp	r3, #0
 801f594:	d007      	beq.n	801f5a6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f59c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d020      	beq.n	801f5f0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f5b2:	4a12      	ldr	r2, [pc, #72]	@ (801f5fc <HAL_SPI_IRQHandler+0x398>)
 801f5b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f5ba:	4618      	mov	r0, r3
 801f5bc:	f7fb f838 	bl	801a630 <HAL_DMA_Abort_IT>
 801f5c0:	4603      	mov	r3, r0
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d014      	beq.n	801f5f0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f5cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801f5d6:	e00b      	b.n	801f5f0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	2201      	movs	r2, #1
 801f5dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801f5e0:	6878      	ldr	r0, [r7, #4]
 801f5e2:	f000 f82b 	bl	801f63c <HAL_SPI_ErrorCallback>
    return;
 801f5e6:	e003      	b.n	801f5f0 <HAL_SPI_IRQHandler+0x38c>
    return;
 801f5e8:	bf00      	nop
 801f5ea:	e002      	b.n	801f5f2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f5ec:	bf00      	nop
 801f5ee:	e000      	b.n	801f5f2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f5f0:	bf00      	nop
  }
}
 801f5f2:	3728      	adds	r7, #40	@ 0x28
 801f5f4:	46bd      	mov	sp, r7
 801f5f6:	bd80      	pop	{r7, pc}
 801f5f8:	fffffc94 	.word	0xfffffc94
 801f5fc:	0801f665 	.word	0x0801f665

0801f600 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f600:	b480      	push	{r7}
 801f602:	b083      	sub	sp, #12
 801f604:	af00      	add	r7, sp, #0
 801f606:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801f608:	bf00      	nop
 801f60a:	370c      	adds	r7, #12
 801f60c:	46bd      	mov	sp, r7
 801f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f612:	4770      	bx	lr

0801f614 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f614:	b480      	push	{r7}
 801f616:	b083      	sub	sp, #12
 801f618:	af00      	add	r7, sp, #0
 801f61a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801f61c:	bf00      	nop
 801f61e:	370c      	adds	r7, #12
 801f620:	46bd      	mov	sp, r7
 801f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f626:	4770      	bx	lr

0801f628 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f628:	b480      	push	{r7}
 801f62a:	b083      	sub	sp, #12
 801f62c:	af00      	add	r7, sp, #0
 801f62e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801f630:	bf00      	nop
 801f632:	370c      	adds	r7, #12
 801f634:	46bd      	mov	sp, r7
 801f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f63a:	4770      	bx	lr

0801f63c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f63c:	b480      	push	{r7}
 801f63e:	b083      	sub	sp, #12
 801f640:	af00      	add	r7, sp, #0
 801f642:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801f644:	bf00      	nop
 801f646:	370c      	adds	r7, #12
 801f648:	46bd      	mov	sp, r7
 801f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f64e:	4770      	bx	lr

0801f650 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f650:	b480      	push	{r7}
 801f652:	b083      	sub	sp, #12
 801f654:	af00      	add	r7, sp, #0
 801f656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801f658:	bf00      	nop
 801f65a:	370c      	adds	r7, #12
 801f65c:	46bd      	mov	sp, r7
 801f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f662:	4770      	bx	lr

0801f664 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f664:	b580      	push	{r7, lr}
 801f666:	b084      	sub	sp, #16
 801f668:	af00      	add	r7, sp, #0
 801f66a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f670:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801f672:	68fb      	ldr	r3, [r7, #12]
 801f674:	2200      	movs	r2, #0
 801f676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	2200      	movs	r2, #0
 801f67e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	2201      	movs	r2, #1
 801f686:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801f68a:	68f8      	ldr	r0, [r7, #12]
 801f68c:	f7ff ffd6 	bl	801f63c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801f690:	bf00      	nop
 801f692:	3710      	adds	r7, #16
 801f694:	46bd      	mov	sp, r7
 801f696:	bd80      	pop	{r7, pc}

0801f698 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801f698:	b480      	push	{r7}
 801f69a:	b085      	sub	sp, #20
 801f69c:	af00      	add	r7, sp, #0
 801f69e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	681b      	ldr	r3, [r3, #0]
 801f6a4:	695b      	ldr	r3, [r3, #20]
 801f6a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	681b      	ldr	r3, [r3, #0]
 801f6ac:	699a      	ldr	r2, [r3, #24]
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	681b      	ldr	r3, [r3, #0]
 801f6b2:	f042 0208 	orr.w	r2, r2, #8
 801f6b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	681b      	ldr	r3, [r3, #0]
 801f6bc:	699a      	ldr	r2, [r3, #24]
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	681b      	ldr	r3, [r3, #0]
 801f6c2:	f042 0210 	orr.w	r2, r2, #16
 801f6c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	681b      	ldr	r3, [r3, #0]
 801f6cc:	681a      	ldr	r2, [r3, #0]
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	681b      	ldr	r3, [r3, #0]
 801f6d2:	f022 0201 	bic.w	r2, r2, #1
 801f6d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	6919      	ldr	r1, [r3, #16]
 801f6de:	687b      	ldr	r3, [r7, #4]
 801f6e0:	681a      	ldr	r2, [r3, #0]
 801f6e2:	4b3c      	ldr	r3, [pc, #240]	@ (801f7d4 <SPI_CloseTransfer+0x13c>)
 801f6e4:	400b      	ands	r3, r1
 801f6e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	689a      	ldr	r2, [r3, #8]
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f6f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f6fe:	b2db      	uxtb	r3, r3
 801f700:	2b04      	cmp	r3, #4
 801f702:	d014      	beq.n	801f72e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	f003 0320 	and.w	r3, r3, #32
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d00f      	beq.n	801f72e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f714:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	699a      	ldr	r2, [r3, #24]
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	f042 0220 	orr.w	r2, r2, #32
 801f72c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f734:	b2db      	uxtb	r3, r3
 801f736:	2b03      	cmp	r3, #3
 801f738:	d014      	beq.n	801f764 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f740:	2b00      	cmp	r3, #0
 801f742:	d00f      	beq.n	801f764 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f74a:	f043 0204 	orr.w	r2, r3, #4
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f754:	687b      	ldr	r3, [r7, #4]
 801f756:	681b      	ldr	r3, [r3, #0]
 801f758:	699a      	ldr	r2, [r3, #24]
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	681b      	ldr	r3, [r3, #0]
 801f75e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f762:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801f764:	68fb      	ldr	r3, [r7, #12]
 801f766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	d00f      	beq.n	801f78e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f774:	f043 0201 	orr.w	r2, r3, #1
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	681b      	ldr	r3, [r3, #0]
 801f782:	699a      	ldr	r2, [r3, #24]
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f78c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f794:	2b00      	cmp	r3, #0
 801f796:	d00f      	beq.n	801f7b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f79e:	f043 0208 	orr.w	r2, r3, #8
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	699a      	ldr	r2, [r3, #24]
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f7b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	2200      	movs	r2, #0
 801f7bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	2200      	movs	r2, #0
 801f7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801f7c8:	bf00      	nop
 801f7ca:	3714      	adds	r7, #20
 801f7cc:	46bd      	mov	sp, r7
 801f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7d2:	4770      	bx	lr
 801f7d4:	fffffc90 	.word	0xfffffc90

0801f7d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801f7d8:	b480      	push	{r7}
 801f7da:	b085      	sub	sp, #20
 801f7dc:	af00      	add	r7, sp, #0
 801f7de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f7e4:	095b      	lsrs	r3, r3, #5
 801f7e6:	3301      	adds	r3, #1
 801f7e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	68db      	ldr	r3, [r3, #12]
 801f7ee:	3301      	adds	r3, #1
 801f7f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801f7f2:	68bb      	ldr	r3, [r7, #8]
 801f7f4:	3307      	adds	r3, #7
 801f7f6:	08db      	lsrs	r3, r3, #3
 801f7f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801f7fa:	68bb      	ldr	r3, [r7, #8]
 801f7fc:	68fa      	ldr	r2, [r7, #12]
 801f7fe:	fb02 f303 	mul.w	r3, r2, r3
}
 801f802:	4618      	mov	r0, r3
 801f804:	3714      	adds	r7, #20
 801f806:	46bd      	mov	sp, r7
 801f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f80c:	4770      	bx	lr

0801f80e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f80e:	b580      	push	{r7, lr}
 801f810:	b082      	sub	sp, #8
 801f812:	af00      	add	r7, sp, #0
 801f814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d101      	bne.n	801f820 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f81c:	2301      	movs	r3, #1
 801f81e:	e049      	b.n	801f8b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f826:	b2db      	uxtb	r3, r3
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d106      	bne.n	801f83a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	2200      	movs	r2, #0
 801f830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f834:	6878      	ldr	r0, [r7, #4]
 801f836:	f7e2 fd8b 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f83a:	687b      	ldr	r3, [r7, #4]
 801f83c:	2202      	movs	r2, #2
 801f83e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f842:	687b      	ldr	r3, [r7, #4]
 801f844:	681a      	ldr	r2, [r3, #0]
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	3304      	adds	r3, #4
 801f84a:	4619      	mov	r1, r3
 801f84c:	4610      	mov	r0, r2
 801f84e:	f000 fb1b 	bl	801fe88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	2201      	movs	r2, #1
 801f856:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	2201      	movs	r2, #1
 801f85e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	2201      	movs	r2, #1
 801f866:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	2201      	movs	r2, #1
 801f86e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	2201      	movs	r2, #1
 801f876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	2201      	movs	r2, #1
 801f87e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	2201      	movs	r2, #1
 801f886:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	2201      	movs	r2, #1
 801f88e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	2201      	movs	r2, #1
 801f896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	2201      	movs	r2, #1
 801f89e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	2201      	movs	r2, #1
 801f8a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	2201      	movs	r2, #1
 801f8ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f8b2:	2300      	movs	r3, #0
}
 801f8b4:	4618      	mov	r0, r3
 801f8b6:	3708      	adds	r7, #8
 801f8b8:	46bd      	mov	sp, r7
 801f8ba:	bd80      	pop	{r7, pc}

0801f8bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f8bc:	b480      	push	{r7}
 801f8be:	b085      	sub	sp, #20
 801f8c0:	af00      	add	r7, sp, #0
 801f8c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f8ca:	b2db      	uxtb	r3, r3
 801f8cc:	2b01      	cmp	r3, #1
 801f8ce:	d001      	beq.n	801f8d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f8d0:	2301      	movs	r3, #1
 801f8d2:	e054      	b.n	801f97e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	2202      	movs	r2, #2
 801f8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	68da      	ldr	r2, [r3, #12]
 801f8e2:	687b      	ldr	r3, [r7, #4]
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	f042 0201 	orr.w	r2, r2, #1
 801f8ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	4a26      	ldr	r2, [pc, #152]	@ (801f98c <HAL_TIM_Base_Start_IT+0xd0>)
 801f8f2:	4293      	cmp	r3, r2
 801f8f4:	d022      	beq.n	801f93c <HAL_TIM_Base_Start_IT+0x80>
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f8fe:	d01d      	beq.n	801f93c <HAL_TIM_Base_Start_IT+0x80>
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	4a22      	ldr	r2, [pc, #136]	@ (801f990 <HAL_TIM_Base_Start_IT+0xd4>)
 801f906:	4293      	cmp	r3, r2
 801f908:	d018      	beq.n	801f93c <HAL_TIM_Base_Start_IT+0x80>
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	681b      	ldr	r3, [r3, #0]
 801f90e:	4a21      	ldr	r2, [pc, #132]	@ (801f994 <HAL_TIM_Base_Start_IT+0xd8>)
 801f910:	4293      	cmp	r3, r2
 801f912:	d013      	beq.n	801f93c <HAL_TIM_Base_Start_IT+0x80>
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	4a1f      	ldr	r2, [pc, #124]	@ (801f998 <HAL_TIM_Base_Start_IT+0xdc>)
 801f91a:	4293      	cmp	r3, r2
 801f91c:	d00e      	beq.n	801f93c <HAL_TIM_Base_Start_IT+0x80>
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	4a1e      	ldr	r2, [pc, #120]	@ (801f99c <HAL_TIM_Base_Start_IT+0xe0>)
 801f924:	4293      	cmp	r3, r2
 801f926:	d009      	beq.n	801f93c <HAL_TIM_Base_Start_IT+0x80>
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	4a1c      	ldr	r2, [pc, #112]	@ (801f9a0 <HAL_TIM_Base_Start_IT+0xe4>)
 801f92e:	4293      	cmp	r3, r2
 801f930:	d004      	beq.n	801f93c <HAL_TIM_Base_Start_IT+0x80>
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	4a1b      	ldr	r2, [pc, #108]	@ (801f9a4 <HAL_TIM_Base_Start_IT+0xe8>)
 801f938:	4293      	cmp	r3, r2
 801f93a:	d115      	bne.n	801f968 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	681b      	ldr	r3, [r3, #0]
 801f940:	689a      	ldr	r2, [r3, #8]
 801f942:	4b19      	ldr	r3, [pc, #100]	@ (801f9a8 <HAL_TIM_Base_Start_IT+0xec>)
 801f944:	4013      	ands	r3, r2
 801f946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f948:	68fb      	ldr	r3, [r7, #12]
 801f94a:	2b06      	cmp	r3, #6
 801f94c:	d015      	beq.n	801f97a <HAL_TIM_Base_Start_IT+0xbe>
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f954:	d011      	beq.n	801f97a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	681b      	ldr	r3, [r3, #0]
 801f95a:	681a      	ldr	r2, [r3, #0]
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	681b      	ldr	r3, [r3, #0]
 801f960:	f042 0201 	orr.w	r2, r2, #1
 801f964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f966:	e008      	b.n	801f97a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	681a      	ldr	r2, [r3, #0]
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	f042 0201 	orr.w	r2, r2, #1
 801f976:	601a      	str	r2, [r3, #0]
 801f978:	e000      	b.n	801f97c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f97a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f97c:	2300      	movs	r3, #0
}
 801f97e:	4618      	mov	r0, r3
 801f980:	3714      	adds	r7, #20
 801f982:	46bd      	mov	sp, r7
 801f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f988:	4770      	bx	lr
 801f98a:	bf00      	nop
 801f98c:	40010000 	.word	0x40010000
 801f990:	40000400 	.word	0x40000400
 801f994:	40000800 	.word	0x40000800
 801f998:	40000c00 	.word	0x40000c00
 801f99c:	40010400 	.word	0x40010400
 801f9a0:	40001800 	.word	0x40001800
 801f9a4:	40014000 	.word	0x40014000
 801f9a8:	00010007 	.word	0x00010007

0801f9ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801f9ac:	b580      	push	{r7, lr}
 801f9ae:	b082      	sub	sp, #8
 801f9b0:	af00      	add	r7, sp, #0
 801f9b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f9b4:	687b      	ldr	r3, [r7, #4]
 801f9b6:	2b00      	cmp	r3, #0
 801f9b8:	d101      	bne.n	801f9be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801f9ba:	2301      	movs	r3, #1
 801f9bc:	e049      	b.n	801fa52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f9c4:	b2db      	uxtb	r3, r3
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d106      	bne.n	801f9d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	2200      	movs	r2, #0
 801f9ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801f9d2:	6878      	ldr	r0, [r7, #4]
 801f9d4:	f000 f841 	bl	801fa5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	2202      	movs	r2, #2
 801f9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	681a      	ldr	r2, [r3, #0]
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	3304      	adds	r3, #4
 801f9e8:	4619      	mov	r1, r3
 801f9ea:	4610      	mov	r0, r2
 801f9ec:	f000 fa4c 	bl	801fe88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	2201      	movs	r2, #1
 801f9f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	2201      	movs	r2, #1
 801f9fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	2201      	movs	r2, #1
 801fa04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801fa08:	687b      	ldr	r3, [r7, #4]
 801fa0a:	2201      	movs	r2, #1
 801fa0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	2201      	movs	r2, #1
 801fa14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801fa18:	687b      	ldr	r3, [r7, #4]
 801fa1a:	2201      	movs	r2, #1
 801fa1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801fa20:	687b      	ldr	r3, [r7, #4]
 801fa22:	2201      	movs	r2, #1
 801fa24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	2201      	movs	r2, #1
 801fa2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	2201      	movs	r2, #1
 801fa34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	2201      	movs	r2, #1
 801fa3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801fa40:	687b      	ldr	r3, [r7, #4]
 801fa42:	2201      	movs	r2, #1
 801fa44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	2201      	movs	r2, #1
 801fa4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801fa50:	2300      	movs	r3, #0
}
 801fa52:	4618      	mov	r0, r3
 801fa54:	3708      	adds	r7, #8
 801fa56:	46bd      	mov	sp, r7
 801fa58:	bd80      	pop	{r7, pc}

0801fa5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801fa5a:	b480      	push	{r7}
 801fa5c:	b083      	sub	sp, #12
 801fa5e:	af00      	add	r7, sp, #0
 801fa60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801fa62:	bf00      	nop
 801fa64:	370c      	adds	r7, #12
 801fa66:	46bd      	mov	sp, r7
 801fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa6c:	4770      	bx	lr
	...

0801fa70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801fa70:	b580      	push	{r7, lr}
 801fa72:	b086      	sub	sp, #24
 801fa74:	af00      	add	r7, sp, #0
 801fa76:	60f8      	str	r0, [r7, #12]
 801fa78:	60b9      	str	r1, [r7, #8]
 801fa7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801fa80:	68fb      	ldr	r3, [r7, #12]
 801fa82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801fa86:	2b01      	cmp	r3, #1
 801fa88:	d101      	bne.n	801fa8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801fa8a:	2302      	movs	r3, #2
 801fa8c:	e0ff      	b.n	801fc8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801fa8e:	68fb      	ldr	r3, [r7, #12]
 801fa90:	2201      	movs	r2, #1
 801fa92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	2b14      	cmp	r3, #20
 801fa9a:	f200 80f0 	bhi.w	801fc7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801fa9e:	a201      	add	r2, pc, #4	@ (adr r2, 801faa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801faa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801faa4:	0801faf9 	.word	0x0801faf9
 801faa8:	0801fc7f 	.word	0x0801fc7f
 801faac:	0801fc7f 	.word	0x0801fc7f
 801fab0:	0801fc7f 	.word	0x0801fc7f
 801fab4:	0801fb39 	.word	0x0801fb39
 801fab8:	0801fc7f 	.word	0x0801fc7f
 801fabc:	0801fc7f 	.word	0x0801fc7f
 801fac0:	0801fc7f 	.word	0x0801fc7f
 801fac4:	0801fb7b 	.word	0x0801fb7b
 801fac8:	0801fc7f 	.word	0x0801fc7f
 801facc:	0801fc7f 	.word	0x0801fc7f
 801fad0:	0801fc7f 	.word	0x0801fc7f
 801fad4:	0801fbbb 	.word	0x0801fbbb
 801fad8:	0801fc7f 	.word	0x0801fc7f
 801fadc:	0801fc7f 	.word	0x0801fc7f
 801fae0:	0801fc7f 	.word	0x0801fc7f
 801fae4:	0801fbfd 	.word	0x0801fbfd
 801fae8:	0801fc7f 	.word	0x0801fc7f
 801faec:	0801fc7f 	.word	0x0801fc7f
 801faf0:	0801fc7f 	.word	0x0801fc7f
 801faf4:	0801fc3d 	.word	0x0801fc3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801faf8:	68fb      	ldr	r3, [r7, #12]
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	68b9      	ldr	r1, [r7, #8]
 801fafe:	4618      	mov	r0, r3
 801fb00:	f000 fa68 	bl	801ffd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	699a      	ldr	r2, [r3, #24]
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	f042 0208 	orr.w	r2, r2, #8
 801fb12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	699a      	ldr	r2, [r3, #24]
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	f022 0204 	bic.w	r2, r2, #4
 801fb22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801fb24:	68fb      	ldr	r3, [r7, #12]
 801fb26:	681b      	ldr	r3, [r3, #0]
 801fb28:	6999      	ldr	r1, [r3, #24]
 801fb2a:	68bb      	ldr	r3, [r7, #8]
 801fb2c:	691a      	ldr	r2, [r3, #16]
 801fb2e:	68fb      	ldr	r3, [r7, #12]
 801fb30:	681b      	ldr	r3, [r3, #0]
 801fb32:	430a      	orrs	r2, r1
 801fb34:	619a      	str	r2, [r3, #24]
      break;
 801fb36:	e0a5      	b.n	801fc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801fb38:	68fb      	ldr	r3, [r7, #12]
 801fb3a:	681b      	ldr	r3, [r3, #0]
 801fb3c:	68b9      	ldr	r1, [r7, #8]
 801fb3e:	4618      	mov	r0, r3
 801fb40:	f000 fad8 	bl	80200f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801fb44:	68fb      	ldr	r3, [r7, #12]
 801fb46:	681b      	ldr	r3, [r3, #0]
 801fb48:	699a      	ldr	r2, [r3, #24]
 801fb4a:	68fb      	ldr	r3, [r7, #12]
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fb52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801fb54:	68fb      	ldr	r3, [r7, #12]
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	699a      	ldr	r2, [r3, #24]
 801fb5a:	68fb      	ldr	r3, [r7, #12]
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801fb62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	6999      	ldr	r1, [r3, #24]
 801fb6a:	68bb      	ldr	r3, [r7, #8]
 801fb6c:	691b      	ldr	r3, [r3, #16]
 801fb6e:	021a      	lsls	r2, r3, #8
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	681b      	ldr	r3, [r3, #0]
 801fb74:	430a      	orrs	r2, r1
 801fb76:	619a      	str	r2, [r3, #24]
      break;
 801fb78:	e084      	b.n	801fc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801fb7a:	68fb      	ldr	r3, [r7, #12]
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	68b9      	ldr	r1, [r7, #8]
 801fb80:	4618      	mov	r0, r3
 801fb82:	f000 fb41 	bl	8020208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801fb86:	68fb      	ldr	r3, [r7, #12]
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	69da      	ldr	r2, [r3, #28]
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	681b      	ldr	r3, [r3, #0]
 801fb90:	f042 0208 	orr.w	r2, r2, #8
 801fb94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	681b      	ldr	r3, [r3, #0]
 801fb9a:	69da      	ldr	r2, [r3, #28]
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	f022 0204 	bic.w	r2, r2, #4
 801fba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	69d9      	ldr	r1, [r3, #28]
 801fbac:	68bb      	ldr	r3, [r7, #8]
 801fbae:	691a      	ldr	r2, [r3, #16]
 801fbb0:	68fb      	ldr	r3, [r7, #12]
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	430a      	orrs	r2, r1
 801fbb6:	61da      	str	r2, [r3, #28]
      break;
 801fbb8:	e064      	b.n	801fc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801fbba:	68fb      	ldr	r3, [r7, #12]
 801fbbc:	681b      	ldr	r3, [r3, #0]
 801fbbe:	68b9      	ldr	r1, [r7, #8]
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	f000 fba9 	bl	8020318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	681b      	ldr	r3, [r3, #0]
 801fbca:	69da      	ldr	r2, [r3, #28]
 801fbcc:	68fb      	ldr	r3, [r7, #12]
 801fbce:	681b      	ldr	r3, [r3, #0]
 801fbd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fbd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801fbd6:	68fb      	ldr	r3, [r7, #12]
 801fbd8:	681b      	ldr	r3, [r3, #0]
 801fbda:	69da      	ldr	r2, [r3, #28]
 801fbdc:	68fb      	ldr	r3, [r7, #12]
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801fbe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801fbe6:	68fb      	ldr	r3, [r7, #12]
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	69d9      	ldr	r1, [r3, #28]
 801fbec:	68bb      	ldr	r3, [r7, #8]
 801fbee:	691b      	ldr	r3, [r3, #16]
 801fbf0:	021a      	lsls	r2, r3, #8
 801fbf2:	68fb      	ldr	r3, [r7, #12]
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	430a      	orrs	r2, r1
 801fbf8:	61da      	str	r2, [r3, #28]
      break;
 801fbfa:	e043      	b.n	801fc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801fbfc:	68fb      	ldr	r3, [r7, #12]
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	68b9      	ldr	r1, [r7, #8]
 801fc02:	4618      	mov	r0, r3
 801fc04:	f000 fbf2 	bl	80203ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801fc08:	68fb      	ldr	r3, [r7, #12]
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fc0e:	68fb      	ldr	r3, [r7, #12]
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	f042 0208 	orr.w	r2, r2, #8
 801fc16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fc1e:	68fb      	ldr	r3, [r7, #12]
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	f022 0204 	bic.w	r2, r2, #4
 801fc26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801fc2e:	68bb      	ldr	r3, [r7, #8]
 801fc30:	691a      	ldr	r2, [r3, #16]
 801fc32:	68fb      	ldr	r3, [r7, #12]
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	430a      	orrs	r2, r1
 801fc38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801fc3a:	e023      	b.n	801fc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801fc3c:	68fb      	ldr	r3, [r7, #12]
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	68b9      	ldr	r1, [r7, #8]
 801fc42:	4618      	mov	r0, r3
 801fc44:	f000 fc36 	bl	80204b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801fc48:	68fb      	ldr	r3, [r7, #12]
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fc4e:	68fb      	ldr	r3, [r7, #12]
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fc56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801fc58:	68fb      	ldr	r3, [r7, #12]
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801fc66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801fc68:	68fb      	ldr	r3, [r7, #12]
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801fc6e:	68bb      	ldr	r3, [r7, #8]
 801fc70:	691b      	ldr	r3, [r3, #16]
 801fc72:	021a      	lsls	r2, r3, #8
 801fc74:	68fb      	ldr	r3, [r7, #12]
 801fc76:	681b      	ldr	r3, [r3, #0]
 801fc78:	430a      	orrs	r2, r1
 801fc7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801fc7c:	e002      	b.n	801fc84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801fc7e:	2301      	movs	r3, #1
 801fc80:	75fb      	strb	r3, [r7, #23]
      break;
 801fc82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801fc84:	68fb      	ldr	r3, [r7, #12]
 801fc86:	2200      	movs	r2, #0
 801fc88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801fc8c:	7dfb      	ldrb	r3, [r7, #23]
}
 801fc8e:	4618      	mov	r0, r3
 801fc90:	3718      	adds	r7, #24
 801fc92:	46bd      	mov	sp, r7
 801fc94:	bd80      	pop	{r7, pc}
 801fc96:	bf00      	nop

0801fc98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801fc98:	b580      	push	{r7, lr}
 801fc9a:	b084      	sub	sp, #16
 801fc9c:	af00      	add	r7, sp, #0
 801fc9e:	6078      	str	r0, [r7, #4]
 801fca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801fca2:	2300      	movs	r3, #0
 801fca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801fcac:	2b01      	cmp	r3, #1
 801fcae:	d101      	bne.n	801fcb4 <HAL_TIM_ConfigClockSource+0x1c>
 801fcb0:	2302      	movs	r3, #2
 801fcb2:	e0dc      	b.n	801fe6e <HAL_TIM_ConfigClockSource+0x1d6>
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	2201      	movs	r2, #1
 801fcb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	2202      	movs	r2, #2
 801fcc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	681b      	ldr	r3, [r3, #0]
 801fcc8:	689b      	ldr	r3, [r3, #8]
 801fcca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801fccc:	68ba      	ldr	r2, [r7, #8]
 801fcce:	4b6a      	ldr	r3, [pc, #424]	@ (801fe78 <HAL_TIM_ConfigClockSource+0x1e0>)
 801fcd0:	4013      	ands	r3, r2
 801fcd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801fcd4:	68bb      	ldr	r3, [r7, #8]
 801fcd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801fcda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	68ba      	ldr	r2, [r7, #8]
 801fce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801fce4:	683b      	ldr	r3, [r7, #0]
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	4a64      	ldr	r2, [pc, #400]	@ (801fe7c <HAL_TIM_ConfigClockSource+0x1e4>)
 801fcea:	4293      	cmp	r3, r2
 801fcec:	f000 80a9 	beq.w	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fcf0:	4a62      	ldr	r2, [pc, #392]	@ (801fe7c <HAL_TIM_ConfigClockSource+0x1e4>)
 801fcf2:	4293      	cmp	r3, r2
 801fcf4:	f200 80ae 	bhi.w	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fcf8:	4a61      	ldr	r2, [pc, #388]	@ (801fe80 <HAL_TIM_ConfigClockSource+0x1e8>)
 801fcfa:	4293      	cmp	r3, r2
 801fcfc:	f000 80a1 	beq.w	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd00:	4a5f      	ldr	r2, [pc, #380]	@ (801fe80 <HAL_TIM_ConfigClockSource+0x1e8>)
 801fd02:	4293      	cmp	r3, r2
 801fd04:	f200 80a6 	bhi.w	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd08:	4a5e      	ldr	r2, [pc, #376]	@ (801fe84 <HAL_TIM_ConfigClockSource+0x1ec>)
 801fd0a:	4293      	cmp	r3, r2
 801fd0c:	f000 8099 	beq.w	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd10:	4a5c      	ldr	r2, [pc, #368]	@ (801fe84 <HAL_TIM_ConfigClockSource+0x1ec>)
 801fd12:	4293      	cmp	r3, r2
 801fd14:	f200 809e 	bhi.w	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801fd1c:	f000 8091 	beq.w	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801fd24:	f200 8096 	bhi.w	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fd2c:	f000 8089 	beq.w	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fd34:	f200 808e 	bhi.w	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fd3c:	d03e      	beq.n	801fdbc <HAL_TIM_ConfigClockSource+0x124>
 801fd3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fd42:	f200 8087 	bhi.w	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fd4a:	f000 8086 	beq.w	801fe5a <HAL_TIM_ConfigClockSource+0x1c2>
 801fd4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fd52:	d87f      	bhi.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd54:	2b70      	cmp	r3, #112	@ 0x70
 801fd56:	d01a      	beq.n	801fd8e <HAL_TIM_ConfigClockSource+0xf6>
 801fd58:	2b70      	cmp	r3, #112	@ 0x70
 801fd5a:	d87b      	bhi.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd5c:	2b60      	cmp	r3, #96	@ 0x60
 801fd5e:	d050      	beq.n	801fe02 <HAL_TIM_ConfigClockSource+0x16a>
 801fd60:	2b60      	cmp	r3, #96	@ 0x60
 801fd62:	d877      	bhi.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd64:	2b50      	cmp	r3, #80	@ 0x50
 801fd66:	d03c      	beq.n	801fde2 <HAL_TIM_ConfigClockSource+0x14a>
 801fd68:	2b50      	cmp	r3, #80	@ 0x50
 801fd6a:	d873      	bhi.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd6c:	2b40      	cmp	r3, #64	@ 0x40
 801fd6e:	d058      	beq.n	801fe22 <HAL_TIM_ConfigClockSource+0x18a>
 801fd70:	2b40      	cmp	r3, #64	@ 0x40
 801fd72:	d86f      	bhi.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd74:	2b30      	cmp	r3, #48	@ 0x30
 801fd76:	d064      	beq.n	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd78:	2b30      	cmp	r3, #48	@ 0x30
 801fd7a:	d86b      	bhi.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd7c:	2b20      	cmp	r3, #32
 801fd7e:	d060      	beq.n	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd80:	2b20      	cmp	r3, #32
 801fd82:	d867      	bhi.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d05c      	beq.n	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd88:	2b10      	cmp	r3, #16
 801fd8a:	d05a      	beq.n	801fe42 <HAL_TIM_ConfigClockSource+0x1aa>
 801fd8c:	e062      	b.n	801fe54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fd92:	683b      	ldr	r3, [r7, #0]
 801fd94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fd96:	683b      	ldr	r3, [r7, #0]
 801fd98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fd9a:	683b      	ldr	r3, [r7, #0]
 801fd9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fd9e:	f000 fc6d 	bl	802067c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	689b      	ldr	r3, [r3, #8]
 801fda8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801fdaa:	68bb      	ldr	r3, [r7, #8]
 801fdac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801fdb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	68ba      	ldr	r2, [r7, #8]
 801fdb8:	609a      	str	r2, [r3, #8]
      break;
 801fdba:	e04f      	b.n	801fe5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fdc0:	683b      	ldr	r3, [r7, #0]
 801fdc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fdc4:	683b      	ldr	r3, [r7, #0]
 801fdc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fdc8:	683b      	ldr	r3, [r7, #0]
 801fdca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fdcc:	f000 fc56 	bl	802067c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	689a      	ldr	r2, [r3, #8]
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801fdde:	609a      	str	r2, [r3, #8]
      break;
 801fde0:	e03c      	b.n	801fe5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fde6:	683b      	ldr	r3, [r7, #0]
 801fde8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fdea:	683b      	ldr	r3, [r7, #0]
 801fdec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fdee:	461a      	mov	r2, r3
 801fdf0:	f000 fbc6 	bl	8020580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	681b      	ldr	r3, [r3, #0]
 801fdf8:	2150      	movs	r1, #80	@ 0x50
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	f000 fc20 	bl	8020640 <TIM_ITRx_SetConfig>
      break;
 801fe00:	e02c      	b.n	801fe5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fe0a:	683b      	ldr	r3, [r7, #0]
 801fe0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801fe0e:	461a      	mov	r2, r3
 801fe10:	f000 fbe5 	bl	80205de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	2160      	movs	r1, #96	@ 0x60
 801fe1a:	4618      	mov	r0, r3
 801fe1c:	f000 fc10 	bl	8020640 <TIM_ITRx_SetConfig>
      break;
 801fe20:	e01c      	b.n	801fe5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fe26:	683b      	ldr	r3, [r7, #0]
 801fe28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fe2a:	683b      	ldr	r3, [r7, #0]
 801fe2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fe2e:	461a      	mov	r2, r3
 801fe30:	f000 fba6 	bl	8020580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801fe34:	687b      	ldr	r3, [r7, #4]
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	2140      	movs	r1, #64	@ 0x40
 801fe3a:	4618      	mov	r0, r3
 801fe3c:	f000 fc00 	bl	8020640 <TIM_ITRx_SetConfig>
      break;
 801fe40:	e00c      	b.n	801fe5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	681a      	ldr	r2, [r3, #0]
 801fe46:	683b      	ldr	r3, [r7, #0]
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	4619      	mov	r1, r3
 801fe4c:	4610      	mov	r0, r2
 801fe4e:	f000 fbf7 	bl	8020640 <TIM_ITRx_SetConfig>
      break;
 801fe52:	e003      	b.n	801fe5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801fe54:	2301      	movs	r3, #1
 801fe56:	73fb      	strb	r3, [r7, #15]
      break;
 801fe58:	e000      	b.n	801fe5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801fe5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	2201      	movs	r2, #1
 801fe60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	2200      	movs	r2, #0
 801fe68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801fe6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801fe6e:	4618      	mov	r0, r3
 801fe70:	3710      	adds	r7, #16
 801fe72:	46bd      	mov	sp, r7
 801fe74:	bd80      	pop	{r7, pc}
 801fe76:	bf00      	nop
 801fe78:	ffceff88 	.word	0xffceff88
 801fe7c:	00100040 	.word	0x00100040
 801fe80:	00100030 	.word	0x00100030
 801fe84:	00100020 	.word	0x00100020

0801fe88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801fe88:	b480      	push	{r7}
 801fe8a:	b085      	sub	sp, #20
 801fe8c:	af00      	add	r7, sp, #0
 801fe8e:	6078      	str	r0, [r7, #4]
 801fe90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	4a46      	ldr	r2, [pc, #280]	@ (801ffb4 <TIM_Base_SetConfig+0x12c>)
 801fe9c:	4293      	cmp	r3, r2
 801fe9e:	d013      	beq.n	801fec8 <TIM_Base_SetConfig+0x40>
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fea6:	d00f      	beq.n	801fec8 <TIM_Base_SetConfig+0x40>
 801fea8:	687b      	ldr	r3, [r7, #4]
 801feaa:	4a43      	ldr	r2, [pc, #268]	@ (801ffb8 <TIM_Base_SetConfig+0x130>)
 801feac:	4293      	cmp	r3, r2
 801feae:	d00b      	beq.n	801fec8 <TIM_Base_SetConfig+0x40>
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	4a42      	ldr	r2, [pc, #264]	@ (801ffbc <TIM_Base_SetConfig+0x134>)
 801feb4:	4293      	cmp	r3, r2
 801feb6:	d007      	beq.n	801fec8 <TIM_Base_SetConfig+0x40>
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	4a41      	ldr	r2, [pc, #260]	@ (801ffc0 <TIM_Base_SetConfig+0x138>)
 801febc:	4293      	cmp	r3, r2
 801febe:	d003      	beq.n	801fec8 <TIM_Base_SetConfig+0x40>
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	4a40      	ldr	r2, [pc, #256]	@ (801ffc4 <TIM_Base_SetConfig+0x13c>)
 801fec4:	4293      	cmp	r3, r2
 801fec6:	d108      	bne.n	801feda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801fece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801fed0:	683b      	ldr	r3, [r7, #0]
 801fed2:	685b      	ldr	r3, [r3, #4]
 801fed4:	68fa      	ldr	r2, [r7, #12]
 801fed6:	4313      	orrs	r3, r2
 801fed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	4a35      	ldr	r2, [pc, #212]	@ (801ffb4 <TIM_Base_SetConfig+0x12c>)
 801fede:	4293      	cmp	r3, r2
 801fee0:	d01f      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fee8:	d01b      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	4a32      	ldr	r2, [pc, #200]	@ (801ffb8 <TIM_Base_SetConfig+0x130>)
 801feee:	4293      	cmp	r3, r2
 801fef0:	d017      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	4a31      	ldr	r2, [pc, #196]	@ (801ffbc <TIM_Base_SetConfig+0x134>)
 801fef6:	4293      	cmp	r3, r2
 801fef8:	d013      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	4a30      	ldr	r2, [pc, #192]	@ (801ffc0 <TIM_Base_SetConfig+0x138>)
 801fefe:	4293      	cmp	r3, r2
 801ff00:	d00f      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	4a2f      	ldr	r2, [pc, #188]	@ (801ffc4 <TIM_Base_SetConfig+0x13c>)
 801ff06:	4293      	cmp	r3, r2
 801ff08:	d00b      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	4a2e      	ldr	r2, [pc, #184]	@ (801ffc8 <TIM_Base_SetConfig+0x140>)
 801ff0e:	4293      	cmp	r3, r2
 801ff10:	d007      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	4a2d      	ldr	r2, [pc, #180]	@ (801ffcc <TIM_Base_SetConfig+0x144>)
 801ff16:	4293      	cmp	r3, r2
 801ff18:	d003      	beq.n	801ff22 <TIM_Base_SetConfig+0x9a>
 801ff1a:	687b      	ldr	r3, [r7, #4]
 801ff1c:	4a2c      	ldr	r2, [pc, #176]	@ (801ffd0 <TIM_Base_SetConfig+0x148>)
 801ff1e:	4293      	cmp	r3, r2
 801ff20:	d108      	bne.n	801ff34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801ff22:	68fb      	ldr	r3, [r7, #12]
 801ff24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ff28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801ff2a:	683b      	ldr	r3, [r7, #0]
 801ff2c:	68db      	ldr	r3, [r3, #12]
 801ff2e:	68fa      	ldr	r2, [r7, #12]
 801ff30:	4313      	orrs	r3, r2
 801ff32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801ff34:	68fb      	ldr	r3, [r7, #12]
 801ff36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801ff3a:	683b      	ldr	r3, [r7, #0]
 801ff3c:	695b      	ldr	r3, [r3, #20]
 801ff3e:	4313      	orrs	r3, r2
 801ff40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	68fa      	ldr	r2, [r7, #12]
 801ff46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801ff48:	683b      	ldr	r3, [r7, #0]
 801ff4a:	689a      	ldr	r2, [r3, #8]
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801ff50:	683b      	ldr	r3, [r7, #0]
 801ff52:	681a      	ldr	r2, [r3, #0]
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	4a16      	ldr	r2, [pc, #88]	@ (801ffb4 <TIM_Base_SetConfig+0x12c>)
 801ff5c:	4293      	cmp	r3, r2
 801ff5e:	d00f      	beq.n	801ff80 <TIM_Base_SetConfig+0xf8>
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	4a18      	ldr	r2, [pc, #96]	@ (801ffc4 <TIM_Base_SetConfig+0x13c>)
 801ff64:	4293      	cmp	r3, r2
 801ff66:	d00b      	beq.n	801ff80 <TIM_Base_SetConfig+0xf8>
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	4a17      	ldr	r2, [pc, #92]	@ (801ffc8 <TIM_Base_SetConfig+0x140>)
 801ff6c:	4293      	cmp	r3, r2
 801ff6e:	d007      	beq.n	801ff80 <TIM_Base_SetConfig+0xf8>
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	4a16      	ldr	r2, [pc, #88]	@ (801ffcc <TIM_Base_SetConfig+0x144>)
 801ff74:	4293      	cmp	r3, r2
 801ff76:	d003      	beq.n	801ff80 <TIM_Base_SetConfig+0xf8>
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	4a15      	ldr	r2, [pc, #84]	@ (801ffd0 <TIM_Base_SetConfig+0x148>)
 801ff7c:	4293      	cmp	r3, r2
 801ff7e:	d103      	bne.n	801ff88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801ff80:	683b      	ldr	r3, [r7, #0]
 801ff82:	691a      	ldr	r2, [r3, #16]
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	2201      	movs	r2, #1
 801ff8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	691b      	ldr	r3, [r3, #16]
 801ff92:	f003 0301 	and.w	r3, r3, #1
 801ff96:	2b01      	cmp	r3, #1
 801ff98:	d105      	bne.n	801ffa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	691b      	ldr	r3, [r3, #16]
 801ff9e:	f023 0201 	bic.w	r2, r3, #1
 801ffa2:	687b      	ldr	r3, [r7, #4]
 801ffa4:	611a      	str	r2, [r3, #16]
  }
}
 801ffa6:	bf00      	nop
 801ffa8:	3714      	adds	r7, #20
 801ffaa:	46bd      	mov	sp, r7
 801ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffb0:	4770      	bx	lr
 801ffb2:	bf00      	nop
 801ffb4:	40010000 	.word	0x40010000
 801ffb8:	40000400 	.word	0x40000400
 801ffbc:	40000800 	.word	0x40000800
 801ffc0:	40000c00 	.word	0x40000c00
 801ffc4:	40010400 	.word	0x40010400
 801ffc8:	40014000 	.word	0x40014000
 801ffcc:	40014400 	.word	0x40014400
 801ffd0:	40014800 	.word	0x40014800

0801ffd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ffd4:	b480      	push	{r7}
 801ffd6:	b087      	sub	sp, #28
 801ffd8:	af00      	add	r7, sp, #0
 801ffda:	6078      	str	r0, [r7, #4]
 801ffdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	6a1b      	ldr	r3, [r3, #32]
 801ffe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	6a1b      	ldr	r3, [r3, #32]
 801ffe8:	f023 0201 	bic.w	r2, r3, #1
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	685b      	ldr	r3, [r3, #4]
 801fff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	699b      	ldr	r3, [r3, #24]
 801fffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801fffc:	68fa      	ldr	r2, [r7, #12]
 801fffe:	4b37      	ldr	r3, [pc, #220]	@ (80200dc <TIM_OC1_SetConfig+0x108>)
 8020000:	4013      	ands	r3, r2
 8020002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020004:	68fb      	ldr	r3, [r7, #12]
 8020006:	f023 0303 	bic.w	r3, r3, #3
 802000a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802000c:	683b      	ldr	r3, [r7, #0]
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	68fa      	ldr	r2, [r7, #12]
 8020012:	4313      	orrs	r3, r2
 8020014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020016:	697b      	ldr	r3, [r7, #20]
 8020018:	f023 0302 	bic.w	r3, r3, #2
 802001c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802001e:	683b      	ldr	r3, [r7, #0]
 8020020:	689b      	ldr	r3, [r3, #8]
 8020022:	697a      	ldr	r2, [r7, #20]
 8020024:	4313      	orrs	r3, r2
 8020026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	4a2d      	ldr	r2, [pc, #180]	@ (80200e0 <TIM_OC1_SetConfig+0x10c>)
 802002c:	4293      	cmp	r3, r2
 802002e:	d00f      	beq.n	8020050 <TIM_OC1_SetConfig+0x7c>
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	4a2c      	ldr	r2, [pc, #176]	@ (80200e4 <TIM_OC1_SetConfig+0x110>)
 8020034:	4293      	cmp	r3, r2
 8020036:	d00b      	beq.n	8020050 <TIM_OC1_SetConfig+0x7c>
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	4a2b      	ldr	r2, [pc, #172]	@ (80200e8 <TIM_OC1_SetConfig+0x114>)
 802003c:	4293      	cmp	r3, r2
 802003e:	d007      	beq.n	8020050 <TIM_OC1_SetConfig+0x7c>
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	4a2a      	ldr	r2, [pc, #168]	@ (80200ec <TIM_OC1_SetConfig+0x118>)
 8020044:	4293      	cmp	r3, r2
 8020046:	d003      	beq.n	8020050 <TIM_OC1_SetConfig+0x7c>
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	4a29      	ldr	r2, [pc, #164]	@ (80200f0 <TIM_OC1_SetConfig+0x11c>)
 802004c:	4293      	cmp	r3, r2
 802004e:	d10c      	bne.n	802006a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020050:	697b      	ldr	r3, [r7, #20]
 8020052:	f023 0308 	bic.w	r3, r3, #8
 8020056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020058:	683b      	ldr	r3, [r7, #0]
 802005a:	68db      	ldr	r3, [r3, #12]
 802005c:	697a      	ldr	r2, [r7, #20]
 802005e:	4313      	orrs	r3, r2
 8020060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020062:	697b      	ldr	r3, [r7, #20]
 8020064:	f023 0304 	bic.w	r3, r3, #4
 8020068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	4a1c      	ldr	r2, [pc, #112]	@ (80200e0 <TIM_OC1_SetConfig+0x10c>)
 802006e:	4293      	cmp	r3, r2
 8020070:	d00f      	beq.n	8020092 <TIM_OC1_SetConfig+0xbe>
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	4a1b      	ldr	r2, [pc, #108]	@ (80200e4 <TIM_OC1_SetConfig+0x110>)
 8020076:	4293      	cmp	r3, r2
 8020078:	d00b      	beq.n	8020092 <TIM_OC1_SetConfig+0xbe>
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	4a1a      	ldr	r2, [pc, #104]	@ (80200e8 <TIM_OC1_SetConfig+0x114>)
 802007e:	4293      	cmp	r3, r2
 8020080:	d007      	beq.n	8020092 <TIM_OC1_SetConfig+0xbe>
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	4a19      	ldr	r2, [pc, #100]	@ (80200ec <TIM_OC1_SetConfig+0x118>)
 8020086:	4293      	cmp	r3, r2
 8020088:	d003      	beq.n	8020092 <TIM_OC1_SetConfig+0xbe>
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	4a18      	ldr	r2, [pc, #96]	@ (80200f0 <TIM_OC1_SetConfig+0x11c>)
 802008e:	4293      	cmp	r3, r2
 8020090:	d111      	bne.n	80200b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020092:	693b      	ldr	r3, [r7, #16]
 8020094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802009a:	693b      	ldr	r3, [r7, #16]
 802009c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80200a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80200a2:	683b      	ldr	r3, [r7, #0]
 80200a4:	695b      	ldr	r3, [r3, #20]
 80200a6:	693a      	ldr	r2, [r7, #16]
 80200a8:	4313      	orrs	r3, r2
 80200aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80200ac:	683b      	ldr	r3, [r7, #0]
 80200ae:	699b      	ldr	r3, [r3, #24]
 80200b0:	693a      	ldr	r2, [r7, #16]
 80200b2:	4313      	orrs	r3, r2
 80200b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	693a      	ldr	r2, [r7, #16]
 80200ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	68fa      	ldr	r2, [r7, #12]
 80200c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80200c2:	683b      	ldr	r3, [r7, #0]
 80200c4:	685a      	ldr	r2, [r3, #4]
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	697a      	ldr	r2, [r7, #20]
 80200ce:	621a      	str	r2, [r3, #32]
}
 80200d0:	bf00      	nop
 80200d2:	371c      	adds	r7, #28
 80200d4:	46bd      	mov	sp, r7
 80200d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200da:	4770      	bx	lr
 80200dc:	fffeff8f 	.word	0xfffeff8f
 80200e0:	40010000 	.word	0x40010000
 80200e4:	40010400 	.word	0x40010400
 80200e8:	40014000 	.word	0x40014000
 80200ec:	40014400 	.word	0x40014400
 80200f0:	40014800 	.word	0x40014800

080200f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80200f4:	b480      	push	{r7}
 80200f6:	b087      	sub	sp, #28
 80200f8:	af00      	add	r7, sp, #0
 80200fa:	6078      	str	r0, [r7, #4]
 80200fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	6a1b      	ldr	r3, [r3, #32]
 8020102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	6a1b      	ldr	r3, [r3, #32]
 8020108:	f023 0210 	bic.w	r2, r3, #16
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	685b      	ldr	r3, [r3, #4]
 8020114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020116:	687b      	ldr	r3, [r7, #4]
 8020118:	699b      	ldr	r3, [r3, #24]
 802011a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802011c:	68fa      	ldr	r2, [r7, #12]
 802011e:	4b34      	ldr	r3, [pc, #208]	@ (80201f0 <TIM_OC2_SetConfig+0xfc>)
 8020120:	4013      	ands	r3, r2
 8020122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020124:	68fb      	ldr	r3, [r7, #12]
 8020126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802012a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802012c:	683b      	ldr	r3, [r7, #0]
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	021b      	lsls	r3, r3, #8
 8020132:	68fa      	ldr	r2, [r7, #12]
 8020134:	4313      	orrs	r3, r2
 8020136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020138:	697b      	ldr	r3, [r7, #20]
 802013a:	f023 0320 	bic.w	r3, r3, #32
 802013e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020140:	683b      	ldr	r3, [r7, #0]
 8020142:	689b      	ldr	r3, [r3, #8]
 8020144:	011b      	lsls	r3, r3, #4
 8020146:	697a      	ldr	r2, [r7, #20]
 8020148:	4313      	orrs	r3, r2
 802014a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	4a29      	ldr	r2, [pc, #164]	@ (80201f4 <TIM_OC2_SetConfig+0x100>)
 8020150:	4293      	cmp	r3, r2
 8020152:	d003      	beq.n	802015c <TIM_OC2_SetConfig+0x68>
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	4a28      	ldr	r2, [pc, #160]	@ (80201f8 <TIM_OC2_SetConfig+0x104>)
 8020158:	4293      	cmp	r3, r2
 802015a:	d10d      	bne.n	8020178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802015c:	697b      	ldr	r3, [r7, #20]
 802015e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020164:	683b      	ldr	r3, [r7, #0]
 8020166:	68db      	ldr	r3, [r3, #12]
 8020168:	011b      	lsls	r3, r3, #4
 802016a:	697a      	ldr	r2, [r7, #20]
 802016c:	4313      	orrs	r3, r2
 802016e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020170:	697b      	ldr	r3, [r7, #20]
 8020172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020176:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	4a1e      	ldr	r2, [pc, #120]	@ (80201f4 <TIM_OC2_SetConfig+0x100>)
 802017c:	4293      	cmp	r3, r2
 802017e:	d00f      	beq.n	80201a0 <TIM_OC2_SetConfig+0xac>
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	4a1d      	ldr	r2, [pc, #116]	@ (80201f8 <TIM_OC2_SetConfig+0x104>)
 8020184:	4293      	cmp	r3, r2
 8020186:	d00b      	beq.n	80201a0 <TIM_OC2_SetConfig+0xac>
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	4a1c      	ldr	r2, [pc, #112]	@ (80201fc <TIM_OC2_SetConfig+0x108>)
 802018c:	4293      	cmp	r3, r2
 802018e:	d007      	beq.n	80201a0 <TIM_OC2_SetConfig+0xac>
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	4a1b      	ldr	r2, [pc, #108]	@ (8020200 <TIM_OC2_SetConfig+0x10c>)
 8020194:	4293      	cmp	r3, r2
 8020196:	d003      	beq.n	80201a0 <TIM_OC2_SetConfig+0xac>
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	4a1a      	ldr	r2, [pc, #104]	@ (8020204 <TIM_OC2_SetConfig+0x110>)
 802019c:	4293      	cmp	r3, r2
 802019e:	d113      	bne.n	80201c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80201a0:	693b      	ldr	r3, [r7, #16]
 80201a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80201a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80201a8:	693b      	ldr	r3, [r7, #16]
 80201aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80201ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80201b0:	683b      	ldr	r3, [r7, #0]
 80201b2:	695b      	ldr	r3, [r3, #20]
 80201b4:	009b      	lsls	r3, r3, #2
 80201b6:	693a      	ldr	r2, [r7, #16]
 80201b8:	4313      	orrs	r3, r2
 80201ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80201bc:	683b      	ldr	r3, [r7, #0]
 80201be:	699b      	ldr	r3, [r3, #24]
 80201c0:	009b      	lsls	r3, r3, #2
 80201c2:	693a      	ldr	r2, [r7, #16]
 80201c4:	4313      	orrs	r3, r2
 80201c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	693a      	ldr	r2, [r7, #16]
 80201cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80201ce:	687b      	ldr	r3, [r7, #4]
 80201d0:	68fa      	ldr	r2, [r7, #12]
 80201d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	685a      	ldr	r2, [r3, #4]
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	697a      	ldr	r2, [r7, #20]
 80201e0:	621a      	str	r2, [r3, #32]
}
 80201e2:	bf00      	nop
 80201e4:	371c      	adds	r7, #28
 80201e6:	46bd      	mov	sp, r7
 80201e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ec:	4770      	bx	lr
 80201ee:	bf00      	nop
 80201f0:	feff8fff 	.word	0xfeff8fff
 80201f4:	40010000 	.word	0x40010000
 80201f8:	40010400 	.word	0x40010400
 80201fc:	40014000 	.word	0x40014000
 8020200:	40014400 	.word	0x40014400
 8020204:	40014800 	.word	0x40014800

08020208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020208:	b480      	push	{r7}
 802020a:	b087      	sub	sp, #28
 802020c:	af00      	add	r7, sp, #0
 802020e:	6078      	str	r0, [r7, #4]
 8020210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020212:	687b      	ldr	r3, [r7, #4]
 8020214:	6a1b      	ldr	r3, [r3, #32]
 8020216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	6a1b      	ldr	r3, [r3, #32]
 802021c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	685b      	ldr	r3, [r3, #4]
 8020228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	69db      	ldr	r3, [r3, #28]
 802022e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020230:	68fa      	ldr	r2, [r7, #12]
 8020232:	4b33      	ldr	r3, [pc, #204]	@ (8020300 <TIM_OC3_SetConfig+0xf8>)
 8020234:	4013      	ands	r3, r2
 8020236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020238:	68fb      	ldr	r3, [r7, #12]
 802023a:	f023 0303 	bic.w	r3, r3, #3
 802023e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020240:	683b      	ldr	r3, [r7, #0]
 8020242:	681b      	ldr	r3, [r3, #0]
 8020244:	68fa      	ldr	r2, [r7, #12]
 8020246:	4313      	orrs	r3, r2
 8020248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802024a:	697b      	ldr	r3, [r7, #20]
 802024c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020252:	683b      	ldr	r3, [r7, #0]
 8020254:	689b      	ldr	r3, [r3, #8]
 8020256:	021b      	lsls	r3, r3, #8
 8020258:	697a      	ldr	r2, [r7, #20]
 802025a:	4313      	orrs	r3, r2
 802025c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	4a28      	ldr	r2, [pc, #160]	@ (8020304 <TIM_OC3_SetConfig+0xfc>)
 8020262:	4293      	cmp	r3, r2
 8020264:	d003      	beq.n	802026e <TIM_OC3_SetConfig+0x66>
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	4a27      	ldr	r2, [pc, #156]	@ (8020308 <TIM_OC3_SetConfig+0x100>)
 802026a:	4293      	cmp	r3, r2
 802026c:	d10d      	bne.n	802028a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802026e:	697b      	ldr	r3, [r7, #20]
 8020270:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020276:	683b      	ldr	r3, [r7, #0]
 8020278:	68db      	ldr	r3, [r3, #12]
 802027a:	021b      	lsls	r3, r3, #8
 802027c:	697a      	ldr	r2, [r7, #20]
 802027e:	4313      	orrs	r3, r2
 8020280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020282:	697b      	ldr	r3, [r7, #20]
 8020284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	4a1d      	ldr	r2, [pc, #116]	@ (8020304 <TIM_OC3_SetConfig+0xfc>)
 802028e:	4293      	cmp	r3, r2
 8020290:	d00f      	beq.n	80202b2 <TIM_OC3_SetConfig+0xaa>
 8020292:	687b      	ldr	r3, [r7, #4]
 8020294:	4a1c      	ldr	r2, [pc, #112]	@ (8020308 <TIM_OC3_SetConfig+0x100>)
 8020296:	4293      	cmp	r3, r2
 8020298:	d00b      	beq.n	80202b2 <TIM_OC3_SetConfig+0xaa>
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	4a1b      	ldr	r2, [pc, #108]	@ (802030c <TIM_OC3_SetConfig+0x104>)
 802029e:	4293      	cmp	r3, r2
 80202a0:	d007      	beq.n	80202b2 <TIM_OC3_SetConfig+0xaa>
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	4a1a      	ldr	r2, [pc, #104]	@ (8020310 <TIM_OC3_SetConfig+0x108>)
 80202a6:	4293      	cmp	r3, r2
 80202a8:	d003      	beq.n	80202b2 <TIM_OC3_SetConfig+0xaa>
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	4a19      	ldr	r2, [pc, #100]	@ (8020314 <TIM_OC3_SetConfig+0x10c>)
 80202ae:	4293      	cmp	r3, r2
 80202b0:	d113      	bne.n	80202da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80202b2:	693b      	ldr	r3, [r7, #16]
 80202b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80202b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80202ba:	693b      	ldr	r3, [r7, #16]
 80202bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80202c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80202c2:	683b      	ldr	r3, [r7, #0]
 80202c4:	695b      	ldr	r3, [r3, #20]
 80202c6:	011b      	lsls	r3, r3, #4
 80202c8:	693a      	ldr	r2, [r7, #16]
 80202ca:	4313      	orrs	r3, r2
 80202cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80202ce:	683b      	ldr	r3, [r7, #0]
 80202d0:	699b      	ldr	r3, [r3, #24]
 80202d2:	011b      	lsls	r3, r3, #4
 80202d4:	693a      	ldr	r2, [r7, #16]
 80202d6:	4313      	orrs	r3, r2
 80202d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	693a      	ldr	r2, [r7, #16]
 80202de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	68fa      	ldr	r2, [r7, #12]
 80202e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80202e6:	683b      	ldr	r3, [r7, #0]
 80202e8:	685a      	ldr	r2, [r3, #4]
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	697a      	ldr	r2, [r7, #20]
 80202f2:	621a      	str	r2, [r3, #32]
}
 80202f4:	bf00      	nop
 80202f6:	371c      	adds	r7, #28
 80202f8:	46bd      	mov	sp, r7
 80202fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202fe:	4770      	bx	lr
 8020300:	fffeff8f 	.word	0xfffeff8f
 8020304:	40010000 	.word	0x40010000
 8020308:	40010400 	.word	0x40010400
 802030c:	40014000 	.word	0x40014000
 8020310:	40014400 	.word	0x40014400
 8020314:	40014800 	.word	0x40014800

08020318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020318:	b480      	push	{r7}
 802031a:	b087      	sub	sp, #28
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]
 8020320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	6a1b      	ldr	r3, [r3, #32]
 8020326:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020328:	687b      	ldr	r3, [r7, #4]
 802032a:	6a1b      	ldr	r3, [r3, #32]
 802032c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	685b      	ldr	r3, [r3, #4]
 8020338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	69db      	ldr	r3, [r3, #28]
 802033e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020340:	68fa      	ldr	r2, [r7, #12]
 8020342:	4b24      	ldr	r3, [pc, #144]	@ (80203d4 <TIM_OC4_SetConfig+0xbc>)
 8020344:	4013      	ands	r3, r2
 8020346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020348:	68fb      	ldr	r3, [r7, #12]
 802034a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802034e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020350:	683b      	ldr	r3, [r7, #0]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	021b      	lsls	r3, r3, #8
 8020356:	68fa      	ldr	r2, [r7, #12]
 8020358:	4313      	orrs	r3, r2
 802035a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802035c:	693b      	ldr	r3, [r7, #16]
 802035e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020364:	683b      	ldr	r3, [r7, #0]
 8020366:	689b      	ldr	r3, [r3, #8]
 8020368:	031b      	lsls	r3, r3, #12
 802036a:	693a      	ldr	r2, [r7, #16]
 802036c:	4313      	orrs	r3, r2
 802036e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	4a19      	ldr	r2, [pc, #100]	@ (80203d8 <TIM_OC4_SetConfig+0xc0>)
 8020374:	4293      	cmp	r3, r2
 8020376:	d00f      	beq.n	8020398 <TIM_OC4_SetConfig+0x80>
 8020378:	687b      	ldr	r3, [r7, #4]
 802037a:	4a18      	ldr	r2, [pc, #96]	@ (80203dc <TIM_OC4_SetConfig+0xc4>)
 802037c:	4293      	cmp	r3, r2
 802037e:	d00b      	beq.n	8020398 <TIM_OC4_SetConfig+0x80>
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	4a17      	ldr	r2, [pc, #92]	@ (80203e0 <TIM_OC4_SetConfig+0xc8>)
 8020384:	4293      	cmp	r3, r2
 8020386:	d007      	beq.n	8020398 <TIM_OC4_SetConfig+0x80>
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	4a16      	ldr	r2, [pc, #88]	@ (80203e4 <TIM_OC4_SetConfig+0xcc>)
 802038c:	4293      	cmp	r3, r2
 802038e:	d003      	beq.n	8020398 <TIM_OC4_SetConfig+0x80>
 8020390:	687b      	ldr	r3, [r7, #4]
 8020392:	4a15      	ldr	r2, [pc, #84]	@ (80203e8 <TIM_OC4_SetConfig+0xd0>)
 8020394:	4293      	cmp	r3, r2
 8020396:	d109      	bne.n	80203ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020398:	697b      	ldr	r3, [r7, #20]
 802039a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 802039e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80203a0:	683b      	ldr	r3, [r7, #0]
 80203a2:	695b      	ldr	r3, [r3, #20]
 80203a4:	019b      	lsls	r3, r3, #6
 80203a6:	697a      	ldr	r2, [r7, #20]
 80203a8:	4313      	orrs	r3, r2
 80203aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	697a      	ldr	r2, [r7, #20]
 80203b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	68fa      	ldr	r2, [r7, #12]
 80203b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80203b8:	683b      	ldr	r3, [r7, #0]
 80203ba:	685a      	ldr	r2, [r3, #4]
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	693a      	ldr	r2, [r7, #16]
 80203c4:	621a      	str	r2, [r3, #32]
}
 80203c6:	bf00      	nop
 80203c8:	371c      	adds	r7, #28
 80203ca:	46bd      	mov	sp, r7
 80203cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203d0:	4770      	bx	lr
 80203d2:	bf00      	nop
 80203d4:	feff8fff 	.word	0xfeff8fff
 80203d8:	40010000 	.word	0x40010000
 80203dc:	40010400 	.word	0x40010400
 80203e0:	40014000 	.word	0x40014000
 80203e4:	40014400 	.word	0x40014400
 80203e8:	40014800 	.word	0x40014800

080203ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80203ec:	b480      	push	{r7}
 80203ee:	b087      	sub	sp, #28
 80203f0:	af00      	add	r7, sp, #0
 80203f2:	6078      	str	r0, [r7, #4]
 80203f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	6a1b      	ldr	r3, [r3, #32]
 80203fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	6a1b      	ldr	r3, [r3, #32]
 8020400:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	685b      	ldr	r3, [r3, #4]
 802040c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020414:	68fa      	ldr	r2, [r7, #12]
 8020416:	4b21      	ldr	r3, [pc, #132]	@ (802049c <TIM_OC5_SetConfig+0xb0>)
 8020418:	4013      	ands	r3, r2
 802041a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802041c:	683b      	ldr	r3, [r7, #0]
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	68fa      	ldr	r2, [r7, #12]
 8020422:	4313      	orrs	r3, r2
 8020424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020426:	693b      	ldr	r3, [r7, #16]
 8020428:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 802042c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 802042e:	683b      	ldr	r3, [r7, #0]
 8020430:	689b      	ldr	r3, [r3, #8]
 8020432:	041b      	lsls	r3, r3, #16
 8020434:	693a      	ldr	r2, [r7, #16]
 8020436:	4313      	orrs	r3, r2
 8020438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802043a:	687b      	ldr	r3, [r7, #4]
 802043c:	4a18      	ldr	r2, [pc, #96]	@ (80204a0 <TIM_OC5_SetConfig+0xb4>)
 802043e:	4293      	cmp	r3, r2
 8020440:	d00f      	beq.n	8020462 <TIM_OC5_SetConfig+0x76>
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	4a17      	ldr	r2, [pc, #92]	@ (80204a4 <TIM_OC5_SetConfig+0xb8>)
 8020446:	4293      	cmp	r3, r2
 8020448:	d00b      	beq.n	8020462 <TIM_OC5_SetConfig+0x76>
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	4a16      	ldr	r2, [pc, #88]	@ (80204a8 <TIM_OC5_SetConfig+0xbc>)
 802044e:	4293      	cmp	r3, r2
 8020450:	d007      	beq.n	8020462 <TIM_OC5_SetConfig+0x76>
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	4a15      	ldr	r2, [pc, #84]	@ (80204ac <TIM_OC5_SetConfig+0xc0>)
 8020456:	4293      	cmp	r3, r2
 8020458:	d003      	beq.n	8020462 <TIM_OC5_SetConfig+0x76>
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	4a14      	ldr	r2, [pc, #80]	@ (80204b0 <TIM_OC5_SetConfig+0xc4>)
 802045e:	4293      	cmp	r3, r2
 8020460:	d109      	bne.n	8020476 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020462:	697b      	ldr	r3, [r7, #20]
 8020464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 802046a:	683b      	ldr	r3, [r7, #0]
 802046c:	695b      	ldr	r3, [r3, #20]
 802046e:	021b      	lsls	r3, r3, #8
 8020470:	697a      	ldr	r2, [r7, #20]
 8020472:	4313      	orrs	r3, r2
 8020474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	697a      	ldr	r2, [r7, #20]
 802047a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	68fa      	ldr	r2, [r7, #12]
 8020480:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020482:	683b      	ldr	r3, [r7, #0]
 8020484:	685a      	ldr	r2, [r3, #4]
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	693a      	ldr	r2, [r7, #16]
 802048e:	621a      	str	r2, [r3, #32]
}
 8020490:	bf00      	nop
 8020492:	371c      	adds	r7, #28
 8020494:	46bd      	mov	sp, r7
 8020496:	f85d 7b04 	ldr.w	r7, [sp], #4
 802049a:	4770      	bx	lr
 802049c:	fffeff8f 	.word	0xfffeff8f
 80204a0:	40010000 	.word	0x40010000
 80204a4:	40010400 	.word	0x40010400
 80204a8:	40014000 	.word	0x40014000
 80204ac:	40014400 	.word	0x40014400
 80204b0:	40014800 	.word	0x40014800

080204b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80204b4:	b480      	push	{r7}
 80204b6:	b087      	sub	sp, #28
 80204b8:	af00      	add	r7, sp, #0
 80204ba:	6078      	str	r0, [r7, #4]
 80204bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	6a1b      	ldr	r3, [r3, #32]
 80204c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	6a1b      	ldr	r3, [r3, #32]
 80204c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	685b      	ldr	r3, [r3, #4]
 80204d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80204da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80204dc:	68fa      	ldr	r2, [r7, #12]
 80204de:	4b22      	ldr	r3, [pc, #136]	@ (8020568 <TIM_OC6_SetConfig+0xb4>)
 80204e0:	4013      	ands	r3, r2
 80204e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80204e4:	683b      	ldr	r3, [r7, #0]
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	021b      	lsls	r3, r3, #8
 80204ea:	68fa      	ldr	r2, [r7, #12]
 80204ec:	4313      	orrs	r3, r2
 80204ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80204f0:	693b      	ldr	r3, [r7, #16]
 80204f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80204f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80204f8:	683b      	ldr	r3, [r7, #0]
 80204fa:	689b      	ldr	r3, [r3, #8]
 80204fc:	051b      	lsls	r3, r3, #20
 80204fe:	693a      	ldr	r2, [r7, #16]
 8020500:	4313      	orrs	r3, r2
 8020502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	4a19      	ldr	r2, [pc, #100]	@ (802056c <TIM_OC6_SetConfig+0xb8>)
 8020508:	4293      	cmp	r3, r2
 802050a:	d00f      	beq.n	802052c <TIM_OC6_SetConfig+0x78>
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	4a18      	ldr	r2, [pc, #96]	@ (8020570 <TIM_OC6_SetConfig+0xbc>)
 8020510:	4293      	cmp	r3, r2
 8020512:	d00b      	beq.n	802052c <TIM_OC6_SetConfig+0x78>
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	4a17      	ldr	r2, [pc, #92]	@ (8020574 <TIM_OC6_SetConfig+0xc0>)
 8020518:	4293      	cmp	r3, r2
 802051a:	d007      	beq.n	802052c <TIM_OC6_SetConfig+0x78>
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	4a16      	ldr	r2, [pc, #88]	@ (8020578 <TIM_OC6_SetConfig+0xc4>)
 8020520:	4293      	cmp	r3, r2
 8020522:	d003      	beq.n	802052c <TIM_OC6_SetConfig+0x78>
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	4a15      	ldr	r2, [pc, #84]	@ (802057c <TIM_OC6_SetConfig+0xc8>)
 8020528:	4293      	cmp	r3, r2
 802052a:	d109      	bne.n	8020540 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 802052c:	697b      	ldr	r3, [r7, #20]
 802052e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020534:	683b      	ldr	r3, [r7, #0]
 8020536:	695b      	ldr	r3, [r3, #20]
 8020538:	029b      	lsls	r3, r3, #10
 802053a:	697a      	ldr	r2, [r7, #20]
 802053c:	4313      	orrs	r3, r2
 802053e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	697a      	ldr	r2, [r7, #20]
 8020544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020546:	687b      	ldr	r3, [r7, #4]
 8020548:	68fa      	ldr	r2, [r7, #12]
 802054a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 802054c:	683b      	ldr	r3, [r7, #0]
 802054e:	685a      	ldr	r2, [r3, #4]
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	693a      	ldr	r2, [r7, #16]
 8020558:	621a      	str	r2, [r3, #32]
}
 802055a:	bf00      	nop
 802055c:	371c      	adds	r7, #28
 802055e:	46bd      	mov	sp, r7
 8020560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020564:	4770      	bx	lr
 8020566:	bf00      	nop
 8020568:	feff8fff 	.word	0xfeff8fff
 802056c:	40010000 	.word	0x40010000
 8020570:	40010400 	.word	0x40010400
 8020574:	40014000 	.word	0x40014000
 8020578:	40014400 	.word	0x40014400
 802057c:	40014800 	.word	0x40014800

08020580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020580:	b480      	push	{r7}
 8020582:	b087      	sub	sp, #28
 8020584:	af00      	add	r7, sp, #0
 8020586:	60f8      	str	r0, [r7, #12]
 8020588:	60b9      	str	r1, [r7, #8]
 802058a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	6a1b      	ldr	r3, [r3, #32]
 8020590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020592:	68fb      	ldr	r3, [r7, #12]
 8020594:	6a1b      	ldr	r3, [r3, #32]
 8020596:	f023 0201 	bic.w	r2, r3, #1
 802059a:	68fb      	ldr	r3, [r7, #12]
 802059c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802059e:	68fb      	ldr	r3, [r7, #12]
 80205a0:	699b      	ldr	r3, [r3, #24]
 80205a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80205a4:	693b      	ldr	r3, [r7, #16]
 80205a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80205aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	011b      	lsls	r3, r3, #4
 80205b0:	693a      	ldr	r2, [r7, #16]
 80205b2:	4313      	orrs	r3, r2
 80205b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80205b6:	697b      	ldr	r3, [r7, #20]
 80205b8:	f023 030a 	bic.w	r3, r3, #10
 80205bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80205be:	697a      	ldr	r2, [r7, #20]
 80205c0:	68bb      	ldr	r3, [r7, #8]
 80205c2:	4313      	orrs	r3, r2
 80205c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80205c6:	68fb      	ldr	r3, [r7, #12]
 80205c8:	693a      	ldr	r2, [r7, #16]
 80205ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80205cc:	68fb      	ldr	r3, [r7, #12]
 80205ce:	697a      	ldr	r2, [r7, #20]
 80205d0:	621a      	str	r2, [r3, #32]
}
 80205d2:	bf00      	nop
 80205d4:	371c      	adds	r7, #28
 80205d6:	46bd      	mov	sp, r7
 80205d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205dc:	4770      	bx	lr

080205de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80205de:	b480      	push	{r7}
 80205e0:	b087      	sub	sp, #28
 80205e2:	af00      	add	r7, sp, #0
 80205e4:	60f8      	str	r0, [r7, #12]
 80205e6:	60b9      	str	r1, [r7, #8]
 80205e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80205ea:	68fb      	ldr	r3, [r7, #12]
 80205ec:	6a1b      	ldr	r3, [r3, #32]
 80205ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80205f0:	68fb      	ldr	r3, [r7, #12]
 80205f2:	6a1b      	ldr	r3, [r3, #32]
 80205f4:	f023 0210 	bic.w	r2, r3, #16
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80205fc:	68fb      	ldr	r3, [r7, #12]
 80205fe:	699b      	ldr	r3, [r3, #24]
 8020600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020602:	693b      	ldr	r3, [r7, #16]
 8020604:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8020608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	031b      	lsls	r3, r3, #12
 802060e:	693a      	ldr	r2, [r7, #16]
 8020610:	4313      	orrs	r3, r2
 8020612:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020614:	697b      	ldr	r3, [r7, #20]
 8020616:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 802061a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 802061c:	68bb      	ldr	r3, [r7, #8]
 802061e:	011b      	lsls	r3, r3, #4
 8020620:	697a      	ldr	r2, [r7, #20]
 8020622:	4313      	orrs	r3, r2
 8020624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	693a      	ldr	r2, [r7, #16]
 802062a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802062c:	68fb      	ldr	r3, [r7, #12]
 802062e:	697a      	ldr	r2, [r7, #20]
 8020630:	621a      	str	r2, [r3, #32]
}
 8020632:	bf00      	nop
 8020634:	371c      	adds	r7, #28
 8020636:	46bd      	mov	sp, r7
 8020638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802063c:	4770      	bx	lr
	...

08020640 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020640:	b480      	push	{r7}
 8020642:	b085      	sub	sp, #20
 8020644:	af00      	add	r7, sp, #0
 8020646:	6078      	str	r0, [r7, #4]
 8020648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	689b      	ldr	r3, [r3, #8]
 802064e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020650:	68fa      	ldr	r2, [r7, #12]
 8020652:	4b09      	ldr	r3, [pc, #36]	@ (8020678 <TIM_ITRx_SetConfig+0x38>)
 8020654:	4013      	ands	r3, r2
 8020656:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020658:	683a      	ldr	r2, [r7, #0]
 802065a:	68fb      	ldr	r3, [r7, #12]
 802065c:	4313      	orrs	r3, r2
 802065e:	f043 0307 	orr.w	r3, r3, #7
 8020662:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	68fa      	ldr	r2, [r7, #12]
 8020668:	609a      	str	r2, [r3, #8]
}
 802066a:	bf00      	nop
 802066c:	3714      	adds	r7, #20
 802066e:	46bd      	mov	sp, r7
 8020670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020674:	4770      	bx	lr
 8020676:	bf00      	nop
 8020678:	ffcfff8f 	.word	0xffcfff8f

0802067c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802067c:	b480      	push	{r7}
 802067e:	b087      	sub	sp, #28
 8020680:	af00      	add	r7, sp, #0
 8020682:	60f8      	str	r0, [r7, #12]
 8020684:	60b9      	str	r1, [r7, #8]
 8020686:	607a      	str	r2, [r7, #4]
 8020688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802068a:	68fb      	ldr	r3, [r7, #12]
 802068c:	689b      	ldr	r3, [r3, #8]
 802068e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020690:	697b      	ldr	r3, [r7, #20]
 8020692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020698:	683b      	ldr	r3, [r7, #0]
 802069a:	021a      	lsls	r2, r3, #8
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	431a      	orrs	r2, r3
 80206a0:	68bb      	ldr	r3, [r7, #8]
 80206a2:	4313      	orrs	r3, r2
 80206a4:	697a      	ldr	r2, [r7, #20]
 80206a6:	4313      	orrs	r3, r2
 80206a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80206aa:	68fb      	ldr	r3, [r7, #12]
 80206ac:	697a      	ldr	r2, [r7, #20]
 80206ae:	609a      	str	r2, [r3, #8]
}
 80206b0:	bf00      	nop
 80206b2:	371c      	adds	r7, #28
 80206b4:	46bd      	mov	sp, r7
 80206b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206ba:	4770      	bx	lr

080206bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80206bc:	b480      	push	{r7}
 80206be:	b085      	sub	sp, #20
 80206c0:	af00      	add	r7, sp, #0
 80206c2:	6078      	str	r0, [r7, #4]
 80206c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80206cc:	2b01      	cmp	r3, #1
 80206ce:	d101      	bne.n	80206d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80206d0:	2302      	movs	r3, #2
 80206d2:	e06d      	b.n	80207b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	2201      	movs	r2, #1
 80206d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	2202      	movs	r2, #2
 80206e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	685b      	ldr	r3, [r3, #4]
 80206ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	681b      	ldr	r3, [r3, #0]
 80206f0:	689b      	ldr	r3, [r3, #8]
 80206f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	681b      	ldr	r3, [r3, #0]
 80206f8:	4a30      	ldr	r2, [pc, #192]	@ (80207bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80206fa:	4293      	cmp	r3, r2
 80206fc:	d004      	beq.n	8020708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	4a2f      	ldr	r2, [pc, #188]	@ (80207c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020704:	4293      	cmp	r3, r2
 8020706:	d108      	bne.n	802071a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8020708:	68fb      	ldr	r3, [r7, #12]
 802070a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 802070e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8020710:	683b      	ldr	r3, [r7, #0]
 8020712:	685b      	ldr	r3, [r3, #4]
 8020714:	68fa      	ldr	r2, [r7, #12]
 8020716:	4313      	orrs	r3, r2
 8020718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802071a:	68fb      	ldr	r3, [r7, #12]
 802071c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8020720:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020722:	683b      	ldr	r3, [r7, #0]
 8020724:	681b      	ldr	r3, [r3, #0]
 8020726:	68fa      	ldr	r2, [r7, #12]
 8020728:	4313      	orrs	r3, r2
 802072a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	68fa      	ldr	r2, [r7, #12]
 8020732:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	4a20      	ldr	r2, [pc, #128]	@ (80207bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802073a:	4293      	cmp	r3, r2
 802073c:	d022      	beq.n	8020784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020746:	d01d      	beq.n	8020784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020748:	687b      	ldr	r3, [r7, #4]
 802074a:	681b      	ldr	r3, [r3, #0]
 802074c:	4a1d      	ldr	r2, [pc, #116]	@ (80207c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802074e:	4293      	cmp	r3, r2
 8020750:	d018      	beq.n	8020784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	4a1c      	ldr	r2, [pc, #112]	@ (80207c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020758:	4293      	cmp	r3, r2
 802075a:	d013      	beq.n	8020784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	4a1a      	ldr	r2, [pc, #104]	@ (80207cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8020762:	4293      	cmp	r3, r2
 8020764:	d00e      	beq.n	8020784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020766:	687b      	ldr	r3, [r7, #4]
 8020768:	681b      	ldr	r3, [r3, #0]
 802076a:	4a15      	ldr	r2, [pc, #84]	@ (80207c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802076c:	4293      	cmp	r3, r2
 802076e:	d009      	beq.n	8020784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	681b      	ldr	r3, [r3, #0]
 8020774:	4a16      	ldr	r2, [pc, #88]	@ (80207d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020776:	4293      	cmp	r3, r2
 8020778:	d004      	beq.n	8020784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	681b      	ldr	r3, [r3, #0]
 802077e:	4a15      	ldr	r2, [pc, #84]	@ (80207d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020780:	4293      	cmp	r3, r2
 8020782:	d10c      	bne.n	802079e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020784:	68bb      	ldr	r3, [r7, #8]
 8020786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802078a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802078c:	683b      	ldr	r3, [r7, #0]
 802078e:	689b      	ldr	r3, [r3, #8]
 8020790:	68ba      	ldr	r2, [r7, #8]
 8020792:	4313      	orrs	r3, r2
 8020794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	681b      	ldr	r3, [r3, #0]
 802079a:	68ba      	ldr	r2, [r7, #8]
 802079c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	2201      	movs	r2, #1
 80207a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	2200      	movs	r2, #0
 80207aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80207ae:	2300      	movs	r3, #0
}
 80207b0:	4618      	mov	r0, r3
 80207b2:	3714      	adds	r7, #20
 80207b4:	46bd      	mov	sp, r7
 80207b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ba:	4770      	bx	lr
 80207bc:	40010000 	.word	0x40010000
 80207c0:	40010400 	.word	0x40010400
 80207c4:	40000400 	.word	0x40000400
 80207c8:	40000800 	.word	0x40000800
 80207cc:	40000c00 	.word	0x40000c00
 80207d0:	40001800 	.word	0x40001800
 80207d4:	40014000 	.word	0x40014000

080207d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80207d8:	b580      	push	{r7, lr}
 80207da:	b082      	sub	sp, #8
 80207dc:	af00      	add	r7, sp, #0
 80207de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d101      	bne.n	80207ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80207e6:	2301      	movs	r3, #1
 80207e8:	e042      	b.n	8020870 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d106      	bne.n	8020802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80207f4:	687b      	ldr	r3, [r7, #4]
 80207f6:	2200      	movs	r2, #0
 80207f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80207fc:	6878      	ldr	r0, [r7, #4]
 80207fe:	f7e1 ff11 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	2224      	movs	r2, #36	@ 0x24
 8020806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	681a      	ldr	r2, [r3, #0]
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	681b      	ldr	r3, [r3, #0]
 8020814:	f022 0201 	bic.w	r2, r2, #1
 8020818:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802081e:	2b00      	cmp	r3, #0
 8020820:	d002      	beq.n	8020828 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8020822:	6878      	ldr	r0, [r7, #4]
 8020824:	f000 fd90 	bl	8021348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8020828:	6878      	ldr	r0, [r7, #4]
 802082a:	f000 f825 	bl	8020878 <UART_SetConfig>
 802082e:	4603      	mov	r3, r0
 8020830:	2b01      	cmp	r3, #1
 8020832:	d101      	bne.n	8020838 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8020834:	2301      	movs	r3, #1
 8020836:	e01b      	b.n	8020870 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	681b      	ldr	r3, [r3, #0]
 802083c:	685a      	ldr	r2, [r3, #4]
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8020846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	681b      	ldr	r3, [r3, #0]
 802084c:	689a      	ldr	r2, [r3, #8]
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	681b      	ldr	r3, [r3, #0]
 8020852:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8020856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	681a      	ldr	r2, [r3, #0]
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	f042 0201 	orr.w	r2, r2, #1
 8020866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020868:	6878      	ldr	r0, [r7, #4]
 802086a:	f000 fe0f 	bl	802148c <UART_CheckIdleState>
 802086e:	4603      	mov	r3, r0
}
 8020870:	4618      	mov	r0, r3
 8020872:	3708      	adds	r7, #8
 8020874:	46bd      	mov	sp, r7
 8020876:	bd80      	pop	{r7, pc}

08020878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8020878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802087c:	b092      	sub	sp, #72	@ 0x48
 802087e:	af00      	add	r7, sp, #0
 8020880:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020882:	2300      	movs	r3, #0
 8020884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020888:	697b      	ldr	r3, [r7, #20]
 802088a:	689a      	ldr	r2, [r3, #8]
 802088c:	697b      	ldr	r3, [r7, #20]
 802088e:	691b      	ldr	r3, [r3, #16]
 8020890:	431a      	orrs	r2, r3
 8020892:	697b      	ldr	r3, [r7, #20]
 8020894:	695b      	ldr	r3, [r3, #20]
 8020896:	431a      	orrs	r2, r3
 8020898:	697b      	ldr	r3, [r7, #20]
 802089a:	69db      	ldr	r3, [r3, #28]
 802089c:	4313      	orrs	r3, r2
 802089e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80208a0:	697b      	ldr	r3, [r7, #20]
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	681a      	ldr	r2, [r3, #0]
 80208a6:	4bbe      	ldr	r3, [pc, #760]	@ (8020ba0 <UART_SetConfig+0x328>)
 80208a8:	4013      	ands	r3, r2
 80208aa:	697a      	ldr	r2, [r7, #20]
 80208ac:	6812      	ldr	r2, [r2, #0]
 80208ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80208b0:	430b      	orrs	r3, r1
 80208b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80208b4:	697b      	ldr	r3, [r7, #20]
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	685b      	ldr	r3, [r3, #4]
 80208ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80208be:	697b      	ldr	r3, [r7, #20]
 80208c0:	68da      	ldr	r2, [r3, #12]
 80208c2:	697b      	ldr	r3, [r7, #20]
 80208c4:	681b      	ldr	r3, [r3, #0]
 80208c6:	430a      	orrs	r2, r1
 80208c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80208ca:	697b      	ldr	r3, [r7, #20]
 80208cc:	699b      	ldr	r3, [r3, #24]
 80208ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80208d0:	697b      	ldr	r3, [r7, #20]
 80208d2:	681b      	ldr	r3, [r3, #0]
 80208d4:	4ab3      	ldr	r2, [pc, #716]	@ (8020ba4 <UART_SetConfig+0x32c>)
 80208d6:	4293      	cmp	r3, r2
 80208d8:	d004      	beq.n	80208e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80208da:	697b      	ldr	r3, [r7, #20]
 80208dc:	6a1b      	ldr	r3, [r3, #32]
 80208de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80208e0:	4313      	orrs	r3, r2
 80208e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80208e4:	697b      	ldr	r3, [r7, #20]
 80208e6:	681b      	ldr	r3, [r3, #0]
 80208e8:	689a      	ldr	r2, [r3, #8]
 80208ea:	4baf      	ldr	r3, [pc, #700]	@ (8020ba8 <UART_SetConfig+0x330>)
 80208ec:	4013      	ands	r3, r2
 80208ee:	697a      	ldr	r2, [r7, #20]
 80208f0:	6812      	ldr	r2, [r2, #0]
 80208f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80208f4:	430b      	orrs	r3, r1
 80208f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80208f8:	697b      	ldr	r3, [r7, #20]
 80208fa:	681b      	ldr	r3, [r3, #0]
 80208fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80208fe:	f023 010f 	bic.w	r1, r3, #15
 8020902:	697b      	ldr	r3, [r7, #20]
 8020904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020906:	697b      	ldr	r3, [r7, #20]
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	430a      	orrs	r2, r1
 802090c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802090e:	697b      	ldr	r3, [r7, #20]
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	4aa6      	ldr	r2, [pc, #664]	@ (8020bac <UART_SetConfig+0x334>)
 8020914:	4293      	cmp	r3, r2
 8020916:	d177      	bne.n	8020a08 <UART_SetConfig+0x190>
 8020918:	4ba5      	ldr	r3, [pc, #660]	@ (8020bb0 <UART_SetConfig+0x338>)
 802091a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802091c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8020920:	2b28      	cmp	r3, #40	@ 0x28
 8020922:	d86d      	bhi.n	8020a00 <UART_SetConfig+0x188>
 8020924:	a201      	add	r2, pc, #4	@ (adr r2, 802092c <UART_SetConfig+0xb4>)
 8020926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802092a:	bf00      	nop
 802092c:	080209d1 	.word	0x080209d1
 8020930:	08020a01 	.word	0x08020a01
 8020934:	08020a01 	.word	0x08020a01
 8020938:	08020a01 	.word	0x08020a01
 802093c:	08020a01 	.word	0x08020a01
 8020940:	08020a01 	.word	0x08020a01
 8020944:	08020a01 	.word	0x08020a01
 8020948:	08020a01 	.word	0x08020a01
 802094c:	080209d9 	.word	0x080209d9
 8020950:	08020a01 	.word	0x08020a01
 8020954:	08020a01 	.word	0x08020a01
 8020958:	08020a01 	.word	0x08020a01
 802095c:	08020a01 	.word	0x08020a01
 8020960:	08020a01 	.word	0x08020a01
 8020964:	08020a01 	.word	0x08020a01
 8020968:	08020a01 	.word	0x08020a01
 802096c:	080209e1 	.word	0x080209e1
 8020970:	08020a01 	.word	0x08020a01
 8020974:	08020a01 	.word	0x08020a01
 8020978:	08020a01 	.word	0x08020a01
 802097c:	08020a01 	.word	0x08020a01
 8020980:	08020a01 	.word	0x08020a01
 8020984:	08020a01 	.word	0x08020a01
 8020988:	08020a01 	.word	0x08020a01
 802098c:	080209e9 	.word	0x080209e9
 8020990:	08020a01 	.word	0x08020a01
 8020994:	08020a01 	.word	0x08020a01
 8020998:	08020a01 	.word	0x08020a01
 802099c:	08020a01 	.word	0x08020a01
 80209a0:	08020a01 	.word	0x08020a01
 80209a4:	08020a01 	.word	0x08020a01
 80209a8:	08020a01 	.word	0x08020a01
 80209ac:	080209f1 	.word	0x080209f1
 80209b0:	08020a01 	.word	0x08020a01
 80209b4:	08020a01 	.word	0x08020a01
 80209b8:	08020a01 	.word	0x08020a01
 80209bc:	08020a01 	.word	0x08020a01
 80209c0:	08020a01 	.word	0x08020a01
 80209c4:	08020a01 	.word	0x08020a01
 80209c8:	08020a01 	.word	0x08020a01
 80209cc:	080209f9 	.word	0x080209f9
 80209d0:	2301      	movs	r3, #1
 80209d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209d6:	e222      	b.n	8020e1e <UART_SetConfig+0x5a6>
 80209d8:	2304      	movs	r3, #4
 80209da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209de:	e21e      	b.n	8020e1e <UART_SetConfig+0x5a6>
 80209e0:	2308      	movs	r3, #8
 80209e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209e6:	e21a      	b.n	8020e1e <UART_SetConfig+0x5a6>
 80209e8:	2310      	movs	r3, #16
 80209ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209ee:	e216      	b.n	8020e1e <UART_SetConfig+0x5a6>
 80209f0:	2320      	movs	r3, #32
 80209f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209f6:	e212      	b.n	8020e1e <UART_SetConfig+0x5a6>
 80209f8:	2340      	movs	r3, #64	@ 0x40
 80209fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80209fe:	e20e      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a00:	2380      	movs	r3, #128	@ 0x80
 8020a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a06:	e20a      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a08:	697b      	ldr	r3, [r7, #20]
 8020a0a:	681b      	ldr	r3, [r3, #0]
 8020a0c:	4a69      	ldr	r2, [pc, #420]	@ (8020bb4 <UART_SetConfig+0x33c>)
 8020a0e:	4293      	cmp	r3, r2
 8020a10:	d130      	bne.n	8020a74 <UART_SetConfig+0x1fc>
 8020a12:	4b67      	ldr	r3, [pc, #412]	@ (8020bb0 <UART_SetConfig+0x338>)
 8020a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a16:	f003 0307 	and.w	r3, r3, #7
 8020a1a:	2b05      	cmp	r3, #5
 8020a1c:	d826      	bhi.n	8020a6c <UART_SetConfig+0x1f4>
 8020a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8020a24 <UART_SetConfig+0x1ac>)
 8020a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a24:	08020a3d 	.word	0x08020a3d
 8020a28:	08020a45 	.word	0x08020a45
 8020a2c:	08020a4d 	.word	0x08020a4d
 8020a30:	08020a55 	.word	0x08020a55
 8020a34:	08020a5d 	.word	0x08020a5d
 8020a38:	08020a65 	.word	0x08020a65
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a42:	e1ec      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a44:	2304      	movs	r3, #4
 8020a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a4a:	e1e8      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a4c:	2308      	movs	r3, #8
 8020a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a52:	e1e4      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a54:	2310      	movs	r3, #16
 8020a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a5a:	e1e0      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a5c:	2320      	movs	r3, #32
 8020a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a62:	e1dc      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a64:	2340      	movs	r3, #64	@ 0x40
 8020a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a6a:	e1d8      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a6c:	2380      	movs	r3, #128	@ 0x80
 8020a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a72:	e1d4      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020a74:	697b      	ldr	r3, [r7, #20]
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	4a4f      	ldr	r2, [pc, #316]	@ (8020bb8 <UART_SetConfig+0x340>)
 8020a7a:	4293      	cmp	r3, r2
 8020a7c:	d130      	bne.n	8020ae0 <UART_SetConfig+0x268>
 8020a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8020bb0 <UART_SetConfig+0x338>)
 8020a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a82:	f003 0307 	and.w	r3, r3, #7
 8020a86:	2b05      	cmp	r3, #5
 8020a88:	d826      	bhi.n	8020ad8 <UART_SetConfig+0x260>
 8020a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8020a90 <UART_SetConfig+0x218>)
 8020a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a90:	08020aa9 	.word	0x08020aa9
 8020a94:	08020ab1 	.word	0x08020ab1
 8020a98:	08020ab9 	.word	0x08020ab9
 8020a9c:	08020ac1 	.word	0x08020ac1
 8020aa0:	08020ac9 	.word	0x08020ac9
 8020aa4:	08020ad1 	.word	0x08020ad1
 8020aa8:	2300      	movs	r3, #0
 8020aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020aae:	e1b6      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ab0:	2304      	movs	r3, #4
 8020ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ab6:	e1b2      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ab8:	2308      	movs	r3, #8
 8020aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020abe:	e1ae      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ac0:	2310      	movs	r3, #16
 8020ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ac6:	e1aa      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ac8:	2320      	movs	r3, #32
 8020aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ace:	e1a6      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ad0:	2340      	movs	r3, #64	@ 0x40
 8020ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ad6:	e1a2      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ad8:	2380      	movs	r3, #128	@ 0x80
 8020ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ade:	e19e      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ae0:	697b      	ldr	r3, [r7, #20]
 8020ae2:	681b      	ldr	r3, [r3, #0]
 8020ae4:	4a35      	ldr	r2, [pc, #212]	@ (8020bbc <UART_SetConfig+0x344>)
 8020ae6:	4293      	cmp	r3, r2
 8020ae8:	d130      	bne.n	8020b4c <UART_SetConfig+0x2d4>
 8020aea:	4b31      	ldr	r3, [pc, #196]	@ (8020bb0 <UART_SetConfig+0x338>)
 8020aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020aee:	f003 0307 	and.w	r3, r3, #7
 8020af2:	2b05      	cmp	r3, #5
 8020af4:	d826      	bhi.n	8020b44 <UART_SetConfig+0x2cc>
 8020af6:	a201      	add	r2, pc, #4	@ (adr r2, 8020afc <UART_SetConfig+0x284>)
 8020af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020afc:	08020b15 	.word	0x08020b15
 8020b00:	08020b1d 	.word	0x08020b1d
 8020b04:	08020b25 	.word	0x08020b25
 8020b08:	08020b2d 	.word	0x08020b2d
 8020b0c:	08020b35 	.word	0x08020b35
 8020b10:	08020b3d 	.word	0x08020b3d
 8020b14:	2300      	movs	r3, #0
 8020b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b1a:	e180      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b1c:	2304      	movs	r3, #4
 8020b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b22:	e17c      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b24:	2308      	movs	r3, #8
 8020b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b2a:	e178      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b2c:	2310      	movs	r3, #16
 8020b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b32:	e174      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b34:	2320      	movs	r3, #32
 8020b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b3a:	e170      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b3c:	2340      	movs	r3, #64	@ 0x40
 8020b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b42:	e16c      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b44:	2380      	movs	r3, #128	@ 0x80
 8020b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b4a:	e168      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b4c:	697b      	ldr	r3, [r7, #20]
 8020b4e:	681b      	ldr	r3, [r3, #0]
 8020b50:	4a1b      	ldr	r2, [pc, #108]	@ (8020bc0 <UART_SetConfig+0x348>)
 8020b52:	4293      	cmp	r3, r2
 8020b54:	d142      	bne.n	8020bdc <UART_SetConfig+0x364>
 8020b56:	4b16      	ldr	r3, [pc, #88]	@ (8020bb0 <UART_SetConfig+0x338>)
 8020b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020b5a:	f003 0307 	and.w	r3, r3, #7
 8020b5e:	2b05      	cmp	r3, #5
 8020b60:	d838      	bhi.n	8020bd4 <UART_SetConfig+0x35c>
 8020b62:	a201      	add	r2, pc, #4	@ (adr r2, 8020b68 <UART_SetConfig+0x2f0>)
 8020b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b68:	08020b81 	.word	0x08020b81
 8020b6c:	08020b89 	.word	0x08020b89
 8020b70:	08020b91 	.word	0x08020b91
 8020b74:	08020b99 	.word	0x08020b99
 8020b78:	08020bc5 	.word	0x08020bc5
 8020b7c:	08020bcd 	.word	0x08020bcd
 8020b80:	2300      	movs	r3, #0
 8020b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b86:	e14a      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b88:	2304      	movs	r3, #4
 8020b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b8e:	e146      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b90:	2308      	movs	r3, #8
 8020b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b96:	e142      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020b98:	2310      	movs	r3, #16
 8020b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b9e:	e13e      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ba0:	cfff69f3 	.word	0xcfff69f3
 8020ba4:	58000c00 	.word	0x58000c00
 8020ba8:	11fff4ff 	.word	0x11fff4ff
 8020bac:	40011000 	.word	0x40011000
 8020bb0:	58024400 	.word	0x58024400
 8020bb4:	40004400 	.word	0x40004400
 8020bb8:	40004800 	.word	0x40004800
 8020bbc:	40004c00 	.word	0x40004c00
 8020bc0:	40005000 	.word	0x40005000
 8020bc4:	2320      	movs	r3, #32
 8020bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020bca:	e128      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020bcc:	2340      	movs	r3, #64	@ 0x40
 8020bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020bd2:	e124      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020bd4:	2380      	movs	r3, #128	@ 0x80
 8020bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020bda:	e120      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020bdc:	697b      	ldr	r3, [r7, #20]
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	4acb      	ldr	r2, [pc, #812]	@ (8020f10 <UART_SetConfig+0x698>)
 8020be2:	4293      	cmp	r3, r2
 8020be4:	d176      	bne.n	8020cd4 <UART_SetConfig+0x45c>
 8020be6:	4bcb      	ldr	r3, [pc, #812]	@ (8020f14 <UART_SetConfig+0x69c>)
 8020be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8020bee:	2b28      	cmp	r3, #40	@ 0x28
 8020bf0:	d86c      	bhi.n	8020ccc <UART_SetConfig+0x454>
 8020bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8020bf8 <UART_SetConfig+0x380>)
 8020bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020bf8:	08020c9d 	.word	0x08020c9d
 8020bfc:	08020ccd 	.word	0x08020ccd
 8020c00:	08020ccd 	.word	0x08020ccd
 8020c04:	08020ccd 	.word	0x08020ccd
 8020c08:	08020ccd 	.word	0x08020ccd
 8020c0c:	08020ccd 	.word	0x08020ccd
 8020c10:	08020ccd 	.word	0x08020ccd
 8020c14:	08020ccd 	.word	0x08020ccd
 8020c18:	08020ca5 	.word	0x08020ca5
 8020c1c:	08020ccd 	.word	0x08020ccd
 8020c20:	08020ccd 	.word	0x08020ccd
 8020c24:	08020ccd 	.word	0x08020ccd
 8020c28:	08020ccd 	.word	0x08020ccd
 8020c2c:	08020ccd 	.word	0x08020ccd
 8020c30:	08020ccd 	.word	0x08020ccd
 8020c34:	08020ccd 	.word	0x08020ccd
 8020c38:	08020cad 	.word	0x08020cad
 8020c3c:	08020ccd 	.word	0x08020ccd
 8020c40:	08020ccd 	.word	0x08020ccd
 8020c44:	08020ccd 	.word	0x08020ccd
 8020c48:	08020ccd 	.word	0x08020ccd
 8020c4c:	08020ccd 	.word	0x08020ccd
 8020c50:	08020ccd 	.word	0x08020ccd
 8020c54:	08020ccd 	.word	0x08020ccd
 8020c58:	08020cb5 	.word	0x08020cb5
 8020c5c:	08020ccd 	.word	0x08020ccd
 8020c60:	08020ccd 	.word	0x08020ccd
 8020c64:	08020ccd 	.word	0x08020ccd
 8020c68:	08020ccd 	.word	0x08020ccd
 8020c6c:	08020ccd 	.word	0x08020ccd
 8020c70:	08020ccd 	.word	0x08020ccd
 8020c74:	08020ccd 	.word	0x08020ccd
 8020c78:	08020cbd 	.word	0x08020cbd
 8020c7c:	08020ccd 	.word	0x08020ccd
 8020c80:	08020ccd 	.word	0x08020ccd
 8020c84:	08020ccd 	.word	0x08020ccd
 8020c88:	08020ccd 	.word	0x08020ccd
 8020c8c:	08020ccd 	.word	0x08020ccd
 8020c90:	08020ccd 	.word	0x08020ccd
 8020c94:	08020ccd 	.word	0x08020ccd
 8020c98:	08020cc5 	.word	0x08020cc5
 8020c9c:	2301      	movs	r3, #1
 8020c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ca2:	e0bc      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ca4:	2304      	movs	r3, #4
 8020ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020caa:	e0b8      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020cac:	2308      	movs	r3, #8
 8020cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cb2:	e0b4      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020cb4:	2310      	movs	r3, #16
 8020cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cba:	e0b0      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020cbc:	2320      	movs	r3, #32
 8020cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cc2:	e0ac      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020cc4:	2340      	movs	r3, #64	@ 0x40
 8020cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cca:	e0a8      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020ccc:	2380      	movs	r3, #128	@ 0x80
 8020cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cd2:	e0a4      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020cd4:	697b      	ldr	r3, [r7, #20]
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	4a8f      	ldr	r2, [pc, #572]	@ (8020f18 <UART_SetConfig+0x6a0>)
 8020cda:	4293      	cmp	r3, r2
 8020cdc:	d130      	bne.n	8020d40 <UART_SetConfig+0x4c8>
 8020cde:	4b8d      	ldr	r3, [pc, #564]	@ (8020f14 <UART_SetConfig+0x69c>)
 8020ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020ce2:	f003 0307 	and.w	r3, r3, #7
 8020ce6:	2b05      	cmp	r3, #5
 8020ce8:	d826      	bhi.n	8020d38 <UART_SetConfig+0x4c0>
 8020cea:	a201      	add	r2, pc, #4	@ (adr r2, 8020cf0 <UART_SetConfig+0x478>)
 8020cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020cf0:	08020d09 	.word	0x08020d09
 8020cf4:	08020d11 	.word	0x08020d11
 8020cf8:	08020d19 	.word	0x08020d19
 8020cfc:	08020d21 	.word	0x08020d21
 8020d00:	08020d29 	.word	0x08020d29
 8020d04:	08020d31 	.word	0x08020d31
 8020d08:	2300      	movs	r3, #0
 8020d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d0e:	e086      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d10:	2304      	movs	r3, #4
 8020d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d16:	e082      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d18:	2308      	movs	r3, #8
 8020d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d1e:	e07e      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d20:	2310      	movs	r3, #16
 8020d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d26:	e07a      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d28:	2320      	movs	r3, #32
 8020d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d2e:	e076      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d30:	2340      	movs	r3, #64	@ 0x40
 8020d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d36:	e072      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d38:	2380      	movs	r3, #128	@ 0x80
 8020d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d3e:	e06e      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d40:	697b      	ldr	r3, [r7, #20]
 8020d42:	681b      	ldr	r3, [r3, #0]
 8020d44:	4a75      	ldr	r2, [pc, #468]	@ (8020f1c <UART_SetConfig+0x6a4>)
 8020d46:	4293      	cmp	r3, r2
 8020d48:	d130      	bne.n	8020dac <UART_SetConfig+0x534>
 8020d4a:	4b72      	ldr	r3, [pc, #456]	@ (8020f14 <UART_SetConfig+0x69c>)
 8020d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020d4e:	f003 0307 	and.w	r3, r3, #7
 8020d52:	2b05      	cmp	r3, #5
 8020d54:	d826      	bhi.n	8020da4 <UART_SetConfig+0x52c>
 8020d56:	a201      	add	r2, pc, #4	@ (adr r2, 8020d5c <UART_SetConfig+0x4e4>)
 8020d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d5c:	08020d75 	.word	0x08020d75
 8020d60:	08020d7d 	.word	0x08020d7d
 8020d64:	08020d85 	.word	0x08020d85
 8020d68:	08020d8d 	.word	0x08020d8d
 8020d6c:	08020d95 	.word	0x08020d95
 8020d70:	08020d9d 	.word	0x08020d9d
 8020d74:	2300      	movs	r3, #0
 8020d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d7a:	e050      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d7c:	2304      	movs	r3, #4
 8020d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d82:	e04c      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d84:	2308      	movs	r3, #8
 8020d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d8a:	e048      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d8c:	2310      	movs	r3, #16
 8020d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d92:	e044      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d94:	2320      	movs	r3, #32
 8020d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d9a:	e040      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020d9c:	2340      	movs	r3, #64	@ 0x40
 8020d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020da2:	e03c      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020da4:	2380      	movs	r3, #128	@ 0x80
 8020da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020daa:	e038      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020dac:	697b      	ldr	r3, [r7, #20]
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	4a5b      	ldr	r2, [pc, #364]	@ (8020f20 <UART_SetConfig+0x6a8>)
 8020db2:	4293      	cmp	r3, r2
 8020db4:	d130      	bne.n	8020e18 <UART_SetConfig+0x5a0>
 8020db6:	4b57      	ldr	r3, [pc, #348]	@ (8020f14 <UART_SetConfig+0x69c>)
 8020db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020dba:	f003 0307 	and.w	r3, r3, #7
 8020dbe:	2b05      	cmp	r3, #5
 8020dc0:	d826      	bhi.n	8020e10 <UART_SetConfig+0x598>
 8020dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8020dc8 <UART_SetConfig+0x550>)
 8020dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020dc8:	08020de1 	.word	0x08020de1
 8020dcc:	08020de9 	.word	0x08020de9
 8020dd0:	08020df1 	.word	0x08020df1
 8020dd4:	08020df9 	.word	0x08020df9
 8020dd8:	08020e01 	.word	0x08020e01
 8020ddc:	08020e09 	.word	0x08020e09
 8020de0:	2302      	movs	r3, #2
 8020de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020de6:	e01a      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020de8:	2304      	movs	r3, #4
 8020dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dee:	e016      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020df0:	2308      	movs	r3, #8
 8020df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020df6:	e012      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020df8:	2310      	movs	r3, #16
 8020dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dfe:	e00e      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020e00:	2320      	movs	r3, #32
 8020e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e06:	e00a      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020e08:	2340      	movs	r3, #64	@ 0x40
 8020e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e0e:	e006      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020e10:	2380      	movs	r3, #128	@ 0x80
 8020e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e16:	e002      	b.n	8020e1e <UART_SetConfig+0x5a6>
 8020e18:	2380      	movs	r3, #128	@ 0x80
 8020e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8020e1e:	697b      	ldr	r3, [r7, #20]
 8020e20:	681b      	ldr	r3, [r3, #0]
 8020e22:	4a3f      	ldr	r2, [pc, #252]	@ (8020f20 <UART_SetConfig+0x6a8>)
 8020e24:	4293      	cmp	r3, r2
 8020e26:	f040 80f8 	bne.w	802101a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8020e2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020e2e:	2b20      	cmp	r3, #32
 8020e30:	dc46      	bgt.n	8020ec0 <UART_SetConfig+0x648>
 8020e32:	2b02      	cmp	r3, #2
 8020e34:	f2c0 8082 	blt.w	8020f3c <UART_SetConfig+0x6c4>
 8020e38:	3b02      	subs	r3, #2
 8020e3a:	2b1e      	cmp	r3, #30
 8020e3c:	d87e      	bhi.n	8020f3c <UART_SetConfig+0x6c4>
 8020e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8020e44 <UART_SetConfig+0x5cc>)
 8020e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e44:	08020ec7 	.word	0x08020ec7
 8020e48:	08020f3d 	.word	0x08020f3d
 8020e4c:	08020ecf 	.word	0x08020ecf
 8020e50:	08020f3d 	.word	0x08020f3d
 8020e54:	08020f3d 	.word	0x08020f3d
 8020e58:	08020f3d 	.word	0x08020f3d
 8020e5c:	08020edf 	.word	0x08020edf
 8020e60:	08020f3d 	.word	0x08020f3d
 8020e64:	08020f3d 	.word	0x08020f3d
 8020e68:	08020f3d 	.word	0x08020f3d
 8020e6c:	08020f3d 	.word	0x08020f3d
 8020e70:	08020f3d 	.word	0x08020f3d
 8020e74:	08020f3d 	.word	0x08020f3d
 8020e78:	08020f3d 	.word	0x08020f3d
 8020e7c:	08020eef 	.word	0x08020eef
 8020e80:	08020f3d 	.word	0x08020f3d
 8020e84:	08020f3d 	.word	0x08020f3d
 8020e88:	08020f3d 	.word	0x08020f3d
 8020e8c:	08020f3d 	.word	0x08020f3d
 8020e90:	08020f3d 	.word	0x08020f3d
 8020e94:	08020f3d 	.word	0x08020f3d
 8020e98:	08020f3d 	.word	0x08020f3d
 8020e9c:	08020f3d 	.word	0x08020f3d
 8020ea0:	08020f3d 	.word	0x08020f3d
 8020ea4:	08020f3d 	.word	0x08020f3d
 8020ea8:	08020f3d 	.word	0x08020f3d
 8020eac:	08020f3d 	.word	0x08020f3d
 8020eb0:	08020f3d 	.word	0x08020f3d
 8020eb4:	08020f3d 	.word	0x08020f3d
 8020eb8:	08020f3d 	.word	0x08020f3d
 8020ebc:	08020f2f 	.word	0x08020f2f
 8020ec0:	2b40      	cmp	r3, #64	@ 0x40
 8020ec2:	d037      	beq.n	8020f34 <UART_SetConfig+0x6bc>
 8020ec4:	e03a      	b.n	8020f3c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8020ec6:	f7fd fc87 	bl	801e7d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8020eca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020ecc:	e03c      	b.n	8020f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020ed2:	4618      	mov	r0, r3
 8020ed4:	f7fd fc96 	bl	801e804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020edc:	e034      	b.n	8020f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020ede:	f107 0318 	add.w	r3, r7, #24
 8020ee2:	4618      	mov	r0, r3
 8020ee4:	f7fd fde2 	bl	801eaac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020ee8:	69fb      	ldr	r3, [r7, #28]
 8020eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020eec:	e02c      	b.n	8020f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020eee:	4b09      	ldr	r3, [pc, #36]	@ (8020f14 <UART_SetConfig+0x69c>)
 8020ef0:	681b      	ldr	r3, [r3, #0]
 8020ef2:	f003 0320 	and.w	r3, r3, #32
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	d016      	beq.n	8020f28 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020efa:	4b06      	ldr	r3, [pc, #24]	@ (8020f14 <UART_SetConfig+0x69c>)
 8020efc:	681b      	ldr	r3, [r3, #0]
 8020efe:	08db      	lsrs	r3, r3, #3
 8020f00:	f003 0303 	and.w	r3, r3, #3
 8020f04:	4a07      	ldr	r2, [pc, #28]	@ (8020f24 <UART_SetConfig+0x6ac>)
 8020f06:	fa22 f303 	lsr.w	r3, r2, r3
 8020f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020f0c:	e01c      	b.n	8020f48 <UART_SetConfig+0x6d0>
 8020f0e:	bf00      	nop
 8020f10:	40011400 	.word	0x40011400
 8020f14:	58024400 	.word	0x58024400
 8020f18:	40007800 	.word	0x40007800
 8020f1c:	40007c00 	.word	0x40007c00
 8020f20:	58000c00 	.word	0x58000c00
 8020f24:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8020f28:	4b9d      	ldr	r3, [pc, #628]	@ (80211a0 <UART_SetConfig+0x928>)
 8020f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f2c:	e00c      	b.n	8020f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020f2e:	4b9d      	ldr	r3, [pc, #628]	@ (80211a4 <UART_SetConfig+0x92c>)
 8020f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f32:	e009      	b.n	8020f48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f3a:	e005      	b.n	8020f48 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8020f3c:	2300      	movs	r3, #0
 8020f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020f40:	2301      	movs	r3, #1
 8020f42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020f46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	f000 81de 	beq.w	802130c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8020f50:	697b      	ldr	r3, [r7, #20]
 8020f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020f54:	4a94      	ldr	r2, [pc, #592]	@ (80211a8 <UART_SetConfig+0x930>)
 8020f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020f5a:	461a      	mov	r2, r3
 8020f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8020f62:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020f64:	697b      	ldr	r3, [r7, #20]
 8020f66:	685a      	ldr	r2, [r3, #4]
 8020f68:	4613      	mov	r3, r2
 8020f6a:	005b      	lsls	r3, r3, #1
 8020f6c:	4413      	add	r3, r2
 8020f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020f70:	429a      	cmp	r2, r3
 8020f72:	d305      	bcc.n	8020f80 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8020f74:	697b      	ldr	r3, [r7, #20]
 8020f76:	685b      	ldr	r3, [r3, #4]
 8020f78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020f7c:	429a      	cmp	r2, r3
 8020f7e:	d903      	bls.n	8020f88 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8020f80:	2301      	movs	r3, #1
 8020f82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020f86:	e1c1      	b.n	802130c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020f8a:	2200      	movs	r2, #0
 8020f8c:	60bb      	str	r3, [r7, #8]
 8020f8e:	60fa      	str	r2, [r7, #12]
 8020f90:	697b      	ldr	r3, [r7, #20]
 8020f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020f94:	4a84      	ldr	r2, [pc, #528]	@ (80211a8 <UART_SetConfig+0x930>)
 8020f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020f9a:	b29b      	uxth	r3, r3
 8020f9c:	2200      	movs	r2, #0
 8020f9e:	603b      	str	r3, [r7, #0]
 8020fa0:	607a      	str	r2, [r7, #4]
 8020fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020faa:	f7df fa01 	bl	80003b0 <__aeabi_uldivmod>
 8020fae:	4602      	mov	r2, r0
 8020fb0:	460b      	mov	r3, r1
 8020fb2:	4610      	mov	r0, r2
 8020fb4:	4619      	mov	r1, r3
 8020fb6:	f04f 0200 	mov.w	r2, #0
 8020fba:	f04f 0300 	mov.w	r3, #0
 8020fbe:	020b      	lsls	r3, r1, #8
 8020fc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8020fc4:	0202      	lsls	r2, r0, #8
 8020fc6:	6979      	ldr	r1, [r7, #20]
 8020fc8:	6849      	ldr	r1, [r1, #4]
 8020fca:	0849      	lsrs	r1, r1, #1
 8020fcc:	2000      	movs	r0, #0
 8020fce:	460c      	mov	r4, r1
 8020fd0:	4605      	mov	r5, r0
 8020fd2:	eb12 0804 	adds.w	r8, r2, r4
 8020fd6:	eb43 0905 	adc.w	r9, r3, r5
 8020fda:	697b      	ldr	r3, [r7, #20]
 8020fdc:	685b      	ldr	r3, [r3, #4]
 8020fde:	2200      	movs	r2, #0
 8020fe0:	469a      	mov	sl, r3
 8020fe2:	4693      	mov	fp, r2
 8020fe4:	4652      	mov	r2, sl
 8020fe6:	465b      	mov	r3, fp
 8020fe8:	4640      	mov	r0, r8
 8020fea:	4649      	mov	r1, r9
 8020fec:	f7df f9e0 	bl	80003b0 <__aeabi_uldivmod>
 8020ff0:	4602      	mov	r2, r0
 8020ff2:	460b      	mov	r3, r1
 8020ff4:	4613      	mov	r3, r2
 8020ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8020ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020ffe:	d308      	bcc.n	8021012 <UART_SetConfig+0x79a>
 8021000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021006:	d204      	bcs.n	8021012 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021008:	697b      	ldr	r3, [r7, #20]
 802100a:	681b      	ldr	r3, [r3, #0]
 802100c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802100e:	60da      	str	r2, [r3, #12]
 8021010:	e17c      	b.n	802130c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021012:	2301      	movs	r3, #1
 8021014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021018:	e178      	b.n	802130c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802101a:	697b      	ldr	r3, [r7, #20]
 802101c:	69db      	ldr	r3, [r3, #28]
 802101e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021022:	f040 80c5 	bne.w	80211b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021026:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802102a:	2b20      	cmp	r3, #32
 802102c:	dc48      	bgt.n	80210c0 <UART_SetConfig+0x848>
 802102e:	2b00      	cmp	r3, #0
 8021030:	db7b      	blt.n	802112a <UART_SetConfig+0x8b2>
 8021032:	2b20      	cmp	r3, #32
 8021034:	d879      	bhi.n	802112a <UART_SetConfig+0x8b2>
 8021036:	a201      	add	r2, pc, #4	@ (adr r2, 802103c <UART_SetConfig+0x7c4>)
 8021038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802103c:	080210c7 	.word	0x080210c7
 8021040:	080210cf 	.word	0x080210cf
 8021044:	0802112b 	.word	0x0802112b
 8021048:	0802112b 	.word	0x0802112b
 802104c:	080210d7 	.word	0x080210d7
 8021050:	0802112b 	.word	0x0802112b
 8021054:	0802112b 	.word	0x0802112b
 8021058:	0802112b 	.word	0x0802112b
 802105c:	080210e7 	.word	0x080210e7
 8021060:	0802112b 	.word	0x0802112b
 8021064:	0802112b 	.word	0x0802112b
 8021068:	0802112b 	.word	0x0802112b
 802106c:	0802112b 	.word	0x0802112b
 8021070:	0802112b 	.word	0x0802112b
 8021074:	0802112b 	.word	0x0802112b
 8021078:	0802112b 	.word	0x0802112b
 802107c:	080210f7 	.word	0x080210f7
 8021080:	0802112b 	.word	0x0802112b
 8021084:	0802112b 	.word	0x0802112b
 8021088:	0802112b 	.word	0x0802112b
 802108c:	0802112b 	.word	0x0802112b
 8021090:	0802112b 	.word	0x0802112b
 8021094:	0802112b 	.word	0x0802112b
 8021098:	0802112b 	.word	0x0802112b
 802109c:	0802112b 	.word	0x0802112b
 80210a0:	0802112b 	.word	0x0802112b
 80210a4:	0802112b 	.word	0x0802112b
 80210a8:	0802112b 	.word	0x0802112b
 80210ac:	0802112b 	.word	0x0802112b
 80210b0:	0802112b 	.word	0x0802112b
 80210b4:	0802112b 	.word	0x0802112b
 80210b8:	0802112b 	.word	0x0802112b
 80210bc:	0802111d 	.word	0x0802111d
 80210c0:	2b40      	cmp	r3, #64	@ 0x40
 80210c2:	d02e      	beq.n	8021122 <UART_SetConfig+0x8aa>
 80210c4:	e031      	b.n	802112a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80210c6:	f7fc f951 	bl	801d36c <HAL_RCC_GetPCLK1Freq>
 80210ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80210cc:	e033      	b.n	8021136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80210ce:	f7fc f963 	bl	801d398 <HAL_RCC_GetPCLK2Freq>
 80210d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80210d4:	e02f      	b.n	8021136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80210d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80210da:	4618      	mov	r0, r3
 80210dc:	f7fd fb92 	bl	801e804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80210e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210e4:	e027      	b.n	8021136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80210e6:	f107 0318 	add.w	r3, r7, #24
 80210ea:	4618      	mov	r0, r3
 80210ec:	f7fd fcde 	bl	801eaac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80210f0:	69fb      	ldr	r3, [r7, #28]
 80210f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210f4:	e01f      	b.n	8021136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80210f6:	4b2d      	ldr	r3, [pc, #180]	@ (80211ac <UART_SetConfig+0x934>)
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	f003 0320 	and.w	r3, r3, #32
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d009      	beq.n	8021116 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021102:	4b2a      	ldr	r3, [pc, #168]	@ (80211ac <UART_SetConfig+0x934>)
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	08db      	lsrs	r3, r3, #3
 8021108:	f003 0303 	and.w	r3, r3, #3
 802110c:	4a24      	ldr	r2, [pc, #144]	@ (80211a0 <UART_SetConfig+0x928>)
 802110e:	fa22 f303 	lsr.w	r3, r2, r3
 8021112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021114:	e00f      	b.n	8021136 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021116:	4b22      	ldr	r3, [pc, #136]	@ (80211a0 <UART_SetConfig+0x928>)
 8021118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802111a:	e00c      	b.n	8021136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802111c:	4b21      	ldr	r3, [pc, #132]	@ (80211a4 <UART_SetConfig+0x92c>)
 802111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021120:	e009      	b.n	8021136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021128:	e005      	b.n	8021136 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802112a:	2300      	movs	r3, #0
 802112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802112e:	2301      	movs	r3, #1
 8021130:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021138:	2b00      	cmp	r3, #0
 802113a:	f000 80e7 	beq.w	802130c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802113e:	697b      	ldr	r3, [r7, #20]
 8021140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021142:	4a19      	ldr	r2, [pc, #100]	@ (80211a8 <UART_SetConfig+0x930>)
 8021144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021148:	461a      	mov	r2, r3
 802114a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802114c:	fbb3 f3f2 	udiv	r3, r3, r2
 8021150:	005a      	lsls	r2, r3, #1
 8021152:	697b      	ldr	r3, [r7, #20]
 8021154:	685b      	ldr	r3, [r3, #4]
 8021156:	085b      	lsrs	r3, r3, #1
 8021158:	441a      	add	r2, r3
 802115a:	697b      	ldr	r3, [r7, #20]
 802115c:	685b      	ldr	r3, [r3, #4]
 802115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021162:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021166:	2b0f      	cmp	r3, #15
 8021168:	d916      	bls.n	8021198 <UART_SetConfig+0x920>
 802116a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802116c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021170:	d212      	bcs.n	8021198 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8021172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021174:	b29b      	uxth	r3, r3
 8021176:	f023 030f 	bic.w	r3, r3, #15
 802117a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802117c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802117e:	085b      	lsrs	r3, r3, #1
 8021180:	b29b      	uxth	r3, r3
 8021182:	f003 0307 	and.w	r3, r3, #7
 8021186:	b29a      	uxth	r2, r3
 8021188:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802118a:	4313      	orrs	r3, r2
 802118c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 802118e:	697b      	ldr	r3, [r7, #20]
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021194:	60da      	str	r2, [r3, #12]
 8021196:	e0b9      	b.n	802130c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021198:	2301      	movs	r3, #1
 802119a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 802119e:	e0b5      	b.n	802130c <UART_SetConfig+0xa94>
 80211a0:	03d09000 	.word	0x03d09000
 80211a4:	003d0900 	.word	0x003d0900
 80211a8:	08027390 	.word	0x08027390
 80211ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80211b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80211b4:	2b20      	cmp	r3, #32
 80211b6:	dc49      	bgt.n	802124c <UART_SetConfig+0x9d4>
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	db7c      	blt.n	80212b6 <UART_SetConfig+0xa3e>
 80211bc:	2b20      	cmp	r3, #32
 80211be:	d87a      	bhi.n	80212b6 <UART_SetConfig+0xa3e>
 80211c0:	a201      	add	r2, pc, #4	@ (adr r2, 80211c8 <UART_SetConfig+0x950>)
 80211c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80211c6:	bf00      	nop
 80211c8:	08021253 	.word	0x08021253
 80211cc:	0802125b 	.word	0x0802125b
 80211d0:	080212b7 	.word	0x080212b7
 80211d4:	080212b7 	.word	0x080212b7
 80211d8:	08021263 	.word	0x08021263
 80211dc:	080212b7 	.word	0x080212b7
 80211e0:	080212b7 	.word	0x080212b7
 80211e4:	080212b7 	.word	0x080212b7
 80211e8:	08021273 	.word	0x08021273
 80211ec:	080212b7 	.word	0x080212b7
 80211f0:	080212b7 	.word	0x080212b7
 80211f4:	080212b7 	.word	0x080212b7
 80211f8:	080212b7 	.word	0x080212b7
 80211fc:	080212b7 	.word	0x080212b7
 8021200:	080212b7 	.word	0x080212b7
 8021204:	080212b7 	.word	0x080212b7
 8021208:	08021283 	.word	0x08021283
 802120c:	080212b7 	.word	0x080212b7
 8021210:	080212b7 	.word	0x080212b7
 8021214:	080212b7 	.word	0x080212b7
 8021218:	080212b7 	.word	0x080212b7
 802121c:	080212b7 	.word	0x080212b7
 8021220:	080212b7 	.word	0x080212b7
 8021224:	080212b7 	.word	0x080212b7
 8021228:	080212b7 	.word	0x080212b7
 802122c:	080212b7 	.word	0x080212b7
 8021230:	080212b7 	.word	0x080212b7
 8021234:	080212b7 	.word	0x080212b7
 8021238:	080212b7 	.word	0x080212b7
 802123c:	080212b7 	.word	0x080212b7
 8021240:	080212b7 	.word	0x080212b7
 8021244:	080212b7 	.word	0x080212b7
 8021248:	080212a9 	.word	0x080212a9
 802124c:	2b40      	cmp	r3, #64	@ 0x40
 802124e:	d02e      	beq.n	80212ae <UART_SetConfig+0xa36>
 8021250:	e031      	b.n	80212b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021252:	f7fc f88b 	bl	801d36c <HAL_RCC_GetPCLK1Freq>
 8021256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021258:	e033      	b.n	80212c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802125a:	f7fc f89d 	bl	801d398 <HAL_RCC_GetPCLK2Freq>
 802125e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021260:	e02f      	b.n	80212c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021266:	4618      	mov	r0, r3
 8021268:	f7fd facc 	bl	801e804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021270:	e027      	b.n	80212c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021272:	f107 0318 	add.w	r3, r7, #24
 8021276:	4618      	mov	r0, r3
 8021278:	f7fd fc18 	bl	801eaac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802127c:	69fb      	ldr	r3, [r7, #28]
 802127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021280:	e01f      	b.n	80212c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021282:	4b2d      	ldr	r3, [pc, #180]	@ (8021338 <UART_SetConfig+0xac0>)
 8021284:	681b      	ldr	r3, [r3, #0]
 8021286:	f003 0320 	and.w	r3, r3, #32
 802128a:	2b00      	cmp	r3, #0
 802128c:	d009      	beq.n	80212a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802128e:	4b2a      	ldr	r3, [pc, #168]	@ (8021338 <UART_SetConfig+0xac0>)
 8021290:	681b      	ldr	r3, [r3, #0]
 8021292:	08db      	lsrs	r3, r3, #3
 8021294:	f003 0303 	and.w	r3, r3, #3
 8021298:	4a28      	ldr	r2, [pc, #160]	@ (802133c <UART_SetConfig+0xac4>)
 802129a:	fa22 f303 	lsr.w	r3, r2, r3
 802129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80212a0:	e00f      	b.n	80212c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80212a2:	4b26      	ldr	r3, [pc, #152]	@ (802133c <UART_SetConfig+0xac4>)
 80212a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212a6:	e00c      	b.n	80212c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80212a8:	4b25      	ldr	r3, [pc, #148]	@ (8021340 <UART_SetConfig+0xac8>)
 80212aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212ac:	e009      	b.n	80212c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80212ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80212b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212b4:	e005      	b.n	80212c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80212b6:	2300      	movs	r3, #0
 80212b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80212ba:	2301      	movs	r3, #1
 80212bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80212c0:	bf00      	nop
    }

    if (pclk != 0U)
 80212c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d021      	beq.n	802130c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80212c8:	697b      	ldr	r3, [r7, #20]
 80212ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80212cc:	4a1d      	ldr	r2, [pc, #116]	@ (8021344 <UART_SetConfig+0xacc>)
 80212ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80212d2:	461a      	mov	r2, r3
 80212d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80212d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80212da:	697b      	ldr	r3, [r7, #20]
 80212dc:	685b      	ldr	r3, [r3, #4]
 80212de:	085b      	lsrs	r3, r3, #1
 80212e0:	441a      	add	r2, r3
 80212e2:	697b      	ldr	r3, [r7, #20]
 80212e4:	685b      	ldr	r3, [r3, #4]
 80212e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80212ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80212ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212ee:	2b0f      	cmp	r3, #15
 80212f0:	d909      	bls.n	8021306 <UART_SetConfig+0xa8e>
 80212f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80212f8:	d205      	bcs.n	8021306 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80212fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212fc:	b29a      	uxth	r2, r3
 80212fe:	697b      	ldr	r3, [r7, #20]
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	60da      	str	r2, [r3, #12]
 8021304:	e002      	b.n	802130c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021306:	2301      	movs	r3, #1
 8021308:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802130c:	697b      	ldr	r3, [r7, #20]
 802130e:	2201      	movs	r2, #1
 8021310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8021314:	697b      	ldr	r3, [r7, #20]
 8021316:	2201      	movs	r2, #1
 8021318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802131c:	697b      	ldr	r3, [r7, #20]
 802131e:	2200      	movs	r2, #0
 8021320:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8021322:	697b      	ldr	r3, [r7, #20]
 8021324:	2200      	movs	r2, #0
 8021326:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8021328:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 802132c:	4618      	mov	r0, r3
 802132e:	3748      	adds	r7, #72	@ 0x48
 8021330:	46bd      	mov	sp, r7
 8021332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021336:	bf00      	nop
 8021338:	58024400 	.word	0x58024400
 802133c:	03d09000 	.word	0x03d09000
 8021340:	003d0900 	.word	0x003d0900
 8021344:	08027390 	.word	0x08027390

08021348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021348:	b480      	push	{r7}
 802134a:	b083      	sub	sp, #12
 802134c:	af00      	add	r7, sp, #0
 802134e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021354:	f003 0308 	and.w	r3, r3, #8
 8021358:	2b00      	cmp	r3, #0
 802135a:	d00a      	beq.n	8021372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	685b      	ldr	r3, [r3, #4]
 8021362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	681b      	ldr	r3, [r3, #0]
 802136e:	430a      	orrs	r2, r1
 8021370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021376:	f003 0301 	and.w	r3, r3, #1
 802137a:	2b00      	cmp	r3, #0
 802137c:	d00a      	beq.n	8021394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	685b      	ldr	r3, [r3, #4]
 8021384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	681b      	ldr	r3, [r3, #0]
 8021390:	430a      	orrs	r2, r1
 8021392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021398:	f003 0302 	and.w	r3, r3, #2
 802139c:	2b00      	cmp	r3, #0
 802139e:	d00a      	beq.n	80213b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80213a0:	687b      	ldr	r3, [r7, #4]
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	685b      	ldr	r3, [r3, #4]
 80213a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	681b      	ldr	r3, [r3, #0]
 80213b2:	430a      	orrs	r2, r1
 80213b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213ba:	f003 0304 	and.w	r3, r3, #4
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d00a      	beq.n	80213d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	681b      	ldr	r3, [r3, #0]
 80213c6:	685b      	ldr	r3, [r3, #4]
 80213c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	681b      	ldr	r3, [r3, #0]
 80213d4:	430a      	orrs	r2, r1
 80213d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213dc:	f003 0310 	and.w	r3, r3, #16
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d00a      	beq.n	80213fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80213e4:	687b      	ldr	r3, [r7, #4]
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	689b      	ldr	r3, [r3, #8]
 80213ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80213ee:	687b      	ldr	r3, [r7, #4]
 80213f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80213f2:	687b      	ldr	r3, [r7, #4]
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	430a      	orrs	r2, r1
 80213f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213fe:	f003 0320 	and.w	r3, r3, #32
 8021402:	2b00      	cmp	r3, #0
 8021404:	d00a      	beq.n	802141c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	689b      	ldr	r3, [r3, #8]
 802140c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	430a      	orrs	r2, r1
 802141a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021424:	2b00      	cmp	r3, #0
 8021426:	d01a      	beq.n	802145e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021428:	687b      	ldr	r3, [r7, #4]
 802142a:	681b      	ldr	r3, [r3, #0]
 802142c:	685b      	ldr	r3, [r3, #4]
 802142e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8021432:	687b      	ldr	r3, [r7, #4]
 8021434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	681b      	ldr	r3, [r3, #0]
 802143a:	430a      	orrs	r2, r1
 802143c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021446:	d10a      	bne.n	802145e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021448:	687b      	ldr	r3, [r7, #4]
 802144a:	681b      	ldr	r3, [r3, #0]
 802144c:	685b      	ldr	r3, [r3, #4]
 802144e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	430a      	orrs	r2, r1
 802145c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021466:	2b00      	cmp	r3, #0
 8021468:	d00a      	beq.n	8021480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	685b      	ldr	r3, [r3, #4]
 8021470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	681b      	ldr	r3, [r3, #0]
 802147c:	430a      	orrs	r2, r1
 802147e:	605a      	str	r2, [r3, #4]
  }
}
 8021480:	bf00      	nop
 8021482:	370c      	adds	r7, #12
 8021484:	46bd      	mov	sp, r7
 8021486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802148a:	4770      	bx	lr

0802148c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802148c:	b580      	push	{r7, lr}
 802148e:	b098      	sub	sp, #96	@ 0x60
 8021490:	af02      	add	r7, sp, #8
 8021492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	2200      	movs	r2, #0
 8021498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802149c:	f7f8 fb94 	bl	8019bc8 <HAL_GetTick>
 80214a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80214a2:	687b      	ldr	r3, [r7, #4]
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	f003 0308 	and.w	r3, r3, #8
 80214ac:	2b08      	cmp	r3, #8
 80214ae:	d12f      	bne.n	8021510 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80214b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80214b4:	9300      	str	r3, [sp, #0]
 80214b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80214b8:	2200      	movs	r2, #0
 80214ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80214be:	6878      	ldr	r0, [r7, #4]
 80214c0:	f000 f88e 	bl	80215e0 <UART_WaitOnFlagUntilTimeout>
 80214c4:	4603      	mov	r3, r0
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	d022      	beq.n	8021510 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80214d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80214d2:	e853 3f00 	ldrex	r3, [r3]
 80214d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80214d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80214da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80214de:	653b      	str	r3, [r7, #80]	@ 0x50
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	461a      	mov	r2, r3
 80214e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80214e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80214ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80214ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80214ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80214f0:	e841 2300 	strex	r3, r2, [r1]
 80214f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80214f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d1e6      	bne.n	80214ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	2220      	movs	r2, #32
 8021500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	2200      	movs	r2, #0
 8021508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802150c:	2303      	movs	r3, #3
 802150e:	e063      	b.n	80215d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8021510:	687b      	ldr	r3, [r7, #4]
 8021512:	681b      	ldr	r3, [r3, #0]
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	f003 0304 	and.w	r3, r3, #4
 802151a:	2b04      	cmp	r3, #4
 802151c:	d149      	bne.n	80215b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802151e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021522:	9300      	str	r3, [sp, #0]
 8021524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021526:	2200      	movs	r2, #0
 8021528:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 802152c:	6878      	ldr	r0, [r7, #4]
 802152e:	f000 f857 	bl	80215e0 <UART_WaitOnFlagUntilTimeout>
 8021532:	4603      	mov	r3, r0
 8021534:	2b00      	cmp	r3, #0
 8021536:	d03c      	beq.n	80215b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021540:	e853 3f00 	ldrex	r3, [r3]
 8021544:	623b      	str	r3, [r7, #32]
   return(result);
 8021546:	6a3b      	ldr	r3, [r7, #32]
 8021548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802154c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	461a      	mov	r2, r3
 8021554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021556:	633b      	str	r3, [r7, #48]	@ 0x30
 8021558:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802155a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802155c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802155e:	e841 2300 	strex	r3, r2, [r1]
 8021562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021566:	2b00      	cmp	r3, #0
 8021568:	d1e6      	bne.n	8021538 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	681b      	ldr	r3, [r3, #0]
 802156e:	3308      	adds	r3, #8
 8021570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021572:	693b      	ldr	r3, [r7, #16]
 8021574:	e853 3f00 	ldrex	r3, [r3]
 8021578:	60fb      	str	r3, [r7, #12]
   return(result);
 802157a:	68fb      	ldr	r3, [r7, #12]
 802157c:	f023 0301 	bic.w	r3, r3, #1
 8021580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	681b      	ldr	r3, [r3, #0]
 8021586:	3308      	adds	r3, #8
 8021588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802158a:	61fa      	str	r2, [r7, #28]
 802158c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802158e:	69b9      	ldr	r1, [r7, #24]
 8021590:	69fa      	ldr	r2, [r7, #28]
 8021592:	e841 2300 	strex	r3, r2, [r1]
 8021596:	617b      	str	r3, [r7, #20]
   return(result);
 8021598:	697b      	ldr	r3, [r7, #20]
 802159a:	2b00      	cmp	r3, #0
 802159c:	d1e5      	bne.n	802156a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	2220      	movs	r2, #32
 80215a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	2200      	movs	r2, #0
 80215aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80215ae:	2303      	movs	r3, #3
 80215b0:	e012      	b.n	80215d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	2220      	movs	r2, #32
 80215b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	2220      	movs	r2, #32
 80215be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	2200      	movs	r2, #0
 80215c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	2200      	movs	r2, #0
 80215cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	2200      	movs	r2, #0
 80215d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80215d6:	2300      	movs	r3, #0
}
 80215d8:	4618      	mov	r0, r3
 80215da:	3758      	adds	r7, #88	@ 0x58
 80215dc:	46bd      	mov	sp, r7
 80215de:	bd80      	pop	{r7, pc}

080215e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	b084      	sub	sp, #16
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	60f8      	str	r0, [r7, #12]
 80215e8:	60b9      	str	r1, [r7, #8]
 80215ea:	603b      	str	r3, [r7, #0]
 80215ec:	4613      	mov	r3, r2
 80215ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80215f0:	e04f      	b.n	8021692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80215f2:	69bb      	ldr	r3, [r7, #24]
 80215f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80215f8:	d04b      	beq.n	8021692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80215fa:	f7f8 fae5 	bl	8019bc8 <HAL_GetTick>
 80215fe:	4602      	mov	r2, r0
 8021600:	683b      	ldr	r3, [r7, #0]
 8021602:	1ad3      	subs	r3, r2, r3
 8021604:	69ba      	ldr	r2, [r7, #24]
 8021606:	429a      	cmp	r2, r3
 8021608:	d302      	bcc.n	8021610 <UART_WaitOnFlagUntilTimeout+0x30>
 802160a:	69bb      	ldr	r3, [r7, #24]
 802160c:	2b00      	cmp	r3, #0
 802160e:	d101      	bne.n	8021614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8021610:	2303      	movs	r3, #3
 8021612:	e04e      	b.n	80216b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	f003 0304 	and.w	r3, r3, #4
 802161e:	2b00      	cmp	r3, #0
 8021620:	d037      	beq.n	8021692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8021622:	68bb      	ldr	r3, [r7, #8]
 8021624:	2b80      	cmp	r3, #128	@ 0x80
 8021626:	d034      	beq.n	8021692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8021628:	68bb      	ldr	r3, [r7, #8]
 802162a:	2b40      	cmp	r3, #64	@ 0x40
 802162c:	d031      	beq.n	8021692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802162e:	68fb      	ldr	r3, [r7, #12]
 8021630:	681b      	ldr	r3, [r3, #0]
 8021632:	69db      	ldr	r3, [r3, #28]
 8021634:	f003 0308 	and.w	r3, r3, #8
 8021638:	2b08      	cmp	r3, #8
 802163a:	d110      	bne.n	802165e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802163c:	68fb      	ldr	r3, [r7, #12]
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	2208      	movs	r2, #8
 8021642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021644:	68f8      	ldr	r0, [r7, #12]
 8021646:	f000 f839 	bl	80216bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802164a:	68fb      	ldr	r3, [r7, #12]
 802164c:	2208      	movs	r2, #8
 802164e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	2200      	movs	r2, #0
 8021656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802165a:	2301      	movs	r3, #1
 802165c:	e029      	b.n	80216b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802165e:	68fb      	ldr	r3, [r7, #12]
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	69db      	ldr	r3, [r3, #28]
 8021664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802166c:	d111      	bne.n	8021692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802166e:	68fb      	ldr	r3, [r7, #12]
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021678:	68f8      	ldr	r0, [r7, #12]
 802167a:	f000 f81f 	bl	80216bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802167e:	68fb      	ldr	r3, [r7, #12]
 8021680:	2220      	movs	r2, #32
 8021682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021686:	68fb      	ldr	r3, [r7, #12]
 8021688:	2200      	movs	r2, #0
 802168a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802168e:	2303      	movs	r3, #3
 8021690:	e00f      	b.n	80216b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021692:	68fb      	ldr	r3, [r7, #12]
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	69da      	ldr	r2, [r3, #28]
 8021698:	68bb      	ldr	r3, [r7, #8]
 802169a:	4013      	ands	r3, r2
 802169c:	68ba      	ldr	r2, [r7, #8]
 802169e:	429a      	cmp	r2, r3
 80216a0:	bf0c      	ite	eq
 80216a2:	2301      	moveq	r3, #1
 80216a4:	2300      	movne	r3, #0
 80216a6:	b2db      	uxtb	r3, r3
 80216a8:	461a      	mov	r2, r3
 80216aa:	79fb      	ldrb	r3, [r7, #7]
 80216ac:	429a      	cmp	r2, r3
 80216ae:	d0a0      	beq.n	80215f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80216b0:	2300      	movs	r3, #0
}
 80216b2:	4618      	mov	r0, r3
 80216b4:	3710      	adds	r7, #16
 80216b6:	46bd      	mov	sp, r7
 80216b8:	bd80      	pop	{r7, pc}
	...

080216bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80216bc:	b480      	push	{r7}
 80216be:	b095      	sub	sp, #84	@ 0x54
 80216c0:	af00      	add	r7, sp, #0
 80216c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80216ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80216cc:	e853 3f00 	ldrex	r3, [r3]
 80216d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80216d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80216d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80216d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	461a      	mov	r2, r3
 80216e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80216e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80216e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80216e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80216e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80216ea:	e841 2300 	strex	r3, r2, [r1]
 80216ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80216f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	d1e6      	bne.n	80216c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80216f6:	687b      	ldr	r3, [r7, #4]
 80216f8:	681b      	ldr	r3, [r3, #0]
 80216fa:	3308      	adds	r3, #8
 80216fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80216fe:	6a3b      	ldr	r3, [r7, #32]
 8021700:	e853 3f00 	ldrex	r3, [r3]
 8021704:	61fb      	str	r3, [r7, #28]
   return(result);
 8021706:	69fa      	ldr	r2, [r7, #28]
 8021708:	4b1e      	ldr	r3, [pc, #120]	@ (8021784 <UART_EndRxTransfer+0xc8>)
 802170a:	4013      	ands	r3, r2
 802170c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	681b      	ldr	r3, [r3, #0]
 8021712:	3308      	adds	r3, #8
 8021714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8021718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802171a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802171c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802171e:	e841 2300 	strex	r3, r2, [r1]
 8021722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8021724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021726:	2b00      	cmp	r3, #0
 8021728:	d1e5      	bne.n	80216f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802172e:	2b01      	cmp	r3, #1
 8021730:	d118      	bne.n	8021764 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	681b      	ldr	r3, [r3, #0]
 8021736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021738:	68fb      	ldr	r3, [r7, #12]
 802173a:	e853 3f00 	ldrex	r3, [r3]
 802173e:	60bb      	str	r3, [r7, #8]
   return(result);
 8021740:	68bb      	ldr	r3, [r7, #8]
 8021742:	f023 0310 	bic.w	r3, r3, #16
 8021746:	647b      	str	r3, [r7, #68]	@ 0x44
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	461a      	mov	r2, r3
 802174e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021750:	61bb      	str	r3, [r7, #24]
 8021752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021754:	6979      	ldr	r1, [r7, #20]
 8021756:	69ba      	ldr	r2, [r7, #24]
 8021758:	e841 2300 	strex	r3, r2, [r1]
 802175c:	613b      	str	r3, [r7, #16]
   return(result);
 802175e:	693b      	ldr	r3, [r7, #16]
 8021760:	2b00      	cmp	r3, #0
 8021762:	d1e6      	bne.n	8021732 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	2220      	movs	r2, #32
 8021768:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	2200      	movs	r2, #0
 8021770:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	2200      	movs	r2, #0
 8021776:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8021778:	bf00      	nop
 802177a:	3754      	adds	r7, #84	@ 0x54
 802177c:	46bd      	mov	sp, r7
 802177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021782:	4770      	bx	lr
 8021784:	effffffe 	.word	0xeffffffe

08021788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021788:	b480      	push	{r7}
 802178a:	b085      	sub	sp, #20
 802178c:	af00      	add	r7, sp, #0
 802178e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021796:	2b01      	cmp	r3, #1
 8021798:	d101      	bne.n	802179e <HAL_UARTEx_DisableFifoMode+0x16>
 802179a:	2302      	movs	r3, #2
 802179c:	e027      	b.n	80217ee <HAL_UARTEx_DisableFifoMode+0x66>
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	2201      	movs	r2, #1
 80217a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	2224      	movs	r2, #36	@ 0x24
 80217aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	681b      	ldr	r3, [r3, #0]
 80217ba:	681a      	ldr	r2, [r3, #0]
 80217bc:	687b      	ldr	r3, [r7, #4]
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	f022 0201 	bic.w	r2, r2, #1
 80217c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80217c6:	68fb      	ldr	r3, [r7, #12]
 80217c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80217cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	2200      	movs	r2, #0
 80217d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	68fa      	ldr	r2, [r7, #12]
 80217da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	2220      	movs	r2, #32
 80217e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80217e4:	687b      	ldr	r3, [r7, #4]
 80217e6:	2200      	movs	r2, #0
 80217e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80217ec:	2300      	movs	r3, #0
}
 80217ee:	4618      	mov	r0, r3
 80217f0:	3714      	adds	r7, #20
 80217f2:	46bd      	mov	sp, r7
 80217f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217f8:	4770      	bx	lr

080217fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80217fa:	b580      	push	{r7, lr}
 80217fc:	b084      	sub	sp, #16
 80217fe:	af00      	add	r7, sp, #0
 8021800:	6078      	str	r0, [r7, #4]
 8021802:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021804:	687b      	ldr	r3, [r7, #4]
 8021806:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802180a:	2b01      	cmp	r3, #1
 802180c:	d101      	bne.n	8021812 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802180e:	2302      	movs	r3, #2
 8021810:	e02d      	b.n	802186e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	2201      	movs	r2, #1
 8021816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802181a:	687b      	ldr	r3, [r7, #4]
 802181c:	2224      	movs	r2, #36	@ 0x24
 802181e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	681b      	ldr	r3, [r3, #0]
 8021826:	681b      	ldr	r3, [r3, #0]
 8021828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	681b      	ldr	r3, [r3, #0]
 802182e:	681a      	ldr	r2, [r3, #0]
 8021830:	687b      	ldr	r3, [r7, #4]
 8021832:	681b      	ldr	r3, [r3, #0]
 8021834:	f022 0201 	bic.w	r2, r2, #1
 8021838:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802183a:	687b      	ldr	r3, [r7, #4]
 802183c:	681b      	ldr	r3, [r3, #0]
 802183e:	689b      	ldr	r3, [r3, #8]
 8021840:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8021844:	687b      	ldr	r3, [r7, #4]
 8021846:	681b      	ldr	r3, [r3, #0]
 8021848:	683a      	ldr	r2, [r7, #0]
 802184a:	430a      	orrs	r2, r1
 802184c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802184e:	6878      	ldr	r0, [r7, #4]
 8021850:	f000 f850 	bl	80218f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	681b      	ldr	r3, [r3, #0]
 8021858:	68fa      	ldr	r2, [r7, #12]
 802185a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	2220      	movs	r2, #32
 8021860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021864:	687b      	ldr	r3, [r7, #4]
 8021866:	2200      	movs	r2, #0
 8021868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802186c:	2300      	movs	r3, #0
}
 802186e:	4618      	mov	r0, r3
 8021870:	3710      	adds	r7, #16
 8021872:	46bd      	mov	sp, r7
 8021874:	bd80      	pop	{r7, pc}

08021876 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021876:	b580      	push	{r7, lr}
 8021878:	b084      	sub	sp, #16
 802187a:	af00      	add	r7, sp, #0
 802187c:	6078      	str	r0, [r7, #4]
 802187e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021886:	2b01      	cmp	r3, #1
 8021888:	d101      	bne.n	802188e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802188a:	2302      	movs	r3, #2
 802188c:	e02d      	b.n	80218ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	2201      	movs	r2, #1
 8021892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	2224      	movs	r2, #36	@ 0x24
 802189a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	681b      	ldr	r3, [r3, #0]
 80218a2:	681b      	ldr	r3, [r3, #0]
 80218a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	681b      	ldr	r3, [r3, #0]
 80218aa:	681a      	ldr	r2, [r3, #0]
 80218ac:	687b      	ldr	r3, [r7, #4]
 80218ae:	681b      	ldr	r3, [r3, #0]
 80218b0:	f022 0201 	bic.w	r2, r2, #1
 80218b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	681b      	ldr	r3, [r3, #0]
 80218ba:	689b      	ldr	r3, [r3, #8]
 80218bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	681b      	ldr	r3, [r3, #0]
 80218c4:	683a      	ldr	r2, [r7, #0]
 80218c6:	430a      	orrs	r2, r1
 80218c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80218ca:	6878      	ldr	r0, [r7, #4]
 80218cc:	f000 f812 	bl	80218f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	681b      	ldr	r3, [r3, #0]
 80218d4:	68fa      	ldr	r2, [r7, #12]
 80218d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	2220      	movs	r2, #32
 80218dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80218e0:	687b      	ldr	r3, [r7, #4]
 80218e2:	2200      	movs	r2, #0
 80218e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80218e8:	2300      	movs	r3, #0
}
 80218ea:	4618      	mov	r0, r3
 80218ec:	3710      	adds	r7, #16
 80218ee:	46bd      	mov	sp, r7
 80218f0:	bd80      	pop	{r7, pc}
	...

080218f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80218f4:	b480      	push	{r7}
 80218f6:	b085      	sub	sp, #20
 80218f8:	af00      	add	r7, sp, #0
 80218fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80218fc:	687b      	ldr	r3, [r7, #4]
 80218fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8021900:	2b00      	cmp	r3, #0
 8021902:	d108      	bne.n	8021916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8021904:	687b      	ldr	r3, [r7, #4]
 8021906:	2201      	movs	r2, #1
 8021908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 802190c:	687b      	ldr	r3, [r7, #4]
 802190e:	2201      	movs	r2, #1
 8021910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8021914:	e031      	b.n	802197a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8021916:	2310      	movs	r3, #16
 8021918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802191a:	2310      	movs	r3, #16
 802191c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	689b      	ldr	r3, [r3, #8]
 8021924:	0e5b      	lsrs	r3, r3, #25
 8021926:	b2db      	uxtb	r3, r3
 8021928:	f003 0307 	and.w	r3, r3, #7
 802192c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802192e:	687b      	ldr	r3, [r7, #4]
 8021930:	681b      	ldr	r3, [r3, #0]
 8021932:	689b      	ldr	r3, [r3, #8]
 8021934:	0f5b      	lsrs	r3, r3, #29
 8021936:	b2db      	uxtb	r3, r3
 8021938:	f003 0307 	and.w	r3, r3, #7
 802193c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802193e:	7bbb      	ldrb	r3, [r7, #14]
 8021940:	7b3a      	ldrb	r2, [r7, #12]
 8021942:	4911      	ldr	r1, [pc, #68]	@ (8021988 <UARTEx_SetNbDataToProcess+0x94>)
 8021944:	5c8a      	ldrb	r2, [r1, r2]
 8021946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802194a:	7b3a      	ldrb	r2, [r7, #12]
 802194c:	490f      	ldr	r1, [pc, #60]	@ (802198c <UARTEx_SetNbDataToProcess+0x98>)
 802194e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021950:	fb93 f3f2 	sdiv	r3, r3, r2
 8021954:	b29a      	uxth	r2, r3
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802195c:	7bfb      	ldrb	r3, [r7, #15]
 802195e:	7b7a      	ldrb	r2, [r7, #13]
 8021960:	4909      	ldr	r1, [pc, #36]	@ (8021988 <UARTEx_SetNbDataToProcess+0x94>)
 8021962:	5c8a      	ldrb	r2, [r1, r2]
 8021964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8021968:	7b7a      	ldrb	r2, [r7, #13]
 802196a:	4908      	ldr	r1, [pc, #32]	@ (802198c <UARTEx_SetNbDataToProcess+0x98>)
 802196c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802196e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021972:	b29a      	uxth	r2, r3
 8021974:	687b      	ldr	r3, [r7, #4]
 8021976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802197a:	bf00      	nop
 802197c:	3714      	adds	r7, #20
 802197e:	46bd      	mov	sp, r7
 8021980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021984:	4770      	bx	lr
 8021986:	bf00      	nop
 8021988:	080273a8 	.word	0x080273a8
 802198c:	080273b0 	.word	0x080273b0

08021990 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8021990:	b580      	push	{r7, lr}
 8021992:	b082      	sub	sp, #8
 8021994:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8021996:	4b15      	ldr	r3, [pc, #84]	@ (80219ec <prvInitialiseLogging+0x5c>)
 8021998:	681b      	ldr	r3, [r3, #0]
 802199a:	2b00      	cmp	r3, #0
 802199c:	d120      	bne.n	80219e0 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802199e:	f7e3 f9dd 	bl	8004d5c <xTaskGetSchedulerState>
 80219a2:	4603      	mov	r3, r0
 80219a4:	2b02      	cmp	r3, #2
 80219a6:	d11b      	bne.n	80219e0 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 80219a8:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 80219ac:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 80219ae:	6878      	ldr	r0, [r7, #4]
 80219b0:	f7e4 fb38 	bl	8006024 <pvPortMalloc>
 80219b4:	4603      	mov	r3, r0
 80219b6:	4a0e      	ldr	r2, [pc, #56]	@ (80219f0 <prvInitialiseLogging+0x60>)
 80219b8:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 80219ba:	4b0d      	ldr	r3, [pc, #52]	@ (80219f0 <prvInitialiseLogging+0x60>)
 80219bc:	681b      	ldr	r3, [r3, #0]
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d00e      	beq.n	80219e0 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 80219c2:	4b0b      	ldr	r3, [pc, #44]	@ (80219f0 <prvInitialiseLogging+0x60>)
 80219c4:	681b      	ldr	r3, [r3, #0]
 80219c6:	687a      	ldr	r2, [r7, #4]
 80219c8:	2100      	movs	r1, #0
 80219ca:	4618      	mov	r0, r3
 80219cc:	f000 fc35 	bl	802223a <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 80219d0:	4b07      	ldr	r3, [pc, #28]	@ (80219f0 <prvInitialiseLogging+0x60>)
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 80219d8:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 80219da:	4b04      	ldr	r3, [pc, #16]	@ (80219ec <prvInitialiseLogging+0x5c>)
 80219dc:	2201      	movs	r2, #1
 80219de:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 80219e0:	4b02      	ldr	r3, [pc, #8]	@ (80219ec <prvInitialiseLogging+0x5c>)
 80219e2:	681b      	ldr	r3, [r3, #0]
}
 80219e4:	4618      	mov	r0, r3
 80219e6:	3708      	adds	r7, #8
 80219e8:	46bd      	mov	sp, r7
 80219ea:	bd80      	pop	{r7, pc}
 80219ec:	200024a4 	.word	0x200024a4
 80219f0:	20002494 	.word	0x20002494

080219f4 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 80219f4:	b580      	push	{r7, lr}
 80219f6:	b086      	sub	sp, #24
 80219f8:	af02      	add	r7, sp, #8
 80219fa:	6078      	str	r0, [r7, #4]
 80219fc:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 80219fe:	2300      	movs	r3, #0
 8021a00:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 8021a02:	4b24      	ldr	r3, [pc, #144]	@ (8021a94 <prvGetMessageFromStreamBuffer+0xa0>)
 8021a04:	681b      	ldr	r3, [r3, #0]
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d03f      	beq.n	8021a8a <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 8021a0a:	4b22      	ldr	r3, [pc, #136]	@ (8021a94 <prvGetMessageFromStreamBuffer+0xa0>)
 8021a0c:	681b      	ldr	r3, [r3, #0]
 8021a0e:	4618      	mov	r0, r3
 8021a10:	f7ee fe19 	bl	8010646 <uxStreamBufferGetSize>
 8021a14:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 8021a16:	68fb      	ldr	r3, [r7, #12]
 8021a18:	2b04      	cmp	r3, #4
 8021a1a:	d936      	bls.n	8021a8a <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 8021a1c:	f7e2 fb80 	bl	8004120 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 8021a20:	4b1c      	ldr	r3, [pc, #112]	@ (8021a94 <prvGetMessageFromStreamBuffer+0xa0>)
 8021a22:	6818      	ldr	r0, [r3, #0]
 8021a24:	f107 0208 	add.w	r2, r7, #8
 8021a28:	2300      	movs	r3, #0
 8021a2a:	9300      	str	r3, [sp, #0]
 8021a2c:	2304      	movs	r3, #4
 8021a2e:	2100      	movs	r1, #0
 8021a30:	f7ee ff27 	bl	8010882 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8021a34:	68bb      	ldr	r3, [r7, #8]
 8021a36:	683a      	ldr	r2, [r7, #0]
 8021a38:	429a      	cmp	r2, r3
 8021a3a:	d216      	bcs.n	8021a6a <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8021a3c:	4b15      	ldr	r3, [pc, #84]	@ (8021a94 <prvGetMessageFromStreamBuffer+0xa0>)
 8021a3e:	6818      	ldr	r0, [r3, #0]
 8021a40:	68bb      	ldr	r3, [r7, #8]
 8021a42:	2200      	movs	r2, #0
 8021a44:	9200      	str	r2, [sp, #0]
 8021a46:	4a14      	ldr	r2, [pc, #80]	@ (8021a98 <prvGetMessageFromStreamBuffer+0xa4>)
 8021a48:	2100      	movs	r1, #0
 8021a4a:	f7ee ff1a 	bl	8010882 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 8021a4e:	683a      	ldr	r2, [r7, #0]
 8021a50:	4911      	ldr	r1, [pc, #68]	@ (8021a98 <prvGetMessageFromStreamBuffer+0xa4>)
 8021a52:	6878      	ldr	r0, [r7, #4]
 8021a54:	f000 fae4 	bl	8022020 <memcpy>
					xMessageLength = xBufferLength;
 8021a58:	683b      	ldr	r3, [r7, #0]
 8021a5a:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8021a5c:	683b      	ldr	r3, [r7, #0]
 8021a5e:	3b01      	subs	r3, #1
 8021a60:	687a      	ldr	r2, [r7, #4]
 8021a62:	4413      	add	r3, r2
 8021a64:	2200      	movs	r2, #0
 8021a66:	701a      	strb	r2, [r3, #0]
 8021a68:	e00d      	b.n	8021a86 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 8021a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8021a94 <prvGetMessageFromStreamBuffer+0xa0>)
 8021a6c:	6818      	ldr	r0, [r3, #0]
 8021a6e:	68bb      	ldr	r3, [r7, #8]
 8021a70:	2200      	movs	r2, #0
 8021a72:	9200      	str	r2, [sp, #0]
 8021a74:	687a      	ldr	r2, [r7, #4]
 8021a76:	2100      	movs	r1, #0
 8021a78:	f7ee ff03 	bl	8010882 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 8021a7c:	68bb      	ldr	r3, [r7, #8]
 8021a7e:	687a      	ldr	r2, [r7, #4]
 8021a80:	4413      	add	r3, r2
 8021a82:	2200      	movs	r2, #0
 8021a84:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8021a86:	f7e2 fb59 	bl	800413c <xTaskResumeAll>
		}
	}

	return xMessageLength;
 8021a8a:	68bb      	ldr	r3, [r7, #8]
}
 8021a8c:	4618      	mov	r0, r3
 8021a8e:	3710      	adds	r7, #16
 8021a90:	46bd      	mov	sp, r7
 8021a92:	bd80      	pop	{r7, pc}
 8021a94:	20002494 	.word	0x20002494
 8021a98:	200023cc 	.word	0x200023cc

08021a9c <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8021a9c:	b580      	push	{r7, lr}
 8021a9e:	b08e      	sub	sp, #56	@ 0x38
 8021aa0:	af04      	add	r7, sp, #16
 8021aa2:	6078      	str	r0, [r7, #4]
 8021aa4:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8021aa6:	4b49      	ldr	r3, [pc, #292]	@ (8021bcc <prvBufferFormattedString+0x130>)
 8021aa8:	681b      	ldr	r3, [r3, #0]
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d104      	bne.n	8021ab8 <prvBufferFormattedString+0x1c>
 8021aae:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8021ab2:	4847      	ldr	r0, [pc, #284]	@ (8021bd0 <prvBufferFormattedString+0x134>)
 8021ab4:	f7df fe5a 	bl	800176c <vAssertCalled>

	vTaskSuspendAll();
 8021ab8:	f7e2 fb32 	bl	8004120 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8021abc:	f000 fa2a 	bl	8021f14 <ullGetHighResolutionTime>
 8021ac0:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8021ac4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021ac8:	4a42      	ldr	r2, [pc, #264]	@ (8021bd4 <prvBufferFormattedString+0x138>)
 8021aca:	f04f 0300 	mov.w	r3, #0
 8021ace:	f7de fc6f 	bl	80003b0 <__aeabi_uldivmod>
 8021ad2:	4602      	mov	r2, r0
 8021ad4:	460b      	mov	r3, r1
 8021ad6:	4613      	mov	r3, r2
 8021ad8:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 8021ada:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021ade:	4a3d      	ldr	r2, [pc, #244]	@ (8021bd4 <prvBufferFormattedString+0x138>)
 8021ae0:	f04f 0300 	mov.w	r3, #0
 8021ae4:	f7de fc64 	bl	80003b0 <__aeabi_uldivmod>
 8021ae8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 8021aec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021af0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8021af4:	f04f 0300 	mov.w	r3, #0
 8021af8:	f7de fc5a 	bl	80003b0 <__aeabi_uldivmod>
 8021afc:	4602      	mov	r2, r0
 8021afe:	460b      	mov	r3, r1
 8021b00:	4613      	mov	r3, r2
 8021b02:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8021b04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021b08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8021b0c:	f04f 0300 	mov.w	r3, #0
 8021b10:	f7de fc4e 	bl	80003b0 <__aeabi_uldivmod>
 8021b14:	4613      	mov	r3, r2
 8021b16:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8021b18:	2000      	movs	r0, #0
 8021b1a:	f7e2 fc23 	bl	8004364 <pcTaskGetName>
 8021b1e:	4603      	mov	r3, r0
 8021b20:	9302      	str	r3, [sp, #8]
 8021b22:	697b      	ldr	r3, [r7, #20]
 8021b24:	9301      	str	r3, [sp, #4]
 8021b26:	69bb      	ldr	r3, [r7, #24]
 8021b28:	9300      	str	r3, [sp, #0]
 8021b2a:	69fb      	ldr	r3, [r7, #28]
 8021b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8021bd8 <prvBufferFormattedString+0x13c>)
 8021b2e:	21c8      	movs	r1, #200	@ 0xc8
 8021b30:	482a      	ldr	r0, [pc, #168]	@ (8021bdc <prvBufferFormattedString+0x140>)
 8021b32:	f001 f885 	bl	8022c40 <snprintf>
 8021b36:	4603      	mov	r3, r0
 8021b38:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 8021b3a:	68fb      	ldr	r3, [r7, #12]
 8021b3c:	4a27      	ldr	r2, [pc, #156]	@ (8021bdc <prvBufferFormattedString+0x140>)
 8021b3e:	1898      	adds	r0, r3, r2
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8021b46:	683b      	ldr	r3, [r7, #0]
 8021b48:	687a      	ldr	r2, [r7, #4]
 8021b4a:	f001 f85d 	bl	8022c08 <vsnprintf>
 8021b4e:	4603      	mov	r3, r0
 8021b50:	461a      	mov	r2, r3
 8021b52:	68fb      	ldr	r3, [r7, #12]
 8021b54:	4413      	add	r3, r2
 8021b56:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8021b58:	4b1c      	ldr	r3, [pc, #112]	@ (8021bcc <prvBufferFormattedString+0x130>)
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	4618      	mov	r0, r3
 8021b5e:	f7ee fd50 	bl	8010602 <uxStreamBufferGetSpace>
 8021b62:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8021b64:	68fb      	ldr	r3, [r7, #12]
 8021b66:	3304      	adds	r3, #4
 8021b68:	693a      	ldr	r2, [r7, #16]
 8021b6a:	429a      	cmp	r2, r3
 8021b6c:	d90e      	bls.n	8021b8c <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 8021b6e:	4b17      	ldr	r3, [pc, #92]	@ (8021bcc <prvBufferFormattedString+0x130>)
 8021b70:	6818      	ldr	r0, [r3, #0]
 8021b72:	f107 020c 	add.w	r2, r7, #12
 8021b76:	2304      	movs	r3, #4
 8021b78:	2100      	movs	r1, #0
 8021b7a:	f7ee fe02 	bl	8010782 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 8021b7e:	4b13      	ldr	r3, [pc, #76]	@ (8021bcc <prvBufferFormattedString+0x130>)
 8021b80:	6818      	ldr	r0, [r3, #0]
 8021b82:	68fb      	ldr	r3, [r7, #12]
 8021b84:	4a15      	ldr	r2, [pc, #84]	@ (8021bdc <prvBufferFormattedString+0x140>)
 8021b86:	2100      	movs	r1, #0
 8021b88:	f7ee fdfb 	bl	8010782 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 8021b8c:	f7e2 fad6 	bl	800413c <xTaskResumeAll>

	if( xLoggingTask == NULL )
 8021b90:	4b13      	ldr	r3, [pc, #76]	@ (8021be0 <prvBufferFormattedString+0x144>)
 8021b92:	681b      	ldr	r3, [r3, #0]
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	d10a      	bne.n	8021bae <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8021b98:	68fb      	ldr	r3, [r7, #12]
 8021b9a:	4619      	mov	r1, r3
 8021b9c:	480f      	ldr	r0, [pc, #60]	@ (8021bdc <prvBufferFormattedString+0x140>)
 8021b9e:	f000 f85b 	bl	8021c58 <vUDPLoggingHook>
		uxSkipCount++;
 8021ba2:	4b10      	ldr	r3, [pc, #64]	@ (8021be4 <prvBufferFormattedString+0x148>)
 8021ba4:	681b      	ldr	r3, [r3, #0]
 8021ba6:	3301      	adds	r3, #1
 8021ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8021be4 <prvBufferFormattedString+0x148>)
 8021baa:	6013      	str	r3, [r2, #0]
 8021bac:	e008      	b.n	8021bc0 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 8021bae:	4b0c      	ldr	r3, [pc, #48]	@ (8021be0 <prvBufferFormattedString+0x144>)
 8021bb0:	6818      	ldr	r0, [r3, #0]
 8021bb2:	2300      	movs	r3, #0
 8021bb4:	9300      	str	r3, [sp, #0]
 8021bb6:	2302      	movs	r3, #2
 8021bb8:	2200      	movs	r2, #0
 8021bba:	2100      	movs	r1, #0
 8021bbc:	f7e3 fc14 	bl	80053e8 <xTaskGenericNotify>
	}

	return xLength;
 8021bc0:	68fb      	ldr	r3, [r7, #12]
}
 8021bc2:	4618      	mov	r0, r3
 8021bc4:	3728      	adds	r7, #40	@ 0x28
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	bd80      	pop	{r7, pc}
 8021bca:	bf00      	nop
 8021bcc:	20002494 	.word	0x20002494
 8021bd0:	08027198 	.word	0x08027198
 8021bd4:	000f4240 	.word	0x000f4240
 8021bd8:	080271c0 	.word	0x080271c0
 8021bdc:	200023cc 	.word	0x200023cc
 8021be0:	20002498 	.word	0x20002498
 8021be4:	2000249c 	.word	0x2000249c

08021be8 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8021be8:	b40f      	push	{r0, r1, r2, r3}
 8021bea:	b580      	push	{r7, lr}
 8021bec:	b082      	sub	sp, #8
 8021bee:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 8021bf0:	f7ff fece 	bl	8021990 <prvInitialiseLogging>
 8021bf4:	4603      	mov	r3, r0
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d008      	beq.n	8021c0c <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 8021bfa:	f107 0314 	add.w	r3, r7, #20
 8021bfe:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 8021c00:	6839      	ldr	r1, [r7, #0]
 8021c02:	6938      	ldr	r0, [r7, #16]
 8021c04:	f7ff ff4a 	bl	8021a9c <prvBufferFormattedString>
 8021c08:	6078      	str	r0, [r7, #4]
 8021c0a:	e001      	b.n	8021c10 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 8021c0c:	2300      	movs	r3, #0
 8021c0e:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 8021c10:	687b      	ldr	r3, [r7, #4]
}
 8021c12:	4618      	mov	r0, r3
 8021c14:	3708      	adds	r7, #8
 8021c16:	46bd      	mov	sp, r7
 8021c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021c1c:	b004      	add	sp, #16
 8021c1e:	4770      	bx	lr

08021c20 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 8021c20:	b580      	push	{r7, lr}
 8021c22:	b082      	sub	sp, #8
 8021c24:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8021c26:	4b08      	ldr	r3, [pc, #32]	@ (8021c48 <vUDPLoggingTaskCreate+0x28>)
 8021c28:	9301      	str	r3, [sp, #4]
 8021c2a:	2302      	movs	r3, #2
 8021c2c:	9300      	str	r3, [sp, #0]
 8021c2e:	2300      	movs	r3, #0
 8021c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8021c34:	4905      	ldr	r1, [pc, #20]	@ (8021c4c <vUDPLoggingTaskCreate+0x2c>)
 8021c36:	4806      	ldr	r0, [pc, #24]	@ (8021c50 <vUDPLoggingTaskCreate+0x30>)
 8021c38:	f7e2 f87a 	bl	8003d30 <xTaskCreate>
 8021c3c:	4603      	mov	r3, r0
 8021c3e:	4a05      	ldr	r2, [pc, #20]	@ (8021c54 <vUDPLoggingTaskCreate+0x34>)
 8021c40:	6013      	str	r3, [r2, #0]
}
 8021c42:	bf00      	nop
 8021c44:	46bd      	mov	sp, r7
 8021c46:	bd80      	pop	{r7, pc}
 8021c48:	20002498 	.word	0x20002498
 8021c4c:	080271d8 	.word	0x080271d8
 8021c50:	08021c71 	.word	0x08021c71
 8021c54:	200024a0 	.word	0x200024a0

08021c58 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8021c58:	b480      	push	{r7}
 8021c5a:	b083      	sub	sp, #12
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
 8021c60:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8021c62:	bf00      	nop
 8021c64:	370c      	adds	r7, #12
 8021c66:	46bd      	mov	sp, r7
 8021c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c6c:	4770      	bx	lr
	...

08021c70 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8021c70:	b580      	push	{r7, lr}
 8021c72:	b098      	sub	sp, #96	@ 0x60
 8021c74:	af02      	add	r7, sp, #8
 8021c76:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8021c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8021c7c:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021c7e:	2000      	movs	r0, #0
 8021c80:	f7eb fa92 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 8021c84:	6538      	str	r0, [r7, #80]	@ 0x50
 8021c86:	e01c      	b.n	8021cc2 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8021c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021c8a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021c8e:	f003 0310 	and.w	r3, r3, #16
 8021c92:	b2db      	uxtb	r3, r3
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	d00f      	beq.n	8021cb8 <prvLoggingTask+0x48>
 8021c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d009      	beq.n	8021cb2 <prvLoggingTask+0x42>
 8021c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021ca0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021ca4:	f003 0304 	and.w	r3, r3, #4
 8021ca8:	b2db      	uxtb	r3, r3
 8021caa:	2b00      	cmp	r3, #0
 8021cac:	d101      	bne.n	8021cb2 <prvLoggingTask+0x42>
 8021cae:	2301      	movs	r3, #1
 8021cb0:	e000      	b.n	8021cb4 <prvLoggingTask+0x44>
 8021cb2:	2300      	movs	r3, #0
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d108      	bne.n	8021cca <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8021cb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021cba:	2000      	movs	r0, #0
 8021cbc:	f7eb fa96 	bl	800d1ec <FreeRTOS_NextEndPoint>
 8021cc0:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8021cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d1df      	bne.n	8021c88 <prvLoggingTask+0x18>
 8021cc8:	e000      	b.n	8021ccc <prvLoggingTask+0x5c>
				{
					break;
 8021cca:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8021ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d000      	beq.n	8021cd4 <prvLoggingTask+0x64>
			{
				break;
 8021cd2:	e004      	b.n	8021cde <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8021cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8021cd8:	f7e2 f96a 	bl	8003fb0 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021cdc:	e7cf      	b.n	8021c7e <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 8021cde:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8021ce0:	f7e2 f966 	bl	8003fb0 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8021ce4:	2211      	movs	r2, #17
 8021ce6:	2102      	movs	r1, #2
 8021ce8:	2002      	movs	r0, #2
 8021cea:	f7eb ffd9 	bl	800dca0 <FreeRTOS_socket>
 8021cee:	4603      	mov	r3, r0
 8021cf0:	4a4c      	ldr	r2, [pc, #304]	@ (8021e24 <prvLoggingTask+0x1b4>)
 8021cf2:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8021cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8021e24 <prvLoggingTask+0x1b4>)
 8021cf6:	681b      	ldr	r3, [r3, #0]
 8021cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021cfc:	d0ef      	beq.n	8021cde <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 8021cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d104      	bne.n	8021d0e <prvLoggingTask+0x9e>
 8021d04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8021d08:	4847      	ldr	r0, [pc, #284]	@ (8021e28 <prvLoggingTask+0x1b8>)
 8021d0a:	f7df fd2f 	bl	800176c <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 8021d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021d10:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d104      	bne.n	8021d22 <prvLoggingTask+0xb2>
 8021d18:	f240 11df 	movw	r1, #479	@ 0x1df
 8021d1c:	4842      	ldr	r0, [pc, #264]	@ (8021e28 <prvLoggingTask+0x1b8>)
 8021d1e:	f7df fd25 	bl	800176c <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 8021d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021d24:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8021d28:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 8021d2a:	f246 2309 	movw	r3, #25097	@ 0x6209
 8021d2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8021d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021d32:	681b      	ldr	r3, [r3, #0]
 8021d34:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8021d36:	4b3b      	ldr	r3, [pc, #236]	@ (8021e24 <prvLoggingTask+0x1b4>)
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8021d3e:	2218      	movs	r2, #24
 8021d40:	4618      	mov	r0, r3
 8021d42:	f7ec f99d 	bl	800e080 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8021d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021d48:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8021d4a:	4b36      	ldr	r3, [pc, #216]	@ (8021e24 <prvLoggingTask+0x1b4>)
 8021d4c:	6818      	ldr	r0, [r3, #0]
 8021d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021d52:	2204      	movs	r2, #4
 8021d54:	9200      	str	r2, [sp, #0]
 8021d56:	2201      	movs	r2, #1
 8021d58:	2100      	movs	r1, #0
 8021d5a:	f7ec ff5b 	bl	800ec14 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021d60:	2101      	movs	r1, #1
 8021d62:	2000      	movs	r0, #0
 8021d64:	f7e3 fa34 	bl	80051d0 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8021d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021d6a:	691b      	ldr	r3, [r3, #16]
 8021d6c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8021d6e:	4798      	blx	r3
 8021d70:	4603      	mov	r3, r0
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	d0f3      	beq.n	8021d5e <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021d76:	2300      	movs	r3, #0
 8021d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8021d7a:	e04c      	b.n	8021e16 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8021d7c:	21c8      	movs	r1, #200	@ 0xc8
 8021d7e:	482b      	ldr	r0, [pc, #172]	@ (8021e2c <prvLoggingTask+0x1bc>)
 8021d80:	f7ff fe38 	bl	80219f4 <prvGetMessageFromStreamBuffer>
 8021d84:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8021d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	d048      	beq.n	8021e1e <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021d8c:	2000      	movs	r0, #0
 8021d8e:	f7eb fa0b 	bl	800d1a8 <FreeRTOS_FirstEndPoint>
 8021d92:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8021d94:	e02a      	b.n	8021dec <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8021d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	d022      	beq.n	8021de2 <prvLoggingTask+0x172>
 8021d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d9e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021da2:	f003 0304 	and.w	r3, r3, #4
 8021da6:	b2db      	uxtb	r3, r3
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d11a      	bne.n	8021de2 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8021dac:	2318      	movs	r3, #24
 8021dae:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8021db0:	2302      	movs	r3, #2
 8021db2:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8021db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021db6:	681a      	ldr	r2, [r3, #0]
 8021db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021dba:	685b      	ldr	r3, [r3, #4]
 8021dbc:	43db      	mvns	r3, r3
 8021dbe:	4313      	orrs	r3, r2
 8021dc0:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8021dc2:	f246 3309 	movw	r3, #25353	@ 0x6309
 8021dc6:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8021dc8:	4b16      	ldr	r3, [pc, #88]	@ (8021e24 <prvLoggingTask+0x1b4>)
 8021dca:	6818      	ldr	r0, [r3, #0]
 8021dcc:	2318      	movs	r3, #24
 8021dce:	9301      	str	r3, [sp, #4]
 8021dd0:	f107 030c 	add.w	r3, r7, #12
 8021dd4:	9300      	str	r3, [sp, #0]
 8021dd6:	2300      	movs	r3, #0
 8021dd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021dda:	4914      	ldr	r1, [pc, #80]	@ (8021e2c <prvLoggingTask+0x1bc>)
 8021ddc:	f7ec f8e0 	bl	800dfa0 <FreeRTOS_sendto>
							}
							break;
 8021de0:	e007      	b.n	8021df2 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8021de2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8021de4:	2000      	movs	r0, #0
 8021de6:	f7eb fa01 	bl	800d1ec <FreeRTOS_NextEndPoint>
 8021dea:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8021dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d1d1      	bne.n	8021d96 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8021df2:	4b0f      	ldr	r3, [pc, #60]	@ (8021e30 <prvLoggingTask+0x1c0>)
 8021df4:	681b      	ldr	r3, [r3, #0]
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	d005      	beq.n	8021e06 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8021dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8021e30 <prvLoggingTask+0x1c0>)
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	3b01      	subs	r3, #1
 8021e00:	4a0b      	ldr	r2, [pc, #44]	@ (8021e30 <prvLoggingTask+0x1c0>)
 8021e02:	6013      	str	r3, [r2, #0]
 8021e04:	e004      	b.n	8021e10 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8021e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021e08:	4619      	mov	r1, r3
 8021e0a:	4808      	ldr	r0, [pc, #32]	@ (8021e2c <prvLoggingTask+0x1bc>)
 8021e0c:	f7ff ff24 	bl	8021c58 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021e12:	3301      	adds	r3, #1
 8021e14:	657b      	str	r3, [r7, #84]	@ 0x54
 8021e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021e18:	2b13      	cmp	r3, #19
 8021e1a:	ddaf      	ble.n	8021d7c <prvLoggingTask+0x10c>
 8021e1c:	e79f      	b.n	8021d5e <prvLoggingTask+0xee>
					break;
 8021e1e:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021e20:	e79d      	b.n	8021d5e <prvLoggingTask+0xee>
 8021e22:	bf00      	nop
 8021e24:	20000028 	.word	0x20000028
 8021e28:	08027198 	.word	0x08027198
 8021e2c:	200024a8 	.word	0x200024a8
 8021e30:	2000249c 	.word	0x2000249c

08021e34 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8021e34:	b480      	push	{r7}
 8021e36:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8021e38:	4b0c      	ldr	r3, [pc, #48]	@ (8021e6c <TIM2_IRQHandler+0x38>)
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	691b      	ldr	r3, [r3, #16]
 8021e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8021e70 <TIM2_IRQHandler+0x3c>)
 8021e40:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8021e42:	4b0b      	ldr	r3, [pc, #44]	@ (8021e70 <TIM2_IRQHandler+0x3c>)
 8021e44:	681b      	ldr	r3, [r3, #0]
 8021e46:	f003 0301 	and.w	r3, r3, #1
 8021e4a:	2b00      	cmp	r3, #0
 8021e4c:	d009      	beq.n	8021e62 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8021e4e:	4b07      	ldr	r3, [pc, #28]	@ (8021e6c <TIM2_IRQHandler+0x38>)
 8021e50:	681b      	ldr	r3, [r3, #0]
 8021e52:	f06f 0201 	mvn.w	r2, #1
 8021e56:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8021e58:	4b06      	ldr	r3, [pc, #24]	@ (8021e74 <TIM2_IRQHandler+0x40>)
 8021e5a:	681b      	ldr	r3, [r3, #0]
 8021e5c:	3301      	adds	r3, #1
 8021e5e:	4a05      	ldr	r2, [pc, #20]	@ (8021e74 <TIM2_IRQHandler+0x40>)
 8021e60:	6013      	str	r3, [r2, #0]
	}
}
 8021e62:	bf00      	nop
 8021e64:	46bd      	mov	sp, r7
 8021e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e6a:	4770      	bx	lr
 8021e6c:	200003cc 	.word	0x200003cc
 8021e70:	20002574 	.word	0x20002574
 8021e74:	20002570 	.word	0x20002570

08021e78 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8021e78:	b580      	push	{r7, lr}
 8021e7a:	b082      	sub	sp, #8
 8021e7c:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8021e7e:	4b20      	ldr	r3, [pc, #128]	@ (8021f00 <vStartHighResolutionTimer+0x88>)
 8021e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021e84:	4a1e      	ldr	r2, [pc, #120]	@ (8021f00 <vStartHighResolutionTimer+0x88>)
 8021e86:	f043 0301 	orr.w	r3, r3, #1
 8021e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8021e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8021f00 <vStartHighResolutionTimer+0x88>)
 8021e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021e94:	f003 0301 	and.w	r3, r3, #1
 8021e98:	607b      	str	r3, [r7, #4]
 8021e9a:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8021e9c:	4b19      	ldr	r3, [pc, #100]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8021ea2:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8021ea4:	23c8      	movs	r3, #200	@ 0xc8
 8021ea6:	3b01      	subs	r3, #1
 8021ea8:	4a16      	ldr	r2, [pc, #88]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021eaa:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8021eac:	4b15      	ldr	r3, [pc, #84]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021eae:	2200      	movs	r2, #0
 8021eb0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8021eb2:	4b15      	ldr	r3, [pc, #84]	@ (8021f08 <vStartHighResolutionTimer+0x90>)
 8021eb4:	3b01      	subs	r3, #1
 8021eb6:	4a13      	ldr	r2, [pc, #76]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021eb8:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8021eba:	4b12      	ldr	r3, [pc, #72]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021ebc:	2200      	movs	r2, #0
 8021ebe:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8021ec0:	4b10      	ldr	r3, [pc, #64]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021ec2:	2200      	movs	r2, #0
 8021ec4:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8021ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021ec8:	2201      	movs	r2, #1
 8021eca:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8021ecc:	2200      	movs	r2, #0
 8021ece:	2105      	movs	r1, #5
 8021ed0:	201c      	movs	r0, #28
 8021ed2:	f7f7 ffa4 	bl	8019e1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8021ed6:	201c      	movs	r0, #28
 8021ed8:	f7f7 ffbb 	bl	8019e52 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8021edc:	4809      	ldr	r0, [pc, #36]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021ede:	f7fd fc96 	bl	801f80e <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8021ee2:	4808      	ldr	r0, [pc, #32]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021ee4:	f7fd fcea 	bl	801f8bc <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8021ee8:	4b06      	ldr	r3, [pc, #24]	@ (8021f04 <vStartHighResolutionTimer+0x8c>)
 8021eea:	681b      	ldr	r3, [r3, #0]
 8021eec:	691b      	ldr	r3, [r3, #16]
 8021eee:	4a07      	ldr	r2, [pc, #28]	@ (8021f0c <vStartHighResolutionTimer+0x94>)
 8021ef0:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8021ef2:	4b07      	ldr	r3, [pc, #28]	@ (8021f10 <vStartHighResolutionTimer+0x98>)
 8021ef4:	2200      	movs	r2, #0
 8021ef6:	601a      	str	r2, [r3, #0]
}
 8021ef8:	bf00      	nop
 8021efa:	3708      	adds	r7, #8
 8021efc:	46bd      	mov	sp, r7
 8021efe:	bd80      	pop	{r7, pc}
 8021f00:	58024400 	.word	0x58024400
 8021f04:	200003cc 	.word	0x200003cc
 8021f08:	00989680 	.word	0x00989680
 8021f0c:	20002574 	.word	0x20002574
 8021f10:	20002570 	.word	0x20002570

08021f14 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8021f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021f18:	b08e      	sub	sp, #56	@ 0x38
 8021f1a:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8021f1c:	493d      	ldr	r1, [pc, #244]	@ (8022014 <ullGetHighResolutionTime+0x100>)
 8021f1e:	6809      	ldr	r1, [r1, #0]
 8021f20:	2900      	cmp	r1, #0
 8021f22:	d132      	bne.n	8021f8a <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8021f24:	f7e2 fa0e 	bl	8004344 <xTaskGetTickCount>
 8021f28:	4603      	mov	r3, r0
 8021f2a:	2200      	movs	r2, #0
 8021f2c:	469a      	mov	sl, r3
 8021f2e:	4693      	mov	fp, r2
 8021f30:	4652      	mov	r2, sl
 8021f32:	465b      	mov	r3, fp
 8021f34:	f04f 0000 	mov.w	r0, #0
 8021f38:	f04f 0100 	mov.w	r1, #0
 8021f3c:	0159      	lsls	r1, r3, #5
 8021f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021f42:	0150      	lsls	r0, r2, #5
 8021f44:	4602      	mov	r2, r0
 8021f46:	460b      	mov	r3, r1
 8021f48:	ebb2 040a 	subs.w	r4, r2, sl
 8021f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8021f50:	f04f 0200 	mov.w	r2, #0
 8021f54:	f04f 0300 	mov.w	r3, #0
 8021f58:	00ab      	lsls	r3, r5, #2
 8021f5a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8021f5e:	00a2      	lsls	r2, r4, #2
 8021f60:	4614      	mov	r4, r2
 8021f62:	461d      	mov	r5, r3
 8021f64:	eb14 080a 	adds.w	r8, r4, sl
 8021f68:	eb45 090b 	adc.w	r9, r5, fp
 8021f6c:	f04f 0200 	mov.w	r2, #0
 8021f70:	f04f 0300 	mov.w	r3, #0
 8021f74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021f78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021f7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021f80:	4690      	mov	r8, r2
 8021f82:	4699      	mov	r9, r3
 8021f84:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8021f88:	e03c      	b.n	8022004 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021f8a:	4922      	ldr	r1, [pc, #136]	@ (8022014 <ullGetHighResolutionTime+0x100>)
 8021f8c:	6809      	ldr	r1, [r1, #0]
 8021f8e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021f90:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8021f92:	4921      	ldr	r1, [pc, #132]	@ (8022018 <ullGetHighResolutionTime+0x104>)
 8021f94:	6809      	ldr	r1, [r1, #0]
 8021f96:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8021f98:	491e      	ldr	r1, [pc, #120]	@ (8022014 <ullGetHighResolutionTime+0x100>)
 8021f9a:	6809      	ldr	r1, [r1, #0]
 8021f9c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021f9e:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8021fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021fa4:	4288      	cmp	r0, r1
 8021fa6:	d200      	bcs.n	8021faa <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021fa8:	e7ef      	b.n	8021f8a <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8021faa:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8021fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021fae:	2000      	movs	r0, #0
 8021fb0:	61b9      	str	r1, [r7, #24]
 8021fb2:	61f8      	str	r0, [r7, #28]
 8021fb4:	4819      	ldr	r0, [pc, #100]	@ (802201c <ullGetHighResolutionTime+0x108>)
 8021fb6:	2100      	movs	r1, #0
 8021fb8:	6138      	str	r0, [r7, #16]
 8021fba:	6179      	str	r1, [r7, #20]
 8021fbc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8021fc0:	4649      	mov	r1, r9
 8021fc2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021fc6:	4650      	mov	r0, sl
 8021fc8:	fb00 f001 	mul.w	r0, r0, r1
 8021fcc:	4659      	mov	r1, fp
 8021fce:	4644      	mov	r4, r8
 8021fd0:	fb04 f101 	mul.w	r1, r4, r1
 8021fd4:	4401      	add	r1, r0
 8021fd6:	4640      	mov	r0, r8
 8021fd8:	4654      	mov	r4, sl
 8021fda:	fba0 2304 	umull	r2, r3, r0, r4
 8021fde:	4419      	add	r1, r3
 8021fe0:	460b      	mov	r3, r1
 8021fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021fe4:	2000      	movs	r0, #0
 8021fe6:	60b9      	str	r1, [r7, #8]
 8021fe8:	60f8      	str	r0, [r7, #12]
 8021fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8021fee:	4621      	mov	r1, r4
 8021ff0:	1851      	adds	r1, r2, r1
 8021ff2:	6039      	str	r1, [r7, #0]
 8021ff4:	4629      	mov	r1, r5
 8021ff6:	eb43 0101 	adc.w	r1, r3, r1
 8021ffa:	6079      	str	r1, [r7, #4]
 8021ffc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022000:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022004:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022008:	4610      	mov	r0, r2
 802200a:	4619      	mov	r1, r3
 802200c:	3738      	adds	r7, #56	@ 0x38
 802200e:	46bd      	mov	sp, r7
 8022010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022014:	200003cc 	.word	0x200003cc
 8022018:	20002570 	.word	0x20002570
 802201c:	00989680 	.word	0x00989680

08022020 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022020:	b480      	push	{r7}
 8022022:	b08d      	sub	sp, #52	@ 0x34
 8022024:	af00      	add	r7, sp, #0
 8022026:	60f8      	str	r0, [r7, #12]
 8022028:	60b9      	str	r1, [r7, #8]
 802202a:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 802202c:	68fb      	ldr	r3, [r7, #12]
 802202e:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022030:	68bb      	ldr	r3, [r7, #8]
 8022032:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022034:	697a      	ldr	r2, [r7, #20]
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	4413      	add	r3, r2
 802203a:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 802203c:	69ba      	ldr	r2, [r7, #24]
 802203e:	697b      	ldr	r3, [r7, #20]
 8022040:	4053      	eors	r3, r2
 8022042:	f003 0303 	and.w	r3, r3, #3
 8022046:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8022048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802204a:	f003 0301 	and.w	r3, r3, #1
 802204e:	2b00      	cmp	r3, #0
 8022050:	f040 80a1 	bne.w	8022196 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8022054:	697b      	ldr	r3, [r7, #20]
 8022056:	f003 0301 	and.w	r3, r3, #1
 802205a:	2b00      	cmp	r3, #0
 802205c:	d00b      	beq.n	8022076 <memcpy+0x56>
 802205e:	697a      	ldr	r2, [r7, #20]
 8022060:	693b      	ldr	r3, [r7, #16]
 8022062:	429a      	cmp	r2, r3
 8022064:	d207      	bcs.n	8022076 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8022066:	697a      	ldr	r2, [r7, #20]
 8022068:	1c53      	adds	r3, r2, #1
 802206a:	617b      	str	r3, [r7, #20]
 802206c:	69bb      	ldr	r3, [r7, #24]
 802206e:	1c59      	adds	r1, r3, #1
 8022070:	61b9      	str	r1, [r7, #24]
 8022072:	7812      	ldrb	r2, [r2, #0]
 8022074:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8022076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022078:	f003 0302 	and.w	r3, r3, #2
 802207c:	2b00      	cmp	r3, #0
 802207e:	d01f      	beq.n	80220c0 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8022080:	693b      	ldr	r3, [r7, #16]
 8022082:	f003 0301 	and.w	r3, r3, #1
 8022086:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8022088:	693b      	ldr	r3, [r7, #16]
 802208a:	f023 0301 	bic.w	r3, r3, #1
 802208e:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022090:	e00a      	b.n	80220a8 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022092:	697a      	ldr	r2, [r7, #20]
 8022094:	1c93      	adds	r3, r2, #2
 8022096:	617b      	str	r3, [r7, #20]
 8022098:	69bb      	ldr	r3, [r7, #24]
 802209a:	1c99      	adds	r1, r3, #2
 802209c:	61b9      	str	r1, [r7, #24]
 802209e:	8812      	ldrh	r2, [r2, #0]
 80220a0:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	3b02      	subs	r3, #2
 80220a6:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 80220a8:	697a      	ldr	r2, [r7, #20]
 80220aa:	693b      	ldr	r3, [r7, #16]
 80220ac:	429a      	cmp	r2, r3
 80220ae:	d202      	bcs.n	80220b6 <memcpy+0x96>
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	d1ed      	bne.n	8022092 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 80220b6:	693a      	ldr	r2, [r7, #16]
 80220b8:	69fb      	ldr	r3, [r7, #28]
 80220ba:	4313      	orrs	r3, r2
 80220bc:	613b      	str	r3, [r7, #16]
 80220be:	e0ae      	b.n	802221e <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 80220c0:	697b      	ldr	r3, [r7, #20]
 80220c2:	f003 0302 	and.w	r3, r3, #2
 80220c6:	2b00      	cmp	r3, #0
 80220c8:	d00c      	beq.n	80220e4 <memcpy+0xc4>
 80220ca:	697a      	ldr	r2, [r7, #20]
 80220cc:	693b      	ldr	r3, [r7, #16]
 80220ce:	3b01      	subs	r3, #1
 80220d0:	429a      	cmp	r2, r3
 80220d2:	d207      	bcs.n	80220e4 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 80220d4:	697a      	ldr	r2, [r7, #20]
 80220d6:	1c93      	adds	r3, r2, #2
 80220d8:	617b      	str	r3, [r7, #20]
 80220da:	69bb      	ldr	r3, [r7, #24]
 80220dc:	1c99      	adds	r1, r3, #2
 80220de:	61b9      	str	r1, [r7, #24]
 80220e0:	8812      	ldrh	r2, [r2, #0]
 80220e2:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 80220e4:	693b      	ldr	r3, [r7, #16]
 80220e6:	f003 0303 	and.w	r3, r3, #3
 80220ea:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 80220ec:	693b      	ldr	r3, [r7, #16]
 80220ee:	f023 0303 	bic.w	r3, r3, #3
 80220f2:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 80220f4:	693a      	ldr	r2, [r7, #16]
 80220f6:	697b      	ldr	r3, [r7, #20]
 80220f8:	1ad3      	subs	r3, r2, r3
 80220fa:	109b      	asrs	r3, r3, #2
 80220fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 80220fe:	e02f      	b.n	8022160 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022100:	697a      	ldr	r2, [r7, #20]
 8022102:	69bb      	ldr	r3, [r7, #24]
 8022104:	6812      	ldr	r2, [r2, #0]
 8022106:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022108:	697a      	ldr	r2, [r7, #20]
 802210a:	69bb      	ldr	r3, [r7, #24]
 802210c:	3304      	adds	r3, #4
 802210e:	6852      	ldr	r2, [r2, #4]
 8022110:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022112:	697a      	ldr	r2, [r7, #20]
 8022114:	69bb      	ldr	r3, [r7, #24]
 8022116:	3308      	adds	r3, #8
 8022118:	6892      	ldr	r2, [r2, #8]
 802211a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 802211c:	697a      	ldr	r2, [r7, #20]
 802211e:	69bb      	ldr	r3, [r7, #24]
 8022120:	330c      	adds	r3, #12
 8022122:	68d2      	ldr	r2, [r2, #12]
 8022124:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022126:	697a      	ldr	r2, [r7, #20]
 8022128:	69bb      	ldr	r3, [r7, #24]
 802212a:	3310      	adds	r3, #16
 802212c:	6912      	ldr	r2, [r2, #16]
 802212e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022130:	697a      	ldr	r2, [r7, #20]
 8022132:	69bb      	ldr	r3, [r7, #24]
 8022134:	3314      	adds	r3, #20
 8022136:	6952      	ldr	r2, [r2, #20]
 8022138:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 802213a:	697a      	ldr	r2, [r7, #20]
 802213c:	69bb      	ldr	r3, [r7, #24]
 802213e:	3318      	adds	r3, #24
 8022140:	6992      	ldr	r2, [r2, #24]
 8022142:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8022144:	697a      	ldr	r2, [r7, #20]
 8022146:	69bb      	ldr	r3, [r7, #24]
 8022148:	331c      	adds	r3, #28
 802214a:	69d2      	ldr	r2, [r2, #28]
 802214c:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 802214e:	69bb      	ldr	r3, [r7, #24]
 8022150:	3320      	adds	r3, #32
 8022152:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8022154:	697b      	ldr	r3, [r7, #20]
 8022156:	3320      	adds	r3, #32
 8022158:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 802215a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802215c:	3b08      	subs	r3, #8
 802215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022162:	2b08      	cmp	r3, #8
 8022164:	dccc      	bgt.n	8022100 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022166:	e00a      	b.n	802217e <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8022168:	697a      	ldr	r2, [r7, #20]
 802216a:	1d13      	adds	r3, r2, #4
 802216c:	617b      	str	r3, [r7, #20]
 802216e:	69bb      	ldr	r3, [r7, #24]
 8022170:	1d19      	adds	r1, r3, #4
 8022172:	61b9      	str	r1, [r7, #24]
 8022174:	6812      	ldr	r2, [r2, #0]
 8022176:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	3b04      	subs	r3, #4
 802217c:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 802217e:	697a      	ldr	r2, [r7, #20]
 8022180:	693b      	ldr	r3, [r7, #16]
 8022182:	429a      	cmp	r2, r3
 8022184:	d202      	bcs.n	802218c <memcpy+0x16c>
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d1ed      	bne.n	8022168 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 802218c:	693a      	ldr	r2, [r7, #16]
 802218e:	6a3b      	ldr	r3, [r7, #32]
 8022190:	4313      	orrs	r3, r2
 8022192:	613b      	str	r3, [r7, #16]
 8022194:	e043      	b.n	802221e <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8022196:	693a      	ldr	r2, [r7, #16]
 8022198:	697b      	ldr	r3, [r7, #20]
 802219a:	1ad3      	subs	r3, r2, r3
 802219c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 802219e:	e02f      	b.n	8022200 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 80221a0:	697a      	ldr	r2, [r7, #20]
 80221a2:	69bb      	ldr	r3, [r7, #24]
 80221a4:	7812      	ldrb	r2, [r2, #0]
 80221a6:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 80221a8:	697a      	ldr	r2, [r7, #20]
 80221aa:	69bb      	ldr	r3, [r7, #24]
 80221ac:	3301      	adds	r3, #1
 80221ae:	7852      	ldrb	r2, [r2, #1]
 80221b0:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 80221b2:	697a      	ldr	r2, [r7, #20]
 80221b4:	69bb      	ldr	r3, [r7, #24]
 80221b6:	3302      	adds	r3, #2
 80221b8:	7892      	ldrb	r2, [r2, #2]
 80221ba:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 80221bc:	697a      	ldr	r2, [r7, #20]
 80221be:	69bb      	ldr	r3, [r7, #24]
 80221c0:	3303      	adds	r3, #3
 80221c2:	78d2      	ldrb	r2, [r2, #3]
 80221c4:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 80221c6:	697a      	ldr	r2, [r7, #20]
 80221c8:	69bb      	ldr	r3, [r7, #24]
 80221ca:	3304      	adds	r3, #4
 80221cc:	7912      	ldrb	r2, [r2, #4]
 80221ce:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 80221d0:	697a      	ldr	r2, [r7, #20]
 80221d2:	69bb      	ldr	r3, [r7, #24]
 80221d4:	3305      	adds	r3, #5
 80221d6:	7952      	ldrb	r2, [r2, #5]
 80221d8:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 80221da:	697a      	ldr	r2, [r7, #20]
 80221dc:	69bb      	ldr	r3, [r7, #24]
 80221de:	3306      	adds	r3, #6
 80221e0:	7992      	ldrb	r2, [r2, #6]
 80221e2:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 80221e4:	697a      	ldr	r2, [r7, #20]
 80221e6:	69bb      	ldr	r3, [r7, #24]
 80221e8:	3307      	adds	r3, #7
 80221ea:	79d2      	ldrb	r2, [r2, #7]
 80221ec:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 80221ee:	69bb      	ldr	r3, [r7, #24]
 80221f0:	3308      	adds	r3, #8
 80221f2:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 80221f4:	697b      	ldr	r3, [r7, #20]
 80221f6:	3308      	adds	r3, #8
 80221f8:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 80221fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80221fc:	3b08      	subs	r3, #8
 80221fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022202:	2b08      	cmp	r3, #8
 8022204:	dccc      	bgt.n	80221a0 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022206:	e00a      	b.n	802221e <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8022208:	697a      	ldr	r2, [r7, #20]
 802220a:	1c53      	adds	r3, r2, #1
 802220c:	617b      	str	r3, [r7, #20]
 802220e:	69bb      	ldr	r3, [r7, #24]
 8022210:	1c59      	adds	r1, r3, #1
 8022212:	61b9      	str	r1, [r7, #24]
 8022214:	7812      	ldrb	r2, [r2, #0]
 8022216:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	3b01      	subs	r3, #1
 802221c:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 802221e:	697a      	ldr	r2, [r7, #20]
 8022220:	693b      	ldr	r3, [r7, #16]
 8022222:	429a      	cmp	r2, r3
 8022224:	d202      	bcs.n	802222c <memcpy+0x20c>
 8022226:	687b      	ldr	r3, [r7, #4]
 8022228:	2b00      	cmp	r3, #0
 802222a:	d1ed      	bne.n	8022208 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 802222c:	68fb      	ldr	r3, [r7, #12]
}
 802222e:	4618      	mov	r0, r3
 8022230:	3734      	adds	r7, #52	@ 0x34
 8022232:	46bd      	mov	sp, r7
 8022234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022238:	4770      	bx	lr

0802223a <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 802223a:	b480      	push	{r7}
 802223c:	b08b      	sub	sp, #44	@ 0x2c
 802223e:	af00      	add	r7, sp, #0
 8022240:	60f8      	str	r0, [r7, #12]
 8022242:	60b9      	str	r1, [r7, #8]
 8022244:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022246:	68fb      	ldr	r3, [r7, #12]
 8022248:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 802224a:	697a      	ldr	r2, [r7, #20]
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	4413      	add	r3, r2
 8022250:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	2b07      	cmp	r3, #7
 8022256:	d97b      	bls.n	8022350 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8022258:	68bb      	ldr	r3, [r7, #8]
 802225a:	b2db      	uxtb	r3, r3
 802225c:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 802225e:	69fb      	ldr	r3, [r7, #28]
 8022260:	021a      	lsls	r2, r3, #8
 8022262:	69fb      	ldr	r3, [r7, #28]
 8022264:	041b      	lsls	r3, r3, #16
 8022266:	431a      	orrs	r2, r3
 8022268:	69fb      	ldr	r3, [r7, #28]
 802226a:	061b      	lsls	r3, r3, #24
 802226c:	4313      	orrs	r3, r2
 802226e:	69fa      	ldr	r2, [r7, #28]
 8022270:	4313      	orrs	r3, r2
 8022272:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8022274:	697b      	ldr	r3, [r7, #20]
 8022276:	f003 0303 	and.w	r3, r3, #3
 802227a:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 802227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802227e:	2b00      	cmp	r3, #0
 8022280:	d010      	beq.n	80222a4 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8022282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022284:	f1c3 0304 	rsb	r3, r3, #4
 8022288:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 802228a:	e006      	b.n	802229a <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 802228c:	697b      	ldr	r3, [r7, #20]
 802228e:	68ba      	ldr	r2, [r7, #8]
 8022290:	b2d2      	uxtb	r2, r2
 8022292:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8022294:	697b      	ldr	r3, [r7, #20]
 8022296:	3301      	adds	r3, #1
 8022298:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 802229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802229c:	1e5a      	subs	r2, r3, #1
 802229e:	627a      	str	r2, [r7, #36]	@ 0x24
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d1f3      	bne.n	802228c <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 80222a4:	693b      	ldr	r3, [r7, #16]
 80222a6:	f003 0303 	and.w	r3, r3, #3
 80222aa:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 80222ac:	693b      	ldr	r3, [r7, #16]
 80222ae:	f023 0303 	bic.w	r3, r3, #3
 80222b2:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 80222b4:	693a      	ldr	r2, [r7, #16]
 80222b6:	697b      	ldr	r3, [r7, #20]
 80222b8:	1ad3      	subs	r3, r2, r3
 80222ba:	109b      	asrs	r3, r3, #2
 80222bc:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 80222be:	e024      	b.n	802230a <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 80222c0:	697b      	ldr	r3, [r7, #20]
 80222c2:	69fa      	ldr	r2, [r7, #28]
 80222c4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 80222c6:	697b      	ldr	r3, [r7, #20]
 80222c8:	3304      	adds	r3, #4
 80222ca:	69fa      	ldr	r2, [r7, #28]
 80222cc:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 80222ce:	697b      	ldr	r3, [r7, #20]
 80222d0:	3308      	adds	r3, #8
 80222d2:	69fa      	ldr	r2, [r7, #28]
 80222d4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 80222d6:	697b      	ldr	r3, [r7, #20]
 80222d8:	330c      	adds	r3, #12
 80222da:	69fa      	ldr	r2, [r7, #28]
 80222dc:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 80222de:	697b      	ldr	r3, [r7, #20]
 80222e0:	3310      	adds	r3, #16
 80222e2:	69fa      	ldr	r2, [r7, #28]
 80222e4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 80222e6:	697b      	ldr	r3, [r7, #20]
 80222e8:	3314      	adds	r3, #20
 80222ea:	69fa      	ldr	r2, [r7, #28]
 80222ec:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 80222ee:	697b      	ldr	r3, [r7, #20]
 80222f0:	3318      	adds	r3, #24
 80222f2:	69fa      	ldr	r2, [r7, #28]
 80222f4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 80222f6:	697b      	ldr	r3, [r7, #20]
 80222f8:	331c      	adds	r3, #28
 80222fa:	69fa      	ldr	r2, [r7, #28]
 80222fc:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 80222fe:	697b      	ldr	r3, [r7, #20]
 8022300:	3320      	adds	r3, #32
 8022302:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022304:	6a3b      	ldr	r3, [r7, #32]
 8022306:	3b08      	subs	r3, #8
 8022308:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 802230a:	6a3b      	ldr	r3, [r7, #32]
 802230c:	2b08      	cmp	r3, #8
 802230e:	dcd7      	bgt.n	80222c0 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022310:	e008      	b.n	8022324 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8022312:	697b      	ldr	r3, [r7, #20]
 8022314:	69fa      	ldr	r2, [r7, #28]
 8022316:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8022318:	697b      	ldr	r3, [r7, #20]
 802231a:	3304      	adds	r3, #4
 802231c:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	3304      	adds	r3, #4
 8022322:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022324:	697a      	ldr	r2, [r7, #20]
 8022326:	693b      	ldr	r3, [r7, #16]
 8022328:	429a      	cmp	r2, r3
 802232a:	d202      	bcs.n	8022332 <memset+0xf8>
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	2b00      	cmp	r3, #0
 8022330:	d1ef      	bne.n	8022312 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022332:	693a      	ldr	r2, [r7, #16]
 8022334:	69bb      	ldr	r3, [r7, #24]
 8022336:	4313      	orrs	r3, r2
 8022338:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 802233a:	e009      	b.n	8022350 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 802233c:	697b      	ldr	r3, [r7, #20]
 802233e:	68ba      	ldr	r2, [r7, #8]
 8022340:	b2d2      	uxtb	r2, r2
 8022342:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8022344:	697b      	ldr	r3, [r7, #20]
 8022346:	3301      	adds	r3, #1
 8022348:	617b      	str	r3, [r7, #20]
			ulBytes++;
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	3301      	adds	r3, #1
 802234e:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022350:	697a      	ldr	r2, [r7, #20]
 8022352:	693b      	ldr	r3, [r7, #16]
 8022354:	429a      	cmp	r2, r3
 8022356:	d202      	bcs.n	802235e <memset+0x124>
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	2b00      	cmp	r3, #0
 802235c:	d1ee      	bne.n	802233c <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 802235e:	68fb      	ldr	r3, [r7, #12]
}
 8022360:	4618      	mov	r0, r3
 8022362:	372c      	adds	r7, #44	@ 0x2c
 8022364:	46bd      	mov	sp, r7
 8022366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802236a:	4770      	bx	lr

0802236c <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 802236c:	b480      	push	{r7}
 802236e:	b083      	sub	sp, #12
 8022370:	af00      	add	r7, sp, #0
 8022372:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022374:	2303      	movs	r3, #3
}
 8022376:	4618      	mov	r0, r3
 8022378:	370c      	adds	r7, #12
 802237a:	46bd      	mov	sp, r7
 802237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022380:	4770      	bx	lr

08022382 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022382:	b480      	push	{r7}
 8022384:	b083      	sub	sp, #12
 8022386:	af00      	add	r7, sp, #0
 8022388:	4603      	mov	r3, r0
 802238a:	6039      	str	r1, [r7, #0]
 802238c:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 802238e:	bf00      	nop
 8022390:	370c      	adds	r7, #12
 8022392:	46bd      	mov	sp, r7
 8022394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022398:	4770      	bx	lr

0802239a <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 802239a:	b580      	push	{r7, lr}
 802239c:	b084      	sub	sp, #16
 802239e:	af00      	add	r7, sp, #0
 80223a0:	60f8      	str	r0, [r7, #12]
 80223a2:	60b9      	str	r1, [r7, #8]
 80223a4:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 80223a6:	68fb      	ldr	r3, [r7, #12]
 80223a8:	68ba      	ldr	r2, [r7, #8]
 80223aa:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 80223ac:	68fb      	ldr	r3, [r7, #12]
 80223ae:	68ba      	ldr	r2, [r7, #8]
 80223b0:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	1e5a      	subs	r2, r3, #1
 80223b6:	68fb      	ldr	r3, [r7, #12]
 80223b8:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	2200      	movs	r2, #0
 80223be:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	3310      	adds	r3, #16
 80223c4:	2210      	movs	r2, #16
 80223c6:	2100      	movs	r1, #0
 80223c8:	4618      	mov	r0, r3
 80223ca:	f7ff ff36 	bl	802223a <memset>
}
 80223ce:	bf00      	nop
 80223d0:	3710      	adds	r7, #16
 80223d2:	46bd      	mov	sp, r7
 80223d4:	bd80      	pop	{r7, pc}

080223d6 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 80223d6:	b580      	push	{r7, lr}
 80223d8:	b082      	sub	sp, #8
 80223da:	af00      	add	r7, sp, #0
 80223dc:	6078      	str	r0, [r7, #4]
 80223de:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 80223e0:	687b      	ldr	r3, [r7, #4]
 80223e2:	681b      	ldr	r3, [r3, #0]
 80223e4:	2b00      	cmp	r3, #0
 80223e6:	d10d      	bne.n	8022404 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 80223e8:	683b      	ldr	r3, [r7, #0]
 80223ea:	b2db      	uxtb	r3, r3
 80223ec:	2214      	movs	r2, #20
 80223ee:	4611      	mov	r1, r2
 80223f0:	4618      	mov	r0, r3
 80223f2:	f7ff ffc6 	bl	8022382 <vOutputChar>
		apStr->curLen++;
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	68db      	ldr	r3, [r3, #12]
 80223fa:	1c5a      	adds	r2, r3, #1
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022400:	2301      	movs	r3, #1
 8022402:	e022      	b.n	802244a <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	681a      	ldr	r2, [r3, #0]
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	689b      	ldr	r3, [r3, #8]
 802240c:	429a      	cmp	r2, r3
 802240e:	d20e      	bcs.n	802242e <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	681b      	ldr	r3, [r3, #0]
 8022414:	1c59      	adds	r1, r3, #1
 8022416:	687a      	ldr	r2, [r7, #4]
 8022418:	6011      	str	r1, [r2, #0]
 802241a:	683a      	ldr	r2, [r7, #0]
 802241c:	b2d2      	uxtb	r2, r2
 802241e:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	68db      	ldr	r3, [r3, #12]
 8022424:	1c5a      	adds	r2, r3, #1
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802242a:	2301      	movs	r3, #1
 802242c:	e00d      	b.n	802244a <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 802242e:	687b      	ldr	r3, [r7, #4]
 8022430:	681a      	ldr	r2, [r3, #0]
 8022432:	687b      	ldr	r3, [r7, #4]
 8022434:	689b      	ldr	r3, [r3, #8]
 8022436:	429a      	cmp	r2, r3
 8022438:	d106      	bne.n	8022448 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	681b      	ldr	r3, [r3, #0]
 802243e:	1c59      	adds	r1, r3, #1
 8022440:	687a      	ldr	r2, [r7, #4]
 8022442:	6011      	str	r1, [r2, #0]
 8022444:	2200      	movs	r2, #0
 8022446:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022448:	2300      	movs	r3, #0
}
 802244a:	4618      	mov	r0, r3
 802244c:	3708      	adds	r7, #8
 802244e:	46bd      	mov	sp, r7
 8022450:	bd80      	pop	{r7, pc}

08022452 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8022452:	b580      	push	{r7, lr}
 8022454:	b082      	sub	sp, #8
 8022456:	af00      	add	r7, sp, #0
 8022458:	6078      	str	r0, [r7, #4]
 802245a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	2b00      	cmp	r3, #0
 8022462:	d112      	bne.n	802248a <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022464:	683b      	ldr	r3, [r7, #0]
 8022466:	b2db      	uxtb	r3, r3
 8022468:	2214      	movs	r2, #20
 802246a:	4611      	mov	r1, r2
 802246c:	4618      	mov	r0, r3
 802246e:	f7ff ff88 	bl	8022382 <vOutputChar>
		if( c == 0 )
 8022472:	683b      	ldr	r3, [r7, #0]
 8022474:	2b00      	cmp	r3, #0
 8022476:	d101      	bne.n	802247c <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8022478:	2300      	movs	r3, #0
 802247a:	e02e      	b.n	80224da <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	68db      	ldr	r3, [r3, #12]
 8022480:	1c5a      	adds	r2, r3, #1
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022486:	2301      	movs	r3, #1
 8022488:	e027      	b.n	80224da <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	681a      	ldr	r2, [r3, #0]
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	689b      	ldr	r3, [r3, #8]
 8022492:	429a      	cmp	r2, r3
 8022494:	d213      	bcs.n	80224be <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	681b      	ldr	r3, [r3, #0]
 802249a:	1c59      	adds	r1, r3, #1
 802249c:	687a      	ldr	r2, [r7, #4]
 802249e:	6011      	str	r1, [r2, #0]
 80224a0:	683a      	ldr	r2, [r7, #0]
 80224a2:	b2d2      	uxtb	r2, r2
 80224a4:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 80224a6:	683b      	ldr	r3, [r7, #0]
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	d101      	bne.n	80224b0 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 80224ac:	2300      	movs	r3, #0
 80224ae:	e014      	b.n	80224da <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	68db      	ldr	r3, [r3, #12]
 80224b4:	1c5a      	adds	r2, r3, #1
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80224ba:	2301      	movs	r3, #1
 80224bc:	e00d      	b.n	80224da <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	681a      	ldr	r2, [r3, #0]
 80224c2:	687b      	ldr	r3, [r7, #4]
 80224c4:	689b      	ldr	r3, [r3, #8]
 80224c6:	429a      	cmp	r2, r3
 80224c8:	d106      	bne.n	80224d8 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	1c59      	adds	r1, r3, #1
 80224d0:	687a      	ldr	r2, [r7, #4]
 80224d2:	6011      	str	r1, [r2, #0]
 80224d4:	2200      	movs	r2, #0
 80224d6:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80224d8:	2300      	movs	r3, #0
}
 80224da:	4618      	mov	r0, r3
 80224dc:	3708      	adds	r7, #8
 80224de:	46bd      	mov	sp, r7
 80224e0:	bd80      	pop	{r7, pc}
	...

080224e4 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 80224e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224e6:	b085      	sub	sp, #20
 80224e8:	af00      	add	r7, sp, #0
 80224ea:	6078      	str	r0, [r7, #4]
 80224ec:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 80224ee:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 80224f0:	683b      	ldr	r3, [r7, #0]
 80224f2:	4618      	mov	r0, r3
 80224f4:	f7ff ff3a 	bl	802236c <xApplicationMemoryPermissions>
 80224f8:	4603      	mov	r3, r0
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d101      	bne.n	8022502 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 80224fe:	4b4c      	ldr	r3, [pc, #304]	@ (8022630 <prints+0x14c>)
 8022500:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	695b      	ldr	r3, [r3, #20]
 8022506:	2b00      	cmp	r3, #0
 8022508:	dd1b      	ble.n	8022542 <prints+0x5e>
	{
		register int count = 0;
 802250a:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 802250c:	683d      	ldr	r5, [r7, #0]
 802250e:	e001      	b.n	8022514 <prints+0x30>
		{
			++count;
 8022510:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8022512:	3501      	adds	r5, #1
 8022514:	782b      	ldrb	r3, [r5, #0]
 8022516:	2b00      	cmp	r3, #0
 8022518:	d1fa      	bne.n	8022510 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	695b      	ldr	r3, [r3, #20]
 802251e:	429c      	cmp	r4, r3
 8022520:	db03      	blt.n	802252a <prints+0x46>
		{
			apBuf->flags.width = 0;
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	2200      	movs	r2, #0
 8022526:	615a      	str	r2, [r3, #20]
 8022528:	e004      	b.n	8022534 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	695b      	ldr	r3, [r3, #20]
 802252e:	1b1a      	subs	r2, r3, r4
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	7f1b      	ldrb	r3, [r3, #28]
 8022538:	f003 0302 	and.w	r3, r3, #2
 802253c:	2b00      	cmp	r3, #0
 802253e:	d000      	beq.n	8022542 <prints+0x5e>
		{
			padchar = '0';
 8022540:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	7f1b      	ldrb	r3, [r3, #28]
 8022546:	f003 0301 	and.w	r3, r3, #1
 802254a:	2b00      	cmp	r3, #0
 802254c:	d112      	bne.n	8022574 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802254e:	e00d      	b.n	802256c <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8022550:	4631      	mov	r1, r6
 8022552:	6878      	ldr	r0, [r7, #4]
 8022554:	f7ff ff3f 	bl	80223d6 <strbuf_printchar>
 8022558:	4603      	mov	r3, r0
 802255a:	2b00      	cmp	r3, #0
 802255c:	d101      	bne.n	8022562 <prints+0x7e>
			{
				return pdFALSE;
 802255e:	2300      	movs	r3, #0
 8022560:	e062      	b.n	8022628 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	695b      	ldr	r3, [r3, #20]
 8022566:	1e5a      	subs	r2, r3, #1
 8022568:	687b      	ldr	r3, [r7, #4]
 802256a:	615a      	str	r2, [r3, #20]
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	695b      	ldr	r3, [r3, #20]
 8022570:	2b00      	cmp	r3, #0
 8022572:	dced      	bgt.n	8022550 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	7f9b      	ldrb	r3, [r3, #30]
 8022578:	f003 0302 	and.w	r3, r3, #2
 802257c:	b2db      	uxtb	r3, r3
 802257e:	2b00      	cmp	r3, #0
 8022580:	d036      	beq.n	80225f0 <prints+0x10c>
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	7f1b      	ldrb	r3, [r3, #28]
 8022586:	2b01      	cmp	r3, #1
 8022588:	d132      	bne.n	80225f0 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 802258a:	6838      	ldr	r0, [r7, #0]
 802258c:	f7dd feb2 	bl	80002f4 <strlen>
 8022590:	4603      	mov	r3, r0
 8022592:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	699b      	ldr	r3, [r3, #24]
 8022598:	68ba      	ldr	r2, [r7, #8]
 802259a:	429a      	cmp	r2, r3
 802259c:	da28      	bge.n	80225f0 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	699a      	ldr	r2, [r3, #24]
 80225a2:	68bb      	ldr	r3, [r7, #8]
 80225a4:	1ad3      	subs	r3, r2, r3
 80225a6:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 80225a8:	e00b      	b.n	80225c2 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 80225aa:	2130      	movs	r1, #48	@ 0x30
 80225ac:	6878      	ldr	r0, [r7, #4]
 80225ae:	f7ff ff12 	bl	80223d6 <strbuf_printchar>
 80225b2:	4603      	mov	r3, r0
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d101      	bne.n	80225bc <prints+0xd8>
				{
					return pdFALSE;
 80225b8:	2300      	movs	r3, #0
 80225ba:	e035      	b.n	8022628 <prints+0x144>
			for( ; i; i-- )
 80225bc:	68fb      	ldr	r3, [r7, #12]
 80225be:	3b01      	subs	r3, #1
 80225c0:	60fb      	str	r3, [r7, #12]
 80225c2:	68fb      	ldr	r3, [r7, #12]
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d1f0      	bne.n	80225aa <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80225c8:	e012      	b.n	80225f0 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 80225ca:	683b      	ldr	r3, [r7, #0]
 80225cc:	781b      	ldrb	r3, [r3, #0]
 80225ce:	4619      	mov	r1, r3
 80225d0:	6878      	ldr	r0, [r7, #4]
 80225d2:	f7ff ff00 	bl	80223d6 <strbuf_printchar>
 80225d6:	4603      	mov	r3, r0
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d101      	bne.n	80225e0 <prints+0xfc>
		{
			return pdFALSE;
 80225dc:	2300      	movs	r3, #0
 80225de:	e023      	b.n	8022628 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80225e0:	683b      	ldr	r3, [r7, #0]
 80225e2:	3301      	adds	r3, #1
 80225e4:	603b      	str	r3, [r7, #0]
 80225e6:	687b      	ldr	r3, [r7, #4]
 80225e8:	699b      	ldr	r3, [r3, #24]
 80225ea:	1e5a      	subs	r2, r3, #1
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	619a      	str	r2, [r3, #24]
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	699b      	ldr	r3, [r3, #24]
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	d012      	beq.n	802261e <prints+0x13a>
 80225f8:	683b      	ldr	r3, [r7, #0]
 80225fa:	781b      	ldrb	r3, [r3, #0]
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d1e4      	bne.n	80225ca <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022600:	e00d      	b.n	802261e <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 8022602:	4631      	mov	r1, r6
 8022604:	6878      	ldr	r0, [r7, #4]
 8022606:	f7ff fee6 	bl	80223d6 <strbuf_printchar>
 802260a:	4603      	mov	r3, r0
 802260c:	2b00      	cmp	r3, #0
 802260e:	d101      	bne.n	8022614 <prints+0x130>
		{
			return pdFALSE;
 8022610:	2300      	movs	r3, #0
 8022612:	e009      	b.n	8022628 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	695b      	ldr	r3, [r3, #20]
 8022618:	1e5a      	subs	r2, r3, #1
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	615a      	str	r2, [r3, #20]
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	695b      	ldr	r3, [r3, #20]
 8022622:	2b00      	cmp	r3, #0
 8022624:	dced      	bgt.n	8022602 <prints+0x11e>
		}
	}

	return pdTRUE;
 8022626:	2301      	movs	r3, #1
}
 8022628:	4618      	mov	r0, r3
 802262a:	3714      	adds	r7, #20
 802262c:	46bd      	mov	sp, r7
 802262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022630:	080271e0 	.word	0x080271e0

08022634 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8022634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022638:	b087      	sub	sp, #28
 802263a:	af00      	add	r7, sp, #0
 802263c:	6078      	str	r0, [r7, #4]
 802263e:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8022640:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8022644:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8022646:	687b      	ldr	r3, [r7, #4]
 8022648:	691b      	ldr	r3, [r3, #16]
 802264a:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 802264c:	687a      	ldr	r2, [r7, #4]
 802264e:	7f93      	ldrb	r3, [r2, #30]
 8022650:	f043 0302 	orr.w	r3, r3, #2
 8022654:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8022656:	683b      	ldr	r3, [r7, #0]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d10b      	bne.n	8022674 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 802265c:	2330      	movs	r3, #48	@ 0x30
 802265e:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8022660:	2300      	movs	r3, #0
 8022662:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8022664:	f107 030c 	add.w	r3, r7, #12
 8022668:	4619      	mov	r1, r3
 802266a:	6878      	ldr	r0, [r7, #4]
 802266c:	f7ff ff3a 	bl	80224e4 <prints>
 8022670:	4603      	mov	r3, r0
 8022672:	e067      	b.n	8022744 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	7f9b      	ldrb	r3, [r3, #30]
 8022678:	f003 0301 	and.w	r3, r3, #1
 802267c:	b2db      	uxtb	r3, r3
 802267e:	2b00      	cmp	r3, #0
 8022680:	d009      	beq.n	8022696 <printi+0x62>
 8022682:	2e0a      	cmp	r6, #10
 8022684:	d107      	bne.n	8022696 <printi+0x62>
 8022686:	683b      	ldr	r3, [r7, #0]
 8022688:	2b00      	cmp	r3, #0
 802268a:	da04      	bge.n	8022696 <printi+0x62>
	{
		neg = 1;
 802268c:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8022690:	683b      	ldr	r3, [r7, #0]
 8022692:	425b      	negs	r3, r3
 8022694:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8022696:	f107 040c 	add.w	r4, r7, #12
 802269a:	340b      	adds	r4, #11

	*s = '\0';
 802269c:	2300      	movs	r3, #0
 802269e:	7023      	strb	r3, [r4, #0]
	switch( base )
 80226a0:	2e10      	cmp	r6, #16
 80226a2:	d017      	beq.n	80226d4 <printi+0xa0>
 80226a4:	2e10      	cmp	r6, #16
 80226a6:	d829      	bhi.n	80226fc <printi+0xc8>
 80226a8:	2e08      	cmp	r6, #8
 80226aa:	d024      	beq.n	80226f6 <printi+0xc2>
 80226ac:	2e0a      	cmp	r6, #10
 80226ae:	d022      	beq.n	80226f6 <printi+0xc2>
 80226b0:	e024      	b.n	80226fc <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 80226b2:	462b      	mov	r3, r5
 80226b4:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 80226b8:	f1b8 0f09 	cmp.w	r8, #9
 80226bc:	dd03      	ble.n	80226c6 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	7f5b      	ldrb	r3, [r3, #29]
 80226c2:	3b3a      	subs	r3, #58	@ 0x3a
 80226c4:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 80226c6:	fa5f f388 	uxtb.w	r3, r8
 80226ca:	3c01      	subs	r4, #1
 80226cc:	3330      	adds	r3, #48	@ 0x30
 80226ce:	b2db      	uxtb	r3, r3
 80226d0:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 80226d2:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 80226d4:	2d00      	cmp	r5, #0
 80226d6:	d1ec      	bne.n	80226b2 <printi+0x7e>
		}
		break;
 80226d8:	e010      	b.n	80226fc <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 80226da:	fbb5 f3f6 	udiv	r3, r5, r6
 80226de:	fb06 f303 	mul.w	r3, r6, r3
 80226e2:	1aeb      	subs	r3, r5, r3
 80226e4:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 80226e6:	fa5f f388 	uxtb.w	r3, r8
 80226ea:	3c01      	subs	r4, #1
 80226ec:	3330      	adds	r3, #48	@ 0x30
 80226ee:	b2db      	uxtb	r3, r3
 80226f0:	7023      	strb	r3, [r4, #0]
			u /= base;
 80226f2:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 80226f6:	2d00      	cmp	r5, #0
 80226f8:	d1ef      	bne.n	80226da <printi+0xa6>
		}
		break;
 80226fa:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80226fc:	f1b9 0f00 	cmp.w	r9, #0
 8022700:	d01b      	beq.n	802273a <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	695b      	ldr	r3, [r3, #20]
 8022706:	2b00      	cmp	r3, #0
 8022708:	d014      	beq.n	8022734 <printi+0x100>
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	7f1b      	ldrb	r3, [r3, #28]
 802270e:	f003 0302 	and.w	r3, r3, #2
 8022712:	2b00      	cmp	r3, #0
 8022714:	d00e      	beq.n	8022734 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8022716:	212d      	movs	r1, #45	@ 0x2d
 8022718:	6878      	ldr	r0, [r7, #4]
 802271a:	f7ff fe5c 	bl	80223d6 <strbuf_printchar>
 802271e:	4603      	mov	r3, r0
 8022720:	2b00      	cmp	r3, #0
 8022722:	d101      	bne.n	8022728 <printi+0xf4>
			{
				return pdFALSE;
 8022724:	2300      	movs	r3, #0
 8022726:	e00d      	b.n	8022744 <printi+0x110>
			}
			--apBuf->flags.width;
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	695b      	ldr	r3, [r3, #20]
 802272c:	1e5a      	subs	r2, r3, #1
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	615a      	str	r2, [r3, #20]
 8022732:	e002      	b.n	802273a <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8022734:	3c01      	subs	r4, #1
 8022736:	232d      	movs	r3, #45	@ 0x2d
 8022738:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 802273a:	4621      	mov	r1, r4
 802273c:	6878      	ldr	r0, [r7, #4]
 802273e:	f7ff fed1 	bl	80224e4 <prints>
 8022742:	4603      	mov	r3, r0
}
 8022744:	4618      	mov	r0, r3
 8022746:	371c      	adds	r7, #28
 8022748:	46bd      	mov	sp, r7
 802274a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08022750 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8022750:	b590      	push	{r4, r7, lr}
 8022752:	b089      	sub	sp, #36	@ 0x24
 8022754:	af02      	add	r7, sp, #8
 8022756:	6078      	str	r0, [r7, #4]
 8022758:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 802275e:	683b      	ldr	r3, [r7, #0]
 8022760:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8022762:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8022764:	683b      	ldr	r3, [r7, #0]
 8022766:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8022768:	b2db      	uxtb	r3, r3
 802276a:	683a      	ldr	r2, [r7, #0]
 802276c:	b2d2      	uxtb	r2, r2
 802276e:	f107 0008 	add.w	r0, r7, #8
 8022772:	9201      	str	r2, [sp, #4]
 8022774:	9300      	str	r3, [sp, #0]
 8022776:	4623      	mov	r3, r4
 8022778:	460a      	mov	r2, r1
 802277a:	4909      	ldr	r1, [pc, #36]	@ (80227a0 <printIp+0x50>)
 802277c:	f000 fa81 	bl	8022c82 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8022780:	687a      	ldr	r2, [r7, #4]
 8022782:	7f93      	ldrb	r3, [r2, #30]
 8022784:	f043 0302 	orr.w	r3, r3, #2
 8022788:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 802278a:	f107 0308 	add.w	r3, r7, #8
 802278e:	4619      	mov	r1, r3
 8022790:	6878      	ldr	r0, [r7, #4]
 8022792:	f7ff fea7 	bl	80224e4 <prints>

	return pdTRUE;
 8022796:	2301      	movs	r3, #1
}
 8022798:	4618      	mov	r0, r3
 802279a:	371c      	adds	r7, #28
 802279c:	46bd      	mov	sp, r7
 802279e:	bd90      	pop	{r4, r7, pc}
 80227a0:	080271e8 	.word	0x080271e8

080227a4 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 80227a4:	b480      	push	{r7}
 80227a6:	b083      	sub	sp, #12
 80227a8:	af00      	add	r7, sp, #0
 80227aa:	4603      	mov	r3, r0
 80227ac:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 80227ae:	4a0b      	ldr	r2, [pc, #44]	@ (80227dc <usNetToHost+0x38>)
 80227b0:	4b0b      	ldr	r3, [pc, #44]	@ (80227e0 <usNetToHost+0x3c>)
 80227b2:	429a      	cmp	r2, r3
 80227b4:	d101      	bne.n	80227ba <usNetToHost+0x16>
	{
		return usValue;
 80227b6:	88fb      	ldrh	r3, [r7, #6]
 80227b8:	e009      	b.n	80227ce <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 80227ba:	88fb      	ldrh	r3, [r7, #6]
 80227bc:	021b      	lsls	r3, r3, #8
 80227be:	b21a      	sxth	r2, r3
 80227c0:	88fb      	ldrh	r3, [r7, #6]
 80227c2:	0a1b      	lsrs	r3, r3, #8
 80227c4:	b29b      	uxth	r3, r3
 80227c6:	b21b      	sxth	r3, r3
 80227c8:	4313      	orrs	r3, r2
 80227ca:	b21b      	sxth	r3, r3
 80227cc:	b29b      	uxth	r3, r3
	}
}
 80227ce:	4618      	mov	r0, r3
 80227d0:	370c      	adds	r7, #12
 80227d2:	46bd      	mov	sp, r7
 80227d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d8:	4770      	bx	lr
 80227da:	bf00      	nop
 80227dc:	03020100 	.word	0x03020100
 80227e0:	00010203 	.word	0x00010203

080227e4 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 80227e4:	b580      	push	{r7, lr}
 80227e6:	b088      	sub	sp, #32
 80227e8:	af00      	add	r7, sp, #0
 80227ea:	6078      	str	r0, [r7, #4]
 80227ec:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 80227ee:	f04f 33ff 	mov.w	r3, #4294967295
 80227f2:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 80227f4:	2300      	movs	r3, #0
 80227f6:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 80227f8:	2300      	movs	r3, #0
 80227fa:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80227fc:	2300      	movs	r3, #0
 80227fe:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022800:	2300      	movs	r3, #0
 8022802:	61fb      	str	r3, [r7, #28]
 8022804:	e026      	b.n	8022854 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 8022806:	69fb      	ldr	r3, [r7, #28]
 8022808:	005b      	lsls	r3, r3, #1
 802280a:	683a      	ldr	r2, [r7, #0]
 802280c:	4413      	add	r3, r2
 802280e:	881b      	ldrh	r3, [r3, #0]
 8022810:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 8022812:	897b      	ldrh	r3, [r7, #10]
 8022814:	2b00      	cmp	r3, #0
 8022816:	d107      	bne.n	8022828 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8022818:	68fb      	ldr	r3, [r7, #12]
 802281a:	2b00      	cmp	r3, #0
 802281c:	d101      	bne.n	8022822 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 802281e:	69fb      	ldr	r3, [r7, #28]
 8022820:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 8022822:	68fb      	ldr	r3, [r7, #12]
 8022824:	3301      	adds	r3, #1
 8022826:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8022828:	897b      	ldrh	r3, [r7, #10]
 802282a:	2b00      	cmp	r3, #0
 802282c:	d102      	bne.n	8022834 <printIPv6+0x50>
 802282e:	69fb      	ldr	r3, [r7, #28]
 8022830:	2b07      	cmp	r3, #7
 8022832:	d10c      	bne.n	802284e <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8022834:	68fb      	ldr	r3, [r7, #12]
 8022836:	2b01      	cmp	r3, #1
 8022838:	dd07      	ble.n	802284a <printIPv6+0x66>
 802283a:	697a      	ldr	r2, [r7, #20]
 802283c:	68fb      	ldr	r3, [r7, #12]
 802283e:	429a      	cmp	r2, r3
 8022840:	da03      	bge.n	802284a <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 8022842:	68fb      	ldr	r3, [r7, #12]
 8022844:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8022846:	693b      	ldr	r3, [r7, #16]
 8022848:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 802284a:	2300      	movs	r3, #0
 802284c:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802284e:	69fb      	ldr	r3, [r7, #28]
 8022850:	3301      	adds	r3, #1
 8022852:	61fb      	str	r3, [r7, #28]
 8022854:	69fb      	ldr	r3, [r7, #28]
 8022856:	2b07      	cmp	r3, #7
 8022858:	ddd5      	ble.n	8022806 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 802285a:	687b      	ldr	r3, [r7, #4]
 802285c:	2210      	movs	r2, #16
 802285e:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	2261      	movs	r2, #97	@ 0x61
 8022864:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022866:	2300      	movs	r3, #0
 8022868:	61fb      	str	r3, [r7, #28]
 802286a:	e02b      	b.n	80228c4 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 802286c:	69fa      	ldr	r2, [r7, #28]
 802286e:	69bb      	ldr	r3, [r7, #24]
 8022870:	429a      	cmp	r2, r3
 8022872:	d110      	bne.n	8022896 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8022874:	697b      	ldr	r3, [r7, #20]
 8022876:	3b01      	subs	r3, #1
 8022878:	69fa      	ldr	r2, [r7, #28]
 802287a:	4413      	add	r3, r2
 802287c:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 802287e:	213a      	movs	r1, #58	@ 0x3a
 8022880:	6878      	ldr	r0, [r7, #4]
 8022882:	f7ff fda8 	bl	80223d6 <strbuf_printchar>
			if( iIndex == 7 )
 8022886:	69fb      	ldr	r3, [r7, #28]
 8022888:	2b07      	cmp	r3, #7
 802288a:	d118      	bne.n	80228be <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 802288c:	213a      	movs	r1, #58	@ 0x3a
 802288e:	6878      	ldr	r0, [r7, #4]
 8022890:	f7ff fda1 	bl	80223d6 <strbuf_printchar>
 8022894:	e013      	b.n	80228be <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8022896:	69fb      	ldr	r3, [r7, #28]
 8022898:	2b00      	cmp	r3, #0
 802289a:	dd03      	ble.n	80228a4 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 802289c:	213a      	movs	r1, #58	@ 0x3a
 802289e:	6878      	ldr	r0, [r7, #4]
 80228a0:	f7ff fd99 	bl	80223d6 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 80228a4:	69fb      	ldr	r3, [r7, #28]
 80228a6:	005b      	lsls	r3, r3, #1
 80228a8:	683a      	ldr	r2, [r7, #0]
 80228aa:	4413      	add	r3, r2
 80228ac:	881b      	ldrh	r3, [r3, #0]
 80228ae:	4618      	mov	r0, r3
 80228b0:	f7ff ff78 	bl	80227a4 <usNetToHost>
 80228b4:	4603      	mov	r3, r0
 80228b6:	4619      	mov	r1, r3
 80228b8:	6878      	ldr	r0, [r7, #4]
 80228ba:	f7ff febb 	bl	8022634 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80228be:	69fb      	ldr	r3, [r7, #28]
 80228c0:	3301      	adds	r3, #1
 80228c2:	61fb      	str	r3, [r7, #28]
 80228c4:	69fb      	ldr	r3, [r7, #28]
 80228c6:	2b07      	cmp	r3, #7
 80228c8:	ddd0      	ble.n	802286c <printIPv6+0x88>
		}
	}

	return pdTRUE;
 80228ca:	2301      	movs	r3, #1
}
 80228cc:	4618      	mov	r0, r3
 80228ce:	3720      	adds	r7, #32
 80228d0:	46bd      	mov	sp, r7
 80228d2:	bd80      	pop	{r7, pc}

080228d4 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 80228d4:	b590      	push	{r4, r7, lr}
 80228d6:	b087      	sub	sp, #28
 80228d8:	af00      	add	r7, sp, #0
 80228da:	60f8      	str	r0, [r7, #12]
 80228dc:	60b9      	str	r1, [r7, #8]
 80228de:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 80228e0:	68bb      	ldr	r3, [r7, #8]
 80228e2:	1c5a      	adds	r2, r3, #1
 80228e4:	60ba      	str	r2, [r7, #8]
 80228e6:	781b      	ldrb	r3, [r3, #0]
 80228e8:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 80228ea:	697b      	ldr	r3, [r7, #20]
 80228ec:	2b25      	cmp	r3, #37	@ 0x25
 80228ee:	d00f      	beq.n	8022910 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 80228f0:	6979      	ldr	r1, [r7, #20]
 80228f2:	68f8      	ldr	r0, [r7, #12]
 80228f4:	f7ff fdad 	bl	8022452 <strbuf_printchar_inline>
 80228f8:	4603      	mov	r3, r0
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	f000 817e 	beq.w	8022bfc <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 8022900:	68bb      	ldr	r3, [r7, #8]
 8022902:	1c5a      	adds	r2, r3, #1
 8022904:	60ba      	str	r2, [r7, #8]
 8022906:	781b      	ldrb	r3, [r3, #0]
 8022908:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 802290a:	697b      	ldr	r3, [r7, #20]
 802290c:	2b25      	cmp	r3, #37	@ 0x25
 802290e:	d1ef      	bne.n	80228f0 <tiny_print+0x1c>
		}
		ch = *( format++ );
 8022910:	68bb      	ldr	r3, [r7, #8]
 8022912:	1c5a      	adds	r2, r3, #1
 8022914:	60ba      	str	r2, [r7, #8]
 8022916:	781b      	ldrb	r3, [r3, #0]
 8022918:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 802291a:	697b      	ldr	r3, [r7, #20]
 802291c:	2b00      	cmp	r3, #0
 802291e:	f000 8165 	beq.w	8022bec <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 8022922:	697b      	ldr	r3, [r7, #20]
 8022924:	2b25      	cmp	r3, #37	@ 0x25
 8022926:	d108      	bne.n	802293a <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8022928:	6979      	ldr	r1, [r7, #20]
 802292a:	68f8      	ldr	r0, [r7, #12]
 802292c:	f7ff fd53 	bl	80223d6 <strbuf_printchar>
 8022930:	4603      	mov	r3, r0
 8022932:	2b00      	cmp	r3, #0
 8022934:	f040 814e 	bne.w	8022bd4 <tiny_print+0x300>
			{
				return;
 8022938:	e161      	b.n	8022bfe <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	3310      	adds	r3, #16
 802293e:	2210      	movs	r2, #16
 8022940:	2100      	movs	r1, #0
 8022942:	4618      	mov	r0, r3
 8022944:	f7ff fc79 	bl	802223a <memset>

		if( ch == '-' )
 8022948:	697b      	ldr	r3, [r7, #20]
 802294a:	2b2d      	cmp	r3, #45	@ 0x2d
 802294c:	d114      	bne.n	8022978 <tiny_print+0xa4>
		{
			ch = *( format++ );
 802294e:	68bb      	ldr	r3, [r7, #8]
 8022950:	1c5a      	adds	r2, r3, #1
 8022952:	60ba      	str	r2, [r7, #8]
 8022954:	781b      	ldrb	r3, [r3, #0]
 8022956:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8022958:	68fb      	ldr	r3, [r7, #12]
 802295a:	2201      	movs	r2, #1
 802295c:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 802295e:	e00b      	b.n	8022978 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022960:	68bb      	ldr	r3, [r7, #8]
 8022962:	1c5a      	adds	r2, r3, #1
 8022964:	60ba      	str	r2, [r7, #8]
 8022966:	781b      	ldrb	r3, [r3, #0]
 8022968:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 802296a:	68fb      	ldr	r3, [r7, #12]
 802296c:	7f1b      	ldrb	r3, [r3, #28]
 802296e:	f043 0302 	orr.w	r3, r3, #2
 8022972:	b2da      	uxtb	r2, r3
 8022974:	68fb      	ldr	r3, [r7, #12]
 8022976:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8022978:	697b      	ldr	r3, [r7, #20]
 802297a:	2b30      	cmp	r3, #48	@ 0x30
 802297c:	d0f0      	beq.n	8022960 <tiny_print+0x8c>
		}
		if( ch == '*' )
 802297e:	697b      	ldr	r3, [r7, #20]
 8022980:	2b2a      	cmp	r3, #42	@ 0x2a
 8022982:	d120      	bne.n	80229c6 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8022984:	68bb      	ldr	r3, [r7, #8]
 8022986:	1c5a      	adds	r2, r3, #1
 8022988:	60ba      	str	r2, [r7, #8]
 802298a:	781b      	ldrb	r3, [r3, #0]
 802298c:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	1d1a      	adds	r2, r3, #4
 8022992:	607a      	str	r2, [r7, #4]
 8022994:	681a      	ldr	r2, [r3, #0]
 8022996:	68fb      	ldr	r3, [r7, #12]
 8022998:	615a      	str	r2, [r3, #20]
 802299a:	e01a      	b.n	80229d2 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 802299c:	68fb      	ldr	r3, [r7, #12]
 802299e:	695a      	ldr	r2, [r3, #20]
 80229a0:	4613      	mov	r3, r2
 80229a2:	009b      	lsls	r3, r3, #2
 80229a4:	4413      	add	r3, r2
 80229a6:	005b      	lsls	r3, r3, #1
 80229a8:	461a      	mov	r2, r3
 80229aa:	68fb      	ldr	r3, [r7, #12]
 80229ac:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 80229ae:	68fb      	ldr	r3, [r7, #12]
 80229b0:	695a      	ldr	r2, [r3, #20]
 80229b2:	697b      	ldr	r3, [r7, #20]
 80229b4:	3b30      	subs	r3, #48	@ 0x30
 80229b6:	441a      	add	r2, r3
 80229b8:	68fb      	ldr	r3, [r7, #12]
 80229ba:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 80229bc:	68bb      	ldr	r3, [r7, #8]
 80229be:	1c5a      	adds	r2, r3, #1
 80229c0:	60ba      	str	r2, [r7, #8]
 80229c2:	781b      	ldrb	r3, [r3, #0]
 80229c4:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 80229c6:	697b      	ldr	r3, [r7, #20]
 80229c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80229ca:	dd02      	ble.n	80229d2 <tiny_print+0xfe>
 80229cc:	697b      	ldr	r3, [r7, #20]
 80229ce:	2b39      	cmp	r3, #57	@ 0x39
 80229d0:	dde4      	ble.n	802299c <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 80229d2:	697b      	ldr	r3, [r7, #20]
 80229d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80229d6:	d12e      	bne.n	8022a36 <tiny_print+0x162>
		{
			ch = *( format++ );
 80229d8:	68bb      	ldr	r3, [r7, #8]
 80229da:	1c5a      	adds	r2, r3, #1
 80229dc:	60ba      	str	r2, [r7, #8]
 80229de:	781b      	ldrb	r3, [r3, #0]
 80229e0:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 80229e2:	697b      	ldr	r3, [r7, #20]
 80229e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80229e6:	d120      	bne.n	8022a2a <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	1d1a      	adds	r2, r3, #4
 80229ec:	607a      	str	r2, [r7, #4]
 80229ee:	681a      	ldr	r2, [r3, #0]
 80229f0:	68fb      	ldr	r3, [r7, #12]
 80229f2:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 80229f4:	68bb      	ldr	r3, [r7, #8]
 80229f6:	1c5a      	adds	r2, r3, #1
 80229f8:	60ba      	str	r2, [r7, #8]
 80229fa:	781b      	ldrb	r3, [r3, #0]
 80229fc:	617b      	str	r3, [r7, #20]
 80229fe:	e01a      	b.n	8022a36 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 8022a00:	68fb      	ldr	r3, [r7, #12]
 8022a02:	699a      	ldr	r2, [r3, #24]
 8022a04:	4613      	mov	r3, r2
 8022a06:	009b      	lsls	r3, r3, #2
 8022a08:	4413      	add	r3, r2
 8022a0a:	005b      	lsls	r3, r3, #1
 8022a0c:	461a      	mov	r2, r3
 8022a0e:	68fb      	ldr	r3, [r7, #12]
 8022a10:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 8022a12:	68fb      	ldr	r3, [r7, #12]
 8022a14:	699a      	ldr	r2, [r3, #24]
 8022a16:	697b      	ldr	r3, [r7, #20]
 8022a18:	3b30      	subs	r3, #48	@ 0x30
 8022a1a:	441a      	add	r2, r3
 8022a1c:	68fb      	ldr	r3, [r7, #12]
 8022a1e:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8022a20:	68bb      	ldr	r3, [r7, #8]
 8022a22:	1c5a      	adds	r2, r3, #1
 8022a24:	60ba      	str	r2, [r7, #8]
 8022a26:	781b      	ldrb	r3, [r3, #0]
 8022a28:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8022a2a:	697b      	ldr	r3, [r7, #20]
 8022a2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8022a2e:	dd02      	ble.n	8022a36 <tiny_print+0x162>
 8022a30:	697b      	ldr	r3, [r7, #20]
 8022a32:	2b39      	cmp	r3, #57	@ 0x39
 8022a34:	dde4      	ble.n	8022a00 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8022a36:	68fb      	ldr	r3, [r7, #12]
 8022a38:	699b      	ldr	r3, [r3, #24]
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	d104      	bne.n	8022a48 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	699b      	ldr	r3, [r3, #24]
 8022a42:	1e5a      	subs	r2, r3, #1
 8022a44:	68fb      	ldr	r3, [r7, #12]
 8022a46:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8022a48:	697b      	ldr	r3, [r7, #20]
 8022a4a:	2b70      	cmp	r3, #112	@ 0x70
 8022a4c:	d118      	bne.n	8022a80 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 8022a4e:	68bb      	ldr	r3, [r7, #8]
 8022a50:	781b      	ldrb	r3, [r3, #0]
 8022a52:	2b69      	cmp	r3, #105	@ 0x69
 8022a54:	d114      	bne.n	8022a80 <tiny_print+0x1ac>
 8022a56:	68bb      	ldr	r3, [r7, #8]
 8022a58:	3301      	adds	r3, #1
 8022a5a:	781b      	ldrb	r3, [r3, #0]
 8022a5c:	2b70      	cmp	r3, #112	@ 0x70
 8022a5e:	d10f      	bne.n	8022a80 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8022a60:	68bb      	ldr	r3, [r7, #8]
 8022a62:	3302      	adds	r3, #2
 8022a64:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	1d1a      	adds	r2, r3, #4
 8022a6a:	607a      	str	r2, [r7, #4]
 8022a6c:	681b      	ldr	r3, [r3, #0]
 8022a6e:	4619      	mov	r1, r3
 8022a70:	68f8      	ldr	r0, [r7, #12]
 8022a72:	f7ff feb7 	bl	80227e4 <printIPv6>
 8022a76:	4603      	mov	r3, r0
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	f040 80ad 	bne.w	8022bd8 <tiny_print+0x304>
				{
					break;
 8022a7e:	e0b8      	b.n	8022bf2 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8022a80:	697b      	ldr	r3, [r7, #20]
 8022a82:	2b73      	cmp	r3, #115	@ 0x73
 8022a84:	d112      	bne.n	8022aac <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	1d1a      	adds	r2, r3, #4
 8022a8a:	607a      	str	r2, [r7, #4]
 8022a8c:	681b      	ldr	r3, [r3, #0]
 8022a8e:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8022a90:	2c00      	cmp	r4, #0
 8022a92:	d001      	beq.n	8022a98 <tiny_print+0x1c4>
 8022a94:	4623      	mov	r3, r4
 8022a96:	e000      	b.n	8022a9a <tiny_print+0x1c6>
 8022a98:	4b5a      	ldr	r3, [pc, #360]	@ (8022c04 <tiny_print+0x330>)
 8022a9a:	4619      	mov	r1, r3
 8022a9c:	68f8      	ldr	r0, [r7, #12]
 8022a9e:	f7ff fd21 	bl	80224e4 <prints>
 8022aa2:	4603      	mov	r3, r0
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	f040 8099 	bne.w	8022bdc <tiny_print+0x308>
			{
				break;
 8022aaa:	e0a2      	b.n	8022bf2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8022aac:	697b      	ldr	r3, [r7, #20]
 8022aae:	2b63      	cmp	r3, #99	@ 0x63
 8022ab0:	d10f      	bne.n	8022ad2 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	1d1a      	adds	r2, r3, #4
 8022ab6:	607a      	str	r2, [r7, #4]
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	b2db      	uxtb	r3, r3
 8022abc:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 8022abe:	7c3b      	ldrb	r3, [r7, #16]
 8022ac0:	4619      	mov	r1, r3
 8022ac2:	68f8      	ldr	r0, [r7, #12]
 8022ac4:	f7ff fc87 	bl	80223d6 <strbuf_printchar>
 8022ac8:	4603      	mov	r3, r0
 8022aca:	2b00      	cmp	r3, #0
 8022acc:	f040 8088 	bne.w	8022be0 <tiny_print+0x30c>
			{
				return;
 8022ad0:	e095      	b.n	8022bfe <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8022ad2:	697b      	ldr	r3, [r7, #20]
 8022ad4:	2b6c      	cmp	r3, #108	@ 0x6c
 8022ad6:	d109      	bne.n	8022aec <tiny_print+0x218>
		{
			ch = *( format++ );
 8022ad8:	68bb      	ldr	r3, [r7, #8]
 8022ada:	1c5a      	adds	r2, r3, #1
 8022adc:	60ba      	str	r2, [r7, #8]
 8022ade:	781b      	ldrb	r3, [r3, #0]
 8022ae0:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8022ae2:	68fa      	ldr	r2, [r7, #12]
 8022ae4:	7f93      	ldrb	r3, [r2, #30]
 8022ae6:	f043 0304 	orr.w	r3, r3, #4
 8022aea:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8022aec:	697b      	ldr	r3, [r7, #20]
 8022aee:	2b4c      	cmp	r3, #76	@ 0x4c
 8022af0:	d109      	bne.n	8022b06 <tiny_print+0x232>
		{
			ch = *( format++ );
 8022af2:	68bb      	ldr	r3, [r7, #8]
 8022af4:	1c5a      	adds	r2, r3, #1
 8022af6:	60ba      	str	r2, [r7, #8]
 8022af8:	781b      	ldrb	r3, [r3, #0]
 8022afa:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 8022afc:	68fa      	ldr	r2, [r7, #12]
 8022afe:	7f93      	ldrb	r3, [r2, #30]
 8022b00:	f043 0308 	orr.w	r3, r3, #8
 8022b04:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8022b06:	68fb      	ldr	r3, [r7, #12]
 8022b08:	220a      	movs	r2, #10
 8022b0a:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 8022b0c:	68fb      	ldr	r3, [r7, #12]
 8022b0e:	2261      	movs	r2, #97	@ 0x61
 8022b10:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 8022b12:	697b      	ldr	r3, [r7, #20]
 8022b14:	2b64      	cmp	r3, #100	@ 0x64
 8022b16:	d002      	beq.n	8022b1e <tiny_print+0x24a>
 8022b18:	697b      	ldr	r3, [r7, #20]
 8022b1a:	2b75      	cmp	r3, #117	@ 0x75
 8022b1c:	d116      	bne.n	8022b4c <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 8022b1e:	697b      	ldr	r3, [r7, #20]
 8022b20:	2b64      	cmp	r3, #100	@ 0x64
 8022b22:	bf0c      	ite	eq
 8022b24:	2301      	moveq	r3, #1
 8022b26:	2300      	movne	r3, #0
 8022b28:	b2d9      	uxtb	r1, r3
 8022b2a:	68fa      	ldr	r2, [r7, #12]
 8022b2c:	7f93      	ldrb	r3, [r2, #30]
 8022b2e:	f361 0300 	bfi	r3, r1, #0, #1
 8022b32:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	1d1a      	adds	r2, r3, #4
 8022b38:	607a      	str	r2, [r7, #4]
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	4619      	mov	r1, r3
 8022b3e:	68f8      	ldr	r0, [r7, #12]
 8022b40:	f7ff fd78 	bl	8022634 <printi>
 8022b44:	4603      	mov	r3, r0
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d14c      	bne.n	8022be4 <tiny_print+0x310>
			{
				break;
 8022b4a:	e052      	b.n	8022bf2 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8022b4c:	68fb      	ldr	r3, [r7, #12]
 8022b4e:	2210      	movs	r2, #16
 8022b50:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8022b52:	697b      	ldr	r3, [r7, #20]
 8022b54:	2b78      	cmp	r3, #120	@ 0x78
 8022b56:	d117      	bne.n	8022b88 <tiny_print+0x2b4>
 8022b58:	68bb      	ldr	r3, [r7, #8]
 8022b5a:	781b      	ldrb	r3, [r3, #0]
 8022b5c:	2b69      	cmp	r3, #105	@ 0x69
 8022b5e:	d113      	bne.n	8022b88 <tiny_print+0x2b4>
 8022b60:	68bb      	ldr	r3, [r7, #8]
 8022b62:	3301      	adds	r3, #1
 8022b64:	781b      	ldrb	r3, [r3, #0]
 8022b66:	2b70      	cmp	r3, #112	@ 0x70
 8022b68:	d10e      	bne.n	8022b88 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 8022b6a:	68bb      	ldr	r3, [r7, #8]
 8022b6c:	3302      	adds	r3, #2
 8022b6e:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	1d1a      	adds	r2, r3, #4
 8022b74:	607a      	str	r2, [r7, #4]
 8022b76:	681b      	ldr	r3, [r3, #0]
 8022b78:	4619      	mov	r1, r3
 8022b7a:	68f8      	ldr	r0, [r7, #12]
 8022b7c:	f7ff fde8 	bl	8022750 <printIp>
 8022b80:	4603      	mov	r3, r0
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	d130      	bne.n	8022be8 <tiny_print+0x314>
			{
				break;
 8022b86:	e034      	b.n	8022bf2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8022b88:	697b      	ldr	r3, [r7, #20]
 8022b8a:	2b78      	cmp	r3, #120	@ 0x78
 8022b8c:	d009      	beq.n	8022ba2 <tiny_print+0x2ce>
 8022b8e:	697b      	ldr	r3, [r7, #20]
 8022b90:	2b58      	cmp	r3, #88	@ 0x58
 8022b92:	d006      	beq.n	8022ba2 <tiny_print+0x2ce>
 8022b94:	697b      	ldr	r3, [r7, #20]
 8022b96:	2b70      	cmp	r3, #112	@ 0x70
 8022b98:	d003      	beq.n	8022ba2 <tiny_print+0x2ce>
 8022b9a:	697b      	ldr	r3, [r7, #20]
 8022b9c:	2b6f      	cmp	r3, #111	@ 0x6f
 8022b9e:	f47f ae9f 	bne.w	80228e0 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8022ba2:	697b      	ldr	r3, [r7, #20]
 8022ba4:	2b58      	cmp	r3, #88	@ 0x58
 8022ba6:	d103      	bne.n	8022bb0 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8022ba8:	68fb      	ldr	r3, [r7, #12]
 8022baa:	2241      	movs	r2, #65	@ 0x41
 8022bac:	775a      	strb	r2, [r3, #29]
 8022bae:	e005      	b.n	8022bbc <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8022bb0:	697b      	ldr	r3, [r7, #20]
 8022bb2:	2b6f      	cmp	r3, #111	@ 0x6f
 8022bb4:	d102      	bne.n	8022bbc <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8022bb6:	68fb      	ldr	r3, [r7, #12]
 8022bb8:	2208      	movs	r2, #8
 8022bba:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	1d1a      	adds	r2, r3, #4
 8022bc0:	607a      	str	r2, [r7, #4]
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	4619      	mov	r1, r3
 8022bc6:	68f8      	ldr	r0, [r7, #12]
 8022bc8:	f7ff fd34 	bl	8022634 <printi>
 8022bcc:	4603      	mov	r3, r0
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	d00e      	beq.n	8022bf0 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8022bd2:	e00a      	b.n	8022bea <tiny_print+0x316>
			continue;
 8022bd4:	bf00      	nop
 8022bd6:	e683      	b.n	80228e0 <tiny_print+0xc>
				continue;
 8022bd8:	bf00      	nop
 8022bda:	e681      	b.n	80228e0 <tiny_print+0xc>
			continue;
 8022bdc:	bf00      	nop
 8022bde:	e67f      	b.n	80228e0 <tiny_print+0xc>
			continue;
 8022be0:	bf00      	nop
 8022be2:	e67d      	b.n	80228e0 <tiny_print+0xc>
			continue;
 8022be4:	bf00      	nop
 8022be6:	e67b      	b.n	80228e0 <tiny_print+0xc>
			continue;
 8022be8:	bf00      	nop
	{
 8022bea:	e679      	b.n	80228e0 <tiny_print+0xc>
			break;
 8022bec:	bf00      	nop
 8022bee:	e000      	b.n	8022bf2 <tiny_print+0x31e>
				break;
 8022bf0:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8022bf2:	2100      	movs	r1, #0
 8022bf4:	68f8      	ldr	r0, [r7, #12]
 8022bf6:	f7ff fbee 	bl	80223d6 <strbuf_printchar>
 8022bfa:	e000      	b.n	8022bfe <tiny_print+0x32a>
					return;
 8022bfc:	bf00      	nop
}
 8022bfe:	371c      	adds	r7, #28
 8022c00:	46bd      	mov	sp, r7
 8022c02:	bd90      	pop	{r4, r7, pc}
 8022c04:	080271f4 	.word	0x080271f4

08022c08 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 8022c08:	b580      	push	{r7, lr}
 8022c0a:	b08c      	sub	sp, #48	@ 0x30
 8022c0c:	af00      	add	r7, sp, #0
 8022c0e:	60f8      	str	r0, [r7, #12]
 8022c10:	60b9      	str	r1, [r7, #8]
 8022c12:	607a      	str	r2, [r7, #4]
 8022c14:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8022c16:	68fa      	ldr	r2, [r7, #12]
 8022c18:	68bb      	ldr	r3, [r7, #8]
 8022c1a:	441a      	add	r2, r3
 8022c1c:	f107 0310 	add.w	r3, r7, #16
 8022c20:	68f9      	ldr	r1, [r7, #12]
 8022c22:	4618      	mov	r0, r3
 8022c24:	f7ff fbb9 	bl	802239a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022c28:	f107 0310 	add.w	r3, r7, #16
 8022c2c:	683a      	ldr	r2, [r7, #0]
 8022c2e:	6879      	ldr	r1, [r7, #4]
 8022c30:	4618      	mov	r0, r3
 8022c32:	f7ff fe4f 	bl	80228d4 <tiny_print>

	return strBuf.curLen;
 8022c36:	69fb      	ldr	r3, [r7, #28]
}
 8022c38:	4618      	mov	r0, r3
 8022c3a:	3730      	adds	r7, #48	@ 0x30
 8022c3c:	46bd      	mov	sp, r7
 8022c3e:	bd80      	pop	{r7, pc}

08022c40 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 8022c40:	b40c      	push	{r2, r3}
 8022c42:	b580      	push	{r7, lr}
 8022c44:	b08c      	sub	sp, #48	@ 0x30
 8022c46:	af00      	add	r7, sp, #0
 8022c48:	6078      	str	r0, [r7, #4]
 8022c4a:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8022c4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8022c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8022c52:	687a      	ldr	r2, [r7, #4]
 8022c54:	683b      	ldr	r3, [r7, #0]
 8022c56:	441a      	add	r2, r3
 8022c58:	f107 030c 	add.w	r3, r7, #12
 8022c5c:	6879      	ldr	r1, [r7, #4]
 8022c5e:	4618      	mov	r0, r3
 8022c60:	f7ff fb9b 	bl	802239a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022c64:	f107 030c 	add.w	r3, r7, #12
 8022c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022c6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8022c6c:	4618      	mov	r0, r3
 8022c6e:	f7ff fe31 	bl	80228d4 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022c72:	69bb      	ldr	r3, [r7, #24]
}
 8022c74:	4618      	mov	r0, r3
 8022c76:	3730      	adds	r7, #48	@ 0x30
 8022c78:	46bd      	mov	sp, r7
 8022c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022c7e:	b002      	add	sp, #8
 8022c80:	4770      	bx	lr

08022c82 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8022c82:	b40e      	push	{r1, r2, r3}
 8022c84:	b580      	push	{r7, lr}
 8022c86:	b08d      	sub	sp, #52	@ 0x34
 8022c88:	af00      	add	r7, sp, #0
 8022c8a:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8022c8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8022c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8022c98:	f107 030c 	add.w	r3, r7, #12
 8022c9c:	6879      	ldr	r1, [r7, #4]
 8022c9e:	4618      	mov	r0, r3
 8022ca0:	f7ff fb7b 	bl	802239a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022ca4:	f107 030c 	add.w	r3, r7, #12
 8022ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022caa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022cac:	4618      	mov	r0, r3
 8022cae:	f7ff fe11 	bl	80228d4 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022cb2:	69bb      	ldr	r3, [r7, #24]
}
 8022cb4:	4618      	mov	r0, r3
 8022cb6:	3734      	adds	r7, #52	@ 0x34
 8022cb8:	46bd      	mov	sp, r7
 8022cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022cbe:	b003      	add	sp, #12
 8022cc0:	4770      	bx	lr
	...

08022cc4 <rand>:
 8022cc4:	4b16      	ldr	r3, [pc, #88]	@ (8022d20 <rand+0x5c>)
 8022cc6:	b510      	push	{r4, lr}
 8022cc8:	681c      	ldr	r4, [r3, #0]
 8022cca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022ccc:	b9b3      	cbnz	r3, 8022cfc <rand+0x38>
 8022cce:	2018      	movs	r0, #24
 8022cd0:	f000 fa70 	bl	80231b4 <malloc>
 8022cd4:	4602      	mov	r2, r0
 8022cd6:	6320      	str	r0, [r4, #48]	@ 0x30
 8022cd8:	b920      	cbnz	r0, 8022ce4 <rand+0x20>
 8022cda:	4b12      	ldr	r3, [pc, #72]	@ (8022d24 <rand+0x60>)
 8022cdc:	4812      	ldr	r0, [pc, #72]	@ (8022d28 <rand+0x64>)
 8022cde:	2152      	movs	r1, #82	@ 0x52
 8022ce0:	f000 fa00 	bl	80230e4 <__assert_func>
 8022ce4:	4911      	ldr	r1, [pc, #68]	@ (8022d2c <rand+0x68>)
 8022ce6:	4b12      	ldr	r3, [pc, #72]	@ (8022d30 <rand+0x6c>)
 8022ce8:	e9c0 1300 	strd	r1, r3, [r0]
 8022cec:	4b11      	ldr	r3, [pc, #68]	@ (8022d34 <rand+0x70>)
 8022cee:	6083      	str	r3, [r0, #8]
 8022cf0:	230b      	movs	r3, #11
 8022cf2:	8183      	strh	r3, [r0, #12]
 8022cf4:	2100      	movs	r1, #0
 8022cf6:	2001      	movs	r0, #1
 8022cf8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022cfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022cfe:	480e      	ldr	r0, [pc, #56]	@ (8022d38 <rand+0x74>)
 8022d00:	690b      	ldr	r3, [r1, #16]
 8022d02:	694c      	ldr	r4, [r1, #20]
 8022d04:	4a0d      	ldr	r2, [pc, #52]	@ (8022d3c <rand+0x78>)
 8022d06:	4358      	muls	r0, r3
 8022d08:	fb02 0004 	mla	r0, r2, r4, r0
 8022d0c:	fba3 3202 	umull	r3, r2, r3, r2
 8022d10:	3301      	adds	r3, #1
 8022d12:	eb40 0002 	adc.w	r0, r0, r2
 8022d16:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8022d1a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8022d1e:	bd10      	pop	{r4, pc}
 8022d20:	20000038 	.word	0x20000038
 8022d24:	080273b8 	.word	0x080273b8
 8022d28:	080273cf 	.word	0x080273cf
 8022d2c:	abcd330e 	.word	0xabcd330e
 8022d30:	e66d1234 	.word	0xe66d1234
 8022d34:	0005deec 	.word	0x0005deec
 8022d38:	5851f42d 	.word	0x5851f42d
 8022d3c:	4c957f2d 	.word	0x4c957f2d

08022d40 <std>:
 8022d40:	2300      	movs	r3, #0
 8022d42:	b510      	push	{r4, lr}
 8022d44:	4604      	mov	r4, r0
 8022d46:	e9c0 3300 	strd	r3, r3, [r0]
 8022d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022d4e:	6083      	str	r3, [r0, #8]
 8022d50:	8181      	strh	r1, [r0, #12]
 8022d52:	6643      	str	r3, [r0, #100]	@ 0x64
 8022d54:	81c2      	strh	r2, [r0, #14]
 8022d56:	6183      	str	r3, [r0, #24]
 8022d58:	4619      	mov	r1, r3
 8022d5a:	2208      	movs	r2, #8
 8022d5c:	305c      	adds	r0, #92	@ 0x5c
 8022d5e:	f7ff fa6c 	bl	802223a <memset>
 8022d62:	4b0d      	ldr	r3, [pc, #52]	@ (8022d98 <std+0x58>)
 8022d64:	6263      	str	r3, [r4, #36]	@ 0x24
 8022d66:	4b0d      	ldr	r3, [pc, #52]	@ (8022d9c <std+0x5c>)
 8022d68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8022da0 <std+0x60>)
 8022d6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8022da4 <std+0x64>)
 8022d70:	6323      	str	r3, [r4, #48]	@ 0x30
 8022d72:	4b0d      	ldr	r3, [pc, #52]	@ (8022da8 <std+0x68>)
 8022d74:	6224      	str	r4, [r4, #32]
 8022d76:	429c      	cmp	r4, r3
 8022d78:	d006      	beq.n	8022d88 <std+0x48>
 8022d7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022d7e:	4294      	cmp	r4, r2
 8022d80:	d002      	beq.n	8022d88 <std+0x48>
 8022d82:	33d0      	adds	r3, #208	@ 0xd0
 8022d84:	429c      	cmp	r4, r3
 8022d86:	d105      	bne.n	8022d94 <std+0x54>
 8022d88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d90:	f000 b9a4 	b.w	80230dc <__retarget_lock_init_recursive>
 8022d94:	bd10      	pop	{r4, pc}
 8022d96:	bf00      	nop
 8022d98:	08022ec5 	.word	0x08022ec5
 8022d9c:	08022ee7 	.word	0x08022ee7
 8022da0:	08022f1f 	.word	0x08022f1f
 8022da4:	08022f43 	.word	0x08022f43
 8022da8:	20002578 	.word	0x20002578

08022dac <stdio_exit_handler>:
 8022dac:	4a02      	ldr	r2, [pc, #8]	@ (8022db8 <stdio_exit_handler+0xc>)
 8022dae:	4903      	ldr	r1, [pc, #12]	@ (8022dbc <stdio_exit_handler+0x10>)
 8022db0:	4803      	ldr	r0, [pc, #12]	@ (8022dc0 <stdio_exit_handler+0x14>)
 8022db2:	f000 b869 	b.w	8022e88 <_fwalk_sglue>
 8022db6:	bf00      	nop
 8022db8:	2000002c 	.word	0x2000002c
 8022dbc:	08023429 	.word	0x08023429
 8022dc0:	2000003c 	.word	0x2000003c

08022dc4 <cleanup_stdio>:
 8022dc4:	6841      	ldr	r1, [r0, #4]
 8022dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8022df8 <cleanup_stdio+0x34>)
 8022dc8:	4299      	cmp	r1, r3
 8022dca:	b510      	push	{r4, lr}
 8022dcc:	4604      	mov	r4, r0
 8022dce:	d001      	beq.n	8022dd4 <cleanup_stdio+0x10>
 8022dd0:	f000 fb2a 	bl	8023428 <_fflush_r>
 8022dd4:	68a1      	ldr	r1, [r4, #8]
 8022dd6:	4b09      	ldr	r3, [pc, #36]	@ (8022dfc <cleanup_stdio+0x38>)
 8022dd8:	4299      	cmp	r1, r3
 8022dda:	d002      	beq.n	8022de2 <cleanup_stdio+0x1e>
 8022ddc:	4620      	mov	r0, r4
 8022dde:	f000 fb23 	bl	8023428 <_fflush_r>
 8022de2:	68e1      	ldr	r1, [r4, #12]
 8022de4:	4b06      	ldr	r3, [pc, #24]	@ (8022e00 <cleanup_stdio+0x3c>)
 8022de6:	4299      	cmp	r1, r3
 8022de8:	d004      	beq.n	8022df4 <cleanup_stdio+0x30>
 8022dea:	4620      	mov	r0, r4
 8022dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022df0:	f000 bb1a 	b.w	8023428 <_fflush_r>
 8022df4:	bd10      	pop	{r4, pc}
 8022df6:	bf00      	nop
 8022df8:	20002578 	.word	0x20002578
 8022dfc:	200025e0 	.word	0x200025e0
 8022e00:	20002648 	.word	0x20002648

08022e04 <global_stdio_init.part.0>:
 8022e04:	b510      	push	{r4, lr}
 8022e06:	4b0b      	ldr	r3, [pc, #44]	@ (8022e34 <global_stdio_init.part.0+0x30>)
 8022e08:	4c0b      	ldr	r4, [pc, #44]	@ (8022e38 <global_stdio_init.part.0+0x34>)
 8022e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8022e3c <global_stdio_init.part.0+0x38>)
 8022e0c:	601a      	str	r2, [r3, #0]
 8022e0e:	4620      	mov	r0, r4
 8022e10:	2200      	movs	r2, #0
 8022e12:	2104      	movs	r1, #4
 8022e14:	f7ff ff94 	bl	8022d40 <std>
 8022e18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022e1c:	2201      	movs	r2, #1
 8022e1e:	2109      	movs	r1, #9
 8022e20:	f7ff ff8e 	bl	8022d40 <std>
 8022e24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022e28:	2202      	movs	r2, #2
 8022e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022e2e:	2112      	movs	r1, #18
 8022e30:	f7ff bf86 	b.w	8022d40 <std>
 8022e34:	200026b0 	.word	0x200026b0
 8022e38:	20002578 	.word	0x20002578
 8022e3c:	08022dad 	.word	0x08022dad

08022e40 <__sfp_lock_acquire>:
 8022e40:	4801      	ldr	r0, [pc, #4]	@ (8022e48 <__sfp_lock_acquire+0x8>)
 8022e42:	f000 b94c 	b.w	80230de <__retarget_lock_acquire_recursive>
 8022e46:	bf00      	nop
 8022e48:	200026b9 	.word	0x200026b9

08022e4c <__sfp_lock_release>:
 8022e4c:	4801      	ldr	r0, [pc, #4]	@ (8022e54 <__sfp_lock_release+0x8>)
 8022e4e:	f000 b947 	b.w	80230e0 <__retarget_lock_release_recursive>
 8022e52:	bf00      	nop
 8022e54:	200026b9 	.word	0x200026b9

08022e58 <__sinit>:
 8022e58:	b510      	push	{r4, lr}
 8022e5a:	4604      	mov	r4, r0
 8022e5c:	f7ff fff0 	bl	8022e40 <__sfp_lock_acquire>
 8022e60:	6a23      	ldr	r3, [r4, #32]
 8022e62:	b11b      	cbz	r3, 8022e6c <__sinit+0x14>
 8022e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022e68:	f7ff bff0 	b.w	8022e4c <__sfp_lock_release>
 8022e6c:	4b04      	ldr	r3, [pc, #16]	@ (8022e80 <__sinit+0x28>)
 8022e6e:	6223      	str	r3, [r4, #32]
 8022e70:	4b04      	ldr	r3, [pc, #16]	@ (8022e84 <__sinit+0x2c>)
 8022e72:	681b      	ldr	r3, [r3, #0]
 8022e74:	2b00      	cmp	r3, #0
 8022e76:	d1f5      	bne.n	8022e64 <__sinit+0xc>
 8022e78:	f7ff ffc4 	bl	8022e04 <global_stdio_init.part.0>
 8022e7c:	e7f2      	b.n	8022e64 <__sinit+0xc>
 8022e7e:	bf00      	nop
 8022e80:	08022dc5 	.word	0x08022dc5
 8022e84:	200026b0 	.word	0x200026b0

08022e88 <_fwalk_sglue>:
 8022e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e8c:	4607      	mov	r7, r0
 8022e8e:	4688      	mov	r8, r1
 8022e90:	4614      	mov	r4, r2
 8022e92:	2600      	movs	r6, #0
 8022e94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022e98:	f1b9 0901 	subs.w	r9, r9, #1
 8022e9c:	d505      	bpl.n	8022eaa <_fwalk_sglue+0x22>
 8022e9e:	6824      	ldr	r4, [r4, #0]
 8022ea0:	2c00      	cmp	r4, #0
 8022ea2:	d1f7      	bne.n	8022e94 <_fwalk_sglue+0xc>
 8022ea4:	4630      	mov	r0, r6
 8022ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022eaa:	89ab      	ldrh	r3, [r5, #12]
 8022eac:	2b01      	cmp	r3, #1
 8022eae:	d907      	bls.n	8022ec0 <_fwalk_sglue+0x38>
 8022eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022eb4:	3301      	adds	r3, #1
 8022eb6:	d003      	beq.n	8022ec0 <_fwalk_sglue+0x38>
 8022eb8:	4629      	mov	r1, r5
 8022eba:	4638      	mov	r0, r7
 8022ebc:	47c0      	blx	r8
 8022ebe:	4306      	orrs	r6, r0
 8022ec0:	3568      	adds	r5, #104	@ 0x68
 8022ec2:	e7e9      	b.n	8022e98 <_fwalk_sglue+0x10>

08022ec4 <__sread>:
 8022ec4:	b510      	push	{r4, lr}
 8022ec6:	460c      	mov	r4, r1
 8022ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ecc:	f000 f8b8 	bl	8023040 <_read_r>
 8022ed0:	2800      	cmp	r0, #0
 8022ed2:	bfab      	itete	ge
 8022ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8022ed8:	181b      	addge	r3, r3, r0
 8022eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022ede:	bfac      	ite	ge
 8022ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022ee2:	81a3      	strhlt	r3, [r4, #12]
 8022ee4:	bd10      	pop	{r4, pc}

08022ee6 <__swrite>:
 8022ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022eea:	461f      	mov	r7, r3
 8022eec:	898b      	ldrh	r3, [r1, #12]
 8022eee:	05db      	lsls	r3, r3, #23
 8022ef0:	4605      	mov	r5, r0
 8022ef2:	460c      	mov	r4, r1
 8022ef4:	4616      	mov	r6, r2
 8022ef6:	d505      	bpl.n	8022f04 <__swrite+0x1e>
 8022ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022efc:	2302      	movs	r3, #2
 8022efe:	2200      	movs	r2, #0
 8022f00:	f000 f88c 	bl	802301c <_lseek_r>
 8022f04:	89a3      	ldrh	r3, [r4, #12]
 8022f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022f0e:	81a3      	strh	r3, [r4, #12]
 8022f10:	4632      	mov	r2, r6
 8022f12:	463b      	mov	r3, r7
 8022f14:	4628      	mov	r0, r5
 8022f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f1a:	f000 b8a3 	b.w	8023064 <_write_r>

08022f1e <__sseek>:
 8022f1e:	b510      	push	{r4, lr}
 8022f20:	460c      	mov	r4, r1
 8022f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f26:	f000 f879 	bl	802301c <_lseek_r>
 8022f2a:	1c43      	adds	r3, r0, #1
 8022f2c:	89a3      	ldrh	r3, [r4, #12]
 8022f2e:	bf15      	itete	ne
 8022f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022f3a:	81a3      	strheq	r3, [r4, #12]
 8022f3c:	bf18      	it	ne
 8022f3e:	81a3      	strhne	r3, [r4, #12]
 8022f40:	bd10      	pop	{r4, pc}

08022f42 <__sclose>:
 8022f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f46:	f000 b859 	b.w	8022ffc <_close_r>

08022f4a <memcmp>:
 8022f4a:	b510      	push	{r4, lr}
 8022f4c:	3901      	subs	r1, #1
 8022f4e:	4402      	add	r2, r0
 8022f50:	4290      	cmp	r0, r2
 8022f52:	d101      	bne.n	8022f58 <memcmp+0xe>
 8022f54:	2000      	movs	r0, #0
 8022f56:	e005      	b.n	8022f64 <memcmp+0x1a>
 8022f58:	7803      	ldrb	r3, [r0, #0]
 8022f5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022f5e:	42a3      	cmp	r3, r4
 8022f60:	d001      	beq.n	8022f66 <memcmp+0x1c>
 8022f62:	1b18      	subs	r0, r3, r4
 8022f64:	bd10      	pop	{r4, pc}
 8022f66:	3001      	adds	r0, #1
 8022f68:	e7f2      	b.n	8022f50 <memcmp+0x6>

08022f6a <memmove>:
 8022f6a:	4288      	cmp	r0, r1
 8022f6c:	b510      	push	{r4, lr}
 8022f6e:	eb01 0402 	add.w	r4, r1, r2
 8022f72:	d902      	bls.n	8022f7a <memmove+0x10>
 8022f74:	4284      	cmp	r4, r0
 8022f76:	4623      	mov	r3, r4
 8022f78:	d807      	bhi.n	8022f8a <memmove+0x20>
 8022f7a:	1e43      	subs	r3, r0, #1
 8022f7c:	42a1      	cmp	r1, r4
 8022f7e:	d008      	beq.n	8022f92 <memmove+0x28>
 8022f80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022f84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022f88:	e7f8      	b.n	8022f7c <memmove+0x12>
 8022f8a:	4402      	add	r2, r0
 8022f8c:	4601      	mov	r1, r0
 8022f8e:	428a      	cmp	r2, r1
 8022f90:	d100      	bne.n	8022f94 <memmove+0x2a>
 8022f92:	bd10      	pop	{r4, pc}
 8022f94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022f98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022f9c:	e7f7      	b.n	8022f8e <memmove+0x24>
	...

08022fa0 <strcasecmp>:
 8022fa0:	b530      	push	{r4, r5, lr}
 8022fa2:	4d0b      	ldr	r5, [pc, #44]	@ (8022fd0 <strcasecmp+0x30>)
 8022fa4:	4604      	mov	r4, r0
 8022fa6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022faa:	5cea      	ldrb	r2, [r5, r3]
 8022fac:	f002 0203 	and.w	r2, r2, #3
 8022fb0:	2a01      	cmp	r2, #1
 8022fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022fb6:	5ca8      	ldrb	r0, [r5, r2]
 8022fb8:	f000 0003 	and.w	r0, r0, #3
 8022fbc:	bf08      	it	eq
 8022fbe:	3320      	addeq	r3, #32
 8022fc0:	2801      	cmp	r0, #1
 8022fc2:	bf08      	it	eq
 8022fc4:	3220      	addeq	r2, #32
 8022fc6:	1a98      	subs	r0, r3, r2
 8022fc8:	d101      	bne.n	8022fce <strcasecmp+0x2e>
 8022fca:	2a00      	cmp	r2, #0
 8022fcc:	d1eb      	bne.n	8022fa6 <strcasecmp+0x6>
 8022fce:	bd30      	pop	{r4, r5, pc}
 8022fd0:	08027464 	.word	0x08027464

08022fd4 <strncpy>:
 8022fd4:	b510      	push	{r4, lr}
 8022fd6:	3901      	subs	r1, #1
 8022fd8:	4603      	mov	r3, r0
 8022fda:	b132      	cbz	r2, 8022fea <strncpy+0x16>
 8022fdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022fe0:	f803 4b01 	strb.w	r4, [r3], #1
 8022fe4:	3a01      	subs	r2, #1
 8022fe6:	2c00      	cmp	r4, #0
 8022fe8:	d1f7      	bne.n	8022fda <strncpy+0x6>
 8022fea:	441a      	add	r2, r3
 8022fec:	2100      	movs	r1, #0
 8022fee:	4293      	cmp	r3, r2
 8022ff0:	d100      	bne.n	8022ff4 <strncpy+0x20>
 8022ff2:	bd10      	pop	{r4, pc}
 8022ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8022ff8:	e7f9      	b.n	8022fee <strncpy+0x1a>
	...

08022ffc <_close_r>:
 8022ffc:	b538      	push	{r3, r4, r5, lr}
 8022ffe:	4d06      	ldr	r5, [pc, #24]	@ (8023018 <_close_r+0x1c>)
 8023000:	2300      	movs	r3, #0
 8023002:	4604      	mov	r4, r0
 8023004:	4608      	mov	r0, r1
 8023006:	602b      	str	r3, [r5, #0]
 8023008:	f7df fcb6 	bl	8002978 <_close>
 802300c:	1c43      	adds	r3, r0, #1
 802300e:	d102      	bne.n	8023016 <_close_r+0x1a>
 8023010:	682b      	ldr	r3, [r5, #0]
 8023012:	b103      	cbz	r3, 8023016 <_close_r+0x1a>
 8023014:	6023      	str	r3, [r4, #0]
 8023016:	bd38      	pop	{r3, r4, r5, pc}
 8023018:	200026b4 	.word	0x200026b4

0802301c <_lseek_r>:
 802301c:	b538      	push	{r3, r4, r5, lr}
 802301e:	4d07      	ldr	r5, [pc, #28]	@ (802303c <_lseek_r+0x20>)
 8023020:	4604      	mov	r4, r0
 8023022:	4608      	mov	r0, r1
 8023024:	4611      	mov	r1, r2
 8023026:	2200      	movs	r2, #0
 8023028:	602a      	str	r2, [r5, #0]
 802302a:	461a      	mov	r2, r3
 802302c:	f7df fccb 	bl	80029c6 <_lseek>
 8023030:	1c43      	adds	r3, r0, #1
 8023032:	d102      	bne.n	802303a <_lseek_r+0x1e>
 8023034:	682b      	ldr	r3, [r5, #0]
 8023036:	b103      	cbz	r3, 802303a <_lseek_r+0x1e>
 8023038:	6023      	str	r3, [r4, #0]
 802303a:	bd38      	pop	{r3, r4, r5, pc}
 802303c:	200026b4 	.word	0x200026b4

08023040 <_read_r>:
 8023040:	b538      	push	{r3, r4, r5, lr}
 8023042:	4d07      	ldr	r5, [pc, #28]	@ (8023060 <_read_r+0x20>)
 8023044:	4604      	mov	r4, r0
 8023046:	4608      	mov	r0, r1
 8023048:	4611      	mov	r1, r2
 802304a:	2200      	movs	r2, #0
 802304c:	602a      	str	r2, [r5, #0]
 802304e:	461a      	mov	r2, r3
 8023050:	f7df fc59 	bl	8002906 <_read>
 8023054:	1c43      	adds	r3, r0, #1
 8023056:	d102      	bne.n	802305e <_read_r+0x1e>
 8023058:	682b      	ldr	r3, [r5, #0]
 802305a:	b103      	cbz	r3, 802305e <_read_r+0x1e>
 802305c:	6023      	str	r3, [r4, #0]
 802305e:	bd38      	pop	{r3, r4, r5, pc}
 8023060:	200026b4 	.word	0x200026b4

08023064 <_write_r>:
 8023064:	b538      	push	{r3, r4, r5, lr}
 8023066:	4d07      	ldr	r5, [pc, #28]	@ (8023084 <_write_r+0x20>)
 8023068:	4604      	mov	r4, r0
 802306a:	4608      	mov	r0, r1
 802306c:	4611      	mov	r1, r2
 802306e:	2200      	movs	r2, #0
 8023070:	602a      	str	r2, [r5, #0]
 8023072:	461a      	mov	r2, r3
 8023074:	f7df fc64 	bl	8002940 <_write>
 8023078:	1c43      	adds	r3, r0, #1
 802307a:	d102      	bne.n	8023082 <_write_r+0x1e>
 802307c:	682b      	ldr	r3, [r5, #0]
 802307e:	b103      	cbz	r3, 8023082 <_write_r+0x1e>
 8023080:	6023      	str	r3, [r4, #0]
 8023082:	bd38      	pop	{r3, r4, r5, pc}
 8023084:	200026b4 	.word	0x200026b4

08023088 <__errno>:
 8023088:	4b01      	ldr	r3, [pc, #4]	@ (8023090 <__errno+0x8>)
 802308a:	6818      	ldr	r0, [r3, #0]
 802308c:	4770      	bx	lr
 802308e:	bf00      	nop
 8023090:	20000038 	.word	0x20000038

08023094 <__libc_init_array>:
 8023094:	b570      	push	{r4, r5, r6, lr}
 8023096:	4d0d      	ldr	r5, [pc, #52]	@ (80230cc <__libc_init_array+0x38>)
 8023098:	4c0d      	ldr	r4, [pc, #52]	@ (80230d0 <__libc_init_array+0x3c>)
 802309a:	1b64      	subs	r4, r4, r5
 802309c:	10a4      	asrs	r4, r4, #2
 802309e:	2600      	movs	r6, #0
 80230a0:	42a6      	cmp	r6, r4
 80230a2:	d109      	bne.n	80230b8 <__libc_init_array+0x24>
 80230a4:	4d0b      	ldr	r5, [pc, #44]	@ (80230d4 <__libc_init_array+0x40>)
 80230a6:	4c0c      	ldr	r4, [pc, #48]	@ (80230d8 <__libc_init_array+0x44>)
 80230a8:	f000 fe3a 	bl	8023d20 <_init>
 80230ac:	1b64      	subs	r4, r4, r5
 80230ae:	10a4      	asrs	r4, r4, #2
 80230b0:	2600      	movs	r6, #0
 80230b2:	42a6      	cmp	r6, r4
 80230b4:	d105      	bne.n	80230c2 <__libc_init_array+0x2e>
 80230b6:	bd70      	pop	{r4, r5, r6, pc}
 80230b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80230bc:	4798      	blx	r3
 80230be:	3601      	adds	r6, #1
 80230c0:	e7ee      	b.n	80230a0 <__libc_init_array+0xc>
 80230c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80230c6:	4798      	blx	r3
 80230c8:	3601      	adds	r6, #1
 80230ca:	e7f2      	b.n	80230b2 <__libc_init_array+0x1e>
 80230cc:	080275a0 	.word	0x080275a0
 80230d0:	080275a0 	.word	0x080275a0
 80230d4:	080275a0 	.word	0x080275a0
 80230d8:	080275a4 	.word	0x080275a4

080230dc <__retarget_lock_init_recursive>:
 80230dc:	4770      	bx	lr

080230de <__retarget_lock_acquire_recursive>:
 80230de:	4770      	bx	lr

080230e0 <__retarget_lock_release_recursive>:
 80230e0:	4770      	bx	lr
	...

080230e4 <__assert_func>:
 80230e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80230e6:	4614      	mov	r4, r2
 80230e8:	461a      	mov	r2, r3
 80230ea:	4b09      	ldr	r3, [pc, #36]	@ (8023110 <__assert_func+0x2c>)
 80230ec:	681b      	ldr	r3, [r3, #0]
 80230ee:	4605      	mov	r5, r0
 80230f0:	68d8      	ldr	r0, [r3, #12]
 80230f2:	b954      	cbnz	r4, 802310a <__assert_func+0x26>
 80230f4:	4b07      	ldr	r3, [pc, #28]	@ (8023114 <__assert_func+0x30>)
 80230f6:	461c      	mov	r4, r3
 80230f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80230fc:	9100      	str	r1, [sp, #0]
 80230fe:	462b      	mov	r3, r5
 8023100:	4905      	ldr	r1, [pc, #20]	@ (8023118 <__assert_func+0x34>)
 8023102:	f000 f9b9 	bl	8023478 <fiprintf>
 8023106:	f000 f9d9 	bl	80234bc <abort>
 802310a:	4b04      	ldr	r3, [pc, #16]	@ (802311c <__assert_func+0x38>)
 802310c:	e7f4      	b.n	80230f8 <__assert_func+0x14>
 802310e:	bf00      	nop
 8023110:	20000038 	.word	0x20000038
 8023114:	08027462 	.word	0x08027462
 8023118:	08027434 	.word	0x08027434
 802311c:	08027427 	.word	0x08027427

08023120 <_free_r>:
 8023120:	b538      	push	{r3, r4, r5, lr}
 8023122:	4605      	mov	r5, r0
 8023124:	2900      	cmp	r1, #0
 8023126:	d041      	beq.n	80231ac <_free_r+0x8c>
 8023128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802312c:	1f0c      	subs	r4, r1, #4
 802312e:	2b00      	cmp	r3, #0
 8023130:	bfb8      	it	lt
 8023132:	18e4      	addlt	r4, r4, r3
 8023134:	f000 f8e8 	bl	8023308 <__malloc_lock>
 8023138:	4a1d      	ldr	r2, [pc, #116]	@ (80231b0 <_free_r+0x90>)
 802313a:	6813      	ldr	r3, [r2, #0]
 802313c:	b933      	cbnz	r3, 802314c <_free_r+0x2c>
 802313e:	6063      	str	r3, [r4, #4]
 8023140:	6014      	str	r4, [r2, #0]
 8023142:	4628      	mov	r0, r5
 8023144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023148:	f000 b8e4 	b.w	8023314 <__malloc_unlock>
 802314c:	42a3      	cmp	r3, r4
 802314e:	d908      	bls.n	8023162 <_free_r+0x42>
 8023150:	6820      	ldr	r0, [r4, #0]
 8023152:	1821      	adds	r1, r4, r0
 8023154:	428b      	cmp	r3, r1
 8023156:	bf01      	itttt	eq
 8023158:	6819      	ldreq	r1, [r3, #0]
 802315a:	685b      	ldreq	r3, [r3, #4]
 802315c:	1809      	addeq	r1, r1, r0
 802315e:	6021      	streq	r1, [r4, #0]
 8023160:	e7ed      	b.n	802313e <_free_r+0x1e>
 8023162:	461a      	mov	r2, r3
 8023164:	685b      	ldr	r3, [r3, #4]
 8023166:	b10b      	cbz	r3, 802316c <_free_r+0x4c>
 8023168:	42a3      	cmp	r3, r4
 802316a:	d9fa      	bls.n	8023162 <_free_r+0x42>
 802316c:	6811      	ldr	r1, [r2, #0]
 802316e:	1850      	adds	r0, r2, r1
 8023170:	42a0      	cmp	r0, r4
 8023172:	d10b      	bne.n	802318c <_free_r+0x6c>
 8023174:	6820      	ldr	r0, [r4, #0]
 8023176:	4401      	add	r1, r0
 8023178:	1850      	adds	r0, r2, r1
 802317a:	4283      	cmp	r3, r0
 802317c:	6011      	str	r1, [r2, #0]
 802317e:	d1e0      	bne.n	8023142 <_free_r+0x22>
 8023180:	6818      	ldr	r0, [r3, #0]
 8023182:	685b      	ldr	r3, [r3, #4]
 8023184:	6053      	str	r3, [r2, #4]
 8023186:	4408      	add	r0, r1
 8023188:	6010      	str	r0, [r2, #0]
 802318a:	e7da      	b.n	8023142 <_free_r+0x22>
 802318c:	d902      	bls.n	8023194 <_free_r+0x74>
 802318e:	230c      	movs	r3, #12
 8023190:	602b      	str	r3, [r5, #0]
 8023192:	e7d6      	b.n	8023142 <_free_r+0x22>
 8023194:	6820      	ldr	r0, [r4, #0]
 8023196:	1821      	adds	r1, r4, r0
 8023198:	428b      	cmp	r3, r1
 802319a:	bf04      	itt	eq
 802319c:	6819      	ldreq	r1, [r3, #0]
 802319e:	685b      	ldreq	r3, [r3, #4]
 80231a0:	6063      	str	r3, [r4, #4]
 80231a2:	bf04      	itt	eq
 80231a4:	1809      	addeq	r1, r1, r0
 80231a6:	6021      	streq	r1, [r4, #0]
 80231a8:	6054      	str	r4, [r2, #4]
 80231aa:	e7ca      	b.n	8023142 <_free_r+0x22>
 80231ac:	bd38      	pop	{r3, r4, r5, pc}
 80231ae:	bf00      	nop
 80231b0:	200026c0 	.word	0x200026c0

080231b4 <malloc>:
 80231b4:	4b02      	ldr	r3, [pc, #8]	@ (80231c0 <malloc+0xc>)
 80231b6:	4601      	mov	r1, r0
 80231b8:	6818      	ldr	r0, [r3, #0]
 80231ba:	f000 b825 	b.w	8023208 <_malloc_r>
 80231be:	bf00      	nop
 80231c0:	20000038 	.word	0x20000038

080231c4 <sbrk_aligned>:
 80231c4:	b570      	push	{r4, r5, r6, lr}
 80231c6:	4e0f      	ldr	r6, [pc, #60]	@ (8023204 <sbrk_aligned+0x40>)
 80231c8:	460c      	mov	r4, r1
 80231ca:	6831      	ldr	r1, [r6, #0]
 80231cc:	4605      	mov	r5, r0
 80231ce:	b911      	cbnz	r1, 80231d6 <sbrk_aligned+0x12>
 80231d0:	f000 f964 	bl	802349c <_sbrk_r>
 80231d4:	6030      	str	r0, [r6, #0]
 80231d6:	4621      	mov	r1, r4
 80231d8:	4628      	mov	r0, r5
 80231da:	f000 f95f 	bl	802349c <_sbrk_r>
 80231de:	1c43      	adds	r3, r0, #1
 80231e0:	d103      	bne.n	80231ea <sbrk_aligned+0x26>
 80231e2:	f04f 34ff 	mov.w	r4, #4294967295
 80231e6:	4620      	mov	r0, r4
 80231e8:	bd70      	pop	{r4, r5, r6, pc}
 80231ea:	1cc4      	adds	r4, r0, #3
 80231ec:	f024 0403 	bic.w	r4, r4, #3
 80231f0:	42a0      	cmp	r0, r4
 80231f2:	d0f8      	beq.n	80231e6 <sbrk_aligned+0x22>
 80231f4:	1a21      	subs	r1, r4, r0
 80231f6:	4628      	mov	r0, r5
 80231f8:	f000 f950 	bl	802349c <_sbrk_r>
 80231fc:	3001      	adds	r0, #1
 80231fe:	d1f2      	bne.n	80231e6 <sbrk_aligned+0x22>
 8023200:	e7ef      	b.n	80231e2 <sbrk_aligned+0x1e>
 8023202:	bf00      	nop
 8023204:	200026bc 	.word	0x200026bc

08023208 <_malloc_r>:
 8023208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802320c:	1ccd      	adds	r5, r1, #3
 802320e:	f025 0503 	bic.w	r5, r5, #3
 8023212:	3508      	adds	r5, #8
 8023214:	2d0c      	cmp	r5, #12
 8023216:	bf38      	it	cc
 8023218:	250c      	movcc	r5, #12
 802321a:	2d00      	cmp	r5, #0
 802321c:	4606      	mov	r6, r0
 802321e:	db01      	blt.n	8023224 <_malloc_r+0x1c>
 8023220:	42a9      	cmp	r1, r5
 8023222:	d904      	bls.n	802322e <_malloc_r+0x26>
 8023224:	230c      	movs	r3, #12
 8023226:	6033      	str	r3, [r6, #0]
 8023228:	2000      	movs	r0, #0
 802322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802322e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023304 <_malloc_r+0xfc>
 8023232:	f000 f869 	bl	8023308 <__malloc_lock>
 8023236:	f8d8 3000 	ldr.w	r3, [r8]
 802323a:	461c      	mov	r4, r3
 802323c:	bb44      	cbnz	r4, 8023290 <_malloc_r+0x88>
 802323e:	4629      	mov	r1, r5
 8023240:	4630      	mov	r0, r6
 8023242:	f7ff ffbf 	bl	80231c4 <sbrk_aligned>
 8023246:	1c43      	adds	r3, r0, #1
 8023248:	4604      	mov	r4, r0
 802324a:	d158      	bne.n	80232fe <_malloc_r+0xf6>
 802324c:	f8d8 4000 	ldr.w	r4, [r8]
 8023250:	4627      	mov	r7, r4
 8023252:	2f00      	cmp	r7, #0
 8023254:	d143      	bne.n	80232de <_malloc_r+0xd6>
 8023256:	2c00      	cmp	r4, #0
 8023258:	d04b      	beq.n	80232f2 <_malloc_r+0xea>
 802325a:	6823      	ldr	r3, [r4, #0]
 802325c:	4639      	mov	r1, r7
 802325e:	4630      	mov	r0, r6
 8023260:	eb04 0903 	add.w	r9, r4, r3
 8023264:	f000 f91a 	bl	802349c <_sbrk_r>
 8023268:	4581      	cmp	r9, r0
 802326a:	d142      	bne.n	80232f2 <_malloc_r+0xea>
 802326c:	6821      	ldr	r1, [r4, #0]
 802326e:	1a6d      	subs	r5, r5, r1
 8023270:	4629      	mov	r1, r5
 8023272:	4630      	mov	r0, r6
 8023274:	f7ff ffa6 	bl	80231c4 <sbrk_aligned>
 8023278:	3001      	adds	r0, #1
 802327a:	d03a      	beq.n	80232f2 <_malloc_r+0xea>
 802327c:	6823      	ldr	r3, [r4, #0]
 802327e:	442b      	add	r3, r5
 8023280:	6023      	str	r3, [r4, #0]
 8023282:	f8d8 3000 	ldr.w	r3, [r8]
 8023286:	685a      	ldr	r2, [r3, #4]
 8023288:	bb62      	cbnz	r2, 80232e4 <_malloc_r+0xdc>
 802328a:	f8c8 7000 	str.w	r7, [r8]
 802328e:	e00f      	b.n	80232b0 <_malloc_r+0xa8>
 8023290:	6822      	ldr	r2, [r4, #0]
 8023292:	1b52      	subs	r2, r2, r5
 8023294:	d420      	bmi.n	80232d8 <_malloc_r+0xd0>
 8023296:	2a0b      	cmp	r2, #11
 8023298:	d917      	bls.n	80232ca <_malloc_r+0xc2>
 802329a:	1961      	adds	r1, r4, r5
 802329c:	42a3      	cmp	r3, r4
 802329e:	6025      	str	r5, [r4, #0]
 80232a0:	bf18      	it	ne
 80232a2:	6059      	strne	r1, [r3, #4]
 80232a4:	6863      	ldr	r3, [r4, #4]
 80232a6:	bf08      	it	eq
 80232a8:	f8c8 1000 	streq.w	r1, [r8]
 80232ac:	5162      	str	r2, [r4, r5]
 80232ae:	604b      	str	r3, [r1, #4]
 80232b0:	4630      	mov	r0, r6
 80232b2:	f000 f82f 	bl	8023314 <__malloc_unlock>
 80232b6:	f104 000b 	add.w	r0, r4, #11
 80232ba:	1d23      	adds	r3, r4, #4
 80232bc:	f020 0007 	bic.w	r0, r0, #7
 80232c0:	1ac2      	subs	r2, r0, r3
 80232c2:	bf1c      	itt	ne
 80232c4:	1a1b      	subne	r3, r3, r0
 80232c6:	50a3      	strne	r3, [r4, r2]
 80232c8:	e7af      	b.n	802322a <_malloc_r+0x22>
 80232ca:	6862      	ldr	r2, [r4, #4]
 80232cc:	42a3      	cmp	r3, r4
 80232ce:	bf0c      	ite	eq
 80232d0:	f8c8 2000 	streq.w	r2, [r8]
 80232d4:	605a      	strne	r2, [r3, #4]
 80232d6:	e7eb      	b.n	80232b0 <_malloc_r+0xa8>
 80232d8:	4623      	mov	r3, r4
 80232da:	6864      	ldr	r4, [r4, #4]
 80232dc:	e7ae      	b.n	802323c <_malloc_r+0x34>
 80232de:	463c      	mov	r4, r7
 80232e0:	687f      	ldr	r7, [r7, #4]
 80232e2:	e7b6      	b.n	8023252 <_malloc_r+0x4a>
 80232e4:	461a      	mov	r2, r3
 80232e6:	685b      	ldr	r3, [r3, #4]
 80232e8:	42a3      	cmp	r3, r4
 80232ea:	d1fb      	bne.n	80232e4 <_malloc_r+0xdc>
 80232ec:	2300      	movs	r3, #0
 80232ee:	6053      	str	r3, [r2, #4]
 80232f0:	e7de      	b.n	80232b0 <_malloc_r+0xa8>
 80232f2:	230c      	movs	r3, #12
 80232f4:	6033      	str	r3, [r6, #0]
 80232f6:	4630      	mov	r0, r6
 80232f8:	f000 f80c 	bl	8023314 <__malloc_unlock>
 80232fc:	e794      	b.n	8023228 <_malloc_r+0x20>
 80232fe:	6005      	str	r5, [r0, #0]
 8023300:	e7d6      	b.n	80232b0 <_malloc_r+0xa8>
 8023302:	bf00      	nop
 8023304:	200026c0 	.word	0x200026c0

08023308 <__malloc_lock>:
 8023308:	4801      	ldr	r0, [pc, #4]	@ (8023310 <__malloc_lock+0x8>)
 802330a:	f7ff bee8 	b.w	80230de <__retarget_lock_acquire_recursive>
 802330e:	bf00      	nop
 8023310:	200026b8 	.word	0x200026b8

08023314 <__malloc_unlock>:
 8023314:	4801      	ldr	r0, [pc, #4]	@ (802331c <__malloc_unlock+0x8>)
 8023316:	f7ff bee3 	b.w	80230e0 <__retarget_lock_release_recursive>
 802331a:	bf00      	nop
 802331c:	200026b8 	.word	0x200026b8

08023320 <__sflush_r>:
 8023320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023328:	0716      	lsls	r6, r2, #28
 802332a:	4605      	mov	r5, r0
 802332c:	460c      	mov	r4, r1
 802332e:	d454      	bmi.n	80233da <__sflush_r+0xba>
 8023330:	684b      	ldr	r3, [r1, #4]
 8023332:	2b00      	cmp	r3, #0
 8023334:	dc02      	bgt.n	802333c <__sflush_r+0x1c>
 8023336:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023338:	2b00      	cmp	r3, #0
 802333a:	dd48      	ble.n	80233ce <__sflush_r+0xae>
 802333c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802333e:	2e00      	cmp	r6, #0
 8023340:	d045      	beq.n	80233ce <__sflush_r+0xae>
 8023342:	2300      	movs	r3, #0
 8023344:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023348:	682f      	ldr	r7, [r5, #0]
 802334a:	6a21      	ldr	r1, [r4, #32]
 802334c:	602b      	str	r3, [r5, #0]
 802334e:	d030      	beq.n	80233b2 <__sflush_r+0x92>
 8023350:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023352:	89a3      	ldrh	r3, [r4, #12]
 8023354:	0759      	lsls	r1, r3, #29
 8023356:	d505      	bpl.n	8023364 <__sflush_r+0x44>
 8023358:	6863      	ldr	r3, [r4, #4]
 802335a:	1ad2      	subs	r2, r2, r3
 802335c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802335e:	b10b      	cbz	r3, 8023364 <__sflush_r+0x44>
 8023360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023362:	1ad2      	subs	r2, r2, r3
 8023364:	2300      	movs	r3, #0
 8023366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023368:	6a21      	ldr	r1, [r4, #32]
 802336a:	4628      	mov	r0, r5
 802336c:	47b0      	blx	r6
 802336e:	1c43      	adds	r3, r0, #1
 8023370:	89a3      	ldrh	r3, [r4, #12]
 8023372:	d106      	bne.n	8023382 <__sflush_r+0x62>
 8023374:	6829      	ldr	r1, [r5, #0]
 8023376:	291d      	cmp	r1, #29
 8023378:	d82b      	bhi.n	80233d2 <__sflush_r+0xb2>
 802337a:	4a2a      	ldr	r2, [pc, #168]	@ (8023424 <__sflush_r+0x104>)
 802337c:	410a      	asrs	r2, r1
 802337e:	07d6      	lsls	r6, r2, #31
 8023380:	d427      	bmi.n	80233d2 <__sflush_r+0xb2>
 8023382:	2200      	movs	r2, #0
 8023384:	6062      	str	r2, [r4, #4]
 8023386:	04d9      	lsls	r1, r3, #19
 8023388:	6922      	ldr	r2, [r4, #16]
 802338a:	6022      	str	r2, [r4, #0]
 802338c:	d504      	bpl.n	8023398 <__sflush_r+0x78>
 802338e:	1c42      	adds	r2, r0, #1
 8023390:	d101      	bne.n	8023396 <__sflush_r+0x76>
 8023392:	682b      	ldr	r3, [r5, #0]
 8023394:	b903      	cbnz	r3, 8023398 <__sflush_r+0x78>
 8023396:	6560      	str	r0, [r4, #84]	@ 0x54
 8023398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802339a:	602f      	str	r7, [r5, #0]
 802339c:	b1b9      	cbz	r1, 80233ce <__sflush_r+0xae>
 802339e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80233a2:	4299      	cmp	r1, r3
 80233a4:	d002      	beq.n	80233ac <__sflush_r+0x8c>
 80233a6:	4628      	mov	r0, r5
 80233a8:	f7ff feba 	bl	8023120 <_free_r>
 80233ac:	2300      	movs	r3, #0
 80233ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80233b0:	e00d      	b.n	80233ce <__sflush_r+0xae>
 80233b2:	2301      	movs	r3, #1
 80233b4:	4628      	mov	r0, r5
 80233b6:	47b0      	blx	r6
 80233b8:	4602      	mov	r2, r0
 80233ba:	1c50      	adds	r0, r2, #1
 80233bc:	d1c9      	bne.n	8023352 <__sflush_r+0x32>
 80233be:	682b      	ldr	r3, [r5, #0]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	d0c6      	beq.n	8023352 <__sflush_r+0x32>
 80233c4:	2b1d      	cmp	r3, #29
 80233c6:	d001      	beq.n	80233cc <__sflush_r+0xac>
 80233c8:	2b16      	cmp	r3, #22
 80233ca:	d11e      	bne.n	802340a <__sflush_r+0xea>
 80233cc:	602f      	str	r7, [r5, #0]
 80233ce:	2000      	movs	r0, #0
 80233d0:	e022      	b.n	8023418 <__sflush_r+0xf8>
 80233d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80233d6:	b21b      	sxth	r3, r3
 80233d8:	e01b      	b.n	8023412 <__sflush_r+0xf2>
 80233da:	690f      	ldr	r7, [r1, #16]
 80233dc:	2f00      	cmp	r7, #0
 80233de:	d0f6      	beq.n	80233ce <__sflush_r+0xae>
 80233e0:	0793      	lsls	r3, r2, #30
 80233e2:	680e      	ldr	r6, [r1, #0]
 80233e4:	bf08      	it	eq
 80233e6:	694b      	ldreq	r3, [r1, #20]
 80233e8:	600f      	str	r7, [r1, #0]
 80233ea:	bf18      	it	ne
 80233ec:	2300      	movne	r3, #0
 80233ee:	eba6 0807 	sub.w	r8, r6, r7
 80233f2:	608b      	str	r3, [r1, #8]
 80233f4:	f1b8 0f00 	cmp.w	r8, #0
 80233f8:	dde9      	ble.n	80233ce <__sflush_r+0xae>
 80233fa:	6a21      	ldr	r1, [r4, #32]
 80233fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80233fe:	4643      	mov	r3, r8
 8023400:	463a      	mov	r2, r7
 8023402:	4628      	mov	r0, r5
 8023404:	47b0      	blx	r6
 8023406:	2800      	cmp	r0, #0
 8023408:	dc08      	bgt.n	802341c <__sflush_r+0xfc>
 802340a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802340e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023412:	81a3      	strh	r3, [r4, #12]
 8023414:	f04f 30ff 	mov.w	r0, #4294967295
 8023418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802341c:	4407      	add	r7, r0
 802341e:	eba8 0800 	sub.w	r8, r8, r0
 8023422:	e7e7      	b.n	80233f4 <__sflush_r+0xd4>
 8023424:	dfbffffe 	.word	0xdfbffffe

08023428 <_fflush_r>:
 8023428:	b538      	push	{r3, r4, r5, lr}
 802342a:	690b      	ldr	r3, [r1, #16]
 802342c:	4605      	mov	r5, r0
 802342e:	460c      	mov	r4, r1
 8023430:	b913      	cbnz	r3, 8023438 <_fflush_r+0x10>
 8023432:	2500      	movs	r5, #0
 8023434:	4628      	mov	r0, r5
 8023436:	bd38      	pop	{r3, r4, r5, pc}
 8023438:	b118      	cbz	r0, 8023442 <_fflush_r+0x1a>
 802343a:	6a03      	ldr	r3, [r0, #32]
 802343c:	b90b      	cbnz	r3, 8023442 <_fflush_r+0x1a>
 802343e:	f7ff fd0b 	bl	8022e58 <__sinit>
 8023442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023446:	2b00      	cmp	r3, #0
 8023448:	d0f3      	beq.n	8023432 <_fflush_r+0xa>
 802344a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802344c:	07d0      	lsls	r0, r2, #31
 802344e:	d404      	bmi.n	802345a <_fflush_r+0x32>
 8023450:	0599      	lsls	r1, r3, #22
 8023452:	d402      	bmi.n	802345a <_fflush_r+0x32>
 8023454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023456:	f7ff fe42 	bl	80230de <__retarget_lock_acquire_recursive>
 802345a:	4628      	mov	r0, r5
 802345c:	4621      	mov	r1, r4
 802345e:	f7ff ff5f 	bl	8023320 <__sflush_r>
 8023462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023464:	07da      	lsls	r2, r3, #31
 8023466:	4605      	mov	r5, r0
 8023468:	d4e4      	bmi.n	8023434 <_fflush_r+0xc>
 802346a:	89a3      	ldrh	r3, [r4, #12]
 802346c:	059b      	lsls	r3, r3, #22
 802346e:	d4e1      	bmi.n	8023434 <_fflush_r+0xc>
 8023470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023472:	f7ff fe35 	bl	80230e0 <__retarget_lock_release_recursive>
 8023476:	e7dd      	b.n	8023434 <_fflush_r+0xc>

08023478 <fiprintf>:
 8023478:	b40e      	push	{r1, r2, r3}
 802347a:	b503      	push	{r0, r1, lr}
 802347c:	4601      	mov	r1, r0
 802347e:	ab03      	add	r3, sp, #12
 8023480:	4805      	ldr	r0, [pc, #20]	@ (8023498 <fiprintf+0x20>)
 8023482:	f853 2b04 	ldr.w	r2, [r3], #4
 8023486:	6800      	ldr	r0, [r0, #0]
 8023488:	9301      	str	r3, [sp, #4]
 802348a:	f000 f847 	bl	802351c <_vfiprintf_r>
 802348e:	b002      	add	sp, #8
 8023490:	f85d eb04 	ldr.w	lr, [sp], #4
 8023494:	b003      	add	sp, #12
 8023496:	4770      	bx	lr
 8023498:	20000038 	.word	0x20000038

0802349c <_sbrk_r>:
 802349c:	b538      	push	{r3, r4, r5, lr}
 802349e:	4d06      	ldr	r5, [pc, #24]	@ (80234b8 <_sbrk_r+0x1c>)
 80234a0:	2300      	movs	r3, #0
 80234a2:	4604      	mov	r4, r0
 80234a4:	4608      	mov	r0, r1
 80234a6:	602b      	str	r3, [r5, #0]
 80234a8:	f7df fa9a 	bl	80029e0 <_sbrk>
 80234ac:	1c43      	adds	r3, r0, #1
 80234ae:	d102      	bne.n	80234b6 <_sbrk_r+0x1a>
 80234b0:	682b      	ldr	r3, [r5, #0]
 80234b2:	b103      	cbz	r3, 80234b6 <_sbrk_r+0x1a>
 80234b4:	6023      	str	r3, [r4, #0]
 80234b6:	bd38      	pop	{r3, r4, r5, pc}
 80234b8:	200026b4 	.word	0x200026b4

080234bc <abort>:
 80234bc:	b508      	push	{r3, lr}
 80234be:	2006      	movs	r0, #6
 80234c0:	f000 fb8e 	bl	8023be0 <raise>
 80234c4:	2001      	movs	r0, #1
 80234c6:	f7df fa13 	bl	80028f0 <_exit>

080234ca <__sfputc_r>:
 80234ca:	6893      	ldr	r3, [r2, #8]
 80234cc:	3b01      	subs	r3, #1
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	b410      	push	{r4}
 80234d2:	6093      	str	r3, [r2, #8]
 80234d4:	da08      	bge.n	80234e8 <__sfputc_r+0x1e>
 80234d6:	6994      	ldr	r4, [r2, #24]
 80234d8:	42a3      	cmp	r3, r4
 80234da:	db01      	blt.n	80234e0 <__sfputc_r+0x16>
 80234dc:	290a      	cmp	r1, #10
 80234de:	d103      	bne.n	80234e8 <__sfputc_r+0x1e>
 80234e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234e4:	f000 bac0 	b.w	8023a68 <__swbuf_r>
 80234e8:	6813      	ldr	r3, [r2, #0]
 80234ea:	1c58      	adds	r0, r3, #1
 80234ec:	6010      	str	r0, [r2, #0]
 80234ee:	7019      	strb	r1, [r3, #0]
 80234f0:	4608      	mov	r0, r1
 80234f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234f6:	4770      	bx	lr

080234f8 <__sfputs_r>:
 80234f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234fa:	4606      	mov	r6, r0
 80234fc:	460f      	mov	r7, r1
 80234fe:	4614      	mov	r4, r2
 8023500:	18d5      	adds	r5, r2, r3
 8023502:	42ac      	cmp	r4, r5
 8023504:	d101      	bne.n	802350a <__sfputs_r+0x12>
 8023506:	2000      	movs	r0, #0
 8023508:	e007      	b.n	802351a <__sfputs_r+0x22>
 802350a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802350e:	463a      	mov	r2, r7
 8023510:	4630      	mov	r0, r6
 8023512:	f7ff ffda 	bl	80234ca <__sfputc_r>
 8023516:	1c43      	adds	r3, r0, #1
 8023518:	d1f3      	bne.n	8023502 <__sfputs_r+0xa>
 802351a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802351c <_vfiprintf_r>:
 802351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023520:	460d      	mov	r5, r1
 8023522:	b09d      	sub	sp, #116	@ 0x74
 8023524:	4614      	mov	r4, r2
 8023526:	4698      	mov	r8, r3
 8023528:	4606      	mov	r6, r0
 802352a:	b118      	cbz	r0, 8023534 <_vfiprintf_r+0x18>
 802352c:	6a03      	ldr	r3, [r0, #32]
 802352e:	b90b      	cbnz	r3, 8023534 <_vfiprintf_r+0x18>
 8023530:	f7ff fc92 	bl	8022e58 <__sinit>
 8023534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023536:	07d9      	lsls	r1, r3, #31
 8023538:	d405      	bmi.n	8023546 <_vfiprintf_r+0x2a>
 802353a:	89ab      	ldrh	r3, [r5, #12]
 802353c:	059a      	lsls	r2, r3, #22
 802353e:	d402      	bmi.n	8023546 <_vfiprintf_r+0x2a>
 8023540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023542:	f7ff fdcc 	bl	80230de <__retarget_lock_acquire_recursive>
 8023546:	89ab      	ldrh	r3, [r5, #12]
 8023548:	071b      	lsls	r3, r3, #28
 802354a:	d501      	bpl.n	8023550 <_vfiprintf_r+0x34>
 802354c:	692b      	ldr	r3, [r5, #16]
 802354e:	b99b      	cbnz	r3, 8023578 <_vfiprintf_r+0x5c>
 8023550:	4629      	mov	r1, r5
 8023552:	4630      	mov	r0, r6
 8023554:	f000 fac6 	bl	8023ae4 <__swsetup_r>
 8023558:	b170      	cbz	r0, 8023578 <_vfiprintf_r+0x5c>
 802355a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802355c:	07dc      	lsls	r4, r3, #31
 802355e:	d504      	bpl.n	802356a <_vfiprintf_r+0x4e>
 8023560:	f04f 30ff 	mov.w	r0, #4294967295
 8023564:	b01d      	add	sp, #116	@ 0x74
 8023566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802356a:	89ab      	ldrh	r3, [r5, #12]
 802356c:	0598      	lsls	r0, r3, #22
 802356e:	d4f7      	bmi.n	8023560 <_vfiprintf_r+0x44>
 8023570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023572:	f7ff fdb5 	bl	80230e0 <__retarget_lock_release_recursive>
 8023576:	e7f3      	b.n	8023560 <_vfiprintf_r+0x44>
 8023578:	2300      	movs	r3, #0
 802357a:	9309      	str	r3, [sp, #36]	@ 0x24
 802357c:	2320      	movs	r3, #32
 802357e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023582:	f8cd 800c 	str.w	r8, [sp, #12]
 8023586:	2330      	movs	r3, #48	@ 0x30
 8023588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023738 <_vfiprintf_r+0x21c>
 802358c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023590:	f04f 0901 	mov.w	r9, #1
 8023594:	4623      	mov	r3, r4
 8023596:	469a      	mov	sl, r3
 8023598:	f813 2b01 	ldrb.w	r2, [r3], #1
 802359c:	b10a      	cbz	r2, 80235a2 <_vfiprintf_r+0x86>
 802359e:	2a25      	cmp	r2, #37	@ 0x25
 80235a0:	d1f9      	bne.n	8023596 <_vfiprintf_r+0x7a>
 80235a2:	ebba 0b04 	subs.w	fp, sl, r4
 80235a6:	d00b      	beq.n	80235c0 <_vfiprintf_r+0xa4>
 80235a8:	465b      	mov	r3, fp
 80235aa:	4622      	mov	r2, r4
 80235ac:	4629      	mov	r1, r5
 80235ae:	4630      	mov	r0, r6
 80235b0:	f7ff ffa2 	bl	80234f8 <__sfputs_r>
 80235b4:	3001      	adds	r0, #1
 80235b6:	f000 80a7 	beq.w	8023708 <_vfiprintf_r+0x1ec>
 80235ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80235bc:	445a      	add	r2, fp
 80235be:	9209      	str	r2, [sp, #36]	@ 0x24
 80235c0:	f89a 3000 	ldrb.w	r3, [sl]
 80235c4:	2b00      	cmp	r3, #0
 80235c6:	f000 809f 	beq.w	8023708 <_vfiprintf_r+0x1ec>
 80235ca:	2300      	movs	r3, #0
 80235cc:	f04f 32ff 	mov.w	r2, #4294967295
 80235d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80235d4:	f10a 0a01 	add.w	sl, sl, #1
 80235d8:	9304      	str	r3, [sp, #16]
 80235da:	9307      	str	r3, [sp, #28]
 80235dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80235e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80235e2:	4654      	mov	r4, sl
 80235e4:	2205      	movs	r2, #5
 80235e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235ea:	4853      	ldr	r0, [pc, #332]	@ (8023738 <_vfiprintf_r+0x21c>)
 80235ec:	f7dc fe90 	bl	8000310 <memchr>
 80235f0:	9a04      	ldr	r2, [sp, #16]
 80235f2:	b9d8      	cbnz	r0, 802362c <_vfiprintf_r+0x110>
 80235f4:	06d1      	lsls	r1, r2, #27
 80235f6:	bf44      	itt	mi
 80235f8:	2320      	movmi	r3, #32
 80235fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80235fe:	0713      	lsls	r3, r2, #28
 8023600:	bf44      	itt	mi
 8023602:	232b      	movmi	r3, #43	@ 0x2b
 8023604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023608:	f89a 3000 	ldrb.w	r3, [sl]
 802360c:	2b2a      	cmp	r3, #42	@ 0x2a
 802360e:	d015      	beq.n	802363c <_vfiprintf_r+0x120>
 8023610:	9a07      	ldr	r2, [sp, #28]
 8023612:	4654      	mov	r4, sl
 8023614:	2000      	movs	r0, #0
 8023616:	f04f 0c0a 	mov.w	ip, #10
 802361a:	4621      	mov	r1, r4
 802361c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023620:	3b30      	subs	r3, #48	@ 0x30
 8023622:	2b09      	cmp	r3, #9
 8023624:	d94b      	bls.n	80236be <_vfiprintf_r+0x1a2>
 8023626:	b1b0      	cbz	r0, 8023656 <_vfiprintf_r+0x13a>
 8023628:	9207      	str	r2, [sp, #28]
 802362a:	e014      	b.n	8023656 <_vfiprintf_r+0x13a>
 802362c:	eba0 0308 	sub.w	r3, r0, r8
 8023630:	fa09 f303 	lsl.w	r3, r9, r3
 8023634:	4313      	orrs	r3, r2
 8023636:	9304      	str	r3, [sp, #16]
 8023638:	46a2      	mov	sl, r4
 802363a:	e7d2      	b.n	80235e2 <_vfiprintf_r+0xc6>
 802363c:	9b03      	ldr	r3, [sp, #12]
 802363e:	1d19      	adds	r1, r3, #4
 8023640:	681b      	ldr	r3, [r3, #0]
 8023642:	9103      	str	r1, [sp, #12]
 8023644:	2b00      	cmp	r3, #0
 8023646:	bfbb      	ittet	lt
 8023648:	425b      	neglt	r3, r3
 802364a:	f042 0202 	orrlt.w	r2, r2, #2
 802364e:	9307      	strge	r3, [sp, #28]
 8023650:	9307      	strlt	r3, [sp, #28]
 8023652:	bfb8      	it	lt
 8023654:	9204      	strlt	r2, [sp, #16]
 8023656:	7823      	ldrb	r3, [r4, #0]
 8023658:	2b2e      	cmp	r3, #46	@ 0x2e
 802365a:	d10a      	bne.n	8023672 <_vfiprintf_r+0x156>
 802365c:	7863      	ldrb	r3, [r4, #1]
 802365e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023660:	d132      	bne.n	80236c8 <_vfiprintf_r+0x1ac>
 8023662:	9b03      	ldr	r3, [sp, #12]
 8023664:	1d1a      	adds	r2, r3, #4
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	9203      	str	r2, [sp, #12]
 802366a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802366e:	3402      	adds	r4, #2
 8023670:	9305      	str	r3, [sp, #20]
 8023672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023748 <_vfiprintf_r+0x22c>
 8023676:	7821      	ldrb	r1, [r4, #0]
 8023678:	2203      	movs	r2, #3
 802367a:	4650      	mov	r0, sl
 802367c:	f7dc fe48 	bl	8000310 <memchr>
 8023680:	b138      	cbz	r0, 8023692 <_vfiprintf_r+0x176>
 8023682:	9b04      	ldr	r3, [sp, #16]
 8023684:	eba0 000a 	sub.w	r0, r0, sl
 8023688:	2240      	movs	r2, #64	@ 0x40
 802368a:	4082      	lsls	r2, r0
 802368c:	4313      	orrs	r3, r2
 802368e:	3401      	adds	r4, #1
 8023690:	9304      	str	r3, [sp, #16]
 8023692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023696:	4829      	ldr	r0, [pc, #164]	@ (802373c <_vfiprintf_r+0x220>)
 8023698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802369c:	2206      	movs	r2, #6
 802369e:	f7dc fe37 	bl	8000310 <memchr>
 80236a2:	2800      	cmp	r0, #0
 80236a4:	d03f      	beq.n	8023726 <_vfiprintf_r+0x20a>
 80236a6:	4b26      	ldr	r3, [pc, #152]	@ (8023740 <_vfiprintf_r+0x224>)
 80236a8:	bb1b      	cbnz	r3, 80236f2 <_vfiprintf_r+0x1d6>
 80236aa:	9b03      	ldr	r3, [sp, #12]
 80236ac:	3307      	adds	r3, #7
 80236ae:	f023 0307 	bic.w	r3, r3, #7
 80236b2:	3308      	adds	r3, #8
 80236b4:	9303      	str	r3, [sp, #12]
 80236b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236b8:	443b      	add	r3, r7
 80236ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80236bc:	e76a      	b.n	8023594 <_vfiprintf_r+0x78>
 80236be:	fb0c 3202 	mla	r2, ip, r2, r3
 80236c2:	460c      	mov	r4, r1
 80236c4:	2001      	movs	r0, #1
 80236c6:	e7a8      	b.n	802361a <_vfiprintf_r+0xfe>
 80236c8:	2300      	movs	r3, #0
 80236ca:	3401      	adds	r4, #1
 80236cc:	9305      	str	r3, [sp, #20]
 80236ce:	4619      	mov	r1, r3
 80236d0:	f04f 0c0a 	mov.w	ip, #10
 80236d4:	4620      	mov	r0, r4
 80236d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80236da:	3a30      	subs	r2, #48	@ 0x30
 80236dc:	2a09      	cmp	r2, #9
 80236de:	d903      	bls.n	80236e8 <_vfiprintf_r+0x1cc>
 80236e0:	2b00      	cmp	r3, #0
 80236e2:	d0c6      	beq.n	8023672 <_vfiprintf_r+0x156>
 80236e4:	9105      	str	r1, [sp, #20]
 80236e6:	e7c4      	b.n	8023672 <_vfiprintf_r+0x156>
 80236e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80236ec:	4604      	mov	r4, r0
 80236ee:	2301      	movs	r3, #1
 80236f0:	e7f0      	b.n	80236d4 <_vfiprintf_r+0x1b8>
 80236f2:	ab03      	add	r3, sp, #12
 80236f4:	9300      	str	r3, [sp, #0]
 80236f6:	462a      	mov	r2, r5
 80236f8:	4b12      	ldr	r3, [pc, #72]	@ (8023744 <_vfiprintf_r+0x228>)
 80236fa:	a904      	add	r1, sp, #16
 80236fc:	4630      	mov	r0, r6
 80236fe:	f3af 8000 	nop.w
 8023702:	4607      	mov	r7, r0
 8023704:	1c78      	adds	r0, r7, #1
 8023706:	d1d6      	bne.n	80236b6 <_vfiprintf_r+0x19a>
 8023708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802370a:	07d9      	lsls	r1, r3, #31
 802370c:	d405      	bmi.n	802371a <_vfiprintf_r+0x1fe>
 802370e:	89ab      	ldrh	r3, [r5, #12]
 8023710:	059a      	lsls	r2, r3, #22
 8023712:	d402      	bmi.n	802371a <_vfiprintf_r+0x1fe>
 8023714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023716:	f7ff fce3 	bl	80230e0 <__retarget_lock_release_recursive>
 802371a:	89ab      	ldrh	r3, [r5, #12]
 802371c:	065b      	lsls	r3, r3, #25
 802371e:	f53f af1f 	bmi.w	8023560 <_vfiprintf_r+0x44>
 8023722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023724:	e71e      	b.n	8023564 <_vfiprintf_r+0x48>
 8023726:	ab03      	add	r3, sp, #12
 8023728:	9300      	str	r3, [sp, #0]
 802372a:	462a      	mov	r2, r5
 802372c:	4b05      	ldr	r3, [pc, #20]	@ (8023744 <_vfiprintf_r+0x228>)
 802372e:	a904      	add	r1, sp, #16
 8023730:	4630      	mov	r0, r6
 8023732:	f000 f879 	bl	8023828 <_printf_i>
 8023736:	e7e4      	b.n	8023702 <_vfiprintf_r+0x1e6>
 8023738:	08027564 	.word	0x08027564
 802373c:	0802756e 	.word	0x0802756e
 8023740:	00000000 	.word	0x00000000
 8023744:	080234f9 	.word	0x080234f9
 8023748:	0802756a 	.word	0x0802756a

0802374c <_printf_common>:
 802374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023750:	4616      	mov	r6, r2
 8023752:	4698      	mov	r8, r3
 8023754:	688a      	ldr	r2, [r1, #8]
 8023756:	690b      	ldr	r3, [r1, #16]
 8023758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802375c:	4293      	cmp	r3, r2
 802375e:	bfb8      	it	lt
 8023760:	4613      	movlt	r3, r2
 8023762:	6033      	str	r3, [r6, #0]
 8023764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023768:	4607      	mov	r7, r0
 802376a:	460c      	mov	r4, r1
 802376c:	b10a      	cbz	r2, 8023772 <_printf_common+0x26>
 802376e:	3301      	adds	r3, #1
 8023770:	6033      	str	r3, [r6, #0]
 8023772:	6823      	ldr	r3, [r4, #0]
 8023774:	0699      	lsls	r1, r3, #26
 8023776:	bf42      	ittt	mi
 8023778:	6833      	ldrmi	r3, [r6, #0]
 802377a:	3302      	addmi	r3, #2
 802377c:	6033      	strmi	r3, [r6, #0]
 802377e:	6825      	ldr	r5, [r4, #0]
 8023780:	f015 0506 	ands.w	r5, r5, #6
 8023784:	d106      	bne.n	8023794 <_printf_common+0x48>
 8023786:	f104 0a19 	add.w	sl, r4, #25
 802378a:	68e3      	ldr	r3, [r4, #12]
 802378c:	6832      	ldr	r2, [r6, #0]
 802378e:	1a9b      	subs	r3, r3, r2
 8023790:	42ab      	cmp	r3, r5
 8023792:	dc26      	bgt.n	80237e2 <_printf_common+0x96>
 8023794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023798:	6822      	ldr	r2, [r4, #0]
 802379a:	3b00      	subs	r3, #0
 802379c:	bf18      	it	ne
 802379e:	2301      	movne	r3, #1
 80237a0:	0692      	lsls	r2, r2, #26
 80237a2:	d42b      	bmi.n	80237fc <_printf_common+0xb0>
 80237a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80237a8:	4641      	mov	r1, r8
 80237aa:	4638      	mov	r0, r7
 80237ac:	47c8      	blx	r9
 80237ae:	3001      	adds	r0, #1
 80237b0:	d01e      	beq.n	80237f0 <_printf_common+0xa4>
 80237b2:	6823      	ldr	r3, [r4, #0]
 80237b4:	6922      	ldr	r2, [r4, #16]
 80237b6:	f003 0306 	and.w	r3, r3, #6
 80237ba:	2b04      	cmp	r3, #4
 80237bc:	bf02      	ittt	eq
 80237be:	68e5      	ldreq	r5, [r4, #12]
 80237c0:	6833      	ldreq	r3, [r6, #0]
 80237c2:	1aed      	subeq	r5, r5, r3
 80237c4:	68a3      	ldr	r3, [r4, #8]
 80237c6:	bf0c      	ite	eq
 80237c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80237cc:	2500      	movne	r5, #0
 80237ce:	4293      	cmp	r3, r2
 80237d0:	bfc4      	itt	gt
 80237d2:	1a9b      	subgt	r3, r3, r2
 80237d4:	18ed      	addgt	r5, r5, r3
 80237d6:	2600      	movs	r6, #0
 80237d8:	341a      	adds	r4, #26
 80237da:	42b5      	cmp	r5, r6
 80237dc:	d11a      	bne.n	8023814 <_printf_common+0xc8>
 80237de:	2000      	movs	r0, #0
 80237e0:	e008      	b.n	80237f4 <_printf_common+0xa8>
 80237e2:	2301      	movs	r3, #1
 80237e4:	4652      	mov	r2, sl
 80237e6:	4641      	mov	r1, r8
 80237e8:	4638      	mov	r0, r7
 80237ea:	47c8      	blx	r9
 80237ec:	3001      	adds	r0, #1
 80237ee:	d103      	bne.n	80237f8 <_printf_common+0xac>
 80237f0:	f04f 30ff 	mov.w	r0, #4294967295
 80237f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237f8:	3501      	adds	r5, #1
 80237fa:	e7c6      	b.n	802378a <_printf_common+0x3e>
 80237fc:	18e1      	adds	r1, r4, r3
 80237fe:	1c5a      	adds	r2, r3, #1
 8023800:	2030      	movs	r0, #48	@ 0x30
 8023802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023806:	4422      	add	r2, r4
 8023808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802380c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023810:	3302      	adds	r3, #2
 8023812:	e7c7      	b.n	80237a4 <_printf_common+0x58>
 8023814:	2301      	movs	r3, #1
 8023816:	4622      	mov	r2, r4
 8023818:	4641      	mov	r1, r8
 802381a:	4638      	mov	r0, r7
 802381c:	47c8      	blx	r9
 802381e:	3001      	adds	r0, #1
 8023820:	d0e6      	beq.n	80237f0 <_printf_common+0xa4>
 8023822:	3601      	adds	r6, #1
 8023824:	e7d9      	b.n	80237da <_printf_common+0x8e>
	...

08023828 <_printf_i>:
 8023828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802382c:	7e0f      	ldrb	r7, [r1, #24]
 802382e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023830:	2f78      	cmp	r7, #120	@ 0x78
 8023832:	4691      	mov	r9, r2
 8023834:	4680      	mov	r8, r0
 8023836:	460c      	mov	r4, r1
 8023838:	469a      	mov	sl, r3
 802383a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802383e:	d807      	bhi.n	8023850 <_printf_i+0x28>
 8023840:	2f62      	cmp	r7, #98	@ 0x62
 8023842:	d80a      	bhi.n	802385a <_printf_i+0x32>
 8023844:	2f00      	cmp	r7, #0
 8023846:	f000 80d2 	beq.w	80239ee <_printf_i+0x1c6>
 802384a:	2f58      	cmp	r7, #88	@ 0x58
 802384c:	f000 80b9 	beq.w	80239c2 <_printf_i+0x19a>
 8023850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023858:	e03a      	b.n	80238d0 <_printf_i+0xa8>
 802385a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802385e:	2b15      	cmp	r3, #21
 8023860:	d8f6      	bhi.n	8023850 <_printf_i+0x28>
 8023862:	a101      	add	r1, pc, #4	@ (adr r1, 8023868 <_printf_i+0x40>)
 8023864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023868:	080238c1 	.word	0x080238c1
 802386c:	080238d5 	.word	0x080238d5
 8023870:	08023851 	.word	0x08023851
 8023874:	08023851 	.word	0x08023851
 8023878:	08023851 	.word	0x08023851
 802387c:	08023851 	.word	0x08023851
 8023880:	080238d5 	.word	0x080238d5
 8023884:	08023851 	.word	0x08023851
 8023888:	08023851 	.word	0x08023851
 802388c:	08023851 	.word	0x08023851
 8023890:	08023851 	.word	0x08023851
 8023894:	080239d5 	.word	0x080239d5
 8023898:	080238ff 	.word	0x080238ff
 802389c:	0802398f 	.word	0x0802398f
 80238a0:	08023851 	.word	0x08023851
 80238a4:	08023851 	.word	0x08023851
 80238a8:	080239f7 	.word	0x080239f7
 80238ac:	08023851 	.word	0x08023851
 80238b0:	080238ff 	.word	0x080238ff
 80238b4:	08023851 	.word	0x08023851
 80238b8:	08023851 	.word	0x08023851
 80238bc:	08023997 	.word	0x08023997
 80238c0:	6833      	ldr	r3, [r6, #0]
 80238c2:	1d1a      	adds	r2, r3, #4
 80238c4:	681b      	ldr	r3, [r3, #0]
 80238c6:	6032      	str	r2, [r6, #0]
 80238c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80238cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80238d0:	2301      	movs	r3, #1
 80238d2:	e09d      	b.n	8023a10 <_printf_i+0x1e8>
 80238d4:	6833      	ldr	r3, [r6, #0]
 80238d6:	6820      	ldr	r0, [r4, #0]
 80238d8:	1d19      	adds	r1, r3, #4
 80238da:	6031      	str	r1, [r6, #0]
 80238dc:	0606      	lsls	r6, r0, #24
 80238de:	d501      	bpl.n	80238e4 <_printf_i+0xbc>
 80238e0:	681d      	ldr	r5, [r3, #0]
 80238e2:	e003      	b.n	80238ec <_printf_i+0xc4>
 80238e4:	0645      	lsls	r5, r0, #25
 80238e6:	d5fb      	bpl.n	80238e0 <_printf_i+0xb8>
 80238e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80238ec:	2d00      	cmp	r5, #0
 80238ee:	da03      	bge.n	80238f8 <_printf_i+0xd0>
 80238f0:	232d      	movs	r3, #45	@ 0x2d
 80238f2:	426d      	negs	r5, r5
 80238f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80238f8:	4859      	ldr	r0, [pc, #356]	@ (8023a60 <_printf_i+0x238>)
 80238fa:	230a      	movs	r3, #10
 80238fc:	e011      	b.n	8023922 <_printf_i+0xfa>
 80238fe:	6821      	ldr	r1, [r4, #0]
 8023900:	6833      	ldr	r3, [r6, #0]
 8023902:	0608      	lsls	r0, r1, #24
 8023904:	f853 5b04 	ldr.w	r5, [r3], #4
 8023908:	d402      	bmi.n	8023910 <_printf_i+0xe8>
 802390a:	0649      	lsls	r1, r1, #25
 802390c:	bf48      	it	mi
 802390e:	b2ad      	uxthmi	r5, r5
 8023910:	2f6f      	cmp	r7, #111	@ 0x6f
 8023912:	4853      	ldr	r0, [pc, #332]	@ (8023a60 <_printf_i+0x238>)
 8023914:	6033      	str	r3, [r6, #0]
 8023916:	bf14      	ite	ne
 8023918:	230a      	movne	r3, #10
 802391a:	2308      	moveq	r3, #8
 802391c:	2100      	movs	r1, #0
 802391e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023922:	6866      	ldr	r6, [r4, #4]
 8023924:	60a6      	str	r6, [r4, #8]
 8023926:	2e00      	cmp	r6, #0
 8023928:	bfa2      	ittt	ge
 802392a:	6821      	ldrge	r1, [r4, #0]
 802392c:	f021 0104 	bicge.w	r1, r1, #4
 8023930:	6021      	strge	r1, [r4, #0]
 8023932:	b90d      	cbnz	r5, 8023938 <_printf_i+0x110>
 8023934:	2e00      	cmp	r6, #0
 8023936:	d04b      	beq.n	80239d0 <_printf_i+0x1a8>
 8023938:	4616      	mov	r6, r2
 802393a:	fbb5 f1f3 	udiv	r1, r5, r3
 802393e:	fb03 5711 	mls	r7, r3, r1, r5
 8023942:	5dc7      	ldrb	r7, [r0, r7]
 8023944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023948:	462f      	mov	r7, r5
 802394a:	42bb      	cmp	r3, r7
 802394c:	460d      	mov	r5, r1
 802394e:	d9f4      	bls.n	802393a <_printf_i+0x112>
 8023950:	2b08      	cmp	r3, #8
 8023952:	d10b      	bne.n	802396c <_printf_i+0x144>
 8023954:	6823      	ldr	r3, [r4, #0]
 8023956:	07df      	lsls	r7, r3, #31
 8023958:	d508      	bpl.n	802396c <_printf_i+0x144>
 802395a:	6923      	ldr	r3, [r4, #16]
 802395c:	6861      	ldr	r1, [r4, #4]
 802395e:	4299      	cmp	r1, r3
 8023960:	bfde      	ittt	le
 8023962:	2330      	movle	r3, #48	@ 0x30
 8023964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023968:	f106 36ff 	addle.w	r6, r6, #4294967295
 802396c:	1b92      	subs	r2, r2, r6
 802396e:	6122      	str	r2, [r4, #16]
 8023970:	f8cd a000 	str.w	sl, [sp]
 8023974:	464b      	mov	r3, r9
 8023976:	aa03      	add	r2, sp, #12
 8023978:	4621      	mov	r1, r4
 802397a:	4640      	mov	r0, r8
 802397c:	f7ff fee6 	bl	802374c <_printf_common>
 8023980:	3001      	adds	r0, #1
 8023982:	d14a      	bne.n	8023a1a <_printf_i+0x1f2>
 8023984:	f04f 30ff 	mov.w	r0, #4294967295
 8023988:	b004      	add	sp, #16
 802398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802398e:	6823      	ldr	r3, [r4, #0]
 8023990:	f043 0320 	orr.w	r3, r3, #32
 8023994:	6023      	str	r3, [r4, #0]
 8023996:	4833      	ldr	r0, [pc, #204]	@ (8023a64 <_printf_i+0x23c>)
 8023998:	2778      	movs	r7, #120	@ 0x78
 802399a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802399e:	6823      	ldr	r3, [r4, #0]
 80239a0:	6831      	ldr	r1, [r6, #0]
 80239a2:	061f      	lsls	r7, r3, #24
 80239a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80239a8:	d402      	bmi.n	80239b0 <_printf_i+0x188>
 80239aa:	065f      	lsls	r7, r3, #25
 80239ac:	bf48      	it	mi
 80239ae:	b2ad      	uxthmi	r5, r5
 80239b0:	6031      	str	r1, [r6, #0]
 80239b2:	07d9      	lsls	r1, r3, #31
 80239b4:	bf44      	itt	mi
 80239b6:	f043 0320 	orrmi.w	r3, r3, #32
 80239ba:	6023      	strmi	r3, [r4, #0]
 80239bc:	b11d      	cbz	r5, 80239c6 <_printf_i+0x19e>
 80239be:	2310      	movs	r3, #16
 80239c0:	e7ac      	b.n	802391c <_printf_i+0xf4>
 80239c2:	4827      	ldr	r0, [pc, #156]	@ (8023a60 <_printf_i+0x238>)
 80239c4:	e7e9      	b.n	802399a <_printf_i+0x172>
 80239c6:	6823      	ldr	r3, [r4, #0]
 80239c8:	f023 0320 	bic.w	r3, r3, #32
 80239cc:	6023      	str	r3, [r4, #0]
 80239ce:	e7f6      	b.n	80239be <_printf_i+0x196>
 80239d0:	4616      	mov	r6, r2
 80239d2:	e7bd      	b.n	8023950 <_printf_i+0x128>
 80239d4:	6833      	ldr	r3, [r6, #0]
 80239d6:	6825      	ldr	r5, [r4, #0]
 80239d8:	6961      	ldr	r1, [r4, #20]
 80239da:	1d18      	adds	r0, r3, #4
 80239dc:	6030      	str	r0, [r6, #0]
 80239de:	062e      	lsls	r6, r5, #24
 80239e0:	681b      	ldr	r3, [r3, #0]
 80239e2:	d501      	bpl.n	80239e8 <_printf_i+0x1c0>
 80239e4:	6019      	str	r1, [r3, #0]
 80239e6:	e002      	b.n	80239ee <_printf_i+0x1c6>
 80239e8:	0668      	lsls	r0, r5, #25
 80239ea:	d5fb      	bpl.n	80239e4 <_printf_i+0x1bc>
 80239ec:	8019      	strh	r1, [r3, #0]
 80239ee:	2300      	movs	r3, #0
 80239f0:	6123      	str	r3, [r4, #16]
 80239f2:	4616      	mov	r6, r2
 80239f4:	e7bc      	b.n	8023970 <_printf_i+0x148>
 80239f6:	6833      	ldr	r3, [r6, #0]
 80239f8:	1d1a      	adds	r2, r3, #4
 80239fa:	6032      	str	r2, [r6, #0]
 80239fc:	681e      	ldr	r6, [r3, #0]
 80239fe:	6862      	ldr	r2, [r4, #4]
 8023a00:	2100      	movs	r1, #0
 8023a02:	4630      	mov	r0, r6
 8023a04:	f7dc fc84 	bl	8000310 <memchr>
 8023a08:	b108      	cbz	r0, 8023a0e <_printf_i+0x1e6>
 8023a0a:	1b80      	subs	r0, r0, r6
 8023a0c:	6060      	str	r0, [r4, #4]
 8023a0e:	6863      	ldr	r3, [r4, #4]
 8023a10:	6123      	str	r3, [r4, #16]
 8023a12:	2300      	movs	r3, #0
 8023a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023a18:	e7aa      	b.n	8023970 <_printf_i+0x148>
 8023a1a:	6923      	ldr	r3, [r4, #16]
 8023a1c:	4632      	mov	r2, r6
 8023a1e:	4649      	mov	r1, r9
 8023a20:	4640      	mov	r0, r8
 8023a22:	47d0      	blx	sl
 8023a24:	3001      	adds	r0, #1
 8023a26:	d0ad      	beq.n	8023984 <_printf_i+0x15c>
 8023a28:	6823      	ldr	r3, [r4, #0]
 8023a2a:	079b      	lsls	r3, r3, #30
 8023a2c:	d413      	bmi.n	8023a56 <_printf_i+0x22e>
 8023a2e:	68e0      	ldr	r0, [r4, #12]
 8023a30:	9b03      	ldr	r3, [sp, #12]
 8023a32:	4298      	cmp	r0, r3
 8023a34:	bfb8      	it	lt
 8023a36:	4618      	movlt	r0, r3
 8023a38:	e7a6      	b.n	8023988 <_printf_i+0x160>
 8023a3a:	2301      	movs	r3, #1
 8023a3c:	4632      	mov	r2, r6
 8023a3e:	4649      	mov	r1, r9
 8023a40:	4640      	mov	r0, r8
 8023a42:	47d0      	blx	sl
 8023a44:	3001      	adds	r0, #1
 8023a46:	d09d      	beq.n	8023984 <_printf_i+0x15c>
 8023a48:	3501      	adds	r5, #1
 8023a4a:	68e3      	ldr	r3, [r4, #12]
 8023a4c:	9903      	ldr	r1, [sp, #12]
 8023a4e:	1a5b      	subs	r3, r3, r1
 8023a50:	42ab      	cmp	r3, r5
 8023a52:	dcf2      	bgt.n	8023a3a <_printf_i+0x212>
 8023a54:	e7eb      	b.n	8023a2e <_printf_i+0x206>
 8023a56:	2500      	movs	r5, #0
 8023a58:	f104 0619 	add.w	r6, r4, #25
 8023a5c:	e7f5      	b.n	8023a4a <_printf_i+0x222>
 8023a5e:	bf00      	nop
 8023a60:	08027575 	.word	0x08027575
 8023a64:	08027586 	.word	0x08027586

08023a68 <__swbuf_r>:
 8023a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a6a:	460e      	mov	r6, r1
 8023a6c:	4614      	mov	r4, r2
 8023a6e:	4605      	mov	r5, r0
 8023a70:	b118      	cbz	r0, 8023a7a <__swbuf_r+0x12>
 8023a72:	6a03      	ldr	r3, [r0, #32]
 8023a74:	b90b      	cbnz	r3, 8023a7a <__swbuf_r+0x12>
 8023a76:	f7ff f9ef 	bl	8022e58 <__sinit>
 8023a7a:	69a3      	ldr	r3, [r4, #24]
 8023a7c:	60a3      	str	r3, [r4, #8]
 8023a7e:	89a3      	ldrh	r3, [r4, #12]
 8023a80:	071a      	lsls	r2, r3, #28
 8023a82:	d501      	bpl.n	8023a88 <__swbuf_r+0x20>
 8023a84:	6923      	ldr	r3, [r4, #16]
 8023a86:	b943      	cbnz	r3, 8023a9a <__swbuf_r+0x32>
 8023a88:	4621      	mov	r1, r4
 8023a8a:	4628      	mov	r0, r5
 8023a8c:	f000 f82a 	bl	8023ae4 <__swsetup_r>
 8023a90:	b118      	cbz	r0, 8023a9a <__swbuf_r+0x32>
 8023a92:	f04f 37ff 	mov.w	r7, #4294967295
 8023a96:	4638      	mov	r0, r7
 8023a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a9a:	6823      	ldr	r3, [r4, #0]
 8023a9c:	6922      	ldr	r2, [r4, #16]
 8023a9e:	1a98      	subs	r0, r3, r2
 8023aa0:	6963      	ldr	r3, [r4, #20]
 8023aa2:	b2f6      	uxtb	r6, r6
 8023aa4:	4283      	cmp	r3, r0
 8023aa6:	4637      	mov	r7, r6
 8023aa8:	dc05      	bgt.n	8023ab6 <__swbuf_r+0x4e>
 8023aaa:	4621      	mov	r1, r4
 8023aac:	4628      	mov	r0, r5
 8023aae:	f7ff fcbb 	bl	8023428 <_fflush_r>
 8023ab2:	2800      	cmp	r0, #0
 8023ab4:	d1ed      	bne.n	8023a92 <__swbuf_r+0x2a>
 8023ab6:	68a3      	ldr	r3, [r4, #8]
 8023ab8:	3b01      	subs	r3, #1
 8023aba:	60a3      	str	r3, [r4, #8]
 8023abc:	6823      	ldr	r3, [r4, #0]
 8023abe:	1c5a      	adds	r2, r3, #1
 8023ac0:	6022      	str	r2, [r4, #0]
 8023ac2:	701e      	strb	r6, [r3, #0]
 8023ac4:	6962      	ldr	r2, [r4, #20]
 8023ac6:	1c43      	adds	r3, r0, #1
 8023ac8:	429a      	cmp	r2, r3
 8023aca:	d004      	beq.n	8023ad6 <__swbuf_r+0x6e>
 8023acc:	89a3      	ldrh	r3, [r4, #12]
 8023ace:	07db      	lsls	r3, r3, #31
 8023ad0:	d5e1      	bpl.n	8023a96 <__swbuf_r+0x2e>
 8023ad2:	2e0a      	cmp	r6, #10
 8023ad4:	d1df      	bne.n	8023a96 <__swbuf_r+0x2e>
 8023ad6:	4621      	mov	r1, r4
 8023ad8:	4628      	mov	r0, r5
 8023ada:	f7ff fca5 	bl	8023428 <_fflush_r>
 8023ade:	2800      	cmp	r0, #0
 8023ae0:	d0d9      	beq.n	8023a96 <__swbuf_r+0x2e>
 8023ae2:	e7d6      	b.n	8023a92 <__swbuf_r+0x2a>

08023ae4 <__swsetup_r>:
 8023ae4:	b538      	push	{r3, r4, r5, lr}
 8023ae6:	4b29      	ldr	r3, [pc, #164]	@ (8023b8c <__swsetup_r+0xa8>)
 8023ae8:	4605      	mov	r5, r0
 8023aea:	6818      	ldr	r0, [r3, #0]
 8023aec:	460c      	mov	r4, r1
 8023aee:	b118      	cbz	r0, 8023af8 <__swsetup_r+0x14>
 8023af0:	6a03      	ldr	r3, [r0, #32]
 8023af2:	b90b      	cbnz	r3, 8023af8 <__swsetup_r+0x14>
 8023af4:	f7ff f9b0 	bl	8022e58 <__sinit>
 8023af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023afc:	0719      	lsls	r1, r3, #28
 8023afe:	d422      	bmi.n	8023b46 <__swsetup_r+0x62>
 8023b00:	06da      	lsls	r2, r3, #27
 8023b02:	d407      	bmi.n	8023b14 <__swsetup_r+0x30>
 8023b04:	2209      	movs	r2, #9
 8023b06:	602a      	str	r2, [r5, #0]
 8023b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023b0c:	81a3      	strh	r3, [r4, #12]
 8023b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8023b12:	e033      	b.n	8023b7c <__swsetup_r+0x98>
 8023b14:	0758      	lsls	r0, r3, #29
 8023b16:	d512      	bpl.n	8023b3e <__swsetup_r+0x5a>
 8023b18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023b1a:	b141      	cbz	r1, 8023b2e <__swsetup_r+0x4a>
 8023b1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023b20:	4299      	cmp	r1, r3
 8023b22:	d002      	beq.n	8023b2a <__swsetup_r+0x46>
 8023b24:	4628      	mov	r0, r5
 8023b26:	f7ff fafb 	bl	8023120 <_free_r>
 8023b2a:	2300      	movs	r3, #0
 8023b2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8023b2e:	89a3      	ldrh	r3, [r4, #12]
 8023b30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023b34:	81a3      	strh	r3, [r4, #12]
 8023b36:	2300      	movs	r3, #0
 8023b38:	6063      	str	r3, [r4, #4]
 8023b3a:	6923      	ldr	r3, [r4, #16]
 8023b3c:	6023      	str	r3, [r4, #0]
 8023b3e:	89a3      	ldrh	r3, [r4, #12]
 8023b40:	f043 0308 	orr.w	r3, r3, #8
 8023b44:	81a3      	strh	r3, [r4, #12]
 8023b46:	6923      	ldr	r3, [r4, #16]
 8023b48:	b94b      	cbnz	r3, 8023b5e <__swsetup_r+0x7a>
 8023b4a:	89a3      	ldrh	r3, [r4, #12]
 8023b4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023b54:	d003      	beq.n	8023b5e <__swsetup_r+0x7a>
 8023b56:	4621      	mov	r1, r4
 8023b58:	4628      	mov	r0, r5
 8023b5a:	f000 f883 	bl	8023c64 <__smakebuf_r>
 8023b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b62:	f013 0201 	ands.w	r2, r3, #1
 8023b66:	d00a      	beq.n	8023b7e <__swsetup_r+0x9a>
 8023b68:	2200      	movs	r2, #0
 8023b6a:	60a2      	str	r2, [r4, #8]
 8023b6c:	6962      	ldr	r2, [r4, #20]
 8023b6e:	4252      	negs	r2, r2
 8023b70:	61a2      	str	r2, [r4, #24]
 8023b72:	6922      	ldr	r2, [r4, #16]
 8023b74:	b942      	cbnz	r2, 8023b88 <__swsetup_r+0xa4>
 8023b76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023b7a:	d1c5      	bne.n	8023b08 <__swsetup_r+0x24>
 8023b7c:	bd38      	pop	{r3, r4, r5, pc}
 8023b7e:	0799      	lsls	r1, r3, #30
 8023b80:	bf58      	it	pl
 8023b82:	6962      	ldrpl	r2, [r4, #20]
 8023b84:	60a2      	str	r2, [r4, #8]
 8023b86:	e7f4      	b.n	8023b72 <__swsetup_r+0x8e>
 8023b88:	2000      	movs	r0, #0
 8023b8a:	e7f7      	b.n	8023b7c <__swsetup_r+0x98>
 8023b8c:	20000038 	.word	0x20000038

08023b90 <_raise_r>:
 8023b90:	291f      	cmp	r1, #31
 8023b92:	b538      	push	{r3, r4, r5, lr}
 8023b94:	4605      	mov	r5, r0
 8023b96:	460c      	mov	r4, r1
 8023b98:	d904      	bls.n	8023ba4 <_raise_r+0x14>
 8023b9a:	2316      	movs	r3, #22
 8023b9c:	6003      	str	r3, [r0, #0]
 8023b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8023ba2:	bd38      	pop	{r3, r4, r5, pc}
 8023ba4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023ba6:	b112      	cbz	r2, 8023bae <_raise_r+0x1e>
 8023ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023bac:	b94b      	cbnz	r3, 8023bc2 <_raise_r+0x32>
 8023bae:	4628      	mov	r0, r5
 8023bb0:	f000 f830 	bl	8023c14 <_getpid_r>
 8023bb4:	4622      	mov	r2, r4
 8023bb6:	4601      	mov	r1, r0
 8023bb8:	4628      	mov	r0, r5
 8023bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023bbe:	f000 b817 	b.w	8023bf0 <_kill_r>
 8023bc2:	2b01      	cmp	r3, #1
 8023bc4:	d00a      	beq.n	8023bdc <_raise_r+0x4c>
 8023bc6:	1c59      	adds	r1, r3, #1
 8023bc8:	d103      	bne.n	8023bd2 <_raise_r+0x42>
 8023bca:	2316      	movs	r3, #22
 8023bcc:	6003      	str	r3, [r0, #0]
 8023bce:	2001      	movs	r0, #1
 8023bd0:	e7e7      	b.n	8023ba2 <_raise_r+0x12>
 8023bd2:	2100      	movs	r1, #0
 8023bd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023bd8:	4620      	mov	r0, r4
 8023bda:	4798      	blx	r3
 8023bdc:	2000      	movs	r0, #0
 8023bde:	e7e0      	b.n	8023ba2 <_raise_r+0x12>

08023be0 <raise>:
 8023be0:	4b02      	ldr	r3, [pc, #8]	@ (8023bec <raise+0xc>)
 8023be2:	4601      	mov	r1, r0
 8023be4:	6818      	ldr	r0, [r3, #0]
 8023be6:	f7ff bfd3 	b.w	8023b90 <_raise_r>
 8023bea:	bf00      	nop
 8023bec:	20000038 	.word	0x20000038

08023bf0 <_kill_r>:
 8023bf0:	b538      	push	{r3, r4, r5, lr}
 8023bf2:	4d07      	ldr	r5, [pc, #28]	@ (8023c10 <_kill_r+0x20>)
 8023bf4:	2300      	movs	r3, #0
 8023bf6:	4604      	mov	r4, r0
 8023bf8:	4608      	mov	r0, r1
 8023bfa:	4611      	mov	r1, r2
 8023bfc:	602b      	str	r3, [r5, #0]
 8023bfe:	f7de fe67 	bl	80028d0 <_kill>
 8023c02:	1c43      	adds	r3, r0, #1
 8023c04:	d102      	bne.n	8023c0c <_kill_r+0x1c>
 8023c06:	682b      	ldr	r3, [r5, #0]
 8023c08:	b103      	cbz	r3, 8023c0c <_kill_r+0x1c>
 8023c0a:	6023      	str	r3, [r4, #0]
 8023c0c:	bd38      	pop	{r3, r4, r5, pc}
 8023c0e:	bf00      	nop
 8023c10:	200026b4 	.word	0x200026b4

08023c14 <_getpid_r>:
 8023c14:	f7de be54 	b.w	80028c0 <_getpid>

08023c18 <__swhatbuf_r>:
 8023c18:	b570      	push	{r4, r5, r6, lr}
 8023c1a:	460c      	mov	r4, r1
 8023c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c20:	2900      	cmp	r1, #0
 8023c22:	b096      	sub	sp, #88	@ 0x58
 8023c24:	4615      	mov	r5, r2
 8023c26:	461e      	mov	r6, r3
 8023c28:	da0d      	bge.n	8023c46 <__swhatbuf_r+0x2e>
 8023c2a:	89a3      	ldrh	r3, [r4, #12]
 8023c2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023c30:	f04f 0100 	mov.w	r1, #0
 8023c34:	bf14      	ite	ne
 8023c36:	2340      	movne	r3, #64	@ 0x40
 8023c38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023c3c:	2000      	movs	r0, #0
 8023c3e:	6031      	str	r1, [r6, #0]
 8023c40:	602b      	str	r3, [r5, #0]
 8023c42:	b016      	add	sp, #88	@ 0x58
 8023c44:	bd70      	pop	{r4, r5, r6, pc}
 8023c46:	466a      	mov	r2, sp
 8023c48:	f000 f848 	bl	8023cdc <_fstat_r>
 8023c4c:	2800      	cmp	r0, #0
 8023c4e:	dbec      	blt.n	8023c2a <__swhatbuf_r+0x12>
 8023c50:	9901      	ldr	r1, [sp, #4]
 8023c52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023c56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023c5a:	4259      	negs	r1, r3
 8023c5c:	4159      	adcs	r1, r3
 8023c5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023c62:	e7eb      	b.n	8023c3c <__swhatbuf_r+0x24>

08023c64 <__smakebuf_r>:
 8023c64:	898b      	ldrh	r3, [r1, #12]
 8023c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023c68:	079d      	lsls	r5, r3, #30
 8023c6a:	4606      	mov	r6, r0
 8023c6c:	460c      	mov	r4, r1
 8023c6e:	d507      	bpl.n	8023c80 <__smakebuf_r+0x1c>
 8023c70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023c74:	6023      	str	r3, [r4, #0]
 8023c76:	6123      	str	r3, [r4, #16]
 8023c78:	2301      	movs	r3, #1
 8023c7a:	6163      	str	r3, [r4, #20]
 8023c7c:	b003      	add	sp, #12
 8023c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c80:	ab01      	add	r3, sp, #4
 8023c82:	466a      	mov	r2, sp
 8023c84:	f7ff ffc8 	bl	8023c18 <__swhatbuf_r>
 8023c88:	9f00      	ldr	r7, [sp, #0]
 8023c8a:	4605      	mov	r5, r0
 8023c8c:	4639      	mov	r1, r7
 8023c8e:	4630      	mov	r0, r6
 8023c90:	f7ff faba 	bl	8023208 <_malloc_r>
 8023c94:	b948      	cbnz	r0, 8023caa <__smakebuf_r+0x46>
 8023c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023c9a:	059a      	lsls	r2, r3, #22
 8023c9c:	d4ee      	bmi.n	8023c7c <__smakebuf_r+0x18>
 8023c9e:	f023 0303 	bic.w	r3, r3, #3
 8023ca2:	f043 0302 	orr.w	r3, r3, #2
 8023ca6:	81a3      	strh	r3, [r4, #12]
 8023ca8:	e7e2      	b.n	8023c70 <__smakebuf_r+0xc>
 8023caa:	89a3      	ldrh	r3, [r4, #12]
 8023cac:	6020      	str	r0, [r4, #0]
 8023cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023cb2:	81a3      	strh	r3, [r4, #12]
 8023cb4:	9b01      	ldr	r3, [sp, #4]
 8023cb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023cba:	b15b      	cbz	r3, 8023cd4 <__smakebuf_r+0x70>
 8023cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023cc0:	4630      	mov	r0, r6
 8023cc2:	f000 f81d 	bl	8023d00 <_isatty_r>
 8023cc6:	b128      	cbz	r0, 8023cd4 <__smakebuf_r+0x70>
 8023cc8:	89a3      	ldrh	r3, [r4, #12]
 8023cca:	f023 0303 	bic.w	r3, r3, #3
 8023cce:	f043 0301 	orr.w	r3, r3, #1
 8023cd2:	81a3      	strh	r3, [r4, #12]
 8023cd4:	89a3      	ldrh	r3, [r4, #12]
 8023cd6:	431d      	orrs	r5, r3
 8023cd8:	81a5      	strh	r5, [r4, #12]
 8023cda:	e7cf      	b.n	8023c7c <__smakebuf_r+0x18>

08023cdc <_fstat_r>:
 8023cdc:	b538      	push	{r3, r4, r5, lr}
 8023cde:	4d07      	ldr	r5, [pc, #28]	@ (8023cfc <_fstat_r+0x20>)
 8023ce0:	2300      	movs	r3, #0
 8023ce2:	4604      	mov	r4, r0
 8023ce4:	4608      	mov	r0, r1
 8023ce6:	4611      	mov	r1, r2
 8023ce8:	602b      	str	r3, [r5, #0]
 8023cea:	f7de fe51 	bl	8002990 <_fstat>
 8023cee:	1c43      	adds	r3, r0, #1
 8023cf0:	d102      	bne.n	8023cf8 <_fstat_r+0x1c>
 8023cf2:	682b      	ldr	r3, [r5, #0]
 8023cf4:	b103      	cbz	r3, 8023cf8 <_fstat_r+0x1c>
 8023cf6:	6023      	str	r3, [r4, #0]
 8023cf8:	bd38      	pop	{r3, r4, r5, pc}
 8023cfa:	bf00      	nop
 8023cfc:	200026b4 	.word	0x200026b4

08023d00 <_isatty_r>:
 8023d00:	b538      	push	{r3, r4, r5, lr}
 8023d02:	4d06      	ldr	r5, [pc, #24]	@ (8023d1c <_isatty_r+0x1c>)
 8023d04:	2300      	movs	r3, #0
 8023d06:	4604      	mov	r4, r0
 8023d08:	4608      	mov	r0, r1
 8023d0a:	602b      	str	r3, [r5, #0]
 8023d0c:	f7de fe50 	bl	80029b0 <_isatty>
 8023d10:	1c43      	adds	r3, r0, #1
 8023d12:	d102      	bne.n	8023d1a <_isatty_r+0x1a>
 8023d14:	682b      	ldr	r3, [r5, #0]
 8023d16:	b103      	cbz	r3, 8023d1a <_isatty_r+0x1a>
 8023d18:	6023      	str	r3, [r4, #0]
 8023d1a:	bd38      	pop	{r3, r4, r5, pc}
 8023d1c:	200026b4 	.word	0x200026b4

08023d20 <_init>:
 8023d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d22:	bf00      	nop
 8023d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023d26:	bc08      	pop	{r3}
 8023d28:	469e      	mov	lr, r3
 8023d2a:	4770      	bx	lr

08023d2c <_fini>:
 8023d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d2e:	bf00      	nop
 8023d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023d32:	bc08      	pop	{r3}
 8023d34:	469e      	mov	lr, r3
 8023d36:	4770      	bx	lr
